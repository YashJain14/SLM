{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to determine the URL that a local Git repository was originally cloned from\n\nI pulled a project with several forks on GitHub, but forgot which fork it was. How do I determine which fork I pulled?"}, {"role": "assistant", "content": "To obtain only the remote URL:\ngit config --get remote.origin.url\n\nIf you require full output, and you are on a network that can reach the remote repo where the origin resides:\ngit remote show origin\n\nWhen using git clone (from GitHub, or any source repository for that matter) the default name for the source of the clone is \"origin\". Using git remote show will display the information about this remote name. The first few lines should show:\nC:\\Users\\jaredpar\\VsVim> git remote show origin\n* remote origin\n  Fetch URL: [email\u00a0protected]:jaredpar/VsVim.git\n  Push  URL: [email\u00a0protected]:jaredpar/VsVim.git\n  HEAD branch: master\n  Remote branches:\n\nIf you want to use the value in a script, you would use the first command listed in this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I update or sync a forked repository on GitHub?\n\nI forked a project, made changes, and created a pull request which was accepted. New commits were later added to the repository. How do I get those commits into my fork?"}, {"role": "assistant", "content": "In your local clone of your forked repository, you can add the original GitHub repository as a \"remote\".  (\"Remotes\" are like nicknames for the URLs of repositories - origin is one, for example.)  Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version.  In terms of commands that might look like:\n# Add the remote, call it \"upstream\":\n\ngit remote add upstream https://github.com/whoever/whatever.git\n\n# Fetch all the branches of that remote into remote-tracking branches\n\ngit fetch upstream\n\n# Make sure that you're on your main branch:\n\ngit checkout main\n\n# Rewrite your main branch so that any commits of yours that\n# aren't already in upstream/main are replayed on top of that\n# other branch:\n\ngit rebase upstream/main\n\nIf you don't want to rewrite the history of your main branch, (for example because other people may have cloned it) then you should replace the last command with git merge upstream/main.  However, for making further pull requests that are as clean as possible, it's probably better to rebase.\n\nIf you've rebased your branch onto upstream/main you may need to force the push in order to push it to your own forked repository on GitHub.  You'd do that with:\ngit push -f origin main\n\nYou only need to use the -f the first time after you've rebased."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add images to README.md on GitHub?\n\nRecently I joined GitHub. I hosted some projects there.\nI need to include some images in my README File. I don't know how to do that.\nI searched about this, but all I got was some links which tell me to \"host images on web and specify the image path in README.md file\".\nIs there any way to do this without hosting the images on any third-party web hosting services?"}, {"role": "assistant", "content": "Try this markdown:\n![alt text](http://url/to/img.png)\n\nI think you can link directly to the raw version of an image if it's stored in your repository. i.e.\n![alt text](https://github.com/[username]/[reponame]/blob/[branch]/image.jpg?raw=true)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to cache https credentials for pushing commits?\n\nI recently switched to synchronizing my repositories to https:// on GitHub (due to firewall issues), and it asks for a password every time.\nIs there a way to cache the credentials, instead of authenticating every time that git push?"}, {"role": "assistant", "content": "Since Git 1.7.9 (released 2012), there is a neat mechanism in Git to avoid having to type your password all the time for HTTP / HTTPS, called credential helpers.\nYou can just use one of the following credential helpers:\ngit config --global credential.helper cache\n\nThe credential.helper cache value tells Git to keep your password cached in memory for a particular amount of minutes. The default is 15 minutes, you can set a longer timeout with:\n# Cache for 1 hour\ngit config --global credential.helper \"cache --timeout=3600\"\n\n# Cache for 1 day\ngit config --global credential.helper \"cache --timeout=86400\"\n\n# Cache for 1 week\ngit config --global credential.helper \"cache --timeout=604800\"\n\nYou can also store your credentials permanently if so desired, see the other answers below.\nGitHub's help also suggests that if you're on Mac OS X and used Homebrew to install Git, you can use the native Mac\u00a0OS\u00a0X keystore with:\ngit config --global credential.helper osxkeychain\n\nFor Windows, there is a helper called Git Credential Manager for Windows or wincred in msysgit.\ngit config --global credential.helper wincred # obsolete\n\nWith Git for Windows 2.7.3+ (March 2016):\ngit config --global credential.helper manager\n\nFor Linux, you would use (in 2011) gnome-keyring(or other keyring implementation such as KWallet).\nNowadays (2020), that would be (on Linux)\nFedora\nsudo dnf install git-credential-libsecret\ngit config --global credential.helper /usr/libexec/git-core/git-credential-libsecret\n\nUbuntu\nsudo apt-get install libsecret-1-0 libsecret-1-dev\ncd /usr/share/doc/git/contrib/credential/libsecret\nsudo make\ngit config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove a commit on GitHub? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nUndoing a 'git push'\n\n                                (17 answers)\n                            \n\nClosed 4 years ago.\nThe community reviewed whether to reopen this question 8 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\nI \"accidentally\" pushed a commit to GitHub.\nIs it possible to remove this commit?\nI want to revert my GitHub repository as it was before this commit."}, {"role": "assistant", "content": "Note: please see an alternative to git rebase -i in the comments below\u2014\ngit reset --soft HEAD^\n\nFirst, remove the commit on your local repository. You can do this using git rebase -i. For example, if it's your last commit, you can do git rebase -i HEAD~2 and delete the second line within the editor window that pops up.\nThen, force push to GitHub by using git push origin +branchName --force\nSee Git Magic Chapter 5: Lessons of History - And Then Some for more information (i.e. if you want to remove older commits).\nOh, and if your working tree is dirty, you have to do a git stash first, and then a git stash apply after."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Download a single folder or directory from a GitHub repository\n\nHow can I download only a specific folder or directory from a remote Git repository hosted on GitHub?\nSay the example GitHub repository lives here:\n[email\u00a0protected]:foobar/Test.git\n\nIts directory structure:\nTest/\n\u251c\u2500\u2500 foo/\n\u2502   \u251c\u2500\u2500 a.py\n\u2502   \u2514\u2500\u2500 b.py\n\u2514\u2500\u2500 bar/\n    \u251c\u2500\u2500 c.py\n    \u2514\u2500\u2500 d.py\n\nI want to download only the foo folder and not clone the whole Test project."}, {"role": "assistant", "content": "Update April 2021: there are a few tools created by the community that can do this for you:\n\nDownload Directory (Credits to fregante)\n\nIt has also been integrated into the excellent Refined GitHub Chrome extension as a button in the GitHub web user interface.\n\n\nGitZip (Credits to Kino\u2014see his answer here)\nDownGit (Credits to Minhas Kamal\u2014see his answer here)\n\nNote: if you're trying to download a large number of files, you may need to provide a token to these tools to avoid rate limiting.\n\nOriginal (manual) approach: Checking out an individual directory is not supported by Git natively, but GitHub can do this via Subversion (SVN). If you checkout your code with Subversion, GitHub will essentially convert the repository from Git to Subversion on the backend, and then serve up the requested directory.\nHere's how you can use this feature to download a specific folder. I'll use the popular JavaScript library Lodash as an example.\n\nNavigate to the folder you want to download. Let's download /test from master branch.\n\n\nModify the URL for subversion. Replace tree/master with trunk.\nhttps://github.com/lodash/lodash/tree/master/test \u279c\nhttps://github.com/lodash/lodash/trunk/test\n\nDownload the folder. Go to the command line and grab the folder with SVN.\nsvn checkout https://github.com/lodash/lodash/trunk/test\n\n\n\nYou might not see any activity immediately because GitHub takes up to 30 seconds to convert larger repositories, so be patient.\n\nFull URL format explanation:\n\nIf you're interested in master branch, use trunk instead. So the full path is trunk/foldername\nIf you're interested in foo branch, use branches/foo instead. The\nfull path looks like branches/foo/foldername\nPro tip: You can use svn ls to see available tags and branches before downloading if you wish\n\n\nThat's all! GitHub supports more Subversion features as well, including support for committing and pushing changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find a deleted file in the project commit history?\n\nOnce upon a time, there was a file in my project that I would now like to be able to get.\nThe problem is: I have no idea of when have I deleted it and on which path it was.\nHow can I locate the commits of this file when it existed?"}, {"role": "assistant", "content": "If you do not know the exact path you may use\ngit log --all --full-history -- \"**/thefile.*\"\n\nIf you know the path the file was at, you can do this:\ngit log --all --full-history -- <path-to-file>\n\nThis should show a list of commits in all branches which touched that file. Then, you can find the version of the file you want, and display it with...\ngit show <SHA> -- <path-to-file>\n\nOr restore it into your working copy with:\ngit checkout <SHA>^ -- <path-to-file>\nNote the caret symbol (^), which gets the checkout prior to the one identified, because at the moment of <SHA> commit the file is deleted, we need to look at the previous commit to get the deleted file's contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push requires username and password\n\nI cloned a Git repository from my GitHub account to my PC.\nI want to work with both my PC and laptop, but with one GitHub account.\nWhen I try to push to or pull from GitHub using my PC, it requires a username and password, but not when I'm using the\u00a0laptop!\nI don't want to type my username and password every time I interact with\u00a0origin. What am I missing\u00a0here?"}, {"role": "assistant", "content": "A common cause is cloning using the default (HTTPS) instead of SSH. You can correct this by going to your repository, clicking \"Clone or download\", then clicking the \"Use SSH\" button above the URL field and updating the URL of your origin remote like this:\ngit remote set-url origin [email\u00a0protected]:username/repo.git\n\nYou can check if you have added the remote as HTTPS or SSH using:\ngit remote -v\n\nThis is documented at GitHub: Switching remote URLs from HTTPS to SSH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Message \"Support for password authentication was removed.\"\n\nI got this error on my console when I tried to use git pull:\n\nremote: Support for password authentication was removed on August 13, 2021.\nremote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.\nfatal: Authentication failed for ...\n\nIt's very weird, because I just followed the documentation and created a token two weeks ago on GitHub. The token expires on Tue, Oct 26, 2021. Why has this been removed today?"}, {"role": "assistant", "content": "From 2021-08-13, GitHub is no longer accepting account passwords when authenticating Git operations. You need to add a PAT (Personal Access Token) instead, and you can follow the below method to add a PAT on your system.\n\nCreate Personal Access Token on GitHub\nFrom your GitHub account, go to Settings \u2192 Developer Settings \u2192 Personal Access Token \u2192 Tokens (classic) \u2192 Generate New Token (Give your password) \u2192 Fillup the form \u2192 click Generate token \u2192 Copy the generated Token, it will be something like ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta\n\nNow follow the below method based on your machine:\n\nFor Windows OS \u2934\nGo to Credential Manager from Control Panel \u2192 Windows Credentials \u2192 find git:https://github.com \u2192 Edit \u2192 On Password replace with with your GitHub Personal Access Token \u2192 You are Done\n\nIf you don\u2019t find git:https://github.com \u2192 Click on Add a generic credential \u2192 Internet address will be git:https://github.com and you need to type in your username and password will be your GitHub Personal Access Token \u2192 Click Ok and you are done\n\n\n\nFor macOS \u2934\nClick on the Spotlight icon (magnifying glass) on the right side of the menu bar. Type Keychain access then press the Enter key to launch the app \u2192 In Keychain Access, search for github.com \u2192 Find the internet password entry for github.com \u2192 Edit or delete the entry accordingly \u2192 You are done\n\n\n\nFor a Linux-based OS \u2934\nFor Linux, you need to configure the local GIT client with a username\nand email address,\n$ git config --global user.name \"your_github_username\"\n$ git config --global user.email \"your_github_email\"\n$ git config -l\n\nOnce GIT is configured, we can begin using it to access GitHub.\nExample:\n$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n> Cloning into `YOUR-REPOSITORY`...\nUsername: <type your username>\nPassword: <type your password or personal access token (GitHub)\n\nNow cache the given record in your computer to remembers the token:\n$ git config --global credential.helper cache\n\nIf needed, anytime you can delete the cache record by:\n$ git config --global --unset credential.helper\n$ git config --system --unset credential.helper\n\nNow try to pull with -v to verify\n$ git pull -v\n\n\n\nLinux/Debian\n(Clone as follows):\ngit clone https://<tokenhere>@github.com/<user>/<repo>.git\n\n\n\n\nFor PhpStorm\nIf you are using PhpStorm, go to menu Git \u2192 pull and select authentication via Personal Access Token. Enter your PAT it will allow you to pull/push the changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create a tag in a GitHub repository\n\nI have a GitHub repository and I need to tag it.\nI created a tag in a shell using the following command:\ngit tag 2.0\ngit tag\n>>> 2.0\n\nThe tag does exist locally, but does not appear on GitHub.\nHow do I push this tag to GitHub?"}, {"role": "assistant", "content": "You can create tags for GitHub by either using:\n\nthe Git command line, or\nGitHub's web interface.\n\nCreating tags from the command line\nTo create a tag on your current branch, run this:\ngit tag <tagname>\n\nIf you want to include a description with your tag, add -a to create an annotated tag:\ngit tag <tagname> -a\n\nThis will create a local tag with the current state of the branch you are on. When pushing to your remote repo, tags are NOT included by default. You will need to explicitly say that you want to push your tags to your remote repo:\ngit push origin --tags\n\nFrom the official Linux Kernel Git documentation for git push:\n\n--tags\n\nAll refs under refs/tags are pushed, in addition to refspecs explicitly listed on the command line.\n\nOr if you just want to push a single tag:\ngit push origin <tag>\n\nSee also my answer to How do you push a tag to a remote repository using Git? for more details about that syntax above.\nCreating tags through GitHub's web interface\nYou can find GitHub's instructions for this at their Creating Releases help page. Here is a summary:\n\nClick the releases link on our repository page,\n\nClick on Create a new release or Draft a new release,\n\nFill out the form fields, then click Publish release at the bottom,\n\n\nAfter you create your tag on GitHub, you might want to fetch it into your local repository too:\ngit fetch\n\n\nNow next time, you may want to create one more tag within the same release from website. For that follow these steps:\nGo to release tab\n\nClick on edit button for the release\nProvide name of the new tag ABC_DEF_V_5_3_T_2 and hit tab\nAfter hitting tab, UI will show this message: Excellent! This tag will be created from the target when you publish this release. Also UI will provide an option to select the branch/commit\nSelect branch or commit\nCheck \"This is a pre-release\" checkbox for qa tag and uncheck it if the tag is created for Prod tag.\nAfter that click on \"Update Release\"\nThis will create a new Tag within the existing Release."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub relative link in Markdown file\n\nIs there a way to create a URL anchor, <a>, link from within a Markdown file, to another file within the same repository and branch (aka a link relative to the current branch)?\nFor example, in the master branch I have a README.md file, which I would like do something like:\n# My Project\nis really really cool. My Project has a subdir named myLib, see below.\n\n## myLib documentation\nsee documentation [here](myLib/README.md)\n\nThis would allow me to link from one .md to another within the same branch and not have to worry about which branch I'm in (avoid having to do an absolute URL that includes the github.com branch name).\nHere is a working example of what I mean:\n\nGOTO http://github.com/rynop/testRel, link does not work.\nGOTO http://github.com/rynop/testRel/blob/master/README.md, link works.\n\nThis is expected because at this point the starting URL is in the branch. Now how do I get it to pick up the current branch in the README.md at the root of the repository?\nUpdate: I opened an issue against GitHub for this feature request."}, {"role": "assistant", "content": "Update 30th, January 2013, 16 months later:\nGitHub Blog Post Relative links in markup files:\n\nStarting today, GitHub supports relative links in markup files.\nNow you can link directly between different documentation files, whether you view the documentation on GitHub itself, or locally, using a different markup renderer.\nYou want examples of link definitions and how they work? Here's some Markdown for you.\nInstead of an absolute link:\n[a link](https://github.com/user/repo/blob/branch/other_file.md)\n\n\u2026you can use a relative link:\n[a relative link](other_file.md)\n[a relative link](path%20with%20spaces/other_file.md)\n\nand we'll make sure it gets linked to user/repo/blob/branch/other_file.md.\nIf you were using a workaround like [a workaround link](repo/blob/master/other_file.md), you'll have to update your documentation to use the new syntax.\nThis also means your documentation can now easily stand on its own, without always pointing to GitHub.\n\nMarcono1234 adds in the comments\n\nAlso useful: When the link starts with a /, it is relative to the root of the repository (regardless of whether the markdown file is nested in subdirectories)\n\n\nUpdate December 20th, 2011:\nThe GitHub markup issue 84 is currently closed by technoweenie, with the comment:\n\nWe tried adding a <base> tag for this, but it causes problems with other relative links on the site.\n\n\nOctober 12th, 2011:\nIf you look at the raw source of the README.md of Markdown itself(!), relative paths don't seem to be supported.\nYou will find references like:\n[r2h]: http://github.com/github/markup/tree/master/lib/github/commands/rest2html\n[r2hc]: http://github.com/github/markup/tree/master/lib/github/markups.rb#L13\n\n\nAs noted in InvisibleWolf's answer, if the target link is a directory and it has space, then you need to use %20 for each space."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push results in \"Authentication Failed\"\n\nI have been using GitHub for a little while, and I have been fine with git add, git commit, and git push, so far without any problems. Suddenly I am having an error that says:\n\nfatal: Authentication Failed\n\nIn the terminal I cloned a repository, worked on a file and then I used git add to add the file to the commit log and when I did git commit, it worked fine. Finally, git push asks for username and password. I put those in correctly and every time I do this, it says the same error.\nWhat is the cause of this problem and how can I fix it?\nThe contents of .git/config are:\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = http://www.github.com/######/Random-Python-Tests\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n[user]\n        name = #####\n        email = ############"}, {"role": "assistant", "content": "If you enabled two-factor authentication in your GitHub account you\nwon't be able to push via HTTPS using your accounts password. Instead\nyou need to generate a personal access token. This can be done in the\napplication settings of your GitHub account. Using this token as your\npassword should allow you to push to your remote repository via HTTPS.\nUse your username as usual.\n\nCreating a personal access token\nYou may also need to update the origin for your repository if it is set to HTTPS. Do this to switch to SSH:\ngit remote -v\ngit remote set-url origin [email\u00a0protected]:USERNAME/REPONAME.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install an npm package from GitHub directly\n\nTrying to install modules from GitHub results in this error:\n\nENOENT error on package.json.\n\nEasily reproduced using express:\nnpm install https://github.com/visionmedia/express throws error.\nnpm install express  works.\nWhy can't I install from GitHub?\nHere is the console output:\nnpm http GET https://github.com/visionmedia/express.git\nnpm http 200 https://github.com/visionmedia/express.git\nnpm ERR! not a package /home/guym/tmp/npm-32312/1373176518024-0.6586997057311237/tmp.tgz\nnpm ERR! Error: ENOENT, open '/home/guym/tmp/npm-32312/1373176518024-0.6586997057311237/package/package.json'\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     <http://github.com/isaacs/npm/issues>\nnpm ERR! or email it to:\nnpm ERR!     <[email\u00a0protected]>\n\nnpm ERR! System Linux 3.8.0-23-generic\nnpm ERR! command \"/usr/bin/node\" \"/usr/bin/npm\" \"install\" \"https://github.com/visionmedia/express.git\"\nnpm ERR! cwd /home/guym/dev_env/projects_GIT/proj/somename\nnpm ERR! node -v v0.10.10\nnpm ERR! npm -v 1.2.25\nnpm ERR! path /home/guym/tmp/npm-32312/1373176518024-0.6586997057311237/package/package.json\nnpm ERR! code ENOENT\nnpm ERR! errno 34\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/guym/dev_env/projects_GIT/proj/somename/npm-debug.log\nnpm ERR! not ok code 0"}, {"role": "assistant", "content": "Because https://github.com/visionmedia/express is the URL of a web page and not an npm module. Use this flavor:     git+{url}.git\ngit+https://github.com/visionmedia/express.git\n\nor this flavor if you need SSH:\ngit+ssh://[email\u00a0protected]/visionmedia/express.git\n\nor if you need to install a GitHub Enterprise repository:\ngit+https://<github enterprise url>/<org>/<repo>.git#<branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Error Message - Permission denied (publickey)\n\nAnybody seen this error and know what to do?\nI'm using the terminal, I'm in the root, the GitHub repository exists and I don't know what to do now.\n> git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists."}, {"role": "assistant", "content": "GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.\nYou can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.\nFurther, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.\nTo solve it:\n\nYou should have a public key in your home directory, thus print the content of your public key, in Linux distro run for example cat ~/.ssh/id_rsa.pub (if the prior doesn't work, check the keys inside ~/.ssh/ with .pub extension)\n\nAdd the content of such a public key to your Github account: click your profile photo -> Settings-> SSH and GPG keys -> New SSH key or Add SSH key"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Calculate RSA key fingerprint\n\nI need to do the SSH key audit for GitHub, but I am not sure how do find my RSA key fingerprint. I originally followed a guide to generate an SSH key on Linux.\nWhat is the command I need to enter to find my current RSA key fingerprint?"}, {"role": "assistant", "content": "Run the following command to retrieve the SHA256 fingerprint of your SSH key (-l means \"list\" instead of create a new key, -f means \"filename\"):\n$ ssh-keygen -lf /path/to/ssh/key\n\nSo for example, on my machine the command I ran was (using RSA public key):\n$ ssh-keygen -lf ~/.ssh/id_rsa.pub\n2048 00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff /Users/username/.ssh/id_rsa.pub (RSA)\n\nTo get the GitHub (MD5) fingerprint format with newer versions of ssh-keygen, run:\n$ ssh-keygen -E md5 -lf <fileName>\n\nBonus information:\nssh-keygen -lf also works on known_hosts and authorized_keys files.\nTo find most public keys on Linux/Unix/OS\u00a0X systems, run\n$ find /etc/ssh /home/*/.ssh /Users/*/.ssh -name '*.pub' -o -name 'authorized_keys' -o -name 'known_hosts'\n\n(If you want to see inside other users' homedirs, you'll have to be root or sudo.)\nThe ssh-add -l is very similar, but lists the fingerprints of keys added to your agent. (OS\u00a0X users take note that magic passwordless SSH via Keychain is not the same as using ssh-agent.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git error: failed to push some refs to remote\n\nI can't push now, though I could do it yesterday.\nWhen I use git push origin master, I get an error:\n$ git remote -v\norigin  https://github.com/REDACTED.git (fetch)\norigin  https://github.com/REDACTED.git (push)\n\n$ git push origin master\nUsername for 'https://github.com': REDACTED\nPassword for 'https://[email\u00a0protected]':\nTo https://github.com/REDACTED.git\n! [rejected]         master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/REDACTED.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nWhat my working directory and remote repository looks like:"}, {"role": "assistant", "content": "(Note: starting Oct. 2020, any new repository is created with the default branch main, not master. And you can rename existing repository default branch from master to main.\nThe rest of this 2014 answer has been updated to use \"main\")\n(The following assumes github.com itself is not down, as eri0o points out in the comments: see www.githubstatus.com to be sure)\nIf the GitHub repo has seen new commits pushed to it, while you were working locally, I would advise using:\ngit pull --rebase\ngit push\n\nThe full syntax is:\ngit pull --rebase origin main\ngit push origin main\n\nWith Git 2.6+ (Sept. 2015), after having done (once)\ngit config --global pull.rebase true\ngit config --global rebase.autoStash true\n\nA simple git pull would be enough.\n(Note: with Git 2.27 Q2 2020, a merge.autostash is also available for your regular pull, without rebase)\nThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/main (or origin/yourBranch: git pull origin yourBranch).\nSee a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.\nI would recommend a:\n# add and commit first\n#\ngit push -u origin main\n\n# Or git 2.37 Q2 2022+\ngit config --global push.autoSetupRemote true\ngit push\n\nThat would establish a tracking relationship between your local main branch and its upstream branch.\nAfter that, any future push for that branch can be done with a simple:\ngit push\n\nAgain, with Git 2.37+ and its global option push.autoSetupRemote, a simple git push even for the first one would do the same (I.e: establishing a tracking relationship between your local main branch and its upstream branch origin/main).\nSee \"Why do I need to explicitly push a new branch?\".\n\nSince the OP already reset and redone its commit on top of origin/main:\ngit reset --mixed origin/main\ngit add .\ngit commit -m \"This is a new commit for what I originally planned to be amended\"\ngit push origin main\n\nThere is no need to pull --rebase.\nNote: git reset --mixed origin/main can also be written git reset origin/main, since the --mixed option is the default one when using git reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - remote add origin vs remote set-url origin\n\nI create a new repository:\ngit init\necho \"# MESSAGE\" >> README.md\ngit add README.md\ngit commit -m \"first commit\"\n\nThen I want to push my commit to the empty remote repository created on github so I have to set remote.\nWhat is difference between using following commands ? :\ngit remote add origin [email\u00a0protected]:User/UserRepo.git\ngit remote set-url origin [email\u00a0protected]:User/UserRepo.git\n\nAt the end I perform push:\ngit push -u origin master\n\nWhat happens when I call git remote set-url origin just after git init? Does git remote set-url origin create origin? If origin already exists after git init there is no difference between using those commands in my scenario, right?"}, {"role": "assistant", "content": "below is used to add a new remote:\ngit remote add \"origin\" [email\u00a0protected]:User/UserRepo.git\n\nbelow is used to change the url of an existing remote repository:\ngit remote set-url \"origin\" [email\u00a0protected]:User/UserRepo.git\n\nbelow will push your code to the master branch of the remote repository defined with \"origin\" and -u let you point your current local branch to the remote master branch:\ngit push -u origin main\n\nDocumentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "There is no tracking information for the current branch\n\nI've been using github from a relatively short period, and I've always used the client to perform commits and pulls. I decided to try it from the git bash yesterday, and I successfully created a new repo and committed files.\nToday I did changes to the repository from another computer, I've committed the changes and now I'm back home and performed a git pull to update my local version and I get this:\nThere is no tracking information for the current branch.\n    Please specify which branch you want to merge with.\n    See git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream develop origin/<branch>\n\nthe only contributor to this repo is me and there are no branches (just a master). I'm on windows and I've performed the pull from git bash:\n\ngit status:\n$ git status\n# On branch master\nnothing to commit, working directory clean\n\ngit branch:\n$ git branch\n* master\n\nWhat am I doing wrong?"}, {"role": "assistant", "content": "You could specify what branch you want to pull:\ngit pull origin master\n\nOr you could set it up so that your local master branch tracks github master branch as an upstream:\ngit branch --set-upstream-to=origin/master master\ngit pull\n\nThis branch tracking is set up for you automatically when you clone a repository (for the default branch only), but if you add a remote to an existing repository you have to set up the tracking yourself. Thankfully, the advice given by git makes that pretty easy to remember how to do."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Link to the issue number on GitHub within a commit message\n\nIs it somehow possible to automatically have a link to GitHub issue number in the git commit message?"}, {"role": "assistant", "content": "Just include #xxx in your commit message to reference an issue without closing it.\nWith new GitHub issues 2.0 you can use these synonyms to reference an issue and close it (in your commit message):\n\nfix #xxx\nfixes #xxx\nfixed #xxx\nclose #xxx\ncloses #xxx\nclosed #xxx\nresolve #xxx\nresolves #xxx\nresolved #xxx\n\nYou can also substitute #xxx with gh-xxx.\nReferencing and closing issues across repos also works:\nfixes user/repo#xxx\n\nCheck out the documentation available in their Help section."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Download single files from GitHub\n\nWhat are some tips on downloading a single file from a GitHub repo?\nI don't want the URL for displaying the raw file; in the case of binaries, there's nothing.\nhttp://support.github.com/discussions/feature-requests/41-download-single-file\nIs it even possible to use GitHub as a \"download server\"?\nIf we decide to switch to Google Code, is the mentioned functionality presented there?\nOr is there any free-of-charge hosting and VCS for open-source projects?"}, {"role": "assistant", "content": "Go to the file you want to download.\nClick it to view the contents within the GitHub UI.\nIn the top right, right click the Raw button.\nSave as..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cherry-pick only changes to certain files?\n\nIf I want to merge into a Git branch the changes made only to some of the files changed in a particular commit which includes changes to multiple files, how can this be achieved?\nSuppose the Git commit called stuff has changes to files A, B, C, and D but I want to merge only stuff's changes to files A and B. It sounds like a job for git cherry-pick but cherry-pick only knows how to merge entire commits, not a subset of the files."}, {"role": "assistant", "content": "I'd do it with cherry-pick -n (--no-commit) which lets you inspect (and modify) the result before committing:\ngit cherry-pick -n <commit>\n\n# unstage modifications you don't want to keep, and remove the\n# modifications from the work tree as well.\n# this does work recursively!\ngit checkout HEAD <path>\n\n# commit; the message will have been stored for you by cherry-pick\ngit commit\n\nIf the vast majority of modifications are things you don't want, instead of checking out individual paths (the middle step), you could reset everything back, then add in what you want:\n# unstage everything\ngit reset HEAD\n\n# stage the modifications you do want\ngit add <path>\n\n# make the work tree match the index\n# (do this from the top level of the repo)\ngit checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Make the current commit the only (initial) commit in a Git repository?\n\nI  currently have a local Git repository, which I push to a Github repository.\nThe local repository has ~10 commits, and the Github repository is a synchronised duplicate of this.\nWhat I'd like to do is remove ALL the version history from the local Git repository, so the current contents of the repository appear as the only commit (and therefore older versions of files within the repository are not stored). \nI'd then like to push these changes to Github.\nI have investigated Git rebase, but this appears to be more suited to removing specific versions.\nAnother potential solution is to delete the local repo, and create a new one - though this would probably create a lot of work!\nETA: There are specific directories / files that are untracked - if possible I would like to maintain the untracking of these files."}, {"role": "assistant", "content": "Here's the brute-force approach. It also removes the configuration of the repository.\nNote: This does NOT work if the repository has submodules! If you are using submodules, you should use e.g. interactive rebase\nStep 1: remove all history (Make sure you have a backup, this cannot be reverted)\ncat .git/config  # save your <github-uri> somewhere\nrm -rf .git\n\nStep 2: reconstruct the Git repo with only the current content\nBefore step 2 if you have not set up init.defaultBranch configuration then, please do it via git config --global init.defaultBranch <branch-name> you may choose main as <branch-name> in the current example\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n\nStep 3: push to GitHub.\ngit remote add origin <github-uri>\ngit push -u --force origin main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to draw checkbox or tick mark in GitHub Markdown table?\n\nI am able to draw checkbox in Github README.md lists using\n- [ ] (for unchecked checkbox)\n- [x] (for checked checkbox)\n\nBut this is not working in table. Does anybody know how to implement checkbox or checkmark in GitHub Markdown table?"}, {"role": "assistant", "content": "Try adding a -  before the [ ] or [x]. That's an - followed by a blank space  . An unchecked box also need a space   between the brackets.\nBelow is an example from Github blog.\n### Solar System Exploration, 1950s \u2013 1960s\n\n- [ ] Mercury\n- [x] Venus\n- [x] Earth (Orbit/Moon)\n- [x] Mars\n- [ ] Jupiter\n- [ ] Saturn\n- [ ] Uranus\n- [ ] Neptune\n- [ ] Comet Haley\n\nIt appears like below:\n\nHere's how one could do the same in a table:\n| Task           | Time required | Assigned to   | Current Status | Finished | \n|----------------|---------------|---------------|----------------|-----------|\n| Calendar Cache | > 5 hours  |  | in progress | - [x] ok?\n| Object Cache   | > 5 hours  |  | in progress | [x] item1<br/>[ ] item2\n| Object Cache   | > 5 hours  |  | in progress | <ul><li>- [x] item1</li><li>- [ ] item2</li></ul>\n| Object Cache   | > 5 hours  |  | in progress | <ul><li>[x] item1</li><li>[ ] item2</li></ul>\n\n\n- [x] works\n- [x] works too\n\nHere's how it looks:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can you get the number of lines of code from a GitHub repository?\n\nIn a GitHub repository you can see \u201clanguage statistics\u201d, which displays the percentage of the project that\u2019s written in a language. It doesn\u2019t, however, display how many lines of code the project consists of. Often, I want to quickly get an impression of the scale and complexity of a project, and the count of lines of code can give a good first impression. 500 lines of code implies a relatively simple project, 100,000 lines of code implies a very large/complicated project.\nSo, is it possible to get the lines of code written in the various languages from a GitHub repository, preferably without cloning it?\n\nThe question \u201cCount number of lines in a git repository\u201d asks how to count the lines of code in a local Git repository, but:\n\nYou have to clone the project, which could be massive. Cloning a project like Wine, for example, takes ages.\nYou would count lines in files that wouldn\u2019t necessarily be code, like i13n files.\nIf you count just (for example) Ruby files, you\u2019d potentially miss massive amount of code in other languages, like JavaScript. You\u2019d have to know beforehand which languages the project uses. You\u2019d also have to repeat the count for every language the project uses.\n\nAll in all, this is potentially far too time-intensive for \u201cquickly checking the scale of a project\u201d."}, {"role": "assistant", "content": "You can run something like\n\ngit ls-files | xargs wc -l\n\nWhich will give you the total count!\n\nYou can also add more instructions. Like just looking at the JavaScript files.\ngit ls-files | grep '\\.js' | xargs wc -l"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When does Git refresh the list of remote branches?\n\nUsing git branch --all shows all remote and local branches. When does Git refresh this list?\nOn pull/push? And how do I refresh it using Git Bash?"}, {"role": "assistant", "content": "To update the local list of remote branches:\ngit remote update origin --prune\n\nTo show all local and remote branches that (local) Git knows about:\ngit branch -a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git asks for username every time I push\n\nWhenever I try to push into my repo git asks for both username & password. \nI have no problem in re-entering my password each time but the problem is in entering username. I use https to clone my repository.\nSo, how can I configure git so that it doesn't asks for username on each git push.\nI am new to linux but IIRC in windows git push only asks for password."}, {"role": "assistant", "content": "Edit (by @dk14 as suggested by moderators and comments)\nWARNING: If you use credential.helper store from the answer, your password is going to be stored completely unencrypted (\"as is\") at ~/.git-credentials. Please consult the comments section below or the answers from the \"Linked\" section, especially if your employer has zero tolerance for security issues.\nEven though accepted, it doesn't answer the actual OP's question about omitting a username only (not password). For the readers with that exact problem @grawity's answer might come in handy.\n\nOriginal answer (by @Alexander Zhu):\nYou can store your credentials using the following command\n$ git config credential.helper store\n$ git push http://example.com/repo.git\nUsername: <type your username>\nPassword: <type your password>\n\nAlso I suggest you to read\n$ git help credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull new updates from original GitHub repository into forked GitHub repository\n\nI forked someone's repository on GitHub and would like to update my version with commits and updates made in the original repository. These were made after I forked my copy.\nHow can I pull in the changes that were made in the origin and incorporate them into my repository?"}, {"role": "assistant", "content": "You have to add the original repository (the one you forked) as a remote.\nFrom the GitHub documentation on forking a repository:\n\n\nOnce the clone is complete your repo will have a remote named \u201corigin\u201d that points to your fork on GitHub.\nDon\u2019t let the name confuse you, this does not point to the original repo you forked from. To help you keep track of that repo we will add another remote named \u201cupstream\u201d:\n$ cd PROJECT_NAME\n$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n$ git fetch upstream\n\n# then: (like \"git pull\" which is fetch + merge)\n$ git merge upstream/master master\n\n# or, better, replay your local work on top of the fetched branch\n# like a \"git pull --rebase\"\n$ git rebase upstream/master\n\n\nThere's also a command-line tool (gh) which can facilitate the operations above.\nHere's a visual of how it works:\n\nSee also \"Are Git forks actually Git clones?\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove directory from remote repository after adding them to .gitignore\n\nI committed and pushed some directory to github. After that, I altered the .gitignore file adding a directory that should be ignored. Everything works fine, but the (now ignored) directory stays on github.\nHow do I delete that directory from github and the repository history?"}, {"role": "assistant", "content": "The rules in your .gitignore file only apply to untracked files.  Since the files under that directory were already committed in your repository, you have to unstage them, create a commit, and push that to GitHub:\ngit rm -r --cached some-directory\ngit commit -m 'Remove the now ignored directory \"some-directory\"'\ngit push origin master\n\nYou can't delete the file from your history without rewriting the history of your repository - you shouldn't do this if anyone else is working with your repository, or you're using it from multiple computers.  If you still want to do that, you can use git filter-branch to rewrite the history - there is a helpful guide to that here.\nAdditionally, note the output from git rm -r --cached some-directory will be something like:\nrm 'some-directory/product/cache/1/small_image/130x130/small_image.jpg'\nrm 'some-directory/product/cache/1/small_image/135x/small_image.jpg'\nrm 'some-directory/.htaccess'\nrm 'some-directory/logo.jpg'\n\nThe rm is feedback from git about the repository; the files are still in the working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are Git forks actually Git clones?\n\nI keep hearing people say they're forking code in Git. Git \"fork\" sounds suspiciously like Git \"clone\" plus some (meaningless) psychological willingness to forgo future merges.  There is no fork command in Git, right?\nGitHub makes forks a little more real by stapling correspondence onto it. That is, you press the fork button and later, when you press the pull request button, the system is smart enough to email the owner. Hence, it's a little bit of a dance around repository ownership and permissions.\nYes/No? Any angst over GitHub extending Git in this direction? Or any rumors of Git absorbing the functionality?"}, {"role": "assistant", "content": "Fork, in the GitHub context, doesn't extend Git. \nIt only allows clone on the server side.\nWhen you clone a GitHub repository on your local workstation, you cannot contribute back to the upstream repository unless you are explicitly declared as \"contributor\". That's because your clone is a separate instance of that project. If you want to contribute to the project, you can use forking to do it, in the following way:\n\nclone that GitHub repository on your GitHub account (that is the \"fork\" part, a clone on the server side)\ncontribute commits to that GitHub repository (it is in your own GitHub account, so you have every right to push to it)\nsignal any interesting contribution back to the original GitHub repository (that is the \"pull request\" part by way of the changes you made on your own GitHub repository)\n\nCheck also \"Collaborative GitHub Workflow\".\nIf you want to keep a link with the original repository (also called upstream), you need to add a remote referring that original repository. \nSee \"What is the difference between origin and upstream on GitHub?\"\n\nAnd with Git 2.20 (Q4 2018) and more, fetching from fork is more efficient, with delta islands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSH Key - Still asking for password and passphrase\n\nI've been somewhat 'putting up' with Github always asking for my username and password when I clone a repository.  I want to bypass this step because it is an annoyance within my workflow. \nI tried setting up an SSH key (which I successfully did) using this guide. https://help.github.com/articles/generating-ssh-keys and I was successful.  \nMy problem is that I am still asked for my github password and passphrase when cloning a repository (using SSH).  My understanding was that after I set up this SSH key, I would no longer have to do that.\nI am a little unsure what to ask, so I will just state my goal.  \n\nI want to be able to clone repositories without having to put in my Github information all the time.\n\nWhat am I missing with my SSH key? If anyone can provide some guidance or resources I would appreciate it, because I've always felt a little lost when it came to SSH authentication in GitHub.\nFrom my knowledge, this is a command that tests if things are working properly, here are the output from my console:\n~ $ ssh -T [email\u00a0protected]\nSaving password to keychain failed\nEnter passphrase for key '/Users/MYNAME/.ssh/id_rsa':\nHi MYNAME! You've successfully authenticated, but GitHub does not provide shell access.\n\nWhen I input my password, should that fail first? Then, when I enter my passphrase, it passes."}, {"role": "assistant", "content": "Add Identity without Keychain\nThere may be times in which you don't want the passphrase stored in the keychain, but don't want to have to enter the passphrase over and over again.\nYou can do that like this:\nssh-add ~/.ssh/id_rsa \n\nThis will ask you for the passphrase, enter it and it will not ask again until you restart.\nAdd Identity Using Keychain\nAs @dennis points out in the comments, to persist the passphrase through restarts by storing it in your keychain, you can use the --apple-use-keychain option (-k for Ubuntu) when adding the identity like this:\nssh-add --apple-use-keychain ~/.ssh/id_rsa\n\nOnce again, this will ask you for the passphrase, enter it and this time it will never ask again for this identity."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git keeps prompting me for a password\n\nI've been using Git for a while now, but the constant requests for a password are starting to drive me up the wall.\nI'm using Mac\u00a0OS\u00a0X and GitHub, and I set up Git and my SSH keys as instructed by GitHub's Set Up Git page. \nI've also added the github SSH key to my Mac\u00a0OS\u00a0X keychain, as mentioned on GitHub's SSH key passphrases page. My public key is registered with Git.\nNevertheless, every time I try to Git pull, I have to enter my username and password. Is there something other than an SSH key that I need to set up for this?"}, {"role": "assistant", "content": "I think you may have the wrong Git repository URL. \nOpen .git/config and find the [remote \"origin\"] section. Make sure you're using the SSH one:\nssh://[email\u00a0protected]/username/repo.git\n\nYou can see the SSH URL in the main page of your repository if you click Clone or download and choose ssh.\nAnd NOT the https or git one:\nhttps://github.com/username/repo.git\ngit://github.com/username/repo.git\n\nYou can now validate with just the SSH key instead of the username and password. \nIf Git complains that 'origin' has already been added, open the .config file and edit the url = \"...\" part after [remote origin] as url = ssh://github/username/repo.git\n\nThe same goes for other services. Make sure the address looks like: protocol://something@url\nE.g. .git/config for Azure DevOps:\n[remote \"origin\"]\n    url = https://[email\u00a0protected]/mystore/myproject/\n    fetch = +refs/heads/*:refs/remotes/origin/*"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing to Git returning Error Code 403 fatal: HTTP request failed\n\nI was able to clone a copy of this repo over HTTPS authenticated. I've made some commits and want to push back out to the GitHub server. Using Cygwin on Windows 7 x64.\nC:\\cygwin\\home\\XPherior\\Code\\lunch_call>git push\nPassword:\nerror: The requested URL returned error: 403 while accessing https://MichaelDrog\n[email\u00a0protected]/derekerdmann/lunch_call.git/info/refs\n\nfatal: HTTP request failed\n\nAlso set it up with verbose mode. I'm still pretty baffled.\nC:\\cygwin\\home\\XPherior\\Code\\lunch_call>set GIT_CURL_VERBOSE=1\n\nC:\\cygwin\\home\\XPherior\\Code\\lunch_call>git push\nPassword:\n* Couldn't find host github.com in the _netrc file; using defaults\n* About to connect() to github.com port 443 (#0)\n*   Trying 207.97.227.239... * 0x23cb740 is at send pipe head!\n* Connected to github.com (207.97.227.239) port 443 (#0)\n* successfully set certificate verify locations:\n*   CAfile: C:\\Program Files (x86)\\Git/bin/curl-ca-bundle.crt\n  CApath: none\n* SSL connection using AES256-SHA\n* Server certificate:\n*        subject: 2.5.4.15=Private Organization; 1.3.6.1.4.1.311.60.2.1.3=US; 1.\n3.6.1.4.1.311.60.2.1.2=California; serialNumber=C3268102; C=US; ST=California; L\n=San Francisco; O=GitHub, Inc.; CN=github.com\n*        start date: 2011-05-27 00:00:00 GMT\n*        expire date: 2013-07-29 12:00:00 GMT\n*        subjectAltName: github.com matched\n*        issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert High Ass\nurance EV CA-1\n*        SSL certificate verify ok.\n> GET /derekerdmann/lunch_call.git/info/refs?service=git-receive-pack HTTP/1.1\nUser-Agent: git/1.7.4.3282.g844cb\nHost: github.com\nAccept: */*\nPragma: no-cache\n\n< HTTP/1.1 401 Authorization Required\n< Server: nginx/1.0.4\n< Date: Thu, 15 Sep 2011 22:44:41 GMT\n< Content-Type: text/plain\n< Connection: keep-alive\n< Content-Length: 55\n< WWW-Authenticate: Basic realm=\"GitHub\"\n<\n* Ignoring the response-body\n* Expire cleared\n* Connection #0 to host github.com left intact\n* Issue another request to this URL: 'https://[email\u00a0protected]/dereker\ndmann/lunch_call.git/info/refs?service=git-receive-pack'\n* Couldn't find host github.com in the _netrc file; using defaults\n* Re-using existing connection! (#0) with host github.com\n* Connected to github.com (207.97.227.239) port 443 (#0)\n* 0x23cb740 is at send pipe head!\n* Server auth using Basic with user 'MichaelDrogalis'\n> GET /derekerdmann/lunch_call.git/info/refs?service=git-receive-pack HTTP/1.1\nAuthorization: Basic XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nUser-Agent: git/1.7.4.3282.g844cb\nHost: github.com\nAccept: */*\nPragma: no-cache\n\n< HTTP/1.1 401 Authorization Required\n< Server: nginx/1.0.4\n< Date: Thu, 15 Sep 2011 22:44:41 GMT\n< Content-Type: text/plain\n< Connection: keep-alive\n< Content-Length: 55\n* Authentication problem. Ignoring this.\n< WWW-Authenticate: Basic realm=\"GitHub\"\n* The requested URL returned error: 401\n* Closing connection #0\n* Couldn't find host github.com in the _netrc file; using defaults\n* About to connect() to github.com port 443 (#0)\n*   Trying 207.97.227.239... * 0x23cb740 is at send pipe head!\n* Connected to github.com (207.97.227.239) port 443 (#0)\n* successfully set certificate verify locations:\n*   CAfile: C:\\Program Files (x86)\\Git/bin/curl-ca-bundle.crt\n  CApath: none\n* SSL re-using session ID\n* SSL connection using AES256-SHA\n* old SSL session ID is stale, removing\n* Server certificate:\n*        subject: 2.5.4.15=Private Organization; 1.3.6.1.4.1.311.60.2.1.3=US; 1.\n3.6.1.4.1.311.60.2.1.2=California; serialNumber=C3268102; C=US; ST=California; L\n=San Francisco; O=GitHub, Inc.; CN=github.com\n*        start date: 2011-05-27 00:00:00 GMT\n*        expire date: 2013-07-29 12:00:00 GMT\n*        subjectAltName: github.com matched\n*        issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert High Ass\nurance EV CA-1\n*        SSL certificate verify ok.\n* Server auth using Basic with user 'MichaelDrogalis'\n> GET /derekerdmann/lunch_call.git/info/refs HTTP/1.1\nAuthorization: Basic xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nUser-Agent: git/1.7.4.3282.g844cb\nHost: github.com\nAccept: */*\nPragma: no-cache\n\n* The requested URL returned error: 403\n* Expire cleared\n* Closing connection #0\nerror: The requested URL returned error: 403 while accessing https://MichaelDrog\n[email\u00a0protected]/derekerdmann/lunch_call.git/info/refs\n\nfatal: HTTP request failed\n\nThese are the versions of git and curl that I have:\nC:\\Users\\XPherior>git --version\ngit version 1.7.4.msysgit.0\n\nC:\\Users\\XPherior>curl --version\ncurl 7.21.7 (amd64-pc-win32) libcurl/7.21.7 OpenSSL/0.9.8r zlib/1.2.5\nProtocols: dict file ftp ftps gopher http https imap imaps ldap pop3 pop3s rtsp\nsmtp smtps telnet tftp\nFeatures: AsynchDNS GSS-Negotiate Largefile NTLM SSL SSPI libz"}, {"role": "assistant", "content": "I just got the same problem and just figured out what's cause.\nGithub seems only supports ssh way to read&write the repo, although https way also displayed 'Read&Write'.\nSo you need to change your repo config on your PC to ssh way:\n\nEdit .git/config file under your repo directory.\nFind url=entry under section [remote \"origin\"].\nChange it from:\nurl=https://[email\u00a0protected]/derekerdmann/lunch_call.git\nto:\nurl=ssh://[email\u00a0protected]/derekerdmann/lunch_call.git\nThat is, change all the texts before @ symbol to ssh://git\nSave config file and quit. now you could use git push origin master to sync your repo on GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull request vs Merge request\n\nWhat is the difference between a Pull request and a Merge request?\nIn GitHub, it's a Pull Request while in GitLab, for example, it's a Merge Request. So, is there a difference between both of these?"}, {"role": "assistant", "content": "GitLab's \"merge request\" feature is equivalent to GitHub's \"pull request\" feature.  Both are means of pulling changes from another branch or fork into your branch and merging the changes with your existing code. They are useful tools for code review and change management.\nAn article from GitLab discusses the differences in naming the feature:\n\nMerge or pull requests are created in a git management application and ask an assigned person to merge two branches. Tools such as GitHub and Bitbucket choose the name pull request since the first manual action would be to pull the feature branch. Tools such as GitLab and Gitorious choose the name merge request since that is the final action that is requested of the assignee. In this article we'll refer to them as merge requests.\n\nA \"merge request\" should not be confused with the git merge command. Neither should a \"pull request\" be confused with the git pull command.  Both git commands are used behind the scenes in both pull requests and merge requests, but a merge/pull request refers to a much broader topic than just these two commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple GitHub accounts on the same computer?\n\nTrying to work on both my actual \"work\" repos, and my repos on GitHub, from my computer.\nThe work account was set up first, and everything works flawlessly.\nMy account, however, cannot seem to push to my repo, which is set up under a different account/email.\nI've tried copying my work key up to my account, but that throws an error because of course a key can only be attached to one account.\nHow can I push/pull to and from both accounts with their respective GitHub credentials?"}, {"role": "assistant", "content": "All you need to do is configure your SSH setup with multiple SSH keypairs.\n\nThis link is easy to follow (Thanks Eric):\nhttp://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574\n\nGenerating SSH keys (Win/msysgit):\nhttps://help.github.com/articles/generating-an-ssh-key/\n\n\nRelevant steps from the first link:\n\nGenerate an SSH-key:\nssh-keygen -t ed25519 -C \"[email\u00a0protected]\"\n\nFollow the prompts and decide a name, e.g. id_ed25519_example_company.\n\nCopy the SSH public-key to GitHub from ~/.ssh/id_ed25519_doe_company.pub and tell ssh about the key:\nssh-add ~/.ssh/id_ed25519_doe_company\n\n\nCreate a config file in ~/.ssh with the following contents:\nHost github-doe-company\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_doe_company\n\n\nAdd your remote:\ngit remote add origin git@github-doe-company:username/repo.git\n\nor change using:\ngit remote set-url origin git@github-doe-company:username/repo.git\n\n\n\n\nAlso, if you're working with multiple repositories using different personas, you need to make sure that your individual repositories have the user settings overridden accordingly:\nSetting user name, email and GitHub token \u2013 Overriding settings for individual repos\nhttps://help.github.com/articles/setting-your-commit-email-address-in-git/\nNote:\nSome of you may require different emails to be used for different repositories, from git 2.13 you can set the email on a directory basis by editing the global config file found at: ~/.gitconfig using conditionals like so:\n[user]\n    name = Default Name\n    email = [email\u00a0protected]\n\n[includeIf \"gitdir:~/work/\"]\n    path = ~/work/.gitconfig\n\nAnd then your work-specific config ~/work/.gitconfig would look like this:\n[user]\n    name = Pavan Kataria\n    email = [email\u00a0protected]\n\nThank you @alexg for informing me of this in the comments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between GitHub and gist?\n\nWhat is the purpose of gist and how is it different from regular code sharing/maintaining using GitHub?"}, {"role": "assistant", "content": "GitHub is the entire site. Gists are a particular service offered on that site, namely code snippets akin to pastebin. However, everything is driven by git revision control, so gists also have complete revision histories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to state in requirements.txt a direct github source\n\nI've installed a library using the command\npip install git+git://github.com/mozilla/elasticutils.git\n\nwhich installs it directly from a Github repository.  This works fine and I want to have that dependency in my requirements.txt.  I've looked at other tickets like this but that didn't solve my problem.  If I put something like\n-f git+git://github.com/mozilla/elasticutils.git\nelasticutils==0.7.dev\n\nin the requirements.txt file, a pip install -r requirements.txt results in the following output:\nDownloading/unpacking elasticutils==0.7.dev (from -r requirements.txt (line 20))\n  Could not find a version that satisfies the requirement elasticutils==0.7.dev (from -r requirements.txt (line 20)) (from versions: )\nNo distributions matching the version for elasticutils==0.7.dev (from -r requirements.txt (line 20))\n\nThe documentation of the requirements file does not mention links using the git+git protocol specifier, so maybe this is just not supported.\nDoes anybody have a solution for my problem?"}, {"role": "assistant", "content": "Normally your requirements.txt file would look something like this:\npackage-one==1.9.4\npackage-two==3.7.1\npackage-three==1.0.1\n...\n\nTo specify a Github repo, you do not need the package-name== convention.\nThe examples below update package-two using a GitHub repo. The text after @ denotes the specifics of the package.\nSpecify commit hash (41b95ec in the context of updated requirements.txt):\npackage-one==1.9.4\npackage-two @ git+https://github.com/owner/repo@41b95ec\npackage-three==1.0.1\n\nSpecify branch name (main):\npackage-two @ git+https://github.com/owner/repo@main\n\nSpecify tag (0.1):\npackage-two @ git+https://github.com/owner/[email\u00a0protected]\n\nSpecify release (3.7.1):\npackage-two @ git+https://github.com/owner/repo@releases/tag/v3.7.1\n\nNote that in certain versions of pip you will need to update the package version in the package's setup.py, or pip will assume the requirement is already satisfied and not install the new version. For instance, if you have 1.2.1 installed, and want to fork this package with your own version, you could use the above technique in your requirements.txt and then update setup.py to 1.2.1.1.\nSee also the pip documentation on VCS support."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete forked repo from GitHub\n\nI'm starting with git and GitHub and there's a project I'm watching on GitHub. I unintentionally clicked to fork it. Now it appears as a new project to me.\nI have some doubts about it:\n\nI know if commit or do another thing to my forked repo, it will be updated, but the updated code will take effect only after the project's author request the pull. Right?\nIf I go to admin panel on GitHub there's a delete option. If I delete it as the option above, will it make any effect in the original one or not?\n\nI'd like to delete it. By now I'm just studying the code and don't really need the fork."}, {"role": "assistant", "content": "By far the easiest way is to log in GitHub account:\n\nClick to your repository for example yourUsername/yourRepository for example mbaric/zpropertyz.\nThen in the main toolbar of GitHub click on Settings\nScroll to the bottom of the page to the section called Danger Zone and you will find Delete this repository button\nWhen you click it another pop up will appear here you need to type in your Github username and the name of your repository in this format gitHubUsername/nameOfTheRepository and click on the button below which says: I understand the consequences, delete the repository\nIf you are having trouble doing it, below are the images that can be checked\u2026\n\n2020-01-15 - Here are images. Enjoy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Updating a local repository with changes from a GitHub repository\n\nI've got a project checked locally from GitHub, and that remote repository has since had changes made to it. What's the correct command to update my local copy with the latest changes?"}, {"role": "assistant", "content": "Probably:\neither:    git pull origin master\n\n    or:    git pull origin main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub satanically messing with Markdown - changes 666 to DCLXVI\n\nMy GitHub repository has nothing but a readme in it. In this readme, locally I wrote this:\nFactoids:\n - There are about six different ways to do everything in Forked.\n - There are actually six different ways to enter loops.\n - There are six directionals and six I/O commands.\n - 666. ha.\n\nEmphasis on the last line.\nWhat GitHub decided to show was not 666.\n\nDCLXVI is the Roman Numeral number for 666.\nThis really creeped me out. My local file and the raw file both show 666.\nWhat is GitHub doing, and why is the indentation on the un-numbered list messed up? Is this an easter egg, or some satanic bug?"}, {"role": "assistant", "content": "This seems to be followed by github/markup issue 991, where on ordered sub-list, decimal numerals automatically turns into roman numerals.\n\nI have found the cause of problem. It is CSS\n\nThis is the expected way for nested ordered lists to render in HTML.\n\nThis is not expected in HTML. https://jsfiddle.net/tf5jtv8s\n\nWe don't make any modifications to the default HTML behavior.\n\nol ol,ul ol{list-style-type:lower-roman}\n\nI don't know CSS but my understanding is that this is the cause of problem. I can get expected result by disabling CSS. (I am from my mobile so I can't use browser inspector)\n\nAs mentioned in \"A formal spec for GitHub Flavored Markdown\", GitHub markdown spec GFM: GitHub Flavored Markdown Spec is built on top of the  CommonMark Spec.\nAnd as Tommi Kaikkonen mentioned in his answer, the ordered list is because of the dot following 666. See GFM Spec section 5.2.\nAs mentioned in section 6.1, any ASCII punctuation character may be backslash-escaped, to avoid this issue.\nThat means:\n- 666\\. ha.\n\n(as explicitly shown in ForNeVeR's answer)\nThat is why that 666 number is changed to roman numerals in a GitHub README markdown.\n\nMike Lippert commented:\n\nthe 1st element in that list so it should show as i not dclxvi.\nMarkdown ordered lists ignore the actual number used and number sequentially, and I haven't seen a way to change that.\n\nHowever, no: it shows dclxvi, because the generated html code is <ol start=\"666\">, which is consistent with the GFM specs:\n\nIf the list item is ordered, then it is also assigned a start number, based on the ordered list marker\"\n\n(here, '666' is the ordered list marker)\nMike adds:\n\n\n@VonC For anyone else here's another useful excerpt from VonC's doc link:\n\n\"The start number of an ordered list is determined by the list number of its initial list item. The numbers of subsequent list items are disregarded.\"\n\n\n\nAlso, why is the spacing messed up? I didn't catch that in your answer\n\nYou get an ordered list <ol> within an un-ordered list item <li>:\n<ul>\n  <li>\n    <ol start=\"666\">\n      <li>ha.</li>\n    </ol>\n  </li>\n</ul>\n\nGitHub CSS rules include:\n.markdown-body ol {\n    padding-left: 2em;\n}\n\nIf you put 3em, you would get\n\ninstead of"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is a git 'pull request' not called a 'push request'?\n\nThe terminology used to merge a branch with an official repository is a 'pull request'. This is confusing, as it appears that I am requesting to push my changes to the official repository.\nWhy is it called a pull request and not a push request?"}, {"role": "assistant", "content": "If you have a code change in your repository, and want to move it to a target repository, then:\n\n\"Push\" is you forcing the changes being present in the target repository (git push). \n\"Pull\" is the target repository grabbing your changes to be present there (git pull from the other repo).\n\nA \"pull request\" is you requesting the target repository to please grab your changes. \nA \"push request\" would be the target repository requesting you to push your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gpg failed to sign the data fatal: failed to write commit object [Git 2.10.0]\n\nI followed few articles over the pretty attributes on Git 2.10 release note. Going through which upgraded the git to 2.10.0 and made changes to global .gitconfig resulting as follows - \n[filter \"lfs\"]\n    clean = git-lfs clean %f\n    smudge = git-lfs smudge %f\n    required = true\n[user]\n    name = xyz\n    email = [email\u00a0protected]\n    signingkey = AAAAAAA\n[core]\n    excludesfile = /Users/xyz/.gitignore_global\n    editor = 'subl' --wait\n[difftool \"sourcetree\"]\n    cmd = opendiff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n    path = \n[mergetool \"sourcetree\"]\n    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\" -ancestor \\\"$BASE\\\" -merge \\\"$MERGED\\\"\n    trustExitCode = true\n[alias]\n    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\n[color \"diff\"]\n    old = red strike\n    new = green italic\n\nBut now that I try to sign my commits using \ngit commit -a -S -m \"message\"\n\nI get to see the following error - \n\nYou need a passphrase to unlock the secret key for \nuser: \"XYZ (Digitally Signed) \" \n2048-bit RSA key, ID AAAAAAAA, created 2016-07-01\nerror: gpg failed to sign the data fatal: failed to write commit\n  object\n\nNote - I can still commit changes using git commit -a -m \"message\"\nIs there a way to overcome the same? Or any change required in gpg configs to get along with the upgradation of git?\n\nUpdate 1\nAlso seeking further usefulness, following Is there a way to \"autosign\" commits in Git with a GPG key?. I've already configured the key using \ngit config --global user.signingkey ED5CDE14(with my key) \ngit config --global commit.gpgsign true\n\nand quite obviously getting the same error anyway."}, {"role": "assistant", "content": "I ran into this issue with macOS.\nOriginal answer:\nIt seems like a gpg update (of brew) changed to location of gpg to gpg1, you can change the binary where git looks up the gpg:\ngit config --global gpg.program gpg1\n\nIf you don't have gpg1: brew install gpg1.\nUpdated answer:\nIt looks like gpg1 is being deprecated/\"gently nudged out of usage\", so you probably should actually update to gpg2, unfortunately this involves quite a few more steps/a bit of time:\nbrew upgrade gnupg  # This has a make step which takes a while\nbrew link --overwrite gnupg\nbrew install pinentry-mac\necho \"pinentry-program $(brew --prefix)/bin/pinentry-mac\" >> ~/.gnupg/gpg-agent.conf\nkillall gpg-agent\n\nThe first part installs gpg2, and latter is a hack required to use it. For troubleshooting, see this answer (though that is about linux not brew), it suggests a good test:\necho \"test\" | gpg --clearsign  # on linux it's gpg2 but brew stays as gpg\n\nIf this test is successful (no error/output includes PGP signature), you have successfully updated to the latest gpg version.\nYou should now be able to use git signing again!\nIt's worth noting you'll need to have:\ngit config --global gpg.program gpg  # perhaps you had this already? On linux maybe gpg2\ngit config --global commit.gpgsign true  # if you want to sign every commit\n\nNote: After you've run a signed commit, you can verify it signed with:\ngit log --show-signature -1\n\nwhich will include gpg info for the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add screenshot to READMEs in github repository?\n\nIs it possible to place a screenshot in README file in a GitHub repository? What's the syntax?"}, {"role": "assistant", "content": "If you use Markdown (README.md):\nProvided that you have the image in your repo, you can use a relative URL: \n![Alt text](/relative/path/to/img.jpg?raw=true \"Optional Title\")\n\nIf you need to embed an image that's hosted elsewhere, you can use a full URL\n![Alt text](http://full/path/to/img.jpg \"Optional title\")\n\nGitHub recommend that you use relative links with the ?raw=true parameter to ensure forked repos point correctly.\nThe raw=true parameter is there in order to ensure the image you link to, will be rendered as is. That means that only the image will be linked to, not the whole GitHub interface for that respective file. See this comment for more details.\nCheck out an example: https://raw.github.com/altercation/solarized/master/README.md\nIf you use SVGs then you'll need to set the sanitize attribute to true as well: ?raw=true&sanitize=true. (Thanks @EliSherer)\nAlso, the documentation on relative links in README files: https://help.github.com/articles/relative-links-in-readmes\nAnd of course the markdown docs: http://daringfireball.net/projects/markdown/syntax\nAdditionally, if you create a new branch screenshots to store the images you can avoid them being in the master working tree\nYou can then embed them using:\n![Alt text](/../<branch name>/path/to/image.png?raw=true \"Optional Title\")"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push existing repo to a new and different remote repo server?\n\nSay I have a repository on git.fedorahosted.org and I want to clone this into my account at github to have my own playground aside from the more \"official\" repo on fedorahosted.\nWhat would be the steps to initially copy that over?\nWithin github there is this nice \"fork\" button, but I can't use this for obvious reasons.\nAnd how would I track changes in the fedorahosted repo into the github one?"}, {"role": "assistant", "content": "Create a new repo at github.\nClone the repo from fedorahosted to your local machine.\ngit remote rename origin upstream\ngit remote add origin URL_TO_GITHUB_REPO\ngit push origin master\n\nNow you can work with it just like any other github repo. To pull in patches from upstream, simply run git pull upstream master && git push origin master.\nGitHub has recently renamed its master branch to main so (depending on whether your branch is called master or main) in step 5 you might have to use git push origin main and for pulling patches from upstream git pull upstream main && git push origin main, otherwise you will receive an error message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I reference a commit in an issue comment on GitHub?\n\nI find a lot of answers on how to reference a GitHub issue in a git comment (using the #xxx notation).\nI'd like to reference a commit in my comment, generating a link to the commit details page?"}, {"role": "assistant", "content": "To reference a commit, simply write its SHA-hash, and it'll automatically get turned into a link.\nthe commit 3e5c1e60269ae0329094de131227285d4682b665 solved the issue...\n\nOr use its prefix\nthe commit 3e5c1e6 solved the issue...\n\nSee also:\n\nThe Autolinked references and URLs / Commit SHAs section of\nWriting on GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I create a folder in a GitHub repository?\n\nI want to create a folder in a GitHub repository and then add files to that folder. \nHow do I achieve this?"}, {"role": "assistant", "content": "TL;DR Use / in the file name field to create folder(s), e.g. typing folder1/file1 in the file name field will create a folder folder1 and a file file1.\nOriginal answer\nYou cannot create an empty folder and then add files to that folder, but rather creation of a folder must happen together with adding of at least a single file. This is because git doesn't track empty folders.\nOn GitHub you can do it this way:\n\nGo to the folder inside which you want to create another folder\nClick on New file\nOn the text field for the file name, first write the folder name you want to create\nThen type /. This creates a folder\nYou can add more folders similarly\nFinally, give the new file a name (for example, .gitkeep which is conventionally used to make Git track otherwise empty folders; it is not a Git feature though)\nFinally, click Commit new file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: invalid username or password\n\nI have a project hosted on GitHub. I fail when trying to push my modifications on the master. I always get the following error message\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://[email\u00a0protected]/eurydyce/MDANSE.git/'\n\nHowever, setting my ssh key to github seems ok. Indeed, when I do a ssh -T [email\u00a0protected] I get\nHi eurydyce! You've successfully authenticated, but GitHub does not provide shell access.\n\nWhich seems to indicate that everything is OK from that side (eurydyce being my github username). I strictly followed the instructions given on github and the recommendations of many stack discussion but no way. Would you have any idea of what I may have done wrong?"}, {"role": "assistant", "content": "After enabling Two Factor Authentication (2FA), you may see something like this when attempting to use git clone, git fetch, git pull or git push:\n$ git push origin master\nUsername for 'https://github.com': your_user_name\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/your_user_name/repo_name.git/'\n\nWhy this is happening\nFrom the GitHub Help documentation:\n\nAfter 2FA is enabled you will need to enter a personal access token instead of a 2FA code and your GitHub password.\n...\nFor example, when you access a repository using Git on the command line using commands like git clone, git fetch, git pull or git push with HTTPS URLs, you must provide your GitHub username and your personal access token when prompted for a username and password. The command line prompt won't specify that you should enter your personal access token when it asks for your password.\n\nHow to fix it\n\nGenerate a Personal Access Token. (Detailed guide on Creating a personal access token for the command line.)\nCopy the Personal Access Token.\nRe-attempt the command you were trying and use Personal Access Token in the place of your password.\n\nRelated question:\nhttps://stackoverflow.com/a/21374369/101662"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View markdown files offline [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 2 years ago.\n\n\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIs there a way to display .md files offline so we know what it will look like once it's uploaded in Github? I'm referring to showing the README.md file as it would come out in Github, and not as for editing purposes.\nNeeds to work on Mac and Windows since I use both."}, {"role": "assistant", "content": "There are a few Chrome plug-ins that work well. I've been using Markdown Preview Plus.\nAfter install, enable \"Allow access to file URLs\" in Extensions (menu > More tools > Extensions or enter URL chrome://extensions/ instead).\n\nThen drag-n-drop a Markdown file onto Chrome and use your favorite editor to edit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remote origin already exists on 'git push' to a new repository\n\nI have my project on GitHub at some location, [email\u00a0protected]:myname/oldrep.git.\nNow I want to push all my code to a new repository at some other location, [email\u00a0protected]:newname/newrep.git.\nI used the command:\ngit remote add origin [email\u00a0protected]:myname/oldrep.git\n\nbut I am receiving this:\n\nfatal: remote origin already exists."}, {"role": "assistant", "content": "You are getting this error because \"origin\" is not available. \"origin\" is a convention not part of the command. \"origin\" is the local name of the remote repository.\nFor example you could also write:\ngit remote add myorigin [email\u00a0protected]:myname/oldrep.git  \ngit remote add testtest [email\u00a0protected]:myname/oldrep.git\n\nSee the manual: \nhttp://www.kernel.org/pub/software/scm/git/docs/git-remote.html\nTo remove a remote repository you enter:\ngit remote rm origin\n\nAgain \"origin\" is the name of the remote repository if you want to\nremove the \"upstream\" remote:\ngit remote rm upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Push ERROR: Repository not found\n\nI am having a very strange problem with git and github. When I try and push, I am getting:\ngit push -u origin master\nERROR: Repository not found.\nfatal: The remote end hung up unexpectedly\n\nI added the remote:\ngit remote add origin [email\u00a0protected]:account-name/repo-name.git\n\nAny ideas?"}, {"role": "assistant", "content": "Check to see if you have read-write access.\nThe Git error message is misleading. I had a similar issue. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message.\nThe person who added me to the project gave me read-only access to the repository. A change by them and I was able to push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to update a pull request from forked repo?\n\nSo I first forked a repo and then made a commit to that forked repo. I then opened a pull request. The pull request listed all the changes I wanted.\nAfter reviewing my pull request, there were a number of changes that the repo owner wanted me to make before he accepted it. I have made those changes in my fork, now how do I update the pull request with those changes (or is this not how I should handle it)?"}, {"role": "assistant", "content": "You have done it correctly. The pull request will automatically update. The process is:\n\nOpen pull request\nCommit changes based on feedback in your local repo\nPush to the relevant branch of your fork\n\nThe pull request will automatically add the new commits to the Commits tab of the PR."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub \"fatal: remote origin already exists\"\n\nI am trying to follow along Michael Hartl's Rails tutorial but I've run across an error.\nI signed up at GitHub, issued a new SSH key, and created a new repository. But when I enter the next line into the terminal, I get the following error:\nParkers-MacBook-Pro:.ssh ppreyer$ git remote add origin [email\u00a0protected]:ppreyer/first_app.git\nfatal: remote origin already exists.\n\nJust wondered if anybody else has run across this problem?"}, {"role": "assistant", "content": "Short version:\nYou should just update the existing remote:\ngit remote set-url origin [email\u00a0protected]:ppreyer/first_app.git\n\nLong version:\nAs the error message indicates, there is already a remote configured with the same name. So you can either add the new remote with a different name or update the existing one if you don't need it.\nTo add a new remote, called for example github instead of origin (which obviously already exists in your system), do the following:\ngit remote add github [email\u00a0protected]:ppreyer/first_app.git\n\nRemember though, everywhere in the tutorial you see \"origin\" you should replace it with \"github\". For example $ git push origin master should now be $ git push github master.\nHowever, if you want to see what that already existing origin remote is, you can do a $ git remote -v. If you think this is there by some error, you can update it like so:\ngit remote set-url origin [email\u00a0protected]:ppreyer/first_app.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to commit a change with both \"message\" and \"description\" from the command line? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGit/GitHub commit with extended message/description\n\n                                (3 answers)\n                            \n\nClosed 6 years ago.\n\n\n\nI can push commits to GitHub via git (on the command line, not the Mac app).\nWhen I push commits directly from the GitHub web interface (e.g. quickly fixing a typo), I have the chance to \"comment\" the commit, and GitHub gives me a commit title and a commit description. I find this very useful.\nStill, when I git push from the local machine, git opens my default editor: so I write the commit comment, and then GitHub automatically divides it into title and \"body\". Is there a way to pretty comment commits from terminal too?"}, {"role": "assistant", "content": "There is also another straight and more clear way\ngit commit -m \"Title\" -m \"Description ..........\";"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why are connections to GitHub over SSH throwing an error \"Warning: Remote Host Identification Has Changed\"?\n\nJust sometime ago I started getting this warning when pushing to GitHub.\nWARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!\n\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\n\nIs this normal and how do I resolve it?"}, {"role": "assistant", "content": "This happened because on the 24th of March 2023, GitHub updated their RSA SSH host key used to secure Git operations for GitHub.com because the private key was briefly exposed in a public GitHub repository.  You will get that message if you had remembered GitHub\u2019s previous key fingerprint in your SSH client before that date.\nAs per per the linked blog post, the solution is to remove the old key by running this command:\n$ ssh-keygen -R github.com\n\nNow the next git connection (pull, push or clone) should ask if you trust the new SSH key.  Before entering yes, ensure the shown new key is valid, using the list:\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\nRefer to the blog post for other ways to fix the issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Import existing source code to GitHub\n\nHow can I import source code from my computer to my GitHub account?"}, {"role": "assistant", "content": "If you've got local source code you want to add to a new remote new git repository without 'cloning' the remote first, do the following (I often do this - you create your remote empty repository in bitbucket/github, then push up your source)\n\nCreate the remote repository, and get the URL such as [email\u00a0protected]:/youruser/somename.git or https://github.com/youruser/somename.git\nIf your local GIT repo is already set up, skips steps 2 and 3\n\nLocally, at the root directory of your source, git init\n2a. If you initialize the repo with a .gitignore and a README.md you should do a git pull {url from step 1} to ensure you don't commit files to source that you want to ignore ;)\nLocally, add and commit what you want in your initial repo (for everything, git add . then  git commit -m 'initial commit comment')\n\nto attach your remote repo with the name 'origin' (like cloning would do)\ngit remote add origin [URL From Step 1]\nExecute git pull origin master to pull the remote branch so that they are in sync.\nto push up your master branch (change master to something else for a different branch):\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to delete all commit history in github? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMake the current commit the only (initial) commit in a Git repository?\n\n                                (19 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI want to delete all commit history but keep the code in its current state because, in my commit history, there are too many unused commits.\nHow can I do it?\nIs there any git command can do this?\ngit filter-branch ?\ngit rebase ?\n... \n\nMy code is hosted on github.com."}, {"role": "assistant", "content": "Deleting the .git folder may cause problems in your git repository. If you want to delete all your commit history but keep the code in its current state, it is very safe to do it as in the following:\n\nCheckout/create orphan branch (this branch won't show in git branch command):\ngit checkout --orphan latest_branch\n\n\nAdd all the files to the newly created branch:\ngit add -A\n\n\nCommit the changes:\ngit commit -am \"commit message\"\n\n\nDelete main (default) branch (this step is permanent):\ngit branch -D main\n\n\nRename the current branch to main:\ngit branch -m main\n\n\nFinally, all changes are completed on your local repository, and force update your remote repository:\ngit push -f origin main\n\n\n\nPS: This will not keep your old commit history around. Now you should only see your new commit in the history of your git repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Superscript in markdown (Github flavored)?\n\nFollowing this lead, I tried this in a Github README.md:\n<span style=\"vertical-align: baseline; position: relative;top: -0.5em;>text in superscript</span>\n\nDoes not work, the text appears as normal. Help?"}, {"role": "assistant", "content": "Use the <sup></sup> tag (<sub></sub> is the equivalent for subscripts). See this gist for an example."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Authenticate with GitHub using a token\n\nI am trying to authenticate with GitHub using a personal access token. In the help files at GitHub, it states to use the cURL method to authenticate (Creating a personal access token). I have tried this, but I still cannot push to GitHub. Please note, I am trying to push from an unauthenticated server (Travis CI).\ncd $HOME\ngit config --global user.email \"[email\u00a0protected]\"\ngit config --global user.name \"username\"\n\ncurl -u \"username:<MYTOKEN>\" https://github.com/username/ol3-1.git\ngit clone --branch=gh-pages https://github.com/username/ol3-1.git gh-pages\n\ncd gh-pages\nmkdir buildtest\ncd buildtest\ntouch asdf.asdf\n\ngit add -f .\ngit commit -m \"Travis build $TRAVIS_BUILD_NUMBER pushed to gh-pages\"\ngit push -fq origin gh-pages\n\nThis code causes the errors:\n\nremote: Anonymous access to scuzzlebuzzle/ol3-1.git denied.\n\n\nfatal: Authentication failed for 'https://github.com/scuzzlebuzzle/ol3-1.git/'\""}, {"role": "assistant", "content": "Your curl command is entirely wrong. You should be using the following\ncurl -H 'Authorization: token <MYTOKEN>' ...\n\nThat aside, that doesn't authorize your computer to clone the repository if in fact it is private. (Taking a look, however, indicates that it is not.) What you would normally do is the following:\ngit clone https://scuzzlebuzzle:<MYTOKEN>@github.com/scuzzlebuzzle/ol3-1.git --branch=gh-pages gh-pages\n\nThat will add your credentials to the remote created when cloning the repository. Unfortunately, however, you have no control over how Travis clones your repository, so you have to edit the remote like so.\n# After cloning\ncd gh-pages\ngit remote set-url origin https://scuzzlebuzzle:<MYTOKEN>@github.com/scuzzlebuzzle/ol3-1.git\n\nThat will fix your project to use a remote with credentials built in.\n\nWarning: Tokens have read/write access and should be treated like passwords. If you enter your token into the clone URL when cloning or adding a remote, Git writes it to your .git/config file in plain text, which is a security risk."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I center an image in the README.md file on GitHub?\n\nI've been looking at the Markdown syntax used in GitHub for a while, but except resizing an image to the width of the README.md page, I can't figure out how to center an image in it.\nIs this possible? If so, how can I do it?"}, {"role": "assistant", "content": "This is from GitHub's support:\n\nMarkdown doesn't allow you to tweak alignment directly (see docs here: http://daringfireball.net/projects/markdown/syntax#img), but you can just use a raw HTML 'img' tag and do the alignment with inline css.\n\nSo it is possible to align images! You just have to use inline CSS to solve the problem. You can take an example from my GitHub repository. At the bottom of README.md there is a centered aligned image. For simplicity you can just do as follows:\n<p align=\"center\">\n  <img src=\"http://some_place.com/image.png\" />\n</p>\n\nAlthough, as nulltoken said, it would be borderline against the Markdown philosophy!\n\nThis code from my README file:\n<p align=\"center\">\n  <img src=\"https://github.com/waldyr/Sublime-Installer/blob/master/sublime_text.png?raw=true\" alt=\"Sublime's custom image\"/>\n</p>\n\nIt produces this image output, except centered when viewed on GitHub:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see the size of a GitHub repository before cloning it?\n\nIs there a way to see how big a Git repository is on GitHub before you decide to clone it?\nThis seems like a really obvious/basic statistic, but I can't find how to see it on GitHub at all."}, {"role": "assistant", "content": "There's a way to access this information through the GitHub API.\n\nSyntax: GET /repos/:user/:repo\nExample: https://api.github.com/repos/git/git\n\nWhen retrieving information about a repository, a property named size is valued with the size of the whole repository (including all of its history), in kilobytes.\nFor instance, the Git repository weights around 124 MB. The size property of the returned JSON payload is valued to 124283.\nUpdate\nThe size is indeed expressed in kilobytes based on the disk usage of the server-side bare repository. However, in order to avoid wasting too much space with repositories with a large network, GitHub relies on Git Alternates. In this configuration, calculating the disk usage against the bare repository doesn't account for the shared object store and thus returns an \"incomplete\" value through the API call.\nThis information has been given by GitHub support."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Link and execute external JavaScript file hosted on GitHub\n\nWhen I try to change the linked reference of a local JavaScript file to a GitHub raw version my test file stops working. The error is: \n\nRefused to execute script from ... because its MIME type (text/plain) is not executable, and strict MIME type checking is enabled. \n\nIs there a way to disable this behavior or is there a service that allows linking to GitHub raw files?\nWorking code:\n<script src=\"bootstrap-wysiwyg.js\"></script>\n\nNon-working code:\n<script src=\"https://raw.github.com/mindmup/bootstrap-wysiwyg/master/bootstrap-wysiwyg.js\"></script>"}, {"role": "assistant", "content": "There is a good workaround for this, now, by using jsdelivr.net.\nSteps:\n\nFind your link on GitHub, and click to the \"Raw\" version.\nCopy the URL.\nChange raw.githubusercontent.com to cdn.jsdelivr.net\nInsert /gh/ before your username.\nRemove the branch name.\n(Optional) Insert the version you want to link to, as @version (if you do not do this, you will get the latest - which may cause long-term caching)\n\n\nExamples:\nhttp://raw.githubusercontent.com/<username>/<repo>/<branch>/path/to/file.js\n\nUse this URL to get the latest version:\nhttp://cdn.jsdelivr.net/gh/<username>/<repo>/path/to/file.js\n\nUse this URL to get a specific version or commit hash:\nhttp://cdn.jsdelivr.net/gh/<username>/<repo>@<version or hash>/path/to/file.js\n\nFor production environments, consider targeting a specific tag or commit-hash rather than the branch. Using the latest link may result in long-term caching of the file, causing your link to not be updated as you push new versions. Linking to a file by commit-hash or tag makes the link unique to version.\n\nWhy is this needed?\nIn 2013, GitHub started using X-Content-Type-Options: nosniff, which instructs more modern browsers to enforce strict MIME type checking. It then returns the raw files in a MIME type returned by the server, preventing the browser from using the file as-intended (if the browser honors the setting).\nFor background on this topic, please refer to this discussion thread."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a naming convention for git repositories?\n\nFor example, I have a RESTful service called Purchase Service. Should I name my repository:\n\npurchaserestservice\npurchase-rest-service\npurchase_rest_service\nor something else?\n\nWhat's the convention? How about in GitHub? Should public repositories follow some standard?"}, {"role": "assistant", "content": "I'd go for purchase-rest-service. Reasons:\n\nWhat is \"pur chase rests ervice\"? Long, concatenated words are hard to understand. I know, I'm German. \"Donaudampfschifffahrtskapit\u00e4nspatentausf\u00fcllungsassistentenausschreibungsstellenbewerbung.\"\n\"_\" is harder to type than \"-\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git, fatal: The remote end hung up unexpectedly\n\nWhen I tried to run\ngit push origin master --force\n\nI just got\nCounting objects: 2649, done.\nDelta compression uses up to 2 threads.\nCompressing objects: 100% (1280/1280), done.\nerror: RPC failed; result=22, HTTP code = 413 | 116 KiB/s   \nfatal: The remote end hung up unexpectedly\nWriting objects: 100% (2504/2504), 449.61 MiB | 4.19 MiB/s, done.\nTotal 2504 (delta 1309), reused 2242 (delta 1216)\nfatal: The remote end hung up unexpectedly\nEverything up-to-date\n\nIs it something to do with not being secure? I tried creating a public key as the answer for Fatal: The remote end hung up unexpectedly and rerunning it, but it still doesn't work. Am I not actually using the key? If so, how do I use it?"}, {"role": "assistant", "content": "This is due to git/https buffer settings.\nRun this (taken from Git fails when pushing commit to github):\ngit config http.postBuffer 524288000\n\nThen, run your original command again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to use pip to install a package from a private GitHub repository?\n\nI am trying to install a Python package from a private GitHub repository. For a public repository, I can issue the following command which works fine:\npip install git+git://github.com/django/django.git\n\nHowever, if I try this for a private repository:\npip install git+git://github.com/echweb/echweb-utils.git\n\nI get the following output:\nDownloading/unpacking git+git://github.com/echweb/echweb-utils.git\nCloning Git repository git://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build\nComplete output from command /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build:\nfatal: The remote end hung up unexpectedly\n\nCloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build...\n\n----------------------------------------\nCommand /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build failed with error code 128\n\nI guess this is because I am trying to access a private repository without providing any authentication. I therefore tried to use Git + ssh hoping that pip would use my SSH public key to authenticate:\npip install git+ssh://github.com/echweb/echweb-utils.git\n\nThis gives the following output:\nDownloading/unpacking git+ssh://github.com/echweb/echweb-utils.git\nCloning Git repository ssh://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build\nComplete output from command /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build:\nCloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build...\n\nPermission denied (publickey).\n\nfatal: The remote end hung up unexpectedly\n\n----------------------------------------\nCommand /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build failed with error code 128\n\nIs what I am trying to achieve even possible? If so, how can I do it?"}, {"role": "assistant", "content": "You can use the git+ssh URI scheme, but you must set a username. Notice the git@ part in the URI:\npip install git+ssh://[email\u00a0protected]/echweb/echweb-utils.git\n\nAlso read about deploy keys.\nPS: In my installation, the \"git+ssh\" URI scheme works only with \"editable\" requirements:\npip install -e URI#egg=EggName\n\nRemember: Change the : character that git remote -v prints to a / character before using the remote's address in the pip command:\n$ git remote -v\norigin  [email\u00a0protected]:echweb/echweb-utils.git (fetch)\n#                     ^ change this to a '/' character\n\nIf you forget, you will get this error:\nssh: Could not resolve hostname github.com:echweb:\n         nodename nor servname provided, or not known"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between origin and upstream on GitHub?\n\nWhat is the difference between origin and upstream on GitHub?\nWhen a git branch -a command is executed, some branches it displays have a prefix of origin (remotes/origin/..) while others have a prefix of upstream (remotes/upstream/..)."}, {"role": "assistant", "content": "This should be understood in the context of GitHub forks (where you fork a GitHub repo on GitHub before cloning that fork locally).\n\nupstream generally refers to the original repo that you have forked\n(see also \"Definition of \u201cdownstream\u201d and \u201cupstream\u201d\" for more on upstream term)\norigin is your fork: your own repo on GitHub, clone of the original repo of GitHub\n\nFrom the GitHub page:\n\nWhen a repo is cloned, it has a default remote called origin that points to your fork on GitHub, not the original repo it was forked from.\nTo keep track of the original repo, you need to add another remote named upstream\n\ngit remote add upstream https://github.com/<aUser>/<aRepo.git>\n\n(with aUser/aRepo the reference for the original creator and repository, that you have forked)\nNote: since Sept. 2021, the unauthenticated git protocol (git://...) on port 9418 is no longer supported on GitHub.\nYou will use upstream to fetch from the original repo (in order to keep your local copy in sync with the project you want to contribute to).\ngit fetch upstream\n\n(git fetch alone would fetch from origin by default, which is not what is needed here)\nYou will use origin to pull and push since you can contribute to your own repository.\ngit pull\ngit push\n\n(again, without parameters, 'origin' is used by default)\nYou will contribute back to the upstream repo by making a pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - Pushing code to two remotes\n\nI have two remote git repositories. origin and github\nI push my branch devel to both repositories.\ngit push -u origin devel\ngit push -u github devel\n\nBut then, when I do. git push It would only get pushed to github.\nIs there anyway I can set up my two remotes, so that I can push changes to both repositories with one command ?"}, {"role": "assistant", "content": "In recent versions of Git you can add multiple pushurls for a given remote. Use the following to add two pushurls to your origin:\ngit remote set-url --add --push origin git://original/repo.git\ngit remote set-url --add --push origin git://another/repo.git\n\nSo when you push to origin, it will push to both repositories.\nUPDATE 1: Git 1.8.0.1 and 1.8.1 (and possibly other versions) seem to have a bug that causes --add to replace the original URL the first time you use it, so you need to re-add the original URL using the same command. Doing git remote -v should reveal the current URLs for each remote.\nUPDATE 2: Junio C. Hamano, the Git maintainer, explained it's how it was designed. Doing git remote set-url --add --push <remote_name> <url> adds a pushurl for a given remote, which overrides the default URL for pushes. However, you may add multiple pushurls for a given remote, which then allows you to push to multiple remotes using a single git push. You can verify this behavior below:\n$ git clone git://original/repo.git\n$ git remote -v\norigin  git://original/repo.git (fetch)\norigin  git://original/repo.git (push)\n$ git config -l | grep '^remote\\.'\nremote.origin.url=git://original/repo.git\nremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n\nNow, if you want to push to two or more repositories using a single command, you may create a new remote named all (as suggested by @Adam Nelson in comments), or keep using the origin, though the latter name is less descriptive for this purpose. If you still want to use origin, skip the following step, and use origin instead of all in all other steps.\nSo let's add a new remote called all that we'll reference later when pushing to multiple repositories:\n$ git remote add all git://original/repo.git\n$ git remote -v\nall git://original/repo.git (fetch)               <-- ADDED\nall git://original/repo.git (push)                <-- ADDED\norigin  git://original/repo.git (fetch)\norigin  git://original/repo.git (push)\n$ git config -l | grep '^remote\\.all'\nremote.all.url=git://original/repo.git            <-- ADDED\nremote.all.fetch=+refs/heads/*:refs/remotes/all/* <-- ADDED\n\nThen let's add a pushurl to the all remote, pointing to another repository:\n$ git remote set-url --add --push all git://another/repo.git\n$ git remote -v\nall git://original/repo.git (fetch)\nall git://another/repo.git (push)                 <-- CHANGED\norigin  git://original/repo.git (fetch)\norigin  git://original/repo.git (push)\n$ git config -l | grep '^remote\\.all'\nremote.all.url=git://original/repo.git\nremote.all.fetch=+refs/heads/*:refs/remotes/all/*\nremote.all.pushurl=git://another/repo.git         <-- ADDED\n\nHere git remote -v shows the new pushurl for push, so if you do git push all master, it will push the master branch to git://another/repo.git only. This shows how pushurl overrides the default url (remote.all.url).\nNow let's add another pushurl pointing to the original repository:\n$ git remote set-url --add --push all git://original/repo.git\n$ git remote -v\nall git://original/repo.git (fetch)\nall git://another/repo.git (push)\nall git://original/repo.git (push)                <-- ADDED\norigin  git://original/repo.git (fetch)\norigin  git://original/repo.git (push)\n$ git config -l | grep '^remote\\.all'\nremote.all.url=git://original/repo.git\nremote.all.fetch=+refs/heads/*:refs/remotes/all/*\nremote.all.pushurl=git://another/repo.git\nremote.all.pushurl=git://original/repo.git        <-- ADDED\n\nYou see both pushurls we added are kept. Now a single git push all master will push the master branch to both git://another/repo.git and git://original/repo.git.\nIMPORTANT NOTE: If your remotes have distinct rules (hooks) to accept/reject a push, one remote may accept it while the other doesn't. Therefore, if you want them to have the exact same history, you'll need to fix your commits locally to make them acceptable by both remotes and push again, or you might end up in a situation where you can only fix it by rewriting history (using push -f), and that could cause problems for people that have already pulled your previous changes from the repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Untrack files from git temporarily\n\nI have setup a local git on my machine. When I initialized git, I added pre-compiled libs and binaries. However, now during my development I don't want to check in those files intermittently. I dont want to remove these files from repo. Is there any way to not keep a track of these files till I complete my development. (I think I can not use .gitignore as it works only for those files which are not in git. I want to temporarily disable tracking of files.)"}, {"role": "assistant", "content": "git update-index should do what you want\nThis will tell git you want to start ignoring the changes to the file\ngit update-index --assume-unchanged path/to/file\nWhen you want to start keeping track again\ngit update-index --no-assume-unchanged path/to/file\nGithub Documentation: update-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply unmerged upstream pull requests from other forks into my fork?\n\nA project on GitHub that I have a fork of has a new pull requests that I want to pull into my fork that the author has not pulled in yet.\nIs there a simple way to apply pull request from other forks into my fork? Is there something else here that I am missing?"}, {"role": "assistant", "content": "Update: Via Webpage\nYou can also do this via the github webpage.\nI assume, you should have already a fork (MyFork) of the common repo (BaseRepo) which has the pending pull request from a fork (OtherFork) you are interested in.\n\nNavigate to the fork (OtherFork) which has initiated the pull request which you like to get into your fork (MyFork)\nGo to the pull requests page of OtherFork\nClick new pull request\nThe pending pull request(s) should be offered. Remember to select proper OtherFork branch too. Select on the left side as the base fork your fork (MyFork) (IMPORTANT).\nNow the option of View pull request should change to Create pull request. Click this.\n\nNow you should have a pending pull request in your fork (MyFork), which you can simply accept."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I check out a GitHub pull request with git?\n\nI'd like to check out a previously created pull request (created via GitHub web interface). I searched and found different places where a refs/pull or refs/pull/pr\nBut when I add fetch = +refs/pull/*/head:refs/remotes/origin/pr/* to the git config file and do a git fetch\nWhat I'm doing wrong? Should GitHub create automatically the pull/xyz stuff, or do I have to configure something?"}, {"role": "assistant", "content": "To fetch a remote PR into your local repo,\ngit fetch origin pull/$ID/head:$BRANCHNAME\n\nwhere $ID is the pull request id and $BRANCHNAME is the name of the new branch that you want to create. Once you have created the branch, then simply\ngit checkout $BRANCHNAME\n\nFor instance, let's imagine you want to checkout pull request #2 from the origin main branch:\ngit fetch origin pull/2/head:MASTER\n\nSee the official GitHub documentation for more."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add color to GitHub's README.md file\n\nI have a README.md file for my project underscore-cli, and I want to document the --color flag.\nCurrently, the only way to do this is with a screenshot (which can be stored in the project repository):\n\nBut screenshots aren't text, preventing readers from copy/pasting the command in the screenshot. They're also a pain to create / edit / maintain, and are slower for browsers to load. The modern web uses text styles, not a bunch of rendered images of text.\nWhile some Markdown parsers support inline HTML styling, GitHub doesn't; this doesn't work:\n<span style=\"color: green\"> Some green text </span>\n\nThis doesn't work:\n<font color=\"green\"> Some green text </font>"}, {"role": "assistant", "content": "One way to add color to a README is by utilising a service that provides placeholder images.\nFor example this Markdown can be used:\n- ![#f03c15](https://placehold.co/15x15/f03c15/f03c15.png) `#f03c15`\n- ![#c5f015](https://placehold.co/15x15/c5f015/c5f015.png) `#c5f015`\n- ![#1589F0](https://placehold.co/15x15/1589F0/1589F0.png) `#1589F0`\n\nTo create a list of any colors you like:\n\n #f03c15\n #c5f015\n #1589F0"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I rollback a git repository to a specific commit?\n\nMy repo has 100 commits in it right now. I need to rollback the repository to commit 80, and remove all the subsequent ones.\nWhy?\nThis repo is supposed to be for merging from miscellaneous users. A bunch of merges went in as commits from me, due to excessive editing. That was due to a mislabeling of my remote branches, where 3 developers were labeled as each other. I need to reset to that point, and then pull forwards.\nI wanted to rebase, as in this example: How can I remove a commit on GitHub?\nHowever, git wants me to do a lot of conflict management. Is there a simpler way?"}, {"role": "assistant", "content": "git reset --hard <old-commit-id>\ngit push -f <remote-name> <branch-name>\n\nNote: As written in comments below, Using this is dangerous in a collaborative environment: you're rewriting history"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: How to make a fork of public repository private?\n\nHow can I fork a public repository, but make my fork private? I do have the subscription to support private repositories."}, {"role": "assistant", "content": "The answers are correct but don't mention how to sync code between the public repo and the fork.\nHere is the full workflow (we've done this before open sourcing React Native):\n\nFirst, duplicate the repo as others said (details here):\nCreate a new repo (let's call it private-repo) via the Github UI. Then:\ngit clone --bare https://github.com/exampleuser/public-repo.git\ncd public-repo.git\ngit push --mirror https://github.com/yourname/private-repo.git\ncd ..\nrm -rf public-repo.git\n\n\nClone the private repo so you can work on it:\ngit clone https://github.com/yourname/private-repo.git\ncd private-repo\nmake some changes\ngit commit\ngit push origin master\n\n\nTo pull new hotness from the public repo:\ncd private-repo\ngit remote add public https://github.com/exampleuser/public-repo.git\ngit pull public master # Creates a merge commit\ngit push origin master\n\nAwesome, your private repo now has the latest code from the public repo plus your changes.\n\nFinally, to create a pull request private repo -> public repo:\nUse the GitHub UI to create a fork of the public repo (the small \"Fork\" button at the top right of the public repo page). Then:\ngit clone https://github.com/yourname/the-fork.git\ncd the-fork\ngit remote add private_repo_yourname https://github.com/yourname/private-repo.git\ngit checkout -b pull_request_yourname\ngit pull private_repo_yourname master\ngit push origin pull_request_yourname\n\nNow you can create a pull request via the Github UI for public-repo, as described here.\nOnce project owners review your pull request, they can merge it.\nOf course the whole process can be repeated (just leave out the steps where you add remotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove file from Git history?\n\nSome time ago I added info(files) that must be private. Removing from the project is not problem, but I also need to remove it from git history.\nI use Git and Github (private account).\nNote: On this thread  something similar is shown, but here is an old file that was added to a feature branch, that branch merged to a development branch and finally merged to master, since this, a lot of changes was done. So it's not the same and what is needed is to change the history, and hide that files for privacy."}, {"role": "assistant", "content": "I have found this answer and it helped:\ngit filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch path_to_file' HEAD"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see an HTML page on Github as a normal rendered HTML page to see preview in browser, without downloading?\n\nOn http://github.com developer keep the HTML, CSS, JavaScript and images files of the project. How can I see the HTML output in browser?\nFor example this: https://github.com/necolas/css3-social-signin-buttons/blob/master/index.html\nWhen I open this it doesn't show the rendered HTML of the code of author. It shows the page as a source code.\nIs it possible to see it as rendered HTML directly? Otherwise I always need to download the whole ZIP just to see the result."}, {"role": "assistant", "content": "New fork because the old project is abandoned; \nThe URLs are now (htmlpreview -> html-preview):\n\nhttps://html-preview.github.io/\nhttps://html-preview.github.io/?url=https://github.com/bartaz/impress.js/blob/master/index.html\n\n\npreviously:\nThe most comfortable way to preview HTML files on GitHub is to go to https://htmlpreview.github.io/ or just prepend it to the original URL, i.e.: https://htmlpreview.github.io/?https://github.com/bartaz/impress.js/blob/master/index.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to leave a message for a github.com user\n\nNeed help on GitHub usage. I wonder if there is a way to communicate with a github.com user i.e. write the user a message when only username/id is given on their GitHub page? Does GitHub have this social feature?"}, {"role": "assistant", "content": "Although GitHub removed the private messaging feature, there's still an alternative.\nGitHub host git repositories. If the user you're willing to communicate with has ever committed some code, there are good chances you may reach your goal. Indeed, within each commit is stored some information about the author of the change or the one who accepted it.\nProvided you're really dying to exchange with user user_test\n\nDisplay the public activity page of the user: https://github.com/user_test?tab=activity\nSearch for an event stating \"user_test pushed to [branch] at [repository]\". There are usually good chances, they may have pushed one of his own commits. Ensure this is the case by clicking on the \"View comparison...\" link and make sure the user is listed as one of the committers.\nClone on your local machine the repository they pushed to: git clone https://github.com/..../repository.git \nCheckout the branch they pushed to: git checkout [branch]\nDisplay the latest commits: git log -50\n\nAs a committer/author, an email should be displayed along with the commit data.\nNote: Every warning related to unsolicited email should apply there. Do not spam."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove sensitive files and their commits from Git history\n\nI would like to put a Git project on GitHub but it contains certain files with sensitive data (usernames and passwords, like /config/deploy.rb for capistrano).\nI know I can add these filenames to .gitignore, but this would not remove their history within Git.\nI also don't want to start over again by deleting the /.git directory.\nIs there a way to remove all traces of a particular file in your Git history?"}, {"role": "assistant", "content": "For all practical purposes, the first thing you should be worried about is CHANGING YOUR PASSWORDS! It's not clear from your question whether your git repository is entirely local or whether you have a remote repository elsewhere yet; if it is remote and not secured from others you have a problem. If anyone has cloned that repository before you fix this, they'll have a copy of your passwords on their local machine, and there's no way you can force them to update to your \"fixed\" version with it gone from history. The only safe thing you can do is change your password to something else everywhere you've used it.\n\nWith that out of the way, here's how to fix it. GitHub answered exactly that question as an FAQ:\nNote for Windows users: use double quotes (\") instead of singles in this command\n\ngit filter-branch --index-filter \\\n'git update-index --remove PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' <introduction-revision-sha1>..HEAD\ngit push --force --verbose --dry-run\ngit push --force\n\nUpdate 2019:\nThis is the current code from the FAQ:\n  git filter-branch --force --index-filter \\\n  \"git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA\" \\\n  --prune-empty --tag-name-filter cat -- --all\n  git push --force --verbose --dry-run\n  git push --force\n\nKeep in mind that once you've pushed this code to a remote repository like GitHub and others have cloned that remote repository, you're now in a situation where you're rewriting history. When others try pull down your latest changes after this, they'll get a message indicating that the changes can't be applied because it's not a fast-forward. \nTo fix this, they'll have to either delete their existing repository and re-clone it, or follow the instructions under \"RECOVERING FROM UPSTREAM REBASE\" in the git-rebase manpage.\nTip: Execute git rebase --interactive\n\nIn the future, if you accidentally commit some changes with sensitive information but you notice before pushing to a remote repository, there are some easier fixes. If you last commit is the one to add the sensitive information, you can simply remove the sensitive information, then run:\ngit commit -a --amend\n\nThat will amend the previous commit with any new changes you've made, including entire file removals done with a git rm. If the changes are further back in history but still not pushed to a remote repository, you can do an interactive rebase:\ngit rebase -i origin/master\n\nThat opens an editor with the commits you've made since your last common ancestor with the remote repository. Change \"pick\" to \"edit\" on any lines representing a commit with sensitive information, and save and quit. Git will walk through the changes, and leave you at a spot where you can:\n$EDITOR file-to-fix\ngit commit -a --amend\ngit rebase --continue\n\nFor each change with sensitive information. Eventually, you'll end up back on your branch, and you can safely push the new changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to link to a specific line number on GitHub\n\nI know I can link to a specific line number on a file on a GitHub repository (I'm sure I've seen this before)...\nHow can I do this?"}, {"role": "assistant", "content": "Don't just link to the line numbers! Be sure to use the canonical URL too. Otherwise when that file is updated, you'll have a URL that points to the wrong lines!\nHow to make a permanent link to the right lines:\nClick on the line number you want (like line 18), and the URL in your browser will get a #L18 tacked onto the end. You literally click on the 18 at the left side, not the line of code. Looks like this:\n\nAnd now your browser's URL looks like this:\nhttps://github.com/git/git/blob/master/README.md?plain=1#L18\n\nIf you want multiple lines selected, simply hold down the Shift key and click a second line number, like line 20. Looks like this:\n\nAnd now your browser's URL looks like this:\nhttps://github.com/git/git/blob/master/README.md?plain=1#L18-L20\n\nHere's the important part:\nNow get the canonical URL for that particular commit by pressing the Y key. The URL in your browser will change to become something like this:\nhttps://github.com/git/git/blob/5bdb7a78adf2a2656a1915e6fa656aecb45c1fc3/README#L18-L20\n\nThat link contains the actual SHA-1 hash for that particular commit, rather than the current version of the file on master. That means that this link will work forever and not point to lines 18-20 of whatever future version of that file might contain.\nNow bask in the glow of your new permanent link. ;-)\nAfter this answer was originally written, watashiSHUN pointed out that GitHub has now made it easier to get the permanent link. A ... menu is provided on the left after you select one or more lines, like this:\n\nPlease see watashiSHUN's answer too.\nNote that GitHub does not show line numbers for some \"renderable\" files, like Markdown files. Adding ?plain=1 to the url will show the source file with line numbers, e.g. https://github.com/git/git/blob/master/README.md?plain=1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find out \"The most popular repositories\" on Github? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nOnce upon a time, we can watch the most popular repositories (Most forked or Most watched) at this page (https://github.com/popular/watched) of Github. like this:\n\nBut now when you try to explore repos, you can only see the Top 25 trending repositories. like this: https://github.com/trending\nWhy Github change this, and\nis there any way to find out the list of the most popular repos?"}, {"role": "assistant", "content": "Ranking by stars or forks is not working. Each promoted or created by a famous company repository is popular at the beginning. Also it is possible to have a number of them which are in trend right now (publications, marketing, events). It doesn't mean that those repositories are useful/popular.\nThe gitmostwanted.com project (repo at github) analyses GH Archive data in order to highlight the most interesting repositories and exclude others. Just compare the results with mentioned resources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Custom domain for GitHub project pages\n\nI have a gh-pages branch in one of my http://github.com repos. The GitHub project pages works fine if I go to http://myuser.github.com/myrepo\nI want to setup a custom domain (myexample.com) that will serve up these project pages.  I want both myexample.com and www.myexample.com to serve up these project pages.\nGitHub pages help says to make an A record and a CNAME record in your DNS.  The A record makes sense, but I do not know what CNAME record to make in my DNS.\nThe gh-pages docs say to make a CNAME record for 'charlie.github.com' which is a user page repository.  I do not have a user page repository - I only have a project repository and a gh-pages branch that I want to use for myexample.com and www.myexample.com.\nDo I need to make a user page repository just so I can use my project page for www.myexample.com and myexample.com?\nI would just try it, but I want to make sure this will work as I already have www.myexample.com live and don't want to make a mistake.\nI emailed GitHub support and their response was\n\nYou can't have both point to the same gh-pages as far as I know.\n\nI find it hard to believe they would only support A records for project pages.\nHas anyone successfully done this before?"}, {"role": "assistant", "content": "1/23/19 UPDATE:\nThings have changed quite a bit (for the better) since my last answer.  This updated answer will show you how to configure:\n\nRoot apex (example.com)\nSub-domain (www.example.com)\nHTTPS (optional but strongly encouraged)\n\nIn the end, all requests to example.com will be re-directed to https://www.example.com (or http:// if you choose NOT to use HTTPS).  I always use www as my final landing.  Why(1,2), is for another discussion.\nThis answer is long but it is not complicated.  I was verbose for clarity as the GitHub docs on this topic are not clear or linear.\nStep 1: Enable GitHub pages in GitHub settings\n\nFrom your repo, click on the  tab\nScroll down to the GitHub Pages section.  You have two options: \nChoosing master branch will treat /README.md as your web index.html.  Choosing master branch /docs folder will treat /docs/README.md as your web index.html.\nChoose a theme.\nWait a minute while GitHub publishes your site.  Verify it works by clicking on the link next to Your site is ready to be published at\n\nStep 2: Specify custom domain in GitHub settings\nEnter your custom domain name here and hit save:\n\nThis is a subtle, but important step.\n\nIf the custom domain you added to your GitHub Pages site is example.com, then www.example.com will redirect to example.com\nIf the custom domain you added to your GitHub Pages site is www.example.com, then example.com will redirect to www.example.com.\n\nAs mentioned before, I recommend always landing at www so I entered www.example.com as pictured above.\nStep 3: Create DNS entries\nIn your DNS provider's web console, create four A records and one CNAME.\n\nA Records for @ (aka root apex):\n\nSome DNS providers will have you specify @, others (like AWS Route 53) you will leave the sub-domain blank to indicate @.  In either case, these are the A records to create:\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\nCheck the Github docs to confirm these are the most up-to-date IPs.\n\nCreate a CNAME record to point www.example.com to YOUR-GITHUB-USERNAME.github.io.\n\nThis is the most confusing part.\nNote the YOUR-GITHUB-USERNAME NOT the GitHub repo name!  The value of YOUR-GITHUB-USERNAME is determined by this chart.\nFor a User pages site (most likely what you are), CNAME entry will be username.github.io, ex:\n\nFor a Organization  pages site, CNAME entry will be orgname.github.io, ex:\n\nStep 5: Confirm DNS entries\n\nConfirm your A records by running dig +noall +answer example.com.  It should return the four 185.x.x.x IP addresses you entered.\n\nConfirm your CNAME record by running dig www.example.com +nostats +nocomments +nocmd.  It should return a CNAME   YOUR-GITHUB-USERNAME.github.io\n\n\nIt may take an hour or so for these DNS entries to resolve/propagate.  Once they do, open up your browser to http://example.com and it should re-direct to http://www.example.com\nStep 6: SSL (HTTPS) Configuration. Optional, but highly recommended\nAfter you have the custom domain working, go back to the repo settings.  If you already have the settings page open, hard refresh the page.\nIf there is a message under the Enforce HTTPS checkbox, stating that it is still processing you will need to wait.  You may also need to hit the save button in the Custom domain section to kick off the Enforce HTTPS processing.\nOnce processing is completed, it should look like this:\n\nJust click on the Enforce HTTPS checkbox, and point your browser to https://example.com.  It should re-direct and open https://www.example.com\nTHATS IT!\nGitHub will automatically keep your HTTPS cert up-to-date AND should handle the apex to www redirect over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't push to GitHub because of large file which I already deleted\n\nCurrently I have\n\nEmpty GitHub repo\nSSH server repo (main)\nLocal Repo\n\nSSH server repo was the most up-to-date repo (production site) so I did a Git clone from there to local. I then tried to do a git push to GitHub.\nEverything went OK but then it said something about filename.gz being too large for GitHub. I didn't need this file so I ran several Git commands to get rid of it from Git cache then pushed back to SSH server.\nI don't see the large file locally but it's still on SSH server even though git diff returns nothing and git push returns \"Everything is up-to-date\" - And even though the file is not visible in local repo when I try to push to GitHub I still get error about it \n\nremote: error: File fpss.tar.gz is 135.17 MB; this exceeds GitHub's file size limit of 100 MB\n\nI followed steps under \"fixing the problem\" listed on GitHub help so shouldn't that have been enough?\nHow is the file still in the ether when it's not local or listed in git status/diff/push?"}, {"role": "assistant", "content": "You can use\ngit filter-branch --index-filter 'git rm -r --cached --ignore-unmatch <file/dir>' HEAD\n\nThis will delete everything in the history of that file. The problem is that the file is present in the history.\nThis command changes the hashes of your commits which can be a real problem, especially on shared repositories. It should not be performed without understanding the consequences.\nEdit: The git project now recommends that users use git filter-repo instead of git filter-branch.\n\nUsing git filter-repo\nWARNING: git-filter-branch has a glut of gotchas generating mangled history\n         rewrites.  Hit Ctrl-C before proceeding to abort, then use an\n         alternative filtering tool such as 'git filter-repo'\n         (https://github.com/newren/git-filter-repo/) instead.  See the\n         filter-branch manual page for more details; to squelch this warning,\n         set FILTER_BRANCH_SQUELCH_WARNING=1.\n\nInstallation\n[brew|pip3|...] install git-filter-repo\n\nUsage\nTo remove any file with the path prefix example/path/to/something, you can run\ngit filter-repo --path example/path/to/something--invert-paths\n\nTo remove any file without the path prefix example/path/to/something, you can run\ngit filter-repo --path example/path/to/something"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove folder and its contents from git/GitHub's history\n\nI was working on a repository on my GitHub account and this is a problem I stumbled upon.\n\nNode.js project with a folder with a few npm packages installed\nThe packages were in node_modules folder\nAdded that folder to git repository and pushed the code to github (wasn't thinking about the npm part at that time)\nRealized that you don't really need that folder to be a part of the code\nDeleted that folder, pushed it \n\nAt that instance, the size of the total git repo was around 6MB where the actual code (all except that folder) was only around 300 KB. \nNow what I am looking for in the end is a way to get rid of details of that package folder from git's history so if someone clones it, they don't have to download 6mb worth of history where the only actual files they will be getting as of the last commit would be 300KB.\nI looked up possible solutions for this and tried these 2 methods\n\nRemove file from git repository (history)\nhttp://help.github.com/remove-sensitive-data/\nhttps://gist.github.com/1588371\n\nThe Gist seemed like it worked where after running the script, it showed that it got rid of that folder and after that it showed that 50 different commits were modified. But it didn't let me push that code. When I tried to push it, it said Branch up to date but showed 50 commits were modified upon a git status. The other 2 methods didn't help either.\nNow even though it showed that it got rid of that folder's history, when I checked the size of that repo on my localhost, it was still around 6MB. (I also deleted the refs/originalfolder but didn't see the change in the size of the repo).\nWhat I am looking to clarify is, if there's a way to get rid of not only the commit history (which is the only thing I think happened) but also those files git is keeping assuming one wants to rollback.\nLets say a solution is presented for this and is applied on my localhost but cant be reproduced to that GitHub repo, is it possible to clone that repo, rollback to the first commit perform the trick and push it (or does that mean that git will still have a history of all those commits? - aka. 6MB). \nMy end goal here is to basically find the best way to get rid of the folder contents from git so that a user doesn't have to download 6MB worth of stuff and still possibly have the other commits that never touched the modules folder (that's pretty much all of them) in git's history.\nHow can I do this?"}, {"role": "assistant", "content": "WARNING: git filter-branch is no longer officially recommended. The official recommendation is to use git-filter-repo; see Andr\u00e9 Anjos' answer for details.\n\nIf you are here to copy-paste code:\nThis is an example which removes node_modules from history\ngit filter-branch --tree-filter \"rm -rf node_modules\" --prune-empty HEAD\ngit for-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git update-ref -d\necho node_modules/ >> .gitignore\ngit add .gitignore\ngit commit -m 'Removing node_modules from git history'\ngit gc\ngit push origin main --force\n\nWhat git actually does:\nThe first line iterates through all references on the same tree (--tree-filter) as HEAD (your current branch), running the command rm -rf node_modules. This command deletes the node_modules folder (-r, without -r, rm won't delete folders), with no prompt given to the user (-f). The added --prune-empty deletes useless (not changing anything) commits recursively.\nThe second line deletes the reference to that old branch.\nThe rest of the commands are relatively straightforward."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Clone only one branch [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I clone a single branch in Git?\n\n                                (27 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI would like to know how I could clone only one branch instead of cloning the whole Git repository."}, {"role": "assistant", "content": "From the announcement Git 1.7.10 (April 2012):\n\n\ngit clone learned --single-branch option to limit cloning to a single branch (surprise!); tags that do not point into the history of the branch are not fetched.\n\n\nGit actually allows you to clone only one branch, for example:\ngit clone -b mybranch --single-branch git://sub.domain.com/repo.git\n\nNote: Also you can add another single branch or \"undo\" this action."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change my Git username in terminal?\n\nI was pushing and pulling from git in Terminal then I changed my username on github.com.  I went to push some changes and it couldn't push because it was still recognizing my old username.. How do I change/update my username on git in terminal?"}, {"role": "assistant", "content": "In your terminal, navigate to the repo you want to make the changes in.\nExecute git config --list to check current username & email in your local repo.\nChange username & email as desired. Make it a global change or specific to the local repo: \ngit config --global user.name \"Full Name\"\ngit config --global user.email \"[email\u00a0protected]\"\nPer repo basis you could also edit .git/config manually instead.\nDone!\n\nWhen performing step 2 if you see credential.helper=manager you need to open the credential manager of your computer (Win or Mac) and update the credentials there\nHere is how it look on windows\n\nTroubleshooting? Learn more"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - remote: Repository not found\n\nI have SourceTree with local working copy. And all operations work good, I can simple fetch, push, pull and etc via SourceTree. I just needed to make force push which does not exist in SourceTree.\nI opened terminal made git push -f\nremote: Repository not found.\nfatal: repository 'https://github.com/MyRepo/project.git/' not found\n\nI am not sure what can be an issue."}, {"role": "assistant", "content": "Remove all the github.com credential details from the system.\nFor mac\nDelete the github.com password from the Keychain Access.\nFor windows\nDelete the credentials from Credential Manager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Clone A Private Repository (Github)\n\nI have a private repository on Github for a project I'm working on.  Until now I had only worked on my home desktop, but I just bought a laptop, and am trying to set it up so that I can work on the project from either computer, and push / pull changes.\nI added a new SSH key to my Github account for the laptop, and was successful in cloning and making changes to a public test repo that I set up.  However, I couldn't clone the private repo.  Is there anything special I need to do in the command line in order to clone a private repo?  Do I need to set up a new GitHub account for my laptop and set myself up as a collaborator?\nThe command I used was git clone git://github.com/username/reponame.git"}, {"role": "assistant", "content": "Apr, 2022 Update:\nYou can clone a private repository from your account and you can also clone a private repository from organization if you're its owner or member.\n*pat is PAT(Personal Access Token).\ngit clone https://<pat>@github.com/<your account or organization>/<repo>.git\n\nTo clone a private repository from your account or organization, you need to generate a PAT(Personal Access Token) on your Github account, and add it to the command above. *Organization doesn't have PAT generator.\nThis is how you generate a PAT on your Github account:\n1, Go to \"Settings\":\n\n2, Scroll down then go to \"Developer settings\":\n\n3, Press \"Personal access tokens\" then press \"Generate new token\":\n\n4, Fill \"Note\" then check \"repo\":\n*If \"repo\" is not checked, you cannot clone a private repository.\n\n5, Scroll down then press \"Generate token\":\n\n6, Finally, a PAT is generated:\n\nThis is the command with the PAT generated above:\ngit clone https://[email\u00a0protected]/<your account or organization>/<repo>.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I embed a YouTube video on GitHub wiki pages?\n\nI am fairly new to markup (though it's extremely easy to pickup). I am working on a package and am trying to get the wiki pages looking nice as a help manual. I can insert a YouTube video link into the wiki page pretty easily but how do I embed a YouTube video. I know this may not be possible.\nI have read you can use HTML tags so I tried embedding with HTML per this link as follows:\n<object width=\"425\" height=\"350\">\n  <param name=\"movie\" value=\"http://www.youtube.com/user/wwwLoveWatercom?v=BTRN1YETpyg\" />\n  <param name=\"wmode\" value=\"transparent\" />\n  <embed src=\"http://www.youtube.com/user/wwwLoveWatercom?v=BTRN1YETpyg\"\n         type=\"application/x-shockwave-flash\"\n         wmode=\"transparent\" width=\"425\" height=\"350\" />\n</object>\n\nAnd saved the page but nothing happened.\n\nIs it possible to embed a YouTube video on GitHub wiki pages?\nIf so how?"}, {"role": "assistant", "content": "It's not possible to embed videos directly, but you can put an image which links to a YouTube video:\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](https://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n\n\nFor more information about Markdown look at this Markdown cheatsheet on GitHub.\nFor more information about Youtube image links look this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to search on GitHub to get exact string matches, including special characters\n\nI can search exact matches from Google by using quotes like \"system <<-\".\nHow can I do the same thing for GitHub?"}, {"role": "assistant", "content": "You couldn't (before 2022). The official GitHub searching rules:\n\nDue to the complexity of searching code, there are a few restrictions\non how searches are performed:\n\nOnly the default branch is considered. In most cases, this will be the master branch.\nOnly files smaller than 384 KB are searchable.\nOnly repositories with fewer than 500,000 files are searchable.\nYou must always include at least one search term when searching source code. For example, searching for language:go is not valid, while amazing language:go is.\nAt most, search results can show two fragments from the same file, but there may be more results within the file.\nYou can't use the following wildcard characters as part of your search query:\n. , : ; / \\ ` ' \" = * ! ? # $ & + ^ | ~ < > ( ) { } [ ]\nThe search will simply ignore these symbols.\n\n\nUpdate: GitHub supports literal strings now, but you can also try some more powerful ways below.\n\nTry Sourcegraph\nFor complex search with regex support try Sourcegraph.\n\n\nClone and use git-grep:\ngit support searching in sources with git-grep command. Just clone a repository and use the command in the folder:\ngit grep \"text-to-search\"\n\nAlternatives:\nI recommend you to try ripgrep tool, it's fast and simple. Works like git-grep but looks nicer:\nrg \"text-to-search\"\n\nAnd you can use the standard grep to search any text in files:\ngrep -r \"text-to-search\" /repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Find a commit on GitHub given the commit hash\n\nI am fairly new to Github and have come across an amateur-ish problem.\nI have been asked to do a code review and have been provided with a commit hash, however I have tried looking in Git if I can search using commit hashes but couldn't find anything.\nIs there a way I can find the changed code just by using the commit hash?"}, {"role": "assistant", "content": "A URL of the form https://github.com/<owner>/<project>/commit/<hash> will show you the changes introduced in that commit.  For example here's a recent bugfix I made to one of my projects on GitHub:\nhttps://github.com/jerith666/git-graph/commit/35e32b6a00dec02ae7d7c45c6b7106779a124685\nYou can also shorten the hash to any unique prefix, like so:\nhttps://github.com/jerith666/git-graph/commit/35e32b\n\nI know you just asked about GitHub, but for completeness: If you have the repository checked out, from the command line, you can achieve basically the same thing with either of these commands (unique prefixes work here too):\ngit show 35e32b6a00dec02ae7d7c45c6b7106779a124685\ngit log -p -1 35e32b6a00dec02ae7d7c45c6b7106779a124685\n\nNote: If you shorten the commit hash too far, the command line gives you a helpful disambiguation message, but GitHub will just return a 404."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push different local Git branches to Heroku/master\n\nHeroku has a policy of ignoring all branches but 'master'.\nWhile I'm sure Heroku's designers have excellent reasons for this policy (I'm guessing for storage and performance optimization), the consequence to me as a developer is that whatever local topic branch I may be working on, I would like an easy way to switch Heroku's master to that local topic branch and do a \"git push heroku -f\" to over-write master on Heroku.\nWhat I got from reading the \"Pushing Refspecs\" section of http://progit.org/book/ch9-5.html is\ngit push -f heroku local-topic-branch:refs/heads/master\nWhat I'd really like is a way to set this up in the configuration file so that \"git push heroku\" always does the above, replacing local-topic-branch with the name of whatever my current branch happens to be.  If anyone knows how to accomplish that, please let me know!\nThe caveat for this, of course, is that this is only sensible if I am the only one who can push to that Heroku app/repository. A test or QA team might manage such a repository to try out different candidate branches, but they would have to coordinate so that they all agree on what branch they are pushing to it on any given day.\nNeedless to say, it would also be a very good idea to have a separate remote repository (like GitHub) without this restriction for backing everything up to. I'd call that one \"origin\" and use \"heroku\" for Heroku so that \"git push\" always backs up everything to origin, and \"git push heroku\" pushes whatever branch I'm currently on to Heroku's master branch, overwriting it if necessary.\nWould this work?\n\n[remote \"heroku\"]\n    url = [email\u00a0protected]:my-app.git\n    push = +refs/heads/*:refs/heads/master\n\nI'd like to hear from someone more experienced before I begin to experiment, although I suppose I could create a dummy app on Heroku and experiment with that.\nAs for fetching, I don't really care if the Heroku repository is write-only. I still have a separate repository, like GitHub, for backup and cloning of all my work.\nFootnote: This question is similar to, but not quite the same as Good Git deployment using branches strategy with Heroku?"}, {"role": "assistant", "content": "See https://devcenter.heroku.com/articles/git#deploying-code\n$ git push heroku yourbranch:main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git clone with HTTPS or SSH remote?\n\ngit clone supports both HTTPS and SSH remote URLs. Which should I use? What are the advantages of each?\nGitHub's docs don't make a recommendation either way. I recall in 2013 GitHub used to recommend SSH (archive link). Why was that?"}, {"role": "assistant", "content": "GitHub have changed their recommendation several times (example).\nIt appears that they currently recommend HTTPS because it is the easiest to set up on the widest range of networks and platforms, and by users who are new to all this.\nThere is no inherent flaw in SSH (if there was they would disable it) -- in the links below, you will see that they still provide details about SSH connections too:\n\nHTTPS is less likely to be blocked by a firewall.\nhttps://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls\n\nThe https:// clone URLs are available on all repositories, regardless of visibility. https:// clone URLs work even if you are behind a firewall or proxy.\n\n\nAn HTTPS connection allows credential.helper to cache your password.\nhttps://docs.github.com/en/get-started/quickstart/set-up-git#connecting-over-https-recommended\n\nIf you clone with HTTPS, you can cache your GitHub credentials in Git using a credential helper. For more information, see \"Cloning with HTTPS urls\" and \"Caching your GitHub credentials in Git.\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a command line utility for rendering GitHub flavored Markdown?\n\nI'm wondering if there is a command line utility for taking a GitHub flavored Markdown file and rendering it to HTML.\nI'm using a GitHub wiki to create website content. I've cloned the repository on my server and would then like to process it into regular HTML. It's important to me that what appears on GitHub is exactly how it should look for my website. I'd also really like to use the fenced blocks with ~~~, so I'd rather not use standard Markdown syntax only.\nI've looked a bit into the JavaScript live preview thinking I could hook it into Node.js, but they say it is deprecated. I've looked at the redcarpet repository, but it doesn't look like it has a command line interface.\nI rolled my own solution, however, since no solution here is clearly better than the others, I'll leave the question without a selected answer."}, {"role": "assistant", "content": "I wrote a small CLI in Python and added GFM support. It's called Grip (Github Readme Instant Preview).\nInstall it with:\n$ pip install grip\n\nAnd to use it, simply:\n$ grip\n\nThen visit localhost:5000 to view the readme.md file at that location.\nYou can also specify your own file:\n$ grip CHANGES.md\n\nAnd change port:\n$ grip 8080\n\nAnd of course, specifically render GitHub-Flavored Markdown, optionally with repository context:\n$ grip --gfm --context=username/repo issue.md\n\nNotable features:\n\nRenders pages to appear exactly like on GitHub\nFenced blocks\nPython API\nNavigate between linked files (thanks, vladwing!) added in 2.0\nExport to a single file (thanks, iliggio!) added in 2.0\nNew: Read from stdin and export to stdout added in 3.0\n\nCheck it out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub pull request showing commits that are already in target branch\n\nI'm trying to review a pull request on GitHub to a branch that isn't master. The target branch was behind master and the pull request showed commits from master, so I merged master and pushed it to GitHub, but the commits and diff for them still appear in the pull request after refreshing. I've doubled checked that the branch on GitHub has the commits from master. Why are they still appearing in the pull request?\nI've also checked out the pull request locally and it only shows the un-merged commits."}, {"role": "assistant", "content": "Here's a good workaround. Use the Edit button when viewing the PR in GitHub to change the base branch to something other than master. Then switch it back to master and it will now correctly show only the changes from the most recent commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I fix \"remote: fatal error in commit_refs\" errors trying to push with Git?\n\nWhen I try to push to master branch that is hosted on https://github.com I get:\n\nremote: fatal error in commit_refs\n\nHow can I solve this?"}, {"role": "assistant", "content": "In my case, GitHub was down by the time I was trying to push.\nJust check https://www.githubstatus.com to know about GitHub site status.\nWhen it's up you'll be able to push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "New lines inside paragraph in README.md\n\nWhen editing an issue and clicking Preview the following markdown source:\na\nb\nc\n\nshows every letter on a new line.\nHowever, it seems to me that pushing similar markdown source structure in README.md joins all the letters on one line.\nI'd like the new lines preserved in the README.md in this project: https://github.com/zoran119/simple-read-only-test\nAny idea how?"}, {"role": "assistant", "content": "Interpreting newlines as <br /> used to be a feature of Github-flavored markdown, but the most recent help document no longer lists this feature.\nFortunately, you can do it manually. The easiest way is to ensure that each line ends with two spaces. So, change\na\nb\nc\n\ninto\na__\nb__\nc\n\n(where _ is a blank space).\nOr, you can add explicit <br /> tags.\na <br />\nb <br />\nc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to embed a video into GitHub README.md?\n\nIs it possible to embed a flash video  into README.md on GitHub? It isn't showing up: https://github.com/mattdipasquale/PicSciP"}, {"role": "assistant", "content": "Add a url to video file in your ReadMe.\nGithub now supports videos, see more detailed answer here:   https://stackoverflow.com/a/4279746/1092815\nYou can see a live example here (See at the end of the readme):\nhttps://github.com/alelievr/Mixture/blob/0.4.0/README.md\nGithub Pages\nI strongly recommend placing the video in a project website created with GitHub Pages instead of the readme, like described in VonC's answer; it will be a lot better than any of these ideas. But if you need a quick fix just like I needed, here are some suggestions.\nUse a gif\nSee aloisdg's answer, result is awesome, gifs are rendered on github's readme ;)\nUse a video player picture\nYou could trick the user into thinking the video is on the readme page with a picture. It sounds like an ad trick, it's not perfect, but it works and it's funny ;).\nExample:\n[![Watch the video](https://i.sstatic.net/Vp2cE.png)](https://youtu.be/vt5fpE0bzSY)\n\nResult:\n\nUse youtube's preview picture\nYou can also use the picture generated by youtube for your video.\nFor youtube urls in the form of:\nhttps://www.youtube.com/watch?v=<VIDEO ID>\nhttps://youtu.be/<VIDEO ID>\n\nThe preview urls are in the form of:\nhttps://img.youtube.com/vi/<VIDEO ID>/maxresdefault.jpg\nhttps://img.youtube.com/vi/<VIDEO ID>/hqdefault.jpg\n\nExample:\n[![Watch the video](https://img.youtube.com/vi/T-D1KVIuvjA/maxresdefault.jpg)](https://youtu.be/T-D1KVIuvjA)\n\nResult:\n\nUse asciinema\nIf your use case is something that runs in a terminal, asciinema lets you record a terminal session and has nice markdown embedding.\nHit the share button and copy the markdown snippet.\nExample:\n[![asciicast](https://asciinema.org/a/113463.png)](https://asciinema.org/a/113463)\n\nResult:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Resize image in the wiki of GitHub using Markdown\n\nI'm writing a wiki page on GitHub, and I'm using Markdown.\nMy problem is that I'm putting a large image (this image is in its own repository) and I need resize it.\nI have tried different solutions, but they do not work:\n![image](http://url.to/image.png \"Title\" {width=40px height=400px})\n\n![image](http://url.to/image.png = 250x250)\n\n![image](http://url.to/image.png = 250x)\n\n[[http://url.to/image.png = 250x]]\n\nIs there a way to get it?\nIt is preferable without HTML."}, {"role": "assistant", "content": "Updated:\nMarkdown syntax for images (external/internal):\n![test](https://github.com/favicon.ico)\n\nHTML code for sizing images (internal/external):\n<img src=\"https://github.com/favicon.ico\" width=\"48\">\n\nExample:\n\n\nOld Answer:\nThis should work:\n[[ http://url.to/image.png | height = 100px ]]\nSource: https://guides.github.com/features/mastering-markdown/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can one display images side by side in a GitHub README.md?\n\nI'm trying to show a comparison between two photos in my README.md which is why I want to display them side-by-side. Here is how the two images are placed currently. I want to show the two Solarized color schemes side by side instead of top and bottom. Help would be much appreciated, thanks!"}, {"role": "assistant", "content": "The easiest way I can think of solving this is using the tables included in GitHub's flavored markdown.\nTo your specific example it would look something like this:\nSolarized dark             |  Solarized Ocean\n:-------------------------:|:-------------------------:\n![](https://...Dark.png)  |  ![](https://...Ocean.png)\n\nThis creates a table with Solarized Dark and Ocean as headers and then contains the images in the first row. Obviously you would replace the ... with the real link. The :s are optional (They just center the content in the cells, which is kinda unnecessary in this case). Also you might want to downsize the images so they will display better side-by-side."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I rename a repository on GitHub?\n\nI wanted to rename one of my repositories on GitHub, but I got scared when a big red warning said:\n\n\nWe will not set up any redirects from the old location\nYou will need to update your local repositories to point to the new location\nRenaming may take a few minutes to complete\n\n\nDoes anyone have step-by-step instructions on how to accomplish #1 and #2 manually? Or what do I have to do locally?"}, {"role": "assistant", "content": "If you are the only person working on the project, it's not a big problem, because you only have to do #2.\nLet's say your username is someuser and your project is called someproject.\nThen your project's URL will be1\n[email\u00a0protected]:someuser/someproject.git\n\nIf you rename your project, it will change the someproject part of the URL, e.g.\n[email\u00a0protected]:someuser/newprojectname.git\n\n(see footnote if your URL does not look like this).\nYour working copy of Git uses this URL when you do a push or pull.\nSo after you rename your project, you will have to tell your working copy the new URL.\nYou can do that in two steps:\nFirstly, cd to your local Git directory, and find out what remote name(s) refer to that URL:\n$ git remote -v\norigin  [email\u00a0protected]:someuser/someproject.git\n\nThen, set the new URL\n$ git remote set-url origin [email\u00a0protected]:someuser/newprojectname.git\n\nOr in older versions of Git, you might need:\n$ git remote rm origin\n$ git remote add origin [email\u00a0protected]:someuser/newprojectname.git\n\n(origin is the most common remote name, but it might be called something else.)\nBut if there are lots of people who are working on your project, they will all need to do the above steps, and maybe you don't even know how to contact them all to tell them. That's what #1 is about.\nFurther reading:\n\nGitHub - working with remotes\nGit Reference - remotes\nGit Book - Distributed Workflows\n\nFootnotes:\n1 The exact format of your URL depends on which protocol you are using, e.g.\n\nSSH = [email\u00a0protected]:someuser/someproject.git\nHTTPS = https://[email\u00a0protected]/someuser/someproject.git\nGIT = git://github.com/someuser/someproject.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Search code inside a Github project\n\nIs there a way to grep for something inside a Github project's code?\nI could pull the source and grep it locally, but I was wondering if it's possible through the web interface or a 3rd-party alternative.\nIdeas?"}, {"role": "assistant", "content": "Update May 2023:\n\nThe new code search and code view is now generally available (May. 2023)\n\n(As noted by holydragon in the comments, that does require to sign in to GitHub first)\n\nAt GitHub Universe last year, we announced a total redesign of GitHub's code search and navigation experience, powered by our all-new code search engine that we built from scratch.\nAnd in February, we announced our public beta.\nToday, we are rolling out this feature to all GitHub users.\n\nCheck out our blog post to learn more about how GitHub's new code search and code view can help you search, navigate, and understand your code.\nAnd if you have feedback, please share it with us in our feedback discussion.\n\n\nUpdate Dec. 2021: search has been improved again, with Search for an exact string, with support for substring matches and special characters, or regexps.\n\nBut only on cs.github.com, and still in beta (waitlist applies)\n\nUpdate January 2013: a brand new search has arrived!, based on elasticsearch.org:\nA search for stat within the ruby repo will be expressed as stat repo:ruby/ruby, and will now just workTM.\n(the repo name is not case sensitive: test repo:wordpress/wordpress returns the same as test repo:Wordpress/Wordpress)\n\nWill give:\n\nAnd you have many other examples of search, based on followers, or on forks, or...\n\nUpdate July 2012 (old days of Lucene search and poor code indexing, combined with broken GUI, kept here for archive):\nThe search (based on SolrQuerySyntax) is now more permissive and the dreaded \"Invalid search query. Try quoting it.\" is gone when using the default search selector \"Everything\":)\n(I suppose we can all than Tim Pease, which had in one of his objectives \"hacking on improved search experiences for all GitHub properties\", and I did mention this Stack Overflow question at the time ;) )\nHere is an illustration of a grep within the ruby code: it will looks for repos and users, but also for what I wanted to search in the first place: the code!\n\n\nInitial answer and illustration of the former issue (Sept. 2012 => March 2012)\nYou can use the advanced search GitHub form:\n\nChoose Code, Repositories or Users from the drop-down and\nuse the corresponding prefixes listed for that search type.\n\nFor instance, Use the repo:username/repo-name directive to limit the search to a code repository.\nThe initial \"Advanced Search\" page includes the section:\n\nCode Search:\nThe Code search will look through all of the code publicly hosted on GitHub. You can also filter by :\n\nthe language language:\nthe repository name (including the username) repo:\nthe file path    path:\n\n\nSo if you select the \"Code\" search selector, then your query grepping for a text within a repo will work:\n\n\nWhat is incredibly unhelpful from GitHub is that:\n\nif you forget to put the right search selector (here \"Code\"), you will get an error message:\n\"Invalid search query. Try quoting it.\"\n\n\n\nthe error message doesn't help you at all.\nNo amount of \"quoting it\" will get you out of this error.\n\nonce you get that error message, you don't get the sections reminding you of the right association between the search selectors (\"Repositories\", \"Users\" or \"Language\") and the (right) search filters (here \"repo:\").\nAny further attempt you do won't display those associations (selectors-filters) back. Only the error message you see above...\nThe only way to get back those arrays is by clicking the \"Advance Search\" icon:\n\n\n\n\nthe \"Everything\" search selector, which is the default, is actually the wrong one for all of the search filters! Except \"language:\"...\n(You could imagine/assume that \"Everything\" would help you to pick whatever search selector actually works with the search filter \"repo:\", but nope. That would be too easy)\n\nyou cannot specify the search selector you want through the \"Advance Search\" field alone!\n(but you can for \"language:\", even though \"Search Language\" is another combo box just below the \"Search for\" 'type' one...)\n\n\n\n\nSo, the user's experience usually is as follows:\n\nyou click \"Advanced Search\", glance over those sections of filters, and notice one you want to use: \"repo:\"\nyou make a first advanced search \"repo:jruby/jruby stat\", but with the default Search selector \"Everything\"\n=> FAIL! (and the arrays displaying the association \"Selectors-Filters\" is gone)\nyou notice that \"Search for\" selector thingy, select the first choice \"Repositories\" (\"Dah! I want to search within repositories...\")\n=> FAIL!\ndejected, you select the next choice of selectors (here, \"Users\"), without even looking at said selector, just to give it one more try...\n=> FAIL!\n\"Screw this, GitHub search is broken! I'm outta here!\"\n...\n(GitHub advanced search is actually not broken. Only their GUI is...)\n\n\nSo, to recap, if you want to \"grep for something inside a Github project's code\", as the OP Ben Humphreys, don't forget to select the \"Code\" search selector..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Meaning of the GitHub message: push declined due to email privacy restrictions\n\nI have accepted and merged a pull request on GitHub, and now I cannot pull my commits any more.\nThe message is:\n! [remote rejected] master -> master (push declined due to email privacy restrictions)\nerror: failed to push some refs to '[email\u00a0protected]:FranckFreiburger/vue-resize-sensor.git'\n\n\ngit did not exit cleanly (exit code 1) (3838 ms @ 12/04/2017 21:23:11)\n\nWhat should I do now?"}, {"role": "assistant", "content": "The remote repository has been configured to disallow you pushing a commit that would reveal your personal e-mail address. For example in GitHub you have checked the Block command line pushes that expose my email checkbox to enable this.\n\nWhile you can of course uncheck that setting, it will expose your private e-mail address to everyone in the world, as author information is readable by anyone with access to your repository.\nInstead, do this:\n\nYou can see your personal e-mail address, which is used by default for your commits in Git:\ngit config --global user.email\n\nFind your GitHub noreply address in your GitHub's Personal Settings \u2192 Emails. It's mentioned in the description of the Keep my email address private checkbox. Usually, it starts with a unique identifier, plus your username:\n{ID}+{username}@users.noreply.github.com\n\n\nChange the global user e-mail address setting to be your GitHub noreply address:\ngit config --global user.email {ID}+{username}@users.noreply.github.com\n\nReset the author information on your last commit:\ngit commit --amend --reset-author\n\nIf you have multiple commits with your private e-mail address, see this answer.\nNow you can push the commit with the noreply e-mail address, and future commits will have the noreply e-mail address as well.\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: The current branch master has no upstream branch\n\nI'm trying to push one of my projects to github, and I keep getting this error:\npeeplesoft@jane3:~/846156 (master) $ git push\n\nfatal: The current branch master has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n     git push --set-upstream origin master\n\nSo I tried it and got this:\npeeplesoft@jane3:~/846156 (master) $ git push --set-upstream origin master\n\nfatal: Authentication failed\n\nAnother stackoverflow thread suggested I try the following, with disappointing results.\npeeplesoft@jane3:~/846156 (master) $ git push -u origin master\n\nfatal: Authentication failed\n\nThen I tried this:\npeeplesoft@jane3:~/846156 (master) $ git config remote.origin.push HEAD\n\npeeplesoft@jane3:~/846156 (master) $ git push\n\nfatal: Authentication failed\n\nAny hints?"}, {"role": "assistant", "content": "You fixed the push, but, independently of that push issue (which I explained in \"Why do I need to explicitly push a new branch?\": git push -u origin master or git push -u origin --all), you need now to resolve the authentication issue.\nThat depends on your url (ssh as in '[email\u00a0protected]/yourRepo, or https as in https://github.com/You/YourRepo)\nFor https url:\nIf your account is protected by the two-factor authentication, your regular password won't work (for https url), as explained here or here.\nSame problem if your password contains special character (as in this answer)\nIf https doesn't work (because you don't want to generate a secondary key, a PAT: personal Access Token), then you can switch to ssh, as I have shown here.\n\nAs noted by qwerty in the comments, you can automatically create the branch of same name on the remote with:\ngit push -u origin head \n\nWhy?\n\nHEAD (see your .git\\HEAD file) has the refspec of the currently checked out branch (for example: ref: refs/heads/master)\nthe default push policy is simple\n\nSince the refpec used for this push is head: (no destination), a missing :<dst> means to update the same ref as the <src> (head, which is a branch).\nThat won't work if HEAD is detached though.\n\nOr you can use Git 2.37 (Q3 2022)  and the new global option push.autoSetupRemote:\ngit config --global push.autoSetupRemote true\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why am I seeing \"TypeError: string indices must be integers\"?\n\nI'm playing with both learning Python and am trying to get GitHub issues into a readable form. Using the advice on How can I convert JSON to CSV?, I came up with this:\nimport json\nimport csv\n\nf = open('issues.json')\ndata = json.load(f)\nf.close()\n\nf = open(\"issues.csv\", \"wb+\")\ncsv_file = csv.writer(f)\n\ncsv_file.writerow([\"gravatar_id\", \"position\", \"number\"])\n\nfor item in data:\n    csv_file.writerow([item[\"gravatar_id\"], item[\"position\"], item[\"number\"]])\n\nWhere \"issues.json\" is the JSON file containing my GitHub issues. When I try to run that, I get\nTypeError: string indices must be integers\n\nWhat am I missing here? Which are the \"string indices\"?\nHere's a bit of my JSON content:\n{\"issues\": [{\"gravatar_id\": \"44230311a3dcd684b6c5f81bf2ec9f60\", \"position\": 2.0, \"number\": 263..."}, {"role": "assistant", "content": "The variable item is a string. An index looks like this:\n>>> mystring = 'helloworld'\n>>> print mystring[0]\n'h'\n\nThe above example uses the 0 index of the string to refer to the first character.\nStrings can't have string indices (like dictionaries can). So this won't work:\n>>> mystring = 'helloworld'\n>>> print mystring['stringindex']\nTypeError: string indices must be integers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Renaming a branch in GitHub\n\nI just renamed my local branch using\ngit branch -m oldname newname\n\nbut this only renames the local version of the branch. How can I rename the one on\u00a0GitHub?"}, {"role": "assistant", "content": "As mentioned, delete the old one on GitHub and re-push, though the commands used are a bit more verbose than necessary:\ngit push origin :name_of_the_old_branch_on_github\ngit push origin new_name_of_the_branch_that_is_local\n\nDissecting the commands a bit, the git push command is essentially:\ngit push <remote> <local_branch>:<remote_branch>\n\nSo doing a push with no local_branch specified essentially means \"take nothing from my local repository, and make it the remote branch\".  I've always thought this to be completely kludgy, but it's the way it's done.\nAs of Git 1.7 there is an alternate syntax for deleting a remote branch:\ngit push origin --delete name_of_the_remote_branch\n\nAs mentioned by @void.pointer in the comments\n\nNote that you can combine the 2 push operations:\ngit push origin :old_branch new_branch\nThis will both delete the old branch and push the new one.\n\nThis can be turned into a simple alias that takes the remote, original branch and new branch name as arguments, in ~/.gitconfig:\n[alias]\n    branchm = \"!git branch -m $2 $3 && git push $1 :$2 $3 -u #\"\n\nUsage:\ngit branchm origin old_branch new_branch\n\nNote that positional arguments in shell commands were problematic in older (pre 2.8?) versions of Git, so the alias might vary according to the Git version. See this discussion for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you attach a new pull request to an existing issue on github?\n\nI'm not sure, but I have a vague memory of creating a github pull request with \"Issue 4\" or something in the title, and it automatically attached itself to Issue 4 in the project that I was submitting it to. I tried it again recently and it didn't work -- it just created a brand new issue instead. I don't see any options like \"Attach to issue\" on the new pull request page, nor \"Open a new pull request for this issue\" on the issue page. Is there any way to do this, to help project owners keep their Issues page clean and avoid duplication?\nEdit: To clarify, I know that creating a pull request always creates a new issue. I would like to instead attach the pull request to an existing issue."}, {"role": "assistant", "content": "Adding a pull request to an existing upstream issue is easy assuming you forked using the normal github means. \nSimply reference the issue in your commit message using any of the supported keywords:\n\nclose\ncloses\nclosed\nfix\nfixes\nfixed\nresolve\nresolves\nresolved\n\nFor example: \"this commit fixes #116\"\nThe text referencing the issue does not need to appear in the subject line of your commit.\nPush your commit to your github repo and the pull request will be automatically appended to the issue. \nNote: While it is not required, it is strongly recommended that you commit anything that will be part of a pull request to a separate branch specific to that issue, because future commits on that branch will be appended to the pull request (automatically by github). So, if you didn't make a separate branch, left it on master, and then kept developing, then all your unrelated commits to master would get appended to your pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to completely remove an issue from GitHub?\n\nIs it possible to completely remove an issue from the GitHub issue tracker?"}, {"role": "assistant", "content": "No, the github API only allows you to open/close/reopen issues. Here's the Issues API docs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I avoid the specification of the username and password at every git push?\n\nI git push my work to a remote Git repository.\nEvery push will prompt me to input username and password. I would like to avoid it for every push, but how to configure to avoid it?"}, {"role": "assistant", "content": "1. Generate an SSH key\nLinux/Mac\nOpen terminal to create ssh keys:\ncd ~                 #Your home directory\nssh-keygen -t rsa    #Press enter for all values\n\nFor Windows\n(Only works if the commit program is capable of using certificates/private & public ssh keys)\n\nUse Putty Gen to generate a key\nExport the key as an open SSH key\n\nHere is a walkthrough on putty gen for the above steps\n2. Associate the SSH key with the remote repository\nThis step varies, depending on how your remote is set up.\n\nIf it is a GitHub repository and you have administrative privileges, go to settings and click 'add SSH key'. Copy the contents of your ~/.ssh/id_rsa.pub into the field labeled 'Key'.\nIf your repository is administered by somebody else, give the administrator your id_rsa.pub.\nIf your remote repository is administered by your, you can use this command for example: \nscp ~/.ssh/id_rsa.pub YOUR_USER@YOUR_IP:~/.ssh/authorized_keys/id_rsa.pub\n\n3. Set your remote URL to a form that supports SSH 1\nIf you have done the steps above and are still getting the password prompt, make sure your repo URL is in the form\ngit+ssh://[email\u00a0protected]/username/reponame.git\n\nas opposed to\nhttps://github.com/username/reponame.git\n\nTo see your repo URL, run:\ngit remote show origin\n\nYou can change the URL with:\ngit remote set-url origin git+ssh://[email\u00a0protected]/username/reponame.git\n\n[1] This section incorporates the answer from Eric P"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can you issue pull requests from the command line on GitHub?\n\nIt seems like you have to interact with github.com to initiate a pull request. Is this so?"}, {"role": "assistant", "content": "UPDATE: The hub command is now an official github project and also supports creating pull requests\nORIGINAL:\nSeems like a particularly useful thing to add to the hub command: http://github.com/defunkt/hub or the github gem: http://github.com/defunkt/github-gem\nI suggest filing an issue with those projects asking for it. The github guys are pretty responsive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between README and README.md in GitHub projects?\n\nI've noticed some GitHub projects have not only a README file, but also a README.md file.\nWhat is the difference between these files? I know README serves also as introductory text in the project repository page but I have no idea what README.md does."}, {"role": "assistant", "content": ".md is markdown.  README.md is used to generate the html summary you see at the bottom of projects.  Github has their own flavor of Markdown.\nOrder of Preference: If you have two files named README and README.md, the file named README.md is preferred, and it will be used to generate github's html summary.\n\nFWIW, Stack Overflow uses local Markdown modifications as well (also see Stack Overflow's C# Markdown Processor)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSL certificate rejected trying to access GitHub over HTTPS behind firewall\n\nI'm stuck behind a firewall, so I have to use HTTPS to access my GitHub repository. I'm using Cygwin 1.7.7 on Windows\u00a0XP.\nI've tried setting the remote to https://[email\u00a0protected]/username/ExcelANT.git, but pushing prompts for a password, but it doesn't do anything once I've entered it.\nhttps://username:<password>github.com/username/ExcelANT.git and cloning the empty repository from scratch, but each time it gives me the same error:\n\nerror: SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://github.com/username/ExcelANT.git/info/refs\n\nTurning on GIT_CURL_VERBOSE=1 gives me\n\n* About to connect() to github.com port 443 (#0)\n*   Trying 207.97.227.239... * successfully set certificate verify locations:\n*   CAfile: none\nCApath: /usr/ssl/certs\n* SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\n* Expire cleared\n* Closing connection #0\n* About to connect() to github.com port 443 (#0)\n*   Trying 207.97.227.239... * successfully set certificate verify locations:\n*   CAfile: none\nCApath: /usr/ssl/certs\n* SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\n* Expire cleared\n* Closing connection #0\nerror: SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://github.com/username/ExcelANT.git/info/refs\n\nfatal: HTTP request failed\n\nIs this a problem with my firewall, Cygwin or what?\nI hadn't set the HTTP proxy in the Git configuration. However, it's an ISA server that needs NTLM authentication, not basic, so unless anyone knows how to force Git to use NTLM, I'm scuppered."}, {"role": "assistant", "content": "The problem is that you do not have any of certificate authority (CA) certificates installed on your system. And these certificates cannot be installed with Cygwin's setup.exe.\nInstall Net/ca-certificates package in Cygwin (thanks dirkjot)\nThere are two solutions:\n\nActually install root certificates. The curl guys extracted the certificates from Mozilla for you.\n\ncacert.pem file is what you are looking for. This file contains more than 250 CA certificates (don't know how to trust this number of people). You need to download this file, split it to individual certificates put them to /usr/ssl/certs (your CApath) and index them.\nHere is how to do it. With Cygwin setup.exe install the curl and OpenSSL packages.\nExecute:\n<!-- language: lang-bash -->\n\n    $ cd /usr/ssl/certs\n    $ curl http://curl.haxx.se/ca/cacert.pem |\n      awk '{print > \"cert\" (1+n) \".pem\"} /-----END CERTIFICATE-----/ {n++}'\n    $ c_rehash\n\nImportant: In order to use c_rehash you have to install openssl-perl too.\n\nIgnore SSL certificate verification.\nWARNING: Disabling SSL certificate verification has security implications. Without verification of the authenticity of SSL/HTTPS connections, a malicious attacker can impersonate a trusted endpoint (such as GitHub or some other remote Git host), and you'll be vulnerable to a man-in-the-middle attack. Be sure you fully understand the security issues and your threat model before using this as a solution.\nenv GIT_SSL_NO_VERIFY=true git clone https://github..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to pull remote branch from somebody else's repo\n\nI've got a project hosted on GitHub which somebody has forked. On their fork, they've created a new branch \"foo\" and made some changes.  How do I pull their \"foo\" into a new branch also named \"foo\" in my repo?\nI understand they could submit a pull request to me, but I'd like to initiate this process myself.\nAssume the following:\n\nBecause they forked my project, both our repos share the same 'history'\nAlthough GitHub shows their project was forked from mine, my local repository doesn't have any references to this person's project. Do I need to add theirs as a remote?\nI don't have a branch called \"foo\" yet - I don't know if I need to manually create this first.\nI definitely want this pulled into a separate branch and not my master."}, {"role": "assistant", "content": "git remote add coworker git://path/to/coworkers/repo.git\ngit fetch coworker\ngit checkout --track coworker/foo\n\nThis will setup a local branch foo, tracking the remote branch coworker/foo. So when your co-worker has made some changes, you can easily pull them:\ngit checkout foo\ngit pull\n\n\nResponse to comments:\n\nCool :) And if I'd like to make my own\n  changes to that branch, should I\n  create a second local branch \"bar\"\n  from \"foo\" and work there instead of\n  directly on my \"foo\"?\n\nYou don't need to create a new branch, even though I recommend it. You might as well commit directly to foo and have your co-worker pull your branch. But that branch already exists and your branch foo need to be setup as an upstream branch to it:\ngit branch --set-upstream foo colin/foo\n\nassuming colin is your repository (a remote to your co-workers repository) defined in similar way:\ngit remote add colin git://path/to/colins/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I search for a commit message on GitHub?\n\nNot in a Git repository, but rather in GitHub specifically - how do I search just the commit messages of a specific repository/branch?"}, {"role": "assistant", "content": "You used to be able to do this, but GitHub removed this feature at some point mid-2013. To achieve this locally, you can do:\ngit log -g --grep=STRING\n\n(Use the -g flag if you want to search other branches and dangling commits.)\n-g, --walk-reflogs\n    Instead of walking the commit ancestry chain, walk reflog entries from\n    the most recent one to older ones."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete a closed pull request from GitHub\n\nI accidentally made a wrong pull request and ended up closing the request myself. It's in a closed state right now but it's accessible via direct URL and showing on my activity bar.\nIs there any way to delete a pull request completely so it's no longer accessible via URL or shows up on your activity history?"}, {"role": "assistant", "content": "There is no way you can delete a pull request yourself -- you and the repo owner (and all users with push access to it) can close it, but it will remain in the log. This is part of the philosophy of not denying/hiding what happened during development.\nHowever, if there are critical reasons for deleting it (this is mainly violation of Github Terms of Service), Github support staff will delete it for you.\nWhether or not they are willing to delete your PR for you is something you can easily ask them, just drop them an email at [email\u00a0protected]\nUPDATE: Currently Github requires support requests to be created here: https://support.github.com/contact"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to create a remote repo on GitHub from the CLI without opening browser?\n\nI created a new local Git repository:\n~$ mkdir projectname\n~$ cd projectname\n~$ git init\n~$ touch file1\n~$ git add file1\n~$ git commit -m 'first commit'\n\nIs there any git command to create a new remote repo and push my commit to GitHub from here? I know it's no big deal to just fire up a browser and head over to Create a New Repository, but if there is a way to achieve this from the CLI I would be happy.\nI read a vast amount of articles but none that I found mention how to create a remote repo from the CLI using git commands. Tim Lucas's nice article Setting up a new remote git repository is the closest I found, but GitHub does not provide shell access."}, {"role": "assistant", "content": "CLI commands for github API v3 (replace all CAPS keywords):\ncurl -u 'USER' https://api.github.com/user/repos -d '{\"name\":\"REPO\"}'\n# Remember replace USER with your username and REPO with your repository/application name!\ngit remote add origin [email\u00a0protected]:USER/REPO.git\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Preferred Github workflow for updating a pull request after code review\n\nI've submitted a change to an Open Source project on Github, and received code review comments from one of the core team members.\nI would like to update the code taking into account the review comments, and re-submit it. What is the best workflow for doing this? From my limited knowledge of git/github, I could do any of the following:\n\nUpdate the code as a new commit, and add both the initial and updated commit to my pull request.\nSomehow (??) rollback the old commit from my repository, and create a single new commit containing everything, then raise a pull request for that?\ngit commit has an amend feature, but I've heard that you shouldn't use it after you've pushed the commit outside of your local repository? In this case I have made the change on my local PC and pushed to my github branch of the project. Would this be OK to use 'amend'?\nSomething else?\n\nIt seems like option 2/3 would be nice, as the open source project would only have one commit in their history which would implement everything, but I'm not sure how to do this.\nNote: I don't know if this affects the answer or not, but I didn't make the changes in a separate branch, I just did a commit on top of master"}, {"role": "assistant", "content": "To update a pull request\nTo update a pull request (point #1), the only thing you need to do is checkout the same branch the pull request is from and push to it again:\ncd /my/fork\ngit checkout master\n...\ngit commit -va -m \"Correcting for PR comments\"\ngit push\n\nOptional - Cleaning commit history\nYou may be asked to squash your commits together so that the repository history is clean, or yourself want to remove intermediary commits which distract from \"the message\" in your pull request (point #2). For example if your commit history looks like this:\n$ git remote add parent [email\u00a0protected]:other-user/project.git\n$ git fetch parent\n$ git log --oneline parent/master..master\ne4e32b8 add test case as per PR comments\neccaa56 code standard fixes as per PR comments\nfb30112 correct typos and fatal error\n58ae094 fixing problem\n\nIt's a good idea to squash things together so they appear as a single commit:\n$ git rebase -i parent/master \n\nThis will prompt you to choose how to rewrite the history of your pull request, the following will be in your editor:\npick 58ae094 fixing actual problem\npick fb30112 correct typos\npick eccaa56 code standard fixes\npick e4e32b8 add test case as per PR comments\n\nFor any commit you want to be part of the previous commit - change pick to squash:\npick 58ae094 fixing actual problem\nsquash fb30112 correct typos\nsquash eccaa56 code standard fixes\nsquash e4e32b8 add test case as per PR comments\n\nAnd close your editor. Git will then rewrite the history and prompt you to provide a commit message for the one combined commit. Amend accordingly and your commit history will now be concise:\n$ git log --oneline parent/master..master\n9de3202 fixing actual problem\n\nPush that to your fork:\n$ git push -f\nCounting objects: 19, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (11/11), 978 bytes, done.\nTotal 11 (delta 9), reused 7 (delta 6)\nTo [email\u00a0protected]:me/my-fork.git\n   f1238d0..9de3202  HEAD -> master\n\nand your pull request will contain a single commit, incorporating all changes previously split into several commits.\nChanging history on public repos is a bad thing\nRewriting history and using git push -f on a branch that, potentially, someone else has already cloned is a bad thing - it causes the repository's history and that of the checkout to diverge.\nHowever, amending the history of your fork to correct the change you are proposing to be integrated into a repository - is a good thing. As such have no reservations squashing \"noise\" out of your pull requests.\nA note on branches\nIn the above I show the pull request as having come from the master branch of your fork, there's nothing wrong with that necessarily but it does create certain limitations such as, if this is your standard technique, only being able to have one PR open per repository. It's a better idea though to create a branch for each individual change you wish to propose:\n$ git branch feature/new-widgets\n$ git checkout feature/new-widgets\n...\nHack hack hack\n...\n$ git push\n# Now create PR from feature/new-widgets"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add license to an existing GitHub project\n\nWhen I created a GitHub project I chose None.\nHow can I now add a GPL license to my already added project?"}, {"role": "assistant", "content": "In your repository, click 'Create new file'\n\n\n\n2.\n    a) Type 'LICENSE', 'LICENSE.md' or 'LICENSE.txt' as the new file's file name. \n    b) The 'Want to use a new template?' dialog will appear.  \n\n\n\nChoose your preferred license. \n\n\nThe accepted answer is almost there, but confused me, because it said 'click the blue plus' - the interface may have changed - and the image is the same as the OP's."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is Github asking for username/password when following the instructions on screen and pushing a new repo?\n\nI'm the owner of an organization on github and just created a repo and tried pushing but I'm running into an issue where it's asking me for my username even though I can SSH just fine:\n$ ssh -T [email\u00a0protected]\nHi Celc! You've successfully authenticated, but GitHub does not provide shell access.\n$ git add .\n$ git commit -m 'first commit'\n[master (root-commit) 3f1b963] first commit\n 6 files changed, 59 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 main.js\n create mode 100644 package.json\n create mode 100644 readme.markdown\n create mode 100644 views/index.ejs\n create mode 100644 views/layout.ejs\n$ git remote add origin https://github.com/WEMP/project-slideshow.git\n$ git push -u origin master\nUsername for 'https://github.com':\n\nWhat am I doing wrong? This has never happened to me before but I recently also upgraded to git 1.7.10.3."}, {"role": "assistant", "content": "Don't use HTTP use SSH instead\nchange \nhttps://github.com/WEMP/project-slideshow.git \n\nto \n[email\u00a0protected]:WEMP/project-slideshow.git\n\nyou can do it in .git/config file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Visual Studio Code is always asking for Git credentials\n\nI started using Visual Studio Code, and I was trying to save my test project into GitHub, but Visual Studio Code is always asking for my GitHub credentials.\nI have installed in my PC GitHub Desktop and also Git. I already ran:\n git config --global credential.helper wincred\n\nbut still Visual Studio Code is asking for the credentials.\nHow can I fix this?\nHere is my .gitconfig file located in the user profile folfer:\n    [filter \"lfs\"]\n    clean = git-lfs clean %f\n    smudge = git-lfs smudge %f\n    required = true\n[user]\n    name = ddieppa\n[user]\n    email = [email\u00a0protected]\n[credential]\n    helper = wincred\n\nHere is the popup windows asking for the credentials:\n\nI enter my GitHub credentials in the popup, but still getting this error in the Git output window in Visual Studio Code:\nremote: Anonymous access to ddieppa/LineOfBizApp.git denied.\nfatal: Authentication failed for 'https://github.com/ddieppa/LineOfBizApp.git/'"}, {"role": "assistant", "content": "Why does Visual Studio Code ask for a password? Because Visual Studio Code runs the auto-fetch feature, while the Git server doesn't have any information to authorize your identity. It happens when:\n\nYour Git repository has a https remote URL. Yes! This kind of remote will absolutely ask you every time. No exceptions here! (You can do a temporary trick to cache the authorization as the solution below, but this is not recommended.)\nYour Git repository has ssh remote URL, but you've not copied your ssh public key onto the Git server. Use ssh-keygen to generate your key and copy it to Git server. Done! This solution also helps you never retype password on terminal again. See a good instruction by @Fnatical here for the answer.\n\nThe updated part at the end of this answer doesn't really help you at all. (It actually makes you stagnant in your workflow.) It only stops things happening in Visual Studio Code and moves these happenings to the terminal.\nSorry if this bad answer has affected you for a long, long time.\n\nThe original answer (bad)\nI found the solution on Visual Studio Code document:\n\nTip: You should set up a credential helper to avoid getting asked\nfor credentials every time VS Code talks to your Git remotes. If you\ndon't do this, you may want to consider Disabling Autofetch in the ...\nmenu to reduce the number of prompts you get.\n\nSo, turn on the credential helper so that Git will save your password in memory for some time. By default, Git will cache your password for 15 minutes.\nIn Terminal, enter the following:\ngit config --global credential.helper cache\n# Set Git to use the credential memory cache\n\nTo change the default password cache timeout, enter the following:\ngit config --global credential.helper 'cache --timeout=3600'\n# Set the cache to timeout after 1 hour (setting is in seconds)\n\nIf the original answer doesn't work\nI installed Visual Studio Code and configuration same above, but as @ddieppa said, It didn't work for me too. So I tried to find an option in User Setting, and I saw \"git.autofetch\" = true, now set it's false! Visual Studio Code is no longer required to enter password repeatedly again!\nIn menu File \u2192 Preferences \u2192 User Setting:\nType these:\nPlace your settings in this file to overwrite the default settings:\n{\n  \"git.autofetch\": false\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get the current branch within Github Actions?\n\nI'm building Docker images with Github Actions and want to tag images with the branch name.\nI found the GITHUB_REF variable, but it results in refs/heads/feature-branch-1 and I need only feature-branch-1."}, {"role": "assistant", "content": "I added a separate step for extracting branch name from $GITHUB_HEAD_REF/$GITHUB_REF\u00b9 (pr and push) and set it to the step output:\n- name: Extract branch name\n  shell: bash\n  run: echo \"branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\" >> $GITHUB_OUTPUT\n  id: extract_branch\n\nafter that, I can use it in the next steps with steps.<step_id>.outputs.branch:\n- name: Push to ECR\n  id: ecr\n  uses: jwalton/gh-ecr-push@master\n  with:\n    access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    region: us-west-2\n    image: eng:${{ steps.extract_branch.outputs.branch }}\n\n\u00a0\n\n\u00b9 $GITHUB_HEAD_REF on pull_request (pr) and $GITHUB_REF on push. Description:\n\n\n\n\nVariable\nDescription\n\n\n\n\nGITHUB_HEAD_REF\nThe head ref or source branch of the pull request in a workflow run. This property is only set when the event that triggers a workflow run is either pull_request or pull_request_target. For example, feature-branch-1. (source) \n\n\nGITHUB_REF\nThe fully-formed ref of the branch or tag that triggered the workflow run. For workflows triggered by push, this is the branch or tag ref that was pushed. For workflows triggered by pull_request, this is the pull request merge branch. For workflows triggered by release, this is the release tag created. For other triggers, this is the branch or tag ref that triggered the workflow run. This is only set if a branch or tag is available for the event type. The ref given is fully-formed, meaning that for branches the format is refs/heads/<branch_name>, for pull requests it is refs/pull/<pr_number>/merge, and for tags it is refs/tags/<tag_name>. For example, refs/heads/feature-branch-1. (source) \n\n\n\n\nFull description of these and all other Default environment variables - Learn Gihtub Actions (archived copy).\nLooking for the Microsoft Github Action Context named github? See the answer by ysfaran and/or the answer by Dusan Plavak."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In GitHub, is there a way to see all (recent) commits on all branches?\n\nIn GitHub, is there a way to see all recent commits on all branches.  It would be best in reverse chronological order.\nMaybe I'm snoopy, but I'd like to be able to see what my developers have been up to recently, at least in terms of commits to the repository on github.  So far the closest I've seen is the network graph, which is certainly very useful."}, {"role": "assistant", "content": "Please note: this is not the right answer, although I hope it continues to be useful. NB it has been made a \"Community\" answer so I don't receive any points from upvotes\nTo see all commits for a specific branch (so this does NOT actually answer the original question, which is to see commits across all branches):\nClick \"Code\" (left-most tab) on the main page for the repository.  Under those 4 buttons (\"master\", \"Go to file\", \"Add file\", \"Code\") there is a blue rectangle. At the right end of that is a clock icon and a number. If the viewport of your browser is wide enough it even includes (hurrah) the word \"commits\". This is a link. Click and ENJOY!!!\nNB the URL for this page is like this: https://github.com/myProfile/myRepo/commits/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Set local user.name and user.email different for each repo\n\nI'm currently working on 2 projects, which expect that I configure my local username and email with different data when I push to them. For that I'm updating my config all the time like:\ngit config --local user.email \"[email\u00a0protected]\"\nSince they are different repositories, is there a way I could define an local email for each repository?\nMaybe in the .gitconfig?"}, {"role": "assistant", "content": "For just one repo, go into to the relevant repo DIR and:\ngit config user.name \"Your Name Here\"\ngit config user.email [email\u00a0protected]\n\nFor (global) default email (which is configured in your ~/.gitconfig):\ngit config --global user.name \"Your Name Here\"\ngit config --global user.email [email\u00a0protected]\n\nYou can check your Git settings with:\ngit config user.name && git config user.email\nIf you are in a specific repo which you setup a new user/config for (different to global) then it should show that local config, otherwise it will show your global config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Download Github pull request as unified diff\n\nHow can I download the changes contained in a Github pull request as a unified diff?"}, {"role": "assistant", "content": "To view a commit as a diff/patch file, just add .diff or .patch to the end of the URL, for example:\n\nhttps://github.com/weppos/whois/pull/90\nhttps://github.com/weppos/whois/pull/90.diff\nhttps://github.com/weppos/whois/pull/90.patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "On GitHub, what's the difference between reviewer and assignee?\n\nA feature added on Dec, 7, 2016, announced on GitHub blog, introduced the option to add reviewers to a Pull Request\n\n\nYou can now request a review explicitly from collaborators, making it easier to specify who you'd like to review your pull request.\nYou can also see a list of people who you are awaiting review from in the pull request page sidebar, as well as the status of reviews from those who have already left them.\n\nHowever, explicit setting a reviewer for a PR was already done by assigning people (assignees option).\nWith both options now available, what's the role of each option since they both share the same end goal?"}, {"role": "assistant", "content": "EDIT:\n\nAfter discussing with several OSS maintainers, reviewers is defined as what the word supposed to be: to review (someone's code) and \"assignee\" has a looser definiton explained below.\n\nFor \"reviewer\": someone you want to review the code. Not necessarily the person responsible for that area or responsible for merging the commit. Can be someone who worked on that chunk of code before, as GitHub auto-suggests.\nFor \"assignee\": up to the project's team/maintainer what it means and there's no strict definition. It can be the PR opener, or someone responsible for that area (who is going to accept the PR after the review is done or just close it). It's not up to GitHub to define what it is leaving it open for project maintainers what fits best for their project.\nPrevious answer:\nOk I'll go ahead and answer my own question.\nFor PR of users with write-access: the Assignee would be the same person who opened the PR, and reviewer would replace the old assignee function (reviewing code), being this one someone of assignee choice.\nFor PR of users without write-access (outside contributors): Someone with write-access would assign herself (or other write-priviledge member), to review the PR (Reviewer). Assignee is blank.\nFor unfinished PR from outside contributors: the write-access member would take the unfinished work and assign for her. She will be responsible for finishing the task, being the Assignee. Since the main reason of PRs is reviewing changes, she would select some other people to review the changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Copy a git repo without history\n\nI have a private repository on GitHub that I want to make public. However, some of the initial commits contain information that I don't want to publicize (hard-coded credentials, etc).\nWhat is the easiest route to make the latest commit public (I don't really need or want the previous commits in the public repository) without including some or all of the commit history?"}, {"role": "assistant", "content": "You can limit the depth of the history while cloning:\n--depth <depth>\nCreate a shallow clone with a history truncated to the specified \nnumber of revisions.\n\nUse this if you want limited history, but still some."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I move a Git repository with all branches from Bitbucket to GitHub?\n\nWhat is the best way to move a Git repository with all branches and full history from Bitbucket to GitHub?\nIs there a script or a list of commands I have to use?"}, {"role": "assistant", "content": "It's very simple.\n\nCreate a new empty repository in GitHub (without a README or license, you can add them later) and the following screen will show.\n\nIn the import code option, paste your Bitbucket repository's URL and voil\u00e0!!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push to GitHub without a password using ssh-key\n\nI generated an SSH key pair without a password and added the public key to GitHub.\nConnection with\nuser@dev:/var/www/project# ssh -T [email\u00a0protected]\nHi User! You've successfully authenticated, but GitHub does not provide shell access.\n\nwas successful and when I rename the key, it fails.\nBut when I want to push my changes, it stills ask me for my username and password combination.\nIs there a way to push without a password?"}, {"role": "assistant", "content": "If it is asking you for a username and password, your origin remote is pointing at the HTTPS URL rather than the SSH URL.\nChange it to ssh.\nFor example, a GitHub project like Git will have an HTTPS URL:\nhttps://github.com/<Username>/<Project>.git\n\nAnd the SSH one:\n[email\u00a0protected]:<Username>/<Project>.git\n\nYou can do:\ngit remote set-url origin [email\u00a0protected]:<Username>/<Project>.git\n\nto change the URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Project vs Repository in GitHub\n\nIn GitHub, what is the conceptual difference between a project (that can be created inside a repository) and a repository? \nI've seen several similar questions (here, here and here) in SO, but none of them explains what is a GitHub project, what is a GitHub repository and when to use each one of them. \nI would appreciate if someone can explain each term, and provide an example of when to use/create each one. For instance, if I have several prototype applications, all independent of each other, what do I create in order to manage in an organized way the source code for all of them?"}, {"role": "assistant", "content": "Fact 1: Projects and Repositories were always synonyms on GitHub.Fact 2: This is no longer the case.\nThere is a lot of confusion about Repositories and Projects. In the past both terms were used pretty much interchangeably by the users and the GitHub's very own documentation. This is reflected by some of the answers and comments here that explain the subtle differences between those terms and when the one was preferred over the other. The difference were always subtle, e.g. like the issue tracker being part of the project but not part of the repository which might be thought of as a strictly git thing etc.\nNot any more.\nCurrently repos and projects refer to a different kinds of entities that have separate APIs:\n\nhttps://developer.github.com/v3/repos/\nhttps://developer.github.com/v3/projects/\n\nSince then it is no longer correct to call the repo a project or vice versa.\nNote that it is often confused in the official documentation and it is unfortunate that a term that was already widely used has been chosen as the name of the new entity but this is the case and we have to live with that.\nThe consequence is that repos and projects are usually confused and every time you read about GitHub projects you have to wonder if it's really about the projects or about repos. Had they chosen some other name or an abbreviation like \"proj\" then we could know that what is discussed is the new type of entity, a precise object with concrete properties, or a general speaking repo-like projectish kind of thingy.\nThe term that is usually unambiguous is \"project board\".\nWhat can we learn from the API\nThe first endpoint in the documentation of the Projects API:\n\nhttps://developer.github.com/v3/projects/#list-repository-projects\n\nis described as: List repository projects. It means that a repository can have many projects. So those two cannot mean the same thing. It includes Response if projects are disabled:\n{\n  \"message\": \"Projects are disabled for this repo\",\n  \"documentation_url\": \"https://developer.github.com/v3\"\n}\n\nwhich means that some repos can have projects disabled. Again, those cannot be the same thing when a repo can have projects disabled.\nThere are some other interesting endpoints:\n\nCreate a repository project - POST /repos/:owner/:repo/projects\nCreate an organization project - POST /orgs/:org/projects\n\nbut there is no:\n\nCreate a user's project - POST /users/:user/projects\n\nWhich leads us to another difference:\n1. Repositories can belong to users or organizations2. Projects can belong to repositories or organizations\nor, more importantly:\n1. Projects can belong to repositories but not the other way around2. Projects can belong to organizations but not to users3. Repositories can belong to organizations and to users\nSee also:\n\nhttps://help.github.com/articles/about-project-boards/\n\nI know it's confusing. I tried to explain it as precisely as I could."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Transfer git repositories from GitLab to GitHub - can we, how to and pitfalls (if any)?\n\nCan one transfer repositories from GitLab to GitHub if the need be. If so, how exactly can I go about doing the same?\nAlso, are there any pitfalls in doing so or precautionary measures that I need to keep in mind  before doing so given that I may decide to eventually move them to GitHub (as it has more features at the moment that I might find handy for my project)."}, {"role": "assistant", "content": "You can transfer those (simply by adding a remote to a GitHub repo and pushing them)\n\ncreate an empty repo on GitHub\ngit remote add github https://[email\u00a0protected]/yourLogin/yourRepoName.git\ngit push --mirror github\n\nThe history will be the same.\nBut you will lose the access control (teams defined in GitLab with specific access rights on your repo)\nIf you face any issue with the https URL of the GitHub repo:\nThe requested URL returned an error: 403\n\nAll you need to do is to enter your GitHub password, but the OP suggests:\n\nThen you might need to push it the ssh way. You can read more on how to do it here.\n\nSee \"Pushing to Git returning Error Code 403 fatal: HTTP request failed\".\n\nNote that mike also adds in the comments:\n\nGitLab can also be set to push mirror to downstream repositories, and there are specific instructions for push mirroring to GitHub.\nThis can use a GitHub Personal Access Token and also be set to periodically push.\nYou might use this option to share on GitHub, but keep your main development activity in your GitLab instance.\n\n\ntswaehn suggests in the comments the tool piceaTech/node-gitlab-2-github\n\nIt is possible to migrate issues, labels, ... with this tool github.com/piceaTech/node-gitlab-2-github: I tested it, not bad.\nBut had issues when transferring attachments of the issues itself.\nStill worth a try, maybe.\n\nFrotz notes in the comments that:\n\nI've since discovered that there's a wait option available to use in the user-editable settings.ts file that's not documented anywhere.\nI discovered it while implementing my own quick-and-dirty delay, which did work in stopping the \"Abuse detected\" slowdowns\n\n\n\nDoes this mean that when I want to push new changes I would have to do git push github [branch_name] instead of using origin?\n\nNo, you can:\n\ndelete origin, (git remote remove origin),\nrename github remote as origin (git remote rename github origin), and\ngo on git push (to origin, which is now GitHub): the transfer from GitLab to GitHub is complete."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I test what my readme.md file will look like before committing to GitHub?\n\nI am writing a readme for my GitHub project in the .md format. Is there a way can I test what my readme.md file will look like before committing to GitHub?"}, {"role": "assistant", "content": "Many ways: If you're on a Mac, use Mou.\nIf you want to test in a browser, you could try StackEdit, as pointed out by @Aaron or Dillinger since Notepag seems to be down now. Personally I use Dillinger since it just works and saves all my documents in my browser's local database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get git to default to ssh and not https for new repositories\n\nThese days when I create a new repository on GitHub on the setup page I get:\ngit remote add origin https://github.com/nikhilbhardwaj/abc.git\ngit push -u origin master\n\nAnd whenever I have to push a commit I need to enter my GitHub username and password.\nI can manually change that to \n[email\u00a0protected]:nikhilbhardwaj/abc.git\n\nin the .git/config. I find this quite irritating - is there some way I can configure git to use SSH by default?"}, {"role": "assistant", "content": "Set up a repository's origin branch to be SSH\nThe GitHub repository setup page is just a suggested list of commands (and GitHub now suggests using the HTTPS protocol). Unless you have administrative access to GitHub's site, I don't know of any way to change their suggested commands.\nIf you'd rather use the SSH protocol, simply add a remote branch like so (i.e. use this command in place of GitHub's suggested command). To modify an existing branch, see the next section.\n$ git remote add origin [email\u00a0protected]:nikhilbhardwaj/abc.git\n\n\nModify a pre-existing repository\nAs you already know,  to switch a pre-existing repository to use SSH instead of HTTPS, you can change the remote url within your .git/config file.\n[remote \"origin\"]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    -url = https://github.com/nikhilbhardwaj/abc.git\n    +url = [email\u00a0protected]:nikhilbhardwaj/abc.git\n\nA shortcut is to use the set-url command:\n$ git remote set-url origin [email\u00a0protected]:nikhilbhardwaj/abc.git\n\n\nMore information about the SSH-HTTPS switch\n\n\"Why is Git always asking for my password?\" - GitHub help page.\nGitHub's switch to Smart HTTP - relevant StackOverflow question\nCredential Caching for Wrist-Friendly Git Usage - GitHub blog post about HTTPS, and how to avoid re-entering your password"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change tab size on GitHub?\n\nWhen I view files on GitHub, tabs appear as 8 spaces.\nExample:\n\nIs that possible to change this configuration to 2 or 4 spaces?"}, {"role": "assistant", "content": "You can append ?ts=2 or ?ts=4 to the URL to change the tab-size.\nExample: https://github.com/jquery/jquery/blob/main/src/core.js?ts=2\nIt seems that the value can be anything from 1 to 12. It does not work on Gists or raw file views though.\nSource: GitHub Cheat Sheet"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete fork dependency of a GitHub repository\n\nHow can I make GitHub forget or disassociate that my repo was originally a fork of another project?\nI forked a project in GitHub. I can now see \"forked from whatever/whatever\". The parent repository \"whatever/whatever\" is no longer maintained. I have been allowed to continue use of the code base of the original repository to create an independent repository.\nIs there a way to detach my project from the original repository?"}, {"role": "assistant", "content": "Update Jan 2022:\nUse the GitHub chatbot-virtual-assistant at https://support.github.com/contact?tags=rr-forks&subject=Detach%20Fork&flow=detach_fork\nFirst answer:\nYou can contact github support and ask them to switch your repository to \"normal mode\".\nOn this page, \"Commit was made in a fork\" paragraph, it is explained that one has to go through support to switch. Therefore, it is likely that there is no way to do that by yourself (unless you destroy and recreate your repo which is explained before... if you do so be careful if you have tickets or a wiki attached to your project as they will be deleted!)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Forking vs. Branching in GitHub\n\nI'd like to know more about the advantages and disadvantages of forking a github project vs. creating a branch of a github project.\nForking makes my version of the project more isolated from the original one because I don't have to be on the collaborators list of the original project. Since we're developing a project in house, there is no problem in adding people as collaborators. But, we'd like to understand if forking a project would make merge changes back to the main project harder. That is, I wonder if branching makes keeping the two projects in sync easier. In other words, is it easier to merge and push changes between my version of the main project and the main project when I branch?"}, {"role": "assistant", "content": "You cannot always make a branch or pull an existing branch and push back to it, because you are not registered as a collaborator for that specific project.\nForking is nothing more than a clone on the GitHub server side:\n\nwithout the possibility to directly push back\nwith fork queue feature added to manage the merge request\n\nYou keep a fork in sync with the original project by:\n\nadding the original project as a remote\nfetching regularly from that original project\nrebase your current development on top of the branch of interest you got updated from that fetch.\n\nThe rebase allows you to make sure your changes are straightforward (no merge conflict to handle), making your pulling request that more easy when you want the maintainer of the original project to include your patches in his project.   \nThe goal is really to allow collaboration even though direct participation is not always possible.\n\nThe fact that you clone on the GitHub side means you have now two \"central\" repository (\"central\" as \"visible from several collaborators).\nIf you can add them directly as collaborator for one project, you don't need to manage another one with a fork.  \n\nThe merge experience would be about the same, but with an extra level of indirection (push first on the fork, then ask for a pull, with the risk of evolutions on the original repo making your fast-forward merges not fast-forward anymore).\nThat means the correct workflow is to git pull --rebase upstream (rebase your work on top of new commits from upstream), and then git push --force origin, in order to rewrite the history in such a way your own commits are always on top of the commits from the original (upstream) repo.\nSee also:\n\nGit fork is git clone?\nPull new updates from original Github repository into forked Github repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error: \"Please make sure you have the correct access rights and the repository exists\"\n\nI am using TortoiseGit on Windows. When I am trying to Clone from the context menu of the standard Windows Explorer, I get this error:\n\nPlease make sure you have the correct access rights and the repository exists\n\nMore precisely, the snapshot of terminal is the following:\n\ngit.exe clone  --progress -v  \"git@arobotdev:\\git\\AlfaRobot.git\" \"C:\\Work\\AlfaRobot\"\n\n  Cloning into 'C:\\Work\\AlfaRobot'...\n  Permission denied, please try again.\n  Permission denied, please try again.\n  Permission denied (publickey,password).\n  fatal: Could not read from remote repository.\n\n  Please make sure you have the correct access rights\n  and the repository exists.\n\n  git did not exit cleanly (exit code 128) (21450 ms @ 19.09.2014 10:36:58)\n\nWhat should I do to make git work properly ?"}, {"role": "assistant", "content": "Your git URL might have changed. Change the URL in the local directory by using the following command:\nfor https protocol\ngit remote set-url origin https://github.com/username/repository.git\n\nfor ssh protocol\ngit remote set-url origin [email\u00a0protected]:username/repository.git\n\nThere might be multiple causes for the issue:\n\nIf the issue is with your ssh identity, see onkar-m18's answer here\nIf ssh key is not added to hosting server, see lovekush-vishwakarma's answer here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to run a github-actions step, even if the previous step fails, while still failing the job\n\nI'm trying to follow an example Github has for testing my build with github actions, and then compressing the test results and uploading them as an artifact.\nhttps://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts#uploading-build-and-test-artifacts\nI'm having trouble with what to do when my tests fail though. This is my action. When my tests pass everything works great, my results are zipped an exported as an artifact, but if my tests fail, it stops the rest of the steps in the job, so my results never get published.\n\nI tried adding the continue-on-error: true https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error\nThis makes it continue after it fails and uploads my test results. but then the job is marked as passed, even though my test step failed. Is there some way to have it upload my artifact even if a step fails, while still marking the overall job as failed?\nname: CI\non:\n  pull_request:\n    branches:\n    - master\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1    \n    - name: Test App\n      run: ./gradlew test\n\n    - name: Archive Rest Results\n      uses: actions/upload-artifact@v1\n      with:\n        name: test-results\n        path: app/build/reports/tests"}, {"role": "assistant", "content": "You can add\nif: always()\n\nto your step to have it run even if a previous step fails\nhttps://docs.github.com/en/actions/learn-github-actions/expressions#status-check-functions\nso for a single step it would look like this:\nsteps:\n- name: Build App\n  run: ./build.sh\n\n- name: Archive Test Results\n  if: always()\n  uses: actions/upload-artifact@v1\n  with:\n    name: test-results\n    path: app/build\n\nOr you can add it to a job:\njobs:\n  job1:\n  job2:\n    needs: job1\n  job3:\n    if: always()\n    needs: [job1, job2]\n\n\nAdditionally, as pointed out below, putting always() will cause the function to run even if the build is canceled. If you don't want the function to run when you manually cancel a job, you can instead put:\nif: success() || failure()\n\nor\nif: '!cancelled()'\n\n(Quotes are needed so that !cancelled() is not interpreted as a YAML tag.)\nLikewise, if you want to run a function ONLY when something has failed, you can put:\nif: failure()\n\n\nAlso, as mentioned in the comments, if a status check function is not used in if, like\nif: true\n\nthe result will (perhaps confusingly) behave like\nif: success() && true\n\nThis is documented in Expressions - GitHub Docs:\n\nStatus check functions\nYou can use the following status check functions as expressions in if conditionals. A default status check of success() is applied unless you include one of these functions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error \"Your push would publish a private email address\"\n\nI'm very new to GitHub/VCS.\nWhen I try to share my project on GitHub, I get the following error message.\n    Can't finish GitHub sharing process\n    Successfully created project 'myproject' on GitHub, but initial push failed:\n    remote: error: GH007: Your push would publish a private email address.\n    failed to push some refs to 'https://github.com/me/myproject.git'\n\nI've googled the error message and got no hits. I've also searched Stack\u00a0Exchange, but no cigar. How can I solve this issue?"}, {"role": "assistant", "content": "When enabling the \u201cBlock command line pushes that expose my email\u201d feature, you\u2019ll also want to configure Git to use your no-reply email address. Don\u2019t worry\u2014this won\u2019t affect your contribution graph. All commits will still be associated with your account.\n\nOpen Terminal.\n\nChange the current working directory to the local repository where you want to configure the email address that you associate with your Git commits.\n\nFind your GitHub noreply address in your GitHub's Personal Settings \u2192 Emails. It's mentioned in the description of the Keep my email address private checkbox. Usually, it starts with a unique identifier, plus your username.\n\nSet an email address in Git. Use your GitHub-provided no-reply email address.\n\nSetting your email address for every repository on your computer\n  git config --global user.email \"{ID}+{username}@users.noreply.github.com\"\n\n\nSetting your email address for a single repository\n  git config user.email \"{ID}+{username}@users.noreply.github.com\"\n\n\n\n\nReset the author information on your last commit:\ngit commit --amend --reset-author --no-edit\n\n\n\nIf you have multiple commits with your private e-mail address, see this answer.\n\nNow you can push the commit with the noreply e-mail address, and future commits will have the noreply e-mail address as well.\ngit push\n\n\n\nOnce you configure Git, commits will use your alternate \u201cnoreply\u201d email address, and any pushes that don\u2019t will be rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Recursively add the entire folder to a repository\n\nI am trying to add a branch to the master branch on GitHub and push a folder onto that branch.\nThe folder structure of the branch looks like -\nSocialApp/SourceCode/DevTrunk/SocialApp and all the source code files are in the last folder.\nI am using the following Git commands:\ngit add *\ngit commit -m with the message\ngit push\n\nThis is pushing only the first folder \"SocialApp\" onto GitHub and ignoring the folder SourceCode that is inside the folder. How do I fix this?"}, {"role": "assistant", "content": "Check the .gitignore file, if the subdirectory is ignored.\nThen try again\ngit add --all\ngit commit -am \"<commit message>\"\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Running actions in another directory\n\nI've just started exploring Github actions however I've found myself placing a command in multiple places. \nI have a PHP project where the composer.json is not in the root, my structure looks like:\nmy-project:\n    readme.md\n    app:\n        composer.json\n\nObviously there is more to it and there is a reason why, but my composer.json sits in a subdirectory called 'app'. As a result in my workflow, I have to cd into that folder every time to run a command:\nname: CI\n\non: [push]\n\njobs:\n  phpunit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup Symfony\n        run: |\n          cd app\n          cp .env.dev .env\n      - name: Install Composer Dependencies\n        run: |\n          cd app\n          composer install --prefer-dist\n      - name: Run Tests\n        run: |\n          cd app\n          php bin/phpunit\n\nHow can I remove the cd app in every stage?"}, {"role": "assistant", "content": "Update: It's now possible to set a working-directory default for a job. See this answer.\nThere is an option to set a working-directory on a step, but not for multiple steps or a whole job. I'm fairly sure this option only works for script steps, not action steps with uses.\nhttps://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsrun\nUsing working-directory, your workflow would look like this. It's still quite verbose but maybe a bit cleaner.\nname: CI\n\non: [push]\n\njobs:\n  phpunit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup Symfony\n        working-directory: ./app\n        run: cp .env.dev .env\n      - name: Install Composer Dependencies\n        working-directory: ./app\n        run: composer install --prefer-dist\n      - name: Run Tests\n        working-directory: ./app\n        run: php bin/phpunit\n\nAlternatively, you can run it all in one step so that you only need to specify working-directory once.\nname: CI\n\non: [push]\n\njobs:\n  phpunit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup and run tests\n        working-directory: ./app\n        run: |\n          cp .env.dev .env\n          composer install --prefer-dist\n          php bin/phpunit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating folders inside a GitHub repository without using Git\n\nI want to add a new folder to my newly created GitHub repository without installing the Git setup for (Mac, Linux, and Windows). Is it possible to do so?\nI can't have Git all the time with me when I work on different systems/machines. I know how to add files directly in a repository on github.com/[USER]/[REPO]. Can we create a folder as well?"}, {"role": "assistant", "content": "After searching a lot I find out that it is possible to create a new folder from the web interface, but it would require you to have at least one file within the folder when creating it.\nWhen using the normal way of creating new files through the web interface, you can type in the folder into the file name to create the file within that new directory.\nFor example, if I would like to create the file filename.md in a series of sub-folders, I can do this (taken from the GitHub blog):"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple GitHub Accounts & SSH Config\n\nI'm having some trouble getting two different SSH keys/GitHub accounts to play well together.  I have the following setup:\nRepos accessible from one account using [email\u00a0protected]:accountname\nRepos accessible from another account using [email\u00a0protected]:anotheraccount\nEach account has its own SSH key.  Both SSH keys have been added and I have created a config file.  I don't believe the config file is correct though.  I'm not quite sure how to specify that repos accessed using [email\u00a0protected]:accountname should use id_rsa and [email\u00a0protected]:anotheraccount should use id_rsa_anotheraccount."}, {"role": "assistant", "content": "Andy Lester's response is accurate but I found an important extra step I needed to make to get this to work. In trying to get two profiles set up, one for personal and one for work, my ~/.ssh/config was roughly as follows:\nHost me.github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/me_rsa\n\nHost work.github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/work_rsa\n\nMy work profile didn't take until I did a ssh-add ~/.ssh/work_rsa. After that connections to github used the correct profile. Previously they defaulted to the first public key.\nFor Could not open a connection to your authentication agent when using ssh-add,check:\nhttps://stackoverflow.com/a/17695338/1760313"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I keep my fork in sync without adding a separate remote?\n\nLet's assume there is a repository someone/foobar on GitHub, which I forked to me/foobar.\nHow do I pull new commits from the parent repository directly to my fork, without having to add a separate remote and remember to pull regularly from there ?\nThe goal is to:\n\ngit pull to fetch from the parent repository\ngit push to send everything to my fork"}, {"role": "assistant", "content": "Open the forked Git repository me/foobar.\nClick on Compare:\n\nYou will get the notification:\n\nThere isn't anything to compare.\nsomeone:master is up to date with all commits from me:master. Try switching the base for your comparison.\n\nClick on switching the base on this page:\n\nThen you get to see all the commits made to someone/foobar after the day you forked it.\nClick on Create pull request:\n\nGive the pull request a title and maybe a description and click Create pull request.\nOn the next page, scroll to the bottom of the page and click Merge pull request and Confirm merge.\nYour Git repository me/foobar will be updated.\nEdit: rebase options are shown here:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hosting a Maven repository on github\n\nI have a fork of a small open sourced library that I'm working on github.  I'd like to make it available to other developers via maven, but I don't want to run my own Nexus server, and because it's a fork I can't easily deploy it to oss.sonatype.org.\nWhat I'd like to do is to deploy it to github so that others can access it using maven.  What's the best way to do this?"}, {"role": "assistant", "content": "The best solution I've been able to find consists of these steps:\n\nCreate a branch called mvn-repo to host your maven artifacts.\nUse the github site-maven-plugin to push your artifacts to github.\nConfigure maven to use your remote mvn-repo as a maven repository.\n\nThere are several benefits to using this approach:\n\nMaven artifacts are kept separate from your source in a separate branch called mvn-repo, much like github pages are kept in a separate branch called gh-pages (if you use github pages)\nUnlike some other proposed solutions, it doesn't conflict with your gh-pages if you're using them.\nTies in naturally with the deploy target so there are no new maven commands to learn.  Just use mvn deploy as you normally would\n\nThe typical way you deploy artifacts to a remote maven repo is to use mvn deploy, so let's patch into that mechanism for this solution.\nFirst, tell maven to deploy artifacts to a temporary staging location inside your target directory.  Add this to your pom.xml:\n<distributionManagement>\n    <repository>\n        <id>internal.repo</id>\n        <name>Temporary Staging Repository</name>\n        <url>file://${project.build.directory}/mvn-repo</url>\n    </repository>\n</distributionManagement>\n\n<plugins>\n    <plugin>\n        <artifactId>maven-deploy-plugin</artifactId>\n        <version>2.8.1</version>\n        <configuration>\n            <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>\n        </configuration>\n    </plugin>\n</plugins>\n\nNow try running mvn clean deploy.  You'll see that it deployed your maven repository to target/mvn-repo.  The next step is to get it to upload that directory to GitHub.\nAdd your authentication information to ~/.m2/settings.xml so that the github site-maven-plugin can push to GitHub:\n<!-- NOTE: MAKE SURE THAT settings.xml IS NOT WORLD READABLE! -->\n<settings>\n  <servers>\n    <server>\n      <id>github</id>\n      <username>YOUR-USERNAME</username>\n      <password>YOUR-PASSWORD</password>\n    </server>\n  </servers>\n</settings>\n\n(As noted, please make sure to chmod 700 settings.xml to ensure no one can read your password in the file.  If someone knows how to make site-maven-plugin prompt for a password instead of requiring it in a config file, let me know.)\nThen tell the GitHub site-maven-plugin about the new server you just configured by adding the following to your pom:\n<properties>\n    <!-- github server corresponds to entry in ~/.m2/settings.xml -->\n    <github.global.server>github</github.global.server>\n</properties>\n\nFinally, configure the site-maven-plugin to upload from your temporary staging repo to your mvn-repo branch on Github:\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.github.github</groupId>\n            <artifactId>site-maven-plugin</artifactId>\n            <version>0.11</version>\n            <configuration>\n                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->\n                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->\n                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->\n                <branch>refs/heads/mvn-repo</branch>                       <!-- remote branch name -->\n                <includes><include>**/*</include></includes>\n                <repositoryName>YOUR-REPOSITORY-NAME</repositoryName>      <!-- github repo name -->\n                <repositoryOwner>YOUR-GITHUB-USERNAME</repositoryOwner>    <!-- github username  -->\n            </configuration>\n            <executions>\n              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->\n              <execution>\n                <goals>\n                  <goal>site</goal>\n                </goals>\n                <phase>deploy</phase>\n              </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n\nThe mvn-repo branch does not need to exist, it will be created for you.\nNow run mvn clean deploy again.  You should see maven-deploy-plugin \"upload\" the files to your local staging repository in the target directory, then site-maven-plugin committing those files and pushing them to the server.\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building DaoCore 1.3-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n...\n[INFO] --- maven-deploy-plugin:2.5:deploy (default-deploy) @ greendao ---\nUploaded: file:///Users/mike/Projects/greendao-emmby/DaoCore/target/mvn-repo/com/greendao-orm/greendao/1.3-SNAPSHOT/greendao-1.3-20121223.182256-3.jar (77 KB at 2936.9 KB/sec)\nUploaded: file:///Users/mike/Projects/greendao-emmby/DaoCore/target/mvn-repo/com/greendao-orm/greendao/1.3-SNAPSHOT/greendao-1.3-20121223.182256-3.pom (3 KB at 1402.3 KB/sec)\nUploaded: file:///Users/mike/Projects/greendao-emmby/DaoCore/target/mvn-repo/com/greendao-orm/greendao/1.3-SNAPSHOT/maven-metadata.xml (768 B at 150.0 KB/sec)\nUploaded: file:///Users/mike/Projects/greendao-emmby/DaoCore/target/mvn-repo/com/greendao-orm/greendao/maven-metadata.xml (282 B at 91.8 KB/sec)\n[INFO] \n[INFO] --- site-maven-plugin:0.7:site (default) @ greendao ---\n[INFO] Creating 24 blobs\n[INFO] Creating tree with 25 blob entries\n[INFO] Creating commit with SHA-1: 0b8444e487a8acf9caabe7ec18a4e9cff4964809\n[INFO] Updating reference refs/heads/mvn-repo from ab7afb9a228bf33d9e04db39d178f96a7a225593 to 0b8444e487a8acf9caabe7ec18a4e9cff4964809\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 8.595s\n[INFO] Finished at: Sun Dec 23 11:23:03 MST 2012\n[INFO] Final Memory: 9M/81M\n[INFO] ------------------------------------------------------------------------\n\nVisit github.com in your browser, select the mvn-repo branch, and verify that all your binaries are now there.\n\nCongratulations!\nYou can now deploy your maven artifacts to a poor man's public repo simply by running mvn clean deploy.\nThere's one more step you'll want to take, which is to configure any poms that depend on your pom to know where your repository is.  Add the following snippet to any project's pom that depends on your project:\n<repositories>\n    <repository>\n        <id>YOUR-PROJECT-NAME-mvn-repo</id>\n        <url>https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME/raw/mvn-repo/</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n    </repository>\n</repositories>\n\nNow any project that requires your jar files will automatically download them from your github maven repository.\nEdit: to avoid the problem mentioned in the comments ('Error creating commit: Invalid request. For 'properties/name', nil is not a string.'), make sure you state a name in your profile on github."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create empty branch on GitHub\n\nI want to create a new GitHub branch, called release.\nThis branch needs to be empty! However, there is an existing branch with x commits and I don't want to have its commit history.\nThe only method I found is to create a local --orphan branch."}, {"role": "assistant", "content": "November 2021 Update: As of git version 2.27, you can now use the following command to create an empty branch with no history:\ngit switch --orphan <new branch>\n\nUnlike git checkout --orphan <new branch>, this branch won't have any files from your current branch (save for those which git doesn't track).\nThis should be the preferred way to create empty branches with no prior history.\nOnce you actually have commits on this branch, it can be pushed to github via git push -u origin <branch name>:\ngit switch --orphan <new branch>\ngit commit --allow-empty -m \"Initial commit on orphan branch\"\ngit push -u origin <new branch>\n\n\nOriginal answer:\nWhat's wrong with the --orphan option? If you want a branch that is empty and have no history, this is the way to go...\ngit checkout --orphan empty-branch\n\nThen you can remove all the files you'll have in the staging area (so that they don't get committed):\ngit rm -rf .\n\nAt this point you have an empty branch, on your machine.\nBefore you can push to GitHub (or any other Git repository), you will need at least one commit, even if it does not have any content on it (i.e. empty commit), as you cannot push an empty branch\ngit commit --allow-empty -m \"root commit\"\n\nFinally, push it to the remote, and crack open a beer\ngit push origin empty-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does \"Changes not staged for commit\" mean\n\nI thought if you want to track the files you should  git add [files you want to track]\nI don't know why I got the messages Changes not staged for commit.\nIf those files were not staged, shouldn't git shows me those files were  Untracked like that\n\nAll I've done was create a new feature from develop branch and worked in feature/change_excel_format branch\nI thought Those files should be in staged status,\nBut git status told me Changes not staged for commit\n\nTo brief, \nI only know there are 3 stages in git  untracked, staged, committed\nCan any one tell me , what was the stage in for Changes not staged for commit\n\nSo if I modified the  file a  (already in the repo)\nand type git st , the git will tell me Changes not staged for commit\nif I  git a then the file a will be in staged status\nif I modified the file a now, there will be two status of file a in git, right ?\nSo I have to decide if make the staged a be commit or make the not stage a to be staged,\nand then the previous staged file awill be discard ?"}, {"role": "assistant", "content": "when you change a file which is already in the repository, you have to git add it again if you want it to be staged.\nThis allows you to commit only a subset of the changes you made since the last commit. For example, let's say you have file a, file b and file c. You modify file a and file b but the changes are very different in nature and you don't want all of them to be in one single commit. You issue\ngit add a\ngit commit a -m \"bugfix, in a\"\ngit add b\ngit commit b -m \"new feature, in b\"\n\nAs a side note, if you want to commit everything you can just type\ngit commit -a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When to delete branches in Git?\n\nSuppose we have an application that's stable. \nTomorrow, someone reports a big ol' bug that we decide to hotfix right away. So we create a branch for that hotfix off of \"master\", we name it \"2011_Hotfix\", and we push it up so that all of the developers can collaborate on fixing it.\nWe fix the bug, and merge \"2011_Hotfix\" into \"master\" as well as into the current development branch. And push \"master.\"\nWhat do we do with \"2011_Hotfix\" now? Should it just sit out there as a branch forever until the end of time or should we now delete it, since it has served its purpose? It seems unclean to just leave branches lying around everywhere, as the list of branches will likely become very long, most of which aren't even necessary anymore.\nIn the event that it should be deleted, what will happen to its history? Will that be maintained, even though the actual branch is no longer available? Also, how would I remove a remote branch?"}, {"role": "assistant", "content": "You can safely remove a branch with git branch -d yourbranch. If it contains unmerged changes (ie, you would lose commits by deleting the branch), git will tell you and won't delete it.\nSo, deleting a merged branch is cheap and won't make you lose any history.\nTo delete a remote branch, use git push origin :mybranch, assuming your remote name is origin and the remote branch you want do delete is named mybranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using Git, how could I search for a string across all branches?\n\nUsing Git, how could I search within all files in all local branches for a given string?\nGitHub specific: is it possible to perform the above search across all GitHub branches? (There are several remote branches on my remote GitHub repository that ideally I wouldn't have to bring down for this search...)"}, {"role": "assistant", "content": "You can do this on a Git repository:\ngit grep \"string/regexp\" $(git rev-list --all)\n\nGitHub advanced search has code search capability:\nThe code search will look through all of the code publicly hosted on GitHub. You can also filter by:\n\nthe language: language:\nthe repository name (including the username):    repo:\nthe file path: path:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to navigate to the earliest commit in a repository?\n\nIs there an easy way to navigate to the earliest commit of a large open-source project in GitHub?\nThe project has over 13,000 commits as of today. I don't want to press the \"Older\" button on the commit history page hundreds and hundreds of times to get to the initial commit (or first commit)."}, {"role": "assistant", "content": "There's no obvious UI to do this, but there is a way to construct the right URL to go to page one of the commit log.\nSuppose we want to find the first commit of the dotnet/runtime repository. First take a note of the number of commits in the repository: it is currently 125,882. Now go to the list of commits (click on commit count), and click \"Older\" once. The URL will be something like this: https://github.com/dotnet/runtime/commits/main?after=2aec3816f9bbc0eda3261daa335a05ea0df31b9c+34\nNotice the +34 part. That's how many commits are skipped. Change that to 125,882 minus 1 minus 35 per page, that gives us this URL, which takes you right to the first page of the dotnet/runtime commit history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I run HTML files directly from GitHub, instead of just viewing their source?\n\nIf I have a .html file in a GitHub repository, e.g. for running a a set of JavaScript tests, is there any way I can view that page directly\u2014thus running the tests?\nFor example, could I somehow actually see the test results that would be produced by the jQuery test suite, without downloading or cloning the repo to my local drive and running them there?\nI know this would basically put GitHub in the static content hosting business, but then again, they just have to change their mime-type from text/plain to text/html."}, {"role": "assistant", "content": "You might want to use raw.githack.com. It supports GitHub, Bitbucket, Gitlab and GitHub gists.\nGitHub\nBefore:\nhttps://raw.githubusercontent.com/[user]/[repository]/[branch]/[filename.ext]\nIn your case .html extension\nAfter:\nDevelopment (throttled)\nhttps://raw.githack.com/[user]/[repository]/[branch]/[filename.ext]\nProduction (CDN)\nhttps://rawcdn.githack.com/[user]/[repository]/[branch]/[filename.ext]\nIn your case .html extension\n\nraw.githack.com also supports other services:\nBitbucket\nBefore:\nhttps://bitbucket.org/[user]/[repository]/raw/[branch]/[filename.ext]\nAfter:\nDevelopment (throttled)\nhttps://bb.githack.com/[user]/[repository]/raw/[branch]/[filename.ext]\nProduction (CDN)\nhttps://bbcdn.githack.com/[user]/[repository]/raw/[branch]/[filename.ext]\nGitLab\nBefore:\nhttps://gitlab.com/[user]/[repository]/raw/[branch]/[filename.ext]\nAfter:\nDevelopment (throttled)\nhttps://gl.githack.com/[user]/[repository]/raw/[branch]/[filename.ext]\nProduction (CDN)\nhttps://glcdn.githack.com/[user]/[repository]/raw/[branch]/[filename.ext]\nGitHub gists\nBefore:\nhttps://gist.githubusercontent.com/[user]/[gist]/raw/[revision]/[filename.ext]\nAfter:\nDevelopment (throttled)\nhttps://gist.githack.com/[user]/[gist]/raw/[revision]/[filename.ext]\nProduction (CDN)\nhttps://gistcdn.githack.com/[user]/[gist]/raw/[revision]/[filename.ext]\n\nUpdate: rawgit was discontinued"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is \"git remote add ...\" and \"git push origin master\"?\n\nQuite often, Git and Ruby on Rails looks like magic... such as in the first chapter of Ruby on Rails 3 Tutorial book, it talks about Git:\ngit remote add origin [email\u00a0protected]:peter/first_app.git\ngit push origin master\n\nAnd it pretty much says \"it just works\" without saying too much about what they are and start talking about branching.  Searching on the Internet shows that git remote add is to add a \"short name\", such as origin, and it can be any name as well, which is like an alias to a URL.\nAnd origin is the usual path of where the remote repository points to (in http://git-scm.com/book/en/Git-Basics-Working-with-Remotes under \"Adding Remote Repositories\").\nSo why is the URL not git://[email\u00a0protected]/peter/first_app.git, but in the other syntax -- what syntax is it?  Why must it end with .git?   I tried not using .git at the end and it works too.  If not .git, what else can it be?  The git in [email\u00a0protected] seems to be a user account on the Git server?\nAlso, why does it need to be so verbose to use git push origin master?  Can't the default be origin and master?  I found that the first time, the origin master is needed, but after a small edit and commit, then git push is all it needs (no need origin master).  Can somebody who knows what is going on give some details?\nSometimes it feels like a lot of magic without explanation... and sometimes the person using it is so confident and when asked why, can't explain it, and respond with something like \"that's the way it is\".  Sometimes very practical and pragmatic.  It is not bad to be practical, but probably not practical to the point to not know what is going on."}, {"role": "assistant", "content": "Git is like Unix. It is user-friendly, but it is picky about its friends. It's about as powerful and as user-friendly as a shell pipeline.\nThat being said, once you understand its paradigms and concepts, it has the same Zenlike clarity that I've come to expect from Unix command-line tools. You should consider taking some time off to read one of the many good Git tutorials available online. The Pro Git book is a good place to start.\nTo answer your first question.\n\nWhat is git remote add ...?\nAs you probably know, Git is a distributed version control system. Most operations are done locally. To communicate with the outside world, Git uses what are called \"remotes\". These are repositories other than the one on your local disk which you can push your changes into (so that other people can see them) or pull from (so that you can get others changes). The command git remote add origin [email\u00a0protected]:peter/first_app.git creates a new remote called origin located at [email\u00a0protected]:peter/first_app.git. Once you do this, in your push commands, you can push to origin instead of typing out the whole URL.\n\nWhat is git push origin master?\nThis is a command that says \"push the commits in the local branch named master to the remote named origin\". Once this is executed, all the stuff that you last synchronised with origin will be sent to the remote repository and other people will be able to see them there.\n\n\nNow about transports (i.e., what git://) means. Remote repository URLs can be of many types (file://, https://, etc.). Git simply relies on the authentication mechanism provided by the transport to take care of permissions and stuff. This means that for file:// URLs, it will be Unix file permissions, etc. The git:// scheme is asking Git to use its own internal transport protocol, which is optimised for sending Git changesets around. As for the exact URL, it's the way it is because of the way GitHub has set up its Git server.\nNow the verbosity. The command you've typed is the general one. It's possible to tell Git something like \"the branch called master over here is local mirror of the branch called foo on the remote called bar\". In Git speak, this means that master tracks bar/foo. When you clone for the first time, you will get a branch called master and a remote called origin (where you cloned from) with the local master set to track the master on origin.\nOnce this is set up, you can simply say git push and it'll do it. The longer command is available in case you need it (e.g., git push might push to the official public repository and git push review master can be used to push to a separate remote which your team uses to review code). You can set your branch to be a tracking branch using the --set-upstream option of the git branch command.\nI've felt that Git (unlike most other applications I've used) is better understood from the inside out. Once you understand how data is stored and maintained inside the repository, the commands and what they do become crystal clear. I do agree with you that there's some elitism amongst many Git users, but I also found that with Unix users once upon a time, and it was worth ploughing past them to learn the system. Good luck!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Could not resolve host github.com error while cloning remote repository in git\n\nWhat I did: I have created a remote repository on Github and I am trying to clone the remote repository on my local machine. While cloning I am providing the clone URL & target folder.\nBut every time I try to clone, I am getting this error:\nError: \"fatal: unable to access 'https://github.com/hyperion057/spring-repo.git/': Could not resolve host: github.com\"\nWhat do I need to do to connect to GitHub ?"}, {"role": "assistant", "content": "I got a similar error, and it's caused by incorrect proxy setting. This command saved me:\ngit config --global --unset http.proxy\n\nhttps version:\ngit config --global --unset https.proxy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Install specific branch from github using Npm\n\nI would like to install bootstrap-loader from github in my project using npm\nCurrently they are maintaining two version of this project which are comaptible with webpack version 1 and 2.\nI would like to install version 1. What npm command I should use to install this? \nI tried using below one but it is not working.\nnpm install git://github.com/shakacode/bootstrap-loader.git[#v1] --Save"}, {"role": "assistant", "content": "There are extra square brackets in the command you tried.\nTo install the latest version from the brach-name branch, you can use:\nnpm install \"https://github.com/shakacode/bootstrap-loader.git#branch-name\" --save"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between Git and GitHub\n\nI have recently added a new project to Git using Eclipse, but do not see the project appear in my GitHub account.\nWhy do they have the same account information and different repositories?\nIsn't Git and GitHub the same thing?"}, {"role": "assistant", "content": "Git is a revision control system, a tool to manage your source code history.\nGitHub is a hosting service for Git repositories.\nSo they are not the same thing: Git is the tool, GitHub is the service for projects that use Git.\nTo get your code to GitHub, have a look here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I arrange repositories into folders on Github?\n\nI am new to git and what I am doing now is to upload all my recent projects as repositories to github. There are a lot of different projects like webdesign, wordpress themes and different types of applications. And some of these also belong to bigger projects because they were about testing some stuff as a different application.\nThe problem is that I have a confusing amount of repositories online now. How can I group related github repositories in a folder structure? Is there a feature providing any ability to order and structure or even tag repositories on github?"}, {"role": "assistant", "content": "Update Dec. 2023: it's happening! (kind of)\n\nNew Organization Repositories List Feature Preview (Dec. 2023)\nIn October, we launched the beta of Repository Custom Properties, enabling you to attach key-value pairs to repositories in your organizations.\nAmong many scenarios, one of the key components we had envisioned was the ability to filter your repository properties.\nMaking it easier to find exactly the set of repositories you were looking for.\nStarting today, you can enable a new list view for repositories.\nThis update improves accessibility and performance and introduces a new filter bar supporting properties.\nTo enable select New organization repositories view option in the feature preview dialog.\n\nLearn more about managing customer properties for your organization and managing rulesets for your organization.\nHead over to the community discussions to share your feedback.\n\n\nUpdate Sept. 2023: the same GitHub Community Issue #4174: \"Support repository categories\" adds from the Customer Support:\n\nGuy (GitHub Support)\nSep 15, 2023, 11:04AM UTC\nHi Tom:\nI understand, I've added your comments about the lack of this feature being a blocker for your org to our internal customer feedback tracker.\nRequests for It have been made by some quite large Enterprise orgs since at least 2014, and the Product Managers have never been persuaded to implement It, so I don't think it's likely they will change their minds any time soon, unfortunately.\nCheers,\nGuy\n\nSo no project folder structure for now (2023).\n\nUpdate Dec. 2021:\n\nLists are now available as a public beta \n\n\nLists level up the starring experience by making it easy to organize and curate your favorite repositories on GitHub.\nYou can create public lists that appear on your stars page at https://github.com/USERNAME?tab=stars.\nLists are available to everyone except enterprise managed users.\n\n\nHowever (June 2022), as illustrated by Wyck in GitHub Community Issue #4174: Support repository categories, the presentation is still lacking:\n\nif I click the topic button, it shows me a list of all public repos marked with that same topic keyword.\nInstead, I'd prefer if there was a way to view only repos within my organization marked with that topic.\nI'd also like to see a top-level list of all topic that have been marked on any repos within my private organization, to serve as a top-level directory or table-of-contents of repos in my organization.\n\n\nOriginal answer:\nOn GitHub itself, you cannot group your repos by \"folder\", unless you create organizations.\nSee SublimeText, for instance, as a group of all sublimeText packages repos.\nBut that won't support a nested folder organization.  For now (June 2017), that only supports a nested team organization structure.\n\nUpdate Aug. 2020: the README project allows you to add a profile page... in which you can list and organize your repositories any way you want. But that is a manual process (editing the page).\n\nUpdate February 2019: you now have the concept of project:\nSee \"User owned projects\u2014your personal workspace \"\n\nYou can also link up to 5 repositories to your project board. Linking repositories will limit the scope of the search to those linked repositories, so you can quickly narrow down any new issues you haven\u2019t yet added to the project board\n\n\nGitHub also supports tags now (in the form of topics).\n\nOriginal answers 2012:\nAnother solution is for you to define repositories which reference other repos, declared as submodules.\nThat way, when you are cloning one of the repos (which references other repos), called \"parent repos\", they will be cloned in their own directory, with a sub-directory per submodules.\nIt won't be visually apparent on your GitHub account itself (as it will still contains a large list of repos, even larger with the parent repos), but by cloning one parent repo, you will get back all its associated submodules in it.\n\nThe issue 302 mentioned in the comments by AnneTheAgile in 2014 just references now (Nov. 2018) tbnorth/github_repo_tags\n\nThe small python program in this repository uses the GitHub API to get a list of your repos. and add their name, description, and URL, to a new repo., by default called repo_tags. Initially each \u201cissue\u201d is tagged unclassified, but you can tag them as you please, using regular issue tagging.\nWhen re-run, repo_tags.py only creates issues for repos. that weren't already covered by an issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trying to git pull with error: cannot open .git/FETCH_HEAD: Permission denied\n\nHelp me please, I am trying to run this in my terminal:\nasgard@asgard-A7N8X2-0:~/CollegePortal$ git pull\nerror: cannot open .git/FETCH_HEAD: Permission denied\n\nThen I try this one\nasgard@asgard-A7N8X2-0:~/CollegePortal$ sudo git pull\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\nHelp me, I don't understand this problem."}, {"role": "assistant", "content": "It seems like the first one isn't working because your user doesn't have the permissions for changing that directory, and the second because your root user doesn't have the right SSH keys for accessing that git repository.\nDepending on what you're trying to do, it might be better to clone the repository to a different directory, or maybe chown the current directory to have full access for your user"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?\n\nIf you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?\nLet's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920\nI can use as little as the first four characters:\nhttps://github.com/wycats/handlebars.js/commit/e629\nBut I feel like that would be risky.  But assuming a codebase that, over a couple of years, might have\u2014say\u201430k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?"}, {"role": "assistant", "content": "This question is actually answered in Chapter 7 of the Pro Git book:\n\nGenerally, eight to ten characters are more than enough to be unique\nwithin a project. One of the largest Git projects, the Linux kernel,\nis beginning to need 12 characters out of the possible 40 to stay\nunique.\n\n7 digits are the Git default for a short SHA, so that's fine for most projects. The Kernel team has increased theirs several times, as mentioned because they have several hundred thousand commits. So for your ~30k commits, 8 or 10 digits should be perfectly fine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git ahead/behind info between master and branch?\n\nI have created a branch for testing in my local repo (test-branch) which I pushed to Github.\nIf I go to my Github account and select this test-branch it shows the info:\nThis branch is 1 commit ahead and 2 commits behind master\n\nMy questions are:\n\nHow can I display this info locally (ie: a command that shows this on the terminal, rather than having to open Github to see it)?\nI know I can see the diffs between branches using:\ngit diff master..test-branch\n\nor using Meld (which I prefer):\ngit difftool master..test-branch\n\nbut I was wondering if there's a way to see the ahead and behind commits separately. I.E.: is there a way to show that 1 commit ahead by itself and then those 2 commits behind by themselves?"}, {"role": "assistant", "content": "Part 1\nAs an answer on your question 1, here's a trick I found to compare two branches and show how many commits each branch is ahead of the other (a more general answer on your question 1):\nFor local branches:\ngit rev-list --left-right --count master...test-branch\nFor remote branches:\ngit rev-list --left-right --count origin/master...origin/test-branch\nThis gives output like the following:\n2       1\nThis output means: \"Compared to master, test-branch is 1 commit ahead and 2 commits behind.\"\nYou can also compare local branches with remote branches, e.g. origin/master...master to find out how many commits a local branch (here master) is ahead/behind its remote counterpart.\nPart 2\nTo answer the second part of your question, the solution depends on what exactly you want to achieve.\nTo view commits\nIn order to have git rev-list return the exact list of commits unique on either side, replace the --count argument with something like --pretty=oneline, making the complete command to execute:\ngit rev-list --left-right --pretty=oneline master...test-branch\n\nThis will generate output like this:\n<bba27b56ad7072e281d529d4845e4edf877eb7d7 unique commit 2 on master\n<dad0b69ec50ea57b076bfecabf2cc7c8a652bb6f unique commit 1 on master\n>4bfad52fbcf0e60d78d06661d5c06b59c98ac8fd unique commit 1 on test-branch\n\nHere every commit sha is preceded by < or > to indicate which branch it can be found on (left or right, here master or test-branch respectively).\nTo view code\nIf you want to view a diff of all new commits only found on either branch, you'll need to do this in two steps:\n\ndefine the most recent common ancestor\n\n$ git merge-base master test-branch\nc22faff7468d6d5caef217ac6b82f3ed95e9d902\n\n\ndiff either branch to the commit sha obtained above (short format will usually do)\n\nTo show the diff of all commits only found on master\ngit diff c22faff7..master\n\nTo show the diff of all commits only found test-branch\ngit diff c22faff7..test-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "TortoiseGit save user authentication / credentials\n\nIs there a way to save GITHUB's user credentials with TortoiseGit?\nIt prompts me the below dialog every time whenever I do a push/pull.\nI would like to save my user credential information somewhere like how I did with TortoiseSVN."}, {"role": "assistant", "content": "For TortoiseGit 1.8.1.2 or later, there is a GUI to switch on/off credential helper.\nIt supports git-credential-wincred and git-credential-winstore.\nTortoiseGit 1.8.16 add support for git-credential-manager (Git Credential Manager, the successor of git-credential-winstore)\nFor the first time you sync you are asked for user and password, you enter them and they will be saved to Windows credential store. It won't ask for user or password the next time you sync.\nTo use: Right click \u2192 TortoiseGit \u2192 Settings \u2192 Git \u2192 Credential. Select Credential helper: wincred - this repository only / wincred - current Windows user"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change Git repository directory location.\n\nWith Git/Github for Windows, if I have a repository with this directory: C:\\dir1\\dir2, what do I need to do to move the repo files to C:\\dir1?  I can obviously physically copy and paste the files, but what do I need to do on the Git side?\nI have this repo on GitHub and I use Git Bash and GitHub for Windows."}, {"role": "assistant", "content": "Simply copy the entire working directory contents (including the hidden .git directory). This will move the entire working directory to the new directory and will not affect the remote repository on GitHub.\nIf you are using GitHub for Windows, you may move the repository using the method as above. However, when you click on the repository in the application it will be unable to find it. To resolve this simply click on the blue circle with the !, select Find It and then browse to the new directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does git revert complain about a missing -m option?\n\nSo I'm working on a project with other people, and there's multiple github forks being worked on. Someone just made a fix for a problem and I merged with his fork, but then I realized that I could find a better solution. I want to revert the commit I just made. I tried doing this with git revert HEAD but it gave me this error: \nfatal: Commit <SHA1> is a merge but no -m option was given.\nWhat does that mean? When I merged and committed, I did use the -m option to say \"Merged with <username>\".\nWhat am I doing wrong here?"}, {"role": "assistant", "content": "By default git revert refuses to revert a merge commit as what that actually means is ambiguous. I presume that your HEAD is in fact a merge commit.\nIf you want to revert the merge commit, you have to specify which parent of the merge you want to consider to be the main trunk, i.e. what you want to revert to.\nOften this will be parent number one, for example if you were on master and did git merge unwanted and then decided to revert the merge of unwanted. The first parent would be your pre-merge master branch and the second parent would be the tip of unwanted.\nIn this case you could do:\ngit revert -m 1 HEAD\n\ngit cat-file -p [MERGE_COMMIT_ID] will show the parent branches in order. The first one listed would be -m 1, the second -m 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to upload a project to GitHub\n\nAfter checking How can I upload my project's Git repository to GitHub?, I still have no idea how to get a project uploaded to my GitHub repository.\nI created a repository and want to upload my project to it.\nI've looked on the repository page for an upload button of some kind, but I haven't seen anything of the sort.\nI've looked at the links provided so far, but I'm still getting nowhere. They mention command line; is that Windows command line or Git Bash? Because I can't get either to do anything.\nI also tried using the Git GUI, but when I select the folder I want it says that it's not a Git repository...does it need to be zipped up? I tried adding the .gitconfig file in the folder, but it doesn't make a difference."}, {"role": "assistant", "content": "GitHub released a native Windows client which makes all the below steps redundant.\nYou can also use Sourcetree to get both Git and Mercurial setup on Windows.\n\nHere is how you would do it in Windows:\n\nIf you don't have Git installed, see this article on how to set it up.\n\nOpen up a Windows command prompt.\n\nChange into the directory where your source code is located in the command prompt.\n\nFirst, create a new repository in this directory git init. This will say \"Initialized empty git repository in ....git\" (... is the path).\n\nNow you need to tell Git about your files by adding them to your repository. Do this with git add filename. If you want to add all your files, you can do git add .\n\nNow that you have added your files and made your changes, you need to commit your changes so Git can track them. Type git commit -m \"adding files\". -m lets you add the commit message in line.\n\n\nSo far, the above steps is what you would do even if you were not using GitHub. They are the normal steps to start a Git repository.  Remember that Git is distributed (decentralized), meaning you don't need to have a \"central server\" (or even a network connection), to use Git.\nNow you want to push the changes to your Git repository hosted with GitHub. You do this by telling Git to add a remote location, and you do that with this command:\ngit remote add origin https://github.com/yourusername/your-repo-name.git\n*Note: your-repo-name should be created in GitHub before you do a git remote add origin ...\nOnce you have done that, Git now knows about your remote repository. You can then tell it to push (which is \"upload\") your committed files:\ngit push -u origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install private github repositories by dependency in package.json\n\nI'm trying to install github private repository by npm that includes other private github repositories as dependency.\nHave tried a lot of ways and posts but none is working. Here is what i'm doing :\nnpm install git+https://github.com/myusername/mygitrepository.git\n\nin package.json  is like : \n\"dependencies\": {\n    \"repository1name\": \"git+https://github.com/myusername/repository1.git\",\n    \"repository2name\": \"git+https://github.com/myusername/repository2.git\"\n}\n\nWhat is the the right way to do it?"}, {"role": "assistant", "content": "Try this:\n\"dependencies\" : {\n  \"name1\" : \"git://github.com/user/project.git#commit-ish\",\n  \"name2\" : \"git://github.com/user/project.git#commit-ish\"\n}\n\nYou could also try this, where visionmedia/express is name/repo:\n\"dependencies\" : {\n   \"express\" : \"visionmedia/express\"\n}\n\nOr (if the npm package module exists):\n\"dependencies\" : {\n  \"name\": \"*\"\n}\n\nTaken from NPM docs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can a project have multiple origins?\n\nCan a project have two (or more) \"origins\" in Git?\nI would like to push a single project to both github and a Heroku server.\nSpecifically, this error appears when adding the github repository:\n$ git remote add origin https://github.com/Company_Name/repository_name.git\nfatal: remote origin already exists."}, {"role": "assistant", "content": "Edit: If you want to configure a single remote (origin or otherwise) to push to multiple upstream repos, that is possible. See Git - Pushing code to two remotes\n\nYou can have as many remotes as you want, but you can only have one remote named \"origin\". The remote called \"origin\" is not special in any way, except that it is the default remote created by Git when you clone an existing repository. You can configure a second remote, push to/pull from that remote, and setup some branches to track branches from that remote instead of origin.\nTry adding a remote called \"github\" instead:\n$ git remote add github https://github.com/Company_Name/repository_name.git\n\n# push master to github\n$ git push github master\n\n# Push my-branch to github and set it to track github/my-branch\n$ git push -u github my-branch\n\n# Make some existing branch track github instead of origin\n$ git branch --set-upstream other-branch github/other-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do a GitHub pull request\n\nHow do I create and/or send a pull request to another repository hosted on GitHub?"}, {"role": "assistant", "content": "(In addition to the official \"GitHub Help 'Using pull requests' page\",\nsee also \"Forking vs. Branching in GitHub\", \"What is the difference between origin and upstream in GitHub\")\nCouple tips on pull-requests:\nAssuming that you have first forked a repo, here is what you should do in that fork that you own:\n\ncreate a branch: isolate your modifications in a branch. Don't create a pull request from master, where you could be tempted to accumulate and mix several modifications at once.\nrebase that branch: even if you already did a pull request from that branch, rebasing it on top of origin/master (making sure your patch is still working) will update the pull request automagically (no need to click on anything)\nupdate that branch: if your pull request is rejected, you simply can add new commits, and/or redo your history completely: it will activate your existing pull request again.\n\"focus\" that branch: i.e., make its topic \"tight\", don't modify thousands of class and the all app, only add or fix a well-defined feature, keeping the changes small.\ndelete that branch: once accepted, you can safely delete that branch on your fork (and git remote prune origin). The GitHub GUI will propose for you to delete your branch in your pull-request page.\n\nNote: to write the Pull-Request itself, see \"How to write the perfect pull request\" (January 2015, GitHub)\n\nMarch 2016: New PR merge button option: see \"Github squash commits from web interface on pull request after review comments?\".\n\nThe maintainer of the repo can choose to merge --squash those PR commits.\n\nAfter a Pull Request\nRegarding the last point, since April, 10th 2013, \"Redesigned merge button\", the branch is deleted for you:\n\n\nDeleting branches after you merge has also been simplified.\nInstead of confirming the delete with an extra step, we immediately remove the branch when you delete it and provide a convenient link to restore the branch in the event you need it again.\n\nThat confirms the best practice of deleting the branch after merging a pull request.\n\npull-request vs. request-pull\n\npull request isn't an official \"git\" term.\nGit uses the request-pull(!) command to build a request for merging:\nIt \"summarizes the changes between two commits to the standard output, and includes the given URL in the generated summary.\"\nGithub launches its own version on day one (February 2008), but redesigned that feature in May 2010, stating that:\n  Pull Request = Compare View + Issues + Commit comments\n\n\n\n\ne-notes for \"reposotory\" (sic)\n<humour>\nThat (pull request) isn't even defined properly by GitHub!\nFortunately, a true business news organization would know, and there is an e-note in order to replace pull-replace by 'e-note':\n\nSo if your reposotory needs a e-note... ask Fox Business. They are in the know.\n</humour>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": ".gitignore after commit [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I make Git forget about a file that was tracked, but is now in .gitignore?\n\n                                (35 answers)\n                            \n\nClosed 3 years ago.\n\n\n\nI have a git repository hosted on Github. After committing many files, I am realizing that I need to create .gitignore and exclude .exe, .obj files.\nHowever, will it automatically remove these committed files from the repository? Is there any way to force that?"}, {"role": "assistant", "content": "No you cannot force a file that is already committed in the repo to be removed just because it is added to the .gitignore \nYou have to git rm --cached to remove the files that you don't want in the repo. ( --cached since you probably want to keep the local copy but remove from the repo. ) So if you want to remove all the exe's from your repo do\ngit rm --cached /\\*.exe\n\n(Note that the asterisk * is quoted from the shell - this lets git, and not the shell, expand the pathnames of files and subdirectories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use private Github repo as npm dependency\n\nHow do I list a private Github repo as a \"dependency\" in package.json? I tried npm's Github URLs syntaxes like ryanve/example, but doing npm install in the package folder gives \"could not install\" errors for the private dependencies. Is there a special syntax (or some other mechanism) for depending on private repos?"}, {"role": "assistant", "content": "It can be done via https and oauth or ssh.\nhttps and oauth: create an access token that has \"repo\" scope and then use this syntax:\n\"package-name\": \"git+https://<github_token>:[email\u00a0protected]/<user>/<repo>.git\"\n\nor\nssh: setup ssh and then use this syntax:\n\"package-name\": \"git+ssh://[email\u00a0protected]:<user>/<repo>.git\"\n\n(note the use of colon instead of slash before user)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download source in ZIP format from GitHub? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to download .zip from GitHub for a particular commit sha?\n\n                                (4 answers)\n                            \n\nClosed 8 months ago.\n\n\n\nI see something strange like: \nhttp://github.com/zoul/Finch.git\nNow I'm not that CVS, SVN, etc. dude. When I open that in the browser it tells me that I did something wrong. So I bet I need some hacker-style tool? Some client?\n(I mean... why not just provide a ZIP file? Isn't the world complex enough?)"}, {"role": "assistant", "content": "What happens when the repository owner has not prepared a zip file, and you just want a download to use yourself? There is an answer and you don't need to go though that horrid process to download software, install and register keys and whatnot on GitHub, etc.!\nTo simply download a repository as a zip file: add the extra path '/zipball/master/' to the end of the repository URL and voila, it gives you a zip file of the whole lot.\nFor example,\n\nhttp://github.com/zoul/Finch/\n\nbecomes:\n\nhttp://github.com/zoul/Finch/zipball/master/\n\nIt then gives you a zip file to download."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you change a repository description on GitHub?\n\nWhen you create a repository on GitHub, you can optionally create a description of the repository.  Unfortunately, I wrote a description that no longer adequately describes the code in the repo.\nHow do I change the repo description?"}, {"role": "assistant", "content": "They changed the looks slightly, the \"Edit\" button is seen when on the repositories main page, which is the \"Code\" tab. Here is a screencast/animated-screenshot:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merging between forks in GitHub\n\nI forked a GitHub repository. Then I pushed some changes to my fork. Then the original repository merged my changes and some others. Now, I want to merge those changes I'm missing. I tried a simple pull followed by push, but this yield my commits in duplicate. What's the best way to do it?"}, {"role": "assistant", "content": "You probably have a \"remote\" for each repository. You need to pull from one remote and push to the other.\nIf you originally cloned from your fork, that remote will be called \"origin\". If you haven't added it already, you'll need to add the other repository as another remote:\ngit remote add <shortname> git://github.com/<ownerName>/repo.git\n\nAfter that's all set up, you should indeed be able to (github changed default branch from master to main, change as necessary)\ngit pull <shortname> master\ngit push origin\n\nRemember, git pull is nothing more than a macro that does git fetch and git merge, in that order. You just need to fetch the list of commits from the other repository and then merge his branch into your tree. Merging should do the right thing with your commits on both branches.\nGitHub, in all its perpetual awesomeness, gives you a shortcut, of course. There's a \"fast-forward\" button on your fork of the repository that you can use to catch your fork up if you're entirely merged into the other side."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "If I fork someone else's private Github repo into my account, is it going to appear in my account as a public repo?\n\nSomeone gave me access to one of their private repo on Github. What I want to do is to fork that project into my own account, so I could make use of Github's pull request feature.\nI only have a basic account on Github, so I cannot make private repos on my own, but if I fork someone else's private repo into my account, is it going to appear in my account as public?"}, {"role": "assistant", "content": "No. You can fork it and it still remains private.\n\nPrivate collaborators may fork any private repository you\u2019ve added\n  them to without their own paid plan. Their forks do not count against\n  your private repository quota.\n\nhttps://github.com/plans"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I add files and folders into GitHub repos?\n\nI created an account on GitHub and I'm facing a problem with adding files. I have added readme.txt. Also, I have 3 other PHP files and a folder including images.\nHow do I add the files and folder? I tried it with git pull because git push origin -u master showed me an error."}, {"role": "assistant", "content": "You can add files using git add, example git add README, git add <folder>/*, or even git add *\nThen use git commit -m \"<Message>\" to commit files\nFinally git push -u origin master to push files.\nWhen you make modifications run git status which gives you the list of files modified, add them using git add * for everything or you can specify each file individually, then git commit -m <message> and finally, git push -u origin master\nExample - say you created a file README, running git status gives you\n$ git status\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   README\n\nRun git add README, the files are staged for committing. Then run git status again, it should give you - the files have been added and ready for committing.\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#   new file:   README\n#\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nThen run git commit -m 'Added README'\n$ git commit -m 'Added README'\n[master 6402a2e] Added README\n  0 files changed, 0 insertions(+), 0 deletions(-)\n  create mode 100644 README\n\nFinally, git push -u origin master to push the remote branch master for the repository origin.\n$ git push -u origin master\nCounting objects: 4, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 267 bytes, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nTo [email\u00a0protected]:xxx/xxx.git\n   292c57a..6402a2e  master -> master\nBranch master set up to track remote branch master from origin.\n\nThe files have been pushed successfully to the remote repository.\nRunning a git pull origin master to ensure you have absorbed any upstream changes\n$ git pull origin master\nremote: Counting objects: 12, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 8 (delta 4), reused 7 (delta 3)\nUnpacking objects: 100% (8/8), done.\nFrom xxx.com:xxx/xxx\n * branch            master     -> FETCH_HEAD\nUpdating e0ef362..6402a2e\nFast-forward\n public/javascript/xxx.js |    5 ++---\n 1 files changed, 2 insertions(+), 3 deletions(-)\n create mode 100644 README\n\nIf you do not want to merge the upstream changes with your local repository, run git fetch to fetch the changes and then git merge to merge the changes. git pull is just a combination of fetch and merge.\nI have personally used gitimmersion - http://gitimmersion.com/ to get upto curve on git, its a step-by-step guide, if you need some documentation and help"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove a branch locally?\n\nI have a master and a dev branch in my repository. I want to remove the master branch from my computer so that I don't accidentally commit to it (it's happened..). \nThere are questions on here about how to delete branches locally and remotely, but I haven't been able to find out how to only delete a branch locally.\nOne answer said to use this:\ngit branch -d local_branch_name\n\nBut I tried that and the branch still shows up in the GitHub application."}, {"role": "assistant", "content": "To Force Delete a Local Branch:\n$ git branch -D <branch-name>\n\n\n[NOTE]:\n-D is a shortcut for --delete --force."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Repository size limits for GitHub.com\n\nLately I have been using GitHub and I am wondering what is the repository size limit for files hosted on github.com?"}, {"role": "assistant", "content": "Known limits\nThere are multiple repo size limits which apply.\nSoft limit\nAs of 2023, as per the docs, this is 5 GB. If you exceed this limit, is possible that you will receive an email from GitHub Support.\n\nWe recommend repositories remain small, ideally less than 1 GB, and less than 5 GB is strongly recommended.\n\nIf you happen to receive a restricting email from GitHub Support for one or more public repos, please report it as a comment to this answer along with a link to the repos, including the circumstances surrounding it.\ngit push warning limits\nAs of 2020, the archived docs (backup) excerpted below stated the following. It is reasonably assumed that this still applies. This limit can obviously be ignored.\n\nIf you reach 75GB, you'll receive a warning from Git in your terminal the next time you push a change.\n\nAlso, you'll receive a warning in the terminal for each file of over 50MB but under the hard limit.\nHard limits\nAs of 2023, although the docs don't state the per repository hard limit, it is reasonably assumed that the previously documented per repository hard limit of 100 GB still applies, at least until any theoretical email from GitHub Support is received. The docs, also excerpted below, state only the per file hard limit of 100 MB.\n\nIndividual files in a repository are strictly limited to a 100 MB\nmaximum size limit.\n\nAs of 2020, the archived docs excerpted below stated that the hard limit is 100 GB per repository. Again, it is reasonably assumed that this hard limit still applies.\n\nRepositories have a hard size limit of 100GB.\n\nAs of 2018, the documented (archive link) push size limit is 2 GB, although related considerations also apply for large pushes.\n\nwe don\u2019t allow pushes over 2GB\n\nFiles can also be shared as binaries in a release. As of 2020, the documented size limit of each such file is 2 GB.\n\nWe don't limit the total size of the binary files in the release or the bandwidth used to deliver them. However, each individual file must be smaller than 2 GB.\n\nChecking used size\nThe size of each repo to which you directly have Admin access, but not via a team, is shown at https://github.com/settings/repositories. Alternatively, the git-sizer tool can estimate the repo size locally.\nBypassing the file size limit\nCompression can obviously be used for some files if this puts them under the limit.\nLarge files can be split into smaller chunks. If it works for your application, a tool such as tar plus split, or just split alone, can be used to split a large file into smaller parts, such as 90 MB each.\nAlthough Git LFS has separate quotas, it is however strictly advised to not use it, whether for binary or text files. This is due to the meager limits of its free plan as imposed by GitHub. If you made the mistake of using it, its usage can be checked and files can be removed from it.\nNumber of files\nThere is no established limit of the max number of files in a repo. A post from 2015 notes having 1.7 million files in a GitHub repo. Note that having 1 million files would restrict each file to a maximum average of 5 KB as per the soft limit of 5 GB or to 100 KB as per the presumed hard limit of 100 GB.\nNumber of commits\nA user reported having a repo disabled at 22 million commits.\nHow to write\nTo be able to successfully push a large number of bytes using git, it is highly likely that you'll first have to configure http.postBuffer to a sufficiently large value, with enough free system memory available.\nApart from using git, the other way to programmatically write files that are not updated much is to use the v3 REST or the v4 GraphQL APIs using a personal access token. When doing so, ensure that the user-specific hourly rate limit is not exceeded. Unlike with git, this API doesn't however seem to allow submitting an increment or a diff.\nEncryption\nIt is possible to encrypt the contents of the entire repo or just some files while using git, with several caveats.\nComparison\nFor Bitbucket, consider this answer. As feasible, I would personally push to both GitHub and Bitbucket, providing an implicit backup.\nAs of 2022, GitLab (not GitHub) looks to be lowering its free quota from 10 GB per repo to a total of just 5 GB for all repos combined! You can see the total space used in your GitLab account."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to style a JSON block in Github Wiki?\n\nIs there a way to nicely format/style JSON code in Github Wiki (i.e Markdown preferred)?\nSomething like this with few colors (or bold) and correct indentation:\nhttp://www.freeformatter.com/json-formatter.html#ad-output"}, {"role": "assistant", "content": "Some color-syntaxing enrichment can be applied with the following blockcode syntax\n```json\nHere goes your json object definition\n```\n\nNote: This won't prettify the json representation. To do so, one can previously rely on an external service such as jsbeautifier.org and paste the prettified result in the wiki."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Send a pull request on GitHub for only latest commit\n\nI forked a project on github and am successfully making changes to my local master and pushing to origin on github. I want to send a pull request, but only want to include the last commit.  The pull request UI on github.com shows the last 9 commits and I don't know how to filter that down.\nI was trying to understand if I should create a new local branch, check that out and somehow reset or rebase to upstream?  Then apply my last commit from my master by id to the new local branch and use that for the pull request?\nI'm trying to get the concepts right and figure out the right command lines to do what I need."}, {"role": "assistant", "content": "You need to basically create a new branch & cherry-pick the commits you want to add to it.\n\nNote: you might need these before the checkout/cherry-pick commands\ngit remote add upstream <git repository>\ngit remote update\n\ngit checkout -b <new-branch-name> upstream/master\n\ngit cherry-pick <SHA hash of commit>\n\ngit push origin <new-branch-name>\n\nAfterwards, you will see <new-branch-name> branch on github, switch to it and can submit the pull request with the changes you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't push to remote branch, cannot be resolved to branch\n\nI migrated my repos from Bitbucket or Github.  I don't think this matters but it's the only thing different. For a little while, I had two remotes set up:\norigin: bitbucket\ngithub: github\n\nThen I removed both and pointed origin to github:\ngit remote remove origin\ngit remote remove github\ngit remote add origin https://github....\n\nTest push of develop branch:\ngit push origin develop\n\nEverything up to date, ok, good.\nCreate a new branch for some work as per usual:\ngit checkout -b Feature/Name\n\nUpdate a file or two.  Attempt to push to remote:\ngit push origin Feature/Name\n\nThis results in the error:\n\nfatal: Feature/Name cannot be resolved to branch\n\nSearch online for this issue, find some stuff about ensuring HEAD is correct, others about making sure I've got my branch name case correct (though, at this point the branch doesn't exist on the remote yet).  Unable to resolve.\nRan this command:\ngit push --all -u\n\nThis got my Feature/Name branch to github, but still see same behavior as prior:\ngit push origin develop\ngit push origin Feature/Name\n\nThe first works while the second throws the same error. Why?"}, {"role": "assistant", "content": "I was having this issue as well, and it was driving me crazy. I had something like feature/name but git branch -a showed me FEATURE/name. Renaming the branch, deleting and recreating it, nothing worked. What finally fixed it:\nGo into .git/refs/heads\nYou'll see a FEATURE folder. Rename it to feature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you fork your own repository on GitHub?\n\nI have a public repository on GitHub. I want to replicate/copy it and work on a new project based on this repository, but I don't want to affect how it is now. I tried forking it using the GitHub UI but it didn't do anything."}, {"role": "assistant", "content": "I don't think you can fork your own repo.\nClone it and push it to a new repo is good but you need to:\ngit clone https://github.com/userName/Repo New_Repo\ncd New_Repo\ngit remote set-url origin https://github.com/userName/New_Repo\ngit remote add upstream https://github.com/userName/Repo\ngit push origin master\ngit push --all\n\n(see git push)\nSee the all process described at \"Fork your own project on GitHub\".\n\nSix years later (2016), you now have the GitHub importer which allows you to import a repo from another source... including GitHub.\nSee \"Importing a repository with GitHub Importer\"\n\nnarf's answer (upvoted) also illustrate that process.\nThat will allow you to create a new repository and import the full history of the old one into the new one, using its GitHub url.\nAgain: what you get is a copy, not a real fork: you cannot make pull request from the new repo to the old one.\nAgain (bis), as stated in the comments by mpersico, this is not a TRUE FORK.\n\nIf I have a foo which is the canonical source repo for an open source project that I want other people to fork and have access to do PR, then I do not want to work in that repo, I want a fork I can use to issue proper PRs against my project.\nI have solved this my creating a second account in GitHub and forking to that."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Prevent pushing to master on GitHub?\n\nGitHub allows you to configure your repository so that users can't force push to master, but is there a way to prevent pushing to master entirely? I'm hoping to make it so that the only way of adding to commits to master is through the GitHub pull request UI."}, {"role": "assistant", "content": "Since the original question / answer, Github has added a new option for this to the restricted branches UI which allows you to set this up.\n\nRequire pull request reviews before merging When enabled, all commits must be made to a non-protected branch and submitted via a\npull request with the required number of approving reviews and no\nchanges requested before it can be merged into a branch that matches\nthis rule.\n\nTo find it go to Settings > Branches > Branch Protection Rules\nand click 'Add Rule'.\n\nThen, enter the name of the branch you want to protect and click the checkbox to require pull request reviews before merging.\n\nBy default, this only stops people who are not moderators. There is also another checkbox later down for ensuring that even moderators cannot merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I push to GitHub under a different username?\n\nA friend and myself are sharing my computer. I've made pushes to GitHub using the git bash shell on Windows 7. Now we're in a different project on that computer and I need her to push to her account. But it keeps trying to use my username and saying I don't have access to her repository:\n$ git push her_github_repository our_branch\nERROR: Permission to her_username/repository.git denied to my_username.\nfatal: The remote end hung up unexpectedly\nIMPORTANT: *Support for password authentication was removed on August 13, 2021.*"}, {"role": "assistant", "content": "This worked for me, it will prompt for username and password\ngit config --local credential.helper \"\"\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to include a file in your .gitconfig\n\nI'd like to include a file in my .gitconfig that has my github settings - is this possible?\nCan I do something like this:\n[core]\n    include = /path/to/file"}, {"role": "assistant", "content": "Git (1.7.10+) now supports this syntax in .gitconfig:\n[include]\n    path = /path/to/file\n\nSee here for a detailed description of the git change and its edge cases.\nBy the way, a couple of subtleties worth pointing out:\n\nEnvironment-variable expansion, e.g. $HOME, is not supported. (Expansion of ~ appeared in Git 1.7.10.2.)\nIf a relative path is specified, then it is relative to the .gitconfig file that has the [include] statement.  This works correctly even across chained includes -- e.g. ~/.gitconfig can have:\n[include]\n    path = subdir/gitconfig\n\nand subdir/gitconfig can have:\n[include]\n    path = nested_subdir/gitconfig\n\n... which will cause subdir/nested_subdir/gitconfig to be loaded.\nIf git can't find the target file, it silently ignores the error.  This appears to be by design."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the best practice for dealing with passwords in git repositories?\n\nI've got a little Bash script that I use to access twitter and pop up a Growl notification in certain situations. What's the best way to handle storing my password with the script? \nI would like to commit this script to the git repo and make it available on GitHub, but I'm wondering what the best way to keep my login/password private while doing this is. Currently, the password is stored in the script itself. I can't remove it right before I push because all the old commits will contain the password. Developing without a password isn't an option. I imagine that I should be storing the password in an external config file, but I thought I'd check to see if there was an established way to handle this before I tried and put something together."}, {"role": "assistant", "content": "The typical way to do this is to read the password info from a configuration file. If your configuration file is called foobar.config, then you would commit a file called foobar.config.example to the repository, containing sample data. To run your program, you would create a local (not tracked) file called foobar.config with your real password data.\nTo filter out your existing password from previous commits, see the GitHub help page on Removing sensitive data."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference between tag and release?\n\nUsing GitHub's API, I can't get the releases list, but I can get the tags list.\nWhat's the difference between them?"}, {"role": "assistant", "content": "What's the difference between them?\n\nA tag is a pointer to a specific commit. This pointer can be super charged with some additional information (identity of the creator of the tag, a description, a GPG signature, ...).\nA tag is a git concept whereas a Release is GitHub higher level concept.\nAs stated in the official announcement post from the GitHub blog: \"Releases are first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts.\"\nA Release is created from an existing tag and exposes release notes and links to download the software or source code from GitHub.\n\nUsing GitHub's API, I can't get the releases list, but I can get the tags list.\n\nThe current version of the GitHub API doesn't expose a way to manage Releases (create, update, ...). I'm pretty sure that this shouldn't take too long before it's exposed.\nHowever, it's currently possible to list the releases and tags of a specific repository.\nFor instance, the url below will list the 6 releases (as of today) from ReactiveUI\n\nhttps://api.github.com/repos/reactiveui/ReactiveUI/releases\n\nWhereas this one will list the 54 tags (as of today) from the same repository\n\nhttps://api.github.com/repos/reactiveui/ReactiveUI/tags\n\nCreating a release is currently in a process which involves a manual action (adding the release notes, uploading the packages, ...). This explains why tags are not transparently seen as Releases.\n\nIf you want to be notified of the API changes, you can subscribe to the GitHub API Changes blog.\nHowever, if you can't wait, the GitHub API home page states \"If you have any problems or requests please contact support.\". This can be done through an email to [email\u00a0protected] or this contact form.\nUpdate:\nThe GitHub API now allows to manipulate Releases. See the announcement."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Diff syntax highlighting in Github Markdown\n\nI'm writing documents that should explain code in C# using Markdown.\nI use the ```csharp to get csharp highlighting.\nI sometimes want to highlight something specific in the code using bold or anything.\nI know about <pre> etc... but it takes away my csharp highlighting.\nBest case scenario - some way to highlight code in the ```csharp section.\nNext best thing - I can write the code as diff - using + and - to highlight stuff, but how do I tell Github to highlight diff syntax with the red and green backcolor?\nIs there a way to use both diff and csharp syntax highlighting?"}, {"role": "assistant", "content": "Github's markdown supports diff when formatting code. For example:\n```diff\npublic class Hello1\n{\n   public static void Main()\n   {\n-      System.Console.WriteLine(\"Hello, World!\");\n+      System.Console.WriteLine(\"Rock all night long!\");\n   }\n}\n```\n\nOutput:\n\nand it should give you the Diff looks you are looking for, highlighting in red what has been removed and in green what has been added."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Switch to another Git tag\n\nHow do I check out version version/tag 1.1.4 of the rspec bundle?\ncd ~/Library/Application\\ Support/TextMate/Bundles/\ngit clone git://github.com/rspec/rspec-tmbundle.git RSpec.tmbundle\nosascript -e 'tell app \"TextMate\" to reload bundles'"}, {"role": "assistant", "content": "Clone the repository as normal:\ngit clone git://github.com/rspec/rspec-tmbundle.git RSpec.tmbundle\n\nThen checkout the tag you want like so:\ngit checkout tags/1.1.4\n\nThis will checkout out the tag in a 'detached HEAD' state. In this state, \"you can look around, make experimental changes and commit them, and [discard those commits] without impacting any branches by performing another checkout\".\nTo retain any changes made, move them to a new branch:\ngit checkout -b 1.1.4-jspooner\n\nYou can get back to the master branch by using:\ngit checkout master\n\nNote, as was mentioned in the first revision of this answer, there is another way to checkout a tag:\ngit checkout 1.1.4\n\nBut as was mentioned in a comment, if you have a branch by that same name, this will result in git warning you that the refname is ambiguous and checking out the branch by default:\nwarning: refname 'test' is ambiguous.\nSwitched to branch '1.1.4'\n\nThe shorthand can be safely used if the repository does not share names between branches and tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github permission denied: ssh add agent has no identities\n\nThis is my first time accessing GitHub and I'm not experienced using a console. I am on a MacBook using Bash. When I try to access GitHub, I get this:\ngit clone [email\u00a0protected]:dhulihan/league-of-legends-data-scraper.git\nCloning into 'league-of-legends-data-scraper'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nI've tried following the instructions on Github page about permission being denied.\nWhen I use ssh -vT [email\u00a0protected], I get the following:\nOpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011\ndebug1: Reading configuration data /etc/ssh_config\ndebug1: /etc/ssh_config line 20: Applying options for *\ndebug1: Connecting to github.com [192.30.252.129] port 22.\ndebug1: Connection established.\ndebug1: identity file /Users/XXXX/.ssh/id_rsa type -1\ndebug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1\ndebug1: identity file /Users/XXXX/.ssh/id_dsa type -1\ndebug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.2\ndebug1: Remote protocol version 2.0, remote software version libssh-0.6.0\ndebug1: no match: libssh-0.6.0\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug1: kex: server->client aes128-ctr hmac-sha1 none\ndebug1: kex: client->server aes128-ctr hmac-sha1 none\ndebug1: sending SSH2_MSG_KEXDH_INIT\ndebug1: expecting SSH2_MSG_KEXDH_REPLY\ndebug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48\ndebug1: Host 'github.com' is known and matches the RSA host key.\ndebug1: Found key in /Users/XXXX/.ssh/known_hosts:1\ndebug1: ssh_rsa_verify: signature correct\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: Roaming not allowed by server\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug1: Authentications that can continue: publickey\ndebug1: Next authentication method: publickey\ndebug1: Trying private key: /Users/XXXX/.ssh/id_rsa\ndebug1: Trying private key: /Users/XXXX/.ssh/id_dsa\ndebug1: No more authentication methods to try.\nPermission denied (publickey).\n\nNext, eval \"$(ssh-agent -s)\" returns \"Agent pid 2314\",\nhowever ssh-add -l returns \"The agent has no identities.\"\nAnd that is where I am stuck."}, {"role": "assistant", "content": "Full details in this answer. \nIn summary, when ssh-add -l returns \u201cThe agent has no identities\u201d, it means that keys used by ssh (stored in files such as ~/.ssh/id_rsa, ~/.ssh/id_dsa, etc.) are either missing, they are not known to ssh-agent, which is the authentication agent, or that their permissions are set incorrectly (for example, world\u00a0writable).\nIf your keys are missing or if you have not generated any, use ssh-keygen -t rsa, then ssh-add to add them.\nIf keys exist but are not known to ssh-agent (like if they are in a non-standard folder), use ssh-add /path/to/my-non-standard-ssh-folder/id_rsa to add\u00a0them.\nSee this answer if you are having trouble with ssh-add or\u00a0ssh-agent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Put current changes in a new Git branch [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMove existing, uncommitted work to a new branch in Git\n\n                                (14 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI've been editing some modules on the master branch but I haven't committed them. I'm now thinking that these changes should really be on an experimental branch and not the master branch.\nHow can I get these edits into an experimental branch? Copy them to some temp location, create the branch, and then copy them back in?\nAnd how do I configure things so that when I do a git push from the new experimental branch it will it go into a branch of the same name in my GitHub repo?"}, {"role": "assistant", "content": "You can simply check out a new branch, and then commit:\ngit checkout -b my_new_branch\ngit commit\n\nChecking out the new branch will not discard your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git credential helper - update password\n\nI'm currently using GitHub over HTTPS and have the latest version of Git installed (1.9.0) along with the Git credential helper on Windows 7.\nOn setting up my environment, I told git-credentials to permanently remember my username and password.\nI've recently updated my GitHub password via the website and I'm now no longer able to push/pull/fetch, etc. \nHow I would go about updating my password on git-credentials helper on Windows 7?"}, {"role": "assistant", "content": "None of these answers ended up working for my Git credential issue. Here is what did work if anyone needs it (I'm using Git 1.9 on Windows 8.1).\nTo update your credentials, go to Control Panel \u2192 Credential Manager \u2192 Generic Credentials. Find the credentials related to your Git account and edit them to use the updated password.\nReference: How to update your Git credentials on Windows\nNote that to use the Windows Credential Manager for Git you need to configure the credential helper like so:\ngit config --global credential.helper wincred\n\nIf you have multiple GitHub accounts that you use for different repositories, then you should configure credentials to use the full repository path (rather than just the domain, which is the default):\ngit config --global credential.useHttpPath true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to put a label on an issue in GitHub if you are not a contributor / owner?\n\nI've submitted an issue for a project on GitHub which is not mine and I'm not a contributor, but I cannot find a way to label my issue. Is there a way for me to label it, or is this only available for contributors?"}, {"role": "assistant", "content": "It's only available for contributors.\nThis way, you can avoid random people assigning the wrong labels and messing up your categories.\nIt would however be useful if you could in some manner propose labels. Then you could mark an issue as what you think is a bug, so the owner can just confirm that. Many people suggest labels in the title: [proposed Label] actual title"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Private pages for a private Github repo\n\nCouldn't find anything in the github documentation and also here on SO. But I was wondering if there could be a http://foo.github.com for a private repository named foo which is accessible only one had access to the foo repository itself.\nI remember having read something about github pages always being public but can't seem to find that anymore.\nAnd surprisingly, I can't seem to find anyone else asking the question either."}, {"role": "assistant", "content": "I had raised a support ticket against Github and got a response confirming the fact that ALL pages are public. I've now requested them to add a note to help.github.com/pages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see all the issues I'm watching on Github?\n\nGithub has a great feature where you can \"watch\" an issue. This is handy for getting notifications about progress on that issue.\nHowever, sometimes you want to find the status of an issue you know you've flagged to watch, but can't remember what it was. This is particularly interesting, imho, for projects that are not your own projects. E.g. watching a bug in a library that your project uses but you don't contribute to frequently.\nWhat I tried: Note that this is different from watching a repo. I tried searching github help (for \"watch issue\" and \"subscribe issue\" with no luck. I read the Unsubscribing from Conversations with some hope, but it didn't quite apply. While looking at the issues for the repository that I (think! I) subscribed to, I tried the various search criteria dropdowns with no luck. Last but not least, I read how to subscribe here at SO in case it mentioned how to see the subscribed list.\nTo those who might flag this as not being about programming, I can only ask for a better place to put this? As Github is a commonly used programming tool, I view this as highly relevant."}, {"role": "assistant", "content": "You can see all the GitHub issues you are currently subscribed to at https://github.com/notifications/subscriptions\nYou can navigate to this page from any page by clicking the notification/bell icon on the top right and then selecting \"Manage notifications\" > \"Subscriptions\" from the left menu panel."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Find a Pull Request on GitHub where a commit was originally created\n\nPull Requests are great for understanding the larger thinking around a change or set of changes made to a repo. Reading pull requests are a great way to quickly \"grok\" a project as, instead of small atomic changes to the source, you get larger groupings of logical changes. Analogous to organizing the lines in your code into related \"stanzas\" to make it easier to read.\nI find myself looking at a file or a commit, and I wonder if there is a way to backtrack the commit to the Pull Request that originally created it. That Pull Request would have been merged eventually, but not necessary with a merge-commit."}, {"role": "assistant", "content": "You can just go to GitHub and enter the SHA into the search bar, make sure you select the \"Issues\" link on the left.\nUPDATED 13 July 2017\nVia the GitHub UI there is a now a really easy way to do this. If you are looking at a commit in the list of commits in a branch in the UI, click on the link to the commit itself. If there is a PR for that commit and it wasn't added directly to the branch, a link to the PR listing the PR number and the branch it went into will be directly under the commit message at the top of the page.\n\n\n\nIf you have the commit SHA and nothing else and don't want to go digging around for it, just add /commit/[commit SHA] to the repo url, and you will see the commit page, with the PR link if it exists.\nFor example, if the SHA is 52797a7a3b087231e4e391e11ea861569205aaf4 and the repo is https://github.com/glimmerjs/glimmer-vm , then go to https://github.com/glimmerjs/glimmer-vm/commit/52797a7a3b087231e4e391e11ea861569205aaf4"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Updates were rejected because the remote contains work that you do not have locally.\" after creating a new repository on GitHub\n\nI created a new repo, cloned it, added files to the directory, added them with add -A, committed changes, and when I try to push using git push <repo name> master I get:\n\nhint: Updates were rejected because the remote contains work that you do not have locally. This is usually caused by another repository pushing to the same ref. You may want to first merge the remote changes (e.g.,\nhint: 'git pull') before pushing again.\n\nThis doesn't seem to make sense since it's a new repo and contains only a readme file."}, {"role": "assistant", "content": "This happens if you initialized a new github repo with README and/or LICENSE file\ngit remote add origin [//your github url]\n\n//pull those changes\n\ngit pull origin main \n\n// or optionally, 'git pull origin main --allow-unrelated-histories' if you have initialized repo in github and also committed locally\n\n//now, push your work to your new repo\n\ngit push origin main\n\nNow you will be able to push your repository to github. Basically, you have to merge those new initialized files with your work. git pull fetches and merges for you. You can also fetch and merge if that suits you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Clone with OAuth Access Token\n\nInside a script I am trying to clone a GitHub repository with an OAuth token.\nAccording to this tutorial:\nhttps://github.com/blog/1270-easier-builds-and-deployments-using-git-over-https-and-oauth\nI should be able to build a command for it like this:\ngit clone https://<token>@github.com/owner/repo.git\n\nIf I try this manually with a proper access token, it still asks for my password.\nIf I try it on the commandline I am simply getting a repository not found error.\nThe article is from 2012 and I cannot find any API documentation for this. So I am wondering if this still works."}, {"role": "assistant", "content": "Just use the HTTPS address to clone with the key as the user, so:\ngit clone https://oauth2:[email\u00a0protected]/username/repo.git\n\nor\ngit clone https://username:[email\u00a0protected]/username/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push existing project into Github\n\nI have a folder with my project sources. How I can push this project into Github's repository? \nI tried using this steps:\n\nI created empty repository on GitHub. \nI run git-bash and typed git init, so inside project root appeared .git folder. \nI added some files to version control using git add sourcesFolderName\nI committed files added in previous step using git commit -m \"initial commit\"\nI specified remote repository using git remote add MyProject <url>\nFinally git push, but nothing is pushed to remote repo... (no authorization failure)\n\nSo how I can push existing sources into newly created github repo?"}, {"role": "assistant", "content": "git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin <project url>\ngit push -f origin master\n\nThe -f option on git push forces the push. If you don't use it, you'll see an error like this:\nTo [email\u00a0protected]:roseperrone/project.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to '[email\u00a0protected]:roseperrone/project.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first merge the remote changes (e.g.,\nhint: 'git pull') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove a modified file from pull request\n\nI have 3 modified files (no new files) in a pull request at the moment. \nI would like to remove one of those files from the pull request, so that the pull request only contains changes to two files and leaves the third in its original, untouched state. \nI have tried a couple things (checking out the original version of the file, etc...) but it still shows as a changed file in the PR.\nIs there a solution to this?"}, {"role": "assistant", "content": "Switch to the branch from which you created the pull request:\n$ git checkout pull-request-branch\n\nOverwrite the modified file(s) with the file in another branch, let's consider it's master:\ngit checkout origin/master -- src/main/java/HelloWorld.java\n\nCommit and push it to the remote:\ngit commit -m \"Removed a modified file from pull request\"\ngit push origin pull-request-branch\n\n\nReference:\nSee git checkout docs:\ngit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>\u2026\u200b\n\n\nOverwrite the contents of the files that match the pathspec. When the <tree-ish> (most often a commit) is not given, overwrite working tree with the contents in the index. When the <tree-ish> is given, overwrite both the index and the working tree with the contents at the <tree-ish>.\n\nAnything within [] is optional. In our case, we want to overwrite   items identified by a specific pathspec with its respective content at a different branch/commit/tag"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using an image caption in Markdown Jekyll\n\nI am hosting a Jekyll Blog on Github and write my posts with Markdown. When I am adding images, I do it the following way:\n![name of the image](http://link.com/image.jpg)\nThis then shows the image in the text. \nHowever, how can I tell Markdown to add a caption which is presented below or above the image?"}, {"role": "assistant", "content": "I know this is an old question but I thought I'd still share my method of adding image captions. You won't be able to use the caption or figcaption tags, but this would be a simple alternative without using any plugins.\nIn your markdown, you can wrap your caption with the emphasis tag and put it directly underneath the image without inserting a new line like so:\n![](path_to_image)\n*image_caption*\n\nThis would generate the following HTML:\n<p>\n    <img src=\"path_to_image\" alt>\n    <em>image_caption</em>\n</p>\n\nThen in your CSS you can style it using the following selector without interfering with other em tags on the page:\nimg + em { }\n\nNote that you must not have a blank line between the image and the caption because that would instead generate:\n<p>\n    <img src=\"path_to_image\" alt>\n</p>\n<p>\n    <em>image_caption</em>\n</p>\n\nYou can also use whatever tag you want other than em. Just make sure there is a tag, otherwise you won't be able to style it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find the created date of a repository project on GitHub?\n\nHow can I find the created date of a project on GitHub? \nBasically, I have to find the first commit to see the created date, however, some projects have 500 commits, which wastes a lot of time trying to get to the first commit page.\nIs there a quicker way to get the created date?"}, {"role": "assistant", "content": "How can I find the created date of a project on GitHub?\n\nUse the Repos GitHub API to retrieve this information\n\nSyntax: https://api.github.com/repos/{:owner}/{:repository}\nExample: https://api.github.com/repos/libgit2/libgit2sharp\n\nThe JSON payload will expose a created_at member with the UTC date the repository was created.\nConsidering the LibGit2Sharp repository above, one can see that it's been created on Feb, 2nd 2011 at 16:44:49 UTC.\nNote: The created_at won't necessarily reflect the date of the first commit. It's the date the repository has been created on GitHub. For instance, the xunit/resharper-xunit project was recently moved from codeplex to GitHub. The created_at date is 2014-05-01T11:17:56Z, but the most of the commits date back much more farther than that."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Only run job on specific branch with GitHub Actions\n\nI'm relatively new to GitHub Actions and I have 2 jobs\u2013one that runs my tests, and one that deploys my project onto a server.\nObviously I want the tests to run on every branch, but deploying should only happen when something gets pushed to master.\nI'm struggling to find a way to run a job on a specific branch. I know it's possible to only run entire workflows on a specific branch, however that would mean I would have a \"test\" workflow and a \"deploy\" workflow. \nThis sounds like a solution, however they would run parallel. In an ideal world, the tests would run first, and only if they succeed, then the deploy job would start. This isn't the case when using 2 separate workflows.\nHow would I be able to achieve this? Is it possible to run jobs on a specific branch?"}, {"role": "assistant", "content": "In a recent update you can now put if conditionals at job level. See the documentation here. https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idif\nI tested this workflow which runs the job test on every push, but only runs deploy on the master branch.\nname: my workflow\non: push\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Execute tests\n        run: exit 0\n  deploy:\n    runs-on: ubuntu-latest\n    needs: test\n    if: github.ref == 'refs/heads/master'\n    steps:\n      - name: Deploy app\n        run: exit 0\n\nWhat follows is my original answer, and an alternative solution if you prefer to have separate workflows.\nThe first workflow runs for every branch except master. In this workflow you run tests only.\non:\n  push:\n    branches:\n      - '*'\n      - '!master'\n\nThe second workflow runs for just master and runs both your tests and deploys if the tests were successfully passed.\non:\n  push:\n    branches:\n      - master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undo a merge by pull request?\n\nSomeone accepted a pull request which they shouldn't have. Now we have a bunch of broken code merged in. How do you undo a pull request? I was just going to revert the changes to the commit just before the merge, but I noticed that it merged in a bunch of commits. So now there are all these commits from this person from days before the merge. How do you undo this?"}, {"role": "assistant", "content": "There is a better answer to this problem, though I could just break this down step-by-step. \nYou will need to fetch and checkout the latest upstream changes like so, e.g.:\ngit fetch upstream\ngit checkout upstream/master -b revert/john/foo_and_bar\n\nTaking a look at the commit log, you should find something similar to this:\n\ncommit b76a5f1f5d3b323679e466a1a1d5f93c8828b269\nMerge: 9271e6e a507888\nAuthor: Tim Tom <[email\u00a0protected]>\nDate:   Mon Apr 29 06:12:38 2013 -0700\n\n    Merge pull request #123 from john/foo_and_bar\n\n    Add foo and bar\n\ncommit a507888e9fcc9e08b658c0b25414d1aeb1eef45e\nAuthor: John Doe <[email\u00a0protected]>\nDate:   Mon Apr 29 12:13:29 2013 +0000\n\n    Add bar\n\ncommit 470ee0f407198057d5cb1d6427bb8371eab6157e\nAuthor: John Doe <[email\u00a0protected]>\nDate:   Mon Apr 29 10:29:10 2013 +0000\n\n    Add foo\n\n\nNow you want to revert the entire pull request with the ability to unrevert later.\nTo do so, you will need to take the ID of the merge commit.\nIn the above example the merge commit is the top one where it says \"Merged pull request #123...\".\nDo this to revert the both changes (\"Add bar\" and \"Add foo\") and you will end up with in one commit reverting the entire pull request which you can unrevert later on and keep the history of changes clean:\ngit revert -m 1 b76a5f1f5d3b323679e466a1a1d5f93c8828b269"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does 'git commit' not save my changes?\n\nI did a git commit -m \"message\" like this:\n> git commit -m \"save arezzo files\"\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   arezzo.txt\n#       modified:   arezzo.jsp\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nBut afterwards, when I do git status it shows the same modified files:\n> git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   arezzo.txt\n#       modified:   arezzo.jsp\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nWhat am I doing wrong?"}, {"role": "assistant", "content": "As the message says:\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nGit has a \"staging area\" where files need to be added before being committed, you can read an explanation of it here.\n\nFor your specific example, you can use:\ngit commit -am \"save arezzo files\"\n\n(note the extra a in the flags, can also be written as git commit -a -m \"message\" - both do the same thing)\nAlternatively, if you want to be more selective about what you add to the commit, you use the git add command to add the appropriate files to the staging area, and git status to preview what is about to be added (remembering to pay attention to the wording used).\nYou can also find general documentation and tutorials for how to use git on the git documentation page which will give more detail about the concept of staging/adding files.\n\nOne other thing worth knowing about is **[interactive staging](https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging)** - this allows you to add _parts of a file_ to the staging area, so if you've made three distinct code changes (for related but different functionality), you can use interactive mode to split the changes and add/commit each part in turn. Having smaller specific commits like this can be helpful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Notifications for new Github project releases? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm using a library from a Github project. Is there some way to set up a notification for new project releases?\nFor example, I want to know when a new release appears here\nI know I can be notified on every issue update, but that's not what I'm looking for. Though I see some projects are using that as a way to keep people notified"}, {"role": "assistant", "content": "Don't know about email, but you can subscribe to RSS Atom feed with releases:\nhttps://github.com/dropbox/dropbox-js/releases.atom\nor tags:\nhttps://github.com/dropbox/dropbox-js/tags.atom\n\nEDIT:\nTo get notification via email you can use Sibbell.com or RSS-to-email service like Blogtrottr."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix HTTP 404 on Github Pages?\n\nHere is my GitHub repository on the gh-pages branch.\nEverything looks good, I have my index.html, my CSS, JS and pictures folders.\nBut when I access http://roine.github.com/p1 I get HTTP 404 not found.\nAny explanation and solution?"}, {"role": "assistant", "content": "I had just one commit with all my files. I pushed an empty commit, refreshed the page and it worked.\ngit commit --allow-empty -m \"Trigger rebuild\"\ngit push\n\nIf this doesn't work, as @Hendrikto pointed out in the comments, check out the Github status page and make sure GitHub Pages are operational."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone all repos at once from GitHub?\n\nI have a company GitHub account and I want to back up all of the repositories within, accounting for anything new that might get created for purposes of automation. I was hoping something like this:\ngit clone [email\u00a0protected]:company/*.git \n\nor similar would work, but it doesn't seem to like the wildcard there. \nIs there a way in Git to clone and then pull everything assuming one has the appropriate permissions?"}, {"role": "assistant", "content": "Simple script using GitHub CLI (no API keys)\nHere's a simple solution using the official GitHub CLI tool, gh - no need for API keys and can handle up to 4,000 private repos.\nFirst time only: log in with gh for private repos, and follow the prompts:\ngh auth login\n\nNow you can clone thousands of repos under a new ./myorgname folder. Replace myorgname with your org name:\ngh repo list myorgname --limit 4000 | while read -r repo _; do\n  gh repo clone \"$repo\" \"$repo\"\ndone\n\nThe default limit is 30.\nThis should work on Mac or Linux.\nFor Windows:\n\nRun this bash script in Git Bash, part of Git for Windows - or in WSL\nOr try the comment here by @Karson for a similar script in PowerShell\n\nSetup\nTo get the GitHub CLI tool:\n\nMac - brew install gh\nLinux or Windows - see GitHub install guide\n\nFuture proofing: the GitHub CLI tool will be supported long-term as and when the GitHub API changes.  Some older answers here don't work any more due to this.\nOptional: update existing checkouts\nTo update repo folders already on disk, as well as clone new repos, the script needs to check for failure of the gh repo clone, like this:\ngh repo list myorgname --limit 1000 | while read -r repo _; do\n  gh repo clone \"$repo\" \"$repo\" -- -q 2>/dev/null || (\n    cd \"$repo\"\n    # Handle case where local checkout is on a non-main/master branch\n    # - ignore checkout errors because some repos may have zero commits, \n    #\u00a0so no main or master\n    git checkout -q main 2>/dev/null || true\n    git checkout -q master 2>/dev/null || true\n    git pull -q\n  )\ndone\n\nTips\n\nDon't want to create repos in the ./myorgname folder?  Drop the second \"$repo\" argument to gh repo clone to create them in the current directory\n\nTo filter results:\n\n--no-archived - omit archived repositories\n--source - show only non-forks\n\nTip: Handling thousands of repos\nThis script works with up to about 4,000 repos - see @Ryan Fisher comment below, and comment with your results.\nThe gh repo list command uses the GitHub Search API, which is paginated when returning many results.  There is a limit of 4,000 on the number of repos that can be searched.\nTo work around any limits:\n\ncheck the gh repo list command is returning what you expect\nmake sure you are omitting archived and forked repos\nsee gh repo list --help to filter by language, topic, etc\n\nOr you can use a different answer (based on API requests) that replaces the gh repo list command or the whole script.\nTip: Faster cloning for many repos\nIf you are cloning a large number of repos, you can speed up this script with GNU parallel.\ngh repo list <ORG_NAME> --limit <LIMIT> --json nameWithOwner --jq '.[].nameWithOwner' | \\\n   parallel -j<JOBS> gh repo clone\n\nThis uses gh's internal jq library, rather than a standalone jq.\nIf you are using the \"update existing checkouts\" option above, you will need to merge this into the above script - perhaps putting the loop contents into a separate bash -c \"...\" command under parallel.\nYou can also use xargs -P to clone repos in parallel - see this answer.\nBackground\n\nGitHub CLI login doc\nScript commands above were derived from an issue comment and gist by davegallant\nGNU parallel script contributed by @RyanFisher"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Heroku and GitHub: \"Items could not be retrieved, Internal server error\"\n\nThis post relates to a rapidly changing event.\n                                \n                            \n\n\n\n\n\n\nI simply want to connect to my GitHub account. When I do it, I get this error message as a small red pop up on the upper right side of the page:\n\nItems could not be retrieved, Internal server error."}, {"role": "assistant", "content": "As of May 25, 2022, at 19:52 UTC, GitHub integration has been re-enabled:\n\nWe are happy to report that the GitHub integration is re-enabled! You can now reconnect with GitHub and restore your Heroku pipeline functionality, including Review Apps, with newly generated tokens.\nYou can connect to GitHub immediately or wait for the enhanced integration as described in this blog post. To re-establish your GitHub connection now, please follow these instructions.\n\nHere is what the referenced blog post says about \"enhanced integration\":\n\nIn an effort to improve the security model of the integration, we are exploring additional enhancements in partnership with GitHub, which include moving to GitHub Apps for more granular permissions and enabling RFC8705 for better protection of OAuth tokens. As these enhancements require changes by both Heroku and GitHub, we will post more information as the engagement evolves.\n\nNo timeline is mentioned for availability of the enhanced integration.\n\nBetween April 15 and May 25, 2022, Heroku's GitHub integration feature was disabled while Heroku investigated a security breach. During that time, deploying was still possible via other means, most notably via git push.\n\nTo mitigate impact from potentially compromised OAuth tokens, we will revoke over the next several hours all existing tokens from the Heroku GitHub integration. We are also preventing new OAuth tokens from being created until further notice. Your GitHub repositories will not be affected in any way by this action.\n\n\nWhich Heroku features have become non-operative due to the removal of the Heroku-GitHub integration?\n\nEnabling review apps\nCreating (automatic and manual) review apps\nDeploying (automatic and manual) review apps\nDeploying an app from GitHub (either manual or automatic)\nHeroku CI cannot create new runs (automatically or manually) or see GitHub branch list\nHeroku Button: unable to create button apps from private repositories\nChatOps: unable to deploy or get deploy notifications\nAny app with a GitHub integration may be affected by this issue. To address specific integration issues, please open a case with Heroku Support\n\n\nMigrating from GitHub deployment to Git deployment\nAt 2022-04-21 23:53 UTC, Heroku provided extended instructions for migrating from GitHub-based deployment to Git-based deployment:\n\nWhile our customers remain unable to reconnect to GitHub via the Heroku dashboard, we wanted to share a supplement to the code deployment methods previously provided. For instructions on how to change your deployment method from GitHub to Heroku Git, please refer to the following Help article: How to switch deployment method from GitHub to Heroku Git with all the changes/app code available in a GitHub repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I create a new GitHub repo from a branch in an existing repo?\n\nI have master and new-project branches. And now I'd like to create a brand new repo with its master based on the new-project branch.\nBackground: I have one repository which contains three independent applications. It didn't start out this way. There was originally just one app in the repo. Over time, however, business needs have changed. One app became two (a legacy version and a re-write.) A web service was added. Separate branches were used to contain the three projects. However, they don't share any code. And so it'd be simpler to have them split out into their own repos."}, {"role": "assistant", "content": "I started with @user292677's idea, and refined it to solve my problem:\n\nCreate the new-repo in github.\ncd to your local copy of the old repo you want to extract from, which is set up to track the new-project branch that will become the new-repo's master.\n$ git push https://github.com/accountname/new-repo.git +new-project:master \n\nThe new Github repo is finished. The result is;\n\na new Github repository named new-repo,\nwhose master corresponds to the old repo's new-project, with\nall history preserved.\n\nIn fact, I found that by using this method, I could create the new repo with a hand-picked selection of branches, renamed as I wanted:\n$ git push [email\u00a0protected]:accountname/new_repo +new-project:master +site3a:rails3\nThe result is that the pre-existing site3a branch is now also moved to the new repo and will appear as rails3. This works really well: the network diagram shows the new master and rails3 with full history and in their correct relationship to each other.\nUpdate 2013-12-07: Used this with another project, and verified that this recipe still works.\nUpdate 2018-01-11: Updated step 3. to use GitHub recommendation for https protocol. Recipe still works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to search for a particular filename on GitHub?\n\nI know that the GitHub web interface lets you search all repositories for files with a particular pathname (e.g. searching for path:/app/models/user.rb yields > 109k results), but is there a way to search all repositories for filenames independent of their subdirectory location?  I tried using asterisks in the path argument, and that didn't seem to work."}, {"role": "assistant", "content": "Does the search user.rb in:path do what you want to do? \nAlternatively there is also this search filename:user.rb\nFound on: https://help.github.com/articles/searching-code/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Include an SVG (hosted on GitHub) in MarkDown\n\nI know that an image can be placed in an MD with the MD syntax of either ![Alt text](/path/to/img.jpg) or ![Alt text](/path/to/img.jpg \"Optional title\"), but I am having difficulty placing an SVG in MD where the code is hosted on GitHub.\nUltimately using rails3, and changing the model frequently right now, so I am using RailRoady to generate an SVG of the schema diagram of the models.  I would like for that SVG to then be placed in the ReadMe.md, and be displayed.  When I open the SVG file locally, it does work, so how do I get the browser to render the SVG in the MD file?  Given that the code will be dynamic until it is finalized (seemingly never), hosting the SVG in a separate place seems overkill and that I am missing an approach to accomplish this.\nThe SVG I am trying to include is here on GitHub: https://github.com/specialorange/FDXCM/blob/master/Rails/fdxcm/doc/models_brief.svg\nI have tried the following, with an actual image as well to verify the syntax is working, just that the SVG code isn't being rendered:\n![Overview][1]\n[1]: https://github.com/specialorange/FDXCM/blob/master/doc/controllers_brief.svg  \"Overview\"\n\n<img src=\"https://raw.github.com/specialorange/FDXCM/master/doc/controllers_brief.svg\">\n\n![Alt text](https://raw.github.com/specialorange/FDXCM/master/doc/controllers_brief.svg)\n\n[Google Doc](https://docs.google.com/drawings/d/1B95ajItJTAImL2WXISX0fkBLYk3nldea4Vm9eo-VyE4/edit) :\n\n<img src=\"https://docs.google.com/drawings/pub?id=117XsJ1kDyaY-n8AdPS3_8jTgMyITqaoT3-ah_BSc9YQ&w=960&h=720\">\n\n<img src=\"https://raw.github.com/specialorange/FDXCM/master/doc/controllers_brief.svg\">\n\n<img src=\"https://docs.google.com/drawings/d/1B95ajItJTAImL2WXISX0fkBLYk3nldea4Vm9eo-VyE4/edit\">\n\nto get the results of:\n\n1: https://github.com/specialorange/FDXCM/blob/master/Rails/fdxcm/doc/controllers_brief.svg  \"Overview\"\n\n\n\nGoogle Doc :"}, {"role": "assistant", "content": "The purpose of raw.github.com is to allow users to view the contents of a file, so for text based files this means (for certain content types) you can get the wrong headers and things break in the browser.\nWhen this question was asked (in 2012) SVGs didn't work. Since then Github has implemented various improvements. Now (at least for SVG), the correct Content-Type headers are sent.\nThe easiest way to add SVG is to use the upload assets feature. To quote the manual:\n\nYou can upload assets like images by dragging and dropping, selecting from a file browser, or pasting. You can upload assets to issues, pull requests, comments, and .md files in your repository.\n\nSince 2022, \"images\" also includes SVG:\n\n\nSome comments regarding changes that happened along the way:\n\nGithub has implemented a feature which makes it possible for SVG's to be used with the Markdown image syntax. The SVG image will be sanitized and displayed with the correct HTTP header. Certain tags (like <script>) are removed.\nTo view the sanitized SVG or to achieve this effect from other places (i.e. from markdown files not hosted in repos on http://github.com/) simply append ?sanitize=true to the SVG's raw URL.\n\nAs stated by AdamKatz in the comments, using a source other than github.io can introduce potentially privacy and security risks. See the answer by CiroSantilli and the answer by DavidChambers for more details.\n\nThe issue to resolve this was opened on Github on October 13th 2015 and was resolved on August 31th 2017\n\nSupport for SVG drag-and-drop file upload was announced January 21 2022\n\n\nExamples\nAll of the ways stated below will work.\nI copied the SVG image from the question to a repo on github in order to create the examples below\nLinking to files using relative paths (Works, but obviously only on github.com / github.io)\nCode\n![Alt text](./controllers_brief.svg)\n<img src=\"./controllers_brief.svg\">\n\nResult\nSee the working example on github.com.\nLinking to RAW files\nCode\n![Alt text](https://raw.github.com/potherca-blog/StackOverflow/master/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg)\n<img src=\"https://raw.github.com/potherca-blog/StackOverflow/master/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg\">\n\nResult\n\n\nLinking to RAW files using ?sanitize=true\nCode\n![Alt text](https://raw.github.com/potherca-blog/StackOverflow/master/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg?sanitize=true)\n<img src=\"https://raw.github.com/potherca-blog/StackOverflow/master/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg?sanitize=true\">\n\nResult\n\n\nLinking to files hosted on github.io\nCode\n![Alt text](https://potherca-blog.github.io/StackOverflow/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg)\n<img src=\"https://potherca-blog.github.io/StackOverflow/question.13808020.include-an-svg-hosted-on-github-in-markdown/controllers_brief.svg\">\n\nResult"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference / relationship between GitHub Projects and Milestones?\n\nThe recent update to GitHub added something called Projects into the GitHub workflow, and because I don't have any particular experience with project tracking tools such as Jira or Trello (hey, at least I noticed the similarity), could anyone, please, elaborate on the (key) differences between GitHub's Milestones and the new Projects?\nIf I understand correctly, Milestones are a way of organizing issues into smaller \"sub-projects\" - smaller than the whole \"project\" (which, in my world view, is represented by the repository). When all issues are done/closed, the milestone can be regarded as complete.\nThe newly introduced Projects are also, as I see it, a way of organizing issues into smaller-than-the-repository \"sub-projects\" (albeit called Projects). I understand the workflow is supposed to be slightly different and more fine-grained than with \"mere\" Milestones.\nSo, are Projects something that supplements Milestones (or rather Milestones supplement Projects now?) or should I rather view Projects as a replacement of Milestones?\nWhere exactly do the Projects actually fall into the repository[-milestone]-issue hierarchy?\nSadly, GitHub's blog entry about the introduction of the Projects doesn't mention any relationship (https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features).\nI somehow feel there is one, but I can't put a finger on it."}, {"role": "assistant", "content": "I'm wondering the exact same thing. Here is what I came up with.\nFirst, let's review the main similarities and differences:\n\nAn issue can belong to multiple Projects, but only one Milestone.\nProjects are never complete. There is no progress bar, or deadline. Projects have no progress bar or deadline (they do now, though it is hidden inside the project's menu as a \"Track project progress\" checkmark, and there's no percentage calculation of progress), but can now be closed (as pointed out by @Sheen)\nMilestones on the other hand have all that, but lack any form of organization. An issue is either in a milestone, or isn't. (They can be ordered as pointed out by @Nick McCurdy)\nIssues can be filtered by Milestone, but not by Project. As pointed out by @cmonkey, issues can now be filtered by Project as well as Milestone.\nProjects can contain Notes (which can be converted as issues) so it doesn't pollute the issue tracker with vague ideas\nA Project can span over multiple Milestones, and a Milestone can contains parts of different Projects.\nAn Organization can have Projects as well. These projects can include tickets from any repository in the organization, which makes it quite useful.\n\nSo the way I see it, is that Projects are a completely separate way to visualize and organize your work on an higher level (think \"project management\", multiple teams, multiple repository, etc.), while Milestones are a way to organize your deadlines and releases on a more basic level (think \"release management\", \"versions\", etc.). With this in mind, it makes sense that an issue only belongs to one Milestone (it's only released or pushed to production once) but can be part of different Projects.\nI'm sure they are other ways to look at it though, and I'm interested to hear other opinions.\nEdit December 2017\nSome time ago, after working with Milestones and Projects for over a year, I realized there is another important aspect I had completely overlooked.\n\nMilestones is a tool for Scrum methodology. Milestones are good for timeboxed iterations and working in sprints with batches of issues.\nProjects is a tool for Kanban methodology. Projects are good for continuous delivery and steady flow of work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove commits from a pull request\n\nI did a pull request but after that I made some commits to the project locally which ended polluting my pull request, I tried to remove it but without any luck.\nI found some similar questions on StackOverflow but I can't apply what's in there.\nIt's my first pull request on GitHub so it's kinda strange to me how all of this works.\nThe highlighted commit is the one I need to keep and remove all the other stuff.\nIt becomes the fourth commit in the history because I make some merge stuff.\n\nmy git log\n\nCan someone please explain what's going on and how to fix this problem?"}, {"role": "assistant", "content": "People wouldn't like to see a wrong commit and a revert commit to undo  changes of the wrong commit. This pollutes commit history.\nHere is a simple way for removing the wrong commit instead of undoing changes with a revert commit.\n\ngit checkout my-pull-request-branch\n\ngit rebase -i HEAD~n // where n is the number of last commits you want to include in interactive\nrebase.\n\nReplace pick with drop for commits you want to discard.\n\nSave and exit.\n\ngit push --force-with-lease (safer force push, pointed out by @George)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to show math equations in general github's markdown(not github's blog)\n\nAfter investigating, I've found mathjax can do this. But when I write some example in my markdown file, it doesn't show the correct equations:\nI have added this in the head of markdown file:\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\nAnd type the mathjax statement:\n\\(E=mc^2\\)\uff0c$$x_{1,2} = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2b}.$$\n\nBut github shows nothing for the math symbols! Please help me, thanks!\nTell me how to show math symbols in github markdown pages."}, {"role": "assistant", "content": "But github show nothing for the math symbols! please help me, thanks!\n\nGitHub markdown parsing is performed by the SunDown (ex libUpSkirt) library.\nThe motto of the library is \"Standards compliant, fast, secure markdown processing library in C\". The important word being \"secure\" there, considering your question :).\nIndeed, allowing javascript to be executed would be a bit off of the MarkDown standard text-to-HTML contract.\nMoreover, everything that looks like a HTML tag is either escaped or stripped out.\n\nTell me how to show math symbols in general github markdown.\n\nYour best bet would be to find a website similar to yuml.me which can generate on-the-fly images from by parsing the provided URL querystring.\nUpdate\nI've found some sites providing users with such service: codedogs.com (no longer seems to support embedding) or iTex2Img.\nYou may want to try them out. Of course, others may exist and some Google-fu will help you find them.\ngiven the following markdown syntax\n![equation](http://www.sciweavers.org/tex2img.php?eq=1%2Bsin%28mc%5E2%29&bc=White&fc=Black&im=jpg&fs=12&ff=arev&edit=)\n\nit will display the following image\n\nNote: In order for the image to be properly displayed, you'll have to ensure the querystring part of the url is percent encoded. You can easily find online tools to help you with that task, such as www.url-encode-decode.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - fatal: could not read Username for 'https://github.com': No such file or directory\n\nI have the following problem when I try to pull code using git Bash on Windows:\nfatal: could not read Username for 'https://github.com': No such file or directory\n\nI already tried to implement the accepted solution provided here:\n\nError when push commits with Github: fatal: could not read Username\n\nHowever the problem still persists.\nAfter adding/removing origin I still get the same error.\nCould advise on this issue?\nThanks!"}, {"role": "assistant", "content": "Follow the steps to setup SSH keys here: https://help.github.com/articles/generating-ssh-keys\nOR\ngit remote add origin https://{username}:{password}@github.com/{username}/project.git\n\nUpdate: If you get \"fatal: remote origin already exists.\" then you have to use set-url:\ngit remote set-url origin https://{username}:{password}@github.com/{username}/project.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete the last n commits on Github and locally?\n\nI'm trying to delete the last 2 commits from one of my GitHub repositories. I've tried as suggested here : git push -f origin HEAD^^:master. It seems that it works, as the last two commits are removed.\nThen I deleted them from my local repository with git rebase -i HEAD~2. I remove the lines that are related to those commits, and check with git log that they are correctly removed.\nAfter that, I make some changes in my local repository, make a new commit, and push to GitHub. The problem is that, in my GitHub account, I have the previous two commits that I've tried to delete.\nI think the problem is in my local repository, because if I clone my Github repository to my local and make some changes here, when I push a new commit those old commits aren't pushed to GitHub."}, {"role": "assistant", "content": "To remove the last two commits locally I'd suggest using:\ngit reset --hard HEAD^^\n\nRebase is a completely different operation that won't help you here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the meaning of the /dist directory in open source projects?\n\nSince I first saw a dist/ directory in many open source projects, usually on GitHub, I've been wondering what it means.\nWith dist, vendor, lib, src, and many other folder names that we see quite often, I sometimes wonder how I should name my own folders.\nCorrect me if I'm wrong!\n\nsrc: Contains the sources. Sometimes only the pure sources, sometimes with the minified version, depends on the project.\nvendor: Contains other dependencies, like other open source projects.\nlib: Good question, it's really close to vendor actually, depending on the project we can see one or another or both...\ndist: From what I saw, it contains the \"production\" files, the one we should use if we want to use the library.\n\nWhy is open source so confusing? Isn't it possible to do things clearer? At least per language because some languages use specific names."}, {"role": "assistant", "content": "To answer your question:\n/dist means \"distributable\", the compiled code/library.\nFolder structure varies by build system and programming language. Here are some standard conventions:\n\nsrc/: \"source\" files to build and develop the project. This is where the original source files are located, before being compiled into fewer files to dist/, public/ or build/.\n\ndist/: \"distribution\", the compiled code/library, also named public/ or build/. The files meant for production or public use are usually located here.\nThere may be a slight difference between these three:\n\nbuild/: is a compiled version of your src/ but not a production-ready.\ndist/: is a production-ready compiled version of your code.\npublic/: usually used as the files runs on the browser. which it may be the server-side JS and also include some HTML and CSS.\n\n\nassets/: static content like images, video, audio, fonts etc.\n\nlib/: external dependencies (when included directly).\n\ntest/: the project's tests scripts, mocks, etc.\n\nnode_modules/: includes libraries and dependencies for JS packages, used by Npm.\n\nvendor/: includes libraries and dependencies for PHP packages, used by Composer.\n\nbin/: files that get added to your PATH when installed.\n\n\nMarkdown/Text Files:\n\nREADME.md: A help file which addresses setup, tutorials, and documents the project. README.txt is also used.\nLICENSE.md: any rights given to you regarding the project. LICENSE or LICENSE.txt are variations of the license file name, having the same contents.\nCONTRIBUTING.md: how to help out with the project. Sometimes this is addressed in the README.md file.\n\nSpecific (these could go on forever):\n\npackage.json: defines libraries and dependencies for JS packages, used by Npm.\npackage-lock.json: specific version lock for dependencies installed from package.json, used by Npm.\ncomposer.json: defines libraries and dependencies for PHP packages, used by Composer.\ncomposer.lock: specific version lock for dependencies installed from composer.json, used by Composer.\ngulpfile.js: used to define functions and tasks to be run with Gulp.\n.travis.yml: config file for the Travis CI environment.\n.gitignore: Specification of the files meant to be ignored by Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I diff two branches in GitHub?\n\nI am just wondering if there is a way to simply diff two branches in GitHub? I know GitHub has capacity to do it because when we do code-reviews it does list out all the diffs nicely. I was just wondering if there is a way to do it without any code review to compare say Branch to Branch or Commit to Commit? So that when I push something to my remote branch and I want to see how my diffs are going to look like BEFORE it create a PR then it can be very helpful.\nI can always be in console and do git diff but that is really not as nice and visually clear as how it shows up in web UI of GitHub. Any ideas?"}, {"role": "assistant", "content": "Use the compare feature to accomplish this.\n\nTo compare different versions of your repository, append /compare to your repository's path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatic TOC in github-flavoured-markdown\n\nIs it possible to generate an automatic Table of Contents using Github Flavoured Markdown?"}, {"role": "assistant", "content": "I created two options to generate a toc for github-flavored-markdown:\nDocToc Command Line Tool (source) requires node.js\nInstallation:\nnpm install -g doctoc\nUsage:\ndoctoc . to add table of contents to all markdown files in the current and all sub directories.\nDocToc WebApp\nIf you want to try it  online first, go to the doctoc site,\npaste the link of the markdown page and it will generate a table of\ncontent that you can insert at the top of your markdown file.\nGithub Wikis and Anchors\nAs Matthew Flaschen pointed out in the comments below, for its wiki pages GitHub previously didn't generate the anchors that doctoc depends on.\nUPDATE: However, they fixed this issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are some good ways to manage a changelog using Git? [closed]\n\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 3 years ago.\n\n\nThe community reviewed whether to reopen this question 4 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI've been using Git for a while now, and I recently started using it to tag my releases so that I could more easily keep track of changes and be able to see which version each of our clients is running (unfortunately the code currently mandates that each client have their own copy of the PHP site; I'm changing this, but it's slow-going).\nIn any case, we're starting to build some momentum, and I thought it would be really good to be able to show people what has changed since the last release. The problem is, I haven't been maintaining a changelog, because I don't have a good idea of how to go about it. For this particular time, I can run through the log and manually create one, but that will get tiring very quickly.\nI tried googling \"git changelog\" and \"git manage changelog\", but I didn't find anything that really talked about the workflow of code changes and how that coincides with the changelog. We're currently following Rein Henrichs' development workflow and I would love something that went along with that.\nIs there a standard approach that I am missing, or is this an area where everybody does their own thing?"}, {"role": "assistant", "content": "This was in 2015, but for the sake of future searchers, it's now possible to generate gorgeous logs with:\ngit log --oneline --decorate\n\nOr, if you want it even prettier (with color for the terminal):\ngit log --oneline --decorate --color\n\nPiping that output to ChangeLog is what I currently use in all my projects, and it's simply amazing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a link to GitHub for downloading a file in the latest release of a repository?\n\nUsing GitHub's Release feature, it is possible to provide a link to download a specific version of the published software. However, every time a release is made, the gh-page also needs to be updated.\nIs there a way to get a link to a specific file of whatever the latest version of a software is?\ne.g., this would be a static link:\nhttps://github.com/USER/PROJECT/releases/download/v0.0.0/package.zip\nWhat I'd like is something like:\nhttps://github.com/USER/PROJECT/releases/download/latest/package.zip\n\nNOTE: The difference between this question and\n  GitHub latest release is\n  that this question specifically asks for getting access to the file,\n  not the GitHub latest release page"}, {"role": "assistant", "content": "A few years late, but I just implemented a simple redirect to support https://github.com/USER/PROJECT/releases/latest/download/package.zip. That should redirected to the latest tagged package.zip release asset. Hope it's handy!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Force LF eol in git repo and working copy\n\nI have a git repository hosted on github. Many of the files were initially developed on Windows, and I wasn't too careful about line endings. When I performed the initial commit, I also didn't have any git configuration in place to enforce correct line endings. The upshot is that I have a number of files with CRLF line endings in my github repository.\nI'm now developing partially on Linux, and I'd like to clean up the line endings. How can I ensure the files are stored correctly with LF on github, and have LF in my working copy?\nI've set up a .gitattributes file containing text eol=LF; is that correct? With that committed and pushed, can I just rm my local repo and re-clone from github to get the desired effect?"}, {"role": "assistant", "content": "Without a bit of information about what files are in your repository (pure source code, images, executables, ...), it's a bit hard to answer the question :)\nBeside this, I'll consider that you're willing to default to LF as line endings in your working directory because you're willing to make sure that text files have LF line endings in your .git repository wether you work on Windows or Linux. Indeed better safe than sorry....\nHowever, there's a better alternative: Benefit from LF line endings in your Linux workdir, CRLF line endings in your Windows workdir AND LF line endings in your repository.\nAs you're partially working on Linux and Windows, make sure core.eol is set to native and core.autocrlf is set to true.\nThen, replace the content of your .gitattributes file with the following\n* text=auto\n\nThis will let Git handle the automagic line endings conversion for you, on commits and checkouts. Binary files won't be altered, files detected as being text files will see the line endings converted on the fly.\nHowever, as you know the content of your repository, you may give Git a hand and help him detect text files from binary files.\nProvided you work on a C based image processing project, replace the content of your .gitattributes file with the following\n* text=auto\n*.txt text\n*.c text\n*.h text\n*.jpg binary\n\nThis will make sure files which extension is c, h, or txt will be stored with LF line endings in your repo and will have native line endings in the working directory. Jpeg files won't be touched. All of the others will be benefit from the same automagic filtering as seen above.\nIn order to get a get a deeper understanding of the inner details of all this, I'd suggest you to dive into this very good post \"Mind the end of your line\" from Tim Clem, a Githubber.\nAs a real world example, you can also peek at this commit where those changes to a .gitattributes file are demonstrated.\nUPDATE to the answer considering the following comment\n\nI actually don't want CRLF in my Windows directories, because my Linux environment is actually a VirtualBox sharing the Windows directory\n\nMakes sense. Thanks for the clarification. In this specific context, the .gitattributes file by itself won't be enough.\nRun the following commands against your repository\n$ git config core.eol lf\n$ git config core.autocrlf input\n\nAs your repository is shared between your Linux and Windows environment, this will update the local config file for both environment. core.eol will make sure text files bear LF line endings on checkouts. core.autocrlf will ensure potential CRLF in text files (resulting from a copy/paste operation for instance) will be converted to LF in your repository.\nOptionally, you can help Git distinguish what is a text file by creating a .gitattributes file containing something similar to the following:\n# Autodetect text files\n* text=auto\n\n# ...Unless the name matches the following\n# overriding patterns\n\n# Definitively text files \n*.txt text\n*.c text\n*.h text\n\n# Ensure those won't be messed up with\n*.jpg binary\n*.data binary\n\nIf you decided to create a .gitattributes file, commit it.\nLastly, ensure git status mentions \"nothing to commit (working directory clean)\", then perform the following operation\n$ git checkout-index --force --all\n\nThis will recreate your files in your working directory, taking into account your config changes and the .gitattributes file and replacing any potential overlooked CRLF in your text files.\nOnce this is done, every text file in your working directory WILL bear LF line endings and git status should still consider the workdir as clean."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I publish an npm package with distribution files?\n\nI would like to publish a npm package that contains my source as well as distribution files. My GitHub repository contains src folder which contains JavaScript source files. The build process generates dist folder that contains the distribution files. Of course, the dist folder is not checked into the GitHub repository.\nHow do I publish a npm package in a way that when someone does npm install, they get src as well as dist folder? Currently when I run npm publish from my Git repository, it results in only the src folder being published.\nMy package.json file looks like this:\n{\n  \"name\": \"join-js\",\n  \"version\": \"0.0.1\",\n  \"homepage\": \"https://github.com/archfirst/joinjs\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/archfirst/joinjs.git\"\n  },\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"test\": \"gulp\",\n    \"build\": \"gulp build\",\n    \"prepublish\": \"npm run build\"\n  },\n  \"dependencies\": {\n    ...\n  },\n  \"devDependencies\": {\n    ...\n  }\n}"}, {"role": "assistant", "content": "When you npm publish, if you don't have an .npmignore file, npm will use your .gitignore file (in your case you excluded the dist folder).\nTo solve your problem, create a .npmignore file based on your .gitignore file, without ignoring the dist folder.\nSource: Keeping files out of your Package"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Linking to other Wiki pages on GitHub?\n\nGitHub wikis allow you to link to other pages in the wiki like so:\n[[Wiki Page Name]]\n\nHowever, I want to display different text than the wiki page name when making the link. Is there a way to do this? Am I linking to wiki pages all wrong?"}, {"role": "assistant", "content": "Using the Markdown link syntax\n[Link Text](WikiPage)\n\nseems to work in the edit preview but not on the actual wiki page. At least for me the generated link is WikiPage instead of wiki/WikiPage and I get the famous GitHub 404.\nHowever the MediaWiki syntax\n[[Link Text|WikiPage]]\n\nworks for me, even for Markdown wiki pages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I merge a specific commit from one branch into another in Git?\n\nI have BranchA which is 113 commits ahead of BranchB.\nBut I only want the last 10 or so commits from BranchA merged into BranchB.\nIs there a way to do this?"}, {"role": "assistant", "content": "The git cherry-pick <commit> command allows you to take a single commit (from whatever branch) and, essentially, rebase it in your working branch.\nChapter 5 of the Pro Git book explains it better than I can, complete with diagrams and such. (The chapter on Rebasing is also good reading.)\nLastly, there are some good comments on the cherry-picking vs merging vs rebasing in another SO question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nIssue on adding SSH key to GitHub\n\n                                (8 answers)\n                            \n\nClosed 2 years ago.\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\nI was using a username password for pushing my code. It was working for several months, but suddenly I'm not able to do it and am getting this error:\nUsername for 'https://github.com': shreyas-jadhav\nPassword for 'https://[email\u00a0protected]':\nremote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ for more information.\n\nPlease note that the link doesn't help. Even using the generated token doesn't help.\n\nModerator Note: This is part of a planned and soon-to-be permanent service change by GitHub"}, {"role": "assistant", "content": "Generate a new token from GitHub's developer settings\n\nUpdate the remote URL:\ngit remote set-url origin https://<token>@github.com/<Git_URL>\n\n\nPull once:\ngit pull https://<token>@<Git_URL>.git\n\n\n\nAnd you are good to go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you keep track of your comments on GitHub issues?\n\nI want to find all the GitHub issues that I commented on. I tried searching for commenter:mbigras type:issue like the Searching issues and pull requests GitHub article suggests. But that method returns fewer results than the public activity section of my profile.\nSee both attached images:\nSearch method\nDoesn't display current results:\n\nProfile method\nGets mixed up with other public activity:\n\nIs there a way to get the full history of my comments on GitHub?\nEDIT\nauthor:mbigras type:issue gives wider results but still not the full history:\n\nWhat I'm looking for is a way to quickly view all my comment/issue history in all issues.\nEDIT\nI emailed GitHub about this. Search doesn't match the public activity section because search indexes issues by creation date and not last active date.\nHow do you keep organized about which issues you've commented on?"}, {"role": "assistant", "content": "Search for commenter:username in the main Github search box.\nFor example commenter:gavinandresen\nTo see recent activity, select Recently updated from Sort dropdown\nYou can also narrow the search: is:issue commenter:gavinandresen"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "app-release-unsigned.apk is not signed\n\nI downloaded the zip file of an Android app on github and I'm trying to run it, but I get a dialog with this message\napp-release-unsigned.apk is not signed. Please configure the signing information for the selected flavor using the Project Structure dialog.\n\nI'm using Android Studio.\nWhat am I supposed to do?"}, {"role": "assistant", "content": "If anyone wants to debug release build using Android Studio, follow these steps:\n\nSet build variant to release mode.\n\n\n\nRight click on app in left navigation pane, click Open Module Settings. \nGo to Signing Tab. Add a signing config and fill in information. Select your keychain as well.\n\n\n\nGo to Build Type tab. Select release mode and set:\n\n-Debuggable to true.\n-Signing Config to the config. (The one you just created).\n\nSync your gradle. Enjoy!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: Import upstream branch into fork\n\nI have a fork (origin) from a project (upstream) on github. Now the upstream project has added a new branch, I want to import into my fork. How do I do that?\nI tried checking out the remote and creating a branch on top of that, but that configures the branch the way that git push is trying to push to the upstream:\ngit checkout upstream/branch\ngit checkout -b branch\n\nedit\nMaybe that wasn't clear, but I want to add the branch to my local repository, so I can push it to origin (my fork) via git push. Because upstream repositories are usually read-only and you fork it to contribute.\nSo I basically want to checkout a non-existent branch on origin whose contents will be pulled in from upstream."}, {"role": "assistant", "content": "Make sure you've pulled the new upstream branch into your local repo:  \n\nFirst, ensure your working tree is clean (commit/stash/revert any changes)       \nThen, git fetch upstream to retrieve the new upstream branch\n\nCreate and switch to a local version of the new upstream branch (newbranch):  \n\ngit checkout -b newbranch upstream/newbranch\n\nWhen you're ready to push the new branch to origin:  \n\ngit push -u origin newbranch \n\n\nThe -u switch sets up tracking to the specified remote (in this example, origin)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does Git tell me \"No such remote 'origin'\" when I try to push to origin?\n\nI am very new to Git; I only recently created a GitHub account.\nI've just tried to push my very first repository (a sample project), but I'm getting the following error:\nNo such remote 'origin'\n\nI ran the following commands:\ngit init\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/VijayNew/NewExample.git\ngit push -u origin master\n\nHowever, when I ran git commit -m \"first commit\", I got the following message:\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nSo then I tried to set origin, using\ngit remote set-url origin https://github.com/VijayNew/NewExample.git\n\nBut I got the following error:\nNo such remote 'origin'\n\nWhat did I do wrong, and what should I do?"}, {"role": "assistant", "content": "Two problems:\n1 - You never told Git to start tracking any file\nYou write that you ran\ngit init\ngit commit -m \"first commit\"\n\nand that, at that stage, you got\nnothing added to commit but untracked files present (use \"git add\" to track).\n\nGit is telling you that you never told it to start tracking any files in the first place, and it has nothing to take a snapshot of. Therefore, Git creates no commit. Before attempting to commit, you should tell Git (for instance):\n\nHey Git, you see that README.md file idly sitting in my working directory, there? Could you put it under version control for me? I'd like it to go in my first commit/snapshot/revision...\n\nFor that you need to stage the files of interest, using\ngit add README.md\n\nbefore running\ngit commit -m \"some descriptive message\"\n\n2 - You haven't set up the remote repository\nYou then ran\ngit remote add origin https://github.com/VijayNew/NewExample.git\n\nAfter that, your local repository should be able to communicate with the remote repository that resides at the specified URL (https://github.com/VijayNew/NewExample.git)... provided that remote repo actually exists!\nHowever, it seems that you never created that remote repo on GitHub in the first place: at the time of writing this answer, if I try to visit the correponding URL, I get\n\nBefore attempting to push to that remote repository, you need to make sure that the latter actually exists. So go to GitHub and create the remote repo in question. Then and only then will you be able to successfully push with\ngit push -u origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to modify GitHub pull request? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nPreferred Github workflow for updating a pull request after code review\n\n                                (2 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nI've opened a pull request to a project. The maintainer has decided to accept it, but told me to modify some contents. \nHow can I do it? Whether I should keep the commit hash unchanged, how can I do it?"}, {"role": "assistant", "content": "Just push more commits on to the branch the request is for. The pull request will pick this up then.\nExample:\nIf you want to have b merged into master\n\nYou push c1,c2,c3 to b\nthen you make a new request for b\nit gets reviewed and you need more commits\nYou push c11,c21,c31 to b\nThe pull request now shows all 6 six commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: \"failed to connect to github 443 windows/ Failed to connect to gitHub - No Error\"\n\nI installed Git to get the latest version of Angular. When I tried to run\ngit clone https://github.com/angular/angular-phonecat.git\n\nI got:\n\nfailed to connect to github 443 error\n\nI even tried\ngit clone git://github.com/angular/angular-phonecat.git\n\nThat gave me\n\nfailed to connect no error message\n\nI am behind my company firewall. I can not see my proxy details when I go to Control Panel \u2192 Internet Options \u2192 Connections \u2192 LAN setting. The IT guys are not sharing proxy information with me. What can do?\n\nI finally managed to do it. I will update the procedure that I had taken in order to.\nI just wanted to compile all the steps that I did to get it to work."}, {"role": "assistant", "content": "Well, I did the following steps\n\nGoogle the error\n\nGot to SO links (here, here) which suggested the same thing that I have to update the Git configuration for proxy setting\n\nDamn, I can not see proxy information from Control Panel. The IT guys must have hidden it. I can not even change the setting to not to use a proxy.\n\nI found this wonderful tutorial of finding which proxy your are connected to\n\nUpdated the http.proxy key in the Git configuration by the following command\ngit config --global http.proxy http[s]://userName:password@proxyaddress:port\n\n\nError - \"could not resolve proxy some@proxyaddress:port\". It turned out my password had a @ symbol in it.\n\nEncode @ in your password to %40, because Git splits the proxy setting by @\n\nIf your userName is an email address, which has @, also encode it to %40. (see this answer)\n git config --global http.proxy http[s]://userName(encoded):password(encoded)@proxyaddress:port\n\n\n\nBaam! It worked!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Remove committed file after push\n\nIs there a possibility to revert a committed file in Git? I've pushed a commit to GitHub and then I realized that there's a file which I didn't want to be pushed (I haven't finished the changes)."}, {"role": "assistant", "content": "update: added safer method\npreferred method:\n\ncheck out the previous (unchanged) state of your file; notice the double dash \ngit checkout HEAD^ -- /path/to/file\n\ncommit it:\ngit commit -am \"revert changes on this file, not finished with it yet\"\n\npush it, no force needed:\ngit push\n\nget back to your unfinished work, again do (3 times arrow up):\ngit checkout HEAD^ -- /path/to/file\n\n\neffectively 'uncommitting':\nTo modify the last commit of the repository HEAD, obfuscating your accidentally pushed work, while potentially running into a conflict with your colleague who may have pulled it already, and who will grow grey hair and lose lots of time trying to reconcile his local branch head with the central one:\nTo remove file change from last commit:\n\nto revert the file to the state before the last commit, do:\ngit checkout HEAD^ /path/to/file\n\nto update the last commit with the reverted file, do:\ngit commit --amend\n\nto push the updated commit to the repo, do:\ngit push -f\n\n\nReally, consider using the preferred method mentioned before."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github - unexpected disconnect while reading sideband packet\n\nI've got quite interesting problem.\nI tried to send some projects via bash to repo and recently there was a problem with sending it.\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (24/24), done.\nWriting objects: 100% (25/25), 187.79 KiB | 9.39 MiB/s, done.\nTotal 25 (delta 1), reused 0 (delta 0), pack-reused 0\nsend-pack: unexpected disconnect while reading sideband packet\nfatal: the remote end hung up unexpectedly\n\nThe funny part is that 10 min earlier I can send it without any problems.\nI tried with getting new repo, creating new file, reinstalling git, git config --global http.postBuffer 524288000 with bigger numbers as well, also https.postBuffer and so on. Also install desktop version the same issue come in.\nI've got problems mostly with React apps.\nAnyone know the solution ? What could go wrong ?"}, {"role": "assistant", "content": "First of all, check your network connection stability.\nIf there is no problem with network connection try another solution; it may work:\nOn Linux\nExecute the following in the command line before executing the Git command:\nexport GIT_TRACE_PACKET=1\nexport GIT_TRACE=1\nexport GIT_CURL_VERBOSE=1\n\nOn Windows\nExecute the following in the command line before executing the Git command:\nset GIT_TRACE_PACKET=1\nset GIT_TRACE=1\nset GIT_CURL_VERBOSE=1\n\nIn addition:\ngit config --global core.compression 0\ngit clone --depth 1 <repo_URI>\n# cd to your newly created directory\ngit fetch --unshallow \ngit pull --all\n\nFor PowerShell users:\nAs kodybrown said in comments:\n$env:GIT_TRACE_PACKET=1\n$env:GIT_TRACE=1\n$env:GIT_CURL_VERBOSE=1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge with force overwrite\n\nI have a branch called demo which I need to merge with master branch. I can get the desired result with following commands:\ngit pull origin demo\ngit checkout master\ngit pull origin master\ngit merge demo\ngit push origin master\n\nMy only concern is, if there are any merge issues, I want to tell git to overwrite changes in master branch without giving me merge prompt. So basically changes in demo branch should automatically overwrite changes in master branch. \nI looked around there are multiple options but I don't want to take chances with merging."}, {"role": "assistant", "content": "Not really related to this answer, but I'd ditch git pull, which just runs git fetch followed by git merge.  You are doing three merges, which is going to make your Git run three fetch operations, when one fetch is all you will need.  Hence:\ngit fetch origin   # update all our origin/* remote-tracking branches\n\ngit checkout demo         # if needed -- your example assumes you're on it\ngit merge origin/demo     # if needed -- see below\n\ngit checkout master\ngit merge origin/master\n\ngit merge -X theirs demo   # but see below\n\ngit push origin master     # again, see below\n\nControlling the trickiest merge\nThe most interesting part here is git merge -X theirs.  As root545 noted, the -X options are passed on to the merge strategy, and both the default recursive strategy and the alternative resolve strategy take -X ours or -X theirs (one or the other, but not both).  To understand what they do, though, you need to know how Git finds, and treats, merge conflicts.\nA merge conflict can occur within some file1 when the base version differs from both the current (also called local, HEAD, or --ours) version and the other (also called remote or --theirs) version of that same file.  That is, the merge has identified three revisions (three commits): base, ours, and theirs.  The \"base\" version is from the merge base between our commit and their commit, as found in the commit graph (for much more on this, see other StackOverflow postings).  Git has then found two sets of changes: \"what we did\" and \"what they did\".  These changes are (in general) found on a line-by-line, purely textual basis.  Git has no real understanding of file contents; it is merely comparing each line of text.\nThese changes are what you see in git diff output, and as always, they have context as well.  It's possible that things we changed are on different lines from things they changed, so that the changes seem like they would not collide, but the context has also changed (e.g., due to our change being close to the top or bottom of the file, so that the file runs out in our version, but in theirs, they have also added more text at the top or bottom).\nIf the changes happen on different lines\u2014for instance, we change color to colour on line 17 and they change fred to barney on line 71\u2014then there is no conflict: Git simply takes both changes.  If the changes happen on the same lines, but are identical changes, Git takes one copy of the change.  Only if the changes are on the same lines, but are different changes, or that special case of interfering context, do you get a modify/modify conflict.\nThe -X ours and -X theirs options tell Git how to resolve this conflict, by picking just one of the two changes: ours, or theirs.  Since you said you are merging demo (theirs) into master (ours) and want the changes from demo, you would want -X theirs.\nBlindly applying -X, however, is dangerous.  Just because our changes did not conflict on a line-by-line basis does not mean our changes do not actually conflict!  One classic example occurs in languages with variable declarations.  The base version might declare an unused variable:\nint i;\n\nIn our version, we delete the unused variable to make a compiler warning go away\u2014and in their version, they add a loop some lines later, using i as the loop counter.  If we combine the two changes, the resulting code no longer compiles.  The -X option is no help here since the changes are on different lines.\nIf you have an automated test suite, the most important thing to do is to run the tests after merging.  You can do this after committing, and fix things up later if needed; or you can do it before committing, by adding --no-commit to the git merge command.  We'll leave the details for all of this to other postings.\n\n1You can also get conflicts with respect to \"file-wide\" operations, e.g., perhaps we fix the spelling of a word in a file (so that we have a change), and they delete the entire file (so that they have a delete).  Git will not resolve these conflicts on its own, regardless of -X arguments.\n\nDoing fewer merges and/or smarter merges and/or using rebase\nThere are three merges in both of our command sequences.  The first is to bring origin/demo into the local demo (yours uses git pull which, if your Git is very old, will fail to update origin/demo but will produce the same end result).  The second is to bring origin/master into master.\nIt's not clear to me who is updating demo and/or master.  If you write your own code on your own demo branch, and others are writing code and pushing it to the demo branch on origin, then this first-step merge can have conflicts, or produce a real merge.  More often than not, it's better to use rebase, rather than merge, to combine work (admittedly, this is a matter of taste and opinion).  If so, you might want to use git rebase instead.  On the other hand, if you never do any of your own commits on demo, you don't even need a demo branch.  Alternatively, if you want to automate a lot of this, but be able to check carefully when there are commits that both you and others, made, you might want to use git merge --ff-only origin/demo: this will fast-forward your demo to match the updated origin/demo if possible, and simply outright fail if not (at which point you can inspect the two sets of changes, and choose a real merge or a rebase as appropriate).\nThis same logic applies to master, although you are doing the merge on master, so you definitely do need a master.  It is, however, even likelier that you would want the merge to fail if it cannot be done as a fast-forward non-merge, so this probably also should be git merge --ff-only origin/master.\nLet's say that you never do your own commits on demo.  In this case we can ditch the name demo entirely:\ngit fetch origin   # update origin/*\n\ngit checkout master\ngit merge --ff-only origin/master || die \"cannot fast-forward our master\"\n\ngit merge -X theirs origin/demo || die \"complex merge conflict\"\n\ngit push origin master\n\nIf you are doing your own demo branch commits, this is not helpful; you might as well keep the existing merge (but maybe add --ff-only depending on what behavior you want), or switch it to doing a rebase.  Note that all three methods may fail: merge may fail with a conflict, merge with --ff-only may not be able to fast-forward, and rebase may fail with a conflict (rebase works by, in essence, cherry-picking commits, which uses the merge machinery and hence can get a merge conflict)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does it mean to squash commits in git?\n\nWhat does Squashing commits in git mean. How do I squash commits in Github?"}, {"role": "assistant", "content": "You can think of Git as an advanced database of snapshots of your working directory(ies).\nOne very nice feature of Git is the ability to rewrite the history of commits.\nThe principal reason for doing this is that a lot of such history is relevant only for the developer who generated it, so it must be simplified, or made more nice, before submitting it to a shared repository.\nSquashing a commit means, from an idiomatic point of view, to move the changes introduced in said commit into its parent so that you end up with one commit instead of two (or more).\nIf you repeat this process multiple times, you can reduce n commit to a single one.\nVisually, if you started your work at the commit tagged Start, you want this\n\nYou may notice that the new commit has a slightly darker shade of blue. This is intentional.\nIn Git squashing is achieved with a Rebase, of a special form called Interactive Rebase.\nSimplifying: when you rebase a set of commits into a branch B, you apply all the changes introduced by those commits as they were done, starting from B instead of their original ancestor.\nA visual clue\n\nNote again the different shades of blue.\nAn interactive rebase let you choose how commits should be rebased.\nIf you run this command:\n git rebase -i branch\n\nYou would end up with a file that lists the commits that will be rebased\n pick ae3...\n pick ef6...\n pick 1e0...\n pick 341...\n\nI didn't name the commits, but these four ones are intended to be the commits from Start to Head\nThe nice thing about this list is that it is editable.\nYou can omit commits, or you can squash them.\nAll you have to do is to change the first word to squash.\n pick ae3...\n squash ef6...\n squash 1e0...\n squash 341...\n\nIf you close the editor and no merge conflicts are found, you end up with this history:\n\nIn your case, you don't want to rebase into another branch, but rather into a previous commit.\nIn order to transform the history as shown in the very first example, you have to run something like\ngit rebase -i HEAD~4\n\nchange the \"commands\" to squash for all the commits apart from the first one, and then close your editor.\n\nNote about altering history\nIn Git, commits are never edited. They can be pruned, made not reachable, cloned but not changed.\nWhen you rebase, you are actually creating new commits.\nThe old ones are not longer reachable by any refs, so are not shown in the history but they are still there!\nThis is what you actually get for a rebase:\n\nIf you have already pushed them somewhere, rewriting the history will actually make a branch!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I contribute to other's code in GitHub? [closed]\n\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 4 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI would like to contribute to a certain project in GitHub. Should I fork it? Branch it? What is recommended and how to do it?"}, {"role": "assistant", "content": "Ideally you:\n\nFork the project\nMake one or more well commented and clean commits to the repository. You can make a new branch here if you are modifying more than one part or feature.\nPerform a pull request in github's web interface.\n\nif it is a new Feature request, don't start the coding first. Remember to post an issue to discuss the new feature.\nIf the feature is well discuss and there are some +1 or the project owner approved it, assign the issue to yourself, then do the steps above.\nSome projects won't use the pull request system. Check with the author or mailing list on the best way to get your code back into the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Having a private branch of a public repo on GitHub?\n\nI have a public PHP project in a GitHub repo, which contains just one branch (master).\nI want to have a separate branch/fork that is private for me (I have paid for private GitHub repos). I would like to be able to merge changes from the private branch/fork to the public repo, and vice versa.\nWith that in mind, here are my questions:\n\nCan I have a private branch on a public repo?\nCan I fork my own public repo into my own private branch/fork?\nIf both of the above are possible, which is the best way forward? If neither, how should I proceed?"}, {"role": "assistant", "content": "Duplicate your repo.\nMake the duplicated repo a private one on GitHub.\nClone the private repo to your machine\nAdd a remote to your private repo (git remote add public [email\u00a0protected]:...)\nPush branches with commits intended for your public repo to that new public remote. (make sure you don't accidentally commit private-only code)\nYou can bring in changes to your public repo using 'git fetch public' and then merge them locally and push to your private repo (origin remote)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to attach file to a GitHub issue?\n\nI migrated with a project from Bitbucket to GitHub and I cannot find a way to attach a file to an issue (ex: screenshot, specs, etc).\nHow to do it?"}, {"role": "assistant", "content": "You upload it somewhere and add the link in a comment. GitHub's Issues is rather primitive and doesn't allow attaching files.\nUpdate: You can post images to GitHub issues now.  The easiest way is to copy the image (right click, Copy image) and then paste it into the text box where you describe the issue.\nOR\nJust drag and drop"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I reference a specific issue comment on github?\n\nI'm trying to refer to a specific issue comment on github, in my readme. But I can't find any information on how to do that (here for example). I know that it's possible to link to issues, but is it possible to link to specific comments in that issue?"}, {"role": "assistant", "content": "You can click on the date in the header of the comment to get a URL to the comment\n\nFor example, for issue https://github.com/centic9/jgit-cookbook/issues/5 one of the comments has the following link: https://github.com/centic9/jgit-cookbook/issues/5#issuecomment-51084491."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add Google Analytics Tracking ID to GitHub Pages\n\nCould be a simple question but I am full of doubts right now about adding Google Analytics Tracking ID to GitHub page.\nI am using GitHub automatic page generator to create my GitHub page but it asks for \"Google Analytics Tracking ID\". I tried to sign up with Google Analytics but there on it asks for website URL.\nNow what I am supposed to do? \nOne more ques: can we add Google Analytics Tracking ID later on after GitHub Page has been created?"}, {"role": "assistant", "content": "Update: Added steps descriptions for others \nSolved it:\nhad to include username.github.io (link that I want to track) in Google Analytics website section.\nyou can check GitHub help page here \n\n\n\nAfter that I was provided with an Tracker ID. \n\nNote: You can easily change or add more websites on Google Analytics page from your Google Analytics admin panel.\n\nUpdate 2: - Adding Google Analytics Tracking ID to Already created Github pages (As requested by @avi-aryan ) \n\nBrowse to your github pages branch - which would be something like - ( https://github.com/YourUserName/YourRepository/tree/gh-pages ) \nThen edit index.html from listed files\nNow in within HEAD tag of index.html - paste your Google Analytics Tracking ID Script ( if have already signed up for Google analytics then you can browse it under admin and then tracking info tab )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I merge table rows in markdown\n\nIs there a way to create merged rows in a column of table in markdown files like ReadMe.md files?  \nSomething like this:"}, {"role": "assistant", "content": "No, this is not possible with GitHub-Flavored Markdown. As the spec explains (emphasis added):\n\nThe remainder of the table\u2019s rows may vary in the number of cells. If there are a number of cells fewer than the number of cells in the header row, empty cells are inserted. If there are greater, the excess is ignored:\n\nOf course, you can always fall back to raw HTML.\n<table>\n    <thead>\n        <tr>\n            <th>Layer 1</th>\n            <th>Layer 2</th>\n            <th>Layer 3</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td rowspan=4>L1 Name</td>\n            <td rowspan=2>L2 Name A</td>\n            <td>L3 Name A</td>\n        </tr>\n        <tr>\n            <td>L3 Name B</td>\n        </tr>\n        <tr>\n            <td rowspan=2>L2 Name B</td>\n            <td>L3 Name C</td>\n        </tr>\n        <tr>\n            <td>L3 Name D</td>\n        </tr>\n    </tbody>\n</table>\n\nTry it yourself at https://jsfiddle.net/7h89y55r/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Editing the git commit message in GitHub\n\nIs there any way of online editing the commit message in GitHub.com, after submission?\nFrom the command line, one can do\ngit commit --amend -m \"New commit message\"\n\nas correctly suggested in the following question:\n\nHow to modify existing, unpushed commit messages?\n\nTrying git pull and then git push has worked (without any other commit having interfered in the mean time).\nBut can it be done via the GitHub website?"}, {"role": "assistant", "content": "GitHub's instructions for doing this:\n\nOn the command line, navigate to the repository that contains the commit you want to amend.\nType git commit --amend and press Enter.\nIn your text editor, edit the commit message and save the commit.\nUse the git push --force origin example-branch command to force push over the old commit.\n\nSource: https://help.github.com/articles/changing-a-commit-message/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Latex rendering in README.md on Github\n\nIs there any way to render LaTex in README.md in a GitHub repository? I've googled it and searched on stack overflow but none of the related answers seems feasible."}, {"role": "assistant", "content": "For short expresions and not so fancy math you could use the inline HTML to get your latex rendered math on codecogs and then embed the resulting image. Here an example:\n- <img src=\"https://latex.codecogs.com/gif.latex?O_t=\\text { Onset event at time bin } t \" /> \n- <img src=\"https://latex.codecogs.com/gif.latex?s=\\text { sensor reading }  \" /> \n- <img src=\"https://latex.codecogs.com/gif.latex?P(s | O_t )=\\text { Probability of a sensor reading value when sleep onset is observed at a time bin } t \" />\n\nWhich should result in something like the next\n\n\n\nUpdate: This works great in eclipse but not in github unfortunately. The only work around is the next:\nTake your latex equation and go to http://www.codecogs.com/latex/eqneditor.php, at the bottom of the area where your equation appears displayed there is a tiny dropdown menu, pick URL encoded and then paste that in your github markdown in the next way:\n![equation](http://latex.codecogs.com/gif.latex?O_t%3D%5Ctext%20%7B%20Onset%20event%20at%20time%20bin%20%7D%20t)\n![equation](http://latex.codecogs.com/gif.latex?s%3D%5Ctext%20%7B%20sensor%20reading%20%7D) \n![equation](http://latex.codecogs.com/gif.latex?P%28s%20%7C%20O_t%20%29%3D%5Ctext%20%7B%20Probability%20of%20a%20sensor%20reading%20value%20when%20sleep%20onset%20is%20observed%20at%20a%20time%20bin%20%7D%20t)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to set up a git project to use an external repo submodule?\n\nI'd like to create a repo which pulls in a remote repo.\nFor example, let's say jQuery as a submodule:\ngit://github.com/jquery/jquery.git\n\nWhat would be the process of creating a repo with jQuery as a submodule and adding my own external as a remote repo.\nAlso once this is setup, if I push / pull to my own remote, will the external remain intact?"}, {"role": "assistant", "content": "You have a project -- call it MyWebApp that already has a github repo\nYou want to use the jquery repository in your project\nYou want to pull the jquery repo into your project as a submodule.\n\nSubmodules are really, really easy to reference and use. Assuming you already have MyWebApp set up as a repo, from terminal issue these commands:\ncd MyWebApp\ngit submodule add git://github.com/jquery/jquery.git externals/jquery\n\nThis will create a directory named externals/jquery* and link it to the github jquery repository. Now we just need to init the submodule and clone the code to it: \ngit submodule update --init --recursive\n\nYou should now have all the latest code cloned into the submodule. If the jquery repo changes and you want to pull the latest code down, just issue the submodule update command again. Please note: I typically have a number of external repositories in my projects, so I always group the repos under an \"externals\" directory.\nThe online Pro Git Book has some good information on submodules (and git in general) presented in an easy-to-read fashion. Alternately, git help submodule will also give good information. Or take a look at the Git Submodule Tutorial on the git wiki.\nI noticed this blog entry which talks about submodules and compares them to Subversion's svn:externals mechanism: http://speirs.org/blog/2009/5/11/understanding-git-submodules.html \n* As a best practice, you should always place your submodules in their own directory, such as Externals. If you don't, your root project directory can become very cluttered very fast."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to resolve \"refusing to allow an OAuth App to create or update workflow\" on git push\n\nGetting\n\nrefusing to allow an OAuth App to create or update workflow .github/workflows/cd.yml without workflow scope\"\n\non git push. How to grant workflow scope?"}, {"role": "assistant", "content": "I've literally just come across this problem when trying to use IntelliJ to push to a branch that contains a GitHub Action workflow (YAML file in .github/workflows). I didn't find existing resources on the Internet very helpful, so I hope this will help you fix it too.\nTL;DR: Update your Personal Access Token with the workflow scope enabled in GitHub, or create a new one, and configure your application to use that.\nBackground: third-party tools with GitHub integrations like IntelliJ, Visual Studio Code, Github Desktop, etc use tokens to connect to your GitHub account so they can pull/push, etc on your behalf. In the case of IntelliJ, their instructions only say to include the repo, the gist, and the read:org scopes. But you need the workflow scope to modify GitHub Actions.\nHere's how to fix it:\n\nIn your Github account, go to Settings (in your avatar dropdown in the top right-hand corner)\nGo to Developer Settings > Personal Access Tokens\nIf your token is listed, update it to include the workflow scope:\n\nClick on the token name.\nSelect workflow scope and save.\nIf the app you use won't re-fetch permissions for your token automatically, you may have to create a new one (step 4 below).\nClick on Update Token to save the change. DONE!\n\n\nIf there's no token listed there, generate a new one:\n\nClick on Generate Token.\nSelect the scopes you need, including workflow.\nRead the information carefully, then click OK to continue.\nCopy the new token that Github shows you.\nApply the new token to your application. For example, for the Intellij IDE, go to Settings > Version Control > GitHub, remove the existing integration and re-add it, pasting in the new token."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Track a new remote branch created on GitHub\n\nI have already got a local master branch tracking the remote master branch of a github project. Now, a collaborator of mine has created a new branch in the same project, and I want to do the following accordingly:\n\ncreate a new branch locally\nmake this new branch track the newly create remote branch.\n\nHow should I do it properly?"}, {"role": "assistant", "content": "git fetch\ngit branch --track branch-name origin/branch-name\n\nFirst command makes sure you have remote branch in local repository. Second command creates local branch which tracks remote branch. It assumes that your remote name is origin and branch name is branch-name.\n--track option is enabled by default for remote branches and you can omit it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "See \"real\" commit date / time in github (hour/day)\n\nIs there a way to see the date of a commit in github, with day/hour precision? Older commits appear in a \"human readable\" format, such as \"2 years ago\" instead of showing the actual date.\n\nIf it's not possible to see the actual date on github, is there a easier workaround than git clone?"}, {"role": "assistant", "content": "Hover your mouse over the 2 years ago and you'll get the timestamp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between Forking and Cloning on GitHub?\n\nI'd like to know the differences between doing a Fork of a project and doing a clone of it.\nCan I only send pull requests via GitHub if I've forked a project?"}, {"role": "assistant", "content": "When you say you are Forking a repository you are basically creating a copy of the repository under your GitHub ID. The main point to note here is that any changes made to the original repository will be reflected back to your forked repositories(you need to fetch and rebase). However, if you make any changes to your forked repository you will have to explicitly create a pull request to the original repository. If your pull request is approved by the administrator of the original repository, then your changes will be committed/merged with the existing original code-base. Until then, your changes will be reflected only in the copy you forked. \nIn short:\nThe Fork & Pull Model lets anyone fork an existing repository and push changes to their personal fork without requiring access be granted to the source repository. The changes must then be pulled into the source repository by the project maintainer. \nNote that after forking you can clone your repository (the one under your name) locally on your machine. Make changes in it and push it to your forked repository. However, to reflect your changes in the original repository your pull request must be approved.\nCouple of other interesting dicussions - \nAre git forks actually git clones?\nHow do I update a GitHub forked repository?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fastest way to download a GitHub repository\n\nI need to download the source code of the repository Spring data graph example into my box. It has public read-only access. Is there is an extremely fast way of downloading this code?\nI have no idea of working on GitHub/committing code and most tutorials out there on the web seems to assume that \"I would want to setup a project in GitHub\" and inundate me with 15-20 step processes. To me, if a source repository is available for the public, it should take less than 10 seconds to have that code in my filesystem.\nTutorials that provide me with 15-20 step processes:\n\nSetting up development environment on Ubuntu\nWin Setup on GIT\n\nI need something very very very simple. Just pull the source code, and I am more interested in seeing the source code and not learn GitHub.\nAre there any fast pointers/tutorials? (I have a GitHub account.)"}, {"role": "assistant", "content": "When you are on a project page, you can press the Download ZIP button which is located under the green <> Code drop down:\n\nThis allows you to download the most recent version of the code as a zip archive.\nIf you aren't seeing that button, it is likely because you aren't on the main project page. To get there, click on the left-most tab labeled <> Code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Dependencies Between Workflows on Github Actions\n\nI have a monorepo with two workflows:\n.github/workflows/test.yml\nname: test\n\non: [push, pull_request]\n\njobs:\n  test-packages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: test packages\n        run: |\n          yarn install\n          yarn test\n...\n\n.github/workflows/deploy.yml\nname: deploy\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy-packages:\n    runs-on: ubuntu-latest\n    needs: test-packages\n    steps:\n      - uses: actions/checkout@v1\n      - name: deploy packages\n        run: |\n          yarn deploy\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\n\nThis doesn't work, I can't reference a job in another workflow:\n### ERRORED 19:13:07Z\n\n- Your workflow file was invalid: The pipeline is not valid. The pipeline must contain at least one job with no dependencies.\n\nIs there a way to create a dependency between workflows?\nWhat I want is to run test.yml then deploy.yml on tags, and test.yml only on push and pull requests. I don't want to duplicate jobs between workflows."}, {"role": "assistant", "content": "Now it's possible to have dependencies between workflows on Github Actions using workflow_run.\nUsing this config, the Release workflow will work when the Run Tests workflow is completed.\nname: Release\non:\n  workflow_run:\n    workflows: [\"Run Tests\"]\n    branches: [main]\n    types: \n      - completed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Clone - Repository not found\n\ngit clone <url>\n\ngives the message fatal: repository 'url' not found\nI tried the options in the link, but it didn't work."}, {"role": "assistant", "content": "As mentioned by others the error may occur if the url is wrong.\nHowever, the error may also occur if the repo is a private repo and you do not have access or wrong credentials.\nInstead of\ngit clone https://github.com/REPO_NAME/repo.git\ntry\ngit clone https://username:[email\u00a0protected]/REPO_NAME/repo.git\n\nYou can also use\ngit clone https://[email\u00a0protected]/REPO_NAME/repo.git\nand git will prompt for the password (thanks to leanne for providing this hint in the comments)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: 'lfs' is not a git command unclear\n\nEvery time I enter in my command window\ngit lfs install\n\nthe message I get is git: 'lfs' is not a git command. See 'git --help'.\nI tried looking up for a solution, but none of the answers were clear. Can someone explain clear how to fix this?"}, {"role": "assistant", "content": "It looks like you haven't downloaded git-lfs on your machine, so git lfs install isn't a registered command by git.\nInstall git-lfs as outlined below:\n\n1. Pre-Requisites\n\ngit-lfs requires git version 1.8.3.1 or later. You can check the version you have by running git --version, and update if required.\nIf you are installing on macOS, make sure you have Homebrew installed.\n\n2. Download\nDownload git-lfs by following the steps based on your operating system.\nDebian / Ubuntu\n$ curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\n$ sudo apt-get install git-lfs\n\nMacOS (Using Homebrew)\n$ brew update\n$ brew install git-lfs\n\nWindows\nDownload and run the latest windows installer.\n3. Install\nFinally, run git-lfs install to install git-lfs on your system.\nYou can always run git-lfs uninstall to uninstall.\n\nMore detailed information (such as for installation on other platforms) can be found on git-lfs's installation page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cancel a pull request on github?\n\nHow can a pull request on github be cancelled?"}, {"role": "assistant", "content": "GitHub now supports closing a pull request\nBasically, you need to do the following steps:\n\nVisit the pull request page\nClick on the pull request\nClick the \"close pull request\" button\n\nExample (button on the very bottom):\n\nThis way the pull request gets closed (and ignored), without merging it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you synchronise projects to GitHub with Android Studio?\n\nI am trying to synchronise a project that I have on in my Android Studio folder to GitHub, but I am not fully sure what to do other than adding my credentials in the options menu. Could someone give me a quick guide, please?"}, {"role": "assistant", "content": "Open the project you want to push in Android Studio.\nClick VCS -> Enable version Control Integration -> Git\nThere doesn't seem to be a way to add a remote through the GUI. So open Git Bash in the root of the project and do git remote add <remote_name> <remote_url>\nNow when you do VCS -> Commit changes -> Commit & Push you should see your remote and everything should work through the GUI.\n\nIf you are getting the error: fatal: remote <remote_name> already exists that means        you already added it. To see your remotes do git remote -v and git remote rm <remote_name> to remove.\n\nSee these pages for details:\nhttp://www.jetbrains.com/idea/webhelp/using-git-integration.html\nhttp://gitref.org/remotes/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "open link in new tab with github markdown using target=\"_blank\"\n\nIs there a way to let a Link, written in githubs markdown, open in a new tab?\nAll posts I have found related to this suggests to use HTML and target=\"_blank\", which is fine with me, but that doesn't work.\nFor example this link:\n<a href=\"http://stackoverflow.com\" target=\"_blank\">Go</a>\n\nDoes not open in a new tab.\nI'm no interested in replies for all kind of different markdown syntaxes, but only in a solution that will work when I write my markdown on github."}, {"role": "assistant", "content": "Well it seems that the simple answer is \"It's not possible\". Github does not include the target attribute even if you use plain HTML, so it's not a in the final HTML Anchor tag. Annoying, but OK, users can just do a CTRL+click (on Windows and Linux) or CMD+click (on MacOS) on the link, the get the same behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull till a particular commit\n\nI want to do a git pull but only till a specific commit.\n A->B->C->D->E->F (Remote master HEAD)\n\nso suppose my local master HEAD points to B, and I want to pull till E. What should I do ?\nThis is not pulling a specific commit, this is pulling upto a specific commit."}, {"role": "assistant", "content": "git pull is nothing but git fetch followed by git merge. So what you can do is\ngit fetch remote example_branch\ngit merge <commit_hash>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a \"stale\" git branch?\n\nA \"Stale\" git branch is a term I've heard a lot. I know it has something to do with branches which are regarded as less useful or useless, but cannot find an exact definition. What is a \"stale\" git branch?"}, {"role": "assistant", "content": "The oldest reference to \"stale\" is found in commit e194cd1 (Jan. 2007, Git 1.5.0), which detected \"stale tracking branches in remote\": when tracking a branch which was removed by the remote system.\nHence git remote prune.\nThat is the main definition for stale branch: a remote tracking branch (a local reference of a remote repo branch) which no longer tracks anything (because the actual branch on the remote repo is gone).\ngit remote show is able to list those.\n\nIncidentally, you have two other definitions of \"stale\" in the Git system:\n\nAnother reference to \"stale\" involves git reflog --stale-fix in commit 1389d9d (Git 1.5.0), for tracking \"broken commit\": a commit that is not reachable from any of the refs and there is a missing object among the commit, tree, or blob objects reachable from it that is not reachable from any of the\nrefs.\nThat helps fixing situation after running non reflog-aware git prune from an older git in the presence of reflogs.\nCommit 740fdd2 (March 2008, Git 1.5.5) also introduces \"stale\" for symbolic refs, when the ref they point to no longer exists.  \n\n\nAs mentioned by @SteelToe: \nThe definition of a stale branch, as per GitHub documentation, is a branch that has not had any commits in the previous 3 months.\nThis generally indicates an old/unmaintained/not current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I make Jenkins CI with Git trigger on pushes to master?\n\nI'm trying to set up Jenkins-ci for a project using GitHub. I've already set up Jenkins with the appropriate plugins. I want Jenkins to run build scripts only whenever someone on the project pushes to master. So far I've been able to set it up so that a build will be triggered anytime anyone pushes to anywhere, but that is too broad. I've done this with post-receive service hooks on Git.\nI've read the Jenkins wiki, and a couple of tutorials, but this particular detail is missing... is it something to do with polling maybe? Or should work be done on the Git side, so that Git only triggers Jenkins when master is changed?"}, {"role": "assistant", "content": "As already noted by gezzed in his comment, meanwhile there is a good solution (described in Polling must die: triggering Jenkins builds from a Git hook):\n\nSet the Jenkins job's build trigger to Poll SCM, but do not specify a schedule.\nCreate a GitHub post-receive trigger to notify the URL\nhttp://yourserver/jenkins/git/notifyCommit?url=<URL of the Git repository>?token=<get token from git to build remotely>\n\nThis will trigger all builds that poll the specified Git repository.\nHowever, polling actually checks whether anything has been pushed to the used branch.\n\nIt works perfectly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I make a pull request on a gist on GitHub?\n\nCan I make a pull request on some else's gist on GitHub?\nI'm aware of the fork, clone and commit workflow for a gist I own. I'd like to know if I can request to update someone else's gist with my fork."}, {"role": "assistant", "content": "You cannot currently open a pull request on a Gist.\nYou can comment though on the Gist and ask the author to update the Gist from your fork."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get certain commit from GitHub project\n\nI need to download the Facebook API from GitHub. Normally, I just click on the 'Downloads\" tab to download the latest source code. In this case, I need an older commit: 91f256424531030a454548693c3a6ca49ca3f35a, but I have no idea how to get the entire project from that commit...\nCan someone please tell me how to do this?\n(BTW, im on a mac. Don't know if that makes any difference)."}, {"role": "assistant", "content": "First, clone the repository using git, e.g. with:\ngit clone git://github.com/facebook/facebook-ios-sdk.git\n\nThat downloads the complete history of the repository, so you can switch to any version.  Next, change into the newly cloned repository:\ncd facebook-ios-sdk\n\n... and use git checkout <COMMIT> to change to the right commit:\ngit checkout 91f25642453\n\nThat will give you a warning, since you're no longer on a branch, and have switched directly to a particular version.  (This is known as \"detached HEAD\" state.)  Since it sounds as if you only want to use this SDK, rather than actively develop it, this isn't something you need to worry about, unless you're interested in finding out more about how git works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Action: Split Long Command into Multiple Lines\n\nI have a Github action command that is really long:\nname: build\n\non: [push]\n\njobs:\n    build:\n        runs-on: ubuntu-18.04\n        steps:\n            - uses: actions/checkout@v1\n            - name: Install Prerequisites\n              run: |\n                sudo apt-get update\n                sudo apt-get install -y --no-install-recommends \"a very very long list of prerequisites\"\n\nMay I know whether it is possible to split the long command into multiple lines for better readability? I have tried the separator '' but it does not work."}, {"role": "assistant", "content": "I have a multi line command using backslash to separate the lines as follows:\n- name: Configure functions\n  run: |\n    firebase functions:config:set \\\n      some.key1=\"${{ secrets.SOME_KEY_1 }}\" \\\n      some.key2=\"${{ secrets.SOME_KEY_2 }}\" \\\n    ...    \n\n\nNote the preceding '|' character, and make sure the subsequent lines after the first one are indented (tabulated)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I add an existing Solution to GitHub from Visual Studio 2013\n\nI have looked through many web pages on the new Git integration in VS 2013 and they do not deal with adding an existing solution to Github.  In fact I can't find much on using GitHub instead of Visual Studio Online.\nCan anyone tell me how I start from an existing solution and add it to Github using the tools in VS 2013."}, {"role": "assistant", "content": "OK this worked for me.\n\nOpen the solution in Visual Studio 2013\nSelect File | Add to Source Control\nSelect the Microsoft Git Provider\n\nThat creates a local GIT repository\n\nSurf to GitHub\nCreate a new repository DO NOT SELECT Initialize this repository with a README \n\nThat creates an empty repository with no Master branch\n\nOnce created open the repository and copy the URL (it's on the right of the screen in the current version)\nGo back to Visual Studio\n\n\nMake sure you have the Microsoft Git Provider selected under Tools/Options/Source Control/Plug-in Selection\n\nOpen Team Explorer\nSelect Home | Unsynced Commits\nEnter the GitHub URL into the yellow box (use HTTPS URL, not the default shown SSH one)\nClick Publish\nSelect Home | Changes\nAdd a Commit comment\nSelect Commit and Push from the drop down\n\nYour solution is now in GitHub"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to copy commits from one Git repo to another?\n\nLast week I created a Github repo and forgot to select a license for the repo. Now there are already 3 large commits.\nI have asked the 3 contributors if it is ok if I delete the repo and then create it again with the same name and this time selecting the license when creating the repo, and they were fine with that.\nQuestion\nIs there a way I can get the commits into the new repo (this time the first commit is the LICENSE file) and still keep the commit meta info?"}, {"role": "assistant", "content": "Is there a way I have get the commits into new repo (this time the first commit is the LICENSE file) and still keep the commit meta info?\n\nYes, by adding a remote and cherry-picking the commits on top of your first commit.\n# add the old repo as a remote repository \ngit remote add oldrepo https://github.com/path/to/oldrepo\n\n# get the old repo commits\ngit remote update\n\n# examine the whole tree\ngit log --all --oneline --graph --decorate\n\n# copy (cherry-pick) the commits from the old repo into your new local one\ngit cherry-pick sha-of-commit-one\ngit cherry-pick sha-of-commit-two\ngit cherry-pick sha-of-commit-three\n\n# check your local repo is correct\ngit log\n\n# send your new tree (repo state) to github\ngit push origin master\n\n# remove the now-unneeded reference to oldrepo\ngit remote remove oldrepo\n\n\nThe rest of this answer is if you still want to add the LICENSE to your previous repo.\nYes. You can place your LICENSE commit as the first commit by rebasing.\nRebasing is gits way of rearranging commit order while keeping all the commit authors and commit dates intact.\nWhen working on a shared repo, it's generally discouraged unless your entire team is git-fluent. For those that aren't, they can just clone a fresh copy of the repository.\nHere's how you get your LICENSE commit as the first commit.\n1. Update and rebase your local copy\nCheck out your project and place the LICENSE file in a commit ON TOP of your current 3 commit stack.\n#create LICENSE file, edit, add content, save\ngit add LICENSE\ngit commit -m 'Initial commit'\n\nThen do an interactive rebase on the master branch to REARRANGE the commits.\ngit rebase -i --root\n\nIt will open an editor.  Move the bottom line (your \"Initial commit\" commit, the most recent commit) to the top of the file. Then save and quit the editor.\nAs soon as you exit the editor, git will write the commits in the order you just specified.\nYou now have your local copy of the repository updated. do:\ngit log\n\nto verify.\n2. Force push your new repo state to github\nNow that your copy is updated, you have to force push it to github.\ngit push -f origin master\n\nThis will tell github to move the master branch to its new location.\nYou should only force push in rare occasions like this where everybody working with it is aware of the pending change, else it will confuse your collaborators.\n3. Synchronize collaborators to github\nLastly, all the collaborators will have to synchronize to this repository.\nFirst they must have clean repositories as the following command can be destructive if there are unsaved changes.\n# make sure there are no unsaved changes\ngit status \n\n# pull the latest version from github\ngit fetch  \n\n# move their master branch pointer to the one you published to github.\ngit reset --hard origin/master\n\nThat's it.  Everybody should be in sync now."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: Can I see the number of downloads for a repo?\n\nIn Github, is there a way I can see the number of downloads for a repo?"}, {"role": "assistant", "content": "Update 2019:\nUstin's answer points to:\n\nAPI /repos/:owner/:repo/traffic/clones, to get the total number of clones and breakdown per day or week, but: only for the last 14 days.\nAPI /repos/:owner/:repo/releases/:release_id for getting downloads number of your assets (files attached to the release), field download_count mentioned below, but, as commented, only for the most recent 30 releases..\n\n\nUpdate 2017\nYou still can use the GitHub API to get the download count for your releases (which is not exactly what was asked)\nSee \"Get a single release\", the download_count field.\nThere is no longer a traffic screen mentioning the number of repo clones.\nInstead, you have to rely on third-party services like:\n\nGitItBack (at www.netguru.co/gititback), but even that does not include the number of clones.\n\ngithubstats0, mentioned below by Aveek Saha.\n\nwww.somsubhra.com/github-release-stats (web archive), mentioned below.\nFor instance, here is the number for the latest git for Windows release\n\n\n\n\nUpdate August 2014\nGitHub also proposes the number of clones for repo in its Traffic Graph:\nSee \"Clone Graphs\"\n\n\nUpdate October 2013\nAs mentioned below by andyberry88, and as I detailed last July, GitHub now proposes releases (see its API), which has a download_count field.\nMichele Milidoni, in his (upvoted) answer, does use that field in his python script.\n(very small extract)\nc.setopt(c.URL, 'https://api.github.com/repos/' + full_name + '/releases')\nfor p in myobj:\n    if \"assets\" in p:\n        for asset in p['assets']:\n            print (asset['name'] + \": \" + str(asset['download_count']) +\n                   \" downloads\")\n\n\nOriginal answer (December 2010)\nI am not sure you can see that information (if it is recorded at all), because I don't see it in the GitHub Repository API:\n$ curl http://github.com/api/v2/yaml/repos/show/schacon/grit\n---\nrepository:\n  :name: grit\n  :owner: schacon\n  :source: mojombo/grit # The original repo at top of the pyramid\n  :parent: defunkt/grit # This repo's direct parent\n  :description: Grit is a Ruby library for extracting information from a\n  git repository in an object oriented manner - this fork tries to\n  intergrate as much pure-ruby functionality as possible\n  :forks: 4\n  :watchers: 67\n  :private: false\n  :url: http://github.com/schacon/grit\n  :fork: true\n  :homepage: http://grit.rubyforge.org/\n  :has_wiki: true\n  :has_issues: false\n  :has_downloads: true\n\nYou can only see if it has downloads or not.\n\nAdam Jagosz reports in the comments:\n\nI got it to work with\n curl -H \"Accept: application/vnd.github.v3+json\"   https://api.github.com/repos/:user/:repo/releases\n\nA couple of things that I had wrong:\n\nI needed an actual Github release (not just git tag, even though Github does display those under releases, ugh).\nAnd the release needs an asset file other than the zipped source that is added automatically in order to get the download count."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between HEAD and master (or main)\n\nWhat is the difference between the HEAD and master in Git?\nI did a clone of a project on GitHub and want to push my changes to the remote. But to which one should I push?"}, {"role": "assistant", "content": "master is a reference to the end of a branch. By convention this is usually the main integration branch, but it doesn't have to be. (As of git v2.28.0, released in July 2020, the default name changed from master to main)\nHEAD is actually a special type of reference that points to another reference. It may point to master/main or it may not (it will point to whichever branch is currently checked out). If you know you want to be committing to the master/main branch then push to this.\nHere is a visual example:\n\nOn your own repository you can check where the HEAD is pointing to by running this:\n$ git symbolic-ref HEAD\nrefs/heads/master\n\nHowever, finding out where the remotes/origin/HEAD is pointing to is more tricky because it is on the remote machine.\nThere is a great little tutorial on git references here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I make a pull request for a wiki page on GitHub?\n\nI saw a wiki page on GitHub that isn't open for editing. Then I forked the project, edited it on \"my end\" and tried to do a pull request. It turns out, the wiki isn't in the project, and there isn't a way to commit changes to it.\nOther than e-mailing, is there a way to proceed if I want to suggest a change on the wiki in this case?\nAt this point I found out what seems like an alternative under \"Questions with similar titles\", but I couldn't do the pull request with it yet, and so I'm not sure submodules is a good way for this purpose. I now see I could probably branch it somehow... So is this the way to go?"}, {"role": "assistant", "content": "GitHub doesn't support pull requests for the wiki repository, only the main repository (this is a bit of a shame, IMO, but I can understand it).\nHere's an interesting way one project manages community updates to their wiki, while still keeping tight control, as for source code:\n\nMy proposed workflow is this:\n\nManually create a fork of the Taffy wiki on your Github account:\n  \n  \nCreate a new repository on your github account. Let's call it \"Taffy-Wiki\".\nClone the Taffy wiki repo to your local machine somewhere: git clone [email\u00a0protected]:atuttle/Taffy.wiki.git\nRemove the original \"origin\" remote and add your github repo as new \"origin\" git remote rm origin and git remote add origin [email\u00a0protected]:<YOUR_USERNAME>/Taffy-Wiki.git\n\nMake your proposed changes locally, then push them to your github account: git push -u origin master ('-u origin master' only required the first time; afterwards just do git push)\nSubmit a ticket to the official Taffy issue tracker requesting me to review your changes and merge them in. Please be sure to include a link to your repo and describe what you've changed.\nGoto #2\n\n\n(From  How you can contribute to Taffy documentation.)\nIf it were me, I'd create an issue in the main repository (that is, the one you forked) suggesting an update to the wiki. If issues aren't enabled, then email's about the only other option I can think of."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get default Git branch?\n\nMy team alternates between usage of dev and master as default branch for several repos and I would like to write a script that checks for the default branch when entering a directory.\nWhen pull requests are opened in some of these repos, they either default to 'dev' or 'master' as the merge target.\nI understand how to set this information but not retrieve it: \nhttps://help.github.com/articles/setting-the-default-branch/\nIs there a git command available to determine default branch for remote repository?"}, {"role": "assistant", "content": "I found a way to detect the default-branch if it is not master.\ngit remote show [your_remote] | sed -n '/HEAD branch/s/.*: //p'\n\nI tested it with multiple repo from gitlab, and it worked fine.\n(for the most situations [your_remote] will be origin, run git remote to check the name of your remote)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github (SSH) via public WIFI, port 22 blocked\n\nI'm currently on a public WIFI spot and I'm unable to use SSH (they probably blocked that port). However, I need that connection to do a git push.\n\u279c ssh -T [email\u00a0protected]\nssh: connect to host github.com port 22: Connection refused\n\nIs it possible to bypass this restriction by setting up a SSH tunnel via port 80 and tell github push to use that connection? How to do that? I'm on OSX (lion). This must be a common problem?"}, {"role": "assistant", "content": "Try this:\n$ vim ~/.ssh/config\n\nAdd\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\nSource: https://help.github.com/articles/using-ssh-over-the-https-port"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does the -u flag mean in git push -u origin master?\n\nI was just wondering what does the -u flag mean in this command? \ngit push -u origin master"}, {"role": "assistant", "content": "The -u option does the following:\nFor every branch that is up to date or successfully pushed, add an upstream (tracking) reference, used by argument-less, git-pull and other commands.\nSo, after pushing your local branch with the -u option, this local branch will be automatically linked with the remote branch, and you can use git pull without any arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I create some kind of table of content in GitHub wiki?\n\nIf you look here: http://en.wikipedia.org/wiki/Stack_Overflow\nYou'll notice there's a little \"Content\" section, if you click on one of the links, it will send you to a specific section on the page.\nHow do I do this in GitHub wiki?  With Markdown or whatever they use?"}, {"role": "assistant", "content": "It is nicely demonstrated in the Table of Contents of the Markdown Cheatsheet.\n##### Table of Contents  \n[Headers](#headers)  \n[Emphasis](#emphasis)  \n...snip...    \n<a name=\"headers\"/>\n## Headers\n\nIf you hover over a Header in a GitHub Markdown file, you'll see a little link sample to the left of it, you can also use that link. The format for that link is <project URL#<header name>. The <header name> must be all lower case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merging changes from master into my branch\n\nI have two branches in git: master and custom_branch.\nSomebody added some code to master that I need to use in my custom_branch. I tried this:\ngit branch custom_branch\ngit merge master\n\nBut when I do that, it says:\nAlready up-to-date.\n\nBut, when I compare master and custom_branch, the changes are still not there. What am I missing?\nP.S. I don't want to rebase since other people also use this branch."}, {"role": "assistant", "content": "git checkout custom_branch && git rebase master\nThis will update custom_branch with changes from master branch.\nDon't forget to make sure master is up to date first. git pull\n\nThis is also possible with git checkout custom_branch && git merge master\n\nFor an explanation on why the first one is (probably) what you should be using: When do you use git rebase instead of git merge?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Markdown Same Page Link\n\nLet's say I have two points within the same git hub wiki page, which for this we'll call place 1 and place 2.  \n##Title\n\n###Place 1\n\nHello, this is some text to fill in this, [here](place2), is a link to the second place.\n\n###Place 2\n\nPlace one has the fun times of linking here, but I can also link back [here](place1).\n\nAn alternative is a ToC.\n##Title\n[ToC]\n###Place 1\n###Place 2\n\nIs there any way to do this?  Note - seen this so I'll assume it's on topic.  Also, that deals with going between files, this one deals with going between the same file."}, {"role": "assistant", "content": "This works on Github:\n## Title\n\n### Place 1\n\nHello, this is some text to fill in this, [here](#place-2), is a link to the second place.\n\n### Place 2\n\nPlace one has the fun times of linking here, but I can also link back [here](#place-1).\n\n### Place's 3: other example\n\nPlace one has the fun times of linking here, but I can also link back [here](#places-3-other-example).\n\nSummary of the conversion rules:\n\npunctuation marks will be dropped\nleading white spaces will be dropped \nupper case will be converted to lower \nspaces between letters will be converted to -\n\nA good example document with plenty of links and formatting is LivingSocial API Design Guide"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unable to Connect to GitHub.com For Cloning\n\nI am trying to clone the angular-phonecat git repository, but I am getting the following message when I enter the command in my Git Bash:\n$ git clone git://github.com/angular/angular-phonecat.git  \nCloning into 'angular-phonecat'...  \nfatal: unable to connect to github.com:  \ngithub.com[0: 204.232.175.90]: errno=No error"}, {"role": "assistant", "content": "You are probably behind a firewall. Try cloning via https \u2013 that has a higher chance of not being blocked:\ngit clone https://github.com/angular/angular-phonecat.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Show current state of Jenkins build on GitHub repo\n\nIs there a way to show the Jenkins build status on my project's GitHub Readme.md? \nI use Jenkins to run continuous integration builds. After each commit it ensures that everything compiles, as well as executes unit and integration tests, before finally producing documentation and release bundles.  \nThere's still a risk of inadvertently committing something that breaks the build. It would be good for users visiting the GitHub project page to know the current master is in that state."}, {"role": "assistant", "content": "Ok, here's how you can set up Jenkins to set GitHub build statuses.  This assumes you've already got Jenkins with the GitHub plugin configured to do builds on every push.\n\nGo to GitHub, log in, go to Settings, Developer Settings, Personal access tokens and click on Generate new token.\n\n\nCheck repo:status (I'm not sure this is necessary, but I did it, and it worked for me).\n\n\nGenerate the token, copy it.\n\nMake sure the GitHub user you're going to use is a repository collaborator (for private repos) or is a member of a team with push and pull access (for organization repos) to the repositories you want to build.\n\nGo to your Jenkins server, log in.\n\nManage Jenkins \u2192 Configure System\n\nUnder GitHub Web Hook select Let Jenkins auto-manage hook URLs, then specify your GitHub username and the OAuth token you got in step 3.\n\n\nVerify that it works with the Test Credential button.  Save the settings.\n\nFind the Jenkins job and add Set build status on GitHub commit to the post-build steps\n\n\n\nThat's it.  Now do a test build and go to GitHub repository to see if it worked.  Click on Branches in the main repository page to see build statuses.\n\nYou should see green checkmarks:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github actions share workspace/artifacts between jobs?\n\nTrying to use Github's beta actions, I have two jobs, one that builds the code and then one that will deploy code. However, I can't seem to get the build artifact in deploy job.\nMy latest attempt is to manually set a container image with the same volumes for each job, according to docs this should be solution: https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idcontainervolumes\n\nSets an array of volumes for the container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host.\n\nWorkflow\nname: CI\non:\n  push:\n    branches:\n    - master\n    paths:\n    - .github/workflows/server.yml\n    - server/*\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container:\n      image: docker://node:10\n      volumes:\n      - /workspace:/github/workspace\n    steps:\n    - uses: actions/checkout@master\n    - run: yarn install\n      working-directory: server\n    - run: yarn build\n      working-directory: server\n    - run: yarn test\n      working-directory: server\n    - run: ls\n      working-directory: server\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    container:\n      image: docker://google/cloud-sdk:latest\n      volumes:\n      - /workspace:/github/workspace\n    steps:\n      - uses: actions/checkout@master\n      - run: ls\n        working-directory: server\n      - run: gcloud --version\n\nThe first job (build) has a build directory, but when the second job (deploy) runs it doesn't and only contains the source code.\nThis project is a mono repo with code I'm trying to deploy being under path server hence all the working-directory flags."}, {"role": "assistant", "content": "You can use the Github Actions upload-artifact and download-artifact to share data between jobs.\nIn job1:\nsteps:\n- uses: actions/checkout@v1\n\n- run: mkdir -p path/to/artifact\n\n- run: echo hello > path/to/artifact/world.txt\n\n- uses: actions/upload-artifact@master\n  with:\n    name: my-artifact\n    path: path/to/artifact\n\nAnd job2:\nsteps:\n- uses: actions/checkout@master\n\n- uses: actions/download-artifact@master\n  with:\n    name: my-artifact\n    path: path/to/artifact\n    \n- run: cat path/to/artifact/world.txt\n\nhttps://github.com/actions/upload-artifact\nhttps://github.com/actions/download-artifact"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I fetch a branch on someone else's fork on GitHub? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to pull remote branch from somebody else's repo\n\n                                (8 answers)\n                            \n\nClosed 7 years ago.\n\n\n\nI've forked from a repo on GitHub. I want to get the code from a branch on another user's fork.  \nMust I clone this user's whole repo to a separate local repo or can I do something like git checkout link_to_the_other_users_branch?"}, {"role": "assistant", "content": "$ git remote add theirusername [email\u00a0protected]:theirusername/reponame.git\n$ git fetch theirusername\n$ git checkout -b mynamefortheirbranch theirusername/theirbranch\n\nNote that there are multiple \"correct\" URIs you can use for the remote when you add it in the first step.\n\n[email\u00a0protected]:theirusername/reponame.git is an SSH-based URI\nhttps://github.com/theirusername/reponame.git is an HTTPS URI\n\nWhich one you prefer to use will depend on your situation. GitHub has a help article explaining the difference and helping you choose: Choosing a URL for your remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to re-open an issue in GitHub?\n\nI have reported an issue to a project. Now the owner changed its state to closed. How can I change it to open again?\nI read somewhere that I need rights for push and pull operations. Is that true?"}, {"role": "assistant", "content": "Github has very simple rights/privileges (and even simpler management for them).\nIf you are not a collaborator of a repo, then (in regards to issues)\n\nyou can open issues\nyou can comment on all existing issues (open or closed)\nyou can close your own issues\nyou can re-open your own issues if you closed them yourself\nyou cannot close or re-open issues opened by someone else\nyou cannot re-open your own issues if a repo collaborator closed them\n\nThe situation you report falls in the last case, so you cannot reopen it. You can ask in the issue thread if a repo collaborator can reopen it, or you can open a new issue and reference the old one (by mentioning its number preceded by a hash sign, e.g. #123)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub clone from pull request?\n\nI would like to clone a repository from GitHub. The problem is I don't want the main branch; I want the version in this unapproved pull request.\nIs it possible for me to clone the pull request version instead of the main repository?"}, {"role": "assistant", "content": "The easiest way to do that is like this:\ngit fetch origin pull/<pr_number>/head:<local_branch_name>\ngit switch <local_branch_name>\n\nYou will now be on a new branch that is on the state of the pull request.\nYou might want to set up an alias by running\ngit config --global alias.pr '!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f'\n\nNow you can checkout any PR by running git pr <pr_number>, or git pr <pr_number> <remote> if your github remote is not named origin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - List commits by author\n\nIs there any way on GitHub to list all commits made by a single author, in the browser (neither locally, e.g. via git log, nor via the API)?\nClicking on a user name in the list of commits (Commit History) simply leads to that user's profile page. Examining the GitHub UI and searching (Google, StackOverflow) does not reveal a way to do this."}, {"role": "assistant", "content": "If the author has a GitHub account, just click the author's username from anywhere in the commit history, and the commits you can see will be filtered down to those by that author:\n\nYou can also click the 'n commits' link below their name on the repo's \"contributors\" page:\n\nAlternatively, you can directly append ?author=<theusername> or ?author=<emailaddress> to the URL. For example, https://github.com/jquery/jquery/commits/master?author=dmethvin or https://github.com/jquery/jquery/commits/[email\u00a0protected] both give me:\n\nFor authors without a GitHub account, only filtering by email address will work, and you will need to manually add ?author=<emailaddress> to the URL - the author's name will not be clickable from the commits list.\n\nYou can also get the list of commits by a particular author from the command line using\ngit log --author=[your git name]\n\nExample:\ngit log --author=Prem"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Understanding the basics of Git and GitHub [closed]\n\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI don't fully understand the purpose of using Git or Github; I know it helps to keep track of your changes and it's helpful for people collaborating with other people, but I don't collaborate with anybody so I don't know if this would be helpful for me.\nI usually work as a web designer/developer but I never have to collaborate. I know in Git you have create, push, commit, create branches etc for every repository but...\n\nWhat is the difference between Git and GitHub?\nIs git saving every repository locally (in the user's machine) and in GitHub?\nCan you use Git without GitHub? If yes, what would be the benefit for using GitHub?\nHow does Git compare to a backup system such as Time Machine?\nIs this a manual process, in other words if you don't commit you wont have a new version of the changes made?\nIf are not collaborating and you are already using a backup system why would you use Git?"}, {"role": "assistant", "content": "What is the difference between Git and GitHub?\n\nGit is a version control system; think of it as a series of snapshots (commits) of your code. You see a path of these snapshots, in which order they where created. You can make branches to experiment and come back to snapshots you took.\nGitHub, is a web-page on which you can publish your Git repositories and collaborate with other people.\n\nIs Git saving every repository locally (in the user's machine) and in GitHub?\n\nNo, it's only local. You can decide to push (publish) some branches on GitHub.\n\nCan you use Git without GitHub? If yes, what would be the benefit for using GitHub?\n\nYes, Git runs local if you don't use GitHub. An alternative to using GitHub could be running Git on files hosted on Dropbox, but GitHub is a more streamlined service as it was made especially for Git.\n\nHow does Git compare to a backup system such as Time Machine?\n\nIt's a different thing, Git lets you track changes and your development process. If you use Git with GitHub, it becomes effectively a backup. However usually you would not push all the time to GitHub, at which point you do not have a full backup if things go wrong. \nI use git in a folder that is synchronized with Dropbox.\n\nIs this a manual process, in other words if you don't commit you won't have a new version of the changes made?\n\nYes, committing and pushing are both manual.\n\nIf are not collaborating and you are already using a backup system why would you use Git?\n\n\nIf you encounter an error between commits you can use the command git diff to see the differences between the current code and the last working commit, helping you to locate your error.\nYou can also just go back to the last working commit.\nIf you want to try a change, but are not sure that it will work. You create a branch to test you code change. If it works fine, you merge it to the main branch. If it does not you just throw the branch away and go back to the main branch.\nYou did some debugging. Before you commit you always look at the changes from the last commit. You see your debug print statement that you forgot to delete.\n\n\nMake sure you check gitimmersion.com."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Forking Git repository from GitHub to GitLab\n\nSuppose that I would like to implement a fix to a project of someone else. That project resides on GitHub.\nI could create a fork on GitHub and implement the fix.\nHowever, I would like to create my fork on GitLab rather than on GitHub.\nIs that possible? How?\nI have read this article:\nhttps://about.gitlab.com/2016/12/01/how-to-keep-your-fork-up-to-date-with-its-origin/\nAnyway, I am not sure what should I do in my case.\n\nShould I just create a fork on GitLab of the project from GitHub somehow?\nOr should I create a mirror on GitLab of the project from GitHub?\nOr should I create a mirror on GitLab and then fork the mirror?\nOr should I do  something completely different?\n\nWhat is the correct approach.\nThanks.\nUPDATE\nRepository mirroring on GitLab does not make sense probably. I can create a mirror of MY GitHub repository on GitLab but I cannot create a mirror of a repository of someone else.\nhttps://docs.gitlab.com/ee/user/project/repository/mirror/\nThis is what I have done so far:\nI have cloned the original GitHub project to my local machine. I have commited the fix to a new branch in my local repository. I have created an empty project on GitLab. I have set origin in my local repository to that empty project on GitLab and pushed both branches to GitLab. I have set upstream in my local repository to the GitHub repository.\nWhen I want to get new commits from the original GitHub repository to the repository on GitLab (i.e. sync the repositories), I can do this using my local repo as an intermediate step. However, there is no direct connection between the repo on GitHub and the repo on GitLab. Is my setup correct? Is there any difference if I make a fork on GitHub?"}, {"role": "assistant", "content": "If you just want to track changes, first make an empty repository in GitLab (or whatever else you may be using) and clone it to your computer.\nThen add the GitHub project as the \"upstream\" remote with:\ngit remote add upstream https://github.com/user/repo\n\nNow you can fetch and pull from the upstream should there be any changes. (You can also push or merge to it if you have access rights.)\ngit pull upstream master\n\nFinally, push back to your own GitLab repository:\ngit push origin master\n\nIf you don't want to manually pull upstream/push origin, GitLab offers a mirroring ability in Settings => Repository => Mirroring repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: fatal: Pathspec is in submodule\n\nI'm trying to get TravisCI to automatically deploy my Hakyll static site, according to this guide.\nHere's how my repo is set up. I have my source branch, which contains my hakyll and markdown files. It builds the html into the _site directory, which is set up as a submodule, linked to my master branch.\nI build the site without problem, then cd into the _site directory. However, when I try to git add ./* the newly generated HTML files, I get the following error:\nfatal: Pathspec './about.html' is in submodule '_site'\n\nWhen I try git add --all, I get this error:\ngit: pathspec.c:317: prefix_pathspec: Assertion `item->nowildcard_len <= item->len && item->prefix <= item->len' failed.\n\n/home/travis/build.sh: line 245: 1566 Aborted git add --all\n\nWhat is causing this, and how can I avoid this?\nYou can view the repository here."}, {"role": "assistant", "content": "Removing the directory from git and adding it again worked for me:\n git rm --cached directory\n git add directory\n\nThis works if you purposefully removed the .git directory because you wanted to add directory to your main git project. In my specific case, I had git cloned an extension and ran git add . without thinking too much. Git decided to create a submodule, which I didn't like. So I removed directory/.git and ran into Git: fatal: Pathspec is in submodule. I couldn't find out how to remove the submodule stuff. Fixed with the two lines above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I clone a GitHub wiki?\n\nHow do I clone my GitHub repository's wiki? I know it's saved as a separate Git repository, but I can't remember the path.\nI've tried ...reponame/wiki.git and ...reponame.git/wiki, but neither are correct."}, {"role": "assistant", "content": "Append .wiki.git to the repository name.\nThat is, if your repository name was foobar:\ngit clone [email\u00a0protected]:myusername/foobar.git would be the path to clone your repository\nand\ngit clone [email\u00a0protected]:myusername/foobar.wiki.git would be the path to clone its wiki.\nNote: You must have at least one page to be able to clone the wiki repo. (via @tobiasz-cudnik)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I push to my fork from a clone of the original repo?\n\nI created a fork (let's call it myrepo) of another repository (let's call it orirepo) on GitHub. Later, I cloned orirepo.\ngit clone https://github.com/original/orirepo.git\n\nI modified about 20 files, then I staged my change and made a commit\ngit add\ngit commit\n\nHowever, when I tried to push\ngit push\n\nI got this error:\nremote: Permission to original/orirepo.git denied to mylogin.\nfatal: unable to access 'https://github.com/original/orirepo.git/': The requested URL returned error: 403\n\nI know I made a mistake: I should have cloned my fork rather than orirepo, but it's too late for that now.\nHow could I push to my fork rather than to origin/orirepo, which I don't have write access to?"}, {"role": "assistant", "content": "By default, when you clone a repository\n\nthat resides at https://github.com/original/orirepo.git,\nwhose current branch is called master,\n\nthen\n\nthe local config of the resulting clone lists only one remote called origin, which is associated with the URL of the repository you cloned;\nthe local master branch in your clone is set to track origin/master.\n\nTherefore, if you don't modify the config of your clone, Git interprets\ngit push\n\nas\ngit push origin master:origin/master\n\nIn other words, git push attempts to push your local master branch to the master branch that resides on the remote repository (known by your clone as origin). However, you're not allowed to do that, because you don't have write access to that remote repository.\nYou need to\n\neither redefine the origin remote to be associated with your fork, by running\ngit remote set-url origin https://github.com/RemiB/myrepo.git\n\nor, if you want to preserve the original definition of the origin remote, define a new remote (called myrepo, here) that is associated to your fork:\ngit remote add myrepo https://github.com/RemiB/myrepo.git\n\nThen you should be able to push your local master branch to your fork  by running\ngit push myrepo master\n\nAnd if you want to tell Git that git push should push to myrepo instead of origin from now on, you should run\ngit push -u myrepo master\n\n\ninstead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly\n\nI have followed these instructions below to upload a project. \nGlobal setup:\n Download and install Git\n  git config --global user.name \"Your Name\"\n  git config --global user.email [email\u00a0protected]\n  Add your public key\n\n\nNext steps:\n\n  mkdir tirengarfio\n  cd tirengarfio\n  git init\n  touch README\n  git add README\n  git commit -m 'first commit'\n  git remote add origin [email\u00a0protected]:tirenga/tirenga.git\n  git push origin master\n\nBut I get this error:\n\nPermission denied (publickey). fatal:\n  The remote end hung up unexpectedly"}, {"role": "assistant", "content": "I had to add my public key to github. https://help.github.com/articles/generating-ssh-keys"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "There isn't anything to compare. Nothing to compare, branches are entirely different commit histories\n\nI have a CMS theme installed on my machine. I'm tracking changes to it via git\nand decided to back it up on GitHub so I could share those changes.\nThe theme as provided is also available on GitHub. On my machine I have added\nthis as a remote upstream. Now I can easily see the changes between my master\nand the remote upstream by using the following command:\ngit diff --color master upstream/number\n\nIf I could add the remote upstream on GitHub I could easily share these changes.\nIs it possible to set this relationship on GitHub?\nI have tried the following:\ngit push -u origin upstreambranch\n\nwhich adds an upstreambranch to the master on GitHub. However trying to\ncompare both branches doesn't work, the result I get on GitHub is that: \"There\nisn't anything to compare\"\nIs there an alternative way to compare these?"}, {"role": "assistant", "content": "If the problem is \"main and master are entirely different commit histories.\", the following will work\ngit checkout master   \ngit branch main master -f    \ngit checkout main  \ngit push origin main -f"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Clone from GitHub over https with two-factor authentication\n\nI recently began using two-factor authentication on GitHub, and I am now unable to use git over https on private repos in the usual way:\npeter@computer:~$ git clone https://github.com/[...]/MyPrivateRepo\nCloning into 'MyPrivateRepo'...\nUsername for 'https://github.com': [...]\nPassword for 'https://[...]@github.com': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/[...]/MyPrivateRepo/'\n\nIf I disable two-factor authentication I can use it as before:\npeter@computer:~$ git clone https://github.com/[...]/MyPrivateRepo\nCloning into 'MyPrivateRepo'...\nUsername for 'https://github.com': [...]\nPassword for 'https://[...]@github.com': \nremote: Counting objects: 147, done.\nremote: Total 147 (delta 0), reused 0 (delta 0), pack-reused 147\nReceiving objects: 100% (147/147), 22.70 KiB | 0 bytes/s, done.\nResolving deltas: 100% (87/87), done.\nChecking connectivity... done.\n\nI know I can use SSH and everything works, but is there a way I can keep two-factor authentication while still being able to use GitHub over HTTPS, for example by sending an auth token with my request?"}, {"role": "assistant", "content": "Find out how to fix this here:\nhttps://github.com/blog/1614-two-factor-authentication#how-does-it-work-for-command-line-git\n\nHow does it work for command-line Git?\nIf you are using SSH for Git authentication, rest easy: you don't need to do anything. If you are using HTTPS Git, instead of entering your password, enter a personal access token. These can be created by going to your personal access tokens page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push: \"fatal 'origin' does not appear to be a git repository - fatal Could not read from remote repository.\"\n\nI know similar questions have already been asked.\nBut, I believe my issue is due to a mistake I have previously made and therefore is different: let me explain.\nEverything was working smoothly, as I could:\n\ngit add . all the files from my local repository.\ngit commit -m \"message here\" to add messages to my commits.\ngit push origin master to upload my files to GitHub.\ngit push heroku master to upload my files to Heroku.\n\nHowever, at some point, I created a new branch locally called add-calendar-model in case next steps of the app development would go south...\n... which is exactly what happened.\nHowever, despite many attempts, I did not manage to get the initial code \u2014 i.e. the code from before I created the new branch \u2014 from the master branch to my local repository.\nSo, I decided to manually delete all the files from my local repository and git clone my master branch from GitHub.\nThis way, I got all my files back, but now, I cannot push any more to the remote repository.\nAny time I try to run git push origin add-calendar-model or git push origin master, I get the following error:\nfatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nI am not very comfortable with Git and GitHub, as you may have guessed by now, and I have to admit that I have no clue about how to fix this.\nAny idea?"}, {"role": "assistant", "content": "First, check that your origin is set by running\ngit remote -v\n\nThis should show you all of the push / fetch remotes for the project.\nIf this returns with no output, skip to last code block.\nVerify remote name / address\nIf this returns showing that you have remotes set, check that the name of the remote matches the remote you are using in your commands.\n$git remote -v\nmyOrigin ssh://[email\u00a0protected]:1234/myRepo.git (fetch)\nmyOrigin ssh://[email\u00a0protected]:1234/myRepo.git (push)\n\n# this will fail because `origin` is not set\n$git push origin main\n\n# you need to use\n$git push myOrigin main\n\nIf you want to rename the remote or change the remote's URL, you'll want to first remove the old remote, and then add the correct one.\nRemove the old remote\n$git remote remove myOrigin\n\nAdd missing remote\nYou can then add in the proper remote using\n$git remote add origin ssh://[email\u00a0protected]:1234/myRepo.git\n\n# this will now work as expected\n$git push origin main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Maintain git repo inside another git repo\n\nHere's what I'd like:\nREPO-A\n  /.git\n  /otherFiles\n  /REPO-B\n    /.git\n    /moreFiles\n\nI want to be able to push all of REPO-A's contents to REMOTE-A and only REPO-B to REMOTE-B.\nPossible?"}, {"role": "assistant", "content": "It sounds like you want to use Git submodules.\n\nGit addresses this issue using submodules. Submodules allow you to keep a Git repository as a subdirectory of another Git repository. This lets you clone another repository into your project and keep your commits separate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to modify a pull request on GitHub to change target branch to merge into?\n\nI have a pull request that is requesting a merge into master from my branch, but the owner wants me to change the request to merge into a different branch from my branch.\nIs this possible? What are the possible solutions?"}, {"role": "assistant", "content": "Update August 2016: Change the base branch of a Pull Request finally allows for changing that branch.\n(And this closes issue 18, which was 3 years old and had 1500+ comments)\n\nAfter you\u2019ve created a pull request, you can modify the base branch so that the changes in the pull request are compared against a different branch.\n\n\nAs noted in the comments byspazm:\n\nIt is (and was) working.\nChanging target branch is not enabled while the PR is closed.\nSolution was to \"reopen\" the PR (meaning by using the option in the UI) and then change the target branch\n\n\nOriginal answer:\nSince a PR cannot be edited in term of branch (see below), the easiest way would be to:\n\ncreate a local new branch on top of your current branch\npush that new branch\nmake a new PR with the right destination.\nclose the previous PR\nreference the \"old\" pull request from the new one; eg. Supersedes #123 (as commented below by Rivera)\n\n\n(original answer, valid only when creating the PR)\nYou could try and chose another base branch, as in \"Changing the branch range and destination repository\" (Clicking on the Edit button at the top of a PR page)\n\n\nThe easiest way of thinking about the branch range is this:\n\nthe base branch is where you think changes should be applied,\nthe head branch is what you would like to be applied.\n\nChanging the base repository changes who is notified of the pull request.\nEveryone that can push to the base repository will receive an email notification and see the new pull request in their dashboard the next time they sign in.\n\nIf you select as a base branch the one that the original maintainer (the owner) wants, your PR should merge from your branch (unchanged) to the new base branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I tell who forked my repository on GitHub?\n\nIs there a way to know who has forked my repository on GitHub? I can see the number of forks, but I'd like to know who forked my repository and what kind of changes they made to it.\nI know they can send me a pull request if they're interested in contributing back to my repository, but is there some other way for me to find out who forked my repository?"}, {"role": "assistant", "content": "Clicking the number of forks shows you the full network. From there you can click \"members\" to see who forked the repo. Example for ExpressJS: https://github.com/expressjs/express/network/members."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub commits aren't recorded in the 'Your Contributions` calendar\n\nI've been making continuous commits to my GitHub repos from my Linux shell and they show up nicely on the website just as they should. The only problem is that \"Your Contributions\" section doesn't show any recent activity. I have one green square from some day in November which I don't know how I got but all the other contributions don't show up in the calendar (but again, they do  show up in their repos).\nWhat am I missing here?\nMy github site"}, {"role": "assistant", "content": "For me this problem was caused by me committing from my work computer where I was using a different email in my gitconfig.  Adding my work email address to my github account didn't make the past commits show up in the summary, but new commits are now showing up as they should.\nYou can find the email address you are using for a repository with git config user.email."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git:// protocol blocked by company, how can I get around that?\n\nAttempting something like git clone git://github.com/ry/node.git will not work, it results in:\nInitialized empty Git repository in /home/robert/node/.git/\ngithub.com[0: 207.97.227.239]: errno=Connection timed out\nfatal: unable to connect a socket (Connection timed out)\n\nHowever, cloning over HTTP works fine. So far I've gathered that it's a problem with the protocol, but I'm trying to install cloud9 which is requiring the command \ngit submodule update --init --recursive\nwhich is trying to use the git:// protocol and failing. Is there a way to change how that command will work or something?"}, {"role": "assistant", "content": "If this is an issue with your firewall blocking the git: protocol port (9418), then you should make a more persistent change so you don't have to remember to issue commands suggested by other posts for every git repo.\nThe below solution also just works for submodules which might also be using the git: protocol.\nSince the git message doesn't really point immediately to the firewall blocking port 9418, lets try to diagnose this as the actual problem.\nDiagnosing the Problem\nReferences: https://superuser.com/q/621870/203918 and https://unix.stackexchange.com/q/11756/57414\nThere are several tools we can use to determine if the firewall causing our problem - use whichever is installed on your system.\n# Using nmap\n# A state of \"filtered\" against port 9418 (git) means\n#   that traffic is being filtered by a firewall\n$ nmap github.com -p http,git\n\nStarting Nmap 5.21 ( http://nmap.org ) at 2015-01-21 10:55 ACDT\nNmap scan report for github.com (192.30.252.131)\nHost is up (0.24s latency).\nPORT     STATE    SERVICE\n80/tcp   open     http\n9418/tcp filtered git\n\n# Using Netcat:\n# Returns 0 if the git protocol port IS NOT blocked\n# Returns 1 if the git protocol port IS blocked\n$ nc github.com 9418 < /dev/null; echo $?\n1\n\n# Using CURL\n# Returns an exit code of (7) if the git protocol port IS blocked\n# Returns no output if the git protocol port IS NOT blocked\n$ curl  http://github.com:9418\ncurl: (7) couldn't connect to host\n\nOK, so now we have determined it is our git port being blocked by a firewall, what can we do about it? Read on :)\nBasic URL Rewriting\nGit provides a way to rewrite URLs using git config. Simply issue the following command:\ngit config --global url.\"https://\".insteadOf git://\n\nNow, as if by magic, all git commands will perform a substitution of git:// to https://\nWhat Changes Did This Command Make?\nTake a look at your global configuration using:\ngit config --list\n\nYou'll see the following line in the output:\nurl.https://.insteadof=git://\n\nYou can see how this looks on file, by taking a peek at ~/.gitconfig where you should now see that the following two lines have been added:\n[url \"https://\"]\n    insteadOf = git://\n\nWant More Control?\nSimply use a more complete/specific URL in the replacement. For example, to only have GitHub URLs use https:// instead of git://, you could use something like:\ngit config --global url.\"https://github\".insteadOf git://github\n\nYou can run this command multiple times using different replacements. However, in the event that a URL matches multiple replacements, the longest match \"wins\". Only a single replacement will be made per URL.\nSystem-Wide Changes for Sysadmins\nIf you're a Linux Sysadmin and you don't want your users to have to go through the above pains you can make a quick system-wide git configuration change.\nSimply edit or add the following contents to /etc/gitconfig and voila your users don't have to worry about any of the above:\n[url \"https://\"]\n    insteadOf = git://"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Pull from other remote\n\nI have created a fork from a project on GitHub.\nHow can I now pull changes from the project that I forked from?"}, {"role": "assistant", "content": "git pull is really just a shorthand for git pull <remote> <branchname>, in most cases it's equivalent to git pull origin master. You will need to add another remote and pull explicitly from it. This page describes it in detail:\nhttp://help.github.com/forking/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Show history of a file? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 11 years ago.\n\n\n\n\nPossible Duplicate:\nView the change history of a file using Git versioning \n\nSometimes I want to step through the history of a particular file. In the past I used P4V and this was very quick and intuitive. \n\nRight click on a file and select history.\nScrolling through the dates and see a nice diff of exactly what changed in that file on that date. Simple.\n\nSwitching to git this is now a grueling task. \n\n\"git log filename\"\nLook at history and pick a date, copy hash\n\"git diff hash\"\nScroll through diff for the stuff that changed in the file I am interested in.\nNope, that's not it, lets try a different date - back to step 2, rinse and repeat.\n\nI've searched SO, and I've tried a few of the commonly suggested guis: github, gitk, gitg, git-gui.\nThese all remove the need to manually run commands, but the workflow is the same for this. View history of file; view commit; search through diff of lots of irrelevant files. It's slow and repetitive.\nAll the data is in the repo so I see no reason this simple common use case could not be more streamlined.\nCan anyone recommend a tool that does this - or a more efficient way to utilize the command line to do what I want?\nThanks for any suggestions."}, {"role": "assistant", "content": "You can use git log to display the diffs while searching:\ngit log -p -- path/to/file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github/git Checkout Returns 'error: invalid path' on Windows\n\nWhen I attempt to checkout a repository from github I get the error:\nerror: invalid path 'configs/perl-modules/DIST.64/perl-HTML-Tree-1:5.03-1.el6.noarch.rpm'\n\nI suspect the issue is that the path contains a : which is illegal on Windows.\nAfter researching the error, I've found 2 possible answers:\n1) Change the path on the repository file.  Unfortunately, this is is a team resource and can not be fixed in the foreseeable future.  \n2) Use sparse-checkout.  I've tried this with no effect as evidenced in the following:\n\n$ git clone -n [email\u00a0protected]:XXXXXX/deploy.git \nCloning into 'deploy'... \nremote: Enumerating objects: 57, done. \nremote: Counting objects: 100% (57/57), done. \nremote: Compressing objects: 100% (49/49), done. \nremote: Total 86457 (delta 10), reused 22 (delta 8), pack-reused 86400 \nReceiving objects: 100% (86457/86457), 1.50 GiB | 4.73 MiB/s, done. \nResolving deltas: 100% (59779/59779), done. \n$ cd deploy/ \n$ git config core.sparsecheckout true \n$ echo www >> .git/info/sparse-checkout \n$ git checkout centos6 \nerror: invalid path 'configs/perl-modules/DIST.64/perl-HTML-Tree-1:5.03-1.el6.noarch.rpm'\nerror: invalid path 'configs/perlbrew/perls/perl-5.24.1/man/man3/App::Cpan.3'\n.\n. (repeat for many files)\n.\n\nThis was done with Git for Windows \"git version 2.28.0.windows.1\".  I have also tried both types of line endings and using various version of .git/info/sparse-checkout such as:\n/*\n!/configs/perl-modules\n!/configs/perlbrew/perls/perl-5.24.1/man/man3\n\nCheckout works fine on Linux, MacOS and WSL, only problem is that my IDEs don't work there.  Why isn't sparse-checkout working on Windows.  Is there any other possibilities?"}, {"role": "assistant", "content": "After I opened an issue on the git-for-windows bug tracker (https://github.com/git-for-windows/git/issues/2803), I found that my issue had already been filed as https://github.com/git-for-windows/git/issues/2777.  That issue suggested that I need to set another git flag:\ngit config core.protectNTFS false\n\nThis (#2777) indeed contains a bypass for the my problem.  I hope the git or git-for-windows (who were very responsive) come up with a better warning message, or even a true fix like a filepath mapping scheme.\nNote that this is only an issue when using sparse-checkout with windows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Conda: Installing / upgrading directly from github\n\nCan I install/upgrade packages from GitHub using conda?\nFor example, with pip I can do:\npip install git+git://github.com/scrappy/scrappy@master\n\nto install scrappy directly from the master branch in GitHub. Can I do something equivalent with conda?\nIf this is not possible, would it make any sense to install pip with conda and manage such local installations with pip?"}, {"role": "assistant", "content": "The answers are outdated. You simply have to conda install pip and git. Then you can use pip normally:\n\nActivate your conda environment source activate myenv\nconda install git pip \npip install git+git://github.com/scrappy/scrappy@master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase fatal: Needed a single revision\n\nI have a branch of a public repository and I am trying to update my branch with the current commits from the original repository:\n$ git fetch <remote>\nremote: Counting objects: 24, done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 20 (delta 12), reused 0 (delta 0)\nUnpacking objects: 100% (20/20), done.\nFrom git://github.com/path_to/repo\n  9b70165..22127d0  master     -> $/master\n$ git rebase <remote>\nfatal: Needed a single revision\ninvalid upstream <remote>\n\nThe <remote> is in place of my remote name and is not actually my remote name. The documentation on this error seems to be a bit loose."}, {"role": "assistant", "content": "You need to provide the name of a branch (or other commit identifier), not the name of a remote to git rebase.\nE.g.:\ngit rebase origin/master\n\nnot:\ngit rebase origin\n\nNote, although origin should resolve to the the ref origin/HEAD when used as an argument where a commit reference is required, it seems that not every repository gains such a reference so it may not (and in your case doesn't) work. It pays to be explicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Searching code in a specific GitHub branch\n\nI am trying to search some code in a branch in a GitHub repository.\nHowever this indicates that I can only search the default branch.\nIs there a way I can search code in non-default branch in my GitHub repository?"}, {"role": "assistant", "content": "Not from the GitHub web interface itself, as mentioned in \"How can I search for a commit message on GitHub?\": only the default branch (generally master) is indexed.\nYour best bet is to clone the repository, and there, search in all branches (with git log -S for instance)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push hangs when pushing to Github?\n\nGit push hangs everytime I try to push to github. I am using Cygwin and Windows 7. Git functions fine locally tracking branches, providing status, setting global user.name and user.email and allowing commits. \nI'm still new and learning.\nI enter git push , git push origin master or git push -u origin master and I get nothing but a blank line requiring me to ctl-c to get the prompt back. \nssh-keygen -t rsa -C \"[email\u00a0protected]\" asks me for a file name and hangs\ngit push heroku master hangs\n$ git status returns On branch master nothing to commit, working directory clean\n$ git pull returns Already up to date\n$ git remote -v returns:\nheroku  [email\u00a0protected]:myherokusite.git (fetch)\n\nheroku  [email\u00a0protected]:myherokusite.git (push) origin  \n\nhttps://github.com/gitusername/appname.git (fetch) origin  \n\nhttps://github.com/gitusername/appname.git (push)\n\nor the correct ssh remote settings are returned when trying this with ssh\n\nUpdated: Using the SSH url [email\u00a0protected]:gitusername/gitrepo.git also hangs\ngit remote set-url origin https://github.com/gitusername/appname.git is correct\nUpdated: I can see the git processes running in Windows Task Manager while it hangs.\nI've tried:\nUsing different internet connection locations\nswitching between https and ssh and it hangs\nUninstalled git. Reinstalled from: https://code.google.com/p/msysgit/downloads/list \nUninstalled git. Installed Cygwin's git\nUninstalled git. Installed Github for Windows GUI app and it I WAS able to push. But this app has limited functionality, forces me out of my Cygwin window into another app which then forces me into a Windows command prompt for complete functionality which I thought I had escaped by using Cygwin. \nSpent many, many hours trying to resolve this, it worked faultlessly before, thanks.\nUPDATE 4/2014: I rebuilt my entire machine Win 7, Cygwin etc and all is now working fine"}, {"role": "assistant", "content": "Restart your ssh agent!\nkillall ssh-agent; eval `ssh-agent`"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install and build of forked github repo\n\nI'm using a module for my angular app called angular-translate. However, I've had to make a few small modifications to the source code to get everything working the way I'd like, and now I want to persist those changes on npm install. A colleague suggested that I fork the repo of the source code and point to my forked repo as a dependency, which I've tried in these ways, e.g.\nnpm install https://github.com/myRepo/angular-translate\nnpm install https://github.com/myRepo/angular-translate/archive/master.tar.gz\n\nThe first gives me a directory like this with no build. Just a package.json, .npmignore, and some markdown files\n-angular-translate\n   .npmignore \n   .nvmrc\n    CHANGELOG.md \n    package.json\n    etc\n\nThe second npm install gives me the full repo, but again I don't get a build like when I use the command npm install angular-translate.  I've seen some dicussion of running the prepublish script, but I'm not sure how to do this when installing all the modules.  I've also tried publishing the fork as my own module to the npm registry, but again I get no build, and I'm not sure that's the right thing to do...\nI apologise for my ignorance on the topic.  I don't have a huge amount of experience with npm. Would love to get some feedback on this issue.  It seems like it could be a  common enough issue when modifications need to be made to a package's source code? Maybe there's a better solution?"}, {"role": "assistant", "content": "Try npm install <ghusername>/<repoName>, where <ghUsername> is your GitHub username (without the @) and <repoName> is the name of the repository. That should correctly install it. You will most likely want to use the --save or --save-dev flag with the install command to save dependency in your package.json.\nIf that isn't working correctly, check the contents of your .npmignore file.\nDon't panic if the install command takes a long time; installing from a git repository is slower than installing from the npm registry.\n\nEdit:\nYour problem is that in your case, dist/ is not committed to the repo (since it is in the .gitignore). That is where the actual code lives. dist/ is built from the files in src/ before the package is published to the npm registry, but dist/ is never committed to the repo.\nIt's ugly, but in this case you will have to remove dist/ from the .gitignore and then run:\nnpm run build\ngit add .\ngit commit\ngit push\n\n(Ensure that you have run npm install first)\nYou then should be able to install from github.\nThere might be another way to do this using a prepare script, but I'm not sure if that's possible; I've never tried it. Edit: Cameron Tacklind has written an excellent answer detailing how to do this: https://stackoverflow.com/a/57829251/7127751"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I reference an existing branch from an issue in GitHub?\n\nLet's say I have a branch named feature/1. And also issue #1. I want to link that branch to that issue.\nIs there a way to link that branch to that issue from the issue? Without making a commit."}, {"role": "assistant", "content": "Directly from GitHub:\n\nReferences\nCertain references are auto-linked:\n\nSHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\n#Num: #1\nUser/#Num: mojombo#1\nUser/Project#Num: mojombo/god#1\n\n\nIt seems that directly (as in user/repo/branch) is not possible, but maybe by using the id of the tree?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push origin master error on new repository\n\nI just started using git with github. I followed their instructions and ran into errors on the last step. I'm checking in an existing directory that isn't currently source-controlled (project about a week old). Other than that, my use case should be pretty run of the mill.\nHere's what's happening:\n$ git push origin master\nerror: src refspec master does not match any.\nfatal: The remote end hung up unexpectedly\nerror: failed to push some refs to '[email\u00a0protected]:{username}/{projectname}.git'\n\nGithub's instructions:\nGlobal setup:\n\n  Download and install Git\n  git config --global user.name \"Your Name\"\n  git config --global user.email {username}@gmail.com\n\nNext steps:\n\n  mkdir projectname\n  cd projectname\n  git init\n  touch README\n  git add README\n  git commit -m 'first commit'\n  git remote add origin [email\u00a0protected]:{username}/{projectname}.git\n  git push origin master"}, {"role": "assistant", "content": "I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.\ngit add -A\ngit commit -am \"message\"\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is \"origin/HEAD\" shown when running \"git branch -r\"?\n\nWhen you run git branch -r why the blazes does it list origin/HEAD? For example, there's a remote repo on GitHub, say, with two branches: master and awesome-feature. If I do git clone to grab it and then go into my new directory and list the branches, I see this:\n$ git branch -r\norigin/HEAD\norigin/master\norigin/awesome-feature\n\nOr whatever order it would be in (alpha? I'm faking this example to keep the identity of an innocent repo secret). So what's the HEAD business? Is it what the last person to push had their HEAD pointed at when they pushed? Won't that always be whatever it was they pushed? HEADs move around... why do I care what someone's HEAD pointed at on another machine?\nI'm just getting a handle on remote tracking and such, so this is one lingering confusion. Thanks!\nEDIT: I was under the impression that dedicated remote repos (like GitHub where no one will ssh in and work on that code, but only pull or push, etc) didn't and shouldn't have a HEAD because there was, basically, no working copy. Not so?"}, {"role": "assistant", "content": "@robinst is correct.\nIn git, you can select which branch is checked out by default (i.e. when you clone). By default, origin/HEAD will point at that.\nOn GitHub, You can change this in the Admin settings for your GitHub repo. You can also do it from the command-line via\ngit remote set-head origin trunk\n\nor delete it altogether via\ngit remote set-head origin -d\n\nExample. Look at the 'Switch Branches' drop-down. trunk is checked, so origin/HEAD follows trunk."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete local Git branches after deleting them on the remote repo\n\nI want to have my local and remote repositories always in sync in terms of branches.\nAfter a Pull Request review on GitHub, I merge and remove my branch there (remote).\nHow could I fetch this information in my local repository and get Git to remove my local version of the branch as well?"}, {"role": "assistant", "content": "The quick way\ngit branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d\n\nNB: if you're not on master, this has the potential to delete the branch. Keep reading for the \"better way\".\nMake sure we keep master\nYou can ensure that master, or any other branch for that matter, doesn't get removed by greping for more. In that case you would go:\ngit branch --merged | grep -v \"\\*\" | grep -v \"YOUR_BRANCH_TO_KEEP\" | xargs -n 1 git branch -d\n\nSo if we wanted to keep master, develop and staging for instance, we would go:\ngit branch --merged | grep -v \"\\*\" | grep -Ev \"(\\*|master|develop|staging)\" | xargs -n 1 git branch -d\n\nMake this an alias\nSince it's a bit long, you might want to add an alias to your .zshrc or .bashrc. Mine is called gbpurge (for git branches purge):\nalias gbpurge='git branch --merged | grep -Ev \"(\\*|master|develop|staging)\" | xargs -n 1 git branch -d'\n\nThen reload your .bashrc or .zshrc:\n. ~/.bashrc\n\nor\n. ~/.zshrc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Differences between Commit, Commit and Push, Commit and Sync\n\nI'm using visual studio 2013, and I'm faced with 3 options for when I commit my C# code. I need an explanation of the differences between each of the options with regards to what happens to my local repo vs. the GitHub repo. \n\nOption 1 says Commit\nOption 2 says Commit and Push\nOption 3 says Commit and Sync\n\nI don't quite understand the difference between the last 2 options. When should I use Commit and Sync as opposed to Commit and Push?"}, {"role": "assistant", "content": "Commit will simply make record of your changes that you have made on your local machine. It will not mark the change in the remote repository.\nCommit and Push will do the above and push it to the remote repository. This means that any changes you have made will be saved to the remote repository as well.\nCommit and Sync does three things. First, it will commit. Second, it will perform a pull (grabs the updated information from the remote repo). Finally, it will push.\n\nSee more from Microsoft here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I create more than one repository for GitHub Pages?\n\nI  created a repository for hosting a blog on GitHub.\nIs there any way that I can create additional repositories to host multiple blogs, or am I limited to just one since username.github.io can only be used once?"}, {"role": "assistant", "content": "You can have one site published to https://<username>.github.io by publishing to the master branch of a repository named \u201cusername.github.io\u201d (substituting your actual username).\nYou can also have an additional site per GitHub project published to https://<username>.github.io/<project>. Project settings let you choose which branch and directory to publish.\nA better description is available in the GitHub Pages documentation, including options for using custom domain names.\n(since April 2013, all username.github.com are now username.github.io)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I have linked dependencies in a git repo?\n\nIn my scripts, I often use libraries (mine or others') that have their own repos. I don't want to duplicate those in my repo and get stuck with updating them every time a new version comes out. \nHowever, when somebody clones the repo, it should still work locally and not have broken links.\nAny ideas about what I could do?"}, {"role": "assistant", "content": "You can do this with submodules in git. In your repository, do:\ngit submodule add path_to_repo path_where_you_want_it\n\nSo, if the library's repository had a URL of git://github.com/example/some_lib.git and you wanted it at lib/some_lib in your project, you'd enter:\ngit submodule add git://github.com/example/some_lib.git lib/some_lib\n\nNote that this needs to be done from the top-level directory in your repository. So don't cd into the directory where you're putting it first.\nAfter you add a submodule, or whenever someone does a fresh checkout of your repository, you'll need to do:\ngit submodule init\ngit submodule update\n\nAnd then all submodules you've added will be checked out at the same revision you have.\nWhen you want to update to a newer version of one of the libraries, cd into the submodule and pull:\ncd lib/some_lib\ngit pull\n\nThen, when you do a git status you should see lib/somelib listed in the modified section. Add that file, commit, and you're up to date. When a collaborator pulls that commit into their repository, they'll see lib/somelib as modified until they run git submodule update again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Visualize branches on GitHub\n\nIn TortoiseGit, gitk or on BitBucket, it is common to have a visualization of the project history with all the branches, like this:\n\nHowever, GutHub's commit history seems to be flat, at least I couldn't find a way to display this kind of graph. Can the GitHub's web UI somehow visualize branches like other Git clients commonly can?"}, {"role": "assistant", "content": "You can see a graph, but without commit messages in Insights => Network section (commit messages with authors are shown on hover).\nNote: this works for public repos or GitHub Enterprise only!\nExample: https://github.com/google/orbit/network"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Reopening a merged pull request\n\nI made some changes\nI submitted a pull request\nThe pull request was accepted and merged.\nWe found a bug\nThe changes were removed again (force push to 1 commit before) whilst I fixed the bug.\n\nI've now fixed the bug and want to resubmit the pull request with 1 extra commit. Is there any way to reopen the pull request or update it, or do I have to create a new pull request, type out the description etc again? Gitorious has this feature and we've recently moved to GitHub."}, {"role": "assistant", "content": "The answer seems to be: You can't. \nOnce a pull request is merged and closed, it is locked forever and cannot be reopened. If your pull request is merged, closed, then your changes are pulled out (via force pushing backwards to before the merge), you will need to add commits to the branch and create a new pull request, copying all the details over and probably providing a link to the original pull request to manually save the history.\nMight be a nice feature request for future GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to compare two different commits on the same branch in github?\n\nComparing histories on the same branch is very confusing for me on GitHub. I struggle with this regularly:\nIf I use compare/master in the URL after the GitHub repo name, I can compare against other branches in the repo based on the options in the drop-down menus.\nhttps://help.github.com/en/articles/comparing-commits-across-time\nHowever, I usually want to compare several commits on master. \nHow is this easily done? Could I get a more clear example?"}, {"role": "assistant", "content": "You can use the following URL structure to compare commits in the same branch:\ngithub.com/<username>/<repo_name>/compare/<commit1>...<commit2>\n\nReplace values for username, repo_name, commit1(old commit) & commit2(new commit) acc. to your project.\nThe separator between the two commits is ... i.e. 3 dots."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Forking from GitHub to Bitbucket\n\nI'm working on a project based on CakePHP, that's hosted on GitHub. My project is being hosted on Bitbucket. Both of them use git. Basically I'd like to create a \u2018fork\u2019 (I don't know if I'm using the right terms, since I'm new to git) of CakePHP in my Bitbucket repository, in order to be able to get the updates without the need to download all the CakePHP zip/tar and replace the folder, then commit and push, but maybe with a \u2018merge\u2019(?)."}, {"role": "assistant", "content": "It's not possible to send \"pull request\" across different sites today. I've added a feature request for this in the Bitbucket issue tracker: #3288. I suggest you add yourself as a follower if you want to track this.\nHowever, you can still move the source from GitHub to Bitbucket without having to download any zip files or tarballs. You make a clone from GitHub and push to Bitbucket:\n$ git clone https://github.com/cakephp/cakephp\n$ cd cakephp\n$ git push [email\u00a0protected]:mg/cakephp.git master\n\nI created mg/cakephp as an empty Git repository in Bitbucket first. That way you can push/pull changesets from GitHub to Bitbucket."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I share my private GitHub repository by link?\n\nI have a Java application in a private repository on GitHub and I would like to share it with someone who doesn't have an account. I didn't find any option on the site for this.\nIs there a way to do this? Collaborators can be only GitHub users."}, {"role": "assistant", "content": "There is no way to share private repository among non-Github users.\nYou need the Github account and be added as collaborator to the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Installing Git in PATH with GitHub client for Windows\n\nHow do I install Git in my PATH when using the GitHub client for Windows?\nI'm running into errors because apparently Git is not installed in PATH. For example, using Atom, trying to install the Linter plugin gives this error:\nnpm ERR! not found: git\nnpm ERR! \nnpm ERR! Failed using git.\nnpm ERR! This is most likely not a problem with npm itself.\nnpm ERR! Please check if you have git installed and in your PATH.\n\nDoes GitHub for Windows install Git when it installs? (It must, otherwise how does it use Git?) I don't want to double-install it... so how do I just add the Git that's already there to PATH?"}, {"role": "assistant", "content": "GitHub for Windows does indeed install its own version of Git, but it doesn't add it to the PATH variable, which is easy enough to do. Here's instructions on how to do it:\n\nGet the Git URL\nWe need to get the url of the Git \\cmd directory your computer. Git is located here: \nC:\\Users\\<user>\\AppData\\Local\\GitHub\\PortableGit_<guid>\\cmd\\git.exe\n\nSo on your computer, replace <user> with your user and find out what the <guid> is for your computer. (The guid may change each time GitHub updates PortableGit, but they're working on a solution to that.) \nCopy it and paste it into a command prompt (right-click > paste to paste in the terminal) to verify that it works. You should see the Git help response that lists common Git commands. If you see The system cannot find the path specified. Then the URL isn\u2019t right. Once you have it right, create the link to the directory using this format: \n;C:\\Users\\<user>\\AppData\\Local\\GitHub\\PortableGit_<guid>\\cmd\n\n(Note: \\cmd at the end, not \\cmd\\git.exe anymore!)\nOn my system, it\u2019s this, yours will be different:\n;C:\\Users\\brenton\\AppData\\Local\\GitHub\\PortableGit_7eaa494e16ae7b397b2422033as45d8ff6ac2010\\cmd\n\nEdit the PATH Variable\nNavigate to the Environmental Variables Editor (instructions) and find the Path variable in the \u201cSystem Variables\u201d section. Click Edit\u2026 and paste the URL of Git to the end of that string. Save! It might be easier to pull this into Notepad to do the edit, just make sure you put one semicolon before you paste in the URL. If it doesn't work it\u2019s probably because this path got messed up either with a space in there somewhere (should be no spaces around the semicolon) or a semicolon at the end (semicolons should only separate URLs, no semicolon at beginning or end of string). \n\nIf it worked, you should be able to close & reopen a terminal and type git and it will give you that same git help file. Then installing the Linter should work. (Atom > File > Settings > Packages > Linter)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to rename a directory/folder on GitHub website?\n\nI was able to find a way on GitHub Website to rename a single file and did so with success.\nI was also able to find a way to rename a whole repository and did that with success.\nDoes anyone know how to do this to a single directory without using command line? For reference, I am trying to change a directory named InterviewTesting (that contains source files, etc) to something else. I tried doing it the single file way.  But this didn't allow me to change the name of the directory (InterviewTesting), only the actual file name."}, {"role": "assistant", "content": "Actually, there is a way to rename a folder using web interface.\n\nSee https://github.com/blog/1436-moving-and-renaming-files-on-github"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add a package from GitHub in Flutter?\n\nI need to use the latest source code of a package and the latest source hasn't been published yet.\nWhat should I write into pubspec.yaml to get a package in Github?\nThe code below doesn't work. It doesn't download the package and I can't import it into my source code\ndependencies:\n  flutter:\n    sdk: flutter\n\n  carousel_pro:\n    git:\n      url: https://github.com/jlouage/flutter-carousel-pro.git"}, {"role": "assistant", "content": "Example of pubspec.yaml\n\nDependency with the specific branch:\ndependencies:\n  flutter:\n    sdk: flutter\n\n  carousel_pro:\n    git:\n      url: https://github.com/jlouage/flutter-carousel-pro.git\n      ref: main # branch name\n\n\nDependency with the specific commit:\ndependencies:\n  flutter:\n    sdk: flutter\n\n  carousel_pro:\n    git:\n      url: https://github.com/jlouage/flutter-carousel-pro.git\n      ref: ea12e41 # commit hash\n\nExample of a file importing the package:\nimport 'package:carousel_pro/src/carousel_pro_widgets.dart';\nimport 'package:flutter/material.dart';\n\nclass NewsCarousel extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      height: 200.0,\n      child: WidgetCarousel(\n        autoplay: false,\n        pages: [],\n      ),\n    );\n  }\n}\n\nNote: If your IDE doesn't see the package, try to restart it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Renaming a branch while on pull request\n\nOn Github, you can make pull requests to add functionality to a project. One's contributions have to be on a branch that, if the request is accepted, will be merged into the master branch (or an analogous one) of the project.\nNow, I submitted a pull request on Github and my contributions are on a branch called patch-1. I can modify the name of the branch locally by\ngit branch -m patch-1 newname\n\nand in principle I can also rename it on my forked repo on Github by following the instruction found in this answer. This is done in practice by removing the old branch, patch-1 in my case, and repush it with a different name newname.\nIs it allowed to rename the branch patch-1 on my forked repository on Github when it constitutes a pull request?\nOr it causes problems on the pull request management?\nIs there any way to rename a branch on a forked repository on Github when that branch is a pull request?"}, {"role": "assistant", "content": "\"Renaming\" a remote branch in git, as indicated by the link you provided, is really just deleting a branch, followed by pushing a new one with the same commit hash but a new name.  If you have a pull request open for branch patch-1, when you delete that branch, the pull request will be closed.  \nSo, no you can't rename the branch with a pull request open without deleting the branch and removing the pull request.  However, there's nothing stopping you from doing that, pushing a new branch with a new name, and creating a new pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GPG vs SSH keys\n\nOn GitHub, I want to add a key to associate my computer with my account and I am given two options: create an SSH or a GPG key. \nWhat is the difference between the two keys? and is there a preferred one to use?\nI understand how to create both by following the guide on the site but I don't know which one is better to use."}, {"role": "assistant", "content": "I want to add a key to associate my computer with my account and I am given two options\n\nYou will need at least the SSH one, if you want to push back to your repository, using an SSH URL (since the public SSH key will authenticate you).\nStart with SSH. See \"Connecting to GitHub with SSH\".\nLater, you can use GPG to sign commits.\n\nNote: Since Aug. 2022, GitHub also supports SSH commit verification\n\n\nVishwas M.R points out in the comments to \"Why would I sign my git commits with a GPG key when I already use an SSH key to authenticate myself when I push?\"\n\nWhen you authenticate to Github with your SSH key, that authentication doesn't become part of the repository in any meaningful or lasting way.\nIt causes Github to give you access for the moment, but it doesn't prove anything to anyone who is not Github.\nWhen you GPG-sign a Git tag, that tag is part of the repository, and can be pushed to other copies of the repository.\nThus, other people who clone your repository can verify the signed tag, assuming that they have access to your public key and reason to trust it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git's famous \"ERROR: Permission to .git denied to user\"\n\nI have tried googling and read through https://help.github.com/en/articles/connecting-to-github-with-ssh and various, various guides. I am unable to git push -u origin master or git push origin master ( the same command ).\nI've had my git account for at least 2 or so years. I've successfully been able to create repos and push -u origin master fine on my laptop but on this desktop I'm having issues.\nHere's what I tried:\n1. I have setup my git user name\n2. I have setup my git user email\n3. I have uploaded the contents of my /home/meder/.ssh/id_rsa.pub to github's account page. I have verified I did not paste any whitespace\n4. I have created a ~/.ssh/config with these contents:\n  Host github.com\n  User git\n  Hostname github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa\n\nI have chmodded the .ssh to 700, id_rsa 600\n5. I have added the proper remote origin without making typos : git remote add origin [email\u00a0protected]:medero/cho.git\n6. To confirm #5, here is my .git/config. The directory is correct and not another directory:\n[remote \"origin\"]\n        fetch = +refs/heads/*:refs/remotes/origin/*\n        url = [email\u00a0protected]:medero/cho.git\n\n7. ssh [email\u00a0protected] -v gives me a successful Authentication\n8. One weird thing is, the username which it greets me with has t appended to it. My github username is medero, not medert.\n\nHi mederot! You've successfully\n  authenticated, but GitHub does not\n  provide shell access.\n\n9. I am not behind a proxy or firewall\n10. The key is offered, heres the output from -v:\n\ndebug1: Host 'github.com' is known and matches the RSA host key.\ndebug1: Found key in /home/meder/.ssh/known_hosts:58\ndebug1: ssh_rsa_verify: signature correct\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug1: Authentications that can continue: publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering public key: /home/meder/.ssh/id_rsa\ndebug1: Remote: Forced command: gerve mederot\ndebug1: Remote: Port forwarding disabled.\ndebug1: Remote: X11 forwarding disabled.\ndebug1: Remote: Agent forwarding disabled.\ndebug1: Remote: Pty allocation disabled.\ndebug1: Server accepts key: { some stuff, dont know if i should share it\n\ndebug1: Remote: Forced command: gerve mederot\ndebug1: Remote: Port forwarding disabled.\ndebug1: Remote: X11 forwarding disabled.\ndebug1: Remote: Agent forwarding disabled.\ndebug1: Remote: Pty allocation disabled.\ndebug1: Authentication succeeded (publickey).\n\n\n11. Here are the commands I used\nmkdir cho\ngit init\ntouch README\ngit add README\ngit commit -m 'test'\ngit remote add origin [email\u00a0protected]:medero/cho.git\ngit push -u origin master\n\n12. I don't want to create a new SSH key.\n13. If I git clone using ssh and make an edit, commit, and git push, I get the same exact thing.\n14. Here's the actual error:\n$ git push\nERROR: Permission to medero/cho.git denied to mederot.\nfatal: The remote end hung up unexpectedly\n\n15. I have setup my github username and github token:\n$ git config --global github.user medero\n$ git config --global github.token 0123456789yourf0123456789tokenSets the GitHub token for all git instances on the system\n16. I have confirmed my github username is NOT mederot and my github token IS CORRECT per my account page ( validated first 2 chars and last 2 chars ).\n17. To confirm #16, ~/.gitconfig contains\n[github]\n    token = mytoken...\n    user = medero\n\n18. I did ssh-key add ~/.ssh/id_rsa if that's even necessary...\n\nTHEORIES:\nI suspect there's something fishy because when I get ssh authenticated, the user greeting is mederot and not medero, which is my acct. Could something in my github account possibly be incorrectly cached?\nI also suspect some local ssh caching weirdness because if i mv ~/.ssh/id_rsa KAKA and mv ~/.ssh/id_rsa.pub POOPOO, and do ssh [email\u00a0protected] -v, it still Authenticates me and says it serves my /home/meder/.ssh/id_rsa when I renamed it?! It has to be cached?!"}, {"role": "assistant", "content": "After Googling for few days, I found this is the only question similar to my situation.\nHowever, I just solved the problem!  So I am putting my answer here to help anyone else searching for this issue.\nHere is what I did:\n\nOpen \"Keychain Access.app\" (You can find it in Spotlight or LaunchPad)\nSelect \"All items\" in Category\nSearch \"git\"\nDelete every old & strange item\nTry to Push again and it just WORKED"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the license for a project at Github? [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about programming within the scope defined in the help center.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have created a simple list API in C and I want to release it via Github.\nIs there any way to change the license after the creation of the repository?"}, {"role": "assistant", "content": "If you release it with a license, you allow people to use it as the licence describes. You can't just say \"no I changed my mind I don't want it to be under GPL\". Of course your future release may be in another license (GPL forces other people's modified versions to be GPL, but you, as the creator, may release new versions of your work under a new license).\nAmendment\nWebsites like choosealicense.com may help you to choose a suitable license. The license picker provides some templates that can be committed to your repository; for an existing repository you can bring it back this way:\n\nbrowse to your repository at GitHub.com\ncreate a new file by pressing the blue + icon (updated to: New File button)\nname it LICENSE.md or LICENSE.txt to show up the license picker again\nchoose a template"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete a workflow from GitHub Actions\n\nI created a couple workflows in the .github/workflows folder of my repository to experiment with GitHub Actions. I have since learned quite a bit and deleted said experimental workflows from my repo. After deleting the experimental workflow YAML files and committing the deletions, when I go to the Actions tab of my repository, I STILL see the workflows that I have since deleted.\nI see no option to delete and start from scratch! Is this not possible? Is it possible through GitHub API?"}, {"role": "assistant", "content": "As of July 7, 2020, you can now delete the results of individual workflow runs.  To do this, navigate to your workflow, find the workflow run that you want to delete, and select the \"...\" menu.  In this menu, select \"Delete workflow run\".\nThe workflow run and its logs will be removed.\n\nCurrently, you must do this for each workflow run individually.\nedit: As of 2021 Feb it seems that after all workflow runs are deleted\nthe workflow it self disappears. One comment below also seems to confirm this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge pull request to a different branch than default, in Github\n\nA pull request comes into my repo hosted on Github. By default it is merged into the master branch.\nIs there any way for me to change which branch the changes would be merged into?"}, {"role": "assistant", "content": "As of 15.08.2016 GitHub allows changing the target branch of a pull request via the GUI. Click Edit next to the title, then select the branch from the dropdown.\n\n\nYou can now change the base branch of an open pull request. After you\u2019ve created a pull request, you can modify the base branch so that the changes in the pull request are compared against a different branch. By changing the base branch of your original pull request rather than opening a new one with the correct base branch, you\u2019ll be able to keep valuable work and discussion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to open multiple pull requests on GitHub\n\nWhen I open a pull request on GitHub.\nAll commits since my last request and all new ones are automatically added to this request.  \nI can't seem to control which commits are added and which are not.\nWhen I try to open another pull request, I get an \"Oops! There's already a pull request\" error.  \nIs there any easy way to open multiple pull requests without having to mess around with the command line?"}, {"role": "assistant", "content": "Pull requests are based on a branch.\nThe only way to open up a pull request for multiple commits is:   \n\nIsolate them into their own branch.  \nOpen the pull requests from there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why doesn't git recognize that my file has been changed, therefore git add not working\n\nI am  trying to push my files to github using bash. They are already on there, and I am uploading a newer version with new lines and code, etc. But when I try git add and then git status it says:\n\nOn branch master\nnothing to commit, working directory clean\n\nAnd the file I am using was just modified."}, {"role": "assistant", "content": "I had a problem where once upon a time I set the git index to 'assume unchanged' on my file.\nYou can tell git to stop ignoring changes to the file with:\ngit update-index --no-assume-unchanged path/to/file\n\nIf that doesn't help a reset may be enough for other weird cases. \n\nIn practice I found removing the cached file and resetting it to work:\ngit rm --cached path/to/file\ngit reset path/to/file\n\nThe git rm --cached means to only remove the file from the index, and reset tells git to reload the git index from the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I keep my branch up to date with master with git?\n\nI have a bug fix in my master, and I also want my branch to get that bug fix.  What git command do I use?"}, {"role": "assistant", "content": "Assuming you're fine with taking all of the changes in master, what you want is:\ngit checkout <my branch>\n\nto switch the working tree to your branch; then:\ngit merge master\n\nto merge all the changes in master with yours."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to ignore whitespace in github when comparing?\n\nI have committed a file after prettifying it in sublime. Now when I am comparing the differences in GitHub web UI it's showing a lot of changes, so it is very difficult to see the actual changes. Can I compare files in there and ignore the whitespace?"}, {"role": "assistant", "content": "On github, you simply append the w=1 parameter to the URL for it to ignore whitespace.  \nThat would look something like:\nhttps://github.com/account_name/repo/pull/14/files?w=1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does Git say my master branch is \"already up to date\" even though it is not?\n\nBasic Problem\nI just deleted ALL the code from a file in my project and committed the change to my local git (on purpose). I did \ngit pull upstream master\n\nto fetch and merge from upstream (so in theory that deleted code should be back).\nGit tells me everything is up to date.\nEverything is definitely NOT up to date -- all that deleted code is still deleted.\nOther Relevant Info\nI only have one branch called \"master\".\nI recently set up \"master\" to track upstream like so:\n\nBranch master set up to track remote branch master from upstream.\n\nThe command git branch -vv yields:\n* master 7cfcb29 [upstream/master: ahead 9] deletion test\n\nWhy why why is this happening?  I'm on the verge of just e-mailing my project manager any changes I make to our code.\nUpdate\nI thought it was obvious, but anyways this is my goal:\nGet the most recent of the code on my system.\nExcuse my anger here, but why does such a simple task as that have to be so hard?"}, {"role": "assistant", "content": "I think your basic issue here is that you're misinterpreting and/or misunderstanding what git does and why it does it.\nWhen you clone some other repository, git makes a copy of whatever is \"over there\".  It also takes \"their\" branch labels, such as master, and makes a copy of that label whose \"full name\" in your git tree is (normally) remotes/origin/master (but in your case, remotes/upstream/master).  Most of the time you get to omit the remotes/ part too, so you can refer to that original copy as upstream/master.\nIf you now make and commit some change(s) to some file(s), you're the only one with those changes.  Meanwhile other people may use the original repository (from which you made your clone) to make other clones and change those clones.  They are the only ones with their changes, of course.  Eventually though, someone may have changes they send back to the original owner (via \"push\" or patches or whatever).\nThe git pull command is mostly just shorthand for git fetch followed by git merge.  This is important because it means you need to understand what those two operations actually do.\nThe git fetch command says to go back to wherever you cloned from (or have otherwise set up as a place to fetch from) and find \"new stuff someone else added or changed or removed\".  Those changes are copied over and applied to your copy of what you got from them earlier.  They are not applied to your own work, only to theirs.\nThe git merge command is more complicated and is where you are going awry.  What it does, oversimplified a bit, is compare \"what you changed in your copy\" to \"changes you fetched from someone-else and thus got added to your-copy-of-the-someone-else's-work\".  If your changes and their changes don't seem to conflict, the merge operation mushes them together and gives you a \"merge commit\" that ties your development and their development together (though there is a very common \"easy\" case in which you have no changes and you get a \"fast forward\").\nThe situation you're encountering now is one in which you have made changes and committed them\u2014nine times, in fact, hence the \"ahead 9\"\u2014and they have made no changes.  So, fetch dutifully fetches nothing, and then merge takes their lack-of-changes and also does nothing.\nWhat you want is to look at, or maybe even \"reset\" to, \"their\" version of the code.\nIf you merely want to look at it, you can simply check out that version:\ngit checkout upstream/master\n\nThat tells git that you want to move the current directory to the branch whose full name is actually remotes/upstream/master.  You'll see their code as of the last time you ran git fetch and got their latest code.\nIf you want to abandon all your own changes, what you need to do is change git's idea of which revision your label, master, should name.  Currently it names your most recent commit.  If you get back onto that branch:\ngit checkout master\n\nthen the git reset command will allow you to \"move the label\", as it were.  The only remaining problem (assuming you're really ready to abandon everything you've don) is finding where the label should point.\ngit log will let you find the numeric names\u2014those things like 7cfcb29\u2014which are permanent (never changing) names, and there are a ridiculous number of other ways to name them, but in this case you just want the name upstream/master.\nTo move the label, wiping out your own changes (any that you have committed are actually recoverable for quite a while but it's a lot harder after this so be very sure):\ngit reset --hard upstream/master\n\nThe --hard tells git to wipe out what you have been doing, move the current branch label, and then check out the given commit.\nIt's not super-common to really want to git reset --hard and wipe out a bunch of work.  A safer method (making it a lot easier to recover that work if you decide some of it was worthwhile after all) is to rename your existing branch:\ngit branch -m master bunchofhacks\n\nand then make a new local branch named master that \"tracks\" (I don't really like this term as I think it confuses people but that's the git term :-) ) the origin (or upstream) master:\ngit branch -t master upstream/master\n\nwhich you can then get yourself on with:\ngit checkout master\n\nWhat the last three commands do (there's shortcuts to make it just two commands) is to change the name pasted on the existing label, then make a new label, then switch to it:\nbefore doing anything:\nC0 -    \"remotes/upstream/master\"\n    \\\n     \\- C1 --- C2 --- C3 --- C4 --- C5 --- C6 --- C7 --- C8 --- C9    \"master\"\n\nafter git branch -m:\nC0 -    \"remotes/upstream/master\"\n    \\\n     \\- C1 --- C2 --- C3 --- C4 --- C5 --- C6 --- C7 --- C8 --- C9    \"bunchofhacks\"\n\nafter git branch -t master upstream/master:\nC0 -    \"remotes/upstream/master\", \"master\"\n    \\\n     \\- C1 --- C2 --- C3 --- C4 --- C5 --- C6 --- C7 --- C8 --- C9    \"bunchofhacks\"\n\nHere C0 is the latest commit (a complete source tree) that you got when you first did your git clone.  C1 through C9 are your commits.\nNote that if you were to git checkout bunchofhacks and then git reset --hard HEAD^^, this would change the last picture to:\nC0 -    \"remotes/upstream/master\", \"master\"\n    \\\n     \\- C1 --- C2 --- C3 --- C4 --- C5 --- C6 --- C7 -    \"bunchofhacks\"\n                                                      \\\n                                                       \\- C8 --- C9\n\nThe reason is that HEAD^^ names the revision two up from the head of the current branch (which just before the reset would be bunchofhacks), and reset --hard then moves the label.  Commits C8 and C9 are now mostly invisible (you can use things like the reflog and git fsck to find them but it's no longer trivial).  Your labels are yours to move however you like.  The fetch command takes care of the ones that start with remotes/.  It's conventional to match \"yours\" with \"theirs\" (so if they have a remotes/origin/mauve you'd name yours mauve too), but you can type in \"theirs\" whenever you want to name/see commits you got \"from them\".  (Remember that \"one commit\" is an entire source tree.  You can pick out one specific file from one commit, with git show for instance, if and when you want that.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cross-referencing commits in github\n\nI'd like to reference commits in other repos (in this case submodules) in the github issues of my main repo. Is it possible to do so without typing the full hyperlink in a way similar to how github creates a shortened hyperlink from the commit number?"}, {"role": "assistant", "content": "The answer, so us lazy people can find it without following the link to the Autolinked References and URLs section of the GitHub help:\nUser/Project@SHA\n\nFor example:\nmojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\n\nShort SHAs work as well (as long as they are unique):\nmojombo/god@be6a8cc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull request without forking?\n\nHere are steps of code contribution from the topic \"How do I contribute to other's code in GitHub?\"\n\nFork the project\nMake one or more well commented and clean commits to the repository. You can make a new branch here if you are modifying more than one part or feature.\nPerform a pull request in github's web interface.\n\nIs it possible to make a pull request without forking a repo?\nIt's quite sad to see more than 20 repos in my account which were forked for some pull requests. They have no activity then and zero stars / followers. Looks like I'm just copying somebody's code for a black day."}, {"role": "assistant", "content": "With create branch permissions you can create a PR without forking. If you do not, there is no way to create a pull request without forking."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git diff between cloned and original remote repository\n\nI have cloned a github repository and made no changes locally. Github repository moved forward with commits on the same branch.\n\nHow do I find a diff between my local repository and the original github repository?\nHow do I find a diff between my working copy and the original github repository?\nHow do I find a diff between my local repository and another github repository of the same project?"}, {"role": "assistant", "content": "1) Add any remote repositories you want to compare:\ngit remote add foobar git://github.com/user/foobar.git\n\n2) Update your local copy of a remote:\ngit fetch foobar\n\nFetch won't change your working copy.\n3) Compare any branch from your local repository to any remote you've added:\ngit diff master foobar/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git pushes with wrong user from terminal\n\nI have an issue with git and my terminal. Here's a gallery to show you my issue.\nWhen I push commits from my terminal, git says I push them with another username, that's a user from my organization (my company) with no commit at all and it seems it belongs to no one : (check gallery first pic)\nBut this doesn't happen when I use Github for mac, in the feed I see the commits pushed by myself.\nThe problem also affects my personal repositories, my terminal says that I don't have the permission to push commits on those repositories (which is obviously wrong) since it tries to push it with this user : (check gallery second pic)\nGuess what ? This doesn't happen with Github for mac too.\nI changed my computer to a brand new one few days ago, so I reset'ed all my ssh key of github and left only a new one generated by Github for Mac so I don't think that there's some ghost user/ssh key hidden somewhere, this hdd is brand new : (check gallery third pic)\nMy .gitconfig file is all clear, there's only my credentials : (check gallery fourth pic)\nI really don't get it, help, StackOverflow, you're my only hope.\n(My apologies for my poor Gimp skills and the Star Wars reference)\nEDIT : ssh-add -l only shows the good ssh key created by github for mac and I have only one github account\nEDIT2 : ssh -T [email\u00a0protected] recognize me as the good user.\nEDIT3 : After a few tests it looks like my terminal does the commits with my username, but pushes them with the other one, Github for mac commits and pushes with the good username.This situation happen with every repo I have/make (even new ones).\nEDIT4 : In a personal repository git log --pretty=\"%h %an %ae\" shows my good username\nEDIT5 : No sign of environment variables that would override my credentials in my env. Even if I try to set those variables with the good credentials problem persists.\nEDIT6 : Things work back normally if I force the user in the path of /.git/config of a repository but I don't think that's the good option : http://[email\u00a0protected]/USER/REPO.git\nEDIT7 : We deleted the git user that pushed the commits for me and this brings another error : remote: Invalid username or password. fatal: Authentication failed for 'https://github.com/USER/REPO.git/'\nFINAL EDIT : I installed git with homebrew, typed git config --global push.default simple and now it takes my credentials even without forceing the user. That's strange. Thanks everybody for your help, you're great guys !"}, {"role": "assistant", "content": "I just had this problem at work.  The builtin git that ships with mac or comes when you install xcode caches git credentials in keychain.  The fix for me was to:\nstart keychain access (start spotlight via cmd + space, type keychain, press enter)\nUnder keychains on the upper left, select \"login\"\nUnder category on the left, select \"passwords\"\nfind the name \"github\" and delete it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: error cloning my private repository\n\nI'm trying to clone my GitHub project using the https-URL, but it fails with an error:\n$ git clone https://[email\u00a0protected]/foo/foo-private.git\nCloning into foo-private...\nPassword:\nerror: error setting certificate verify locations:\n  CAfile: /bin/curl-ca-bundle.crt\n  CApath: none\n while accessing https://[email\u00a0protected]/foo/foo-private.git/info/refs\n\nfatal: HTTP request failed\n\nWhat am I doing wrong?"}, {"role": "assistant", "content": "I have seen this on Windows, with msysgit 1.7.2.3. You have to fix the path to bin/curl-ca-bundle.crt. I had to specify the absolute path, using back-slashes:\ngit config --system http.sslcainfo \"C:\\Program Files (x86)\\git\\bin\\curl-ca-bundle.crt\"\nThis will result in changes to [git-install-dir]/etc/gitconfig file, which may be edited directly, too.\n(Original solutions found at http://github.com/blog/642-smart-http-support)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Push Error: RPC failed; result=22, HTTP code = 413\n\nstupid issue with Github going on right now. I have a decent amount of changes (~120MB in size), when I attempt to push, this is what happens:\nerror: RPC failed; result=22, HTTP code = 413\nfatal: The remote end hung up unexpectedly \nfatal: The remote end hung up unexpectedly\n\nI've already done \ngit config http.postBuffer 524288000, so that doesn't seem to be the issue. What could it be?"}, {"role": "assistant", "content": "If you get error 413, then the issue doesn't lie with git but with your web server.\nIt's your web server that is blocking big upload files.\nSolution for nginx\nJust load your nginx.conf and add client_max_body_size 50m; ( changing the value to your needs ) in the http block.\nReload nginx to accept the new config by executing sudo service nginx reload and try again to push your commit over http.\nSolution for Apache\nIn your httpd.conf add LimitRequestBody 52428800  ( changing the value to your needs ) inside a <Directory /> block. Doing this you can limit the request of the whole server filesystem, just a single Virtual Host or a directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download a single commit-diff from GitHub?\n\nI would like to get a single commit (let's call it ${SHA}) from GitHub via the web-interface.\nFor example, something like:\n$ git clone http://github.com/foo/bar\n$ cd bar\n$ git format-patch -o .. ${SHA}~1..${SHA}\n$ cd ..\n$ rm -rf bar\n\n...but without having to clone the entire repository (the repo in question is large).\nObviously GitHub can display the diff of a given commit via the web interface, but how I can extract that into a (unified) diff-file (ideally, with the commit-message intact)?"}, {"role": "assistant", "content": "OK, found the answer myself.\nAdding .patch (or .diff) to the commit-URL will give a nice patch:\nhttps://github.com/foo/bar/commit/${SHA}.patch\n\nThanks to Ten Things You Didn't Know Git And GitHub Could Do..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Configuring user and password with Git Bash\n\nI am using Git Bash on Windows 7. We are using GitHub as our repository origin.\nEvery time I push or pull I have to provide user and password credentials. I know that my SSH keys are set up correctly, otherwise I would not be able to access the repository. (That is, once I enter my credentials the push/pull works correctly.)\nI have entered\ngit config --global user.name myusername\ngit config --global user.email myemail\ngit config --global github.user myusername\ngit config --global github.token mytoken\n\nBut nonetheless I am being asked for credentials each and every time I push/pull."}, {"role": "assistant", "content": "Make sure you are using the SSH URL for the GitHub repository rather than the HTTPS URL. It will ask for username and password when you are using HTTPS and not SSH. You can check the file .git/config or run git config -e or git remote show origin to verify the URL and change it if needed.\nYou can change the URL with: [1]\ngit remote set-url origin git+ssh://[email\u00a0protected]/username/reponame.git\n\n[1] This portion incorporates the answer to this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I \"undo\" a --single-branch clone?\n\nI cloned a repo using the\ngit clone -b <branch name> --single-branch <github url> <target directory>\nThis cloned ONLY this branch, but now I want to switch to the master and other branches.  Is there any way besides clearing it out and starting over to clone the rest of the repo that I can undo the --single-branch preference?"}, {"role": "assistant", "content": "You can tell Git to pull all branches like this:\ngit config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\"\ngit fetch origin\n\nIf you look in .git/config, it'll look something like this:\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = false\n[remote \"origin\"]\n    url = https://github.com/owner/repo.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n    rebase = true\n\nI compared this to a full clone, and saw that the only difference was the \"fetch\" under [remote \"origin\"].\nNote: I'm running Git version 1.8.2. The config options may have changed if you're running an older version of Git. If my commands don't work, then I'd recommend looking through .git/config to see if you can see something similar."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add empty spaces into MD markdown readme on GitHub?\n\nI'm struggling to add empty spaces before the string starts to make my GitHub README.md looks something like this:\n\nRight now it looks like this:\n\nI tried adding <br /> tag to fix the new string start, now it works, but I don't understand how to add spaces before the string starts without changing everything to &nbsp;. Maybe there's a more elegant way to format it?"}, {"role": "assistant", "content": "You can use <pre> to display all spaces & blanks you have typed. E.g.:\n<pre>\nhello, this is\n   just an     example\n....\n</pre>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to unfork a GitHub repository?\n\nHow can I unfork a GitHub repository?\nI have never seen unfork option \u2014 is it possible to do that?"}, {"role": "assistant", "content": "As of now Github doesn't have an unfork option, so the only solution is to delete the forked repo.\n\nWarning: The following solution will delete your cloned repo.\nIf you want unfork without your repo is being deleted try this https://stackoverflow.com/a/41486339/6335029\n\nStep 1: Goto Settings of Repo you want to unfork\nStep 2: Click Delete this Repository\n\nStep 3: Enter your name / Repo name\nStep 4: click \"I understand the consequences, delete this repository\" button"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to represent a directory tree in a Github README.md?\n\nIn my Githubs repos documentation I want to represent a directory tree structure like this:\n\nIs there a way to do that with Github flavoured markdown, besides just creating it with ascii art?\nSo basically like this question, but I'm wondering if there is a github specific solution."}, {"role": "assistant", "content": "I got resolver the problem in this way:\n\nInsert command tree in bash.\n\n\nExample\n\n\n\n\n\nCreate a README.md in github repository and copy bash result\nInsert in .md file within markdown code\n\n\nExample\n\n\n4. See the output and be happy =)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gist: How are images uploaded to a gist?\n\nHere is the image file:\nhttps://gist.github.com/mbostock/5503544#file-thumbnail-png\nI tried to drag-and-drop the image file in the edit mode of a gist.  That didn't seem to work in Chrome and FireFox.\nUpdate: After back and forth emails with GitHub, this feature (drag-and-drop binary files, including images) isn't supported."}, {"role": "assistant", "content": "With a little creativity you can achieve this faster than cloning. To drag/drop:\n\nCreate the Gist\nDrag an image into the comment field below. This will auto-upload your image file to https://user-images.githubusercontent.com and insert  markdown code in the comment field to display the image.\nCopy this markdown code to your gist\n\nNote: It is not required that you submit the comment.\nLive example"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does Git Add have a verbose switch\n\nI am in the process of moving all my private an public repo's over to github. One of the decisions I have made is to only use the console as it means a smaller tooling footprint if I ever need to change PCs, etc.\nI would be a huge user of console applications and being new to git I decided to purchase Tekpub's Mastering Git series since it shows you how to intergrate git bash as a toolbar.\nEverything is working fine except for the add all command which is:\ngit add .\n\nIt seems to be working but I don't get any indication of it working or not. Is there a verbose switch (I think that is what it would be called) that would say what files were tracked after the command is launched?\nI am using Visual Studio 2010 with the standard install of git (Not Git extensions)"}, {"role": "assistant", "content": "For some git-commands you can specify --verbose,\ngit 'command' --verbose\n\nor\ngit 'command' -v\n\nMake sure the switch is after the actual git command. Otherwise - it won't work!\nAlso useful:\ngit 'command' --dry-run"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you manage your gists on GitHub? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI love GitHub and their gist service, and that's why I'm keeping a lot of code snippets and even development notes as a gist on my GitHub account. It also makes it easy to share them with my colleagues.\nThe problem is that it doesn't scale!! The GitHub features for gist are primitive, and I have lots of gists there which make it really difficult to find some of my old gists. There's no search, no tagging, or anything. \nDo you know any application that can handle this mess? I would like an application that could\n\nSearch my gists\nList my gists by source type and date\nLet me edit or copy them \nLet me tag or at least edit description \n\nI would love to see something like this, and I'm willing to pay even some bucks for it. \nSo how do you manage you gists on GitHub? Do you know any software? \nThere's one called drift written in MacRuby, but I couldn't compile it, and it hasn't been updated for a while."}, {"role": "assistant", "content": "Check out GistBox. It supports searching, editing and labels. Here's a screenshot:\n\nThere's also a demo video at: http://www.youtube.com/watch?v=VLgyY6lqpsQ\nGistBox Clipper (a Chrome extension) also provides the ability to save <pre> tags and arbitrary text on any web page.\n\nEdit:\n\nUnfortunately, GistBox is becoming Cacher cacher.io - the free plan will only include: 15 private snippets, 3 private labels, unlimited public snippets. If you plan on having many private gists then you will need to but (sic) a paid plan. \u2013 Bartek Skwira"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Closing multiple issues in Github with a commit message\n\nI know you can close issues by putting closes #1 or fixes #1 in the commit message. What is the best way to close multiple issues in the same commit message?\nAlso, it appears that using fixes rather than closes doesn't create a link from the commit message to the issue, but it does close the issue. What's up with that?"}, {"role": "assistant", "content": "Closes #1, closes #2, closes #3; rest of commit message.\nThe closes clauses can be anywhere in the message and fixes is a valid synonym:\nThis fixes a memory leak in foo() that closes #4,\nalso fixes #5 which is a duplicate.\n\n\nThe following used to work, but nowadays only references issues #2 and #3.\nCloses #1, #2, #3"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use gitignore command in git\n\nI'm working first time on git. I have pushed my branch on github and it pushed all the library and documents into the github. Now what can I do and how can I use gitignore command to avoid the same  mistake again."}, {"role": "assistant", "content": "So based on what you said, these files are libraries/documentation you don't want to delete but also don't want to push to github. Let say you have your project in folder your_project and a doc directory: your_project/doc.\n\nRemove it from the project directory (without actually deleting it):\ngit rm --cached doc/* \nIf you don't already have a .gitignore, you can make one right inside of your project folder: project/.gitignore. \nPut doc/* in the .gitignore \nStage the file to commit: git add project/.gitignore\nCommit: git commit -m \"message\". \nPush your change to github."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I escape characters in GitHub code search? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to search on GitHub to get exact string matches, including special characters\n\n                                (12 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nI'm trying to use GitHub's code search to search for some lines of code containing characters like =, +, etc.\nI understand from https://help.github.com/articles/searching-code/#considerations-for-code-search that these characters are wildcards and have to be escaped, otherwise they will be ignored.\nHere's an example: \"if \\(done is True\\)\", and another: \"if (done is True)\". \nBoth return the same \"your query contains a character that is ignored\" warning on the right side of the search bar. My escaping doesn't seem to be doing anything and the results I get are with the characters ignored."}, {"role": "assistant", "content": "I dont think you can escape characters for github\nFrom searching code doc:\n\nYou can't use the following wildcard characters as part of your search\n  query: . , : ; / \\ ` ' \" = * ! ? # $ & + ^ | ~ < > ( ) { } [ ]. The\n  search will simply ignore these symbols."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I hide an API key in Create React App?\n\nI made a weather app in Create React App (create-react-app). How do I hide the API key so that I can commit to GitHub?\nRight now, the key is in App.js:\nconst API_KEY = \"123456\";"}, {"role": "assistant", "content": "Unfortunately, keeping any key in your React client, even if you are using gitignore and an .env file, is not secure. As pointed out by Claudiu Creanga, React environment variables are embedded in the build and are publicly accessible.\nYou should really only save API keys or secrets in your backend such as Node.js or Express.js. You can have your client send a request to your backend API, which can then make the actual API call with the API key and send the data back to your client."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I generate a diff for a single file between two branches in github\n\nI need to generate a diff for a single file that will show the differences between two versions, which are actually tags in github. I then want to send this diff to someone via email so a github URL for the diff would be ideal. The github compare view will allow me to do this for all changed files, but that's no good as there are thousands of files in my repo.\nI can do this in the command line as follows, but this doesn't help as I need to send the diff to someone via email:\ngit diff tag1 tag2 -- path/to/file\n\nI found the command line version discussed here:\nhow can I see the differences in a designated file between a local branch and a remote branch?"}, {"role": "assistant", "content": "GitHub only exposes the way to show diff between two commits.\nProvided those tags actually point to commits, the Url format would be something like\nhttps://github.com/{user}/{repository}/compare/{from-tag}...{until-tag}\nAs an example, https://github.com/libgit2/libgit2sharp/compare/v0.9.0...v0.9.5 shows the diff between two versions of the LibGit2Sharp project. This diff includes all the modified files.\nIf you want to retrieve a URL that targets a specific file:\n\nSwitch to the Files Changed tab\n\n\n\nClick on the Show Diff Stats button (This will display the list of modified files as links)\n\n\n\nCopy to the clipboard the link of the specific file you're after... and Tada! You're done.\n\nFor instance, given the diff above, the link https://github.com/libgit2/libgit2sharp/compare/v0.9.0...v0.9.5#diff-11 will point to the LazyFixtures.cs changes that occured between version v0.9.0 and v0.9.5.\nUpdate\nFollowing your comment which states that your diff is too big to be rendered through the Web interface, how about reverting to good old command line tooling? You could redirect the output of the diff to a file and then send the file as an email attachment.\n$ git diff v0.9.0 v0.9.5 -- LibGit2Sharp.Tests/LazyFixture.cs > /tmp/lazyfixture.diff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: readonly access to a private repo\n\nI am developing some private projects on Github, and I would like to add nightly cronjobs to my deployments servers to pull the latest version from github. I am currently doing this by generating keypairs on every deployment server and adding the public key to the github project as 'Deployment key'. \nHowever, I recently found out that these deployment keys actually do have write access to the project. Hence, every of the server administrators could potentially start editing. Furthermore I can add every deployment key to only one repository, whereas I would like to be able to deploy multiple repositories on one and the same deployment server.\nIs there a way to provide read-only access for private repositories to selected users on Github?"}, {"role": "assistant", "content": "I have it on good authority that the (relatively new) \"Organizations\" feature allows you to add people with read-only access to a private repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull remote branch into local repo with different name?\n\nAlright I did a little bit of research on this but I couldn't find an exact answer, so I have to ask.\nI have 2 remotes: origin and repo2.\nI'd like to do something like\ngit pull repo2 master\n\nBut this would pull the master branch of the repo2 into my master. Can I specify a different branch to pull into, for my local branch ?"}, {"role": "assistant", "content": "git checkout -b myBranchName repo2/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does the GitHub traffic graph include your own views?\n\nI have several projects on GitHub, and they all have the traffic graph where I can view how much traffic my repository is getting.\nThe blog post I had linked is very vague about visitors. It states:\n\n..how many unique visitors it's had..\n\nI just find it odd that some of my repositories have daily activity, but I'm not sure if most of those views are me, and if they are, why does it say \"unique visitors\" when i would be the only unique visitor\nQuestion:\nDoes the traffic graph used on GitHub include yourself when navigating through your own source?  It's very minor, but I'm genuinely curious if the views I'm getting is myself navigating through the source, or if I have people that are actually browsing through my source.\nIn specific, the line that shows \"Views\", not \"Unique visitors\" because unique visitors will obviously mean new people browsing the repository.\n\nFor those who think this is offtopic, re-read the on-topic post.\nMost notably:\n\nbut if your question generally covers\u2026 software tools commonly used by programmers"}, {"role": "assistant", "content": "OK I just contacted support and received a response:\n\nHello -\n> Do the numbers in the traffic graphs include your own views? What about the view of contributors?\nThanks for getting in touch!  Yes, the numbers include everyone's\n  views including repository owners and contributors.  There's no way to\n  filter this information at the moment, but I can definitely add that\n  as a feature request for the team to consider.\nHope that answers your question - thanks!\n\nSo it does include your own views, but they might add the option to filter it later."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where to host an Open Source Project: CodePlex, Google Code, SourceForge? [closed]\n\nAs it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references, or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question can be improved and possibly reopened, visit the help center for guidance.\n                                \n                            \n\n\n\nClosed 11 years ago.\n\n\n\nI have been reading through the backlog of answered questions on SO regarding \"How to promote an open source project\". Not surprisingly, many of the answers pointed people to SoureForge/FreshMeat and other sites etc as well as blogging and whatnot. This started me thinking where is the best place to host a project and why?\nAs my first project is currently hosted on CodePlex, I started to wade through the Google search results to collect information on the pros/cons of each; however the comparisons that I found are rather dated (2+ years old). \nhttp://www.stum.de/2008/12/13/sourceforge-vs-codeplex/\nhttp://www.developmentnow.com/blog/2006/11/codeplex-vs-sourceforge/\nhttp://www.spacesocket.com/forum/thread-6654.html\netc...\nSo the next question becomes \"Should I host my project on multiple sites\" to which the following post provides the expected answer (thankfully! as that would be a pain to maintain).\nHosting an open source project at several sites\nBased on the current state of various Open Source hosting sites such as CodePlex, GitHub, Google Code, SourceForge, etc, etc is there any notable pros/cons of one site over the other? i.e., should I stick with CodePlex or am I missing out by not using one of the alternatives? Will one bring about more traffic to a new and unknown project?\nI plan on exploring each site in more detail to see what they all offer, but given the vast knowledge of the good folks on SO, figured I would start with this question first.\nUPDATED\nAs per erjiang answer below... I am currently using Mercurial for version control, and I am open to anything other than TFS. Also, my current project is only me developing, but future projects may be collaborative so worth considering..."}, {"role": "assistant", "content": "Edit 2015-08-01: This answer is still getting views and votes. It's more than ancient and I'd like to delete it, but since it's the accepted answer, I can't do that. Then again, it's community wiki and the community has kept it up-to-date - thank you for that!\nSourceForge has crossed over to the dark side, taking over project and bundling them with Adware (Google GIMP Sourceforge Adware).  Avoid at all costs. GitHub is as of now still the most popular one, although there are alternatives (e.g., BitBucket offers unlimited private repos for free for up to 5 users.)\nIt's crazy how much the landscape changed in the past few years, and if you're reading this in the future, maybe GitHub is no longer the cool product. Bottom line is: There are a plethora of awesome options for whatever source control system you want to use.\nOld 2010 information below for the sake of history\nEdit: This answer is now ancient. In the past 2 years, GitHub has emerged as the prime Code Hosting place, and whenever I have to create a new OSS project, I don't have the trace of a shadow of a doubt where to go to. Leaving this below for reference.\nIndeed, my posting is almost 2 years old (2008) now and not entirely accurate anymore.\nWhy?\nBecause I think that SourceForge is insignificant now for open source projects. Okay, this will get me into a lot of trouble, so let me clarify:\nI am absolutely convinced that Open Source projects should be run on a DVCS, preferably git or mercurial as they are the most widespread - nothing against Bazaar, but I think it's a bit too obscure. (Edit: SourceForge now offers Mercurial and Bazaar, so that argument doesn't stand anymore. However, following two redesigns I think that SF's image isn't too great. To compare them to the images of companies: While GitHub is Apple, SF is IBM. Rock solid, but a bit dusty)\nSo if I were to write this posting again, it would be CodePlex vs. GitHub vs. BitBucket, with GitHub being the Winner. But that is a blanket statement, so let me add details. +/- isn't strictly Pro/Con, it's more to highlight different philosophies.\nCodePlex\n+ Real Mercurial/Git Hosting - no buggy bridge on top of TFS, you have real Mercurial/Git\n+ Integrated Wiki that allows to add rich documentation and nice looking pages\n+ Bug Tracker and Discussion Forums included\n- Source Code browser isn't that great - Diffs appear in a popup and just 'feel' complicated\n- Forks and Pull Requests 'not as easy' - the UI could use some work\nOverall, CodePlex is still great but I feel it's more suited for single developers or very small teams because the focus of the website is on the Wiki rather than on the source code. It's more a publishing than a collaboration platform. Theoretically you don't need a project homepage, your CodePlex project can be your one stop shop.\nGitHub\n+ Git Hosting, supports SSL/SSH\n+ Network graph allows to see forks and what merged into what when\n+ Ability to 'watch' projects - your account page is like a Facebook wall with new checkins\n+ Super good diff viewer with the ability to comment on single line changes - see here\n+ Forking is a 2-click process, and so is sending pull requests\n+ GitHub now has the the GUI tool GitHub for Windows\n- Main page is not very 'pretty' for Non-Developers. If you have a Readme in your project (supports some markup languages like Markdown or  HTML) it is displayed, but the initial page is the source code\n- Wiki isn't that great - it's Markdown, but sometimes formatting feels a bit too complex.\nGitHub has a different philosophy than CodePlex: it's all about the source code and about collaboration among devs. The main project page is the most up to date source code. There is a separate Wiki, but that's more intended for Documentation rather than presentation of your project. The network graph is fantastic, although it can get confusing once there are more than about 20 forks (frequently when a high profile project is announced everyone and their dog is forking it, but most forks die quickly). GitHub scales very well to any size.\nIn fact, GitHub makes it super easy for me to fork a project, apply a fix/patch, commit it to my fork and send a pull request to the author. Together with the Network graph it's really easy to see the commit.\nBut you most likely need a separate home page to present your project to end users and to provide downloads, as GitHubs download facilities aren't that great.\nBitBucket\n+ Git/Mercurial\n+ Allows private repositories for free, up to 5 users\nI haven't used BitBucket enough to make a real comment. The one feature that sets it apart is that private hosting is free, while GitHub charges and Codeplex does not offer it at all.\nGoogle Code\nGoogle Code is not an option anymore.\n- Project creation is disabled since March 2015, and the Google service will be permanently closing down in January 25, 2016, as the competing services are simply better.\n- It's ugly and it's too complicated to browse the source code (the link is somewhat buried)\nI haven't used it so I don't want to say it's bad - it's not. A lot of projects use it and it's very stable and robust, haven't heard much bad from any developer. However, as a matter of personal, subjective opinion the 'design' puts me off.\nSVN vs. Git/Mercurial\nTo reiterate my comment above about SourceForge being obsolete: That is of course a bit harsh. I do however believe that SVN is detrimental for open source projects. First of all, weird metadata requirements to ignore files. On Git or mercurial, you have a file called .gitignore or .hgignore in the root of your source tree which includes a list of files/directories/patterns to ignore. No magic svn:ignore metadata in the .svn folder. This alone blows SVN out of the water for me. If I start a new Visual Studio project I need to then apply that magic metadata, while with Git/mercurial I just copy over one file and be done with it.\nThen, the ability to fork, patch and send a pull request is fantastic, especially for small/one-off patches.\nLast but not least, SourceForge is still WAY too complex for my taste. It's not a bad host, but it really shows it's age IMHO. That being said, it's still robust and has many mirrors world wide. Also the Bug Tracker is much more sophisticated than the others.\nAlso, if your project for some reason requires strict contribution rules (which may make sense, e.g. legal protection to make sure the committed code is indeed legally contributed) then a traditional system like SVN hosted on SourceForge may work.\nEdit: Wasn't aware that SF finally has distributed hosting. As said above, it's robust but just not the 'cool kid' anymore, and I find it much too complex.\nTL;DR\nFor any small to medium project I whole hearty recommend GitHub, for small projects where you want a nice Web Site as well I'd go with CodePlex and for private projects I'd go with BitBucket. For big projects that require a very sophisticated bug tracker, tons of extra features and a 'real' website, consider Source Forge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add a new project to Github using VS Code\n\nAll the tutorials i've seen till now shows to first create a repository on github, copy the link go to vscode and git clone it and from that on, you can do commits and pushes.\nIs that the right way ? can't I just start a project from vscode and then upload it to my git ?\nEDIT 2020 :\nYou can now do it right inside vscode! just follow these steps:\n1- Open your new project folder with vscode\n2- click on the source conrol menu on the sidebar  (or press Ctrl+Shift+G)\n3- Click on publish to github \n4- From there just login and follow the instructions and you're good to go.\n@Debu's answer details every step, so you can jump to there"}, {"role": "assistant", "content": "Here are the detailed steps needed to achieve this.\nThe existing commands can be simply run via the CLI terminal of VS-CODE. It is understood that Git is installed in the system, configured with desired username and email Id.\n\nNavigate to the local project directory and create a local git repository:\ngit init\n\nOnce that is successful, click on the 'Source Control' icon on the left navbar in VS-Code.One should be able to see files ready to be commit-ed. Press on 'Commit' button, provide comments, stage the changes and commit the files. Alternatively you can run from CLI\ngit commit -am \"Your comment\"\n\nNow you need to visit your GitHub account and create a new Repository. Exclude creating 'README.md', '.gitIgnore' files. Also do not add any License to the repo. Sometimes these settings cause issue while pushing in.\n\nCopy the link to this newly created GitHub Repository.\n\nCome back to the terminal in VS-CODE and type these commands in succession:\ngit remote add origin <Link to GitHub Repo>     //maps the remote repo link to local git repo\ngit remote -v                                  //this is to verify the link to the remote repo\ngit push -u origin master                      // pushes the commit-ed changes into the remote repo\n\n\n\nNote: If it is the first time the local git account is trying to\nconnect to GitHub, you may be required to enter credentials to GitHub in a separate window.\n\n\nYou can see the success message in the Terminal.  You can also verify by refreshing the GitHub repo online."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to escape a pipe char in a code statement in a markdown table?\n\nOn GitHub I want to build a table containing pieces of code in Markdown. It works fine except when I put a pipe char (i.e. | ) between the backtick (i.e. ` ) chars.\nHere is what I want:\n      a     |  r  \n------------|-----\n `a += x;`  |  r1\n `a |= y;`  |  r2\n\nThe problem is that the vertical bar in the code statement of the second line is interpreted as a column delimiter. Then the table rendering looks pretty ugly. How could I avoid that?\nNote that I already tried to use the &#124; HTML code, but it produces a &#124;= y;."}, {"role": "assistant", "content": "As of March 2017 using escaped pipes is much easier: \\| See other answers.\n\nIf you remove the backticks (`), using the &#124; hack works\n      a     |  r  \n------------|-----\n `a += x;`  |  r1\n a &#124;= y;  |  r2\n\nand produces the following output\n\nAlternatively, you can replace the backticks (`) with a <code></code> markup which fixes the issues more nicely by preserving the rendering\n      a     |  r  \n------------|-----\n `a += x;`  |  r1\n<code>a &#124;= y;</code>  |  r2\n\ngenerating the following output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Override configured user for a single git commit\n\nI am trying to commit to a project on github.com from my work laptop, which is already configured for the company git server. Is there a way to commit specifying different author credentials, possible using a different configuration file or orther command line switches?\nI've tried using\n--author=\"My Name <[email\u00a0protected]>\" \n\nand I received the message: \n Committer: unknown <[email\u00a0protected]>\nYour name and email address were configured automatically based\non your username and hostname. Please check that they are accurate.\nYou can suppress this message by setting them explicitly:\n\n    git config --global user.name \"Your Name\"\n    git config --global user.email [email\u00a0protected]\n\nAfter doing this, you may fix the identity used for this commit with:\n\n    git commit --amend --reset-author\n\nbut it still didn't update my username for committing to the github.com project. Is there anything else I can try and is it even possible?"}, {"role": "assistant", "content": "First, the author is not necessarily the same as the committer.  Git tracks both.\nTo set what name to use for just this repository, you could do:\ngit config user.name \"Your Name\"\ngit config user.email \"Your email\"\n\nNotice the absence of the --global option.  This will set the configuration in this repository only.\nAlternatively, you can do this for only a single command, using the -c option:\ngit -c \"user.name=Your Name\" -c \"user.email=Your email\" commit ...\n\nBut I think it's better to just use the config options above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to wrap long lines inside of markdown ``` code ``` in Github and Gitlab issues?\n\neg:\n```\nsome very long line; some very long line; some very long line; some very long line; some very long line; some very long line; some very long line; some very long line; some very long line; some very long line; \n```\n\nwill force user to scroll in github/gitlab issues.\nIs there a way to soft-line wrap inside code block ?\nI've read the related questions but they seem different (eg jekyll etc).\nEDIT: manually editing code to limit to 80 columns is not a viable option (eg, when pasting from a compiler output/log etc; that's a lot of work and should not be necessary)\nEDIT: see also https://github.com/softvar/enhanced-github/issues/95"}, {"role": "assistant", "content": "A quick workaround is to quote your codeblocks, e.g.\n\nthis line is very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long\n\nMake sure you keep the three backticks inline with the very long line. Like this:\n> ```this line is very long```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you reset the stored credentials in 'git credential-osxkeychain'?\n\nI've followed the GitHub instructions for setting up my account, and I'm able to clone, but I'm unable to push remotely.\nWhen I do a \"git push\" I get the 403 error. It has the correct URL. I tried a \"git credential-osxkeychain get\" to see what it was giving, and this prints out the wrong credentials.\nI believe what happened is the first time it asked for the credentials, I thought it was another application asking, and it put the wrong ones in.\nI just need to reset it so that it uses the correct keychain item for my GitHub account.\nI've tried:\ngit credential-osxkeychain erase\ngit credential-osxkeychain set\n\nThe program never gives any prompts. Set will say \"bad input\" if I don't do the right thing. I tried putting in \"password=password\", etc., but then when I do a \"get\" I still get the old ones.\nI can't figure out where these are being stored, as they are not in .gitconfigure. Further there are no recent keychain items that could be it. (I have several GitHub accounts in my keychain and it is not using any of them.)"}, {"role": "assistant", "content": "From Terminal:\n(You need to enter the following three lines)\n $ git credential-osxkeychain erase \u23ce\n host=github.com  \u23ce\n protocol=https   \u23ce\n \u23ce\n \u23ce\n\nNOTE: after you enter \u201cprotocol=https\u201d above you need to press ~~RETURN~~ TWICE (Each '\u23ce' is equivalent to a 'press enter/return' )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I pull files from remote without overwriting local files?\n\nI am trying to set up a new git repo to a pre-existing remote repo.\nI want my local files to overwrite the remote repo, but git says that I first have to pull those remote files in and merge them.\nIs there any way to pull but make sure that the local files are not overwritten by the remote?"}, {"role": "assistant", "content": "Well, yes, and no...\nI understand that you want your local copies to \"override\" what's in the remote, but, oh, man, if someone has modified the files in the remote repo in some different way, and you just ignore their changes and try to \"force\" your own changes without even looking at possible conflicts, well, I weep for you (and your coworkers) ;-)\nThat said, though, it's really easy to do the \"right thing...\"\nStep 1:\ngit stash\n\nin your local repo.  That will save away your local updates into the stash, then revert your modified files back to their pre-edit state.\nStep 2:\ngit pull\n\nto get any modified versions.  Now, hopefully, that won't get any new versions of the files you're worried about.  If it doesn't, then the next step will work smoothly.  If it does, then you've got some work to do, and you'll be glad you did.\nStep 3:\ngit stash pop\n\nThat will merge your modified versions that you stashed away in Step 1 with the versions you just pulled in Step 2.  If everything goes smoothly, then you'll be all set!\nIf, on the other hand, there were real conflicts between what you pulled in Step 2 and your modifications (due to someone else editing in the interim), you'll find out and be told to resolve them.  Do it.\nThings will work out much better this way - it will probably keep your changes without any real work on your part, while alerting you to serious, serious issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to duplicate a git repository? (without forking)\n\nI have two repositories, and I need to copy whole of one onto the other empty one which has different access levels from the first one. The copy and the mother repository should not be linked together.\nI am new to git and it would be awesome if someone could help me with this."}, {"role": "assistant", "content": "See https://help.github.com/articles/duplicating-a-repository\nShort version:\nIn order to make an exact duplicate, you need to perform both a bare-clone and a mirror-push:\nmkdir foo; cd foo \n# move to a scratch dir\n\ngit clone --bare https://github.com/exampleuser/old-repository.git\n# Make a bare clone of the repository\n\ncd old-repository.git\ngit push --mirror https://github.com/exampleuser/new-repository.git\n# Mirror-push to the new repository\n\ncd ..\nrm -rf old-repository.git  \n# Remove our temporary local repository\n\nNOTE: the above will work fine with any remote git repo, the instructions are not specific to github\nThe above creates a new remote copy of the repo. Then clone it down to your working machine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to retrieve the list of all GitHub repositories of a person?\n\nWe need to display all the projects of a person in his repository on GitHub account.\nHow can I display the names of all the git repositories of a particular person using his git-user name?"}, {"role": "assistant", "content": "You can use the github api for this. Hitting https://api.github.com/users/USERNAME/repos will list public repositories for the user USERNAME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding a collaborator to my free GitHub account?\n\nI created a GitHub account, and I want to give someone write access so he can push just like me, there is a way to add a collaborator with a free plan? If not, what can I do? (besides buying a paid account, which I'll do in the future)"}, {"role": "assistant", "content": "Go to Manage Access page under settings (https://github.com/user/repo/settings/access) and add the collaborators as needed.\nScreenshot:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to display Table in README.md file in Github?\n\nI want to display a table in README.md file. I read GitHub Flavored Markdown and followed what it said.\nSo this is my table:\n| Attempt | #1 | #2 | #3 | #4 | #5 | #6 | #7 | #8 | #9 | #10 | #11 | #12 |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| Seconds | 301 | 283 | 290 | 286 | 289 | 285 | 287 | 287 | 272 | 276 | 269 | 254 |\n\nHowever, I don't see any table and result looks like:"}, {"role": "assistant", "content": "You need to see documentation again. You can see this cheatsheet\nIn your case you need to make second line like in example below:\nAttempt | #1 | #2 | #3 | #4 | #5 | #6 | #7 | #8 | #9 | #10 | #11\n--- | --- | --- | --- |--- |--- |--- |--- |--- |--- |--- |---\nSeconds | 301 | 283 | 290 | 286 | 289 | 285 | 287 | 287 | 272 | 276 | 269\n\ndifference between this code and your code in repo is that second line with separator has same columns as header. After that this table will be shown"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is Pseudo TTY-Allocation? (SSH and Github)\n\nI was trying to setup an SSH connection with Github following this tutorial:\n\nTesting your SSH connection\n\nI came across the following command:\n$ ssh -T [email\u00a0protected] \n# Attempts to ssh to github\n\nCurious, I looked at the ssh manual. It said the following:\n -T      Disable pseudo-tty allocation.\n\nWhat is tty allocation? What does tty stand for? Why are we disabling it?I earnestly tried to look it up but I was unable to find even a definition."}, {"role": "assistant", "content": "As explained in \"gitolite: PTY allocation request failed on channel 0\", it is important to do ssh test connection with -T, because some server could abort the transaction entirely if a text-terminal (tty) is requested.\n-T avoids requesting said terminal, since GitHub has no intention of giving you an interactive secure shell, where you could type command.  \nGitHub only wants to reply to your ssh request, in order to ascertain that the ssh command does work (you have the right public/private keys, and the public one has been registered to your GitHub account)\nPuTTy would be an example of a terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet and rlogin.\nThe name \"PuTTY\" has no definitive meaning, though \"tty\" is the name for a terminal in the Unix tradition, usually held to be short for Teletype.\n\nOther use-cases for -T (beside testing)\n\nTransferring binary files\nExecute commands on a remote server\nSSH tunneling: ssh -fnT -L port:server:port user@server (-f for background: you don't want to execute command, don't need a TTY and just want to establish a tunnel)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to tell git to use the correct identity (name and email) for a given project?\n\nI use my personal laptop for both work and personal projects and I would like to use my work email address for my commits at work (gitolite) and my personal email address for the rest (github).\nI read about the following solutions which are all either global or temporary:\n\ngit config --global user.email \"[email\u00a0protected]\"\ngit config user.email \"[email\u00a0protected]\"\ngit commit --author \"Bob <[email\u00a0protected]>\"\nsetting one of the GIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL or EMAIL environment variables\n\nOne solution is to run manually a shell function that sets my environment to work or personal, but I am pretty sure that I will often forget to switch to the correct identity resulting in committing under the wrong identity.\nIs there a way of binding a certain repository, project name, etc. to an identity (name, email)? What do people do?"}, {"role": "assistant", "content": "git config user.email \"[email\u00a0protected]\"\nDoing that one inside a repo will set the configuration on THAT repo, and not globally.\nSeems like that's pretty much what you're after, unless I'm misreading you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trying to pull files from my Github repository: \"refusing to merge unrelated histories\"\n\nI'm learning git, and I'm following the Git community book. \nPreviously (long time ago) I made a public repository on Github, with some files. Now I set up a local Git repository on my current computer, and committed some files. Then I added a remote pointing to my Github page:\n[root@osboxes c]# git remote add learnc https://github.com/michaelklachko/Learning-C\n\nThat seemed to be successful: \n[root@osboxes c]# git remote show learnc\n* remote learnc\n  Fetch URL: https://github.com/michaelklachko/Learning-C\n  Push  URL: https://github.com/michaelklachko/Learning-C\n  HEAD branch: master\n  Remote branch:\n    master tracked\n  Local ref configured for 'git push':\n    master pushes to master (local out of date)\n\nNow I want to download the files from my Github repo to my computer. I did this:\n[root@osboxes c]# git fetch learnc\n[root@osboxes c]# git merge learnc/master\nwarning: refname 'learnc/master' is ambiguous.\nAlready up-to-date.\n\nHowever, I don't see any new files in my local directory. How can I get them? \nI also tried to do this:\n[root@osboxes c]# git pull learnc master\nFrom https://github.com/michaelklachko/Learning-C\n * branch            master     -> FETCH_HEAD\nfatal: refusing to merge unrelated histories\n\nBTW, locally I'm on master branch (there are no other branches):\n[root@osboxes c]# git status\nOn branch master\nnothing to commit, working directory clean"}, {"role": "assistant", "content": "Try --allow-unrelated-histories\nLike max630 commented, or as explained here Git refusing to merge unrelated histories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git/GitHub can't push to master\n\nI am new to Git/GitHub and ran into an issue. I created a test project and added it to the local repository. Now I am trying to add files/project to the remote repository.\nHere's what I did (and this worked) -\ngit remote add origin git://github.com/my_user_name/my_repo.git\n\nNow when I try to push the repository to GitHub, using the following command, I get the following error -\ngit push origin master\n\nError -\nfatal: remote error:\nYou can't push to git://github.com/my_user_name/my_repo.git\nUse [email\u00a0protected]:my_user_name/my_repo.git"}, {"role": "assistant", "content": "GitHub doesn't support pushing over the Git protocol, which is indicated by your use of the URL beginning git://. As the error message says, if you want to push, you should use either the SSH URL [email\u00a0protected]:my_user_name/my_repo.git or the \"smart HTTP\" protocol by using the https:// URL that GitHub shows you for your repository.\n(Update: to my surprise, some people apparently thought that by this I was suggesting that \"https\" means \"smart HTTP\", which I wasn't. Git used to have a \"dumb HTTP\" protocol which didn't allow pushing before the \"smart HTTP\" that GitHub uses was introduced - either could be used over either http or https. The differences between the transfer protocols used by Git are explained in the link below.)\nIf you want to change the URL of origin, you can just do:\ngit remote set-url origin [email\u00a0protected]:my_user_name/my_repo.git\n\nor\ngit remote set-url origin https://github.com/my_user_name/my_repo.git\n\nMore information is available in 10.6 Git Internals - Transfer Protocols."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git SSH error: \"Connect to host: Bad file number\"\n\nI followed the git guide but I have this strange issue when trying to connect to github:\n$ ssh -v [email\u00a0protected]\nOpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007\ndebug1: Reading configuration data /c/Documents and Settings/mugues/.ssh/config\ndebug1: Applying options for github.com\ndebug1: Connecting to github.com [207.97.227.239] port 22.\ndebug1: connect to address 207.97.227.239 port 22: Attempt to connect timed out without establishing a connection\nssh: connect to host github.com port 22: Bad file number\n\nThis is my config file under .ssh\nHost github.com\n    User git\n    Hostname github.com\n    PreferredAuthentications publickey\n    IdentityFile \"C:\\Documents and Settings\\mugues\\.ssh\\id_rsa\"\n    TCPKeepAlive yes\n    IdentitiesOnly yes\n\nAny idea?"}, {"role": "assistant", "content": "After having this problem myself, I found a solution that works for me:\nError message: \n    ssh -v [email\u00a0protected]\n    OpenSSH_5.8p1, OpenSSL 1.0.0d 8 Feb 2011\n    debug1: Connecting to github.com [207.97.227.239] port 22.\n    debug1: connect to address 207.97.227.239 port 22: Connection timed out\n    ssh: connect to host github.com port 22: Connection timed out\n    ssh: connect to host github.com port 22: Bad file number\n\nYou will only see the bad file number message when on windows using the MINGGW shell. Linux users will just get Timed out.\nProblem:\nSSH is probably blocked on port 22. You can see this by typing\n    $nmap -sS github.com -p 22\n    Starting Nmap 5.35DC1 ( http://nmap.org ) at 2011-11-05 10:53 CET\n    Nmap scan report for github.com (207.97.227.239)\n    Host is up (0.10s latency).\n    PORT   STATE    SERVICE\n    22/tcp ***filtered*** ssh\n\n    Nmap done: 1 IP address (1 host up) scanned in 2.63 seconds\n\nAs you can see the state is Filtered, which means something is blocking it.\nYou can solve this by performing an SSH to port 443 (your firewall / isp will not block this).\nIt is also important that you need to ssh to \"ssh.github.com\" instead of github.com.\nOtherwise, you will report to the webserver instead of the ssh server. \nBelow are all the steps needed to solve this problem.\nSolution:\n(First of all make sure you generated your keys like explained on http://help.github.com/win-set-up-git/)\ncreate file ~/.ssh/config (ssh config file located in your user directory. \nOn windows probably %USERPROFILE%\\.ssh\\config\nPaste the following code in it:\n    Host github.com\n    User git\n    Hostname ssh.github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa\n    Port 443\n\nSave the file.\nPerform ssh like usual:\n$ssh -T github.com \n    $Enter passphrase for key '.......... (you can smile now :))\n\nNote that I do not have to supply the username or port number."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to run GitHub Actions workflow only if the pushed files are in a specific folder\n\nI have a folder structure that looks something like this.\n- folder1\n  - file1\n  - *other files*\n- folder2\n  - file1\n  - *other files*\n- .gitignore\n- package.json\n- *other files*\n\nI want to run my GitHub Actions workflow on push, only if any of the changed/pushed files are located in the folder1 directory/folder."}, {"role": "assistant", "content": "The normal syntax involves a path filter\non:\n  push:\n    paths:\n      - folder1/**\n\nIf that is not enough, you also have the GitHub Action Path Filter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I check write access to a remote Git repository (\"can I push?\")\n\nI am building a (somewhat limited) Git client. To set up a repository, you enter the URL to the remote repo. I want to check whether the user has read+write access to that repository. If not, I present an authentication dialog.\nI check 'read' access with git ls-remote <url>.\nIs there an analogous way to check 'write' access,\u00a0without cloning the repo first? (I know I could git clone <url> and then git push --dry-run)"}, {"role": "assistant", "content": "If the git repo is in github, open any file in the repo, then click 'edit',\ngithub will show something like this:\n\nYou\u2019re editing a file in a project you don\u2019t have write access to. We\u2019ve created a fork of this project for you to commit your proposed changes \n  to. Submitting a change to this file will write it to a new branch in \n  your fork, so you can send a pull request.enter code here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using the same deploy key for multiple github projects\n\nGithub does not allow the same ssh deploy key to be used for more than one project, which would be very useful in some cases (e.g. CI server dealing with project with private sub-modules). I've seen various threads that seem to say that this limitation is there for 'security reasons', but I'm yet to see a convincing explanation about exactly what risk that would raise.\nNote that the fact that Github doesn't allow Account Level keys to be reused makes sense (two users shouldn't share keys). It is only the restriction on Deploy Keys that I'm questioning.\nAnd to be clear, I'm not looking for workarounds (create a dummy user, use multiple keys, ...), but only for a plausible explanation for this limitation on Deploy Keys.\nRelated threads:\n\nOne showing a workaround\nOne discussing the issue but not really going anywhere"}, {"role": "assistant", "content": "Unfortunately, this is a scenario where github just misinterprets the distinction between a key pair and an account or project.\nSince a key pair is used for authentication and authorization, it is effectively an identity. Github accounts are another identity. Connecting github accounts to key pairs effecticely establishes a 1:N mapping between github account based identities and key pair identities.\nConversely, github enforces a 1:N mapping of projects to key pair based identities. The real world analogue is that there is a door granting access to the project that can be unlocked by many different people. But once any of them gets a key to the door, they cannot get any other keys for any other doors, ever again.\nIt makes sense not to re-use keys often from the perspective of containing breaches if a key gets compromised. But that's just a good administration policy. It doesn't make much sense to prevent a key from being used more than once on principle. That there are some keys for some doors that are never re-used, well, again that's down to policy.\n\nA slightly more complex view is to illustrate key pairs as roles. You can possess many key pairs, and therefore inhabit many roles. The private key authenticates you for the role.\nGithub's deploy key mapping to projects states that a role can never encompass more than one task. That's rarely realistic.\nNone of which changes what github allows, of course."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I change from a PR to a draft PR at github?\n\nGithub release the draft PR a while ago.\nI have a normal PR and I wanted to change that to a draft PR. How can I do that?"}, {"role": "assistant", "content": "Update - Now Available - Jan 2020\nConvert Default \u2192 Draft\nThis is possible now, with an option below \"Reviewers\" section in PR.\n\nSee: Feature Request: Switch from ready to draft in pull requests\nConvert Draft \u2192 Default\nTo answer @marsandback comment Draft PR --> PR, just click the Ready for review"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get the current pushed tag in Github Actions\n\nIs there a way to access the current tag that has been pushed in a Github Action? In CircleCI you can access this value with the $CIRCLE_TAG variable.\nMy Workflow yaml is being triggered by a tag like so:\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\nAnd I want to use that version number as a file path later on in the workflow."}, {"role": "assistant", "content": "GitHub Contexts and Variables provide both the github.ref (i.e., \"refs/tags/my_tag\") and github.ref_name (i.e., \"my_tag\"). You can use them like this: ${{ github.ref_name }}.\nHowever, take in mind that their value may depend on the event that triggered the workflow:\n\nworkflow_dispatch: the selected branch (e.g., \"refs/heads/my_branch\" and \"my_branch\")\n\npull_request: the pull request merge branch (e.g., \"refs/pull/1/merge\" and \"1/merge\", where \"1\" is the pull request number)\n\npush: the pushed branch (e.g., \"refs/heads/my_branch\" and \"my_branch\") or tag (e.g., \"refs/tags/my_tag\" and \"my_tag\")\n\nrelease: the release tag (e.g., \"refs/tags/my_tag\")\nNOTE: The github.ref_name for workflows triggered by this event does not return the tag name. Use instead the github.event.release.tag_name (e.g., \"my_tag\").\n\n\nHere is an example of this use in the artifact file name, which may be similar to the file path use that you asked about:\n- name: Create tag artifact\n  uses: actions/upload-artifact@v2\n  with:\n    name: ${{ github.ref_name }}\n    path: Release"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "key_load_public: invalid format\n\nI used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.\nI save the .ppk and an openSSL format public key. The putty format public key doesn't work.\nIn any case, my error is as follows:\n$ ssh -T [email\u00a0protected]\nkey_load_public: invalid format\nEnter passphrase for key '/c/Users/Dan/.ssh/id_rsa':\nHi Dan! You've successfully authenticated, but GitHub does not provide shell access.\n\nWhat's the issue?\nI use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.\nI've tried adding a new line and not adding a new line in GitHub"}, {"role": "assistant", "content": "As Roland mentioned in their answer, it's a warning that the ssh-agent doesn't understand the format of the public key and even then, the public key will not be used locally.\nHowever, I can also elaborate and answer why the warning is there. It simply boils down to the fact that the PuTTY Key Generator generates two different public key formats depending on what you do in the program.\nNote: Throughout my explanation, the key files I will be using/generating will be named id_rsa with their appropriate extensions. Furthermore, for copy-paste convenience, the parent folder of the keys will be assumed to be ~/.ssh/. Adjust these details to suit your needs as desired.\nThe Formats\nLink to the relevant PuTTY documentation\nSSH-2\nWhen you save a key using the PuTTY Key Generator using the \"Save public key\" button, it will be saved in the format defined by RFC 4716.\nExample:\n---- BEGIN SSH2 PUBLIC KEY ----\nComment: \"github-example-key\"\nAAAAB3NzaC1yc2EAAAABJQAAAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYF\ni2fSBrsGcmqeb5EwgnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcp\npY0fhRSGtWL5fT8DGm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3\noMrongEjGw7sDP48ZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEA\nip3mL20+qHNsHfW8hJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9\ntBjh7cOyuU/c4M4D6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElw==\n---- END SSH2 PUBLIC KEY ----\n\nOpenSSH\nContrary to popular belief, this format doesn't get saved by the generator. However it is generated and shown in the text box titled \"Public key for pasting into OpenSSH authorized_keys file\". To save it as a file, you have to manually copy it from the text box and paste it into a new text file.\nFor the key shown above, this would be:\nssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYFi2fSBrsGcmqeb5EwgnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcppY0fhRSGtWL5fT8DGm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3oMrongEjGw7sDP48ZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEAip3mL20+qHNsHfW8hJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9tBjh7cOyuU/c4M4D6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElw== github-example-key\n\nThe format of the key is simply ssh-rsa <signature> <comment> and can be created by rearranging the SSH-2 formatted file.\nRegenerating Public Keys\nIf you are making use of ssh-agent, you will likely also have access to ssh-keygen.\nIf you have your OpenSSH Private Key (id_rsa file), you can generate the OpenSSH Public Key File using:\nssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub\n\nIf you only have the PUTTY Private Key (id_rsa.ppk file), you will need to convert it first.\n\nOpen the PuTTY Key Generator\nOn the menu bar, click \"File\" > \"Load private key\"\nSelect your id_rsa.ppk file\nOn the menu bar, click \"Conversions\" > \"Export OpenSSH key\"\nSave the file as id_rsa (without an extension)\n\nNow that you have an OpenSSH Private Key, you can use the ssh-keygen tool as above to perform manipulations on the key.\nBonus: The PKCS#1 PEM-encoded Public Key Format\nTo be honest, I don't know what this key is used for as I haven't needed it. But I have it in my notes I've collated over the years and I'll include it here for wholesome goodness. The file will look like this:\n-----BEGIN RSA PUBLIC KEY-----\nMIIBCAKCAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYFi2fSBrsGcmqeb5Ew\ngnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcppY0fhRSGtWL5fT8D\nGm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3oMrongEjGw7sDP48\nZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEAip3mL20+qHNsHfW8\nhJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9tBjh7cOyuU/c4M4D\n6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElwIBJQ==\n-----END RSA PUBLIC KEY-----\n\nThis file can be generated using an OpenSSH Private Key (as generated in \"Regenerating Public Keys\" above) using:\nssh-keygen -f ~/.ssh/id_rsa -y -e -m pem > ~/.ssh/id_rsa.pem\n\nAlternatively, you can use an OpenSSH Public Key using:\nssh-keygen -f ~/.ssh/id_rsa.pub -e -m pem > ~/.ssh/id_rsa.pem\n\n##References:##\n\n\"key_load_public: invalid format...\" on AskUbuntu\nThe Secure Shell (SSH) Public Key File Format\nConverting OpenSSH public keys"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "See Repositories where I am Collaborator\n\nI am a collaborator on a private repo, but it doesn't show up under my repositories.  I also cannot see it on the other user's repository listing because it is private. I have confirmed that I am able to push/pull to the repo.  Is there a way to access this repository using Github without typing in the full URL ?"}, {"role": "assistant", "content": "You can see the repositories where you're a collaborator. To do this, head to the Repositories section of your account's settings (https://github.com/settings/repositories).\nThere should be a Leave action button aside each repository you're a collaborator on."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Issue pushing new code in Github\n\nI created a new repository on Github which has only Readme.md file now.\nI have a newly created RoR project which I wanted to push to this repository.\nFollowing are the commands I gave in my Terminal to execute this along with the error I am getting.\ngit remote add origin https://github.com/aniruddhabarapatre/learn-rails.git\n\nAfter which I entered my username and password\ngit push -u origin master\n\nError ---\nTo https://github.com/aniruddhabarapatre/learn-rails.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'https://github.com/aniruddhabarapatre/learn-rails.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first merge the remote changes (e.g.,\nhint: 'git pull') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nThis is my first time pushing my code to a Github repository and I'm lost with the errors. I searched few other questions that are asked here, but none of them had issues first time."}, {"role": "assistant", "content": "If this is your first push, then you might not care about the history on the remote. You could then do a \"force push\" to skip checks that git does to prevent you from overwriting any existing, or differing, work on remote. Use with extreme care!\njust change the\ngit push **-u** origin master\n\nchange it like this!\ngit push -f origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub pages are not updating\n\nI'm running into a weird issue with GitHub pages. I pushed a new commit to my personal pages page maltzj.github.io, but the new article isn't showing up there. When I execute the server locally, a post lives at localhost:4000/posts/the-price-of-inconsistent-code/. However, when I go to http://maltzj.github.io/posts/the-price-of-inconsistent-code I get a 404. I also added a new file which should live at http://maltz.github.io/test.html, but that also throws a 404.\nEverything builds and runs locally. My Git repository is up to date, and there is nothing on the GitHub status page about problems with builds, so I'm at a little bit of a loss about where to go with this. How can I get my page to update with new content that I add?\nFor reference, the location of the repository which backs my page is http://github.com/maltzj/maltzj.github.io"}, {"role": "assistant", "content": "None of these solutions solved it for me. The solution was to edit the index.html file in the GitHub website.\nThe website then updates on the web as expected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase merge conflict\n\nI forked a github repo and worked on my github repo.\nI have made pull-requests and it was completed. \nAfter that the upstream had some more commits so now I want to rebase, I guess thats what I have to do.\nBut I'm getting these merge conflicts:\nFirst, rewinding head to replay your work on top of it...\nApplying: Issue 135 homepage refresh\nUsing index info to reconstruct a base tree...\n<stdin>:17: trailing whitespace.\n      %h4 \nwarning: 1 line adds whitespace errors.\nFalling back to patching base and 3-way merge...\nAuto-merging app/views/layouts/application.html.haml\nCONFLICT (content): Merge conflict in app/views/layouts/application.html.haml\nAuto-merging app/views/home/index.html.haml\nCONFLICT (content): Merge conflict in app/views/home/index.html.haml\nAuto-merging app/views/home/_group_projects.html.haml\nCONFLICT (content): Merge conflict in app/views/home/_group_projects.html.haml\nFailed to merge in the changes.\nPatch failed at 0001 Issue 135 homepage refresh\n\nWhen you have resolved this problem run \"git rebase --continue\".\nIf you would prefer to skip this patch, instead run \"git rebase --skip\".\nTo check out the original branch and stop rebasing run \"git rebase --abort\".\n\nI don't know how to fix these, please help."}, {"role": "assistant", "content": "Rebasing can be a real headache. You have to resolve the merge conflicts and continue rebasing. For example you can use the merge tool (which differs depending on your settings)\ngit mergetool\n\nThen add your changes and go on\ngit rebase --continue\n\nGood luck"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change GitHub Account username\n\nI want to change my account's user name on GitHub, but I can't find how to do it. Is this possible at all? To clarify, I'm not talking about the user.name parameter in a git repository, but the username of the actual GitHub account."}, {"role": "assistant", "content": "Yes, it's possible. But first read, \"What happens when I change my username?\"\nTo change your username, click your profile picture in the top right corner, then click Settings. On the left side, click Account. Then click Change username.\nSee the pictures below:\nSettings\nChange username\nConfirm changing username\nType the new username\nConfirm the new username"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I change the remote/target repository URL on Windows? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I change the URI (URL) for a remote Git repository?\n\n                                (34 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI created a local GIT repository on Windows. Let's call it AAA. I staged, committed, and pushed the contents to GitHub. [email\u00a0protected]:username/AAA.git \nI realized I made a mistake with the name.\nOn GitHub, I renamed it to [email\u00a0protected]:username/BBB.git \nNow, on my Windows machine, I need to change [email\u00a0protected]:username/AAA.git to [email\u00a0protected]:username/BBB.git because the settings are still trying to \"push\" to [email\u00a0protected]:username/AAA.git but I need to push to [email\u00a0protected]:username/BBB.git now.\nHow could I do that?"}, {"role": "assistant", "content": "git remote set-url origin <URL>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub changes repository to the wrong language\n\nI know this isn't a huge deal, but I like my GitHub to be linguistically diversified. I wrote a project in Swift and when I commit it says it's in Objective-C.\nI think it might be because the Parse frameworks are written in Objective-C and it detects that, but is there a way to change the display language on the main repository page?"}, {"role": "assistant", "content": "I found the simplest thing was to create a file called .gitattributes in the root folder of my repository, and give it these contents:\n* linguist-vendored\n*.js linguist-vendored=false\n\nThis example tells GitHub/Linguist to ignore all files, and then just look at .js files.  My project, https://github.com/aim12340/jQuery-Before-Ready, was listed as HTML because the HTML example files were bigger than the JavaScript files.  This file fixes it for me and now it's listed as JavaScript."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I pull my project from github?\n\nI have a project on github that I have been working on before.  However, I wiped out my computer and I am wondering which git command should I invoke under my username to checkout my project again so that I can push my latest changes to github under my account."}, {"role": "assistant", "content": "Git clone is the command you're looking for:\ngit clone [email\u00a0protected]:username/repo.git\n\nUpdate:\nAnd this is the official guide:\nhttps://help.github.com/articles/fork-a-repo\nTake a look at:\nhttps://help.github.com/\nIt has really useful content"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: searching through older versions of files\n\nI know that using GitHub I can search through all the current versions of my files in a repo. However, I would also like to search through the older versions of my repo files. For example, say, I used to have a function called get_info() in my code, but deleted it several versions ago, is it possible to search for get_info and find the code. If it is not possible using GitHub, is it possible from the git command line?\nEDIT\nThanks to @Mark Longair for showing how this can be done from the git command line. If it's not possible in GitHub it would be a great feature to have."}, {"role": "assistant", "content": "Currently, I don't believe it's possible to search within the complete history of a repository's code on the github website - the closest is just searching within the current code of a repository with the \"code search\" option on this page.\nHowever, from the command line, you can find any commits that introduced or removed lines mentioning get_info with the -S option to git log.  e.g.:\ngit log -Sget_info -p\n\n(n.b. there should be no space between -S and the search term)\n(also note: to search for more than one word, surround in '):\ngit log -S'get info' -p\n\nSo, at a minimum that should find the commit where the function was first introduced and the one that removed it.  I added the -p so you can also see the patches - if lots of commits introduced changes that mentioned the function that may be helpful.  If the function was only on another branch it might also be useful to use --all to search all branches.\nJefromi points out in a comment below that git 1.7.4 will introduce the -G option as an alternative - this change is summarized in a recent blog post from Junio Hamano (git maintainer): http://gitster.livejournal.com/48191.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download .zip from GitHub for a particular commit sha?\n\nI want to download a .zip with the source of a library hosted on github, but I don't want the master, because every time I download I could be downloading a different version.\nThis particular library does not have tags, so I can't use that.\nSo how do I download the source.zip for a specific commit sha?"}, {"role": "assistant", "content": "You can put the sha that you want in the download url:\nhttps://github.com/{username}/{projectname}/archive/{sha}.zip\nAs a general rule, if you have a url that works, you can replace \"master\" with the specific sha you want.\nOn unix:\nwget https://github.com/{username}/{projectname}/archive/{sha}.zip\nKeep in mind that if this is a private repo then wget will not work unless you pass an OAuth token as well.\nHere's more info on that:\nHaving trouble downloading Git archive tarballs from Private Repo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to update my working Git branch from another branch (develop)?\n\nI made a new branch called feature1 from the main develop branch a month ago.\n\u21d2  git branch \n  develop\n* feature1\n\nI've been working on feature1 for a month now and a lot of changes have been pushed to develop.\nHow can I update my current branch feature1 with the latest commits from develop?\nI DO NOT want to checkout master and merge my feature1 branch into it. Neither do I want to use git cherry-pick to manually move commits from develop to feature1.\nHow would I go about doing this?"}, {"role": "assistant", "content": "You just merge develop to feature1:\ngit checkout feature1\ngit merge develop\n\nThere is no need to involve another branch such as master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to revert Master branch to upstream\n\nI have forked a git repository and setup upstream. I've made some changes in Master branch and committed and pushed to github.\nNow what should I do to abandon all my changes in Master branch and make it identical to the upstream's master branch?"}, {"role": "assistant", "content": "(I'm assuming that the changes that you now want to ignore are at your origin remote, you're on your master branch, and you want to revert to the contents of the upstream remote)\nFirstly, reset your working copy to the upstream master:\ngit remote update\n# the double hyphen ensures that upstream/master is\n# considered as a revision and not confused as a path\ngit reset --hard upstream/master --\n\nThen push this new branch-head to your origin repository, ignoring the fact that it won't be a fast-forward:\ngit push origin +master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "difference between fork and branch on github\n\nIf I fork a project that's hosted on github. Do I fork all the branches? How do I know which branch my fork is based on? In other words which branch will be downloaded to my PC?"}, {"role": "assistant", "content": "Think of it this way:\nThe repo[sitory] corresponds to the collaborated work of the team across one or many branches. All contributors have their own copy of it.\nEach fork of the main repo corresponds to a contributor's work. A fork is really a Github (not Git) construct to store a clone of the repo in your user account. As a clone, it will contain all the branches in the main repo at the time you made the fork.\nEach branch within the fork and/or in the main repo can correspond to several kinds of things, depending on how you want to work. Each branch could refer to a version of the project but can also correspond to different channels of development, like hotfixes or experimental work.\nThe pull request (in the GitHub ecosystem) corresponds to the task. Every time I want to contribute an isolated finished task to the main repo, I create a pull request corresponding to the commits made in that task. These commits are pulled from either my fork or my branch to the main repo.\nA commit is a set of changes to the code. This is one of the most interesting things about Git. You don't transfer files, you transfer logs of changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git fails when pushing commit to github\n\nI cloned a git repo that I have hosted on github to my laptop.  I was able to successfully push a couple of commits to github without problem.  However, now I get the following error: \nCompressing objects: 100% (792/792), done.\nerror: RPC failed; result=22, HTTP code = 411\nWriting objects: 100% (1148/1148), 18.79 MiB | 13.81 MiB/s, done.\nTotal 1148 (delta 356), reused 944 (delta 214)\n\nFrom here it just hangs and I finally have to CTRL + C back to the terminal."}, {"role": "assistant", "content": "I had the same issue and believe that it has to do with the size of the repo (edited- or the size of a particular file) you are trying to push.\nBasically I was able to create new repos and push them to github. But an existing one would not work.\nThe HTTP error code seems to back me up it is a 'Length Required' error. So maybe it is too large to calc or greated that the max. Who knows.\nEDIT\n\nI found that the problem may be\nfiles that are large. I had one update\nthat would not push even though I had\nsuccessful pushes up to that point.\nThere was only one file in the commit\nbut it happened to be 1.6M\nSo I added the following config change\ngit config http.postBuffer 524288000\n\nTo allow up to the file size 500M and\nthen my push worked. It may have been\nthat this was the problem initially\nwith pushing a big repo over the http\nprotocol.\n\nEND EDIT\nthe way I could get it to work (EDIT before I modified postBuffer) was to tar up my repo, copy it to a machine that can do git over ssh, and push it to github. Then when you try to do a push/pull from the original server it should work over https. (since it is a much smaller amount of data than an original push)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Actions - trigger another action after one action is completed\n\nI have one action (a yaml file) for deploying a docker image to Google Cloud Run.\nI would like to receive Slack or Email messages informing the build and push results.\nHow could the message action be triggered after build action is completed?\nIs it possible to get the result of the build action?"}, {"role": "assistant", "content": "There are 2 options of doing this:\n\nUse a second job inside the same workflow.yml together with the needs keyword\nCreate a separate notify.yml workflow that uses the workflow_run event as a trigger\n\n\n1. Same workflow, separate job with needs keyword\nIn your workflow.yml file you simply define two jobs like this (leveraging the needs: build configuration in the second job):\nname: CI build and notify\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Deploy Docker image to Google Cloud Run\n      run: ...\n\n  notify:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Notify Slack and send eMail\n        run: ...\n\nAs the docs state, the second notify job will only start if the first build job succeeded:\n\nIdentifies any jobs that must complete successfully before this job\nwill run.\n\nHere's a screenshot of how this approach can look like practically from my own project (I have a second publish-snapshot job instead of your notify job - but the concept stays the same):\n\nThere's also a way to always let the notify job run, even if the build job failed. You have to enhance the needs with a if: always() configuration then.\n\n2. Separate workflow, using the workflow_run event as a trigger\nUsing the workflow_run event as a trigger we end up having 2 separate GitHub Actions workflow yaml files:\nbuild.yml\nname: CI build\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Deploy Docker image to Google Cloud Run\n      run: ...\n\nnotify.yml\nname: CI notify\n\n# Only trigger, when the build workflow succeeded\non:\n  workflow_run:\n    workflows: [\"CI build\"]\n    types:\n      - completed\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Notify Slack and send eMail\n        run: ...\n\nA crucial point here is that the name: CI build definition of the first yaml file must exactly match the workflow_run: workflows: [\"CI build\"] definition in the second yaml file. Another point is that this approach needs to be done on the default branch (which is mostly main or master) as the docs state:\n\nNote: This event will only trigger a workflow run if the workflow file\nis on the default branch.\n\nHere's also a full example project using the 1st option if you're interested."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to make relative link to image in a markdown file in a gist?\n\nI've got a gist which contains a markdown file and an image.\nIs there a way to do a relative link to this image?\nSomething like ![My image](image.png) instead of ![My image](https://gist.github.com/user/605560c2961cb3025038/raw/b75d2...6e8/img.png)\nHere is an example"}, {"role": "assistant", "content": "As of now, relative image links are working for me, in both a repository and a wiki.  I'm using syntax like this:\n![Kiku](images/Kiku.jpg)\n\nHere's an example:\nhttps://github.com/mark-anders/relative-image-url"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git clone error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054\n\nI'm having trouble cloning a repo on git. I've been trying for to days and have tried quite a few solutions (in most the problem was slightly different but seemed to apply) but nothing has done anything to make a difference.\nI've tried switching off the anti-virus and firewall but that didn't help.\nI've also tried uninstalling and reinstalling the network adapter drivers (and restarting the computer) and that didn't work.\nFrom what I understand it's a network issue somewhere as the remote server keeps hanging up but I'm not managing to get anywhere with the issue.\nUsing git clone -v --progress seemed to give the same output as git clone.\nOutput from git clone -v --progress https://github.com/mit-cml/appinventor-sources.git\n\nCloning into 'appinventor-sources'...\n  POST git-upload-pack (gzip 1425 to 774 bytes)\n  remote: Counting objects: 41649, done.\n  remote: Compressing objects: 100% (7/7), done.\n  error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054\n  fatal: The remote end hung up unexpectedly\n  fatal: early EOF\n  fatal: index-pack failed  \n\nI've now tried increasing the buffer again \n\ngit config --global http.postBuffer 1048576000\n\nbut still nothing.\nI'm following the solution from The remote end hung up unexpectedly while git cloning for troubleshooting."}, {"role": "assistant", "content": "I resolved the same problem by this:\ngit config http.postBuffer 524288000\n\nIt might be because of the large size of the repository and the default buffer size of git so by doing above (on git bash), git buffer size will be increased."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: 'origin' does not appear to be a git repository\n\nI've a repository moodle on my Github account which I forked from the official repository.\nI then cloned it on my local machine. It worked fine. I created several branches (under the master branch). I made several commits and it worked fine. \nI don't know how I'm getting the following error when I do : git push origin master\nfatal: 'origin' does not appear to be a git repository\nfatal: The remote end hung up unexpectedly\n\nHow do I resolve the error without effecting my repository on Github?\nI'm using Ubuntu 12.10\nThe contents of my .git/config after doing cat $(git rev-parse --show-toplevel)/.git/config gives:\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[branch \"master\"]\n[branch \"MOODLE_23_STABLE\"]\n[branch \"MOODLE_24_STABLE\"]\n[remote \"upstream\"]\n    url = git://git.moodle.org/moodle.git\n    fetch = +refs/heads/*:refs/remotes/upstream/*"}, {"role": "assistant", "content": "$HOME/.gitconfig is your global config for git.\nThere are three levels of config files.\n cat $(git rev-parse --show-toplevel)/.git/config\n\n(mentioned by bereal) is your local config, local to the repo you have cloned.\nyou can also type from within your repo:\ngit remote -v\n\nAnd see if there is any remote named 'origin' listed in it.\nIf not, if that remote (which is created by default when cloning a repo) is missing, you can add it again:\ngit remote add origin url/to/your/fork\n\n\nThe OP mentions:\n\nDoing git remote -v gives: \n\nupstream git://git.moodle.org/moodle.git (fetch) \nupstream git://git.moodle.org/moodle.git (push)\n\nSo 'origin' is missing: the reference to your fork.\nSee \"What is the difference between origin and upstream in github\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git produces Gtk-WARNING: cannot open display\n\nI've been working on my project remotely through the command line on a machine to which I don't have admin rights and after running git push origin master I get the following error message:\n(gnome-ssh-askpass:29241): Gtk-WARNING **: cannot open display:\n\nMy .git/config file has the following contents:\n\n    [core]\n       repositoryformatversion = 0\n       filemode = true\n       bare = false\n       logallrefupdates = true \n    [remote \"origin\"]\n       fetch = +refs/heads/*:refs/remotes/origin/*\n       url = https://[email\u00a0protected]/username/repository.git \n    [branch \"master\"]\n       remote = origin\n       merge = refs/heads/master\n\n\nI was getting the 403 error earlier. Following the comment here, I put my username before the @ sign in the remote url and since then, I've been getting the Gtk error.\nWhen I login to the machine using ssh -X and try to push, I get the following error:\nX11 connection rejected because of wrong authentication.\n(gnome-ssh-askpass:31922): Gtk-WARNING **: cannot open display:localhost:10.0\n\nIf I change the url of the remote to [email\u00a0protected]:username/repository.git, then the error is:\nssh: connect to host github.com port 22: Connection timed out\nfatal: The remote end hung up unexpectedly\n\nDo you know how to fix this?"}, {"role": "assistant", "content": "I have finally discovered a solution to the problem. As it was described here, I ran the following command in the terminal:\n  unset SSH_ASKPASS\n\nand then running git push origin master works the way it should. You can also add the line to your .bashrc file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to get colored text in GitHubflavored Markdown? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to add color to GitHub's README.md file\n\n                                (22 answers)\n                            \n\nClosed 6 years ago.\n\n\n\nI need to document a library on GitHub that output colored text in the terminal.\nI've tried both span <style=\"color:red\"> and <font color=\"red\">, but it seems to strip out both tags.\nIs the only way to do this is with images of colored text?\n\nI ended up adding screenshots to Git and using image links with GitHub relative URLs."}, {"role": "assistant", "content": "In case this may be helpful for someone who just needs to show colors rather than output, as a hackish workaround (and FYI), since GitHub supports Unicode (as Unicode, numeric character references or HTML entities), you could try colored Unicode symbols, though it depends on the font rendering them in color (as it happens to be appearing for me on Windows 10 and Mac 10.12.5, at least, though on the Mac at least, the up/down-pointing small red triangles don't show in red):\n\nRED APPLE (&#x1F34E;): \ud83c\udf4e\nGREEN APPLE (&#x1F34F;): \ud83c\udf4f\nBLUE HEART (&#x1F499;): \ud83d\udc99\nGREEN HEART (&#x1F49A;): \ud83d\udc9a\nYELLOW HEART (&#x1F49B;): \ud83d\udc9b\nPURPLE HEART (&#x1F49C;): \ud83d\udc9c\nGREEN BOOK (&#x1F4D7;): \ud83d\udcd7\nBLUE BOOK (&#x1F4D8;): \ud83d\udcd8\nORANGE BOOK (&#x1F4D9;): \ud83d\udcd9\nLARGE RED CIRCLE (&#x1F534;): \ud83d\udd34\nLARGE BLUE CIRCLE (&#x1F535;): \ud83d\udd35\nLARGE ORANGE DIAMOND (&#x1F536;): \ud83d\udd36\nLARGE BLUE DIAMOND (&#x1F537;): \ud83d\udd37\nSMALL ORANGE DIAMOND (&#x1F538;): \ud83d\udd38\nSMALL BLUE DIAMOND (&#x1F539;): \ud83d\udd39\nUP-POINTING RED TRIANGLE (&#x1F53A;): \ud83d\udd3a\nDOWN-POINTING RED TRIANGLE (&#x1F53B;): \ud83d\udd3b\nUP-POINTING SMALL RED TRIANGLE (&#x1F53C;): \ud83d\udd3c\nDOWN-POINTING SMALL RED TRIANGLE (&#x1F53D;): \ud83d\udd3d"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub authentication failing over https, returning wrong email address\n\nInitiating a push or any other action with GitHub from the command line (over https, not ssh) that calls for the username and password not only fails but, when it does, it returns \nUsername for 'https://github.com': username\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/username/repository.git/'\n\nI do not have an @github.com address. The password and username are correct.\nI know I could switch to SSH and use keys but that doesn't answer why the authentication is failing over https."}, {"role": "assistant", "content": "GitHub's support determined the root of the issue right away: Two-factor authorization.\nTo use GitHub over the shell with https, create an OAuth token. As the page notes, I did have to remove my username and password credentials from Keychain but with osx-keychain in place, the token is stored as the password and things work exactly as they would over https without two-factor authorization in place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How long does it take GitHub page to update after changing index.html?\n\nI am just wondering how long does it take for GitHub page to show the new items that I have added to the repository.\nI changed index.html but after 10 minutes it still showed up the previous page..."}, {"role": "assistant", "content": "The first time you generate your site it will take about 10 minutes for it to show up. Subsequent builds take only seconds from the time you push the changes to your GitHub repository.\nHowever, depending on how your have your domain configured, there may be extra time for the CDN cache to break.\nNote: using a subdomain, such as yourproject.github.io is the recommended domain setup, but does mean page builds take longer to show up since it has the benefit of using the GitHub CDN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the name of a gist in github?\n\nIs there a way to change the name of a gist (github) ?, apparently it is ordering the files of the gist in alphabetical order, an naming the gist according to the file that appears first."}, {"role": "assistant", "content": "Even better, you can add a file with a leading space in its name. It's virtually invisible and gives you more freedom when choosing the title and names for the files:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git authentication fails after enabling 2FA\n\nI just enabled 2FA (I can't think of any other changes I made) and git asked for my username and password. I provided both, but they were \"wrong\". I tried many of the solutions here: Git push requires username and password but that didn't work. In particular, when switching from https to ssh, the ssh key gives \nPermission denied (publickey).\nfatal: Could not read from remote repository.\n$ git push\nwarning: push.default is unset; its implicit value is changing in\nGit 2.0 from 'matching' to 'simple'. To squelch this message\nand maintain the current behavior after the default changes, use:\n\n  git config --global push.default matching\n\nTo squelch this message and adopt the new behavior now, use:\n\n  git config --global push.default simple\n\nSee 'git help config' and search for 'push.default' for further information.\n(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode\n'current' instead of 'simple' if you sometimes use older versions of Git)\n\nUsername for 'https://github.com': **********\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/mlbileschi/scala.git/'\n\nAny tips?"}, {"role": "assistant", "content": "You need to generate an access token. You can create one by going to your settings page.\n\nUse this access token as your password in the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Authenticate Jenkins CI for Github private repository\n\nI'd like for Jenkins to automagically fetch data from my private repository hosted on Github.\nBut I have no idea how to accomplish that task.. Tried the documentation, generating ssh-key for jenkins user and all what I can see is: \"unable to clone the repo\". I've checked URLs - they are valid.\nAny clues, maybe you know some docs/blogs/whatever which are describing this kind of stuff?"}, {"role": "assistant", "content": "Perhaps GitHub's support for deploy keys is what you're looking for?  To quote that page:\n\nWhen should I use a deploy key?\nSimple, when you have a server that needs pull access to a single private repo. This key is attached directly to the repository instead of to a personal user account.\n\nIf that's what you're already trying and it doesn't work, you might want to update your question with more details of the URLs being used, the names and location of the key files, etc.\n\nNow for the technical part: How to use your SSH key with Jenkins?\nIf you have, say, a jenkins unix user, you can store your deploy key in ~/.ssh/id_rsa. When Jenkins tries to clone the repo via ssh, it will try to use that key.\nIn some setups, you cannot run Jenkins as an own user account, and possibly also cannot use the default ssh key location ~/.ssh/id_rsa. In such cases, you can create a key in a different location, e.g. ~/.ssh/deploy_key, and configure ssh to use that with an entry in ~/.ssh/config:\nHost github-deploy-myproject\n    HostName       github.com\n    User           git\n    IdentityFile   ~/.ssh/deploy_key\n    IdentitiesOnly yes\n\nBecause all you authenticate to all Github repositories using [email\u00a0protected] and you don't want the above key to be used for all your connections to Github, we created a host alias github-deploy-myproject. Your clone URL now becomes\ngit clone github-deploy-myproject:myuser/myproject\n\nand that is also what you put as repository URL into Jenkins.\n(Note that you must not put ssh:// in front in order for this to work.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub folders have a white arrow on them\n\nI have recently pushed to github, and see a white arrow on one of my folders. \n\nand when i click on the folder, it does not open it. On my local machine, it has contents, but in github i cannot access them. What does this mean?"}, {"role": "assistant", "content": "Symptom\nCheck if locally you have a .git/ sub-folder under that folder.\nCause\nThat would mean the folder (locally) is a nested Git repository, whose tree SHA1 is recorded as a \"gitlink\" (gray folder with straight white arrow)\nWhat you would then see on GitHub is that gitlink: SHA-1 of the object refers to a commit in another repository, represented by an empty folder name. It is a nested Git repository.\nIf you see a folder @ xxx, then it is a submodule entry, meaning your own repository has a .gitmodules in it, which records, in addition of the gitlink, the actual URL of the remote repository.\nIt represents the object name of the commit that the super-project expects the nested submodule's working directory to be at.\nIn both cases (white arrow with a folder name, or white arrow with folder @ xxx, folder name and version), it is a Gitlink represented a nested Git repository: a placeholder for another Git repository, hence an empty folder. But in the second case, that empty folder would be referenced/visible in a special .gitmodules file.\n\nSolution (to remove the white arrow)\nIn order to restore that folder content:\nsubmodule:\nA git clone --recurse-submodules would restore the content of that submodule in your local repository (as opposed to a nested Git repo, where its URL is not recorded, and the content of the folder would remain empty)\nThe white arrow would remain on the remote repository, with folder @ version displaying what SHA1 of the submodule repository is referenced by your project.\nNested Git repository:\nAlternatively, you could, if you don't care about the history of that folder, delete locally its .git subfolder (assuming it is not a submodule, meaning it is not referenced in a .gitmodules file in your main repository), add, commit and push.\nThe white arrow would then disappear, and you would be able to access that folder content on GitHub.\nThen you would need to delete the gitlink entry:\ngit rm --cache client_folder \n# without a trailing slash: \n# not client_folder/ but client_folder\n\nFinally, you can add, commit and push that folder content."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to \"pull request\" a specific commit\n\nI've got a specific commit which I would like to contribute to a repository I have forked on github.\nI assume the mechanism to do so is a \"pull request\".\nHowever when I try this I can only pull request my whole branch.\nI do not wish to pull request the other commits as they are not relevant.\nAny idea how I can do this.\n\nThe last commit b50b2e7 is the only commit I wish to pull request.\nAnyway I can do this or are all commits dependent on each other?"}, {"role": "assistant", "content": "Create a new branch with just that change:\n# If you haven't set up your remote yet, run this line:\n# git remote add upstream https://github.com/konradjk/exac_browser.git\ngit fetch --all                                   # Get the latest code\ngit checkout -b my-single-change upstream/master  # Create new branch based on upstream/master\ngit cherry-pick b50b2e7                           # Cherry pick the commit you want\ngit push -u origin my-single-change               # Push your changes to the remote branch\n\nThen create the PR from that branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to avoid merge-commit hell on GitHub/BitBucket\n\nWe're ending up with a lot of commits like this in our repo:\nMerge branch 'master' of bitbucket.org:user/repo\n\nThis happens every time a developer syncs his/hers local fork to the top-level repo.\nIs there anyway to avoid this merge-commit hell from cluttering all the repo log? Can one avoid them when initiating the pull-requests in some way?\nI know I can do git rebase if this is done in my local VM only, is there any equivalence in the GitHub/BitBucket UI?\nHow do you guys do it?"}, {"role": "assistant", "content": "Rebase Feature Branches Before Merging\nIf you want to avoid merge commits, you need to ensure all commits are fast-forwards. You do this by making sure your feature branch rebases cleanly onto your line of development before a merge like so:\ngit checkout master\ngit checkout -b feature/foo\n\n# make some commits\n\ngit rebase master\ngit checkout master\ngit merge --ff-only feature/foo\n\nRebase also has a lot of flags, including interactive rebasing with the -i flag, but you may not need that if you're keeping things as simple as possible and want to preserve all of your branch history on a merge.\nUse the --ff-only Flag\nAside from rebasing, the use of the --ff-only flag will ensure that only fast-forward commits are allowed. A commit will not be made if it would be a merge commit instead. The git-merge(1) manual page says:\n\n--ff-only  \nRefuse to merge and exit with a non-zero status unless the current\n             HEAD is already up-to-date or the merge can be resolved as a\n             fast-forward."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: make fork an \"own project\"\n\nI have found a nice GitHub project which I extended a lot. I believe my changes are good, because they are working. But it seems the original author hasn't got the time to review these changes and include them. In fact, it is even possible that the features I need and implemented are not in the vision of the original author and we simply aim at different goals. I don't know as I never got responses from him.\nThat said I saw my contributions are not counted in my commit-map. This is the case as long as the original repository doesn't accept my contributions. Furthermore my work is only recognized as work and doesn't attract any other people with the same vision as I have. This is the bigger problem for me, because I see a lot of people asking for these features.\nI am still offering my contributions to the original project, but I see it is unlikely they are ever accepted. Now I would like to make my fork a \"real project\". While I plan to sync with the original project at some points of time, I want to rename it and motivate people to contribute to my project as well. In addition, I would love if GitHub would show that this project is actively maintained (speaking of the commit map). And finally, I would love to make proper releases of it.\nHow can I get this done and well, make my fork a full-fledged project?"}, {"role": "assistant", "content": "To detach the fork and turn it into a standalone repository on GitHub, contact GitHub support.\n\nhttps://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/#commit-was-made-in-a-fork"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Docker on Windows 10 \"driver failed programming external connectivity on endpoint\"\n\nI am trying to use $ docker-compose up -d for a project and am getting this error message:\n\nERROR: for api  Cannot start service api: driver failed programming external connectivity on endpoint dataexploration_api_1 (8781c95937a0a4b0b8da233376f71d2fc135f46aad011401c019eb3d14a0b117): Error starting userland proxy: mkdir /port/tcp:0.0.0.0:9000:tcp:172.19.0.2:80: input/output error\n  Encountered errors while bringing up the project.\n\nI am wondering if it is maybe the port? I had been trying port 8080 previously. The project was originally set up on a mac and I have cloned the repository from gitHub."}, {"role": "assistant", "content": "I got the same error message on my Windows 10 Pro / Docker v17.06.1-ce-win24 / Docker-Compose v1.14.0 using Windows Powershell x86 in admin mode.\nThe solution was to simply restart Docker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Key is invalid\" message on GitHub\n\nI have generated SSH keys for a new server installation according to the procedure outlined here. However, when I copy the contents of id_rsa.pub to my keys list on GitHub, I get the error message \"Key is invalid. Ensure you've copied the file correctly.\" \nThe generated key is valid, and I am copying it exactly as is (all in one line with no whitespace at the beginning/end).\nAnybody have an idea what could be going on?"}, {"role": "assistant", "content": "I came here because I had the same problem. From your question, I realized that I was copying the contents from the wrong file, without the .pub extension (it was my private key, i.e. the id_rsa file, which should be kept private at all times!)\nFrom a MAC:\nvi ~/.ssh/id_rsa.pub\n\nCopy exactly from the end (with be the last letter of your email domain extension) of the block of characters to the beginning, which starts with ssh-rs ...\nIf it doesn't work, you are surely not copying properly. \nIt worked. \nIf you are on Windows, use notepad and copy-paste as described above. \nI hope that helped."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why doesn't my SSH key work for connecting to github?\n\nNote: I'm not a newb, and I've done this a gazillion times, but for some reason today it decided not to work.\nI keep getting the Permission denied (publickey). error message when trying to connect to github via SSH or when trying to clone a repo, even after remaking the ssh key and adding it to \"SSH Keys\" in my account.\nThis is what I tried to do ten times today without success:\n\nmake a key with ssh-keygen.\nopen ~/.ssh/id_rsa.pub with Gedit or Notepad++ and copy the contents.\nGo to account settings on github.com\nGo to SSH Keys\nClick on the Add Key button.\ngive the key a title\npaste the key into the key box.\nSave the key (enter my github password to verify).\n\nAnd now, when I try doing ssh github.com it just won't work.... What in the world? Am I just too tired right now or am I missing something?\nHere's the output from ssh -vvv github.com\nOpenSSH_5.9p1, OpenSSL 1.0.0f 4 Jan 2012\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to github.com [207.97.227.239] port 22.\ndebug1: Connection established.\ndebug3: Incorrect RSA1 identifier\ndebug3: Could not load \"/home/trusktr/.ssh/id_rsa\" as a RSA1 public key\ndebug1: identity file /home/trusktr/.ssh/id_rsa type 1\ndebug1: identity file /home/trusktr/.ssh/id_rsa-cert type -1\ndebug1: identity file /home/trusktr/.ssh/id_dsa type -1\ndebug1: identity file /home/trusktr/.ssh/id_dsa-cert type -1\ndebug1: identity file /home/trusktr/.ssh/id_ecdsa type -1\ndebug1: identity file /home/trusktr/.ssh/id_ecdsa-cert type -1\ndebug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2\ndebug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_5.9\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: load_hostkeys: loading entries for host \"github.com\" from file \"/home/trusktr/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /home/trusktr/.ssh/known_hosts:16\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: order_hostkeyalgs: prefer hostkeyalgs: [email\u00a0protected],[email\u00a0protected],ssh-rsa\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],ssh-rsa,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,[email\u00a0protected],hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,[email\u00a0protected],hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,[email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,[email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,[email\u00a0protected],hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,[email\u00a0protected],hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: mac_setup: found hmac-md5\ndebug1: kex: server->client aes128-ctr hmac-md5 none\ndebug2: mac_setup: found hmac-md5\ndebug1: kex: client->server aes128-ctr hmac-md5 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<1024<8192) sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: dh_gen_key: priv key bits set: 122/256\ndebug2: bits set: 510/1024\nd    ebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\ndebug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48\ndebug3: load_hostkeys: loading entries for host \"github.com\" from file \"/home/trusktr/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /home/trusktr/.ssh/known_hosts:16\ndebug3: load_hostkeys: loaded 1 keys\ndebug3: load_hostkeys: loading entries for host \"207.97.227.239\" from file \"/home/trusktr/.ssh/known_hosts\"\ndebug3: load_hostkeys: found key type RSA in file /home/trusktr/.ssh/known_hosts:16\ndebug3: load_hostkeys: loaded 1 keys\ndebug1: Host 'github.com' is known and matches the RSA host key.\ndebug1: Found key in /home/trusktr/.ssh/known_hosts:16\ndebug2: bits set: 497/1024\ndebug1: ssh_rsa_verify: signature correct\ndebug2: kex_derive_keys\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: Roaming not allowed by server\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /home/trusktr/.ssh/id_rsa (0x14cce60)\ndebug2: key: trusktr@rocketship (0x14ce2b0)\ndebug2: key: /home/trusktr/.ssh/id_dsa ((nil))\ndebug2: key: /home/trusktr/.ssh/id_ecdsa ((nil))\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: /home/trusktr/.ssh/id_rsa\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Offering RSA public key: trusktr@rocketship\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Authentications that can continue: publickey\ndebug1: Trying private key: /home/trusktr/.ssh/id_dsa\ndebug3: no such identity: /home/trusktr/.ssh/id_dsa\ndebug1: Trying private key: /home/trusktr/.ssh/id_ecdsa\ndebug3: no such identity: /home/trusktr/.ssh/id_ecdsa\ndebug2: we did not send a packet, disable method\ndebug1: No more authentication methods to try.\nPermission denied (publickey)."}, {"role": "assistant", "content": "The GitHub ssh setup mentions testing your GitHub connection with:\n$ ssh -T [email\u00a0protected]\n\nThat follow the ssh uri syntax (also illustrated in \"this answer\").\nBut you did:\nssh github.com\n\n(without any user). In that case, ssh reverts to the SCP syntax, which relies on a ~/.ssh/config file, with a section \"github.com\", to list:\n\nthe user\nthe hostname\n(and optionally the public key location, but by default it will try ~/.ssh/id_rsa.pub)\n\nTo change it to a regular SSH URL, don't edit directly your .git/config file, as shown below.\nUse the command git remote set-url:\ngit remote set-url origin [email\u00a0protected]:username/repo.git\n\n\nAs noted by STEEL in the comments, should your private SSH key have a passphrase, you can add it to the ssh-agent with:\n\non Mac: ssh-add -K or (2023) ssh-add --apple-use-keychain\non Linux/Windows: ssh-add"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push fails: RPC failed; result=22, HTTP code = 411\n\nI have only one branch. For a few months I have been using\ngit push origin master\n\nto commit to my local repository. Last night after I made some minor changes to my local repository and tried to push using the same command, I got this error:\nerror: RPC failed; result=22, HTTP code = 411\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\nEverything up-to-date\n\nI googled and found questions such as this one and this one, but none of the answers to these questions solves my problem.\nMost of the answers suggest the problem of detached head. Yet I don't think my head is detached. Nor do I think I am on the wrong branch (as I only have one branch...)\nI did a few experiments to figure out what's wrong, and here are the results I got:\n(1) First comes my git status output\n\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n# egal.aux\n# egal.blg\n# egal.out\n# egal.pdf\n# egalcar.aux\n# egalcar.blg\n# egalcar.pdf\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n(2) When I type git reflog, I can see all my local commits, but the remote repository just won't get updated.\n(3) When I type git branch -a, I get\n\n* master\n  remotes/origin/master\n\n\n(4) When I type git remote show origin, I get\n\n* remote origin\n  Fetch URL: http://github.com/CherryQu921/egaldoc_en\n  Push  URL: http://github.com/CherryQu921/egaldoc_en\n  HEAD branch: master\n  Remote branch:\n    master tracked\n  Local ref configured for 'git push':\n    master pushes to master (fast-forwardable)\n\n\nI think the last line of output (the \"fast-forwardable\") is weird, but I am not sure what is wrong..."}, {"role": "assistant", "content": "If you attempt to push a large set of changes to a Git repository with HTTP or HTTPS, you may get an error message such as error: RPC failed; result=22, HTTP code = 411. This is caused by a Git configuration default which limits certain HTTP operations to 1 megabyte.\nTo change this limit run within your local repository\ngit config http.postBuffer *bytes*\n\nwhere bytes is the maximum number of bytes permitted. For example:\ngit config http.postBuffer 524288000\n\nFor 500MB (thanks @Hengjie)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Difference between Accept current changes and Incoming changes\n\nProblem occurs when codes are conflict.\n\nAs you see in image given above that four options are there \n\nAccept incoming changes\nAccept current changes \nAccept Both changes\nCompare changes\n\nI want to know the difference between Accept Current changes and Accept Incoming changes"}, {"role": "assistant", "content": "It depends on the type of operation (merge or rebase) leading to that conflict.\nWhen you are trying to resolve conflicts in Git, you are typically dealing with two sets of changes:\n\nChanges from your Current Branch: Often the branch you are currently working on or have checked out. In your explanation, this is described as \"what you have\" or \"the destination of the merge\".\n\nChanges from the Incoming Branch: The branch you are trying to merge into your current branch (during a merge) or the branch you are attempting to apply on top of another branch (during a rebase). This is \"what you merge\" or \"the source of the merge\".\n\n\nNow, in the context of the conflict resolution options in VSCode:\n\nAccept Incoming changes: That will discard the conflicting changes from your current branch (\"what you have\") and keep the changes from the incoming branch (\"what you merge\").\n\nAccept current changes: That will keep the conflicting changes from your current branch (\"what you have\") and discard the changes from the incoming branch (\"what you merge\").\n\n\nIt is important to understand that during a rebase, the roles of \"current branch\" and \"incoming branch\" are essentially reversed. In a rebase, your current branch is being applied on top of the incoming branch. So, when faced with conflicts:\n\n\"Current changes\" during a rebase will refer to the branch onto which you are rebasing (usually the base branch).\n\"Incoming changes\" during a rebase will refer to the branch that you are trying to rebase (the changes you are attempting to apply on top of another branch)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge remote changes at GitHub?\n\nI'm getting following error, whn trying first Github push:\n[rejected] master -> master (non-fast forward)\nerror: failed to push some refs to '[email\u00a0protected]:me/me.git'\nTo prevent you from losing history, non-fast-forward updates were rejected\nMerge the remote changes before pushing again.  See the 'non-fast forward'\nsection of 'git push --help' for details.\n\nhow can I fix this and merge remote changes?"}, {"role": "assistant", "content": "See the 'non-fast forward' section of 'git push --help' for details.\n\nYou can perform \"git pull\", resolve potential conflicts, and \"git push\" the result. A \"git pull\" will create a merge commit C between commits A and B.\nAlternatively, you can rebase your change between X and B on top of A, with \"git pull --rebase\", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I search github labels with logical operator OR?\n\nI'm trying to filter all my issues on github like this:\nlabel:bug OR label:enhancement\n\nBut obviously that does not work. I found this page\nhttps://help.github.com/articles/searching-issues/\nand i thought it must be written there, but I cannot figure out how to do it. \nCould it really be that one cannot filter issues of two labels? I mean that would be such a basic task, wouldn't it?\nWell if anyone could give me a hint upon that matter I'd be glad to hear it."}, {"role": "assistant", "content": "Since Aug. 2021, yes.\nHowever, it has not yet been propagated to GitHub Enterprise (Oct. 2021)\nIt is also in GHE .3.3 (Dec 2021)\nSee:\n\nSearch issues by label using logical OR \nYou can now search issues by label using logical OR.\nSimply use a comma to separate the labels.\nFor example:\nlabel:\"good first issue\",bug \n\nwill list all issues with a label good first issue or bug."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: Adding commits to existing pull request\n\nI opened a pull request to rails repo on github by using Fork & Edit this file file button.\nNow, \nAfter getting feedback on my PR, I wanted to add some more commits. so here is what I ended by doing\n$ git clone [email\u00a0protected]:gaurish/rails.git #my forked repo\n$ git rebase -i 785a2e5 #commit hash of my commit using which PR was opened\n$ git checkout patch-3 #branch name I had to send my commits under to be shown in that PR\n$ git commit -am \"Changes done as per feedback\"\n$ git push origin patch-3\n\nThis worked fine but seems quite a complex workflow. Maybe I am wrong something wrong here? \nmy question is:\nAm I doing this the correct way? if not, then what is the proper way to do this?"}, {"role": "assistant", "content": "Since you're using GitHub's tools and just changing one file, you could also browse to the file on GitHub, select the proper branch from the upper left corner under the \"tree:\" dropdown (patch-3 in your case), and now choose \"Edit this file\".  Now your changes will be committed to this branch and will show up in your pull request"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply one github branch rule to multiple branches?\n\nI mean I want to create one rule and specify multiple branches like dev|master. But after seeing the doc, I think it is impossible?? Do I have to create two rules just in order to use the same rule to protect two branches?"}, {"role": "assistant", "content": "I found a rather ugly way to do this that at least gets in the ballpark (although it would be a lot better if @GitHub would give us something better than fnmatch with all options off...).\nYou can use character sets to specify the beginning characters in the repo name, like this:\n(Using \"main\" branch): [dm][ea][vi]*\n(Using \"master\" branch): [dm][ea][vs]*\n\nIt will match dev and main/master which is what you want, but the second one will also match \"mastodon-rules\" and \"devo-is-my-favorite-band\" due to the wildcard. I don't think fnmatch give you a \"zero-or-one\" quantifier like the regex ? so it's pretty restrictive.\nGithub fnmatch does allow the negation of a character set, so if a rule is catching branches you don't want to include, you might be able to get around that:\n(using \"main\" branch): [dm][ea][vi][!o]*\n(using \"master\" branch): [dm][ea][vs][!o]*\n\nThis will miss the dev branch (it will catch develop and main/master though...), but it excludes \"devo\" so at least 'whip it' won't start playing during your next all-night thrash session with your metalhead buddies.\nAdmittedly, this is not a very satisfying solution. But with fnmatch this might be the best option available.\n\nWhat You Should Not Do\nThere are multiple other answers claiming that this pattern (or a similar variant) will work just fine:\n[main,qa,stage,master]*\n\nDO NOT BE LURED BY THIS SIRENS SONG\nThe engine treats characters enclosed in square [] brackets as just that: individual characters. Adding commas (or semicolons, or any other \"separator\") does not change that behavior.\nSquare Brackets: \"match any one of the enclosed characters\"\nStar: \"match any string of any length\"\nSo, while this pattern will certainly match the words in the brackets, it will also match any string of any length that starts with one of the characters in the brackets: [aegimnqrst,]."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub OAuth2 Token: How to restrict access to read a single private repo\n\nUse-case:\n\nCommand-line application (which is deployed to a 3rd party machine) needs to be able to download a tarball copy of a private repo that belongs to an organization via the GitHub API (v3)\nApplication should only be able to access this one private repo and no other repos with read-only permission.\n\nI have been able to accomplish (1) by creating an authorization for the application after registering a client_id/secret on my github account. However, it does not seem that the tokens returned by the authorization allow read-only access to the repo nor are they restricted to one repo (e.g. one could potentially use the token to modify this repo along with others belonging to the organization).\nIs it possible to restrict access via the proper scope? I don't see anything relevant in the API docs (https://developer.github.com/v3/oauth/#scopes)."}, {"role": "assistant", "content": "I don't believe you can restrict github OAuth tokens in that way.  The github docs for OAuth say that\n\nWhile Git over HTTP with OAuth reduces friction for some types of applications, keep in mind that unlike deploy keys, OAuth tokens work for any repository for which the user has access.\n\nSo while you can limit the scope of the token in terms of the types of activities, you can't limit it to a subset of repos.\nDeploy keys can be restricted to a single repo, but allow write access.\nThe obvious tactic (as mentioned by Thomas) is to create a dummy account that represents the application.  Given the goals of OAuth, this might be a better workflow in any case -- it'll let you easily change the permissions the app has as if it were in fact a user.\nGithub even mentions/endorses this strategy explicitly, calling them machine users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git returns http error 407 from proxy after CONNECT\n\nI have a problem while connecting to github from my PC, using git. System Win 7.\nI have connection through proxy, so i specified it in git config files (both in general git folder, and in git repo folder). To do this i entered next line to my git bush:\n$ git config --global http.proxy http://<username>:<userpsw>@<proxy>:<port>\n\nThe way it works on other programms (ex: maven) it looks like that:\n<username> - my login to our corp system\n<userpsw> -my password to corporat system\n<proxy> - 10.65.64.77\n<port> - 3128\n\nBut when i try to push or to clone my repo, i receive\nfatal: unable to access '<repo githup link>' Received HTTP code 407 from proxy after CONNECT\n\nI try already to enter not just my username but domain\\username, changed my password in case there are problems with code language tables. And i even entered wrong password. Error stayed the same.\nWhen i entered in  '10.65.64.177.com' and tried to push repo, i received:\nfatal: unable to access '<repo github link>': Failed connect to github.com:3128; No error\n\nJust don't know what to try."}, {"role": "assistant", "content": "What worked for me is something similar to what rohitmohta is proposing ; in regular DOS command prompt (not on git bash) :\nfirst\ngit config --global http.proxy http://username:password@proxiURL:proxiPort\n\nand in some cases also\ngit config --global https.proxy http://username:password@proxiURL:proxiPort\n\nthen\ngit config --global http.sslVerify false\n\n(I confirm it's necessary : if set to true getting \"SSL certificate problem: unable to get local issuer certificate\" error)\nin my case, no need of defining all_proxy variable\nand finally \ngit clone https://github.com/someUser/someRepo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: could not create work tree dir 'kivy'\n\nI'm trying to clone my fork of the kivy git, but it's not working. I've made the fork correctly, I believe, but when I type this into my Mac terminal:\n\ngit clone https://github.com/mygitusername/kivy.git\n\nI get this error:\n\nfatal: could not create work tree dir 'kivy.: Permission denied\n\nAnyone see what I am doing wrong? Thanks!"}, {"role": "assistant", "content": "You should do the command in a directory where you have write permission. So:\ncd ~/\nmkdir code\ncd code\ngit clone https://github.com/kivy/kivy\n\nFor example."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins - how to build a specific branch\n\nThis isn't as simple as just doing a parametrized build. I've already got a specific build process that will build and deploy whenever any of these branches are pushed to GitHub:\n\nSo if I've just pushed develop and it built successfully, how do I trigger a manual build and have it pull feature/my-new-feature (without doing a git push)? I tried enabling parametrized build, adding a new string called branch, and then adding a new branch specifier, */$branch. I then ran a build and set branch to feature/my-new-feature and it still pulled from develop."}, {"role": "assistant", "content": "Best solution can be:\nAdd a string parameter in the existing job \nThen in the Source Code Management section update Branches to build to use the string parameter you defined: \nIf you see a checkbox labeled Lightweight checkout, make sure it is unchecked.\nThe configuration indicated in the images will tell the jenkins job to use master as the default branch, and for manual builds it will ask you to enter branch details (FYI: by default it's set to master)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does \"git push main\" work on GitHub when \"git push master\" does not? Also what is difference between \"Main branch\" and \"Master branch\"?\n\nI tried git push on my master branch, but it just shows that I have a new pull request. When I click on the new pull request, it takes me to the comparing changes view, but doesn't show any option to add those changes into repository. It only shows the changes I made:\n\n\nWhen I entered the command\ngit push origin main\n\nall files where added to my repository.\nbut when I do\ngit push origin master\n\nit doesn't work.\nWhy is that? I heard they are replacing master with main. So in the future are they going to remove master?"}, {"role": "assistant", "content": "From the ZDNet article, GitHub to replace \"master\" with alternative term to avoid slavery references:\n\nGitHub is working on replacing the term \"master\" on its service with a neutral term like \"main\" to avoid any unnecessary references to slavery,\n\nAbout renaming your branch from master to main, there are a lot of guidelines. For example:\ngit branch -m master main \\\ngit push -u origin main \\\ngit remote set-head origin main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to correctly require a specific commit in Composer so that it would be available for dependent packages?\n\nI have a library foo/foo-lib which requires a specific commit from GitHub:\n{\n    \"name\": \"foo/foo-lib\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/KnpLabs/Gaufrette.git\"\n        }\n    ],\n    \"require\": {\n        \"knplabs/gaufrette\": \"dev-master#2633721877cae79ad461f3ca06f3f77fb4fce02e\"\n    }\n}\n\nand it works fine:\n$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)                                 \n  - Updating knplabs/gaufrette dev-master (2633721 => 2633721)\n    Checking out 2633721877cae79ad461f3ca06f3f77fb4fce02e\n\nGenerating autoload files\n\nbut when I require that library in other project:\n{\n    \"name\": \"bar/bar-app\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"ssh://git.example.com/foo-lib\"\n        }\n    ],\n    \"require-dev\": {\n        \"foo/foo-lib\": \"dev-master\"\n    }\n}\n\nit yields dependency error:\nYour requirements could not be resolved to an installable set of packages.\n\n  Problem 1\n    - Installation request for foo/foo-lib dev-master -> satisfiable by foo/foo-lib[dev-master].\n    - foo/foo-lib dev-master requires knplabs/gaufrette dev-master#2633721877cae79ad461f3ca06f3f77fb4fce02e -> no matching package found.\n\nSo my question is: how to correctly require the specific commit from GitHub in my library, so that it would be available in dependent packages?"}, {"role": "assistant", "content": "You'll have to explicitly require the Gaufrette library at that hash, with a dev flag, in both your library and your application. Something like this should work in the application composer.json:\n{\n    \"name\": \"bar/bar-app\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"ssh://git.example.com/foo-lib\"\n        }\n    ],\n    \"require-dev\": {\n        \"foo/foo-lib\": \"dev-master\",\n        \"knplabs/gaufrette\": \"dev-master#2633721877cae79ad461f3ca06f3f77fb4fce02e\"\n    }\n}\n\nFrom the documentation:\n\nIf one of your dependencies has a dependency on an unstable package\n  you need to explicitly require it as well, along with its sufficient\n  stability flag.\n\nThe documentation also suggests that you'll need to include the repository for Gaufrette in your bar/bar-app Composer file, though it sounds like this wasn't necessary in this case. I'm not sure why."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git commit -m vs. git commit -am\n\nSeems easy but I just don't get it. I am in the root of my application.\nHere is my workflow.\ngit add .\ngit commit -m \"added a new feature some files changed\"\ngit push heroku master\n\nThis usually works. All my changes are pushed.\nBut sometimes I have a file that I change but when I push to Heroku the changes are not there for THAT ONE FILE... but for most of the files the changes are there... \nBut if I do\ngit add .\ngit commit -am \"added a new feature some files changed\"\ngit push heroku master\n\nEverything (all changes) are pushed to Heroku"}, {"role": "assistant", "content": "From the docs:\n\ngit commit -a automatically stage all tracked, modified files before the commit If you think the git add stage of the workflow is\n  too cumbersome, Git allows you to skip that part with the -a option.\n  This basically tells Git to run git add on any file that is \"tracked\"\n  - that is, any file that was in your last commit and has been modified. This allows you to do a more Subversion style workflow if\n  you want, simply editing files and then running git commit -a when you\n  want to snapshot everything that has been changed. You still need to\n  run git add to start tracking new files, though, just like Subversion.\n\nUsing the option -am allows you to add and create a message for the commit in one command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I download a single raw file from a private github repo using the command line?\n\nOn the CI server, I want to fetch a config file that we maintain on Github so it can be shared between many jobs. I'm trying to get this file via curl, but these approaches both fail (I get a 404):\n# As advised by the oAuth docs\ncurl -H 'Authorization: token the_token' -L -o setup.sh https://raw.github.com/org/repo/file\n\n# The url of the raw file after clicking to view it\ncurl -L https://raw.github.com/org/repo/file?login=username&token=the_token"}, {"role": "assistant", "content": "The previous answers don't work (or don't work anymore).\nYou can use the V3 API to get a raw file like this (you'll need an OAuth token):\ncurl -H 'Authorization: token INSERTACCESSTOKENHERE' \\\n  -H 'Accept: application/vnd.github.v3.raw' \\\n  -O \\\n  -L https://api.github.com/repos/owner/repo/contents/path\n\nAll of this has to go on one line. The -O option saves the file in the current directory. You can use -o filename to specify a different filename.\nTo get the OAuth token follow the instructions here:\n\nhttps://help.github.com/articles/creating-an-access-token-for-command-line-use\n\nI've written this up as a gist as well:\n\nhttps://gist.github.com/madrobby/9476733\n\nEDIT: API references for the solution are as follows:\n\nhttps://developer.github.com/v3/#authentication\nhttps://developer.github.com/v3/media/#request-specific-version\nhttps://developer.github.com/v3/repos/contents/#get-contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I find all public comments for a Github user?\n\nUntil recently I was able to find all my public comments using a link on my profile page. I was using this functionality to keep track of all issues where I have commented, but not contributed anything. It was under a section called \"Public Activity\".\nThis function seems to have been removed. I can not find anything about it on the help page about profiles.\nDoes anybody have any information on when and why this was removed?"}, {"role": "assistant", "content": "You can do this with an advanced search query. In the top nav search field, enter is:issue commenter:username. This will return a list of all issues and pull requests where the user has commented. You can then click on each issue or pull request to view the individual comments.\nTo search within a specific repository: repo-name commenter:username.\nTo view your own latest comments across GitHub, use:\nis:issue commenter:@me"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Recover deleted (remote) branch\n\nI need to recover two Git branches that I somehow deleted during a push.\nThese two branches were created on a different system and then pushed to my \"shared\" (github) repository.\nOn my system, I (apparently) retrieved the branches during a fetch:\n~/myfolder> git fetch\nremote: Counting objects: 105, done.\nremote: Compressing objects: 100% (58/58), done.\nremote: Total 62 (delta 29), reused 0 (delta 0)\nUnpacking objects: 100% (62/62), done.\nFrom github.com:mygiturl\n * [new branch]      contact_page -> origin/contact_page\n   731d1bb..e8b68cc  homepage   -> origin/homepage\n * [new branch]      new_pictures -> origin/new_pictures\n\nRight after that I did a push to send my local changes up to the central repo. For some reason, these branches were deleted from both my local system and the central repo:\n~/myfolder> git push\nCounting objects: 71, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (43/43), done.\nWriting objects: 100% (49/49), 4.99 KiB, done.\nTotal 49 (delta 33), reused 0 (delta 0)\nTo [email\u00a0protected]:mygiturl.git\n - [deleted]         contact_page\n + e8b68cc...731d1bb homepage -> homepage (forced update)\n   bb7e9f2..e0d061c  master -> master\n - [deleted]         new_pictures\n   e38ac2e..bb7e9f2  origin/HEAD -> origin/HEAD\n   731d1bb..e8b68cc  origin/homepage -> origin/homepage\n   e38ac2e..bb7e9f2  origin/master -> origin/master\n * [new branch]      origin/contact_page -> origin/contact_page\n * [new branch]      origin/new_pictures -> origin/new_pictures\n\nIt's not terribly easy to get the branches off of their birthplace machine, so I'd like to try and recover them from my local if possible.\nAll of the git \"undo\" information I've googled has to with recovering lost commits. I don't think that applies here, since I don't have commit UIDs for these branches.\nI'd like to know how I can get these back. I'd also like to know how they were deleted in the first place and how I can avoid this in the future.\nEDIT: by request, here's my repo configuration\nuser.name=Craig Walker\n[email\u00a0protected]\nalias.unadd=reset HEAD\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.ignorecase=true\nremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n[email\u00a0protected]:MyGitURL.git\nremote.origin.mirror=true\nbranch.master.remote=origin\nbranch.master.merge=refs/heads/master\nalias.undo=reset --hard\nalias.test=push -f ci HEAD:master\nalias.st=status\nalias.ci=commit\nalias.br=branch\nalias.co=checkout\nalias.ch=checkout\nalias.df=diff\nalias.lg=log -p\nalias.who=shortlog -s --\nremote.ci.url=ContinuousIntegrationGitURL\nremote.ci.fetch=+refs/heads/*:refs/remotes/ci/*\nbranch.photo.remote=origin\nbranch.photo.merge=refs/heads/photos\nremote.foo.url=FooGitURL\nremote.foo.fetch=+refs/heads/*:refs/remotes/cynthia/*\nbranch.homepage.remote=origin\nbranch.homepage.merge=refs/heads/homepage"}, {"role": "assistant", "content": "I'm not an expert. But you can try\ngit fsck --full --no-reflogs | grep commit\n\nto find the HEAD commit of deleted branch and get them back."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I have Github on my own server? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 9 months ago.\n\n\nThe community reviewed whether to reopen this question 9 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIs there anything out there like Github that is for your own local server?  I am curious if there is like a PHP script or even a desktop client that mimics Github's functionality, I love Github but it would be nice to host on my own server.\nApologies if this isn't considered \"programming\" enough but generally only programmers use GIT and Github\n\nUpdate\nFirst of all thanks for all the great suggestions, it is great to see there are options out there.  From what is posted here and from my googling I can say it looks like the best looking/most alike to Github solutions are coded in Ruby, which is great for some but I am a PHP kind of guy (for now).\nMost of the PHP GIT viewers either are  outdated and abandoned projects or they just look like crap ( I realize I could fix them up to be more like Github) but I ran across something in PHP that looks promising so far.  It is called Glip it is on Github here https://github.com/patrikf/glip and to me it is the most attractive and easy to use solution I have found for PHP so far.  For the advanced Git user, it may not be enough but for me, I just wanted to be able to view a git repo and that provides that functionality.\nNow my search still continues for the perfect solution, will I ever find it?  I hope so but, for now, this is we got.  I am considering writing my own, one that is attractive like Github and has other features like an Issue tracker for bug and feature requests.  All the ones I have seen so far are not so good"}, {"role": "assistant", "content": "There is GitHub Enterprise (administration documentation) to satisfy your needs. And there is an open source \"clone\" of Github Enterprise.\nPS: Now Github provides unlimited private repositories, bitbucket does the same. you can give a try to both. There are several other solutions as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make \"spoiler\" text in github wiki pages?\n\nI'm trying to make text which is either invisible until moused over, or, has a \"show\" / \"hide\" button, or some other thing, so that it is not visible until the user interacts with it in some way.\nI'm trying to do this on a github wiki page. (Specifically it's for a short self-quiz.)\nBasically I want to get a similar effect to what SO achieves with the >! markup:\n\n Hoho! Spoiler text!\n\nas described in these meta posts.\nThe same markup doesn't work in github, I guess that it's an SO extension?\nI saw this issue about using spoiler text in comments on github, which was closed, but I thought there might be a different answer for the wiki pages, or a different solution based on HTML or something?\nDoes anyone know if there's a way to do this, or if it is definitely unfortunately impossible?"}, {"role": "assistant", "content": "GFM supports a subset of HTML. For now, you can wrap your question in a <summary> and your answer in any standard HTML tag like <p> and wrap the whole thing in the <details> tag.\nSo if you do this\n<details> \n  <summary>Q1: What is the best Language in the World? </summary>\n   A1: JavaScript \n</details>\n\nYou get this -> https://github.com/gaurav21r/Spoon-Knife/wiki/Read-More-Test\nBrowser support is an Issue.\nThe thing with GitHUB wiki is that it allows you write text in other formats like AsciiDoc, RST etc. Probabaly there's solution in those too. These are 2 formats that are far more feature rich than Markdown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pulling a branch from another repository?\n\nI have a local git repository which is a clone of a repository on github. Someone has forked the repository and made changes in a new branch on a new repository. I want to move this new branch into my repository (locally to work on it first before merging with the master).\nI tried creating a new branch and then pulling from the forked repository but it complains because the new branch is a copy of the master branch as well as the local file changes, so it says \nerror: Your local changes to the following files would be overwritten by merge.\nSo how can I pull the branch in the other repository into a new branch on my local repository?\nI hope that makes sense. If not, this is my repository: https://github.com/MatthewLM/cbitcoin\nAs you can see, someone has created a new repository with the branch \"linuxBuild\": https://github.com/austonst/cbitcoin/tree/linuxBuild\nI want that branch on my local repository for MatthewLM/cbitcoin.\nHow can I do this?"}, {"role": "assistant", "content": "You need to make sure that git status shows that no unstaged changes exist in your local repository.\nYou can do this by first stashing your local changes and than pulling that branch. Afterward you can apply your stash.\n\nIf you want to re-create the branch structure of the fork in your local repository, you can do the following:\ngit remote add fork <url of fork>\ngit fetch fork <branch>\ngit checkout -b fork_branch fork/<branch>\n\nThis will create the local branch fork_branch with the same history like <branch> in the fork, i.e. fork_branch will branch off of your master where <branch> does in the fork.\nAdditionally, your local branch will now track that branch in the fork, so you can easily pull in new changes committed in the fork.\nI think you still need to make sure beforehand that your working copy doesn't contain any changes.\nIf you do not need to track the fork:\ngit remote remove fork"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I revert commits directly on GitHub?\n\nIt seems like you can do just about everything else directly on GitHub using the web interface, like edit and create and delete files, but I am unable to find a way to revert a commit, like you can in the GitHub local apps (Windows, and Mac) and like you can do on the git command line.\nI'm just wondering am I just missing something. Is the revert button hidden?\nI tried searching online and came across something that seemed to suggest that this was to prevent synchronization errors when working with lots of people. Is this correct?"}, {"role": "assistant", "content": "No, that feature isn't directly available on the GitHub web interface (as opposed to the \"Revert\" button recently added for GitHub for Mac/Windows)\nActually, it is for pull requests only, since June 24th, 2014:\nIntroducing the Revert Button\n\nyou can easily revert a pull request on GitHub by clicking Revert:\n\n\n\nYou'll be prompted to create a new pull request with the reverted changes:\n\n\n\ngit revert is a bit more complex to manage through the web as it can accept a range of commits.\nIt shouldn't be an issue in terms of collaboration though: a revert adds a new commit, it doesn't change the history of existing commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "With GitHub how do I push all branches when adding an existing repo?\n\nI created a new GitHub repo - I want to put my existing repo there.\nI followed the instructions:\ncd existing_git_repo\ngit remote add origin [email\u00a0protected]:acme-org/myprj.git\ngit push origin master\n\nThis only pushes the master branch to GitHub.\nHow do I push everything (including all branches) in my existing repo to my new GitHub repo?"}, {"role": "assistant", "content": "Note: git push --all won't push your tags, only your branches.\ngit push --all\ngit push --tags\n\nwould really push everything. See also \"Set up git to pull and push all branches\".\nDon't forget the --dry-run option to make some test before actually pushing everything.\nSee also GitHub help \"Working with remotes\" to set your origin to your GitHub remote repo.\n\nAs mentioned in \"How to make \u201cgit push\u201d include tags within a branch?\", git 1.8.3+ (May 2013) introduced:\ngit push --follow-tags\n\n\nThis won't push all the tags, but only the ones accessible from the branch(es) HEAD(s) you are pushing.\n\nThat can help keeping that operation (pushing commits and tags) done with one command instead of two.\nGit 2.4.1+ (Q2 2015) will introduce the option push.followTags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "remote: Write access to repository not granted. fatal: unable to access\n\nI have the error message:\nremote: Write access to repository not granted.\nfatal: unable to access 'https://github.com/...../...../': \nThe requested URL returned error: 403\n\nMy friend invited me to his repository, and I used his personal token while cloning it.\nBut it says the above error.\nI also tried with my own token but it says the same.\nI also faced this when I created my own repository and was making initial commit and push.\nThis issue has grown ever since Git*Hub has brought token authentication into account.\nHow can I get past this?"}, {"role": "assistant", "content": "In your Github project, go to Settings > Actions > General.\nScroll down to Workflow permissions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Confusing error message from git\n\nI got this message from Git:\n\nYou asked to pull from the remote 'origin', but did not specify\n  a branch. Because this is not the default configured remote\n  for your current branch, you must specify a branch on the command line.\n\nCan anyone explain it? and more important how to fix it?"}, {"role": "assistant", "content": "You have to tell git which branch you want to pull from the \"origin\" remote repos.\nI guess you want the default branch (master) so git pull origin master should fix your problem.\nSee git help branch, git help pull and git help fetch  for more informations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fork and synchronize Google Code Subversion repository into GitHub\n\nHow can I fork and keep in sync with an Google Code Subversion repository that I don't have write access to, into a GitHub repository?\nI want to be able to develop my own features in my Git repository, but I also want to synchronise against the Google Code Subversion repository. To fetch fixes from Google Code project side.\nI know about git-svn and used it before to up- and downstream to an Subversion repository I had full control over. But I don't know how keep in sync with a Google Code Subversion repository."}, {"role": "assistant", "content": "The remote branch from git-svn is pretty much the same as a regular Git remote. So in your local repository you can have your git-svn clone and push changes out to GitHub. Git doesn't care. If you create your git-svn clone and push the exact same changes out to GitHub, you'll have an unofficial mirror of the Google Code repository. The rest is vanilla Git.\ngit svn clone http://example.googlecode.com/svn -s\ngit remote add origin [email\u00a0protected]:example/example.git\ngit push origin master\n\nNow that you have this, occasionally you will have to synchronise the Subversion repository with Git. It'll look something like:\ngit svn rebase\ngit push\n\nIn gitk or whatever, this would look something like this:\no [master][remotes/trunk][remotes/origin/master]\n|\no\n|\no\n\nAnd when you run git svn rebase, you would have this:\no [master][remotes/trunk]\n|\no\n|\no [remotes/origin/master]\n|\no\n|\no\n\nSo now running git push would push those commits out to GitHub, the [remotes/origin/master] branch there. And you'd be back to the scenario in the first ASCII art diagram.\nThe problem now is, how do you work your changes into the mix? The idea is, you don't ever commit onto the same branch that you are git-svn-rebase-ing and git-pushing. You need a separate branch for your changes. Otherwise, you would end up rebasing your changes on top of the Subversion ones, which could upset anyone who clones your Git repository. Follow me? OK, so you create a branch, let's call it \"features\". And you make a commit and push it out to GitHub to the features branch. Your gitk would look something like this:\no [features][remotes/origin/features]\n|\no\n|\no [master][remotes/trunk][remotes/origin/master]\n|\no\n\nHere you've got your features branch a couple of commits ahead of the Google Code branch, right? So what happens when you want to incorporate new stuff from Google Code? You'd run git svn rebase first and get this:\n                           o [features][remotes/origin/features]\n[master][remotes/trunk] o  |\n                        |  o\n                        o /\n                        |/\n                        o[remotes/origin/master]\n                        |\n                        o\n\nIf you git push master out, you can imagine the [remotes/origin/master] being at the same point as master. But your feature branch doesn't have the changes. Your choices now are to merge master into features, or rebase features. A merge would look like this\ngit checkout features\ngit merge master \n\n            o [features]\n           /|\n          / o [remotes/origin/features]\n[master] o  |\n         |  o\n         o /\n         |/\n         o\n         |\n         o\n\nThen you push features out to GitHub. I've left off the remotes for master to save space, they'd be at the same point as [master].\nThe rebase approach is slightly more evil - you'd have to push with --force as your push would not be a fast-forward merge (you'd pull the features branch from under someone who had cloned it). It's not really considered OK to do this, but nobody can stop you if you are determined. It does make some things easier too, such as when patches get accepted upstream in slightly reworked form. It'd save having to mess about with conflicts, you can just rebase --skip the upstreamed patches. Anyway, a rebase would be like this:\ngit rebase master features\n\n         o [features]\n         |\n         o\n         |  o [remotes/origin/features]\n[master] o  |\n         |  o\n         o /\n         |/\n         o\n         |\n         o\n\nAnd then you would have to git push --force that. You can see why you need to force it, the history has a big old schism from the [remotes/origin/features] to the new current post-rebase [features].\nThis all works, but it is a lot of effort. If you are going to be a regular contributor, the best bet would be to work like this for a while, send some patches upstream and see if you can get commit access to Subversion. Failing that, perhaps don't push your changes out to GitHub. Keep them local and try and get them accepted upstream anyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Have the same README both in Markdown and reStructuredText\n\nI have a project hosted on GitHub. For this I have written my README using the Markdown syntax in order to have it nicely formatted on GitHub.\nAs my project is in Python I also plan to upload it to PyPi. The syntax used for READMEs on PyPi is reStructuredText. \nI would like to avoid having to handle two READMEs containing roughly the same content; so I searched for a markdown to RST (or the other way around) translator, but couldn't find any. \nThe other solution I see is to perform a markdown/HTML and then a HTML/RST translation. I found some ressources for this here and here so I guess it should be possible.\nWould you have any idea that could fit better with what I want to do?"}, {"role": "assistant", "content": "I would recommend Pandoc, the \"swiss-army knife for converting files from one markup format into another\" (check out the diagram of supported conversions at the bottom of the page, it is quite impressive). Pandoc allows markdown to reStructuredText translation directly. There is also an online editor here which lets you try it out, so you could simply use the online editor to convert your README files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error pushing to GitHub - insufficient permission for adding an object to repository database\n\nI'm getting back an unusual error while trying to do a \"git push\" to my GitHub repository:\n\nCounting objects: 8, done.\nDelta compression using 2 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (5/5), 1.37 KiB, done.\nTotal 5 (delta 2), reused 0 (delta 0)\nerror: insufficient permission for adding an object to repository database ./objects\n\nfatal: failed to write object\nerror: unpack-objects exited with error code 128\nerror: unpack failed: unpack-objects abnormal exit\nTo [email\u00a0protected]:bixo/bixo.git\n ! [remote rejected] master -> master (n/a (unpacker error))\nerror: failed to push some refs to '[email\u00a0protected]:bixo/bixo.git'\n\n\nAfter a clean clone from GitHub, I can edit/add/commit/push a modified file.\nIf I then repeat this a second time I get the above error.\nI can push to other GitHub repositories just fine.\nI've checked file/directory permissions on my side, and they seem OK.\nI'm running git 1.6.2.3 on Mac OS X 10.5.8\n\nThe above repository was the source of my fun for a previous Stack Overflow question (SO 1904860), so maybe the GitHub repo got corrupted. The only similar issue I've found via searching was an unpack failed problem reported on github. Has anybody else run into this issue before, especially when not using GitHub?"}, {"role": "assistant", "content": "When you see this error outside of github, here's a remedy.\nGot this from:\nhttp://mapopa.blogspot.com/2009/10/git-insufficient-permission-for-adding.html\nssh me@myserver\ncd repository/.git\n\nsudo chmod -R g+ws *\nsudo chgrp -R mygroup *\n\ngit config core.sharedRepository true\n\nAfter this the git daemon should use the group file permissions when writing to .git/objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to check the differences between a local and GitHub repository before the pull [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\ngit diff between cloned and original remote repository\n\n                                (3 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nBefore using pull, I want to check if there are any differences between my local and GitHub master.\nHow can I do it?"}, {"role": "assistant", "content": "git pull is really equivalent to running git fetch and then git merge.  The git fetch updates your so-called \"remote-tracking branches\" - typically these are ones that look like origin/master, github/experiment, etc. that you see with git branch -r.  These are like a cache of the state of branches in the remote repository that are updated when you do git fetch (or a successful git push).\nSo, suppose you've got a remote called origin that refers to your GitHub repository, you would do:\ngit fetch origin\n\n... and then do:\ngit diff master origin/master\n\n... in order to see the difference between your master, and the one on GitHub.  If you're happy with those differences, you can merge them in with git merge origin/master, assuming master is your current branch.\nPersonally, I think that doing git fetch and git merge separately is generally a good idea."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Command to get latest Git commit hash from a branch\n\nHow can I check with the command line the latest commit hash of a particular Git branch?"}, {"role": "assistant", "content": "git log -n 1 [branch_name]\n\nbranch_name (may be remote or local branch) is optional. Without branch_name, it will show the latest commit on the current branch.\nFor example:\ngit log -n 1\ngit log -n 1 origin/master\ngit log -n 1 some_local_branch\n\ngit log -n 1 --pretty=format:\"%H\"  #To get only hash value of commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: What is a \"wip\" branch?\n\nWhen I was browsing GitHub repositories I quite often saw \"wip\" branches (e.g. 3.1.0-wip). What does \"wip\" mean?\nI couldn't find the answer anywhere - neither on Google nor on GitHub:help."}, {"role": "assistant", "content": "Conventionally, \"wip\" stands for \"work in progress\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git : fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists\n\nI am getting this error - \nD:\\Projects\\wamp\\www\\REPO [master]> git pull origin master\nWarning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.\nERROR: Repository not found.\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nThe output of git remote -v\nD:\\Projects\\wamp\\www\\REPO [master]> git remote -v\norigin  [email\u00a0protected]:username/repo.git (fetch)\norigin  [email\u00a0protected]:username/repo.git (push)\n\nFinal message of ssh -Tv [email\u00a0protected] command - \nHi [My Username]! You've successfully authenticated, but GitHub does not provide shell access.\n\nHow can I solve it?"}, {"role": "assistant", "content": "change your ssh url by an http url for your remote 'origin', use:\n> git remote set-url origin https://github.com/<user_name>/<repo_name>.git\n\nIt will ask for your GitHub password on the git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"did you run git update-server-info\" error on a Github repository\n\nI'm using the github Gui from their website to manage my repos, and I'm getting the following error:\nfatal: https://github.com/TeaCodie/TeaCodie-Website.git/info/refs not found: \ndid you run git update-server-info on the server?\n\nHow can I fix this?"}, {"role": "assistant", "content": "You might have changed your repository name\nIn your local repository edit the file:\n.git/config\n\nThen check:\n[remote \"origin\"]\n   url = \n\nthat the URL matches your remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Actions: how to target all branches EXCEPT master?\n\nI want to be able to let an action run on any given branch except master.\nI am aware that there is a prebuilt filter action, but I want the exact opposite. \nMore like GitLab's except keyword. \nSince this is not inside the official docs, has anyone prepared a decent workaround?\nThank you very much."}, {"role": "assistant", "content": "Update:\nThere is a newer filter described in Samy's answer that provides a more succinct way of achieving this.\n\nThe documentation has been updated with more information now:\n\nWhen you specify a branches or tags filter, the workflow only runs if at least one pattern matches. Any changes to branches or tags that don't match a defined pattern will not trigger a workflow. The order that you define patterns matters:\n\n\nA matching negative pattern after a positive match will exclude the\nref again.\nA matching positive pattern after a negative match will\ninclude the ref again.\n\nSo in order to exclude master, you need to ensure that a pattern matching everything is included first:\non:\n  push:\n    branches:    \n      - '*'         # matches every branch that doesn't contain a '/'\n      - '*/*'       # matches every branch containing a single '/'\n      - '**'        # matches every branch\n      - '!master'   # excludes master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cloning a repo from someone else's Github and pushing it to a repo on my Github\n\nI cloned the repo at https://github.com/railstutorial/sample_app_rails_4 and made a lot of changes to it (I used it as a starting point for my own app), and now I would like to push the changed app to a repo on my own github account. \nHow can I change what github repo it is linked to?"}, {"role": "assistant", "content": "As Deefour says, your situation isn't much unlike the one in Change the URI (URL) for a remote Git repository. When you clone a repository, it is added as a remote of yours, under the name origin. What you need to do now (as you're not using the old source anymore) is change origin's URL:\n$ git remote set-url origin http://github.com/YOU/YOUR_REPO\n\nIf the original repository would update often and you want to get those updates from time to time, then instead of editing origin it would be best to add a new remote:\n$ git remote add personal http://github.com/YOU/YOUR_REPO\n\nOr maybe even call the old one upstream:\n$ git remote rename origin upstream\n$ git remote add origin http://github.com/YOU/YOUR_REPO\n\nThen, whenever you want to get changes from upstream, you can do:\n$ git fetch upstream\n\nAs this the source is a sample repository (seems to be kind of a template to start off), I don't think there's a need to keep it nor fork it at all - I'll go with the first alternative here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Rename file with Git\n\nI would like to rename file from README to README.md. What is the best practice to do that?\n\nI have only one repo called \"change-z-index\".\n\nI open and login like that:\nssh -T [email\u00a0protected]\n\n\n\nAnd I enter my passphrase.\n\nI try to rename the file like that:\ngit mv README README.md\ngit commit -m \"renamed\"\ngit push origin master\n\n\n\nIt gives me an error saying bad source.\nI think I need to select my repo first... its name is \"change-z-index\". I have read manual many times, but still can't understand how to do it."}, {"role": "assistant", "content": "As far as I can tell, GitHub does not provide shell access, so I'm curious about how you managed to log in in the first place.\n$ ssh -T [email\u00a0protected]\nHi username! You've successfully authenticated, but GitHub does not provide\nshell access.\n\nYou have to clone your repository locally, make the change there, and push the change to GitHub.\n$ git clone [email\u00a0protected]:username/reponame.git\n$ cd reponame\n$ git mv README README.md\n$ git commit -m \"renamed\"\n$ git push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What happens to a github student account's repositories at the end of 2 years?\n\nI just got upgraded to a free github micro plan using my university email address. I'm planning to use the private repositories for some class projects this semester, but I'm wondering what will happen to those repositories at the end of 2 years when my free student upgrade expires. I'm assuming it's the same thing that happens when you downgrade from a micro to a free account.\nWill my repositories disappear, become public, or just become read-only? I've searched around a bit and haven't been able to find an answer."}, {"role": "assistant", "content": "(Disclosure: I work at GitHub)\nSo long as you're still a student, you're eligible for the academic discount. Once your coupon expires, you can re-apply for the student discount.\nWhen you re-apply, be sure you've added your school-issued email address to your account, that will expedite the approval process.\nYou will receive a notification email before your discount expires. When the discount does expire, your account will be locked which means that you won't be able to access your private repositories. Your private repositories will not be deleted and they will not be made public.\nOf course, if you ever have any troubles, you can always email [email\u00a0protected]."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull results in extraneous \"Merge branch\" messages in commit log\n\nI'm working with another developer on a project, and we're using Github as our remote repo. I'm on a Mac using git 1.7.7.3, he's on Windows using git 1.7.6.\nThis is what's happening\n\nOne of us (let's call him developer A, but it doesn't matter which one) pushes a set of commits to GitHub.\nThe other (developer B) makes some local commits.\nB does a git pull.\nB does a git push.\nLooking at the commit history log, I see Merge branch 'master' of github.com:foo/bar\n\nThe commit log gets littered with \"Merge branch\" messages over time, and also shows developer B as committing changes that developer A made. The only way we've found to prevent this issue has been to do a git pull --rebase at step 3, but I don't know what side effects rebasing will introduce. This is my first time working on a multi-developer git repo, so is this just normal behavior? Any thoughts on how to solve this issue?"}, {"role": "assistant", "content": "The commit you are seeing is perfectly fine. A pull effectively runs git fetch and then git merge so a merge is usually happening when you run git pull.\nThe alternative to use rebasing instead of merging is possible, but usually you should avoid it. Rebasing allows you to keep a linear history, but also removes any information about the branching that originally happened. It will also cause the history of the current branch being rewritten, recreating all commits that are not contained in the target branch (in your case, the remote). As the recreated commits are different commits, this can cause a lot of confusion when developing together with others, especially when people already checked out parts of those commits before they get rewritten (for example with feature branches). So as a rule of thumb, you should never rewrite any commit that was already pushed.\nThe commits you see are there to combine two (or more) branches. It is perfectly fine to have a commit that does nothing else then merging multiple branches. In fact it makes it very clear when you have a merge commit that combines branches when looking at the history. In comparison to rebasing, merging also allows you to effectively see the original history as it was developed, including the actual branches that coexisted.\nSo, long story short: Yes, having merge commits is perfectly fine and you should not worry about them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Importing a GitHub project into Eclipse\n\nI've imported a GitHub project but how do I setup the project in my Eclipse project workspace?\nDo I need to set the GitHub working directory(c:\\users) to my Eclipse working directory(c:\\Projects) prior to checking out the project ?\n\nEdited : \nMy working directory is now c:\\users\\projectname\\.git\nSo then I try to import the project using the eclipse \"import\" option. When I try to import selecting the option \"Use the new projects wizard\" the source code is not imported, if I import selecting the option \"Import as general project\" the source code is imported but the created project created by Eclipse is not a java project. When selecting the option \"Use the new projects wizard\" and creating a new java project using the wizard should'nt the code be automatically imported ?"}, {"role": "assistant", "content": "As mentioned in Alain Beauvois's answer, and now (Q4 2013) better explained in \n\nEclipse for GitHub\nEGit 3.x manual (section \"Starting from existing Git Repositories\")\nEclipse with GitHub\nEGit tutorial\n\n\nCopy the URL from GitHub and select in Eclipse from the menu the \n\nFile \u2192 Import \u2192 Git \u2192 Projects from Git\n\n\n\nIf the Git repo isn't cloned yet:\nIn>  order to checkout a remote project, you will have to clone its repository first.\nOpen the Eclipse Import wizard (e.g. File => Import), select Git => Projects from Git and click Next.\nSelect \u201cURI\u201d and click Next.\nNow you will have to enter the repository\u2019s location and connection data. Entering the URI will automatically fill some fields. Complete any other required fields and hit Next. If you use GitHub, you can copy the URI from the web page.\n\nSelect all branches you wish to clone and hit Next again.\nHit the Clone\u2026 button to open another wizard for cloning Git repositories.\n\n\n\nOriginal answer (July 2011)\nFirst, if your \"Working Directory\" is C:\\Users, that is odd, since it would mean you have cloned the GitHub repo directly within C:\\Users (i.e. you have a .git directory in C:\\Users)\nUsually, you would clone a GitHub repo in \"any directory of your choice\\theGitHubRepoName\".\nAs described in the EGit user Manual page:\n\nIn any case (unless you create a \"bare\" Repository, but that's not discussed here), the new Repository is essentially a folder on the local hard disk which contains the \"working directory\" and the metadata folder.\n  The metadata folder is a dedicated child folder named \".git\" and often referred to as \".git-folder\". It contains the actual repository (i.e. the Commits, the References, the logs and such).\nThe metadata folder is totally transparent to the Git client, while the working directory is used to expose the currently checked out Repository content as files for tools and editors.\nTypically, if these files are to be used in Eclipse, they must be imported into the Eclipse workspace in one way or another. In order to do so, the easiest way would be to check in .project files from which the \"Import Existing Projects\" wizard can create the projects easily. Thus in most cases, the structure of a Repository containing Eclipse projects would look similar to something like this: \n\nSee also the Using EGit with Github section.\n\n\nMy working directory is now c:\\users\\projectname\\.git \n\nYou should have the content of that repo checked out in c:\\users\\projectname (in other words, you should have more than just the .git).\n\nSo then I try to import the project using the eclipse \"import\" option.\n  When I try to import selecting the option \"Use the new projects wizard\", the source code is not imported.\n\nThat is normal.\n\nIf I import selecting the option \"Import as general project\" the source code is imported but the created project created by Eclipse is not a java project. \n\nAgain normal.\n\nWhen selecting the option \"Use the new projects wizard\" and creating a new java project using the wizard should'nt the code be automatically imported ?\n\nNo, that would only create an empty project.\nIf that project is created in c:\\users\\projectname, you can then declare the eisting source directory in that project.\nSince it is defined in the same working directory than the Git repo, that project should then appear as \"versioned\".\nYou could also use the \"Import existing project\" option, if your GitHub repo had versioned the .project and .classpath file, but that may not be the case here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to overcome \"'aclocal-1.15' is missing on your system\" warning?\n\nIm trying to run a c++ program on github. (available at the following link https://github.com/mortehu/text-classifier)\nI have a mac, and am trying to run it in the terminal. I think I have downloaded autoconf and automake but am not sure. To run the program I am going to the correct folder in terminal then running\n./configure && make \n\nBut I get the error:\n\nWARNING: 'aclocal-1.15' is missing on your system.\n           You should only need it if you modified 'acinclude.m4' or\n           'configure.ac' or m4 files included by 'configure.ac'.\n           The 'aclocal' program is part of the GNU Automake package:\n           http://www.gnu.org/software/automake\n           It also requires GNU Autoconf, GNU m4 and Perl in order to run:\n           http://www.gnu.org/software/autoconf\nhttp://www.gnu.org/software/m4/\nhttp://www.perl.org/ make: *** [aclocal.m4] Error 127\n\nI have xcode and g++ and all the things required to run c programs, but as is probably obvious, I have no idea what Im doing.\nWhat is the easiest, simplest way to run the program in the above link? I realise it comes with a readme and example usage but I can not get that to work."}, {"role": "assistant", "content": "Before running ./configure try running autoreconf -f -i.  The autoreconf program automatically runs autoheader, aclocal, automake, autopoint and libtoolize as required.\nEdit to add: This is usually caused by checking out code from Git instead of extracting it from a .zip or .tar.gz archive.  In order to trigger rebuilds when files change, Git does not preserve files' timestamps, so the  configure script might appear to be out of date.  As others have mentioned, there are ways to get around this if you don't have a sufficiently recent version of autoreconf.\nAnother edit: This error can also be caused by copying the source folder extracted from an archive with scp to another machine. The timestamps can be updated, suggesting that a rebuild is necessary. To avoid this, copy the archive and extract it in place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I force user and password prompt when pushing to my git repository?\n\nI recently updated my local Git installation to 1.8.1 from 1.8.0.1.  \nI'm noticing that, when I work on GitHub, it doesn't prompt me for username and password on push anymore.  \nThis troubles me, as I see having to type user and password every time as a good security measure. (what if someone else uses my computer?)  \nI checked the following:  \n\n1.8.0.1 on another computer still asks for username and password.\nmy account on github still enforces private/security controls.\nI am using https remote references, rather than ssh.\nFor good measure, I checked in my ~/.ssh fonder. Nothing wrong there.\nI'm not storing the login details in ~/.gitconfig or individual <proj>/.git/config files.\nI'm also not storing anything github-related in ~/.netrc.\nI created a new dummy archive: still doesn't prompt me for login.\n\nI couldn't find anything in the git release notes archive.  \nDoes anyone know if this is a new git behaviour? How do I restore the prompt?"}, {"role": "assistant", "content": "Add a -v flag with your git command . e.g.\ngit pull -v\n\nv stands for verify ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I use an env file with GitHub Actions?\n\nI have multiple environments (dev, qa, prod) and I'm using .env files to store secrets etc... Now I'm switching to GitHub Actions, and I want to use my .env files and declare them into the env section of the github actions yml.\nBut from what I've seen so far, it seems that I can not set a file path and I have to manually re-declare all variables.\nHow should I proceed as best practice?"}, {"role": "assistant", "content": "A quick solution here could be having a step to manually create the .env file before you need it.\n      - name: 'Create env file'\n        run: |\n          touch .env\n          echo API_ENDPOINT=\"https://xxx.execute-api.us-west-2.amazonaws.com\" >> .env\n          echo API_KEY=${{ secrets.API_KEY }} >> .env\n          cat .env"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git gc --aggressive vs git repack\n\nI want to reduce the size of a Git repository. I have discovered:\n\ngit gc --aggressive. But some people discourage its use. Why? What's wrong with it?\n\ngit repack -a -d --depth=250 --window=250. Some say to use this instead. Why? How does this reduce the size of a repository? What are --depth and --window for?\n\n\nWhat should I choose: gc or repack?"}, {"role": "assistant", "content": "Nowadays there is no difference: git gc --aggressive operates according to the suggestion Linus made in 2007; see below. As of version 2.11 (Q4 2016), git defaults to a depth of 50. A window of size 250 is good because it scans a larger section of each object, but depth at 250 is bad because it makes every chain refer to very deep old objects, which slows down all future git operations for marginally lower disk usage.\n\nHistorical Background\nLinus suggested (see below for the full mailing list post) using git gc --aggressive only when you have, in his words, \u201ca really bad pack\u201d or \u201creally horribly bad deltas,\u201d however \u201calmost always, in other cases, it\u2019s actually a really bad thing to do.\u201d The result may even leave your repository in worse condition than when you started!\nThe command he suggests for doing this properly after having imported \u201ca long and involved history\u201d is\ngit repack -a -d -f --depth=250 --window=250\n\nBut this assumes you have already removed unwanted gunk from your repository history and that you have followed the checklist for shrinking a repository found in the git filter-branch documentation.\n\ngit-filter-branch can be used to get rid of a subset of files, usually with some combination of --index-filter and --subdirectory-filter. People expect the resulting repository to be smaller than the original, but you need a few more steps to actually make it smaller, because Git tries hard not to lose your objects until you tell it to. First make sure that:\n\nYou really removed all variants of a filename, if a blob was moved over its lifetime. git log --name-only --follow --all -- filename can help you find renames.\nYou really filtered all refs: use --tag-name-filter cat -- --all when calling git filter-branch.\n\nThen there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.\n\nClone it with git clone file:///path/to/repo. The clone will not have the removed objects. See git-clone. (Note that cloning with a plain path just hardlinks everything!)\n\nIf you really don\u2019t want to clone it, for whatever reasons, check the following points instead (in this order). This is a very destructive approach, so make a backup or go back to cloning it. You have been warned.\n\nRemove the original refs backed up by git-filter-branch: say\ngit for-each-ref --format=\"%(refname)\" refs/original/ |\n  xargs -n 1 git update-ref -d\n\nExpire all reflogs with git reflog expire --expire=now --all.\nGarbage collect all unreferenced objects with git gc --prune=now (or if your git gc is not new enough to support arguments to --prune, use git repack -ad; git prune instead).\n\n\n\n\nDate: Wed, 5 Dec 2007 22:09:12 -0800 (PST)\nFrom: Linus Torvalds <torvalds at linux-foundation dot org>\nTo: Daniel Berlin <dberlin at dberlin dot org>\ncc: David Miller <davem at davemloft dot net>,\n    ismail at pardus dot org dot tr,\n    gcc at gcc dot gnu dot org,\n    git at vger dot kernel dot org\nSubject: Re: Git and GCC\nIn-Reply-To: <[email\u00a0protected]>\nMessage-ID: <[email\u00a0protected]>\nReferences: <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n\nOn Thu, 6 Dec 2007, Daniel Berlin wrote:\n\nActually, it turns out that git-gc --aggressive does this dumb thing\n    to pack files sometimes regardless of whether you converted from an\n    SVN repo or not.\n\nAbsolutely. git --aggressive is mostly dumb. It\u2019s really only useful for\n  the case of \u201cI know I have a really bad pack, and I want to throw away\n  all the bad packing decisions I have done.\u201d\nTo explain this, it\u2019s worth explaining (you are probably aware of it, but\n  let me go through the basics anyway) how git delta-chains work, and how\n  they are so different from most other systems.\nIn other SCMs, a delta-chain is generally fixed. It might be \u201cforwards\u201d\n  or \u201cbackwards,\u201d and it might evolve a bit as you work with the repository,\n  but generally it\u2019s a chain of changes to a single file represented as some\n  kind of single SCM entity. In CVS, it\u2019s obviously the *,v file, and a lot\n  of other systems do rather similar things.\nGit also does delta-chains, but it does them a lot more \u201cloosely.\u201d There\n  is no fixed entity. Deltas are generated against any random other version\n  that git deems to be a good delta candidate (with various fairly\n  successful heuristics), and there are absolutely no hard grouping rules.\nThis is generally a very good thing. It\u2019s good for various conceptual\n  reasons (i.e., git internally never really even needs to care about the whole\n  revision chain \u2014 it doesn\u2019t really think in terms of deltas at all), but\n  it\u2019s also great because getting rid of the inflexible delta rules means\n  that git doesn\u2019t have any problems at all with merging two files together,\n  for example \u2014 there simply are no arbitrary *,v \u201crevision files\u201d that have\n  some hidden meaning.\nIt also means that the choice of deltas is a much more open-ended\n  question. If you limit the delta chain to just one file, you really don\u2019t\n  have a lot of choices on what to do about deltas, but in git, it really\n  can be a totally different issue.\nAnd this is where the really badly named --aggressive comes in. While\n  git generally tries to re-use delta information (because it\u2019s a good idea,\n  and it doesn\u2019t waste CPU time re-finding all the good deltas we found\n  earlier), sometimes you want to say \u201clet\u2019s start all over, with a blank\n  slate, and ignore all the previous delta information, and try to generate\n  a new set of deltas.\u201d\nSo --aggressive is not really about being aggressive, but about wasting\n  CPU time re-doing a decision we already did earlier!\nSometimes that is a good thing. Some import tools in particular could\n  generate really horribly bad deltas. Anything that uses git fast-import,\n  for example, likely doesn\u2019t have much of a great delta layout, so it might\n  be worth saying \u201cI want to start from a clean slate.\u201d\nBut almost always, in other cases, it\u2019s actually a really bad thing to do.\n  It\u2019s going to waste CPU time, and especially if you had actually done a\n  good job at deltaing earlier, the end result isn\u2019t going to re-use all\n  those good deltas you already found, so you\u2019ll actually end up with a\n  much worse end result too!\nI\u2019ll send a patch to Junio to just remove the git gc --aggressive\n  documentation. It can be useful, but it generally is useful only when you\n  really understand at a very deep level what it\u2019s doing, and that\n  documentation doesn\u2019t help you do that.\nGenerally, doing incremental git gc is the right approach, and better\n  than doing git gc --aggressive. It\u2019s going to re-use old deltas, and\n  when those old deltas can\u2019t be found (the reason for doing incremental GC\n  in the first place!) it\u2019s going to create new ones.\nOn the other hand, it\u2019s definitely true that an \u201cinitial import of a long\n  and involved history\u201d is a point where it can be worth spending a lot of\n  time finding the really good deltas. Then, every user ever after (as\n  long as they don\u2019t use git gc --aggressive to undo it!) will get the\n  advantage of that one-time event. So especially for big projects with a\n  long history, it\u2019s probably worth doing some extra work, telling the delta\n  finding code to go wild.\nSo the equivalent of git gc --aggressive \u2014 but done properly \u2014 is to\n  do (overnight) something like\ngit repack -a -d --depth=250 --window=250\n\nwhere that depth thing is just about how deep the delta chains can be\n  (make them longer for old history \u2014 it\u2019s worth the space overhead), and\n  the window thing is about how big an object window we want each delta\n  candidate to scan.\nAnd here, you might well want to add the -f flag (which is the \u201cdrop all\n  old deltas,\u201d since you now are actually trying to make sure that this one\n  actually finds good candidates.\nAnd then it\u2019s going to take forever and a day (i.e., a \u201cdo it overnight\u201d\n  thing). But the end result is that everybody downstream from that\n  repository will get much better packs, without having to spend any effort\n  on it themselves.\n          Linus"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to link folder from a git repo to another repo?\n\nI want to create a public repo to put some sample files from my main repo (private). Is there any way to soft link few folders from a git repo to another git repo?"}, {"role": "assistant", "content": "Then you should use submodules for this task.\nSubmodule are different git repositories under the same root.\nThis way you can manage 2 different project at folder level inside the root repository\n\nSubmodules allow foreign repositories to be embedded within a dedicated subdirectory of the source tree, always pointed at a particular commit.\n\n\ngit submodule\nBreak your big project to sub projects as you did so far.\nNow add each sub project to you main project using :\ngit submodule add <url>\n\nOnce the project is added to your repo, you have to init and update it.\ngit submodule init\ngit submodule update\n\nAs of Git 1.8.2 new option --remote was added\ngit submodule update --remote --merge\n\nwill fetch the latest changes from upstream in each submodule, merge them in, and check out the latest revision of the submodule.\nAs the docs describe it:\n\n--remote\nThis option is only valid for the update command. Instead of using the superproject\u2019s recorded SHA-1 to update the submodule, use the status of the submodule\u2019s remote-tracking branch.\n\nThis is equivalent to running git pull in each submodule.\n\n\nHowever, how would I push a commit in the scenario of bug fix in C which affects the code shared with the parent layers?\n\nAgain: using submodule will place your code inside your main project as part of its content. The difference between having it locally inside the folder or having it as part of a submodule is that in submodule the content is managed (commited) to a different standalone repository.\n\nThis is an illustration of submodule - project inside another project in which each project is a standalone project.\n\n\ngit subtree\nGit subtree allows you to insert any repository as a sub-directory of another one\nVery similar to submodule but the main difference is where your code is managed. In submodules the content is placed inside a separate repo and is managed there which allow you to clone it to many other repos as well.\nsubtree is managing the content as part of the root project and not in a separate project.\nInstead of writing down how to set it up and to understand how to use it you can simply read this excellent post which will explain it all.\nhttps://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting up a Github Commit RSS feed\n\nI am trying to have my github commits as an RSS feed but so far I have not managed to figure it out. I know that a private feed is available with the following syntax:\nhttps://github.com/username.atom?token=token\n\nBut this the user's activity feed. I would like a commit feed of one of my projects.\nUpdate: This was the final syntax:\nhttps://github.com/username/repository_name/commits/branch_name.atom?login=login&token=token. \n\nStill can't view commits on all branches though."}, {"role": "assistant", "content": "You want https://github.com/whatever/commits/master.atom, like for the Cloudera flume repository it's https://github.com/cloudera/flume/commits/master.atom."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to print from GitHub\n\nIf I want to print a markdown file from GitHub as it appears on screen, for example:\nhttps://github.com/RestKit/RestKit/blob/master/Docs/Object%20Mapping.md\nThen how can I accomplish that? What code do I need to change in the resulting github html page (that I save) such that the printout will honor the look & feel of the markdown?\nSo far the only clue I have is this one:\nhttps://makandracards.com/makandra/4947-how-to-print-github-wiki-pages\nBut it is more of a utilitarian (non-programmatic) workaround which doesn't really work because the markdown interpreter in use isn't as forgiving as the one running on the GitHub websites so it fumbles."}, {"role": "assistant", "content": "Here is a bookmarklet that works for me:\n\nCopy the contents of the bookmarklet Gist, reproduced below as a backup.\nCreate a new bookmark in the toolbar of your browser, give it a fitting name.\nPut that one line of code in the URL field.\n\nIf you now go to a Markdown page on Github and click the bookmark it will reformat the page and change the CSS so that it looks the same as on screen when you print. It will also automaticaly trigger the printing dialog to pop up.\nBookmarklet contents:\njavascript:document.body.appendChild(document.querySelector(\"#readme\"));document.querySelector(\"header\").remove();document.querySelector(\".application-main\").remove();document.querySelector(\"footer\").remove();window.print();"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating an official github mirror\n\nHow do I create a github mirror for an external git repository, such that it appears as \"real mirror\", e.g., as in https://github.com/mirrors?\nSo far, I set up a mirror using:\ncd /path/to/bare/repository\ngit remote add --mirror github [email\u00a0protected]:user/repo.git\n\nand configure the post receive hook to do a git push --quiet github. This way, however, github does not recognize the mirror.\nAny ideas how to do it the github way, such that \"Mirrorred from\" appears underneath the repostiory name?"}, {"role": "assistant", "content": "Based on communicating with GitHub's support team, I found that GitHub currently offers no direct mechanism for a user to mirror repositories in this fashion.\nHowever, one can ask GitHub to install this service for repositories which are part of an organization. GitHub then configures an existing repository as such a mirror and pulls from it in an interval that is a function of the number of overall mirrors they have. \nEDIT: as Stuart points out, GitHub no longer accepts requests for mirroring arbitrary repositories. The only remaining option is the solution I posted in my question, i.e., creating a post-receive hook to automatically push to your GitHub repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to unmerge a Git merge?\n\nI accidentally did a git pull origin master from dev, and master got merged into dev.\nIs it possible to unmerge?\nI've already seen different solutions, i tried this one from both dev and master :\ngit revert -m 1 <commit> (once each)\nBut i got : Everything is up-to-date, each time"}, {"role": "assistant", "content": "You can reset your branch to the state it was in just before the merge if you find the commit it was on then.\nOne way is to use git reflog, it will list all the HEADs you've had.\nI find that git reflog --relative-date is very useful as it shows how long ago each change happened.\nOnce you find that commit just do a git reset --hard <commit id> and your branch will be as it was before.\nIf you have SourceTree, you can look up the <commit id> there if git reflog is too overwhelming."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to display HTML content in github README.md?\n\nI am new to github, in README.md want to display a HTML content using an Iframe or something is this possible ? \nWhat I have tried is I just create HTML tags other then anchor, that is not working."}, {"role": "assistant", "content": "Github's markdown interpreter can include HTML. However, there is only so much you can do in HTML. I would suggest checking out this article which provides more information on what tags can be used. Personally, I have never used much more than line-breaks, horizontal rules, etc... Unfortunately, I don't see Iframes mentioned in the article."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Changed GitHub password, no longer able to push back to the remote\n\nAfter I changed my GitHub password, I am unable to push to the remote:\n$ git push origin master\nremote: Invalid username or password.\n\nIs there only re clone the repository?"}, {"role": "assistant", "content": "If you had your remote's password changed only, not the username, then try the following command to check remote's info:-\n\ngit remote show origin\n\nThis will ask for your password for the given git user, fill that in correctly, and now try:-\n\ngit pull\n\nor,\n\ngit push\n\nIt should work unless you have to change other things like username or remote URL, you can take a look at the following Git documentation:-\n\nhttps://help.github.com/articles/setting-your-username-in-git/\nhttps://help.github.com/articles/changing-a-remote-s-url/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can the owner of a repo see clones?\n\nI know that the owner of a repo is able to see a fork request when one is performed. But what about a clone? Can the owner of the repo see when someone clones it?"}, {"role": "assistant", "content": "The question is too general, but let me answer the question as it stands now.\n\nCan the owner of the repo see when someone clones it?\n\nNo, they cannot. If I go to one of your repositories and clone it to my local hard drive, the owner will not be able to view that activity. And why would you want to? Likely there are many clones of your repository.\nKnow that clones can live on other systems than GitHub.\nNow, will the owner know that someone forked their repository on GitHub itself?\nYes, they will, assuming they pay attention.\nI did the following:\n\nLogged in as my main account\nCreated a repository\nSet up a new dummy-account on an alternate email address\nForked the repository I created earlier\nLogged back into my main account\n\nThis is what I see on my first page after logging in:\n\nIf I do the following:\n\nClick on my repository\n\nClick on the small 1 to the right of the \"Fork\" button:\n\n\nClick on the \"Members\" tab:\n\n\nThen I see this:\n\n\n\nConclusion:\nYes, the owner of a repository will see when someone makes a fork on GitHub, but no, they will not see it when someone makes a clone somewhere else."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Windows 'Failed to sync this branch'\n\nI am using Github Windows 1.0.38.1 and when I click the 'Sync' button after committing, I get the error \n\nHow do I debug this problem? If in the shell, what should I do?\nThe sync works fine if i do a git push or git pull, but the next time I want to sync using Github windows, I get the same error."}, {"role": "assistant", "content": "When it says that, just open the shell and do git status. That will give you a decent idea of what could be wrong and the state of your repo.\nI can't give you a specific error for this as it happens for many reasons in Github for Windows, like say some problem in updating submodules etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Sourcetree remote: Invalid username or password\n\nIm trying to push to github with sourcetree but get the following error:\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false push -v\n  --tags origin live_version:live_version remote: Invalid username or password. fatal: Authentication failed for\n  'https://github.com/myname/myrepo/' Pushing to\n  https://github.com/myname/myrepo\nCompleted with errors, see above.\n\n\nHowever when I go to \n\ntools > authentication > my github account\n\nAnd click edit > refresh oauth token\n\nA page opens and I get:\nAuthentication Successful\nSourceTree has been successfully authenticated. You may now close this page.\n\nIt always worked but it suddenly stopped, i do not have two factor authentication. \nI tried deleting the account and adding it again to no avail.\nHow can I get the connection working again so that I can push my project to github.\nSourcetree version 2.1.8.0"}, {"role": "assistant", "content": "I found the answer here, it is a known bug for version 2.1.8+\nThe following steps fixed it for me:\nTools > Options > Git > Update Embedded Git\n\nAlso pushing with the command line works.\nEDIT\nAlso adding @Latisha's answer:\n1. Do the above.\n2. Close Sourcetree\n3. Delete AppData\\Local\\Atlassian\\SourceTree\\passwd \n4. Restart SourceTree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git status shows fatal: bad object HEAD\n\nI have a problem with git on Windows Azure. Git status shows - \"fatal: bad object HEAD\" and I tried running:\n git fsck --full\n git gc\n\nBut  git fsck shows:\nbroken link from  commit 739df633f185ce5d1ab7eb97d619b28e7d81185a\n              to    tree 2a6d4876d135c1fa7cbe1348c62570006e895fc5\nbroken link from  commit 9c7eae5ffed34dbfac977e515dee675626b59f93\n              to    tree 400132d215ab9aced883a9971e648b82624b2032\nbroken link from  commit 9c7eae5ffed34dbfac977e515dee675626b59f93\n              to  commit 4a49af0a0cb64a0a0415734b11772d6df18561fb\nbroken link from  commit bc3072f30e71c616a8196089e19a67a2c9c0a5ad\n              to    tree 0aa813c183487d0a1b1f7ae81501ca7a1168283f\nbroken link from  commit d3bb4f8545e91ec8ace15ad31a3147d92a1d4242\n              to    tree 4682108accd8e72fe68858232386dffe60f9f02d\nbroken link from  commit 6b34795c4b54286301bcdc0ed254a04c132cb2ad\n              to    tree 5c57dd3222d11924dba841d3cae517bdc9220601\nbroken link from  commit d70172d855391b93bc1c5eeb9b4226df525dfc6e\n              to  commit 390c8cbd527c8e707c51e25142e54421f4dd3948\nbroken link from  commit cc05e8d2e3733693ebb67d697ae4b65e51fea79a\n              to  commit 32f081f8b901425fd1e8898478f0551970bee0f5\nbroken link from    tree 6a75ed6d0311d800078e77f43d427d128372d5bc\n              to    blob 4a064d610c0e7207967d59934c8bc5f491f26dae\nbroken link from    tree 6a75ed6d0311d800078e77f43d427d128372d5bc\n              to    tree 5c06ec964dcbade49287d0f36efe1f7b60f446e3\nbroken link from    tree b4855fa6734b5652a93a9b799eafe47fad0d13a0\n              to    blob 3e1fb421613dc9066cbf9c95eddc61619a9f8eed\nbroken link from    tree b4855fa6734b5652a93a9b799eafe47fad0d13a0\n              to    tree 556a50048d42346c283c94b78ea278ba1d57d251\nbroken link from    tree 289c03409370c4ca7c12266ce2822a2976bd032b\n              to    blob 3abf3c48ada45f63404dcf4d675ddfdadcfa83c6\nbroken link from    tree 289c03409370c4ca7c12266ce2822a2976bd032b\n              to    blob 3fa569892003b468ed1301426dd6d96d9644be3c\nbroken link from    tree 289c03409370c4ca7c12266ce2822a2976bd032b\n              to    blob 0a9a54a51e84f3bc34122dbce1146d895fcbe22c\nbroken link from    tree 289c03409370c4ca7c12266ce2822a2976bd032b\n              to    blob 3fa48873564361b4d95830803ae77f79eeafaf5b\n\ngit branch shows - *master"}, {"role": "assistant", "content": "try this; it worked for me (Warning: this destroys work that exists only in your local repo):\n rm -rf .git \nYou can use mv instead of rm if you don't want to lose your stashed commits\nthen copy .git from other clone\n cp <pathofotherrepository>/.git . -r\nthen do\n git init \nthis should solve your problem ,  ALL THE BEST"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "The authenticity of host 'github.com (192.30.252.128)' can't be established\n\nI am trying to use\nsudo npm install\n\nto install all my dependencies for an application written in nodejs. My OS is Ubuntu 13.04\nHowever, I keep getting this warning:\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:1d:52:13:1a:21:2d:bz:1d:66:a8.\nAre you sure you want to continue connecting (yes/no)?\n\nHas anyone encountered this warning before? Is it possible to authenticate and store the fingerprint locally? So I won't need to authenticate again when I enter sudo npm install another time.\nRight now, I am unable to enter anything, not even \"yes\". My terminal just gets stuck, i have to press Ctrl+C to terminate."}, {"role": "assistant", "content": "Danger ahead, unless you actually don't care about secure communication with github on your local account\nSsh rightly complains that they can't make sure you are indeed connecting to github's server through a secure channel.  That might be why github is recommending https access, which works out-of-the-box thanks to its public key infrastructure.\nNow, you can have it work, but be aware that it involves caching a public key fingerprint which, if done incorrectly, provides an attacker permanent man-in-the-middle attack.\nHow to proceed safely?\nOption 1 is use https url instead of ssh.\nOption 2 is have ssh access work.\nOkay, show me option 2\n\nDo ssh -T [email\u00a0protected] but don't just type \"yes\".\nCheck if the hash that is shown matches one of the hashed shown in https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints (in your question it does, and see, the page is fetched through https for the same public key infrastructure reasons).\n\nIf the hash matches, then connection is indeed safe you can answer \"yes\" to ssh's question.\nOkay, I checked and typed yes, how do I know it works?\nSsh will show something like:\n\nWarning: Permanently added the RSA host key for IP address\n'192.30.252.128' to the list of known hosts.\n\nAfter that, you will either see a message like\n\nPermission denied (publickey).\n\nwhich is good but shows that you need further configuration, or simply\n\nHi yourlogin! You've successfully authenticated, but GitHub does not\nprovide shell access.\n\nwhich means that all works well and you can retry your first operation.\nNotice that if you retry the same ssh command, it should no longer ask the question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to add issues to a github forked repo (without modifying the original)?\n\nI notice there's no \"issues\" tab on my forked github repo. Is there a way to allow me to fork a repo, but still add issues/wiki/etc?"}, {"role": "assistant", "content": "Fork a repo\nGo to the Settings page of your fork.\nClick 'General' tab on the left\nScroll down to the Features subsection\nTick the Issues checkbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge changes from remote github repository to your local repository\n\nI have forked a repository on github some time ago, made a small change and pushed the change back to my github fork. The original repository has changed since. I would like to merge the changes from the original repository to my fork.\nI am new to both git and github, and I need specific commands how to do it."}, {"role": "assistant", "content": "git remote add {name} {Public Clone URL}\ngit pull {name} master\ngit push\n\nExample:\ngit remote add bret git://github.com/bret/watir.git\ngit pull bret master\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCannot push to GitHub - keeps saying need merge\n\n                                (31 answers)\n                            \n\nClosed 9 years ago.\n\n\n\nUpdates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes.\nI was trying to push local octopress blog to remote branch.\nBut its saying above error.\nanother is: Do i have to manage or push the local changes to source or origin branch.?\nWhen i do username.github.io ,i shall see my remote version of the local blog.(i used rake deploy command)\nBut i dont see the updated blog at my username.github.io.I have doubt on branch for origin and source."}, {"role": "assistant", "content": "You need to merge the remote branch into your current branch by running git pull.\nIf your local branch is already up-to-date, you may also need to run git pull --rebase.\nA quick google search also turned up this same question asked by another SO user: Cannot push to GitHub - keeps saying need merge. More details there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix bower ECMDERR\n\nI'm using \"yeoman\" and \"bower\" on windows 7 but got the following error when I create the app\nyo webapp\n\nThe error is \nbower not-cached    git://github.com/jlong/sass-bootstrap.git#~3.0.0\nbower resolve       git://github.com/jlong/sass-bootstrap.git#~3.0.0\nbower not-cached    git://github.com/Modernizr/Modernizr.git#~2.6.2\nbower resolve       git://github.com/Modernizr/Modernizr.git#~2.6.2\nbower not-cached    git://github.com/jquery/jquery.git#~1.10.2\nbower resolve       git://github.com/jquery/jquery.git#~1.10.2\nbower ECMDERR       Failed to execute \"git ls-remote --tags --heads git://github\n.com/jquery/jquery.git\", exit code of #128\n\nAdditional error details:\nfatal: unable to connect to github.com:\ngithub.com[0: 192.30.252.130]: errno=No error\n\nThe version of the yeoman, bower and node\nc:\\yo-test>bower -v\n1.2.8\n\nc:\\yo-test>yo -version\n1.1.2\n\nc:\\yo-test>node -v\nv0.10.15\n\nAny suggestion is much appreciated."}, {"role": "assistant", "content": "In case you might encounter the same issue...It turns out my machine behind firewall, that won't able to access git://github.com/jquery/jquery.git\nLink: Unable to Connect to GitHub.com For Cloning\nThe solution without changing the firewall:  \ngit config --global url.\"https://\".insteadOf git://\n\nCredit to @bnguyen82 from Unable to Connect to GitHub.com For Cloning and @Sindre Sorhus from Bower install using only https?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Showing Travis build status in GitHub repo\n\nI remember recently seeing the Travis build status of a pr or commit in GitHub browsing the repository (but can't find where). I'm not talking about the Travis build status images in README.md but an actual GitHub feature (green box with a friendly check mark).\nWhile my commits build on Travis just fine I'd like to get the results displayed in GitHub (which they don't do right now). I'd like to know how to enable this. \nUPDATE\nFound an example here - see the small green check mark saying \"Travis-CI build passed\"?"}, {"role": "assistant", "content": "Github Integration\n\nGo to https://travis-ci.org/{username or org}/{repository}\nClick the Status Image (a pop-up will appear)\n\n\n\nSelect a branch, then click the dropdown Image URL \u25bc and set it to Markdown \u25bc.\n\n\n\nCopy Paste the code to your README.md\nGit add, commit & push. Refresh Github and you'll see the image now."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to discard local changes and pull latest from GitHub repository\n\nI have a directory on my machine where I store all projects from GitHub. I opened one of them and made changes locally on my machine. Project got messed up and now I want to discard all the changes I made and pull the latest version from the repository. I am relatively new to GitHub, using Git Shell. \nWould git pull command be sufficient?\nDo I need to do anything extra to discard the changes made locally?\nCan anyone help?"}, {"role": "assistant", "content": "git reset is what you want, but I'm going to add a couple extra things you might find useful that the other answers didn't mention.\ngit reset --hard HEAD resets your changes back to the last commit that your local repo has tracked.  If you made a commit, did not push it to GitHub, and want to throw that away too, see @absiddiqueLive's answer.\ngit clean -df will discard any new files or directories that you may have added, in case you want to throw those away.  If you haven't added any, you don't have to run this.\ngit pull (or if you are using git shell with the GitHub client) git sync will get the new changes from GitHub.\nEdit from way in the future:\nI updated my git shell the other week and noticed that the git sync command is no longer defined by default. For the record, typing git sync was equivalent to git pull && git push in bash.  I find it still helpful so it is in my bashrc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I filter all GitHub pull requests for a specific target branch\n\nI'm working on a GitHub repo with lots of branches and pull requests.\nLet's say, for example, that I have the following pull requests:\n\na to branch X\nb to branch X\nc to branch Y\nd to branch X\ne to branch Y.\n\nIs there a way to find all the pull requests that are targeted for branch X (i.e. a -> X, b -> X, d -> X)?"}, {"role": "assistant", "content": "Yes, you can do it.\nIn Github's terminology the \"to branch\" is \"base\"\nSo the search phrase is: is:open is:pr base:X\nOfficial description: Search based on branch names\nOptionally you can add is:merged or is:unmerged filters as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change date of git tag (or GitHub Release based on it)\n\nI'm adding Releases to my projects on GitHub by adding tags to various commits in the Main branch. \nIn one of my projects I did not add the tags to the commits in chronological order. (I found obvious commits and tagged them, and then I found less obvious, older commits and tagged them.)\nNow GitHub is showing v1.0.1 as current, with v0.7.0 preceding it, and v1.1.2 preceding that. \nIt appears to use the date on a tag's creation as the Release date instead of the commit that is being tagged. How can I edit my tags so that their dates are the same as the commit they are tagging?"}, {"role": "assistant", "content": "WARNING: This will not preserve tag messages for annotated tags.\n\nSummary\nFor each tag that needs to be changed:\n\nGo back in time to the commit representing the tag\nDelete the tag (locally and remotely)\n\n\nThis will turn your \"Release\" on GitHub into a Draft that you can later delete.\n\nRe-add the same-named tag using a magic invocation that sets its date to the date of the commit.\nPush the new tags with fixed dates back up to GitHub.\nGo to GitHub, delete any now-draft releases, and re-create new releases from the new tags\n\nIn code:\n# Fixing tag named '1.0.1'\ngit checkout 1.0.1               # Go to the associated commit\ngit tag -d 1.0.1                 # Locally delete the tag\ngit push origin :refs/tags/1.0.1 # Push this deletion up to GitHub\n\n# Create the tag, with a date derived from the current head\nGIT_COMMITTER_DATE=\"$(git show --format=%aD | head -1)\" git tag -a 1.0.1 -m\"v1.0.1\"\n\ngit push --tags                  # Send the fixed tags to GitHub\n\nDetails\nAccording to How to Tag in Git:\n\nIf you forget to tag a release or version bump, you can always tag it retroactively like so:\ngit checkout SHA1_OF_PAST_COMMIT\ngit tag -m\"Retroactively tagging version 1.5\" v1.5\n\nAnd while that's perfectly usable, it has the effect of putting your tags out of chronological order which can screw with build systems that look for the \"latest\" tag. But have no fear. Linus thought of everything:\n# This moves you to the point in history where the commit exists\ngit checkout SHA1_OF_PAST_COMMIT\n\n# This command gives you the datetime of the commit you're standing on\ngit show --format=%aD  | head -1\n\n# And this temporarily sets git tag's clock back to the date you copy/pasted in from above\nGIT_COMMITTER_DATE=\"Thu Nov 11 12:21:57 2010 -0800\" git tag -a 0.9.33 -m\"Retroactively tagging version 0.9.33\"\n\n# Combining the two...\nGIT_COMMITTER_DATE=\"$(git show --format=%aD  | head -1)\" git tag -a 0.9.33 -m\"Retroactively tagging version 0.9.33\"\n\n\nHowever, if you have already added the tag, you cannot use the above with git tag -f existingtag or else git will complain when you try to merge:\nRammy:docubot phrogz$ git push --tags\nTo [email\u00a0protected]:Phrogz/docubot.git\n ! [rejected]        1.0.1 -> 1.0.1 (already exists)\nerror: failed to push some refs to '[email\u00a0protected]:Phrogz/docubot.git'\nhint: Updates were rejected because the tag already exists in the remote.\n\nInstead, you must remove the tag locally:\ngit tag -d 1.0.1\n\nPush that deletion remotely:\ngit push origin :refs/tags/1.0.1\n\nOn GitHub, reload Releases\u2014the release has now been marked as a \"Draft\"\u2014and remove the draft.\nNow, add the backdated tag based on the instructions above, and finally push the resulting tag to GitHub:\ngit push --tags\n\nand then go and re-add the GitHub Release information again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can you create GitHub gists that live under an organization account instead of a personal account?\n\nI manage an organization https://github.com/marklogic.  I see we actually have one gist under https://gist.github.com/marklogic/ ; I can't figure out how to get any more gists there though.  Is there a way?"}, {"role": "assistant", "content": "I don't think you can currently create gists as an organization account, but in my experience, if your account was a personal account and you created a gist under that account and then upgraded the account to an organization account, the gist stays but no new gists can be created.\nAlso, seems like this answer on WebApps confirms my experience."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github remote permission denied\n\nI'm trying to upload to my repo on GitHub. I go through all the steps up to:\ngit push -u origin master\nAt that point it gives me the following error:\n\nremote: Permission to samrao2/manager-4.git denied to samrao1.\nfatal: unable to access 'https://github.com/samrao2/manager-4.git/':\nThe requested URL returned error: 403\n\nI think the issue is that I was logged into another Git account before \"samrao1\" and now I am trying to push to \"samrao2\".\nCan someone help me reset this to where I can successfully push to \"samrao2\"? I assume I will be prompted for my password the first time I try to do it."}, {"role": "assistant", "content": "Unable to access https means: this has nothing to do with SSH (and switching to SSH, while possible, does not explain the original issue)\nThis has to do with credential caching, meaning Git will be default provide the credentials (GitHub account and password PAT Personal Access Token) of the old account while you are trying to push to the new account.\n\nReminder, most Git repository hosting service uses token as password, not your actual user account password.\nFor instance, GitHub no longer accept password since Aug. 2021.\n\nSee if you have a credential helper that would have cached your (old account) credentials (username/password) used to authentication you.\ngit config credential.helper \n\nOn Mac, as commented by Arpit J, just goto/open your keychain access->search for github.com related file->and edit credentials there.\n\nSee  \"Updating credentials from the OSX Keychain\"\nOn Windows (And, in 2021, possibly Linux or even Mac), that would be the Windows Credential Managers GCMC: Git Credential Manager.\nOpen the Windows Credential Store, and see if the first user is registered there: delete that entry, and you will be able to authenticate with the second user.\n(Here is an example for BitBucket)\n\n\nIn command-line (see git credential), for a manager core credential helper:\n\nGet the old password or token:\nprintf \"protocol=https\\nhost=github.com\\nusername=<me>\" | \\\n  git credential-manager-core get\n\n# output:\nprotocol=https\nhost=github.com\nusername=<me>\npassword=<old_password_or_token>\n\n\nRemove the old password:\nprintf \"protocol=https\\nhost=github.com\\nusername=<me>\" | \\\n  git credential-manager-core erase\n\n\n\n(Replace <me> by your GitHub user account name)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error: Unable to append to .git/logs/refs/remotes/origin/master: Permission denied\n\nI am having a strange issue that I can't seem to resolve. Here is what happend:\nI had some log files in a github repository that I didn't want there. I found this script that removes files completely from git history like so:\n    #!/bin/bash\nset -o errexit\n\n# Author: David Underhill\n# Script to permanently delete files/folders from your git repository.  To use \n# it, cd to your repository's root and then run the script with a list of paths\n# you want to delete, e.g., git-delete-history path1 path2\n\nif [ $# -eq 0 ]; then\n    exit 0are still\nfi\n\n# make sure we're at the root of git repo\nif [ ! -d .git ]; then\n    echo \"Error: must run this script from the root of a git repository\"\n    exit 1\nfi\n\n# remove all paths passed as arguments from the history of the repo\nfiles=$@\ngit filter-branch --index-filter \"git rm -rf --cached --ignore-unmatch $files\" HEAD\n\n# remove the temporary history git-filter-branch otherwise leaves behind for a long time\nrm -rf .git/refs/original/ && git reflog expire --all &&  git gc --aggressive --prune\n\nI, of course, made a backup first and then tried it. It seemed to work fine. I then did a git push -f and was greeted with the following messages:\nerror: Unable to append to .git/logs/refs/remotes/origin/master: Permission denied\nerror: Cannot update the ref 'refs/remotes/origin/master'.\n\nEverything seems to have pushed fine though, because the files seem to be gone from the GitHub repository, if I try and push again I get the same thing:\nerror: Unable to append to .git/logs/refs/remotes/origin/master: Permission denied\nerror: Cannot update the ref 'refs/remotes/origin/master'.\nEverything up-to-date\n\nEDIT\n$ sudo chgrp {user} .git/logs/refs/remotes/origin/master\n$ sudo chown {user} .git/logs/refs/remotes/origin/master\n$ git push\nEverything up-to-date\n\nThanks!\nEDIT\nUh Oh. Problem. I've been working on this project all night and just went to commit my changes:\nerror: Unable to append to .git/logs/refs/heads/master: Permission denied\nfatal: cannot update HEAD ref\n\nSo I:\nsudo chown {user} .git/logs/refs/heads/master\nsudo chgrp {user} .git/logs/refs/heads/master\n\nI try the commit again and I get:\nerror: Unable to append to .git/logs/HEAD: Permission denied\nfatal: cannot update HEAD ref\n\nSo I:\nsudo chown {user} .git/logs/HEAD\nsudo chgrp {user} .git/logs/HEAD\n\nAnd then I try the commit again:\n16 files changed, 499 insertions(+), 284 deletions(-)\ncreate mode 100644 logs/DBerrors.xsl\ndelete mode 100644 logs/emptyPHPerrors.php\ncreate mode 100644 logs/trimXMLerrors.php\nrewrite public/codeCore/Classes/php/DatabaseConnection.php (77%)\ncreate mode 100644 public/codeSite/php/init.php\n$ git push\nCounting objects: 49, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (27/27), done.\nWriting objects: 100% (27/27), 7.72 KiB, done.\nTotal 27 (delta 15), reused 0 (delta 0)\nTo [email\u00a0protected]:IAmCorbin/MooKit.git\n59da24e..68b6397  master -> master\n\nHooray. I jump on http://GitHub.com and check out the repository, and my latest commit is no where to be found. ::scratch head:: So I push again:\nEverything up-to-date\n\nUmm...it doesn't look like it. I've never had this issue before, could this be a problem with github? or did I mess something up with my git project?\nEDIT\nNevermind, I did a simple:\ngit push origin master\n\nand it pushed fine."}, {"role": "assistant", "content": "This looks like you ran git as root locally, thus changing ownership on some of the files tracking the location of the origin branch.\nFix the file ownership, and you should be fine:\n# run this from the root of the git working tree\nsudo chown -R \"${USER:-$(id -un)}\" ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do a fast-forward merge on GitHub?\n\nSo one of my colleagues attempted to merge a branch using GitHub's \"merge via fast-forward\" option in the web-interface, to keep the history clean from bogus merge commits (the master branch into which they merged, had not progressed since the to-be merged feature-branch was started).\nFunnily enough, this didn't work as expected: all the commits got new commit-hashes.\nOn closer inspection, it seems that merge-option is actually called \"Rebase and Merge\" and it really seems to do the equivalent of git rebase --force, changing the Committer information (both the person who did the merge, and the time when the merge happened).\nIt took me quite a while to confirm my suspicion that this is indeed the case, as I couldn't make the cmdline tools to show me the difference between the original commits on the feature branch and the seemingly-identical commits (with different hashes) on the master branch.\n(In the end, I found that gitk shows both Committer and Author of a commit; in the very end I found that I can also get this information via git log --pretty=raw)\nSo:\n\nIs there a way to do a \"proper\" fast-forward merge (git rebase without the --force option) via GitHub's web-interface?\nIf not: why? (I can see merits in accountability; e.g. it answers the question who is responsible that a given piece of code ended up in master)"}, {"role": "assistant", "content": "Looks like GitHub does not support this \u2013\u00a0and this is a TERRIBLE affair.\nYou basically CANNOT run an atomic, linear commit strategy (the best there is) using the GitHub UI.\nNote that Bitbucket DOES support this, and has much more fine-grained options for setting up the PR landing/integration strategy. Namely the 'Rebase, fast-forward' option which does a --ff-only update of the target/mainline branch. It also has a 'Rebase, merge' option which lets you run a rebase on target (so that your commits are linear) but integrates using a merge commit (if you want to track that the commits are all part of one logical unit/PR).\nBoth of these options seem superior to GitHub's limited options of either using non-linear merge commits (GitHub's 'Merge pull request' option) or linear rebase ('Rebase and merge' option), which does achieve linearity but creates duplicate commits on the source branch, thus always requiring manual Hard Resets locally if you want to keep things clean and in sync.\nSo... time to switch your repo provider it seems!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Any way in Github.com to see the exact time for a commit or release\n\nI'm using github for students to submit a programming assignment. And I have a strict deadline for submission and I would like to be able to check the time that their release was submitted.\nUnfortunately, github only reports how many days ago a release or commit was made. Is there any (quick) way to get the exact time?"}, {"role": "assistant", "content": "If you move your mouse over the xx minutes|hours\\... ago label, a tooltip will be displayed showing the UTC time the commit was created at.\nKeep in mind that Git history can be rewritten (see git commit --amend or git filter-branch commands for instance) and that this displayed time shouldn't  be considered as solid proof."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there an overview of what can go into a .github \"dot github\" directory?\n\nI keep finding piecemeal examples of things that can go into a .github directory on a GitHub repository.\nI can see that it is used for GitHub actions and workflow and for Pull request and issue templates, but I can't see a page outlining what you can put in there with ideally some documentation. I also think I've seen a funding example too.\nBasically every time I see something you can do there, I think \"that's neat I should do that\", but other than examples I can't see a way to discover new things other than by example.\nDue to the fact that the directory is called .github it seems to defy Google and SO search as well."}, {"role": "assistant", "content": "On Github, folder .github is just a convention folder used to place Github related stuff inside it. Github handles some of these files even when you place it in root of your project (such as CONTRIBUTING.md, CODE_OF_CONDUCT.md etc). Because Github is constantly bringing in new features, these features are documented on their own, so there is no \"all possible files in .github\" page. Feel free to place anything that is related to Github specifically inside it.\nSome of the most used files in .github folder:\n\nCODE_OF_CONDUCT.md -> How to engage in community and how to behave yourself.\nCONTRIBUTING.md -> How to contribute to repo (making pull request, setting development environment...)\nLICENSE.md - A software license tells others what they can and can't do with your source code (You should place this at the root of your project since GitHub ignores it in .github folder. You can find this file while browsing other Git hosting services such as GitLab, Bitbucket etc.)\nFUNDING.yml -> Supporting a project\nISSUE_TEMPLATE -> Folder that contains a templates of possible issues user can use to open issue (such as if issue is related to documentation, if it's a bug, if user wants new feature etc) P.S. Take a look at tensorflow ISSUE_TEMPLATE\nPULL_REQUEST_TEMPLATE.md -> How to make a pull request to project\nstale.yml -> Probot configuration to close stale issues. There are many other apps on Github Marketplace that place their configurations inside .github folder because they are related to GitHub specifically.\nSECURITY.md -> How to responsibly report a security vulnerability in project\nworkflows -> Configuration folder containing yaml files for GitHub Actions\nCODEOWNERS -> Pull request reviewer rules. More info here.\ndependabot.yml -> Configuration options for dependency updates. More info here.\n\n\nYou don't have to create all these files immediately. If there are lot of bugs reported in your project, create ISSUE_TEMPLATE. If several people wants to support you, create FUNDING.yml . You will create more and more files when the need comes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git lfs - \"this exceeds GitHub's file size limit of 100.00 MB\"\n\nI have some csv files that are larger than github's file size limit of 100.00 MB. I have been trying to use the Git Large File Storage extension.\nhttps://git-lfs.github.com/\nFrom LFS - \"Large file versioning- Version large files\u2014even those as large as a couple GB in size\u2014with Git.\"\nI have applied the following on the folders of concern:\ngit lfs track \"*.csv\"\n\nHowever, when I push:\nremote: error: File Time-Delay-ftn/Raw-count-data-minor-roads1.csv is 445.93 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File Time-Delay-ftn/Raw-count-data-major-roads.csv is 295.42 MB; this exceeds GitHub's file size limit of 100.00 MB\n\nWhen I look at the folder in question:\n-rw-r-----   1 user  staff    42B 23 Oct 12:34 .gitattributes\n-rw-r--r--   1 user  staff   1.3K 19 Oct 14:32 DfT_raw_major_manipulation.py\n-rw-r--r--   1 user  staff   1.2K 16 Oct 15:08 DfT_raw_minor_manipulation.py\ndrwxr-xr-x  21 user  staff   714B 22 Oct 11:35 Driving/\n-rwxr-xr-x@  1 user  staff   295M 19 Oct 14:47 Raw-count-data-major-roads1.csv*\n-rwxr-xr-x@  1 user  staff   446M 16 Oct 14:52 Raw-count-data-minor-roads1.csv*\n\nwhen I vim the .gitattributes file you can see the lfs setup:\n*.csv filter=lfs diff=lfs merge=lfs -text\n\nWhat am I doing wrong?\nUPDATE\nWhen I query \ngit lfs ls-files\n\nI get nothing returned. This indicates that despite the .csv filter being successfully applied to the .gitattributes file the csv files are not being picked up by lfs"}, {"role": "assistant", "content": "Since Git LFS 2.2.0 you can use git lfs migrate command. In your case it would look this way:\ngit lfs migrate import --include=\"*.csv\"\n\nAfter this, you should be able to push changes into origin.\nMore information about git lfs migrate is available on Git LFS 2.2.0 release note site and git-lfs-migrate command documentation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git/GitHub commit with extended message/description\n\nI recently use GitHub and downloaded GitHub for Mac.\nI noticed you can add an 'extended description' using GitHub for Mac. How do I add an extended description using the command line?\nCan I add an extended description to an existing commit?"}, {"role": "assistant", "content": "From this accepted answer:\ngit commit -m \"Title\" -m \"Description ..........\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Error: Key already in use\n\nI have created two GitHub accounts.  One for my work user and one for my personal self.  I needed to do catch up on some work and as such cloned my work repo onto my personal PC.  In order to do simple \"git push origin master\" commits without entering my username and password the whole time I simply want to add my public key from my home pc to the work repo.  However Github gives this error:\nError: Key already use\n\nAfter a bit of Googling I came across this link which states \"To resolve the issue, remove the key from the other account or repository and add it to your account\"  Of course there is a duplicate key as I've added my home public key to github so that I can code on my own personal projects. After all I want to be able to code to my work repo using both my work pc and personal pc.\nHow can you add multiple \"same\" public keys without Github throwing that error and also why in the world, is that error thrown in the first place?"}, {"role": "assistant", "content": "You can create one more key pair, say id_rsa_personal.pub, and add it to the Github account.\nNext, create/edit the .ssh/config file.\n# Default GitHub\nHost github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa\n\nHost github-public\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_public\n\nHost github-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_personal\n\nThe above file will help you to use more than one Github account. For background info, refer to the answers to this question.\nNext, you will need to alter your .git/config remote url to point to:\ngithub-personal:<gh_username>/<gh_reponame>.git\nRather than the usual:\n[email\u00a0protected]:<gh_username>/<gh_reponame>.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I update my forked repo using SourceTree?\n\nI am using SourceTree (with BitBucket) to manage my code.  I have forked a repo, and the parent repo has been updated.\nHow do I use SourceTree to merge the upstream code into my forked repo?"}, {"role": "assistant", "content": "First, set up the parent repo:\n\nOpen your forked repo in SourceTree.\nSelect Repository \u27ab Repository Settings\u2026 in the menu (or press \u21e7\u2318,).\nIn the Remotes pane, press Add.\nEnter any name you like (often upstream or master) and the URL / path to the parent repo.\nPress OK, then OK.\n\nNow, to update:\n\nSelect Pull in the toolbar.\nIn the \"Pull from repository\" drop-down, switch from your fork to the repo you just added.\nPress OK.\n(Optional) Once you pull, you may want to push any new content up to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can anybody push to my project on github?\n\nI set up a repository on GitHub, and I can push local stuff to this remote repository. Can anybody change my repository on GitHub freely? Or if I push something to Linux kernel, are the changes I made added to it and public for all?"}, {"role": "assistant", "content": "No, all repositories are read-only for anonymous users. \nBy default only the owner of the repository has write access. If you can push to your own repo, it's because you are using one of the supported authentification methods (HTTPS, SSH, ...).\nIf you want to grant someone else privileges to push to your repo, you would need to configure that access in the project settings.\nTo contribute to projects in which you don't have push access, you push to your own copy of the repo, then ask for a pull-request. Linux is not a good example for that, because the kernel developers do not use GitHub pull requests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't find GitHub invitation to join repo?\n\nI've been invited to join a GitHub repo. I've seen on the team leads computer that I definitely have been invited. However I haven't received an email and I can't see any notifications when I log into GitHub. How can I find my invite and join the repo?"}, {"role": "assistant", "content": "If you got invited to join a GitHub organization (or a team within a organization), then you can see this invite on the following link:\n\nhttps://github.com/orgs/PUT_ORGANIZATION_NAME_HERE/invitation\n\nIf you want to accept a repository invite, then you can use this schema:\n\nhttps://github.com/PUT_ORGANIZATION_NAME_HERE/PUT_REPOSITORY_NAME_HERE/invitations"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - Pull changes from a template repository\n\nI have created a Template Repository in GitHub and then created some repositories based on the template. Since they were created, there have been updates to the template that I want to pull into those repositories.\nIs this possible?"}, {"role": "assistant", "content": "On the other repositories you have to add this template repository as a remote.\ngit remote add template [URL of the template repo]\n\nThen run git fetch to update the changes\ngit fetch --all\n\nThen is possible to merge another branch from the new remote to your current one.\ngit merge template/[branch to merge] --allow-unrelated-histories\n\nhttps://help.github.com/en/articles/adding-a-remote"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you control the order in which files appear in a GitHub gist\n\nIs there a way to control the order in which files appear in a gist? They don't seem to be alphabetical or chronological. I'd like to have a README.md appear as the first file in a multi-file gist, but no amount of \"deleting\" a file and re-adding it seems to change anything.\nIs there an order to these files that I'm not seeing, or does GitHub maintain an internal filetype priority list?"}, {"role": "assistant", "content": "Since at least 2018, the order is alphabetical, with periods and numbers coming before letters.\nThat is, as mentioned in Andrew D.Bond's answer:\n\n$\n. (dot)\nNumbers\nLeading space (although the space doesn't appear after saving, the sort order is still updated)\n(although bis, in Sept. 2020, IvanaGyro adds in the comments leading spaces will not affect the order any more)\n_ (underscore)\nLetters (case insensitive)\n\nAround 2013-2014 a different order was used. See Andrew D. Bond's answer for more."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I move an issue on github to another repo?\n\nIt happens every now and then. Some library depends on another and a user opens an issue that belongs to the wrong repo. Can I move the issue to the other repo?\nYou could argue that the issue could be seen as being both repos' issue because one depends on the other and as long as one doesn't work properly both don't. But I'd rather talk about solutions to the issue in the repo it belongs in."}, {"role": "assistant", "content": "No, officialy you can't move issues between repositories.\nThere is a hack though, github-issues-import, kind of a plugin, to import issues from a repository to another."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "My pull request has been merged, what to do next?\n\nI recently participated in a project from GitHub. I did the following:\nForked the original repository, cloned it to my local machine, made a branch to fix existing bug, fixed bug being in that branch, pushed that branch to my repo, send a pull request to the author of the repository to merge my fix branch to its master branch.\nIt was my first time I commited on another's code so I don't know what to do. Now my pull request has been merged to original repo/project by the author. \nWhat should I do next? Should I delete the branch? Should I merge the branch? Anything else?\n\nAdditional info:\nThe original project has a single branch.\nI also have a upstream set to get latest updates form the original repo. (I did it like this):\ngit remote add upstream https://path/to/original/repo.git\n\nAnd I get updates like this:\ngit fetch upstream"}, {"role": "assistant", "content": "What to do next is: going on contributing new features or fixing other bugs in their own dedicated branches (pushed only to your fork).  \nMeaning your fork stays, but the branches within your fork can come and go.  \nYou can also remove the fork if you are not planning to contribute further, but it will remove the corresponding entry in 'Repositories you contribute to'.\nIt is easier to:\n\ndelete your fix branch (actually, it is now deleted for you) on your fork (and in your local cloned repo: see \"Delete a Git branch both locally and remotely\")\ngit pull upstream master (if master was the branch in which your fix has been integrated: the merge will be a fast-forward one): no rebase needed at this point.\nrecreate a fix branch on top of your updated local master (now with the latest from upstream master).\n\n\nHowever, never forget one step before submitting any future pull request:\nrebase first your current branch (fix) from upstream destination branch\n(upstream being the original repo you have forked: see \"What is the difference between origin and upstream in github\")\nBefore submitting anything back to the original repo (\"upstream\"), you need to make sure your work is based on top of the latest from said original repo (or the pull-request won't result in a fast-forward merge once applied back on upstream repo).\nSee, for instance, \"Workflow for managing pull requests on shared repos in github\".\nIn other words, upstream can evolve (have new commits pushed on it) while you are busy fixing stuff. You need to replay your fixes on top of that latest work from upstream to make sure your commits are still compatible with the latest of upstream.\n\nThe OP Santosh Kumar asks in the comments:\n\nI have pulled and merged from upstream to master, now what? \n\nIf you haven't made any new fixes since your recent pull request, see above (delete and recreate an new branch fix on top of your updated master).\nIf you have done any more work since your pull request, I wouldn't merge from upstream if I want to make a new pull request: I would pull and rebase:\ngit pull --rebase upstream master\n\nThat way, all my new local work is replayed on top of the most recent upstream master commits (fetched in my local repo), supposing that master is the target branch that will integrate my future pull request.\nThen I can push my local work to 'origin', which is my fork on GitHub of upstream.\nAnd from my fork on GitHub, I can safely make a pull request, knowing that it will only add new commits to upstream without needing any merge resolution: merging those new commits in upstream repo will mean a simple fast-forward merge.\n\nA git pull --rebase without specifying the branch on top of which you want to rebase your (currently checked out) fix branch wouldn't work:\n\nThat (git pull --rebase) says: \n\nYou asked to pull from the remote '`upstream`', but did not specify a branch. \n\n\nShould I append master at last? And what will this do?, will it delete my fix branch?\n\nYes, you can specify the branch which will be the target of the pull request, for instance 'master'.\nThat will not delete your fix branch, but will replay it on top of upstream master fetched in your repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to re-authorize the OAuth Application 'Git Credential Manager'\n\nI am part of an organization that uses SSO in Github. I don't have problem to access the repository through the web, it redirects me to SSO login and that's all.\nThe problem started when I logged-in first to my personal repository on GitHub through Git-Bash, I did some changes and then I wanted to do changes in a repository from my organization. When I run the below command, it wrote me that I need to re-authorize the OAuth Application, but I don't understand how:\n$ git push --delete origin v0.1.3\nremote: The `<my_company>' organization has enabled or enforced SAML SSO. To access\nremote: this repository, you must re-authorize the OAuth Application `Git Credential Manager`.\nfatal: unable to access 'https://github.com/<my_company>/myproj.git/': The requested URL returned error: 403\n\nHow can I re-authorize the login?\nI tried to re-open Git-Bash but it wrote me the same error."}, {"role": "assistant", "content": "My company just enabled SSO for my Github Org overnight so was getting the same error running git pull.  I fixed this with the following steps.\n\nOpen Credential Manager in Windows and delete the existing credential for github.com\nRe-initialise the cred manager in git bash: git config --global credential.helper manager-core\nRe-run git pull and follow the pop-up instructions to authenticate in a browser (which happened automatically for me with SSO).\n\nAfter those steps git commands worked for me again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing from local repository to GitHub hosted remote\n\nI created a local repository of my Visual Studio 2010 solution folder using Git GUI on my dev machine. I then created a remote repository in my GitHub account. Now, I am looking for how to push my local repository to the remote repository.\nIn SVN I can just commit using TortoiseSVN and changes are pushed to the remote repository. I don't see any tool like that available for Git. \nHow do I push my local repo to my remote repo on GitHub?"}, {"role": "assistant", "content": "You push your local repository to the remote repository using the git push command after first establishing a relationship between the two with the git remote add [alias] [url] command.  If you visit your Github repository, it will show you the URL to use for pushing.  You'll first enter something like:\ngit remote add origin [email\u00a0protected]:username/reponame.git\n\nUnless you started by running git clone against the remote repository, in which case this step has been done for you already.\nAnd after that, you'll type:\ngit push origin master\n\nAfter your first push, you can simply type:\ngit push\n\nwhen you want to update the remote repository in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do \"go get\" on a specific tag of a github repository\n\nI am trying to compile the InfluxDB database (version v0.8.8) using go get github.com/influxdb/influxdb\nBut this pulls the master branch, and I need the v0.8.8 tag.\nI have tried to do:  go get github.com/influxdb/influxdb/releases/tag/v0.8.8 but this fails saying unable to find.\nI also tried to do a regular go get of the master branch, and then manually checking out the tag using git in GOPATH/src/github... in order to set the corret version.\nThe problem using the last approach is that when I try to pull the dependencies with go get -u -f ./... it tries to find them in the master branch, and some of them do not exist on the master branch...\nTL;DR: perform go get on a specific github tag, and pull the correct dependencies."}, {"role": "assistant", "content": "It is not possible using the go get tool. Instead you need to use a third party go package management tool or create your own forks for the packages that you wish to manage more fine grained.\nSpoke to a guy that works at Google and he acknowledged this problem/requirement, he said that vendoring which his team used was bulky and they will probably solve it with the official tools soon.\nRead more:\n\nReference of third party package management tools\nBlog post by golang team discussing the approach for implementing vendoring\n\nVendoring in Go 1.6\nVendoring has been released from experimental in go 1.6 (after this post was initially written) that makes the process of using specific tags / versions of packages using third party tools easier. go get does still not have the functionality to fetch specific tags or versions.\nMore about how vendoring works: Understanding and using the vendor folder\nModules in Go 1.11\nGo 1.11 has released an experimental features called modules to improve dependency management, they hope to release it as stable in Go 1.12: Information about modules in Go 1.11"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What I can do to resolve \"1 commit behind master\"?\n\nAfter pushing I've been seeing this message at remote repository:\n\n1 commit behind master.\nThis merge has conflicts that must be resolved before it can be committed.\nTo manually merge these changes into TA20footerLast run the following commands:\ngit checkout 7c891f50c557\nNote: This will create a detached head!\ngit merge remotes/origin/master"}, {"role": "assistant", "content": "Before you begin, if you are uncomfortable with a command line, you can do all the following steps using SourceTree, GitExtensions, GitHub Desktop, or your favorite tool.\nTo solve the issue, you might have two scenarios:\n\n1. Fix only remote repository branch which is behind commit\nExample: Both branches are on the remote side\nahead === Master branch\nbehind === Develop branch\nSolution:\n\nClone the repository to the local workspace: this will give you the Master branch, which is ahead with commit\ngit clone repositoryUrl\n\n\nCreate a branch with Develop name and checkout to that branch locally\ngit checkout -b DevelopBranchName // this command creates and checkout the branch\n\n\nPull from the remote Develop branch. Conflict might occur. if so, fix the\nconflict and commit the changes.\n git pull origin DevelopBranchName\n\n\nMerge the local Develop branch with the remote Develop branch\n  git merge origin develop\n\n\nPush the merged branch to the remote Develop branch\n  git push origin develop\n\n\n\n\n2. Local Master branch is behind the remote Master branch\nThis means every locally created branch is behind.\nBefore preceding, you have to commit or stash all the changes you made on the branch behind commits.\nSolution:\n\nCheckout your local Master branch\ngit checkout master\n\n\nPull from remote Master branch\ngit pull origin master\n\n\n\nNow your local Master is in sync with the remote branch. As a result of the above command, other local branches branched from the previous local Master branch are not in sync. To fix that:\n\nCheckout the branch that is behind your local Master branch\ngit checkout BranchNameBehindCommit\n\n\nMerge with the local Master branch\ngit merge master  // Now your branch is in sync with the local Master branch\n\n\n\nIf this branch is on the remote repository, you have to push your changes.\n    git push origin branchBehindCommit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to close off a Git Branch?\n\nI'm starting out using Git + GitHub.\nIn our distributed team, each member is creating their own branch for each issue/requirement they are allocated.\n\ngit branch Issue#1     <-- create this branch\ngit checkout issue#1   <-- switch over to this branch\n\nnow code code, commit, code, commit, etc...\nthen pull request, code-fixup, commit, code, commit .. etc.\nand finally the pull request is accepted.\nBut, now what?\nDoes the person who created the branch on their local dev machine need to close off the branch? A suggestion was for the dev person to delete the branch ( ... -D ...) and then do a pull / refresh of the master .. which then will get all their branch code."}, {"role": "assistant", "content": "We request that the developer asking for the pull request state that they would like the branch deleted. Most of the time this is the case. There are times when a branch is needed (e.g. copying the changes to another release branch).\nMy fingers have memorized our process:\ngit checkout <feature-branch>\ngit pull\ngit checkout <release-branch>\ngit pull\ngit merge --no-ff <feature-branch>\ngit push\ngit tag -a branch-<feature-branch> -m \"Merge <feature-branch> into <release-branch>\"\ngit push --tags\ngit branch -d <feature-branch>\ngit push origin :<feature-branch>\n\nA branch is for work. A tag marks a place in time. By tagging each branch merge we can resurrect a branch if that is needed. The branch tags have been used several times to review changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Pages site not detecting index.html [closed]\n\nClosed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 3 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI created a GitHub pages repository. For some reason when I name it\nhttps://[username].github.io, it doesn't work, but it works when I name it https://[username].github.io/index.html.\nWhy?"}, {"role": "assistant", "content": "It got fixed automatically. I just had to wait for a while for the settings to take effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting Github API token for Homebrew\n\nYou need to set HOMEBREW_GITHUB_API_TOKEN for homebrew to avoid rate limiting, but how do you add it to homebrew config?"}, {"role": "assistant", "content": "You create your API token on https://github.com/settings/tokens\nand then set the environment variable HOMEBREW_GITHUB_API_TOKEN to the value of your token.\nWhen creating the token, make sure that you only select the scopes you need. As pointed out in the answer by Chad, leaving all of the scopes unchecked is very reasonable!\nSetting the token is done using the export command. Example:\nexport HOMEBREW_GITHUB_API_TOKEN=xxxx\n\nTo make sure this is set whenever you open a terminal you can add this command to your ~/.brew_bashrc or ~/.bash_profile or any other file that is used during the initialisation of your shell file.\nFor future reference, this topic was discussed in the following two issues:\n\nhttps://github.com/mxcl/homebrew/issues/21023\nhttps://github.com/mxcl/homebrew/issues/21915"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing a local branch up to GitHub\n\nI have Git configured so that when I run git push, it pushes changes to my GitHub repo. Until now I have only had a master branch.\nHowever, I have now created a local branch and committed to it using: \ngit checkout -b my_new_branch\ngit commit\n\nWhat I would like to do now is push my changes on this branch to GitHub. Do I just do a git push?\nWhen I first set it up I did run:\ngit config push.default current"}, {"role": "assistant", "content": "I believe you're looking for git push origin my_new_branch, assuming your origin remote is configured to hit your github repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Found a swap file by the name\n\nWhen I try to merge my branch with a remote branch:\ngit merge feature/remote_branch\n\nI got this message:\nE325: ATTENTION\nFound a swap file by the name \".git/.MERGE_MSG.swp\"\n          owned by: xxxxxx   dated: Mon Nov 12 23:17:40 2012\n         file name: ~xxxxxx/Desktop/My-ios-App/.git/MERGE_MSG\n          modified: YES\n         user name: xxxxxx   host name: unknown-b8-8d-12-22-27-72.lan\n        process ID: 1639\nWhile opening file \".git/MERGE_MSG\"\n             dated: Tue Nov 13 14:06:48 2012\n      NEWER than swap file!\n\n(1) Another program may be editing the same file.\n    If this is the case, be careful not to end up with two\n    different instances of the same file when making changes.\n    Quit, or continue with caution.\n\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r .git/MERGE_MSG\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".git/.MERGE_MSG.swp\"\n    to avoid this message.\n\nSwap file \".git/.MERGE_MSG.swp\" already exists!\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:\n\nHow to deal with this?"}, {"role": "assistant", "content": "Looks like you have an open git commit or git merge going on, and an editor is still open editing the commit message.\nTwo choices:\n\nFind the session and finish it (preferable).\nDelete the .swp file (if you're sure the other git session has gone away).\n\nClarification from comments:\n\nThe session is the editing session.\nYou can see what .swp is being used by entering the command :sw within the editing session, but generally it's a hidden file in the same directory as the file you are using, with a .swp file suffix (i.e. ~/myfile.txt would be ~/.myfile.txt.swp)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to follow only specific issues on Github, instead of watching an entire project? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIs it possible to follow only specific issues on Github (instead of watching an entire project)? I'd like to get notifications by email when one specific issue changed (pull, state-change, new comments). Is this possible at all?"}, {"role": "assistant", "content": "As per pennstatephil's comment below, there's a SUBSCRIBE on the right pane at the bottom:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I merge another developer's branch into mine?\n\nI am relatively new to git. Our organization uses a Fork & Pull Model for managing changes to the master branch. Each developer forks the master and branches from their fork when adding new features. I keep an eye on commits that other developers are making in their own branches, and would sometimes like to merge these changes into my own branch. What steps do I take to accomplish this?"}, {"role": "assistant", "content": "You first need to add the other developer repository as a remote.\ngit remote add otherrep uriToOtherRep\n\nThen you fetch changes from there\ngit fetch otherrep\n\nAnd then you merge the branch from the remote repository into yours\ngit merge otherrep/branchname\n\nHappy merging!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What do raw.githubusercontent.com URLs represent?\n\nI want to learn how to use rawgit.com to serve other applications from github.com.\nSo we have a usual way to download and install homebrew on osx.\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nI can't find the install file on GitHub. Where is it?"}, {"role": "assistant", "content": "The raw.githubusercontent.com domain is used to serve unprocessed versions of files stored in GitHub repositories. If you browse to a file on GitHub and then click the Raw link, that's where you'll go.\nThe URL in your question references the install file in the master branch of the Homebrew/install repository. The rest of that command just retrieves the file and runs ruby on its contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way in git to obtain a push date for a given commit?\n\nI am wondering if there is a way to view a push date associated with each commit in the git log.  If that is not possible, is there a way to see all the commits under a certain push.\nI writing a program that needs to keep track of the commits as they are pushed.  Because the git log is ordered by the commit date, not the push date, I am not able to see the most recent commits that are pushed. For example, if a user commits to his local repository 2 days before he pushes to the master, that commit will be placed behind 2 days of other commits in the master repository log."}, {"role": "assistant", "content": "It took me an insanely long time to gather scattered information and finally find the very best answer to this question, but now I know I have it. In just two lines, no code and no hooks:\n# required for a bare repo\ngit config core.logAllRefUpdates true\n\ngit reflog --date=local master\n\nSimple at last.\nWarning: you probably want to override the default values of gc.reflogExpire and gc.reflogExpireUnreachable. Check git help reflog for details and to understand how and why this works.\nThe two commands above must be run inside the clone you push to. If that is not possible then an approximation is to run in another, permanent clone:\ngit fetch               origin        # often and *regularly*\ngit reflog --date=local origin/master\n\nNever delete this permanent clone or you will lose the dates."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Getting current branch and commit hash in GitHub action\n\nI want to build a docker image using a GitHub action, migrating from TeamCity.\nIn the build script, I want to tag the image with a combination of branch and commit, e.g. master.ad959de. Testing that locally, I get that information like this:\ngit_branch=`git symbolic-ref --short HEAD`\ngit_hash=`git rev-parse --short HEAD`\ndocker_version=${git_branch}.${git_hash}\n\nThis is the relevant part of the GitHub action:\nname: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Create docker image\n      run: ./docker-build.sh  \n\n\nRunning that script in that GitHub action results in this error:\nfatal: ref HEAD is not a symbolic ref\n\nHow can I generate a tag like that inside a GitHub action?"}, {"role": "assistant", "content": "from Using environment variables\ngithub provides two variables that are useful here, you'll need to process them a bit to get the values you desire:\n\nGITHUB_SHA: The commit SHA that triggered the workflow. For example, ffac537e6cbbf934b08745a378932722df287a53.\n\n\nGITHUB_REF: The branch or tag ref that triggered the workflow. For example, refs/heads/feature-branch-1. If neither a branch or tag is available for the event type, the variable will not exist.\n\nThe short values can be extracted like this:\ngit_hash=$(git rev-parse --short \"$GITHUB_SHA\")\ngit_branch=${GITHUB_REF#refs/heads/}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "CocoaPods and GitHub forks\n\nThis is my first time forking a GitHub project, and I'm not too competent with CocoaPods either, so please bear with me.\nBasically, I forked a project on GitHub using the following in my Podfile:\npod 'REActivityViewController', '~> 1.6.7', :git => 'https://github.com/<username>/REActivityViewController.git'\n\nI then made some changes to the fork, and of course when I did a pod install to install another pod it reinstalled the original REActivityViewController and erased my changes.\nI'm realizing I need to push my changes to my fork before another pod install, but how do I know it is the fork being installed, considering that this is a repo installed by CocoaPods? I looked in the REActivityViewController folder installed under the Pods folder and there aren't any git files. \nDo I need to work on my fork outside of my project and then use CocoaPods to install the changes? That's too cumbersome of a workflow. \nOr do I need to do something with submodules?"}, {"role": "assistant", "content": "I will answer this question using an example. I have a fork of TTTAttributedLabel with some extra functionality I added here:\n\nhttps://github.com/getaaron/TTTAttributedLabel\n\nIn order to use this in a Cocoapods project, I:\n\nPush my changes to my fork\nConfigure my Podfile to get the changes & update\n\nOnce you've pushed your changes to your fork, get the SHA of your last commit.  You can do this using git rev-parse origin/master | pbcopy or on the GitHub commits page for your project:\n\nThen, you can specify the specific commit on your fork in your Podfile like this:\npod 'TTTAttributedLabel', :git => 'https://github.com/getaaron/TTTAttributedLabel.git', :commit => 'd358791c7f593d6ea7d6f8c2cac2cf8fae582bc1'\n\nAfter that, pod update will update this particular commit from your fork.  If you want, you can also make a podspec for your fork, but I find this approach simpler and I don't make changes frequently enough to justify a new workflow.\n\nDo I need to work on my fork outside of my project and then use Cocoapods to install the changes? That's way to cumbersome of a workflow.\n\nYou can do it this way, but I usually:\n\nEdit the code inside my project and make sure it works\nCopy the changes over to my fork, by\n\n\nexporting a patch, or\ncopying over the entire source code file\n\nCommit & push to GitHub\nUpdate the Podfile with the new SHA\nRun pod update.\n\n\nOr do I need to do something with submodules?\n\nNo, you don't need to."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where can I see my pull requests on GitHub?\n\nIs there a way to view on GitHub:\n\nAll my pull requests\nMy open pull requests\n\nThe only place where I usually see that is in my Contribution Activity, which unfortunately does not go further than 1 month ago."}, {"role": "assistant", "content": "On the main homepage (not your userpage) there is a bar at the top with four buttons:\nNews Feed    Pull Requests    Issues    Stars\n\nClick Pull Requests. \nThis home page can be accessed by clicking the octocat logo in the top-left, whereas your userpage is accessed by clicking your username in the top-right.\nIt should look like this:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reuse portion of github action across jobs\n\nI have a workflow for CI in a monorepo, for this workflow two projects end up being built. The jobs run fine, however, I'm wondering if there is a way to remove the duplication in this workflow.yml file with the setting up of the runner for the job. I have them split so they run in parallel as they do not rely on one another and to be faster to complete. It's a big time difference in 5 minutes vs. 10+ when waiting for the CI to finish.\njobs:\n  job1:\n    name: PT.W Build\n    runs-on: macos-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v1\n\n      - name: Setup SSH-Agent\n        uses: webfactory/[email\u00a0protected]\n        with:\n          ssh-private-key: |\n            ${{ secrets.SSH_PRIVATE_KEY }}\n\n      - name: Setup JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: Setup Permobil-Client\n        run: |\n          echo no | npm i -g nativescript\n          tns usage-reporting disable\n          tns error-reporting disable\n          npm run setup.all\n\n      - name: Build PT.W Android\n        run: |\n          cd apps/wear/pushtracker\n          tns build android --env.uglify\n\n  job2:\n    name: SD.W Build\n    runs-on: macos-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v1\n\n      - name: Setup SSH-Agent\n        uses: webfactory/[email\u00a0protected]\n        with:\n          ssh-private-key: |\n            ${{ secrets.SSH_PRIVATE_KEY }}\n\n      - name: Setup JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: Setup Permobil-Client\n        run: |\n          echo no | npm i -g nativescript\n          tns usage-reporting disable\n          tns error-reporting disable\n          npm run setup.all\n\n      - name: Build SD.W Android\n        run: |\n          cd apps/wear/smartdrive\n          tns build android --env.uglify\n\nYou can see here the jobs have almost an identical process, it's just the building of the different apps themselves. I'm wondering if there is a way to take the duplicate blocks in the jobs and create a way to only write that once and reuse it in both jobs."}, {"role": "assistant", "content": "There are 3 main approaches for code reusing in GitHub Actions:\n\nReusable Workflows\nDispatched workflows\nComposite Actions <-- it's the best one in your case\n\nThe following details are from my article describing their pros and cons:\n\ud83d\udd38 Reusing workflows\nThe obvious option is using the \"Reusable workflows\" feature that allows you to extract some steps into a separate \"reusable\" workflow and call this workflow as a job in other workflows.\n\ud83e\udd61 Takeaways:\n\nNested reusable workflow calls are allowed (up to 4 levels) while loops are not permitted.\nEnv variables are not inherited. Secrets can be inherited by using special secrets: inherit job param.\nIt's not convenient if you need to extract and reuse several steps inside one job.\nSince it runs as a separate job, you have to use build artifacts to share files between a reusable workflow and your main workflow.\nYou can call a reusable workflow in synchronous or asynchronous manner (managing it by jobs ordering using needs keys).\nA reusable workflow can define outputs that extract outputs/outcomes from executed steps. They can be easily used to pass data to the \"main\" workflow.\n\n\ud83d\udd38 Dispatched workflows\nAnother possibility that GitHub gives us is workflow_dispatch event that can trigger a workflow run. Simply put, you can trigger a workflow manually or through GitHub API and provide its inputs.\nThere are actions available on the Marketplace which allow you to trigger a \"dispatched\" workflow as a step of \"main\" workflow.\nSome of them also allow doing it in a synchronous manner (wait until dispatched workflow is finished). It is worth to say that this feature is implemented by polling statuses of repo workflows which is not very reliable, especially in a concurrent environment. Also, it is bounded by GitHub API usage limits and therefore has a delay in finding out a status of dispatched workflow.\n\ud83e\udd61 Takeaways\n\nYou can have multiple nested calls, triggering a workflow from another triggered workflow. If done careless, can lead to an infinite loop.\nYou need a special token with \"workflows\" permission; your usual secrets.GITHUB_TOKEN doesn't allow you to dispatch a workflow.\nYou can trigger multiple dispatched workflows inside one job.\nThere is no easy way to get some data back from dispatched workflows to the main one.\nWorks better in \"fire and forget\" scenario. Waiting for a finish of dispatched workflow has some limitations.\nYou can observe dispatched workflows runs and cancel them manually.\n\n\ud83d\udd38 Composite Actions\nIn this approach we extract steps to a distinct composite action, that can be located in the same or separate repository.\nFrom your \"main\" workflow it looks like a usual action (a single step), but internally it consists of multiple steps each of which can call own actions.\n\ud83e\udd61 Takeaways:\n\nSupports nesting: each step of a composite action can use another composite action.\nBad visualisation of internal steps run: in the \"main\" workflow it's displayed as a usual step run. In raw logs you can find details of internal steps execution, but it doesn't look very friendly.\nShares environment variables with a parent job, but doesn't share secrets, which should be passed explicitly via inputs.\nSupports inputs and outputs. Outputs are prepared from outputs/outcomes of internal steps and can be easily used  to pass data from composite action to the \"main\" workflow.\nA composite action runs inside the job of the \"main\" workflow. Since they share a common file system, there is no need to use build artifacts to transfer files from the composite action to the \"main\" workflow.\nYou can't use continue-on-error option inside a composite action."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Referencing current branch in github readme.md\n\nIn my github repo's readme.md file I have a Travis-CI badge. I use the following link:\nhttps://travis-ci.org/joegattnet/joegattnet_v3.png?branch=staging\n\nThe obvious problem is that the branch is hardcoded. Is it possible to use some sort of variable so that the branch is the one currently being viewed?"}, {"role": "assistant", "content": "Not that I know of.\nGitHub support confirms (through OP Joe Gatt 's comment)\n\nThe only way to do this would be to pass the link through my own service which would use the github's http referrer header to determine which branch is being referenced and then fetch the appropriate image from Travis CI\n\nI would rather make one Travis-CI badge per branch, for the reader to choose or consider the appropriate when seeing the README.md.\n\nUpdate 2016 (3 years later): while nothing has changed on the GitHub side, fedorqui reports in the workaround mentioned in \"Get Travis Shield on Github to Reflect Selected Branch Status\" by Andrie.\nSimply display all the branches and their respective TravisCI badges.\nIf you have only two or three branches, that could be enough."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: How can I close the two issues with commit message?\n\nI try \ngit commit -m \"example of coding - close #1 close #2\" \ngit push origin develop\n\nbut it only close #1 issue. How can I close two or more issues with commit message?"}, {"role": "assistant", "content": "You can use any of these keywords to close an issue via commit message:\nclose, closes, closed, fix, fixes, fixed, resolve, resolves, resolved\n\nThe message MUST contain a string matching the following pattern: KEYWORD #ISSUE. For example: close #1.\n\nHow can I close two or more issues with commit message?\n\nYou can use comma separated list in the commit message for it.\nSee this link for more information.\n\nIt is also possible to close several issues in the same commit: just repeat several time the pattern to close issues. For example, the following commit message: add new quick sort algorithm, fixes #4, resolve #6, closed #12 would close, the issues 4, 6 & 12 of the project on which the commit would occur.\n\nYou can try:\ngit commit -m \"closes #1, closes #2, closes #3; YOUR COMMIT MESSAGE\"\n\nEDIT:\nAdding a link from docs.github.com.\n\nYou can link a pull request to an issue by using a supported keyword\nin the pull request's description or in a commit message (please note\nthat the pull request must be on the default branch).\n\n\nclose, closes, closed, fix, fixes, fixed, resolve, resolves  resolved"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to commit a manually deleted file? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nDelete files from git index when they are already deleted from fs\n\n                                (7 answers)\n                            \n\n\nStaging Deleted files\n\n                                (10 answers)\n                            \n\nClosed 11 years ago.\n\n\n\nIn my git repository I manually deleted a file(rm) after moving it to another folder. I than committed all the changes to my repo but now when I do git status .\nronnie@ronnie:/home/github/Vimfiles/Vim$ git status .\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add/rm <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       deleted:    plugin/dwm.vim\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nNow, how should I commit so that dwm.vim is deleted from the plugin folder in my remote repo. I know that I have to use git add && git commit but I have no file to commit/add because /plugin/dwm.vim is already deleted."}, {"role": "assistant", "content": "The answer's here, I think.\nIt's better if you do git rm <fileName>, though."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deleting remote master branch, refused due to being the current branch\n\nHow do I delete a remote master branch from GitHub/Bitbucket?\nI'm trying:\n# git push bb --delete master\nremote: bb/acl: user is allowed. accepted payload.[K\nremote: error: refusing to delete the current branch: refs/heads/master[K\nTo ssh://[email\u00a0protected]/user/reponame.git\n ! [remote rejected] master (deletion of the current branch prohibited)\nerror: failed to push some refs to 'ssh://[email\u00a0protected]/user/reponame.git' \n\nAlso I tried\ngit push bb :master\n\nBut all this does not work."}, {"role": "assistant", "content": "Note: for Bitbucket, you would change the default branch by accessing the settings of your repository, and changing the branch at the  \"Main branch\" combo box.\n\nOnce the main branch is no longer master, then you can push and remove master.\nMarsAndBack confirms in the comments this applies to GitHub as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deleting Files using Git/GitHub\n\nFirst off, I'm new to Git.\nI deleted a bunch of files locally on my Mac using Finder. I want the files that I deleted to no longer show in the current branch, but they do. \nAny Git users know a command to update the index?"}, {"role": "assistant", "content": "I think this would be a simpler way to do what you want:\ngit add . -A \n\nThen you would just do:\ngit commit -m \"removed some files\"\n\nAs noted above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to rollback the two previous commits?\n\nConsider this scenario:\n\nDeveloper A does a commit: #n\nDev. B does commit #n+1\nDev. A does commit #n+2\nand commit #n+3\n\nand then discovers that in his commit #n+2 he introduced a defect.\nHow can dev. A rollback his last 2 commits and continue developing on commit #n+1?\nTried git reset --hard HEAD~2*, but it's coming back to dev A's commit #n."}, {"role": "assistant", "content": "It should come back to the n+1 commit. You probably have a merge commit in there as well. You can also do a git reset --hard <sha1_of_where_you_want_to_be>\n\nWARNING!! --hard means that any uncommitted changes you currently have\n  will be thrown away permanently."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are dependent pull requests in GitHub possible?\n\nCurrently I am working on a really big pull request. In order to keep code reviews somehow manageable, the idea was to split the complete pull request into isolated parts which, however, depend on each other.\nAn example would be:\n\nPull request\u00a01: Create interfaces: Interface A\u00a0& B and restructure code.\nPull request\u00a02: Interface\u00a0A implementation and Tests (depends on pull request\u00a01).\nPull request\u00a03: Interface\u00a0B implementation and Tests (depends on pull request\u00a02).\nPull request\u00a04: Mixed test of Implementations (depends on 2\u00a0+ 3).\n\nIs there a way in GitHub to file all four pull requests at the same time reflecting the dependencies?"}, {"role": "assistant", "content": "Update 2022: While GitHub still has no native support for dependent/stacked pull requests, a few tools now exist that make it easier to manage a GitHub-friendly hierarchy of branches. My favorite is ghstack, which takes a stack of commits and turns each one into its own branch that GitHub can understand without losing PR history. You can then edit, reorder, split, and drop commits using interactive rebase and the PRs will be updated accordingly.\n\nAs far as I can see, this is impossible, and in my opinion it's one of the major downsides of GitHub compared with other code review tools. Gerrit automatically sets up dependent code reviews when you push commits that depend on each other, and in Phabricator it's more of a pain, but still possible.\nIt's also good to keep in mind that there multiple ways that people use GitHub PRs. The normal open source collaboration way is to fork a repo and submit a cross-repo pull request, but in other cases (e.g. within an organization), you might submit pull requests for diffs all within the same repository. I think within a single repository it's more reasonable to get something along the lines of dependent pull requests, since you can set up the commit/branch structure within that repo.\nHere's a blog post that describes how to get some advantages of dependent pull requests, which I think requires all commits to be in the same repo:\nhttp://graysonkoonce.com/stacked-pull-requests-keeping-github-diffs-small/\nA summary:\n\nTo submit 5 dependent pull requests, create a 5-level-deep branch hierarchy and submit each PR as as that branch based on the previous branch.\nTo update review 2 of 5, push an update to branch 2, then do 3 merge operations to integrate the changes into reviews 3, 4, and 5.\nYou need to land all changes at once, since GitHub doesn't support updating the target branch of PRs. In the example, all 5 code reviews were landed as a single commit. GitHub now supports updating the base branch of a PR, so the PRs can be landed one at a time.\n\nThat approach seems to work ok for giant changes that are best reviewed in smaller pieces (although maintaining an n-level-deep branch hierarchy is a pain compared with something like git rebase -i), but it doesn't really allow for a \"code review pipeline\" where you can have dependent diffs in different stages of review and can land earlier ones as they're reviewed.\nSome other internet resources that seem to also call out the limitation:\nhttps://www.quora.com/Is-there-a-good-system-for-adding-multiple-pull-requests-to-GitHub\nhttps://muffinresearch.co.uk/how-do-you-deal-with-dependent-branches-on-github/\nMy understanding is that people using GitHub PRs generally just try to structure their workflow to not rely on dependent code reviews. Some examples:\n\nInstead of breaking up a change into independently-reviewable incremental steps, submit it as a monolithic code review that will land all at once. GitHub still lets you split code reviews up into multiple commits that the reviewer can view, but they can't be approved/landed independently.\nTry to structure your work so you make changes in unrelated parts of the code, and put them on independent branches that you can use to submit independent PRs. You can still keep a local branch with all changes applied using cherry-picking or other approaches.\nIf you have a change that depends on an outstanding PR, simply wait for the PR to get accepted and merged before submitting the new PR. You could mention somewhere that you have another PR that depends on that one, and maybe that will motivate the code reviewer to get to that one earlier."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub SSH Config: \"Bad configuration option: IdentifyFile\" [closed]\n\nClosed. This question is not reproducible or was caused by typos. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question was caused by a typo or a problem that can no longer be reproduced. While similar questions may be on-topic here, this one was resolved in a way less likely to help future readers.\n\n\nClosed 2 years ago.\n\n\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm trying to create a .ssh/config file for multiple SSH accounts (specifically for github.com).  I've tried several tutorials and github help walk-throughs but nothing seems to work.\nI created a id_rsa_test and id_rsa_test.pub.  I uploaded id_rsa_test.pub to github.\nI then created a ~/.ssh/config file with the following:\n# github account\nHost github.com-test github.com\n    Hostname github.com\n    User git \n    IdentifyFile ~/.ssh/id_rsa_test\n\nand\n# github account\nHost github.com-test github.com\n    Hostname github.com\n    User git \n    IdentifyFile ~/.ssh/id_rsa_test.pub\n\nI then try several commands.  i.e.:\ngit clone git@github-test:username/my_project.git\n\ngit push\n\n...everytime I get the following error:\n/home/username/.ssh/config: line 5: Bad configuration option: IdentifyFile\n/home/username/.ssh/config: terminating, 1 bad configuration options\nfatal: The remote end hung up unexpectedly\n\nAny suggestions?"}, {"role": "assistant", "content": "It is IdentityFile with a 't', not IdentifyFile."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get the output of a specific step in GitHub Actions?\n\nI have this GitHub Actions workflow which runs tests, but now I am integrating slack notification in it. I want to get the output of the Run tests step and send it as a message in the slack step.\n  - name: Run tests\n    run: |\n      mix compile --warnings-as-errors\n      mix format --check-formatted\n      mix ecto.create\n      mix ecto.migrate\n      mix test\n    env:\n      MIX_ENV: test\n      PGHOST: localhost\n      PGUSER: postgres\n\n  - name: Slack Notification\n    uses: rtCamp/action-slack-notify@master\n    env:\n      SLACK_MESSAGE: Run tests output\n      SLACK_TITLE: CI Test Suite\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}"}, {"role": "assistant", "content": "You need to do 3 things:\n\nAdd an id to the step you want the output from\nCreate the outputs using the GITHUB_OUTPUT environment variable\nUse the id and the output name in another step to get the outputs and then join them into one message for slack\n\n- name: Run tests\n  run: |\n    echo \"mix-compile--warnings-as-errors=$(mix compile --warnings-as-errors)\\n\" >> $GITHUB_OUTPUT\n    echo \"mix-format--check-formatted=$(mix format --check-formatted)\\n\" >> $GITHUB_OUTPUT\n    echo \"mix-ecto_create=$(mix ecto.create)\\n\" >> $GITHUB_OUTPUT\n    echo \"mix-ecto_migrate=$(mix ecto.migrate)\\n\" >> $GITHUB_OUTPUT\n    echo \"mix-test=$(mix test)\\n\" >> $GITHUB_OUTPUT\n  id: run_tests\n  env:\n    MIX_ENV: test\n    PGHOST: localhost\n    PGUSER: postgres\n\n- name: Slack Notification\n  uses: rtCamp/action-slack-notify@v2\n  env:\n    SLACK_MESSAGE: ${{join(steps.run_tests.outputs.*, '\\n')}}\n    SLACK_TITLE: CI Test Suite\n    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n\nSee Metadata Syntax for outputs name description"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can you see who is watching a repo on GitHub?\n\nIt looks like there is an API call to view the users that watch a repo from [GithubDeveloper]:(https://developer.github.com/v3/activity/watching/#list-watchers)\nList watchers\nGET /repos/:owner/:repo/subscribers\n\nIs there any way to see this list on the site? \nAm I interpreting the API correctly? Is watching equal to subscribing?"}, {"role": "assistant", "content": "When on a repo's page, you'll see links on the right side in the \"About\" column that give you this information:\n\nOr go to this URL directly:\nhttps://github.com/{user}/{project}/watchers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I embed a single file from a GitHub gist with the new gist interface?\n\nThe new GitHub Gist interface has one embed snippet for the entire gist which embeds all files in the gist. The old interface had embed code for each file in the gist. Anyone know if there's a trick to embed a single file?"}, {"role": "assistant", "content": "Take the gist URL from the left-hand side and after the .js add a query string like ?file=myFile.blah, e.g.\n<script src=\"https://gist.github.com/4505639.js?file=macroBuild.scala\" type=\"text/javascript\"></script>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to integrate UML diagrams into GitLab or GitHub\n\nI want to publish some programming documentation I have in a public available repository. This documentation has formatted text, some UML diagrams, and a lot of code examples. I think that GitHub or GitLab are good places to publish this.\nTo publish the UML diagrams, I would like to have some easy way to keep them updated into the repository and visible as images in the wiki. I don't want to keep the diagrams in my computer (or on the cloud), edit them, generate an image, and then publish it every time.\nIs there a way to put the diagrams in the repository (in PlantUML syntax would be ideal), link them in the markdown text, and make the images auto-update every time the diagram is updated?"}, {"role": "assistant", "content": "Edit: Alternative with Proxy service\nThis way is significantly different and simpler than the answer below; it uses the PlantUML proxy service:\nhttp://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.github.com/plantuml/plantuml-server/master/src/main/webapp/resource/test2diagrams.txt\n\nThe GitHub markdown for this would be:\n![alternative text](http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.github.com/plantuml/plantuml-server/master/src/main/webapp/resource/test2diagrams.txt)\n\nThis method suffers from not being able to specify the SVG format (it defaults to PNG), and it is perhaps not possible to work-around the caching bug mentioned in the comments.\n\nAfter trying the other answer, I discovered the service to be slow and seemingly not up to the latest version of PlantUML.\nI've found a different way that's not quite as straightforward, but it works via  PlantUML.com's server (in the cloud). As such, it should work anywhere you can hotlink to an image.\nIt exploits the !includeurl function and is essentially an indirection. The markdown file links to a PlantUML source that includes the diagram's source. This method allows modifying the source in GitHub, and any images in the GitHub markdown files will automatically update. But it requires a tricky step to create the URL to the indirection.\n\n\nGet the URL to the raw PlantUML source, e.g., https://raw.githubusercontent.com/linux-china/plantuml-gist/master/src/main/uml/plantuml_gist.puml (using the example in the joanq's answer)\n\nGo to http://plantuml.com/plantuml/form (or PlantText.com) and create a one-line PlantUML source that uses the !includeurl URL-TO-RAW-PLANTUML-SOURCE-ON-GITHUB operation. Continuing with the example URL, the PlantUML (meta)source is:\n!includeurl https://raw.githubusercontent.com/linux-china/plantuml-gist/master/src/main/uml/plantuml_gist.puml\n\n\nCopy the image URL from PlantUML.com's image, e.g., http://plantuml.com:80/plantuml/png/FSfB2e0m303Hg-W1RFPUHceiDf36aWzwVEl6tOEPcGGvZXBAKtNljW9eljD9NcCFAugNU15FU3LWadWMh2GPEcVnQBoSP0ujcnS5KnmaWH7-O_kEr8TU and paste it into your GitHub markdown file. This URL won't change.\n![PlantUML model](http://plantuml.com:80/plantuml/png/3SNB4K8n2030LhI0XBlTy0YQpF394D2nUztBtfUHrE0AkStCVHu0WP_-MZdhgiD1RicMdLpXMJCK3TC3o2iEDwHSxvNVjWNDE43nv3zt731SSLbJ7onzbyeF)\n\n\n\nBonus: You can even get access to the SVG format by modifying the plantuml/png/ part of the URL to be plantuml/svg/ as follows\n![PlantUML model](http://plantuml.com:80/plantuml/svg/3SNB4K8n2030LhI0XBlTy0YQpF394D2nUztBtfUHrE0AkStCVHu0WP_-MZdhgiD1RicMdLpXMJCK3TC3o2iEDwHSxvNVjWNDE43nv3zt731SSLbJ7onzbyeF)\n\nExample on GitHub\nhttps://github.com/fuhrmanator/course-activity-planner/blob/master/ooad/overview.md\nCaveat with private repos\nAs davidbak pointed out in a comment, the raw file in a private repo will have a URL with token=<LONGSTRINGHERE> in it, and this token changes as the source file updates. Unfortunately, the markdown breaks when this happens, so you have to update the Readme file after you commit the file to GitHub, which is not a great solution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Install Gem from Github Branch?\n\nIn my gemfile I have this:\ngem \"authlogic\", git: \"git://github.com/odorcicd/authlogic.git\", branch: \"rails3\"\n\nHow do I install that as a gem so I can test it?"}, {"role": "assistant", "content": "You don't need to build the gem locally. In your gemfile you can specify a github source with a ref, branch or tag.\ngem 'rails', git: 'git://github.com/rails/rails.git', ref: '4aded'\ngem 'rails', git: 'git://github.com/rails/rails.git', branch: '2-3-stable'\ngem 'rails', git: 'git://github.com/rails/rails.git', tag: 'v2.3.5'\n\nThen you run bundle install or the short form is just bundle.\nRead more about it here: http://bundler.io/man/gemfile.5.html#GIT\nUpdate: There's a github source identifier.\ngem 'country_select', github: 'stefanpenner/country_select'\n\nHowever, they warn against using it: NOTE: This shorthand should be avoided until Bundler 2.0, since it currently expands to an insecure git:// URL. This allows a man-in-the-middle attacker to compromise your system.\nAfter Bundler 2.0, you can get around the above issue with this statement near the top of the Gemfile:\ngit_source(:github) { |repo| \"https://github.com/#{repo}.git\" }"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to link files directly from Github (raw.github.com)\n\nAre we allowed to link files directly from Github ?\n<link rel=\"stylesheet\" href=\"https://raw.github.com/username/project/master/style.css\"/>\n<script src=\"https://raw.github.com/username/project/master/script.js\"></script>\n\nI know this is allowed on Google Code. This way I don't have to worry about updating a local file."}, {"role": "assistant", "content": "The great service RawGit was already mentioned, but I'll throw another into the ring: GitCDN.link\nBenefits:\n\nLets you link to specific commits, as well as auto-get the latest (aka master)\nIncurs no damage from high traffic volumes; RawGit asks that it's dev.rawgit.com links be only used during development, where as GitCDN give you access to the latest version, without the danger of the servers exploding\nGive you the option of auto minifying your HTML, CSS and JavaScript, or serving it as written (https://min.gitcdn.link).\nAdds compression (GZip)\nAdds all the correct headers (Content-Type, cache-control, e-tag, etc)\n\nFull disclosure, I'm a project maintainer at GitCDN.link\nThis service has been shuttered due to Heroku's policy change to remove all free tiers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I perform a `git pull` without re-entering my SSH password?\n\nIs it possible to configure git/ssh so I don't have to enter my passphrase every time I want to perform a git pull?   Note that the repo is a private one on github.\nOr, alternatively, what would be the best practice to automate code deployment from a private Github repo?\nAdditional details: EC2 instance running a public AMI based on Fedora."}, {"role": "assistant", "content": "Have a look at this link https://help.github.com/articles/working-with-ssh-key-passphrases/\n\nBut I don\u2019t want to enter a long passphrase every time I use the key!\nNeither do I! Thankfully, there\u2019s a nifty little tool called\n  ssh-agent that can save your passphrase securely so you don\u2019t have\n  to re-enter it. If you\u2019re on OSX Leopard or later your keys can be\n  saved in the system\u2019s keychain to make your life even easier. Most\n  linux installations will automatically start ssh-agent for you when\n  you log in."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I edit two files then make one commit using GitHub Web-based editor?\n\nGitHub has the nice feature of Web-based file editing. However, it seems that after editing one file I have to commit the changes for this file before continuing. Is there a way I can edit two or more files then make one commit for all the changes of them? \nI think this would be better since too many unnecessary commits are annoying."}, {"role": "assistant", "content": "There is a web-based workaround:\n\nCreate a temporary branch, switch to it;\nEdit multiple files, commit each file separately;\nMake pull request;\nUnder Merge pull request button, choose Squash and merge (if the repo allows it), then confirm merge;\nDelete temporary branch.\n\nI use this method on a PC which I don't want to install git on."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "error: cannot lock ref.. 'refs/tags' exists; cannot create 'refs/tags/\n\nI'm getting a strange \"cannot lock ref\" error when trying to pull changes from github.  I've tried git gc, and looked around for similar errors but can't find a solution.\n> git pull\nerror: cannot lock ref 'refs/tags/v2.8': 'refs/tags' exists; cannot create 'refs/tags/v2.8'\nFrom github.com:k3it/qsorder\n ! [new tag]         v2.8       -> v2.8  (unable to update local ref)\nerror: cannot lock ref 'refs/tags/v2.9': 'refs/tags' exists; cannot create 'refs/tags/v2.9'\n ! [new tag]         v2.9       -> v2.9  (unable to update local ref)"}, {"role": "assistant", "content": "Your Git is complaining that a reference (rather than a directory) named refs/tags exists.  It's not clear what would create that, but see if git rev-parse refs/tags produces a hash ID.  If so, that reference needs to go away:\ngit update-ref -d refs/tags\n\nafter which git fetch should work.\nIf git rev-parse refs/tags fails (which it should\u2014refs/tags itself should not be a valid name) then this is not the problem and it's not clear what the actual problem is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to revert 2 files that are stubbornly stuck at \"Changed but not committed\"?\n\nI have a repo that has two files that supposedly I changed locally.\nSo I'm stuck with this:\n$ git status\n# On branch master\n# Changed but not updated:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   dir1/foo.aspx\n#       modified:   dir2/foo.aspx\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nDoing git diff says that the entire file contents have changed, even though from eyeballing it that seems untrue (there seem to be common line ranges that diff seems to be failing to see).\nInterestingly I don't remember changing these files locally. This repo is used with one remote repo (private, at GitHub.com, FWIW).\nNo matter what I've tried, I can't discard these local changes. I have tried all of:\n$ git checkout -- .\n$ git checkout -f\n$ git checkout -- dir1/checkout_receipt.aspx\n$ git reset --hard HEAD\n$ git stash save --keep-index && git stash drop\n$ git checkout-index -a -f\n\nIn other words I've tried everything described in How do I discard unstaged changes in Git? plus more. But the 2 files remain stuck as \"changed but not committed\".\nWhat the heck would cause two files to be stuck like this and seemingly \"un-revert-table\"??\nP.S. In the list above showing commands I'd already tried, I mistakenly wrote git revert when I meant git checkout. I'm sorry and thank you to those of you who answered that I should try checkout. I edited the question to correct it. I definitely did already try checkout."}, {"role": "assistant", "content": "I spent hours trying to solve a similar issue - a remote branch that I had checked out, which stubbornly showed four files as 'Changed but not updated', even when deleting all files and running git checkout -f again (or other variations from this post)!\nThese four files were necessary, but certainly hadn't been modified by me. My final solution - persuade Git that they had not been changed. The following works for all checked out files, showing 'modified' status - make sure you have already committed/stashed any that have really been modified!:\ngit ls-files -m | xargs -i git update-index --assume-unchanged \"{}\"\n\nOn Mac OSX, however xargs operates a little bit different (thx Daniel for the comment):\ngit ls-files -m | xargs -I {} git update-index --assume-unchanged {}\n\nI've added this as a placeholder for myself for next time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to sync with a remote Git repository?\n\nI forked a project on github, made some changes, so far so good.\nIn the meantime, the repository I forked from changed and I would like to get those changes into my repository. How do I do that ?"}, {"role": "assistant", "content": "Generally git pull is enough, but I'm not sure what layout you have chosen (or has github chosen for you)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "I can't delete a remote master branch on git\n\nI need to delete a master branch, but it's proving to be hard.  I just want to clean that branch out and start new.  I am deleting from the dev branch.  I want master on GitHub to be clean.\n # git push origin --delete master\n\n> To https://github.com/mymasterb.git  ! [remote rejected] master\n> (deletion of the current branch prohibited) error: failed to push some\n> refs to 'https://github.com/mymaster.git'\n\nHow do I quite simply start my master with a fresh slate?"}, {"role": "assistant", "content": "As explained in \"Deleting your master branch\" by Matthew Brett, you need to change your GitHub repo default branch.\n\nYou need to go to the GitHub page for your forked repository, and click on the \u201cSettings\u201d button.\nClick on the \"Branches\" tab on the left hand side. There\u2019s a \u201cDefault branch\u201d dropdown list near the top of the screen. \nFrom there, select placeholder (where placeholder is the dummy name for your new default branch).\nConfirm that you want to change your default branch.\nNow you can do (from the command line):\n\ngit push origin :master\n\nOr, since 2012, you can delete that same branch directly on GitHub:\n\nThat was announced in Sept. 2013, a year after I initially wrote that answer.\n\nFor small changes like documentation fixes, typos, or if you\u2019re just a walking software compiler, you can get a lot done in your browser without needing to clone the entire repository to your computer.\n\n\nNote: for BitBucket, Tum reports in the comments:\n\nAbout the same for Bitbucket\nRepo -> Settings -> Repository details -> Main branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see all the projects I'm watching on github?\n\nIs there a way to see a list of all projects I'm watching and maybe unwatch some in bulk?"}, {"role": "assistant", "content": "Make sure you're logged in and go to https://github.com/watching\nProfit! ;-)\n\nMore information about this and related features can be in the official announcement"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Update my github repo which is forked out from another project [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nPull new updates from original GitHub repository into forked GitHub repository\n\n                                (8 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI have forked out a Parent: project to Child: this. Now, I want to update my child with parents current updates. Can I do that, if yes how?\nWhen I update my github repo, then I can do a \"git pull\" to update my local repo."}, {"role": "assistant", "content": "In your local clone of Child, pull from Parent, adding it as a remote if you like:\ncd child\ngit remote add parent <parent-url>\ngit pull parent\n\nThe url of the parent could be the public github repo, or your local clone of it - the local clone will of course be faster. If you want to pull a branch other than the current HEAD of the parent repo, just add an argument (e.g. git pull parent topic-branch). If this is a one-time thing, you can just skip adding the remote: git pull <parent-url> [branch].\nPulling is a combination of fetching and merging, so once you've done that, you've got a new merge commit you'll presumably want to push back to your public repo at some point.\nThe key point here, in case it's not clear, is that pulling from the parent (upstream) repository is not  different from pulling from your public clone of child, your current repository. Either way, you're fetching from a repository with some common history, and merging that into your current branch. And of course, since you're merging, a work tree is required - so this is something that must be done in your local repo. The repo hosted on github is essentially a way of publishing what you've done locally. All you can really do with it is push/pull, and browse what's there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how do I correctly paste multi-line xml snippet to github wiki when using markdown\n\nI am trying to create a github wiki for my project. But I am unable to format a snippet from a Spring beans xml file, into this wiki. What is the proper way to do it? I tried using pre tag, code tag, the multiline code tag etc. But either it is not getting displayed at all or It displays everything in the same line."}, {"role": "assistant", "content": "not 100% sure if this is the same thing or not, but I just setup some xml snippets in my readme.md and used the\n<myxml>\n   <someElement />  \n</myxml>\n\nnotation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trigger Github Actions only when PR is merged\n\nI have a github actions yaml file as follows:\nname: Test deployment\non:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n    - name: Random name\n      run: date\n\n\nWhen I raise a PR from a branch to master branch, Github Action gets triggered. So, I updated my YAML to:\nname: Test deployment\non:\n  pull_request:\n    types:\n    - closed\n    branches:\n    - master\n\n\nNow it is triggered when I merge the PR rather than while raising it. But it also gets triggered when I close the PR without merging it.\nI found nothing like merged type in docs\nEven the following syntax i tried does not work as expected:\njobs:\n  ...\n    if: github.event_name == 'pull_request' && github.event.action == 'closed'\n\nCan anyone pls help me out here?\nIs it possible for me to check if the PR is approved by atleast one reviewer? (I can enable branch protection, but wanted to know if any option exists for doing it in github actions)"}, {"role": "assistant", "content": "There is no pull-request-merged event.\nThe closest thing you can get is to subscribe to push event, since a merged PR will always create a push event to the branch it's being merged onto.\nIf you only care about PRs to master then you can specify that:\non:\n  push:\n    branches:\n      - master\n\nThe other thing you can do is filter on each step individually\n      - name: Do something\n        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true\n        run: ...\n\n(Edit, as of 2022)\nPer the GitHub docs, this should be possible now via:\non:\n  pull_request:\n    types:\n      - closed\n\njobs:\n  if_merged:\n    if: github.event.pull_request.merged == true\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo The PR was merged"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github pull request - Waiting for status to be reported\n\nI have a pull request, build passed on VSTS, but another check \"Expected - Waiting for status to be reported\" never succeeds, no matter how many times I try to trigger build. I had many other pull requests with no issues.\nI am not sure how to tackle this problem, how to debug this? There is no specific info than this:\n\nWhere should I check first to resolve this?"}, {"role": "assistant", "content": "This can happen sometimes, what you can do is to push an empty commit to the branch of the PR. It will re-trigger all the checks you have in CI. This can be done using git command.\ngit commit --amend --no-edit\n\nand then force push your branch.\ngit push --force-with-lease"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: server certificate verification failed\n\nI just created a github account and a repository therein, but when trying to create a local working copy using the recommende url via\ngit clone https://github.com/<user>/<project>.git\n\nI get an error like\n\nfatal: unable to access 'https://github.com/<user>/<project>.git': server certificate verification failed. CAfile: /home/<user>/.ssl/trusted.pem CRLfile: none\n\nI'm on Debian Jessie, and I would have expected both Debian and GitHub to provide / rely on a selection of commonly accepted CAs, but apparently my system doesn't trust GibHub's certificate.\nAny simple way to fix this (without the frequently recommended \"GIT_SSL_NO_VERIFY=true\" hack and similar work-arounds)?\nEDIT:\nAdditional information:\n\nThe ca-certificate package is installed.\n\nInstalling cacert.org's certificates as\nsuggested by @VonC didn't change anything.\n\nMy personal ~/.ssl/trusted.pem file does contain a couple of entries, but to be\nhonest, I don't remember where the added certificates came from...\n\nWhen removing ~/.ssl/trusted.pem, the git error message changes to\n fatal: unable to access 'https://github.com/tcrass/scans2jpg.git/': Problem with the SSL CA cert (path? access rights?)"}, {"role": "assistant", "content": "2016: Make sure first that you have certificates installed on your Debian in /etc/ssl/certs.\nIf not, reinstall them:\nsudo apt-get install --reinstall ca-certificates\n\nSince that package does not include root certificates, add:\nsudo mkdir /usr/local/share/ca-certificates/cacert.org\nsudo wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt\nsudo update-ca-certificates\n\nMake sure your git does reference those CA:\ngit config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt\n\n\nJason C mentions another potential cause (in the comments):\n\nIt was the clock. The NTP server was down, the system clock wasn't set properly, I didn't notice or think to check initially, and the incorrect time was causing verification to fail.\n\nCertificates are time-sensitive.\ndopamane confirms in the comments:\n\nThis was the issue for me on WSL.\nRan sudo hwclock -s, and I could successfully clone the submodule.\n\n\n2022: Auspex adds in the comments:\n\nca-certificates does indeed contain root certificates.\nIt doesn't contain the CAcert root certificates.\nThis might have been a good answer 6 1/2 years ago, but those certificates were suspect way back then and haven't improved.\nThere's a reason they're not in the ca-certificates package.\nThese days we have LetsEncrypt, so everyone has certificates with reliable auditing and nobody needs to rely on CAcert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to rebase all the commits from the beginning\n\nSo I'm migrating from svn (code.google.com) to git(github).\nI've imported my project from the svn repo, and it imported all the commit history along way.\nI'm not really proud of those comments as it was one of my first project, not really serious.\nI'd like to rebase everything into a single 'initial import' commit.\nI've pulled everything on my computer and I'm trying to do that. But all I found was: \ngit rebase -i master but it only rebases new modifications and commits.\nHow can I clean my github repository from all history with a rebase?"}, {"role": "assistant", "content": "git rebase -i --root will start an interactive rebase of all commits from the beginning.\nFrom there, you can squash all commits into one and/or perform other edits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Bash: Could not open a connection to your authentication agent [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCould not open a connection to your authentication agent\n\n                                (43 answers)\n                            \n\nClosed 4 years ago.\n\n\n\nI'm new to Github and Generating SSH Keys look a neccessity. And was informed by my boss about this, so I need to comply.\nI successfully created SSH Key but when I'm going to add it to the ssh-agent\nthis is what happens\nWhat seems to be the problem?"}, {"role": "assistant", "content": "It seems you need to run ssh-agent before using it:\neval `ssh-agent -s`\n\nThat question was answered in this topic: Could not open a connection to your authentication agent"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hide hidden(dot) files in github atom editor\n\nI am very new to Github Atom editor. It always shows hidden files such as .git, .sass in the side pane.\nHow to hide hidden files(dot files) in atom editor's side pane."}, {"role": "assistant", "content": "Edit > Preferences > Packages\nIn the field below \"Installed Packages\" type: \"Tree View\". This package has a few settings you can toggle, \"Hide Ignored Names\" is what you're looking for.\nIt's a really buried setting, not sure why.\nYou can also add it to your config:\n'tree-view':\n    'hideIgnoredNames': true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "More than one value for the key user.name Git\n\nFor some reason I'm getting the error that \"More than one value for the key user.name\" when I try to set the user.name for my git account.  How can I set it to a single name?"}, {"role": "assistant", "content": "If you just want to reset all of them:\ngit config --global --replace-all user.email \"[email\u00a0protected]\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'ssh-keygen' is not recognized as an internal or external command\n\nI run git push -u origin master\nIt tells me that \"Permission denied (public key) fatal: The remote end hung up unexpectedly\"\nThen I looked up on the internet and found that I had to generate an ssh key for my account on GitHub. However, upon doing so, when I tried to do ssh-keygen -t rsa \"[email\u00a0protected]\" it simply said ssh-keygen is not recognized. I tried doing mkdir C:\\ssh but that didn't work. If it helps I'm using Ruby Rails and I'm on a Windows computer. Could anyone help me?"}, {"role": "assistant", "content": "2012:\nssh-keygen.exe is part of msysgit:\n C:\\path\\to\\msysgit1.7.11\\bin\\ssh-keygen.exe\n\nif your %PATH% includes C:\\path\\to\\msysgit1.7.11\\bin\\, you will have ssh-keygen. \n\nUpdate 2015:\nssh-keygen.exe is part of Git For Windows, whose releases include PortableGit-2.4.3.1-2nd-release-candidate-64-bit.7z\nc:\\path\\to\\PortableGit-2.4.3.1-2nd-release-candidate-64-bit\\usr\\bin\\ssh-keygen.exe\n\nThat means the %PATH% must include c:\\path\\to\\PortableGit-2.4.3.1-2nd-release-candidate-64-bit\\usr\\bin (without the ssh-keygen.exe)\nAs I explained before, Git for Windows will soon phase out msysgit.\nI detailed in \"Why is it that if you download Git 2.0 from the net, you always get a 1.9.4 installer package?\" how this new version is based on the more recent msys2 project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to get download/clone statistics of a git repository?\n\nIs there any way to get how many times a git repository has been cloned or downloaded from github?\nI was just curious as I found other statistics such as commit times lines of code can be generated using: http://gitstats.sourceforge.net/ but I did not find how to check for clone/download count."}, {"role": "assistant", "content": "Its super easy now!\nGo   \"REPO -> Insights -> Traffic\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I turn off automatic notification subscription for new repositories in a single organization on Github?\n\nWhen I create a new repository in a Github organization, all the organization owners get automatically subscribed to that repository's notification.\nI'm going to be making a lot of repositories for archival purposes.  I would like to turn auto subscribe off, not just for me but for everyone in the org.  I would also like to avoid sending out the initial \"you have been automatically subscribed\" email.  I can't find anything in the Github API or organization settings to do this.\nHey there, we're just writing to let you know that you've been automatically subscribed to a repository on GitHub.\n\n    gitpan-test/Acme-LookOfDisapproval created by gitpan-test-account\n    Read-only release history for Acme-LookOfDisapproval\n    https://github.com/gitpan-test/Acme-LookOfDisapproval\n\nYou'll receive notifications for all issues, pull requests, and comments that happen inside the repository. If you would like to stop watching this repository, you can manage your settings here:\n\n    https://github.com/gitpan-test/Acme-LookOfDisapproval/subscription\n\nYou can unwatch this repository immediately by clicking here:\n\n    https://github.com/gitpan-test/Acme-LookOfDisapproval/unsubscribe_via_email/blahblahblah\n\nYou were automatically subscribed because you've been given push access to the repository.\n\nThanks!"}, {"role": "assistant", "content": "Go to your profile settings\nClick Notification Center\nUncheck Automatically watch repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does 'git remote add upstream' help achieve?\n\nI was reading on:\nhttps://wiki.diasporafoundation.org/Git_workflow#Rebase_your_development_branch_on_the_latest_upstream\nHere is an extract:\n\nYour Repository Up to Date\nIn order to get the latest updates from the development trunk do a\n  one-time setup to establish the main GitHub repo as a remote by\n  entering:\n$ git remote add upstream git://github.com/diaspora/diaspora.git\n\nRebase Your Development Branch on the Latest Upstream\nTo keep your development branch up to date, rebase your changes on top\n  of the current state of the upstream master. See the What\u2019s\n  git-rebase? section below to learn more about rebasing.\nIf you\u2019ve set up an upstream branch as detailed above, and a\n  development branch called 100-retweet-bugfix, you\u2019d update upstream,\n  update your local master, and rebase your branch from it like so:\n$ git fetch upstream\n\n$ git checkout master\n\n$ git rebase upstream/master\n\n$ git checkout 100-retweet-bugfix\n\n[make sure all is committed as necessary in branch]\n$ git rebase master\n\n\nWhy is adding a 'remote upstream' needed in this case? Coudn't I have just done:\n$ git checkout master\n\n$ git pull origin master\n\n$ git checkout 100-retweet-bugfix\n\n[make sure all is committed as necessary in branch]\n$ git rebase master"}, {"role": "assistant", "content": "The wiki is talking from a forked repo point of view. You have access to pull and push from origin, which will be your fork of the main diaspora repo. To pull in changes from this main repo, you add a remote, \"upstream\" in your local repo, pointing to this original and pull from it.\nSo \"origin\" is a clone of your fork repo, from which you push and pull. \"Upstream\" is a name for the main repo, from where you pull and keep a clone of your fork updated, but you don't have push access to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't update: no tracked branch\n\nI am on Android Studio (Preview) 0.6.0 on Windows and was trying to share my project on GitHub. I used Git Shell to initialize, add, commit and push the project to GitHub. But when I tried to update my project from within Android Studio , I got this error:\nCan't update: no tracked branch\nNo tracked branch configured for branch master.\nTo make your branch track a remote branch call, for example,\ngit branch --set-upstream master origin/master\n\nIt does provide this suggestion but I am not sure what to do at this point. Is there a way to fix this from within Android Studio?"}, {"role": "assistant", "content": "If I'm not mislead, you just need to set your local branches to track their pairs in the origin server.\nUsing your command line, you can try \ngit checkout mybranch\ngit branch --set-upstream-to=origin/mybranch\n\nThat will configure something as an equivalent of your local branch in the server. I'll bet that Android Studio is complaining about the lack of that.\nIf someone knows how to do this using the GUI of that IDE, that would be interesting to read. :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I download a tarball from GitHub using cURL?\n\nI am trying to download a tarball from GitHub using cURL, but it does not seem to be redirecting:\n$ curl --insecure https://github.com/pinard/Pymacs/tarball/v0.24-beta2\n<html><body>You are being <a href=\"https://nodeload.github.com/pinard/Pymacs/tarball/v0.24-beta2\">redirected</a>.</body></html>\n\nNote: wget works for me:\n$ wget --no-check-certificate https://github.com/pinard/Pymacs/tarball/v0.24-beta2\n\nHowever I want to use cURL because ultimately I want to untar it inline with something like:\n$ curl --insecure https://github.com/pinard/Pymacs/tarball/v0.24-beta2 | tar zx\n\nI found that the URL after redirecting turned out to be https://download.github.com/pinard-Pymacs-v0.24-beta1-0-gcebc80b.tar.gz, but I would like cURL to be smart enough to figure this out."}, {"role": "assistant", "content": "Use the -L option to follow redirects:\ncurl -L https://github.com/pinard/Pymacs/tarball/v0.24-beta2 | tar zx"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Set subdirectory as website root on Github Pages\n\nI'm using Github Pages to host & serve a static website.\nThe static website has the typical directory structure for an app:\n.\n\u251c source/\n\u251c build/\n\u2502 \u2514 index.html\n\u251c .gitignore\n\u251c config.rb\n\u251c Gemfile\n\u2506 ...\n\u2514 README.MD\n\nindex.html is under build/, so I want to make that the default www path.\nSo when users hit username.github.io it renders the content within that subdirectory and yet it doesn't show \"/build/\" on the URL, cause that's set as the root folder.\nNotes:\n\nI don't have a custom domain nor planning to get one for this purpose. As you can see, I'm trying to leverage the default URL naming convention github provides.\nNot using Jekyll nor the automatic page generator function."}, {"role": "assistant", "content": "There is a detailed gist with all the required steps.\nThe gist is here:\nhttps://gist.github.com/cobyism/4730490\n\nFrom the gist\n\nDeploying a subfolder to GitHub Pages\nSometimes you want to have a subdirectory on the master branch be the root directory of a repository\u2019s gh-pages branch. This is useful for things like sites developed with Yeoman, or if you have a Jekyll site contained in the master branch alongside the rest of your code.\nFor the sake of this example, let\u2019s pretend the subfolder containing your site is named dist.\nStep 1\nRemove the dist directory from the project\u2019s .gitignore file (it\u2019s ignored by default by Yeoman).\nStep 2\nMake sure git knows about your subtree (the subfolder with your site).\ngit add dist && git commit -m \"Initial dist subtree commit\"\n\nStep 3\nUse subtree push to send it to the gh-pages branch on GitHub.\ngit subtree push --prefix dist origin gh-pages\n\nBoom. If your folder isn\u2019t called dist, then you\u2019ll need to change that in each of the commands above.\n\n\n\nIf you do this on a regular basis, you could also create a script containing the following somewhere in your path:\n\n#!/bin/sh\nif [ -z \"$1\" ]\nthen\n  echo \"Which folder do you want to deploy to GitHub Pages?\"\n  exit 1\nfi\ngit subtree push --prefix $1 origin gh-pages\n\n\nWhich lets you type commands like:\ngit gh-deploy path/to/your/site"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I give access to a private GitHub repository?\n\nI have a private git repository and I would like to extend its access to a member of my team. Will I be able to do it through the Github website? I have the username of my member.\nI have tried to do this by going through the admin page of the repository but there isn't such an option as I am not the owner."}, {"role": "assistant", "content": "If you are the owner it is simple:\n\nGo to your repo and click the Settings button.\nIn the left menu click Collaborators\nThen Add their name.\n\nThen collaborator should visit this example repo link https://github.com/user/repo/invitations\nSource: Github Docs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I generate the GitHub OAuth token for organization accounts?\n\nI have created an organization on GitHub. My organization has some repos. These repos have API documentation that I would like to re-build and publish to gh-pages branch via Travis-CI.  In order to give Travis-CI access to my organization's repos I need to generate an OAuth token, encrypt it, and then add then include the encypted token in the .travis.yml file as follows...\nenv:\n  global:\n  - secure: \"lots-of-seemingly-random-characters\"\n\nThis SO post explains the process and provides the details on how to do this for user accounts. How do I generate the required OAuth token for organization accounts?"}, {"role": "assistant", "content": "That's not possible currently, you can only create tokens for user accounts since user accounts have permissions associated with them (organizations don't). So, you'd need to create a token with an account which has access to the repository in question and give that to Travis. You can also create a machine account for that purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add my current project to an already existing GitHub repository\n\nI'm very new to Git. I've been searching for an answer, but I couldn't find one.\nIn my computer I have a project folder like this:\nproject_a\n--some_folder\n--another_folder\n--.git\n\nAnd I have a repository on GitHub, let\u2019s say https://github.com/company/our_repo.git. Under this repository I have some folders. So my goal is to put my project_a under trunk/bin. How do I achieve this? (Again, I'm very very very new.)"}, {"role": "assistant", "content": "Open your Terminal, access to this folder and write:\ngit init\ngit add .\ngit commit -m \"my commit\"\ngit remote set-url origin [email\u00a0protected]:username/repo.git\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I call 'git pull' from within Python?\n\nUsing the github webhooks, I would like to be able to pull any changes to a remote development server. At the moment, when in the appropriate directory, git pull gets any changes that need to be made. However, I can't figure out how to call that function from within Python. I have tried the following:\nimport subprocess\nprocess = subprocess.Popen(\"git pull\", stdout=subprocess.PIPE)\noutput = process.communicate()[0]\n\nBut this results in the following error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/subprocess.py\", line 679, in __init__\n    errread, errwrite)\n  File \"/usr/lib/python2.7/subprocess.py\", line 1249, in _execute_child\n    raise child_exception\nOSError: [Errno 2] No such file or directory\n\nIs there a way that I can call this bash command from within Python?"}, {"role": "assistant", "content": "Have you considered using GitPython? It's designed to handle all this nonsense for you.\nimport git  # pip install gitpython\n\n\ng = git.cmd.Git(git_dir)\ng.pull()\n\nTo install the module use pip install GitPython\nProject can be found here, GitPython"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trigger Github Action only on new tags?\n\nIs there a possibility to trigger a GitHub action only if a new version (which comes with a new tag) is pushed? I don't want run them on every push into master, but I also want to avoid creating a release branch."}, {"role": "assistant", "content": "Use the following syntax:\non:\n  push:\n    # Pattern matched against refs/tags\n    tags:        \n      - '*'           # Push events to every tag not containing /\n\nFor hierarchical tags:\non:\n  push:\n    # Pattern matched against refs/tags\n    tags:        \n      - '**'           # Push events to every tag including hierarchical tags like v1.0/beta\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use Bitbucket and GitHub at the same time for one project?\n\nI have one repository which I want to push into Bitbucket and GitHub.\nIt is vital for my repository to be hosted by both.\nIs there a way to do this in Git?"}, {"role": "assistant", "content": "You can use multiple remote repositories with git. But you'll have to push separately into 2 of your remotes I believe.\nFor example, if your project currently points to github, you can rename your current remote repository to github:\n$ git remote rename origin github\n\nYou can then add another remote repository, say bitbucket:\n$ git remote add bitbucket [email\u00a0protected]:your_user/your_repo.git\n\nNow in order to push changes to corresponding branch on github or bitbucket you can do this:\n$ git push github HEAD\n$ git push bitbucket HEAD\n\nSame rule applies to pulling: you need to specify which remote you want to pull from:\n$ git pull github your_branch\n$ git pull bitbucket your_branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: No supported authentication methods available\n\ni use github and have successfully added and synched files on my laptop in the past. \nas of recent i started getting \"PuTTY Fatal Error: Disconnected: No supported authentication methods available\" after running:\ngit pull origin master (or push)\nhowever\nssh [email\u00a0protected] returns the correct response:\nERROR: Hi username! You've successfully authenticated, but GitHub does not provide shell access\nConnection to github.com closed.\nafter digging around on github i found this morcel:\nNo supported authentication methods available\nYou should be aware of the environment variable GIT_SSH, which is used by git to find your ssh-speaking client, if ssh doesn\u2019t work for you. The git install may be using plink.exe (via GIT_SSH) to perform the authentication. If so, make sure you have pageant.exe running, and the key you created for github loaded into it. This provides the key to plink.exe; without it, the above error will occur.\nnot sure what plink.exe or peagant.exe is.. and the fact that ssh [email\u00a0protected] seems to authenticate correctly makes me wonder what the best solution here is.. i certainly don't want to overcomplicate my setup if not necessary."}, {"role": "assistant", "content": "You can create a file named \".profile\" in your home directory, for me that's C:\\Users\\[user]\nInside that file, put the following line of code:\nGIT_SSH=\"/usr/bin/ssh.exe\"\n\nThis will set the GIT_SSH environment variable to use the ssh client included with git.\nThe .profile script gets executed when you start your Git Bash command line.\nEdit:\nThis is my .profile. It will ask you for your password the first time you start the git command prompt, then will remember it from then on, until you reboot your computer. Very handy so you don't have to keep entering your password each time you want to do something.\nSSH_ENV=\"$HOME/.ssh/environment\"\nGIT_SSH=\"/usr/bin/ssh.exe\"\n\nfunction start_agent {\necho \"Initializing new SSH agent...\"\n/usr/bin/ssh-agent | sed 's/^echo/#echo/' > \"${SSH_ENV}\"\necho succeeded\nchmod 600 \"${SSH_ENV}\"\n. \"${SSH_ENV}\" > /dev/null\n/usr/bin/ssh-add;\n}\n\n# Source SSH settings, if applicable\nif [ -f \"${SSH_ENV}\" ]; then\n. \"${SSH_ENV}\" > /dev/null\n#ps ${SSH_AGENT_PID} doesn't work under cygwin\nps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {\nstart_agent;\n}\nelse\nstart_agent;\nfi"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Python setuptools: How can I list a private repository under install_requires?\n\nI am creating a setup.py file for a project which depends on private GitHub repositories.  The relevant parts of the file look like this:\nfrom setuptools import setup\nsetup(name='my_project',\n    ...,\n    install_requires=[\n        'public_package',\n        'other_public_package',\n        'private_repo_1',\n        'private_repo_2',\n    ],\n    dependency_links=[\n        'https://github.com/my_account/private_repo_1/master/tarball/',\n        'https://github.com/my_account/private_repo_2/master/tarball/',\n    ],\n    ...,\n)\n\nI am using setuptools instead of distutils because the latter does not support the install_requires and dependency_links arguments per this answer.\nThe above setup file fails to access the private repos with a 404 error - which is to be expected since GitHub returns a 404 to unauthorized requests for a private repository.  However, I can't figure out how to make setuptools authenticate.\nHere are some things I've tried:\n\nUse git+ssh:// instead of https:// in dependency_links as I would if installing the repo with pip.  This fails because setuptools doesn't recognize this protocol (\"unknown url type: git+ssh\"), though the distribute documentation says it should.  Ditto git+https and git+http.\nhttps://<username>:<password>@github.com/... - still get a 404.  (This method doesn't work with curl or wget from the command line either - though curl -u <username> <repo_url> -O <output_file_name> does work.)\nUpgrading setuptools (0.9.7) and virtualenv (1.10) to the latest versions.  Also tried installing distribute though this overview says it was merged back into setuptools.  Either way, no dice.\n\nCurrently I just have setup.py print out a warning that the private repos must be downloaded separately.  This is obviously less than ideal.  I feel like there's something obvious that I'm missing, but can't think what it might be. :)\nDuplicate-ish question with no answers here."}, {"role": "assistant", "content": "I was trying to get this to work for installing with pip, but the above was not working for me. From [1] I understood the PEP508 standard should be used, from [2] I retrieved an example which actually does work (at least for my case).\nPlease note; this is with pip 20.0.2 on Python 3.7.4\nsetup(\n    name='<package>',\n...\n    install_requires=[\n        '<normal_dependency>',\n         # Private repository\n        '<dependency_name> @ git+ssh://[email\u00a0protected]/<user>/<repo_name>@<branch>',\n         # Public repository\n        '<dependency_name> @ git+https://github.com/<user>/<repo_name>@<branch>',\n    ],\n)\n\nAfter specifying my package this way installation works fine (also with -e settings and without the need to specify --process-dependency-links).\nReferences\n[1] https://github.com/pypa/pip/issues/4187\n[2] https://github.com/pypa/pip/issues/5566"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix: Domain does not resolve to the GitHub Pages server. Error in Github Pages for custom domain setup with Enforce HTTPS Enabled?\n\nSo I am trying to get a custom domain to work with my github pages user site. I have followed pretty much the standard procedure for doing this as follows: (recommended by github here too: https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/). Note I need both the apex domain (example.com) and the www subdomain (www.example.com) to resolve to my github pages user site at username.github.io (the website itself is a jekyll based blog and I have checked that it compiles successfully before I started this process)\n\nI added an A record to my DNS records at the registrar pointing to all of the four IP addresses provided by Github from the apex domain example.com:\n\n\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\n\nNext I went in and added a CNAME record for the www sub domain pointing to username.github.io\nAnd then I finally enabled the custom domain example.com under the settings tab of the repository (under Github Pages > Custom Domain), and also enabled the Enforce HTTPS option after it was enabled within about an hour.\n\nI have tried contacting my registrar and they said that everything in the DNS record seem fine and they get the following results:\nA records :\n example.com.            21460  IN      A      185.199.111.153\n example.com.            21460  IN      A      185.199.109.153\n example.com.            21460  IN      A      185.199.110.153\n example.com.            21460  IN      A      185.199.108.153\n\nCNAME :\nwww.example.com.        7199    IN      CNAME  username.github.io.\n\nAs expected.\nBut I still get the following error in github (under the settings tab of the repository):\n\"**Domain does not resolve to the GitHub Pages server. For more information, see https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/.**\"\nAnd when I try to access the site by typing either example.com or www.example.com, the browser redirects to https://example.com/ and I get the error (on Chrome):\nERR_CONNECTION_REFUSED\nNote that there is a warning on the documentation by github saying:\nWarning: If your domain has HTTPS enforcement enabled, GitHub Pages' servers will not automatically route redirects. You must configure www subdomain and root domain redirects with your domain registrar.\nI have no idea how to get around this. I suspect this is the possible cause of the issue. So a solution might be to circumvent this redirection, I just do not know how I would do this."}, {"role": "assistant", "content": "For anyone stumbling across this. Actually I realized I have outlined the correct method to set this up with Github Pages. And this is in line with what is recommended by Github as of today and works perfectly well. Just make sure you wait for the DNS Propagation to take effect which in some cases might take up to 24hrs. And this is what the problem was in my case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull / push - unable to access HTTPS, SSL routines seem to be down\n\nI'm using Git (and GitHub) on a daily basis and everything has been working fine and all of a sudden, I can no longer communicate with my remote GitHub repository through my Git commands. When I try to \"Git pull\", it gives the following error:\n\nfatal: unable to access 'https://github.com/snahrvar/eatibl.git/':\n  error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert\n  protocol version\n\nSo, I tested across multiple repositories, and I get the same errors on my computer. I had someone else interact with those same repositories, and it works fine for them. Prior to this error, I did an \"npm install sharp\" on a project and that ended up failing, and I suspect this may have messed with some SSL setting, but that's a wild guess!\nAny general thoughts or guidance would be much appreciated!\nIf it's helpful at all, here is my environment:\n\nGit version: 1.9.4.msysgit.2\nWindows version: Windows 8.1"}, {"role": "assistant", "content": "Updating TortoiseGit and GCM didn't help me, but updating Git itself did, as per @Frederic's advice in comments.\nhttps://git-scm.com/download/win\nTo make sure the new version of Git installs properly and doesn't conflict with previous installations (it might, if you used TortoiseGit's, because it would use different folders and mess with PATH variable), remove the existing Git installation before installing the updated Git. Might also need to install with administrator rights."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: unable to access 'https://github.com/xxx': OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGetting Git to work with a proxy server - fails with \"Request timed out\"\n\n                                (22 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nWhen l try to use git push, an error reports: \n\nFatal: fatal: unable to access 'https://github.com/xxx': OpenSSL\n  SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443\n\nMy git version is 2.16.2 for windows\nIt worked well before this day, and reinstalling git seems to not work.\nCan anyone help me with that? Thanks in advance!"}, {"role": "assistant", "content": "If you are behind a proxy, try the following:\ngit config --global --add remote.origin.proxy \"\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where can I find the GitHub ID in my account?\n\nWhat is the difference between GitHub username and GitHub ID? I was asked for my Github ID for a certain project and I happened to give my username. But the person is unable to find me on GitHub with my username. So I got a GitHub ID from the below URL:\nhttp://caius.github.io/github_id/\nBut I'm unable to find this ID from my account directly. Where can I find this in my GitHub account? It would be great to elaborate on this."}, {"role": "assistant", "content": "It can be easily retrieved using GitHub API:  \nhttps://api.github.com/users/your_github_user_name\n\nwhere instead of your_github_user_name you must use the desired GitHub username.\n\nExample:\nhttps://api.github.com/users/github"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Auth Failed\" error with EGit and GitHub\n\nI've installed EGit plugin at Eclipse Helios and I'm trying to use it with my GitHub account, but when I try to configure it I get an \"Auth Failed\" error.\nI'd been googling it but no luck... it seems to be a problem with my passphrase but AFAIK EGit is looking at the right place (/home/user/.ssh/id_rsa) and I've no problem in connect by ssh or git console client.\nSome blogs says that is a problem with the URI and the Egit's parser but I still haven't found a solution."}, {"role": "assistant", "content": "My answer may be outdated but hopefully it can be useful for someone.\n\nIn your Eclipse go to Window >\nPreferences > General > Network Connections >\nSSH2 (or just type \"SSH2\" in\npreferences window filter box).\nIn \"Key Management\" tab press\n\"Generate RSA Key...\" button. Optionally you can add comment\n(usually e-mail address) and\npassphrase to your key. Passphrase\nwill be used during authentication\non GitHub.\nCopy your generated public key (in a\nbox just below \"Generate RSA Key...\"\nbutton) and add it to your GitHub\naccount.\nPress \"Save Private Key...\" button\nto save your private RSA key into\nfile. By default keys are stored in\nSSH2 home directory (see \"General\"\ntab).\n\nThat's it! Now you should be able to push your code to GitHub repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I prevent auto-generated links in the GitHub wiki?\n\nOn a GitHub wiki page, if I type:\nwww.foobar.com\n\nGitHub automatically assumes this is a URL and makes the text a hyperlink to http://www.foobar.com. However, sometimes I do not want a hyperlink to be created. Is there a way to stop this behavior? Perhaps some sort of markdown?"}, {"role": "assistant", "content": "Update Nov. 2021, VSCode 1.63:\nThis issue should be allievated with issue 136198 \"markdown preview wrongly creates links \"\n\nWhile \"markdown.preview.linkify\": false will disable linkify features entirely, setting md.linkify.fuzzyLink to false will disable it only for links without http(s) header.\nWhich, I think, is a better alternative, and it's already supported by markdown-it.\n\n\nOriginal answer (2014):\nThis isn't limited to wiki page, and is part of the GFM (GitHub Flavored Markdown) url autolinking feature.\nPutting them in `` can work but display the url as a code: foo http://example.com bar.\nfoo `http://example.com` bar\n\nAnother trick (mentioned in this gist) is\nht<span>tp://</span>example.com \n\nThat will display http://example.com as regular text.\nIn your case (without the http://)\nw<span>ww.</span>foobar.com\n\nThat would also display  www.foobar.com as regular text.\ngeekley adds in the comments:\n\nFor emails, you can use foo<span>@</span>example.com\n\n\nVenryx suggests in the comments a shorter/cleaner solution:\n\nJust add one of the void element tags (I prefer <area>), at a location that breaks the URL detectability, eg. right before the first dot.\nExample: www<area>.foobar.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Loading Maven dependencies from GitHub [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I use a GitHub project directly in Maven?\n\n                                (3 answers)\n                            \n\nClosed 4 years ago.\n\n\n\nHow do I add a Java library from its GitHub repo (the library uses Maven as a build system) as a dependency to my Maven project? Can I do that without downloading and compiling the library?"}, {"role": "assistant", "content": "Now you can import a Java library from a GitHub repo using JitPack.\nIn your pom.xml:\n\nAdd repository:\n\n<repository>\n    <id>jitpack.io</id>\n    <url>https://jitpack.io</url>\n</repository>\n\n\nAdd dependency\n\n<dependency>\n    <groupId>com.github.User</groupId>\n    <artifactId>Repo name</artifactId>\n    <version>Release tag</version>\n</dependency>\n\nIt works because JitPack will check out the code and build it. So you'll end up downloading the jar.\nIf the project doesn't have a GitHub release then its possible to use a commit id as the version."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push master fatal: You are not currently on a branch\n\nMaster is it at say commit #10. However, I ended up realizing I broke something along the way that wasn't caught by tests.\nI ended up going to commit #5, and then slowly re-did the dev of each commit and adjusted it continually to ensure it didn't re-cause the bug. Now I'm essentially back to commit #10, but with a number of changes that prevent the bug from happening.\nI now want to create commit #11 using my changes. But when I try to push to master I get \nfatal: You are not currently on a branch.\nTo push the history leading to the current (detached HEAD)\nstate now, use\n\n    git push master HEAD:<name-of-remote-branch>\n\nWhich is to be expected. But how do I actually get that to push up to my remote branch?\nI tried git push origin HEAD:master but then got this:\n! [rejected]        HEAD -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tomhammond/sample.git'\nhint: Updates were rejected because a pushed branch tip is behind its remote\nhint: counterpart. Check out this branch and integrate the remote changes\nhint: (e.g. 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nWhen I do a git status I see HEAD detached from 4a74ac3"}, {"role": "assistant", "content": "But when I try to push to master I get\n\nfatal: You are not currently on a branch.\nTo push the history leading to the current (detached HEAD)\n\nWhich is to be expected\n\nWorking in a detached state is not to be expected, unless you deliberately want to be doing this, which I doubt is the case for you.  Instead of checking out commit #5, you should have either reverted the master branch to that commit, or do a git rebase in interactive mode where you can rehash the commits as you want.\nThat being said, if you are certain that the version of master in the detached state is what you really want to keep, then you can get around the non-fast-forward error, by force pushing the branch to the remote:\ngit push origin HEAD:master --force\n\nHowever, if you force push you run the risk of causing problems for all other users who have that branch checked out.  A less risky solution would be to create a temporary branch from the detached HEAD, and then merge that branch into master:\ngit branch temp-branch\ngit checkout master\ngit merge temp-branch\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Working with README.md on github.com [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am not too familiar with the lightweight markup language used by github when updating README files.\nWhere are the resources which I can read up on how to write the appropriate markup syntax for my open source library's README/wiki files?\nAnd is there a tool which I can \"review my docs locally in my browser\" before pushing the updated README to my github repository?"}, {"role": "assistant", "content": "The markup in question is coincidentally called Markdown, created by John Gruber, author of the Daring Fireball blog.  The original source of Markdown can be found at Daring Fireball - Markdown.  \nThere are many Markdown dialects, the documentation for Github's can be found on the Github Flavored Markdown page.\nnice tip from that page:\npress M on any Github page with a Markdown editor to reveal the cheatsheet.\nYou can also use the Github Markdown Live Preview page to test your Markdown documents.\nUpdate 2012-11-08:  Efforts are underway to standardize the Markdown syntax.  See The Future of Markdown - Jeff Atwood, Coding Horror and W3C Markdown Community Group.\nUpdate 2014-09-09:  CommonMark a markdown standard and spec has been released."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Egit rejected non-fast-forward\n\nI am getting this message while pushing to github repository.  Can you tell me step by step procedure to fix it?  I pushed only once and it was successful. But, when I updated a project and tried to push my second commit, it shows \"master rejected non-fast-forward\" and does not allow me to push.  Please explain the procedure."}, {"role": "assistant", "content": "I had this same problem and I was able to fix it.  afk5min was right, the problem is the branch that you pulled code from has since changed on the remote repository.  Per the standard git practices(http://git-scm.com/book/en/Git-Basics-Working-with-Remotes), you need to (now) merge those changes at the remote repository into your local changes before you can commit.  This makes sense, this forces you to take other's changes and merge them into your code, ensuring that your code continues to function with the other changes in place.\nAnyway, on to the steps.\n\nConfigure the 'fetch' to fetch the branch you originally pulled from.\nFetch the remote branch.\nMerge that remote branch onto your local branch.\nCommit the (merge) change in your local repo.\nPush the change to the remote repo.\n\nIn detail...\n\nIn eclipse, open the view 'Git Repositories'.\nEnsure you see your local repository and can see the remote repository as a subfolder.  In my version, it's called Remotes, and then I can see the remote project within that.\nLook for the green arrow pointing to the left, this is the 'fetch' arrow. Right click and select 'Configure Fetch'.\nYou should see the URI, ensure that it points to the remote repository.\nLook in the ref mappings section of the pop-up.  Mine was empty.  This will indicate which remote references you want to fetch.  Click 'Add'.\nType in the branch name you need to fetch from the remote repository.  Mine was 'master' (btw, a dropdown here would be great!!, for now, you have to type it).  Continue through the pop-up, eventually clicking 'Finish'.\nClick 'Save and Fetch'.  This will fetch that remote reference.\nLook in the 'Branches' folder of your local repository.  You should now see that remote branch in the remote folder.  Again, I see 'master'.\nRight-Click on the local branch in the 'Local' folder of 'Branches', which is named 'master'.  Select 'Merge', and then select the remote branch, which is named 'origin/master'.\nProcess through the merge.\nCommit any changes to your local repository.\nPush your changes to the remote repository.\nGo have a tasty beverage, congratulating yourself.  Take the rest of the day off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push failed, \"Non-fast forward updates were rejected\"\n\nI've edited my GIT repositories via Git Online. After I tried to push my local code changes, I got an error: \nGit push failed, To prevent from losing history, non-fast forward updates were rejected.\n\nHow can I fix this?"}, {"role": "assistant", "content": "Pull changes first:\ngit pull origin branch_name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Connect to a locally built Jekyll Server using mobile devices in the LAN\n\nAfter using jekyll serve on one machine, a WEBrick server is set up and the site can be accessed from localhost:4000 on this particular PC.\nHowever, I'm wondering how to access this web server from other machines in the LAN, especially for mobile devices? I'm trying to test the jekyll site on mobile devices before pushing the code to Github."}, {"role": "assistant", "content": "Try jekyll serve --host=0.0.0.0 when you invoke Jekyll on the command line.\nThat will make Jekyll's HTTP server bind to all available IPs, rather than just to localhost.\nYou can also add this to your _config.yml with host: 0.0.0.0. GitHub will simply ignore this when you push, so it's safe to use if you don't mind having your work openly accessible on your network.\n\nWithout --host=0.0.0.0 Jekyll will output something like this when you start up:\n$ jekyll serve\n[...]\nServer address: http://127.0.0.1:4000/\nServer running... press ctrl-c to stop.\n\nBut with --host=0.0.0.0 (or host: 0.0.0.0 in _config.yml) you'll notice that it's listening on all interfaces (represented by 0.0.0.0) rather than just listening on the loopback interface (represented by 127.0.0.1)\n$ jekyll serve --host=0.0.0.0\n[...]\nServer address: http://0.0.0.0:4000/\nServer running... press ctrl-c to stop. \n\nIf you still cannot access your server then there might be a firewall stopping it. Temporarily disable your firewall, or add a port forwarding rule for port 4000.\n\nOnce Jekyll is appropriately listening on all interfaces, you can access this from your mobile device using your LAN IP address (retrieved from something like ifconfig or ipconfig depending on your operating system)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change a connection to GitHub from SSH to HTTPS?\n\nI created my first repository in GitHub yesterday. When making the connection I used SSH instead of HTTPS, so I went through a little painful SSH key creation and connection process. At some point I got stuck and the connection failed. I wondered at that moment how I could revert the process I started and begin with a HTTPS connection instead. Happily, today I got the connection working through SSH but I'm wondering about the value of being able to change the type of connection (SSH vs HTTPS) and if there is a way to do it."}, {"role": "assistant", "content": "Assuming your remote is called origin, run\n\ngit remote set-url origin https://...\ngit remote set-url --push origin https://...\n\nYou can view the configured remotes with git remote -v, which should now show your updated URLs.\nSee the documentation for git-remote for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Copy/fork a git repo on github into same organization\n\nI have a repo on github that contains a web application that's deployed to two different domains.  The application has slight logic forks here and there to behave differently depending on which domain it's deployed to.\nIt's come to the point to where I want to split it into two separate repos, one for each domain.\nGithub won't let me fork it into the same organization.  Searching for \"git duplicate repo\" suggests I should bare clone and mirror push it, but that seems to be for keeping both repos in sync, which I don't want to do.\nWhat's the best way to go about this?  I'd like to preserve the old commit history in the new copy if possible."}, {"role": "assistant", "content": "Just create a new repository and push to it from your working copy:\ngit clone [email\u00a0protected]:me/myrepo-original\ncd myrepo-original\ngit remote set-url origin [email\u00a0protected]:me/myrepo-new\ngit push origin master\n\nNow you have a new repository, myrepo-new, which is identical to myrepo-original."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub keeps saying \"This branch is X commits ahead, Y commits behind\"\n\nLet's say there is a GitHub repository which I want to contribute to.\nI fork that repository into my GitHub account and I clone the fork from my account in my PC. Fine.\nBefore working on an issue, I first want to synchronize my fork with the 'original' repository. I go to my account fork, click on New Pull request, make sure that I select mine as base and the original master as head fork, I see the differences (all the commits that people did in the original repository that are not on mine).\nThen I create the pull request on my fork and I merge those changes in my fork.\nI go to my local repo and do a git pull, and I have everything synchronized. Fine.\nThe problem comes now, in my GitHub account now it's always saying 'This branch is X commits ahead', where 'X' is the number of times that I did the synchronize process I described above. So, every time I do a pull request into the original repository (not my fork), is showing that I'm committing my code plus X more commits, that are the merges I did on my fork to synchronize with the original repository.\nOf course, I don't want to push those changes into the original repository, since they already have those changes in place, so I don't understand why GitHub keeps saying to me that I have changes to commit.\nI think it's something that has to be solved on my GitHub account, because in my local repository there are no changes or issues, actually I even removed it and re-cloned again.\nDo you have any ideas?"}, {"role": "assistant", "content": "As you guessed, these extra commits are likely the merge commits from the Pull Requests that you created.\nIn the future, there's a much easier way to sync your fork with the original repository. In your local repo, after the initial clone do:\ngit remote add upstream https://github.com/upstream/repo.git\n\nThen, whenever you want to sync the changes from upstream, do:\ngit pull --rebase upstream master\ngit push --force-with-lease origin master\n\n(The --rebase and --force-with-lease options will only be necessary if you have commits that haven't been merged into the upstream repo.)\nObligatory warning: Since a rebase rewrites history, this can be dangerous / disruptive for anyone else working on this branch. Be sure you clearly communicate what you have done with anyone you are collaborating with. Since this is a personal fork, I assume this won't be an issue for you.\n\nNow to fix your current issue after the fact.\n\nAdd the upstream remote as described above.\nReset your local branch to match upstream:\ngit checkout master\ngit reset --hard upstream/master\n\nIf you have created any commits in your fork, you can cherry-pick them onto your updated version of master. If you can't remember or need help finding them, something like\ngit log --oneline master origin/master\n\nshould show you any commits not in upstream.\n\n\nAbove I assumed that you are only using one branch, master. If you aren't already, I highly recommend that you create a new branch for each feature / bug fix that you work on. Among other benefits, this allows you to start work on another feature / bug fix when you are still waiting for an earlier PR to be merged. If you never commit directly to master, then you can sync without the --rebase or --force-with-lease:\ngit checkout master\ngit pull upstream master\ngit push origin master\n\nTo update a feature branch after you have updated master, do:\ngit checkout myfeature\ngit rebase master\ngit push --force-with-lease origin myfeature # if you have already pushed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to submit a pull request from a cloned repo?\n\nHow to submit a pull request from an existing locally-cloned repo?\nOften,  I want to look at some libraries source code from github, so I clone it. Later, I discover some issue with the code and raise it on a mailing list, often in passing. The library author says \"nice find, can you send a pull request?\".\nAnd the answer is \"not that easily\". I haven't forked the repo yet, Ive cloned it. And there doesn't seem a way I can find to submit a pull request from a cloned repo?\nIf this limit is true, it feels like the sensible reaction is to fork anything and everything you ever look at, just so that if you ever might want to contribute, you can. And that fills up your github account with many inactive forks. \nDoesn't seem a lot of talk about this issue - am I the only person whom this problem affects?"}, {"role": "assistant", "content": "Fork the repo on GitHub, then add your fork repo as a remote to your local cloned copy:\ngit remote add myfork https://github.com/<myGitHubAccountName>/<repoName>.git\n\nThen you can push to your fork:\ngit push myfork master\n\nIf you're doing more than just this one pull request, you can remove the origin remote and name your fork as origin:\ngit remote rm origin\ngit remote add origin https://github.com/<myGitHubAccountName>/<repoName>.git\n\nThis is typically what I do. Sometimes I add the original origin as upstream so I still have a reference to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Android Studio Checkout Github Error \"CreateProcess=2\" (Windows)\n\nToday I've tried to checkout my Github project using brand new Android Studio and ended up with this nasty error :\n\nWhy things just never work out of the box ...?"}, {"role": "assistant", "content": "I've solved the problem , and I will explain how :\n\nDownload Github For Windows client and install it.\nAfter The client successfully installed , connect it with your github account.It should be easy , just follow the wizard.\nThen you should add git.exe location to your \"Path Variable\". The location you should add will probably be something like :\nC:\\Users\\Your_Username\\AppData\\Local\\GitHub\\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\\bin\n\nAlternatively , if you don't want to add to environment variables. You can open the android studio and go to :\nSettings -> Version Control -> Git\nIn text box next to \"Path to Git Executable\" you will see \"git.exe\" , just give it a full path like so :\nC:\\Users\\Your_Username\\AppData\\Local\\GitHub\\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\\bin\\git.exe\nEDIT :\nFor latest Github for windows versions some can find the git.exe under \"...\\cmd\\git.exe\" rather than \"...\\bin\\git.exe\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to add border to image in GitHub markdown?\n\nI need to add border to the image in GitHub README.md file. This is how image should be embeded:\n![GitHub Logo](/images/logo.png)\n\nI have tried to wrap image with the table:\n|--------------------------------|\n|![GitHub Logo](/images/logo.png)|\n\nbut it is not possible to create table without header.\nI have also tried to include image as html tag:\n<img src=\"/images/logo.png\" style=\"border: 1px solid black\" />\n\nbut without success. Is there any way how to do this?"}, {"role": "assistant", "content": "It's hacky and not always pretty, but surround the image with a <kbd> tag.\nBefore\n<img src=\"https://i.sstatic.net/CtiyS.png\">\n\nAfter\n<kbd>\n  <img src=\"https://i.sstatic.net/CtiyS.png\">\n</kbd>\n\nAnd it renders like this:\n\n\n\n\nSurrounding the markdown image syntax might not work for some markdown implementations.  If the following does not work\n<kbd>![alt-text](https://example.com/image.png)</kbd>\n\nTry embedding the image as an HTML <img> tag instead\n<kbd><img src=\"https://example.com/image.png\" /></kbd>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reapply a commit that was undone by conflict?\n\nI have this commit that was undone by someone who doesn't know how to deal with conflicts. Is there an easy way to try auto merging the commit back in? I tried using \"merge to master\" but it just says up to date. I am using tortoisegit."}, {"role": "assistant", "content": "That's what git cherry-pick is for. It lets you apply changes by using already existing commits.\nThe basic syntax is:\ngit cherry-pick <commit> ..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git cli: get user info from username\n\nIs there a way to get the name of the user, given only their username?\nSomething like this output git show <username> (I know this doesn't work)\nusername: username\nname: First Last\nemail: email@address\n\nI know I can do this with a GitHub api call, but would prefer to keep it within the CLI."}, {"role": "assistant", "content": "git config user.name\ngit config user.email\n\nI believe these are the commands you are looking for.\nHere is where I found them"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reset or change the passphrase for a GitHub SSH key?\n\nI have forgoten my passphrase in Git.  How do I reset it? I found two solutions on Stack Overflow, but I want to know what process to follow to reset it or to get it."}, {"role": "assistant", "content": "If you had generate a SSH-key with passphrase and then you forget your passphrase for this SSH-key,there's no way to recover it, You'll need to generate a brand new SSH keypair or switch to HTTPS cloning so you can use your GitHub password instead.\nBUT\uff0cthere are exceptions\nIf you configured your SSH passphrase with the OS X Keychain, you may be able to recover it.\n\nIn Finder, search for the Keychain Access app.\nIn Keychain Access, search for SSH.\nDouble click on the entry for your SSH key to open a new dialog box.\nKeychain access dialogIn the lower-left corner, select Show password.\nYou'll be prompted for your administrative password. Type it into the \"Keychain Access\" dialog box.\nYour password will be revealed.\n\nRefer to Github help - How do I recover my SSH key passphrase?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to remove proxy\n\nI am trying to push to my repo but receiving an error:\nfatal: unable to access 'https://github.com/myrepo.git/': Could not resolve proxy: --list        \n\nI already changed the proxy settings :\ngit config --global --unset http.proxy  \n\nmy global config settings are:\npush.default=simple\nhttp.sslverify=false\nurl.https://.insteadof=git://\ncredential.helper=cache --timeout=3600\n\nBut still getting this error? How can I solve this?"}, {"role": "assistant", "content": "Check your enviroment:\necho $http_proxy\necho $https_proxy\necho $HTTPS_PROXY\necho $HTTP_PROXY\n\nand delete with export http_proxy=\nCheck your git config files for a proxy:\ngit config -l --show-origin | grep \"proxy\"\n\nYou can unset a global proxy <user_directory>/.gitconfig:\ngit config --global --unset https.proxy\ngit config --global --unset http.proxy\n\nOr a proxy from the local config .git/config:\ngit config --unset http.proxy\ngit config --unset https.proxy\n\nIt is also possible that the proxy is from a system config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the public URL for the Github public keys\n\nI heard that there was a public URL for all users on github where you can access their public keys or they can supply that URL of all their public keys. Is this true? If so what is that URL. Does it exist for bitbucket as well?"}, {"role": "assistant", "content": "You can get with:\ncurl https://github.com/<username>.keys\n\nReplace <username> with the actual username of the GitHub user.\nThis is useful when you set login permission to other servers. Just save its output into ~/.ssh/authorized_keys. To append it to the end from the command line:\ncurl https://github.com/<username>.keys | tee -a ~/.ssh/authorized_keys\n\nIt can also be done using Github API\ncurl -i https://api.github.com/users/<username>/keys\n\nFor bit bucket you can use the following: (This call requires authentication.)\ncurl -i https://bitbucket.org/api/1.0/users/<accountname>/ssh-keys"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the way to remove a git submodule as of git version 1.9.3?\n\nas of git version 1.9.3 (Apple Git-50)  on mac how do i remove a git submodule? I am reading alot of outdated information with many developers telling me they wont work.  What is the current way ?\n will git deinit pathToSubModule    do the trick ?\nThe steps i thought would work are here but comments say they wont. \nLet me explain my current situation and what i need accomplished.  I've installed the Quick repository and added it to as submodule to my project.  This code is already checked in and others are using it.  What i now need to do is fork the same Quick repository and host it on a more secure github that my company has (so a completely other private github). After forking it i want to add that fork as a gitSubmodule and let it replace the current Quick submodule i had installed previously. \nupdate: i've read that the following is the correct way on latest git version please confirm?\nTo remove a submodule added using:\n\ngit submodule add [email\u00a0protected]:repos/blah.git lib/blah\nRun:\n\ngit rm lib/blah\nThat's it.\n\nFor old versions of git (circa ~1.8.5) use:\n\ngit submodule deinit lib/blah\ngit rm lib/blah\ngit config -f .gitmodules --remove-section submodule.lib/blah"}, {"role": "assistant", "content": "You have the git submodule deinit\ngit submodule deinit <asubmodule>    \ngit rm <asubmodule>\n# Note: asubmodule (no trailing slash)\n# or, if you want to leave it in your working tree\ngit rm --cached <asubmodule>\nrm -rf .git/modules/<asubmodule>\n\n\ndeinit\n\nUn-register the given submodules, i.e. remove the whole submodule.$name\n    section from .git/config together with their work tree. \nFurther calls to git submodule update, git submodule foreach and git submodule sync will skip any unregistered submodules until they are initialized again, so use this command if you don\u2019t want to have a local checkout of the submodule in your work tree anymore. \nIf you really want to remove a submodule from the repository and commit that use git rm instead.\nIf --force is specified, the submodule\u2019s work tree will be removed even if it contains local modifications."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github link to wiki page from README\n\nHow do I create a link from a README.md file to a Wiki page in github? Every example seems to show linking from one wiki page to another wiki page, or from one README file to another file in the repository.  But none that show linking from one to the other"}, {"role": "assistant", "content": "I just came across this question and saw that this was impossible, but stubbornly kept trying anyway. Good news, because this actually can be done with relative links!\nIf you look at the documentation for relative links on GitHub, you can see that it supports ./ and ../ operands.\nGiven that your README is located at:\nhttps://github.com/<user-name>/<repo-name>/blob/master/README.md\n... and the wiki is located at:\nhttps://github.com/<user-name>/<repo-name>/wiki\n... that means you can just crawl back from the README to the wiki, like so:\n[My Awesome Wiki](../../wiki)\n\nUpdate: As some people have pointed out in the comments (thanks!), please be aware that these relative links will break on clones and forks, so be sure to weigh that into your decision!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Escape pound or number sign in Github issue tracker\n\nIf I type #1 when creating an Issue in Github, it will reference to Issue ID 1. Is there a way to avoid this by escaping the # sign? I just need it to be regular text."}, {"role": "assistant", "content": "short answer\nchoose from this list:\n#&#x2060;1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2bc7 # \u2014 <invisible character> \u2014 1\n<span>#</span>1\n<i>#</i>1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2bc7 the number sign will be italic\n\\# 1\n#\u20601 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2bc7 you need to copy-paste this!\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # \u2014 <invisible character> \u2014 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 even works for commit messages.\n\nmore generic answer\nThese are the options you have:\n\nOption A: put any non-numeric ([0-9]+) UTF-8 character between # and the number\n\n\nusing the character itself (e.g. # 1) \u2014 this will even work in commit messages\nusing an HTML entity (e.g. #&nbsp;1) \u2014 useful for characters not on your keyboard\n\nOption B: use formatting on either # or the number\n\n\nusing Markdown (e.g. #*1*)\nusing HTML tag (e.g. #<i>1</i>)\nNOTE that not all formatting variants, especially the Markdown ones, do always work!\n\n\n\nlong answer\n1 \u00a0\u00a0 use a space character\nYou can put any kind of space character between # and the number.\n1.a \u00a0\u00a0 word joiner \u2014 U+2060\nThis is the most unobtrusive solution:\n\n#&#x2060;1 \u21d2 #\u20601\n\nIn this case the space character is written as &#x2060;, that's the numeric character reference for the WORD JOINER unicode character [3].\nThe word joiner (WJ) is a zero width non-breaking space; that is, it's not visible (zero width) [4] and prevents # and the number from being separated by an automatic line break (non-breaking) [5].\n1.b \u00a0\u00a0 regular space \u2014 U+0020 / no-break space \u2014 U+00A0\nOf course you can use a \"normal\" space, which is faster to type than &#x2060;:\n\n\\# 1 \u21d2 # 1\n\nThe backslash before the hash sign (\\#) prevents the line from becoming a heading in case \\# 1 is at the beginning of the line.\nThe \\# 1 solution uses a breaking space. To use a non-breaking space, type instead: #&nbsp;1 (no backslash needed).\n1.c \u00a0\u00a0 hint for advanced keyboard users\nIf you're using an \u201dadvanced\u201c keyboard layout such as Colemak or Neo (german), you can use it to type special spaces\u202f\u2014\u202fnon-breaking spaces (NBSP) and narrow non-breaking spaces (NNBSP).\n\n\\# 1 \u21d2 # 1 \u00a0\u00a0 (NBSP)\n\\#\u202f1 \u21d2 #\u202f1 \u00a0\u00a0 (NNBSP)\n\n\n2 \u00a0\u00a0 use formatting\nBesides the solution of putting an extra character between # and the number, you can use markdown or HTML formatting. Below I'm providing some examples. Some solutions are striked out because they do not work (anymore).\nPlease note that the functionality could change at any time in case GitHub changes its code.\n\nusing <span> (as stated by Sam Harwell)\n\n\n<span>#</span>1 \u21d2 #1\n\nusing italic font:\n\n\n*#*1 \u21d2 #1\n<i>#</i>1 \u21d2 #1\n#*1* \u21d2 #1\n#<i>1</i> \u21d2 #1\n\nusing strong font:\n\n\n**#**1 \u21d2 #1\n<b>#</b>1 \u21d2 #1\n#**1** \u21d2 #1\n#<b>1</b> \u21d2 #1\n\nusing single backticks:\n\n\n`#1` \u21d2 #1\n`#`1 \u21d2 #1\n#`1` \u21d2 #1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Proper way to fix potential security vulnerability in a dependency defined in package-lock.json\n\nGithub has given me this error on one of my repositories.\nWe found a potential security vulnerability in one of your dependencies.\nA dependency defined in ./package-lock.json has known security vulnerabilities \nand should be updated.\n\nThe dependency is not defined in our package.json file. To my understanding it isn't good practice to delete the package-lock.json file and regenerate it. However, I cannot see any other way to fix this issue. If I dismiss this security vulnerability it will appear again a couple of days later. Any ideas? Thanks!"}, {"role": "assistant", "content": "New: now, with npm@6 you can directly run\nnpm audit fix\n\n\nOld answer:\nYou should try to identify the problematic package's name, and then run\nnpm install package-name\n\nreplacing package-name, obviously.\nThis will install the latest version of the package, and very often, the latest version has fixed the security issue. If you have a constraint on version (eg: 1.2), you can always try to:\nnpm install package-name@^1.2\n\nand the latest patched version will be installed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Failed to add the host to the list of know hosts\n\nMac OSX Lion 10.7.\nIn an effort to get around weird environment stuff (homebrew wasn't installing wget, and I had all sorts of weird blocks and errors), I uninstalled zschrc and homebrew and a bunch of other stuff, then installed fish shell.\nNow, whenever I try to push/pull to/from github, I get this error:\nThe authenticity of host 'github.com (204.232.175.90)' can't be established.\nRSA key fingerprint is <string of colon-separated chars that I should probs keep private>.\nAre you sure you want to continue connecting (yes/no)? yes\nFailed to add the host to the list of known hosts (/Users/sasha/.ssh/known_hosts).\n\nSo I tried to check the permissions of my ~./ssh folder, and got this, which looks fine to me:\n-rw-r--r--  1 sasha  staff    97B Jul  9 22:56 config\n-rw-------  1 sasha  staff   1.7K May 16  2012 id_rsa\n-rw-r--r--  1 sasha  staff   403B May 16  2012 id_rsa.pub\ndrwx------  5 sasha  staff   170B Jul 15 09:56 known_hosts\n\nAll that's in known_hosts is a pem file I used for ssh'ing (also with the \"authenticity...\" prompt) to an Amazon ec2 instance, though I tried copying id_rsa and id_rsa.pub there when things got desperate. \nAny idea what's going on? I'd love to fix this so I don't get prompted all the many times I push/pull.\nEDIT I followed these instructions successfully a while ago, so I do have my ssh keys on Github, and they're recognized, so that when I run ssh -T [email\u00a0protected], I get \nHi sashafklein! You've successfully authenticated, but GitHub does not provide shell access.\n\nIt seems to be exclusively my local computer that's unhappy with my ssh situation."}, {"role": "assistant", "content": "In your specific case, your known_hosts is a folder, so you need to remove it first.\nFor other people which experiencing similar issue, please check the right permission to your ~/ssh/known_hosts as it may be owned by different user (e.g. root). So you may try to run:\nsudo chown -v $USER ~/.ssh/known_hosts\n\nto fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push to origin from GitHub action\n\nI'm trying to push to origin remote from GitHub action. The logic of my action is:\n\nhandle pull_request_review events and filter by comment message\ncheckout to master, merge PR branch, run some checks and push it to origin\n\nThe script is:\nif [[ \"${GITHUB_EVENT_NAME}\" != \"pull_request_review\" ]]; then\n  echo \"unsupported event: ${GITHUB_EVENT_NAME}\"\n  exit 1\nfi\n\nuser=$(jq -r .review.user.login ${GITHUB_EVENT_PATH})\ncmd=$(jq -r .review.body ${GITHUB_EVENT_PATH})\necho \"reviewer is ${user}, command is ${cmd}\"\n\nif [[ \"${cmd}\" == \"merge\" ]]; then\n  head=$(jq -r .pull_request.head.ref ${GITHUB_EVENT_PATH})\n  git config user.email [email\u00a0protected]\n  git config user.name test\n  git checkout -B _tmp origin/${head}\n  git checkout -B master origin/master\n  git merge --no-ff _tmp\n  git push origin master\nfi\n\nI'm running this script from alpine:3.10 Docker container:\nFROM alpine:3.10\n\nLABEL \"com.github.actions.name\"=\"Hello world action\"\nLABEL \"com.github.actions.icon\"=\"shield\"\nLABEL \"com.github.actions.color\"=\"green\"\n\nWORKDIR /app\nCOPY action.sh action.sh\nRUN apk --update add bash git jq\nCMD [\"bash\", \"/app/action.sh\"]\n\nFirst steps are working fine (checkout and merge), but action failed to push the merge to origin because of the error:\n\n+ git push origin master\n  fatal: could not read Username for 'https://github.com': No such device or address\n\nIt looks like GitHub-action Docker container is not configured to push to GitHub. How can I configure it? Is it possible to use some of the env variables provided by GitHub or maybe some mounted files (like in /github/* path)?"}, {"role": "assistant", "content": "actions/checkout@v2 onwards\nFrom version 2 of checkout, the detached HEAD state issue is resolved and simplifies pushing to origin.\nname: Push commit\non: push\npermissions:\n  contents: write\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git commit -am \"Automated report\"\n          git push\n\nIf you need the push event to trigger other workflows, use a repo scoped Personal Access Token.\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT }}\n\nactions/checkout@v1 (original answer)\nTo add some further detail to the excellent answer by @rmunn. The problem is that the actions/checkout@v1 action leaves the git repository in a detached HEAD state. See this issue about it for more detailed information: https://github.com/actions/checkout/issues/6\nHere is a complete example to demonstrate how to get the checked out repository to a usable state and push to the remote.\nname: Push commit\non: push\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n          git checkout \"${GITHUB_REF:11}\"\n          git commit -am \"Automated report\"\n          git push\n\nTo include untracked (new) files change the workflow to use the following.\n          git add -A\n          git commit -m \"Automated report\"\n\nThe above workflow should work for the majority of events. For on: pull_request workflows the merging branch (GITHUB_HEAD_REF) should be checked out to replace the default merge commit.\nImportant: If you have other pull request checks besides the following workflow then you must use a Personal Access Token instead of the default GITHUB_TOKEN.\nThis is due to a deliberate limitation imposed by GitHub Actions that events raised by a workflow (such as push) cannot trigger further workflow runs.\nThis is to prevent accidental \"infinite loop\" situations, and as an anti-abuse measure.\nUsing a repo scoped Personal Access Token is an approved workaround. See this GitHub issue for further detail on the workaround.\nname: Push commit on pull request\non: pull_request\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n        with:\n          ref: ${{ github.head_ref }}\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}\n          git commit -am \"Automated report\"\n          git push\n\nFor further examples of push to origin during an on: pull_request workflow see this blog post, GitHub Actions: How to Automate Code Formatting in Pull Requests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unfork a GitHub fork without deleting\n\nI would like to \"unfork\" a GitHub fork without deleting + recreating it. Is this possible?\nMy reason is that my project now has a completely different use to the source of the fork, and makes no sense to be showing number of commits ahead, or the pull request button (or at least, with such prominence). With hindsight, I think I would have just git cloned the original, rather than made a fork.\nI would like to not delete my fork in order to keep the issues + history of pull requests made.\nI am happy to keep the history of commits, it's just the removal of the fork status that I'm after."}, {"role": "assistant", "content": "Note: The following does not migrate GitHub specific metadata (issues, pull requests, wikis, releases, etc).\nUndoubtedly, there's no way but make a bare copy of all of the codes. However, the copy procedure can be done by GitHub itself. So, no pain of mirroring the code with our own bandwidth.\nStep by step:\n\nClick the \"+\" on top right corner, select \"Import repository\"\nPaste the old repo url (like https://github.com/user/repo) and enter a new name.\nClick \"Begin import\"\n\nDone. GitHub will even give you an email notification when copy'n'paste is done.\n\nUpdates on Jan, 2023.\nGithub support now provide \"unfork\" operation upon request. Just open a support ticket at https://support.github.com/contact?tags=rr-forks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I run a GitHub Action from a branch other than 'master'?\n\nI have a repository in GitHub and I want to create an Action to build a Docker image and push it to the Docker Hub. I know how to do it, but if I create the action in a branch other than master, GitHub does not run it.\nThis is a known problem (Workflow files only picked up from master?).\nHow can I fix it?"}, {"role": "assistant", "content": "According to the official GitHub Actions documentation (Triggering a workflow):\n\nThe following steps occur to trigger a workflow run:\n\nAn event occurs on your repository, and the resulting event webhook has an associated commit SHA and Git ref.\n\nThe .github/workflows directory in your repository is searched for workflow files at the associated commit SHA or Git ref. The workflow files must be present in that commit SHA or Git ref to be considered.\n\nFor example, if the event occurred on a particular repository branch, then the workflow files must be present in the repository on that branch.\n\nThe workflow files for that commit SHA and Git ref are inspected, and a new workflow run is triggered for any workflows that have on: values that match the triggering event.\n\nThe workflow runs on your repository's code at the same commit SHA and Git ref that triggered the event. When a workflow runs, GitHub sets the GITHUB_SHA (commit SHA) and GITHUB_REF (Git ref) environment variables in the runner environment. For more information, see \"Using environment variables.\"\n\n\n\nBecause of this, in order to test the workflows we need to perform a git action (ie. do push) in the created branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to disable osxkeychain as credential helper in git config?\n\nI need to disable the credential helper for OS X: git credential-osxkeychain \nIt is disabled both in the global config file and in the local one, in fact it has never ben enabled. Still, it keeps memorizing my github login details.\nI'm on a laptop, so I don't want automatic passwordless access to my repos.\nI will use ssh keys. This is a new computer, and the whole system setup is still a work in progress.\nFor now I used the https repo refs, and the credential helper keeps kicking in.  \nThese are my conf files:  \n\ngit config --edit =>\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = false\n[remote \"origin\"]\n    url = https://github.com/user/repo.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[branch \"develop\"]\n    remote = origin\n    merge = refs/heads/develop\n[branch \"deploy\"]\n    remote = origin\n    merge = refs/heads/deploy\n\n\ngit config --global --edit =>\n[user]\n    email = ****************\n    name = tom\n[color]\n    ui = true\n[core]\n    editor = subl -w\n[github]\n    user = tompave\n[merge]\n    conflictstyle = diff3\n[push]\n    default = simple\n\n\nAlso, running git config --global credential.helper returns nothing (and that's right).  \nHowever, running git config credential.helper returns osxkeychain!  \nHow is it possible? I can't see it in the local config file, where is it set?  \nI tried to set it up locally to see what would happen, and it did appear in the repodir/.git/config. Then I deleted the entry... but the helper is still here and active.  \nI can clearly see its entry in OS X keychain.\nI can delete it, and then git will ask for the password again... but as soon as I type it (let's say, for a git fetch), the entry in keychain is restored."}, {"role": "assistant", "content": "To help track down the setting, I'd try to use:\ngit config --local credential.helper\ngit config --global credential.helper\ngit config --system credential.helper\n\nThe first one checks the local repo config, the second is your ~/.gitconfig, and the third is based on where git is installed.  Depending on which one comes back showing the credential helper, you can try using the equivalent --unset option:\ngit config --local --unset credential.helper\ngit config --global --unset credential.helper\ngit config --system --unset credential.helper\n\nThe last one may not work if you don't have proper permissions.  So you may need to run the last one under sudo for it to work correctly.  FWIW, you may have installed for the pre-built git images for Mac OS X.  If you cat /usr/local/git/etc/gitconfig (or /usr/local/etc/gitconfig if you installed git via Homebrew or a building locally), you'll see that it does set up the credential helper for you.  So the last command above would help fix that problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cancel previous runs in the PR when you push new commits(update the current) in github-actions\n\nWhen I push my commits to a PR my tests are triggered for this commit. After that, if I push additional commits to this PR, tests in Github Actions runs on both commits.\nI need to cancel the previous run and run only on the most recent pushed commit.\nHow can I configure my yaml file to achieve that?"}, {"role": "assistant", "content": "To cancel a currently running workflow from the same PR, branch or tag when a new workflow is triggered you can use:\nname: Workflow X\n\non: # ...\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs: # ...\n\nExplanation:\n\n${{ github.workflow }}: the workflow name is used to generate the concurrency group (e.g. Workflow 1). That allows you to have more than one different workflow (eg. workflow1.yaml and workflow2.yaml) triggered on the same event (e.g. a PR). Otherwise, workflow1.yaml would cancel workflow2.yaml or viceversa.\n${{ github.event.pull_request.number: when the trigger event is a PR, it will use the PR number to generate the concurrency group (e.g. workflow1-33).\n|| github.ref }}: when the trigger is not a PR but a push, it will use the branch or tag name to generate the concurrency group (e.g. workflow1-branch1).\ncancel-in-progress: true: if cancel-in-progress is omitted or set to false, when a new workflow is triggered, the currently running workflow won't be cancelled, and the new workflow will be queued pending until the previous one is done.\n\nRef: https://docs.github.com/en/actions/using-jobs/using-concurrency"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "I need to pop up and trash away a \"middle\" commit in my master branch. How can I do it?\n\nFor example, in the following master branch, I need to trash just the commit af5c7bf16e6f04321f966b4231371b21475bc4da, which is the second due to previous rebase:\ncommit 60b413512e616997c8b929012cf9ca56bf5c9113\nAuthor: Luca G. Soave <[email\u00a0protected]>\nDate:   Tue Apr 12 23:50:15 2011 +0200\n\n    add generic config/initializers/omniauth.example.rb\n\ncommit af5c7bf16e6f04321f966b4231371b21475bc4da\nAuthor: Luca G. Soave <[email\u00a0protected]>\nDate:   Fri Apr 22 00:15:50 2011 +0200\n\n    show github user info if logged\n\ncommit e6523efada4d75084e81971c4dc2aec621d45530\nAuthor: Luca G. Soave <[email\u00a0protected]>\nDate:   Fri Apr 22 17:20:48 2011 +0200\n\n    add multiple .container at blueprint layout\n\ncommit 414ceffc40ea4ac36ca68e6dd0a9ee97e73dee22\nAuthor: Luca G. Soave <[email\u00a0protected]>\nDate:   Thu Apr 21 19:55:57 2011 +0200\n\n    add %h1 Fantastic Logo + .right for 'Sign in with Github'\n\nI need to mantain\n\nthe First commit 60b413512e616997c8b929012cf9ca56bf5c9113,\nthe Third commit e6523efada4d75084e81971c4dc2aec621d45530 and\nthe Last commit 414ceffc40ea4ac36ca68e6dd0a9ee97e73dee22\n\n\"throwing away\" just the Second commit af5c7bf16e6f04321f966b4231371b21475bc4da\nHow can I do that?"}, {"role": "assistant", "content": "Rebase or revert are the options. Rebase will actually remove the commit from the history so it will look like that second commit never existed. This will be a problem if you've pushed the master branch out to any other repos. If you try to push after a rebase in this case, git will give you a reject non fast-forward merges error.\nRevert is the correct solution when the branch has been shared with other repos. git revert af5c7bf16 will make a new commit that simply reverses the changes that af5c7bf16 introduced. This way the history is not rewritten, you maintain a clear record of the mistake, and other repos will accept the push.\nHere's a good way to erase: git rebase -i <commit>^\nThat takes you to the commit just before the one you want to remove. The interactive editor will show you a list of all the commits back to that point. You can pick, squash, etc. In this case remove the line for the commit you want to erase and save the file. Rebase will finish its work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub pages and relative paths\n\nI have created a gh-pages branch for a project that I am working on at GitHub.\nI use Sublime text to author the website locally and my problem is that when this is pushed to GitHub, all the  links to javascrips, images, and css files are invalid.\nFor instance, I have this in my head section.\n<link href=\"assets/css/common.css\" rel=\"stylesheet\">\n\nThis works great locally, but it does not work from GitHub as the links are not resolved using the repository name as part of the URL.\nIt asks for: \nhttp://[user].github.io/assets/css/common.css\n\nwhen it should have been asking for: \nhttp://[user].github.io/[repo]/assets/css/common.css.\n\nI could of course put the repo name as part of the URL, but that would prevent my site to work locally during development. \nAny idea how to deal with this?"}, {"role": "assistant", "content": "You'll need to use Jekyll.\nCopying verbatim from the relevant documentation:\n\nSometimes it\u2019s nice to preview your Jekyll site before you push your\n  gh-pages branch to GitHub. However, the subdirectory-like URL\n  structure GitHub uses for Project Pages complicates the proper\n  resolution of URLs. Here is an approach to utilizing the GitHub\n  Project Page URL structure (username.github.io/project-name/) whilst\n  maintaining the ability to preview your Jekyll site locally.\n\nIn _config.yml, set the baseurl option to /project-name \u2013 note the leading slash and the absence of a trailing slash.\nWhen referencing JS or CSS files, do it like this: {{ site.baseurl}}/path/to/css.css \u2013 note the slash immediately following\n  the variable (just before \u201cpath\u201d).\nWhen doing permalinks or internal links, do it like this: {{ site.baseurl }}{{ post.url }} \u2013 note that there is no slash between\n  the two variables.\nFinally, if you\u2019d like to preview your site before committing/deploying using jekyll serve, be sure to pass an empty\n  string to the --baseurl option, so that you can view everything at\n  localhost:4000 normally (without /project-name at the beginning):\n  jekyll serve --baseurl ''\n\nThis way you can preview your site locally from the site root on\n  localhost, but when GitHub generates your pages from the gh-pages\n  branch all the URLs will start with /project-name and resolve\n  properly.\n\n(Apparently someone figured this out only a few months ago.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add a GitHub personal access token to Visual Studio Code\n\nI received an email saying GitHub will require token authentication after August 13 2021. I want to ensure I don't have an interruption of service (push/pull) after this date.\nSo I logged into GitHub and created a token for my single repository.\nNow I want to use the token to push/pull my repository from GitHub, in Visual Studio Code, which uses Git and the command line, which I have installed on my Mac.\nWhat do I do to add/replace the password from GitHub with the generated token I just created to push/pull from my repository? Can I do it from Visual Studio Code or does it get added from the terminal command line?"}, {"role": "assistant", "content": "Follow these simple steps to set up GitHub authentication with a personal access token:\n\nOpen a command line window on your PC or Terminal on Mac\n\nSet the current directory to your project root\ncd C:\\Users\\Giddy\\source\\repo\\MySampleProject\n\n\nRun the command to set remote access via a token\ngit remote set-url origin https://username:[email\u00a0protected]/username/repository.git\n\nExample:\ngit remote set-url origin https://sampleuser:a7b19929***[email\u00a0protected]/sampleuser/sampleproject.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to unwatch multiple repos easily on github?\n\nI realize I watch too many repos in GitHub and the only way I've found to unwatch many of them is going to github.com/my_user_name/following, getting inside each of them and pressing Unwatch button.\nIsn't there any way to unwatch them faster and easily?"}, {"role": "assistant", "content": "For the lazy, one can do this without the API reasonably quickly at this url: https://github.com/watching\nA clean simple list, click click click click.\nAdditionally, there's a box that is golden. Uncheck it to not automatically be set to watch all repos you're given push access to. Hooray for managing the signal to noise ratio."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to resolve \"git pull,fatal: unable to access 'https://github.com...\\': Empty reply from server\"\n\nIt's failed when I used Git command \"git pull\" to update my repository, messages as below:\nfatal: unable to access '...': Empty reply from server. \nAnd the I tried to use the GitHub App, but alert this: \nCloning into 'renren_mobile'...\nwarning: templates not found /Applications/GitHub.app/Contents/Resources/git/templates\n2014-11-23 13:58:57.975 GitHub for Mac Login[659:11891] AskPass with arguments: (\n    \"/Applications/GitHub.app/Contents/MacOS/GitHub for Mac Login\",\n    \"Username for 'https://github.com': \"\n)\n2014-11-23 13:58:58.032 GitHub for Mac Login[660:11915] AskPass with arguments: (\n    \"/Applications/GitHub.app/Contents/MacOS/GitHub for Mac Login\",\n    \"Password for '': \"\n)\nfatal: unable to access '...': Empty reply from server\n (128)"}, {"role": "assistant", "content": "I was stuck in this problem until I noticed that I was not logged into my VPN.\n\nIf you have configured your proxy for a VPN, you need to login to your VPN to use the proxy.\n\nto use it outside the VPN use the unset command:\ngit config --global --unset http.proxy\n\n\n\nAnd remember to set the proxy when within the VPN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Clone succeeded, but checkout failed\n\nI am having some problems working with \ngit clone.The files are downloaded in my local git folder. Running the command\ngit checkout -f HEAD gives me-\nError:\n\n'The unable to write new index file error caused by the lack of disk space'. \n\nI've manually removed big files from my computer, but still getting the same error.\nCloning into 'ffmpeg'...\nremote: Counting objects: 7890, done.  \nremote: Compressing objects: 100% (4412/4412), done.\nReceiving objects: 100% (7890/7890), 299.75 MiB | 24.19 MiB/s, done.\nremote: Total 7890 (delta 3346), reused 7846 (delta 3317)\nResolving deltas: 100% (3346/3346), done.\nChecking out files: 100% (7019/7019), done.\nfatal: unable to write new index file\nwarning: Clone succeeded, but checkout failed.\nYou can inspect what was checked out with 'git status'\nand retry the checkout with 'git checkout -f HEAD'"}, {"role": "assistant", "content": "For me this was due to long file names and doing a simple config as below resolved it\n\ngit config --system core.longpaths true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Download github release with curl\n\nOn this URL I'm able to download a .tar.gz which contains an official release. (I know it's also available on an API endpoint but this contains the test package too.\nNow I'm wondering why this isn't working:\n$ curl -O https://github.com/yarnpkg/yarn/releases/download/v0.23.4/yarn-v0.23.4.tar.gz\n\nI get some .tar.gz which is 4KB instead of 3.6MB. It isn't showing an error. What am I missing? I want to use this URL and not the API if that's possible."}, {"role": "assistant", "content": "If you do the following it will download correctly:\nwget https://github.com/yarnpkg/yarn/releases/download/v0.23.4/yarn-v0.23.4.tar.gz\n\nIf you want to use curl you have to use the redirect -L option to follow redirect link and direct the output in a file like this:\ncurl -L https://github.com/yarnpkg/yarn/releases/download/v0.23.4/ya\u200c\u200brn-v0.23.4.tar.gz > yarn.tar.gz"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to relaunch GitHub check without pushing new commits?\n\nI'm currently using GitHub with a basic Jenkins integration (with the GitHub plugin): each time I push something, my Jenkins tests are triggered and the status is reported to GitHub.\nFor some dirty reasons (and I know the root cause is here), my tests could randomly fail and then report a failed status to GitHub (which blocked the possibility to merge the PR: and that's the expected behavior).\nDo you know if it's possible to relaunch the tests without pushing a new commit? Because I know if I relaunch the tests, they will pass."}, {"role": "assistant", "content": "Update: you can also push an empty commit to your branch to re-trigger status checks: git commit -m \"retrigger checks\" --allow-empty and then git push <branchname>\nUpdate: You can create an alias in the gitconfig file to make it simpler:\nretriggerchecks = \"!f() { git commit -m\\\"Retriggering checks\\\" --allow-empty && git push ;}; f\"\n\nrtc = \"!f() { git retriggerchecks ;}; f\"\n\nOne longname alias and a short one.\nYou can also do this by closing and then re-opening the Pull Request. This will cause all status checks to run again on the same commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I change which GitHub project I forked from?\n\nI forked a project, made some changes, and got a pull request accepted. But now, the project I forked moved to another repository and is a fork of that repository.\nThat is:\nOriginal -> MyFork\n\nNow:\nNewOriginal -> Original -> MyFork\n\nHow would I get it to the following?\nNewOriginal -> MyFork"}, {"role": "assistant", "content": "NOTE: The following solution is incomplete as you'll lose all wiki content and issues specific to your fork.\nYou can achieve this using the following steps:\n\nPull down all branches and tags from your existing fork.\nDelete your repository on GitHub.\nFork from the new repository.\nUpdate the remote URL if necessary.\nPush all your local branches and tags to the new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I tell if a file will be uploaded to git lfs correctly?\n\nI'm trying to add everything under MyProject/Frameworks/ to git-lfs (large file storage). I'm not sure what the proper format for matching all files and folders recursively under the Frameworks folder is. This answer says the proper format is git lfs track \"MyProject/Frameworks/**\", but Atlassian's help document says I should use git lfs track \"MyProject/Frameworks/\". I tried both and they didn't use git lfs for storage. It tried uploading files directly.\nSure, I'd love to know the proper format, but more importantly, before I attempt to push my changes to github, I'd like to verify that the match and files do indeed work correctly. This'll allow me to iterate and try new things.\nI see two related commands that might help: git lfs status and git lfs ls-files. It's not clear which one I should be using and what output I should be looking for. For example, when I ran git lfs status, it showed me a ton of files under Git LFS objects to be committed, making me think they would be added to Git LFS. However, after attempting to push to GitHub.com, I realized that it was clearly not the case. If it helps, the output for these files always had something like (Git: edee1ad) after each file name.\nWhen I attempt to use git lfs ls-files I'm not sure if I need to run it after git adding the files, after committing them, or after pushing them. Most of the time it's just showing me blank output.\nEssentially the question is: If I configured git lfs correctly, what tool (e.g. git lfs status) should I use, and what output should I look for before I attempt to commit/push?\nNote: Please don't answer the question with only how to match all recursive files as that will help me once (this specific case), rather than allowing me to iterate and try new things (any case)."}, {"role": "assistant", "content": "TL;DR\nIf everything is set up correctly, you can verify that git LFS is going to work properly by:\n\ngit add the file(s) in question.\nDo one of the following:\n\n\nRun git lfs status and ensure the file(s) in question appear under Git LFS objects to be committed, and that they have the LFS value in parenthesis; or\nRun git lfs ls-files and ensure the file(s) in question appear in this output.\n\n\n\n\u26a0\ufe0f Important: After running git lfs track, you must run git add to refresh the state of files before calling git lfs status or git lfs ls-files. Otherwise you'll see irrelevant output from those commands.\n\nAlso, for the record, looks like git lfs track \"MyProject/Frameworks/**\" is the correct one for recursive matching.\n\nSet up and testing methodology:\n\ngit lfs track \"*.lfs\". This generates .gitattributes. Leave it unstaged.\nCreate a file in the root directory, Test.lfs. Leave it unstaged.\nTest:\n\ngit lfs status: no filenames output\n$ git lfs status\nOn branch master\nGit LFS objects to be pushed to origin/master:\n\n\nGit LFS objects to be committed:\n\n\nGit LFS objects not staged for commit:\n\n\n$\n\ngit lfs ls-files: no output\n$ git lfs ls-files\n$\n\n\nAdd git add Test.lfs.\nTest:\n\ngit lfs status: Test.lfs will now be listed with an LFS suffix.\n$ git lfs status\nOn branch master\nGit LFS objects to be pushed to origin/master:\n\n\nGit LFS objects to be committed:\n\n        Test.lfs (LFS: 2ab9f1e)\n\nGit LFS objects not staged for commit:\n\n\n$\n\ngit lfs ls-files: Test.lfs will now be listed. \n$ git lfs ls-files\n2ab9f1e447 * Test.lfs\n$\n\n\nCommit changes.\nTest:\n\ngit lfs status: Test.lfs will move to the \"to be pushed\" section. It will have a suffix such with a bunch of numbers/letters.\n$ git lfs status\nOn branch master\nGit LFS objects to be pushed to origin/master:\n\n        Test.lfs (2ab9f1e44720efb7a26553e06b667a270320efb3e906553b3f9e0702538a2b3f)\n\nGit LFS objects to be committed:\n\n\nGit LFS objects not staged for commit:\n\n\n$\n\ngit lfs ls-files: Test.lfs will continue to be listed. \n$ git lfs ls-files\n2ab9f1e447 * Test.lfs\n$\n\n\nPush changes. Including adding/committing/pushing .gitattributes.\nTest:\n\ngit lfs status: no filenames output anymore\n$ git lfs status\nOn branch master\nGit LFS objects to be pushed to origin/master:\n\n\nGit LFS objects to be committed:\n\n\nGit LFS objects not staged for commit:\n\n\n$\n\ngit lfs ls-files: Continues to output the tracked file\n$ git lfs ls-files\n2ab9f1e447 * Test.lfs\n$\n\n\n\nConclusions:\n\nThe Git LFS objects not staged for commit section seems misleading as it never displayed any files, even those that should have been tracked by LFS.\nIf you attempt to do the previous experiment with a non git-lfs tracked file, you'll also notice that it appears under the Git LFS objects to be committed incorrectly. It is not a Git LFS object. The way you can tell that it's not actually a Git LFS object though is to look at how it ends. If it ends with (Git: 111111111) it won't be committed to LFS.\nTo avoid the above confusions, you may want to favor git lfs ls-files over git lfs status to determine if something is going to be part of git-lfs or not.\nAnother gotcha: Some applications such as Xcode will git add files in a weird way causing what should have been clear matches to not be considered for Git LFS. The solution is to unstage the files and then re-stage them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub wiki directories\n\nDoes the wiki that installs with a GitHub repo support directories?  Our wiki is cluttered with pages, and we are looking for a way to organize them better.\nWe tried pulling the repo, creating local directories, and moving things around, but when committed back, the wiki didn't pick up the changes."}, {"role": "assistant", "content": "I was having the exact same issue and tried variants of what you tried.  Nothing stuck.  Asked GitHub support about it and received a reply that essentially said \"No, but we'll let the developers know that people are interested in this feature.\"\nSo the short answer is \"No\", and the long answer is \"No, but maybe in the future.\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Contributing to project on github, how to \"rebase my pull request on top of master\"\n\nOk so I an contributing to a project on github. The project on github is upstream, my forked repo on github is origin, and my local repo on my computer.\ngit checkout -b feature\n# Working on feature\ngit commit -a -m 'only commit on feature'\n\nthen I submit a pull request \ngit push origin master\n\nThe pull request is reviewed and a unrelated change needs to be made. Someone else makes a commit and merge into upstream/master\nNow I am asked by the upstream maintainer to \"rebase my pull request on top of master\"\nThis is my story (insert Law and Order sound effect).....\nI did not make any changes to the pull request and its still the same commit on branch feature. \ngit checkout master\ngit fetch upstream\ngit checkout feature\ngit rebase master\n=> \"Current branch feature is up to date.\"\ngit push origin feature\n=> \"Everything up-to-date\"\n\nI don't understand. How is this possible when I know that someone committed and merged to upstream/master after I pushed my pull request to origin/feature?\nCan anyone tell me what the correct procedure should be in this situation?"}, {"role": "assistant", "content": "You only show a fetch on the upstream repo. That doesn't actually update any of your local branches. It only updates your knowledge of upstream. You'd need to ensure upstream/master is fully merged into your master, like with a git pull, prior to rebasing onto master, or more simply just rebase onto upstream/master.\nI.e:\ngit checkout master\ngit pull upstream master\ngit checkout feature\ngit rebase master\n\nor\ngit checkout feature\ngit fetch upstream master\ngit rebase upstream/master\n\nUpdate:\nAfter fixing your local feature branch, you'll need to push it back to origin to finish updating the pull request. Since you've pushed feature once already, you can't simply push again because a rebase changes history, and it's no long a fast-forward. Normally, whan a push fails with a \"non-fast-forward\", you'd resolve it by doing a pull, but a pull will just combine the two divergent histories, which is definitely not what you want. That would mean your old (pre rebase) feature branch would be combined with the new (post rebase) one. You want to overwrite origin/feature with the state of the new feature branch, dumping any record of the old one. That means you'll want to force the push to happen, even though it's not a fast-forward, using git push -f origin feature. Note: force pushing is dangerous, and you can lose commits with it. Only use it if you're absolutely sure you know what you're doing, like right here, where you intentionally want to drop the old, useless commits in the pre-rebase feature branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to view GitHub Contributors Graph for branches other than master?\n\nAt https://github.com/yourusername/yourreponame/graphs you can find some nice graphs showing commits over time. However the information is only for the master branch.\nHow do I see the same information for a branch other than master, or see a graphs taking account commits across all branches?\nIf this is not possible, how can I at least see how many line of code have been committed under a particular branch via the GitHub web GUI?\nIs any of this possible?"}, {"role": "assistant", "content": "Dangerous/Significant (see comments):\nI just stumble on this as well. You can actually see the graphs for other branches than the Master branch.\n\nOn Github in your repo - choose settings.\nIn settings - change your default branch to whatever branch you would like to see the graphs for."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins returned status code 128 with github\n\nWith GitHub command I have:\nssh -T [email\u00a0protected]\nHi (MyName)! You've successfully authenticated, but GitHub does not provide shell access.\n\nMy connection with GitHub is ok (no problem), but with Jenkins I have this error:\nERROR: Error cloning remote repo 'origin' : Could not clone [email\u00a0protected]:Name-MysRepo/MyRepo.git\nhudson.plugins.git.GitException: Could not clone [email\u00a0protected]:Name-MysRepo/MyRepo.git\n    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.clone(CliGitAPIImpl.java:219)\n    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:1001)\n    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:942)\n    at hudson.FilePath.act(FilePath.java:904)\n    at hudson.FilePath.act(FilePath.java:877)\n    at hudson.plugins.git.GitSCM.determineRevisionToBuild(GitSCM.java:942)\n    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1101)\n    at hudson.model.AbstractProject.checkout(AbstractProject.java:1369)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:676)\n    at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:88)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:581)\n    at hudson.model.Run.execute(Run.java:1575)\n    at hudson.maven.MavenModuleSetBuild.run(MavenModuleSetBuild.java:477)\n    at hudson.model.ResourceController.execute(ResourceController.java:88)\n    at hudson.model.Executor.run(Executor.java:241)\nCaused by: hudson.plugins.git.GitException: Command \"git clone --progress -o origin [email\u00a0protected]:Name-MysRepo/MyRepo.git /root/.jenkins/jobs/TestKRGDAOV01/workspace\" returned status code 128:\nstdout: Cloning into '/root/.jenkins/jobs/TestKRGDAOV01/workspace'...\n\nstderr: Permission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\nIs this problem with public key?\nI use Jenkins under Tomcat 7 / Ubuntu 12."}, {"role": "assistant", "content": "This error:\n stderr: Permission denied (publickey). fatal: The remote end hung up unexpectedly\nindicates that Jenkins is trying to connect to github with the wrong ssh key.\nYou should:\n\nDetermine the user that jenkins runs as, eg. 'build' or 'jenkins'\nLogin on the jenkins host that is trying to do the clone - that is, do not login to the master if a node is actually doing the build.\nTry you ssh to github - if it fails, then you need to add the proper key to <jenkins user home>/.ssh"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: have different .gitignore file for each remote\n\nI have a remote repo in which I want to commit certain files (the compiled files to deploy them on a cloud computing platform), but I don't want to deploy them on github...\nis there some way to have to different .gitignore files, one for each remote?"}, {"role": "assistant", "content": "This doesn't really make sense in git's model. Commits contain sets of files; all .gitignore files do is tell the UI not to automatically add files matching certain patterns. What this would effectively mean is to have parallel sets of commits that are almost the same, but containing only a subset of the files.\nIt'd be possible to do this with a branching scheme, where you have a \"deployment\" branch that splits off of master and is the same but contains the additional compiled files. This could even be automated with git hooks to automatically compile the files and add them to the repo. I'm envisioning a structure like this:\nmaster:       A ---> B ---> C ---> D\n               \\      \\      \\      \\\n                \\      \\      \\      \\\ndeployment:      -> A'  -> B'  -> C'  -> D'\n\ni.e. every time a certain server gets a new commit on master, it builds the project, adds the built files to a new commit from D, and commits that to the deployment branch -- which then doesn't have to be pushed to github."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Hub Desktop on Mac, error: cannot run gpg: No such file or directory\n\nTrying to commit my changes by using GitHub Desktop and getting this:\n\n\nerror: cannot run gpg: No such file or directory\nerror: could not run gpg.\nfatal: failed to write commit object\n(128)\n\nFirstly that not worked for terminal too and i create gpg-key and plugged in to my GitHub Account\nNow it's  working well in Terminal but Desktop version still not working.\n\nIn Oficial doccumentation for GitHub Desktop i found some notation:\nNote: GitHub Desktop does not support GPG signing."}, {"role": "assistant", "content": "Solved it.\nSo as GitHub Desktop was complaining about not being able to find gpg (I had installed it via homebrew), I figured there should be a way to tell git the exact path of gpg, turns out there is:\n\ngpg.program\nUse this custom program instead of \"gpg\" found on $PATH when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, \"gpg --verify $file - <$signature\" is run, and the program is expected to signal a good signature by exiting with code 0, and to generate an ASCII-armored detached signature, the standard input of \"gpg -bsau $key\" is fed with the contents to be signed, and the program is expected to send the result to its standard output.\nhttps://git-scm.com/docs/git-config\n\nSo running the following solved the problem:\ngit config --global gpg.program \"$(which gpg)\"\n\nGitHub got back to me and said that some users also need to use:\necho \"no-tty\" >> ~/.gnupg/gpg.conf"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Squash all my commits into one for GitHub pull request [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I squash my last N commits together?\n\n                                (46 answers)\n                            \n\nClosed 6 years ago.\n\n\n\nI made a pull request on GitHub. Now the owner of the repository is saying to squash all the commits into one.\nWhen I type git rebase -i Notepad opens with the following content:\nnoop\n\n# Rebase 0b13622..0b13622 onto 0b13622\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\nI searched on Google but I do not understand how to do this."}, {"role": "assistant", "content": "Just a simple addition to help someone else looking for this solution. You can pass in the number of previous commits you would like to squash. for example,\ngit rebase -i HEAD~3 \n\nThis will bring up the last 3 commits in the editor."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Authentication Failed - ... GitHub does not provide shell access\n\n$ git remote add origin [email\u00a0protected]:lut/EvolutionApp.git\nfatal: remote origin already exists.\n\n$ git push -u origin master\nfatal: 'EvolutionApp' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nMy keys were added succesfully\n $ ssh -T [email\u00a0protected]\n Hi lut! You've successfully authenticated, but GitHub does not provide shell access.\n\nThe Github article https://help.github.com/articles/generating-ssh-keys/ says that \"Shell access\" should not be an issue? What could the problem be?"}, {"role": "assistant", "content": "Try and redefine the ssh url for remote origin:\ngit remote set-url origin [email\u00a0protected]:lut/EvolutionApp.git\n\nAnd try again.\nOnly git remote set-url can change an existing remote URL (as opposed to git remote add, to add a new remote name and URL)\nHere, the issue was the URL of the existing remote 'origin', EvolutionApp: it needed to be replaced by a valid one.\nUsing git config url.\"ssh://[email\u00a0protected]/\".insteadOf https://github.com/ would not have helped, considering there was no HTTPS URL in the first place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pushing to remote GitHub repository as wrong user\n\nI have a work GitHub account and a personal one. First I used the personal one for test projects, then I moved on and did a repository with the other account on the same computer.\nNow I wanted to create a new repository on my personal account again, I changed the global and local user.name, and did a new ssh key pair, entered in the GitHub setup page. Then I set up the directory\ngit init\ngit remote add origin <url>\ngit push origin\n\nbut that now tells me\n\nERROR: Permission to personaluser/newrepo.git denied to \n\nI have no idea how the other account is connected to this one. .git/config shows no workusername related things.\nIf you're using Windows 10 take your time to read the Rajan's answer."}, {"role": "assistant", "content": "this sounds very similar to my current work set up.  it seems that you already have set up your separate ssh-keys so you also need to create a ~/.ssh/config file and populate it with information similar to this:\nHost work.github.com\n    HostName github.com\n    User WORK_GITHUB_USERNAME\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_work_rsa\n    IdentitiesOnly yes\n\nHost personal.github.com\n    HostName github.com\n    User PERSONAL_GITHUB_USERNAME \n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_personal_rsa\n    IdentitiesOnly yes\n\nEvery property sounds pretty self explanatory but the IdentitiesOnly one.  I won't try to explain what that is for, but that is in my current setup and works fine.\nIt's also worth noting that the Host URL is just a pointer to grab the correct user settings and does not have any affect on getting the files correctly to your target HostName url.\nNow you just need to make sure your origin (or any remote in general) url match the correct Host url in your respective repos depending on your user name.  If you already have existing personal repos, you can edit that repo's .git/config file in your text editor:\n[remote \"origin\"]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    url = [email\u00a0protected]:PERSONAL_GITHUB_USERNAME/project.git\n\nor do it via command line:\ngit remote set-url origin [email\u00a0protected]:PERSONAL_GITHUB_USERNAME/project.git\n\nLikewise to your work one:\n[remote \"origin\"]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    url = [email\u00a0protected]:your_work_organization/project.git\n\nor again, via command line:\ngit remote set-url origin [email\u00a0protected]:your_work_organization/project.git\n\nOf course, you can always set one of your Host urls in your ~/.ssh/config file as just\nHost github.com\n\nI only used work.github.com to see the config relationships easier.\nOnce these are all set, you should be able to push to each respective remote.\nEDIT\nOne thing to note that I just found out myself is that if you ever set global git config values for your user.email value (and i'm guessing user.name would send a different value as well), git will show your commits as that email user.  To get around this, you can override the global git config settings within your local repository:\n$ git config user.name \"John Doe\"\n$ git config user.email [email\u00a0protected]\n\nThis should now send up commits as the correct user for that repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move tag one commit ahead\n\nI have a repository with only one branch (master). I'm the only contributor to my repo.\nI've recently added a tag, both locally and pushed to GitHub. After making what I though was the last necessary commit, but now I realize I should have made one more change/commit.\nSo what I have is:\ncommit 124\ncommit 125\ncommit 126 <-- tag v1.0\ncommit 127\n\nand I want to move the v1.0 tag to the next commit, ie: 127, both locally and in GitHub.\nHow can I do that?"}, {"role": "assistant", "content": "Have you ever been to a book club where members do not all use the same edition of the \"book of the week\"? It's a nightmare, right? Moving a tag would essentially put you in the same situation.\nIf you think of your repository as a book that chronicles progress in your project, you can think of a tag as a chapter heading.\n\nMoving a tag to a different commit after sharing it is like telling all your book-club buddies\n\nYou know what, guys? The edition of the book we've all been using so far is now obsolete, because I have solely decreed that chapter 8 shall now start, not on page 126, but on page 128.\n\nNot good. Moving a tag is a form of history rewriting, and you shouldn't rewrite history that has been shared. It's the surest way to piss your collaborators off. Besides, you write\n\nI'm the only contributor to my repo [...]\n\nThat may be true for now, but if other people than you have access to your GitHub repository (e.g. if it's public), some of them may already have forked or cloned it (although there is a way to find out), and you run the risk of pissing them off if you rewrite history.\n\nIf you're 100% sure that you want to move that tag anyway, Git does allow you to do it. Here, you could use\ngit tag --force v1.0 <ID-of-commit-127>\n\nand then you would have to force push that tag, using\ngit push --force --tags\n\nBut again, think twice before going ahead...\nAddendum (2018/09/26)\nI feel the need to revisit my answer...\nOver the years, some people have objected in the comments to my injunction not to move an already published tag. Of course, this piece of advice is contextual rather than universal; I don't doubt that good cases for moving a published tag exist. However, I stand firm in the belief that, as a general rule, the decision to move a published tag should be made deliberately and with extreme care.\nOne recent example comes to mind. Go 1.11 added experimental support for a module system that relies heavily on Git tags for versioning. Moving a tag in a Go module that has been published (on GitHub, say) would have disastrous consequences.\nBy doing so, you would break the contract established between you (the module author) and your users (those who depend on your module), because you would negate the guarantees that Go's module system intends to provide:\n\nModules record precise dependency requirements and create reproducible builds.\n\nThat's one sure way to piss people off.\nThis example may be enough to convince you that, at least in some cases, you shouldn't mindlessly move published tags. I rest my case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why Git is not allowing me to commit even after configuration?\n\nThis question seems like a duplicate but it's really not. Just a slight difference that keeps on repeating. git keeps on telling me: \"please tell me who you are\", even after setting it up. when I run git commit, this is what I get....\n$ git commit\n\n*** Please tell me who you are.\n\nRun\n\ngit config --global user.email \"[email\u00a0protected]\"\n\ngit config --global user.name \"Your Name\"\n\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\n\nfatal: unable to auto-detect email address (got 'Obby@ObbyWorkstation.(none)')\n\nBut when I run git config --global -l, it gives me all my details...\n$ git config --global -l\nuser.name=myname\n[email\u00a0protected]\nhttp.proxy=proxy.XX.XX.XX:XXXX\n\nI have changed my name, email and proxy but they are appearing fine when I run the command, even in the .gitconfig file I can see the values are set. what could be the missing thing, because I cannot commit at all. Every time it keeps asking me who I am ?\n@sheu told me something that i changed, but still the same problem. when i set --local, still git commit asks me the same question. this is the output\n$ git config --local -l\ncore.repositoryformatversion=0\ncore.filemode=false\ncore.bare=false\ncore.logallrefupdates=true\ncore.symlinks=false\ncore.ignorecase=true\ncore.hidedotfiles=dotGitOnly\nuser.name=myname\n[email\u00a0protected]"}, {"role": "assistant", "content": "That\u2019s a typo. You\u2019ve accidently set user.mail with no e in email. Fix it by setting user.email in the global configuration with\ngit config --global user.email \"[email\u00a0protected]\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Pages for Private Repository [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 4 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nAnyone know if there's a way to create GitHub Pages for a Private Repo?\nI was just thinking about the possibility to use GitHub Pages to host a small website, but keep the source repository private. This way the only way the content would be exposed would be through the public GitHub Pages URL.\nFYI, I would just try it and see, but I don't want to convert to a paid GitHub account at this point until I know if this is possible."}, {"role": "assistant", "content": "As of August 2020\nIt is only possible with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server.\n\nSee: What is GitHub pages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": ".gitignore is not ignoring directories\n\nWhat I did:\nI think there were some weird configurations from the github gui that caused this issue and prevented me from being able to easily use git from command line or even git-bash.\nI ended up just uninstalling github and git then reinstalling just git for windows. I now have everything running off the command line(except ssh which I run from git-bash). Much easier and more reliable that the github gui.\nThanks to mu \u7121 for taking the time to try to figure this out. I didn't end up using his answer, but if I hadn't needed to do a reinstall of git it would have been what I needed to do.\n\nI am using the github gui on my local machine. I just noticed that a commit I was about to make was going to update all of my recently update node modules. I set up my .gitignore to ignore the entire node_modules/ directory.\nI'm not sure what to do about this. All the file types I included in .gitignore were ignored. It's just the directories that it seems to ignore.\nHere is my .gitignore file:\n#################\n## Sublime Text\n#################\n\n*.sublime-project\n*.sublime-workspace\n\n#################\n## Images\n#################\n\n*.jpg\n*.jpeg\n*.png\n*.gif\n*.psd\n*.ai\n\n#################\n## Windows detritus\n#################\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n#################\n## Directories\n#################\n\ndev/\ncms/core/config/\nnode_modules/"}, {"role": "assistant", "content": "Since the node_modules directory is already tracked as part of the repository, the .gitignore rule will not apply to it.\nYou need to untrack the directory from git using\ngit rm -r --cached node_modules\ngit commit -m \"removing node_modules\"\n\nYou can run the above 2 in git-bash.\nAfter this, the .gitignore rule will ignore the directory away.\nNote that this will remove the directory node_modules from your other repos once you pull the changes in. Only the original repo where you made that commit will still have the node_modules folder there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to display images in Markdown files on Github?\n\nI want to display some images in a Markdown file on Github. I found it works this way:\n![Figure 1-1](https://raw.github.com/username/repo/master/images/figure 1-1.png \"Figure 1-1\")\n\nBut i need to collaborate with others so i don't want the username and repo name hard coded .\nI tried to use this:\n![Figure 1-1](images/figure 1-1.png \"Figure 1-1\")\n\nIt works on my local disk but not work on Github.\nIs there anyone knows about this issue?"}, {"role": "assistant", "content": "I found the answer myself.\nJust simply append ?raw=true to the image url will make the trick:\n![](images/table 1-1.png?raw=true)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to PR and merge again after reverting PR using Github Revert Button\n\nBasically I used Github revert button to revert a previous PR for a feature branch into master, then I decided to merge the same feature branch that I reverted earlier, but I was not able to do so. Steps as follow:\n\nPR to merge feature branch to master\nRevert PR merge from (master)\nTried to create new PR to merge feature branch to master again.\nGot this message:\n\n\nThere isn't anything to compare.\nmaster is up to date with all commits from feature-branch. Try switching the base for your comparison.\n\nAny suggestions on how can I merge feature branch again into master"}, {"role": "assistant", "content": "Just revert the revert. So by clicking the revert button you will have created a new PR (your step 2). Once this is merged, you will have the option to revert this, which will create a new branch with all your changes back in. You can then pull this, make changes to it (if needed) and create a new PR. You will lose all the commit messages on Github, but all file changes will still be around. Good to refer to your original branch and reverts in the new PR.\nAnything to avoid a complicated rebase or force pushing to master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create dependencies between jobs in GitHub Actions\n\nI'm new to GitHub Actions, playing with various options to work out good approaches to CI/CD pipelines.\nInitially I had all my CI steps under one job, doing the following:\n\ncheckout code from repo\nlint\nscan source for vulnerabilities\nbuild\ntest\ncreate image\nscan image for vulnerabilities\npush to AWS ECR\n\nSome of those steps don't need to be done in sequence though; e.g. we could run linting and source code vulnerability scanning in parallel with the build; saving time (if we assume that those steps are going to pass).\ni.e. essentially I'd like my pipeline to do something like this:\njob1 = {\n - checkout code from repo #required per job, since each job runs on a different runner\n - lint\n}\njob2 = {\n - checkout code from repo\n - scan source for vulnerabilities\n}\njob3 = {\n - checkout code from repo\n - build\n - test\n - create image\n - scan image for vulnerabilities\n - await job1 & job2\n - push to AWS ECR\n}\n\nI have a couple of questions:\n\nIs it possible to setup some await jobN rule within a job; i.e. to view the status of one job from another?\n(only relevant if the answer to 1 is Yes): Is there any way to have the failure of one job immediately impact other jobs in the same workflow?  i.e. If my linting job detects issues then I can immediately call this a fail, so would want the failure in job1 to immediately stop jobs 2 and 3 from consuming additional time, since they're no longer adding value."}, {"role": "assistant", "content": "Ideally, some of your jobs should be encapsulated in their own workflows, for example:\n\nWorkflow for testing the source by whatever means.\nWorkflow for (building and-) deploying.\n\nand then, have these workflows depend on each other, or be triggered using different triggers.\nUnfortunately, at least for the time being, workflow dependency is not an existing feature (reference).\nEdit: Dependencies between workflows is now also possible, as discussed in this StackOverflow question.\nAlthough I feel that including all of your mentioned jobs in a single workflow would create a long and hard to maintain file, I believe you can still achieve your goal by using some of the conditionals provided by the GitHub actions syntax.\nPossible options:\n\njobs.<job_id>.if\njobs.<job_id>.needs\n\nUsing the latter, a sample syntax may look like this:\njobs:\n  job1:\n  job2:\n    needs: job1\n  job3:\n    needs: [job1, job2]\n\nAnd here is a workflow ready to be used for testing of the above approach. In this example, job 2 will run only after job 1 completes, and job 3 will not run, since it depends on a job that failed.\nname: Experiment\non: [push]\n\njobs:\n  job1:\n    name: Job 1\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Sleep and Run\n      run: |\n        echo \"Sleeping for 10\"\n        sleep 10\n\n  job2:\n    name: Job 2\n    needs: job1\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Dependant is Running\n      run: |\n        echo \"Completed job 2, but triggering failure\"\n        exit 1\n\n  job3:\n    name: Job 3\n    needs: job2\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Will never run\n      run: |\n        echo \"If you can read this, the experiment failed\"\n\nRelevant docs:\n\nWorkflow syntax for GitHub Actions\nContext and expression syntax for GitHub Actions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically Build NPM Module On Install From Github\n\nGiven that a project's lib/ dir shouldn't be checked into Git because the files it contains are derived files (from the build process). When installing a package from the project's github (during development for example) the lib/ dir will not exist, so if the package's package.json's main field points to (for example) lib/index.js, the package cannot be compiled when imported because these files do not exist within the repository and therefore within the package installed into node_modules. This means the package needs to built (just as it would be before release), only this time locally so that the lib directory (or whatever other files are generated during the build process) are added to the module's directory.\nAssuming there is a build script within the package.json file's scripts field, can the package be configured to run this automatically in the situation where it is installed from github only? If not, what is the the best approach to ensuring it is built when installed from github? \nThere are now prepublish, prepublishOnly and prepare lifecycle hooks, but none provide an answer to this problem because they don't allow any way to differentiate between the source of the install. In short, yes they allow you to build on install, but they don't allow you to build on install from github only. There is not only no reason to force a build when people install from npm, but more importantly, development dependencies will not be installed (for example babel which is critical to the build).\nI am aware of one strategy to deal with this problem:\n\nFork / branch the repo\nbuild locally\nremove the lib/ dir from .gitignore and check it in.\ninstall module from your fork/branch\nWhen you are ready for a PR / rebase add lib/ dir to .gitignore and remove dir from git.\n\nBut that is far from ideal. I guess this could be automated with a githook though. So every you push to master the project also builds and pushes to a separate branch.\nThere is a closed issue on NPM's Github with no resolution - just lots of people who want a solution. From this issue it is clear that using prepare is not the answer. \nMy usecase is that I am developing a module that is used in a number of other projects. I want to consume the latest version of the module without having to push out a release to NPM whenever I update the codebase - I would rather push out fewer releases when I am ready, but I still need to consume whatever the latest version of the lib is on Github. \nNote: I also reached out to NPM's support regarding this issue and I'll add their response if I receive one."}, {"role": "assistant", "content": "prepare is the correct way, but might seem broken\nIf you have a repository with source files but a \"build\" step is necessary to use it,\nprepare does exactly what you want in all cases (as of npm 4).\n\nprepare: Run both BEFORE the package is packed and published, on local npm install without any arguments, and when installing git dependencies.\n\nYou can even put your build dependencies into devDependencies and they will be installed before prepare is executed.\nHere is an example of a package of mine that uses this method.\n\nProblems with .gitignore - prepare will seem broken\nThere is one issue with this option that gets many people.\nWhen preparing a dependency, Npm and Yarn will keep only the files that are listed in the files section of package.json.\nOne might see that files defaults to all files being included and think they're done.\nWhat is easily missed is that:\n\n.npmignore mostly overrides the files directive and,\nif .npmignore does not exist, .gitignore is used instead.\n\nSo, if you have your built files listed in .gitignore, like a sane person, and don't do anything else, prepare will seem broken.\nIf you fix files to only include the built files or add an empty .npmignore, you're all set.\nMy recommendation is to set files (or, by inversion, .npmignore) such that the only files actually published are those needed by users of the published package. Imho, there is no need to include uncompiled sources in published packages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github locks up mac terminal when using pull command\n\nI'm in the process of learning github on mac (command-line) and whenever I do git pull origin master i get this\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n~                                                                               \n\".git/MERGE_MSG\" 7L, 293C\n\nthe terminal seems to lock up  and doesn't allow me to enter anything immediately, then when it finally does allow me to enter text it seems like it doesn't recognize git commands.\nIs this a bug in git or am i missing something?"}, {"role": "assistant", "content": "You're in the text editor, vim! It's a modal text editor, so you would need to:\n\nPress i to enter insert mode.\nNow you can type your message, as if you were in a normal\n(non-modal) text editor.\nPress esc to go back to command mode.\nThen type :w followed by enter to save.\nFinally :q followed by enter to quit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I clone a github project to run locally?\n\nI am trying to follow this railscast tutorial for authlogic - and it points to the source here - \nI have git installed - how do I replicate the source onto my localhost so that I can follow the tutorial like in the screencast?"}, {"role": "assistant", "content": "git clone git://github.com/ryanb/railscasts-episodes.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding Git credentials on Windows\n\nI am on a Windows 10 system and am trying to add my credentials to Git in Git Bash. I cannot find a way to store my password.\nI checked GitHub's documentation, which said just to enter the line git config --global credential.helper wincred, but that didn't seem to make sense, as there's not prompt to enter a password. I checked Git's documentation, which said to use command git credential-store --file ~/git.store store and fill in all prompts. The bash emulator wasn't able to read the credentials. \nFinally, I tried to add my password like I added my email, via git config --global user.password \"5ecre7\" but after running a sample git clone on a repository I made it responded that I didn't have the access rights. Is there a way to fix this?"}, {"role": "assistant", "content": "Ideally, you should enter:\ngit config --global credential.helper manager-core\n\n# Since Git 2.39+\ngit config --global credential.helper manager\n\nThis is from the Microsoft multi-platform credential manager GCM.\n(After Git 2.38.1, is called manager (no longer \"manager-core\"))\nThen your password (or rather a token is used nowadays) would be stored in the Windows Credential Manager.\nSee more at \"Unable to change git account\".\nOn the first push, a popup will appear asking for your credentials (username/password) for the target server (for instance github.com)\nIf not, that might means your credentials were already stored.\nIf they are incorrect, a simple printf \"protocol=https\\nhost=github.com\\nusername=xxx\"| git-credential-manager-core erase will remove them (on Windows, Linux or Mac)\n\nWith Git 2.29 (Q4 2020), the parser in the receiving end of the credential protocol is loosen to allow credential helper to terminate lines with CRLF line ending, as well as LF line ending.\nSee commit 356c473 (03 Oct 2020) by Nikita Leonov (nyckyta).\n(Merged by Junio C Hamano -- gitster -- in commit 542b3c2, 05 Oct 2020)\n\ncredential: treat CR/LF as line endings in the credential protocol\nSigned-off-by: Nikita Leonov\nSigned-off-by: Johannes Schindelin\n\n\nThis fix makes using Git credentials more friendly to Windows users: it allows a credential helper to communicate using CR/LF line endings (\"DOS line endings\" commonly found on Windows) instead of LF-only line endings (\"Unix line endings\").\nNote that this changes the behavior a bit: if a credential helper produces, say, a password with a trailing Carriage Return character, that will now be culled even when the rest of the lines end only in Line Feed characters, indicating that the Carriage Return was not meant to be part of the line ending.\nIn practice, it seems very unlikely that something like this happens. Passwords usually need to consist of non-control characters, URLs need to have special characters URL-encoded, and user names, well, are names.\nHowever, it does help on Windows, where CR/LF line endings are common: as unrecognized commands are simply ignored by the credential machinery, even a command like quit\\r (which is clearly intended to abort) would simply be ignored (silently) by Git.\nSo let's change the credential machinery to accept both CR/LF and LF line endings.\nWhile we do this for the credential helper protocol, we do not adjust git credential-cache--daemon(man) (which won't work on Windows, anyway, because it requires Unix sockets) nor git credential-store(man) (which writes the file ~/.git-credentials which we consider an implementation detail that should be opaque to the user, read: we do expect users not to edit this file manually)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I upload fresh code at github?\n\nI have a directory with all my coding projects. \nI want to upload (correct terminology?) it to GitHub using the command line.\nI have already looked at Old question.\nI know how to clone an existing project, and how to push it after making any changes.\nBut in this case, I want to make a new project and add files to that. \nHow can I accomplish this using the command line?"}, {"role": "assistant", "content": "git init\ngit add .\ngit commit -m \"Initial commit\"\n\nAfter this, make a new GitHub repository and follow on-screen instructions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between Github's \"Environment\" and \"Repository\" secrets?\n\nIn the GitHub documentation it states that the precedence of secrets is from lowest to highest (Environment > Repository > Organization), it also states that the Organization secrets are available for all repositories in the organization. But it doesn't state anything about Environment and Repository secrets.\nMy questions are:\n\nWhat is the difference is between Environment and Repository secrets?\nWhen should I use Environment secrets?\nWhen should I use Repository secrets?"}, {"role": "assistant", "content": "Well, environment secrets are specific to an environment in Github Actions which allow you to run different configurations for jobs in a single repository, e.g. to deploy to staging first and later to production.\nRepository secrets are specific to a single repository (and all environments used in there), while organisation secrets are specific to an entire organisation and all repositories under it.\nYou can use environment secrets if you have secrets which are specific to an environment.\nIf you are unsure, you could also start with repository secrets for everything. If you later introduce different environments which require different secrets, you can move the repository secrets to the specific environments. Due to the inheritance chain, this should be transparent to the jobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is proprietary code legally safe on bitbucket or github? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\nThe community reviewed whether to reopen this question 10 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI know this slightly in the legal realm but its unclear who owns the code if you put proprietary code on github or bitbucket in a private repository.\nFrom Bitbucket we have:\n\nBy submitting public (non-private)\n  Content to Avantlumiere for inclusion\n  on your Website, you grant\n  Avantlumiere a world-wide,\n  royalty-free, and non-exclusive\n  license to reproduce, modify, adapt\n  and publish the Content solely for the\n  purpose of displaying and promoting\n  your account or repository. If a\n  repository is marked as private, these\n  terms do not apply.\n\nThe question of course is what terms do apply to private accounts. \nIn theory the code should be safe if a license header with copyright information is on every file... right?\nI am not asking for legal advice and will not hold any one responsible."}, {"role": "assistant", "content": "From GitHub:\n\nWe claim no intellectual property rights over the material you provide to the Service. Your profile and materials uploaded remain yours. However, by setting your pages to be viewed publicly, you agree to allow others to view your Content. By setting your repositories to be viewed publicly, you agree to allow others to view and fork your repositories.\n\nAs noted in the BitBucket TOS you linked, BitBucket's parent company similarly has no claims to code that you upload into private repos."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do show my tests passing/failing in Github?\n\nI have a project on github that has extensive unit tests (using mocha for node.js). \nI'd like to show off by showing those tests passing/failing on each page. I notice other projects on Github are doing this.\n\nI've been unable to find any documentation on how to make the test status display. \n\nHow can I make Github show unit test output? \nDoes Github run the tests or do you need to hook up with an external webapp? \nIs there a free webservice to do this (my app is Open Source)?"}, {"role": "assistant", "content": "Take a look at Travis CI. You can use it with GitHub.\nThey have docs on using NodeJS\nThose badges you see are called \"status images\" and Travis provides MarkDown that you can insert into your project's README.md file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't log in to GitHub on Android Studio\n\nI can't sign in to GitHub on Android studio, as the picture shows.\n\nI have reset my password, tried to put ' https:// ' in the server box, and still doesn't let me in and shows the same message.\nI can no longer update the project I am working on with my team.\nFor some reason I was still able to commit and push to the repo and the changes were visible online."}, {"role": "assistant", "content": "Try this:\nOn GitHub:\n\nLog in -> Click on your avatar in the top right hand corner\nChoose Settings -> Developer settings -> Personal access tokens\nClick on the \"Generate new token\" button\nAdd a note if you want, like \"Android Studio\"\nSelect repo(all), read:org (under admin:org), gist, workflow\nClick on the \"Generate token\" button\nCopy the token\n\nOn Android Studio:\n\nGo to File -> Settings -> Version Control -> GitHub -> Add an account\nClick on the \"Use Token\" hyperlink, like in your screenshot\nPaste your token, click login, click ok"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get current date and time in GitHub workflows\n\nI have a GitHub workflow for releasing nightly snapshots of the repository. It uses the create-release action. This is how the workflow file looks right now:\nname: Release Nightly Snapshot\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  build:\n    name: Release Nightly Snapshot\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout master Branch\n        uses: actions/checkout@v2\n        with:\n          ref: 'master'\n      - name: Create Release\n        id: nightly-snapshot\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: 'nightly snapshot'\n          release_name: 'nightly snapshot'\n          draft: false\n          prerelease: false\n\nI want tag_name and release_name to use the current date and time, instead of hard-coded values. However, I couldn't find any documentation on it. How should I do it?"}, {"role": "assistant", "content": "From this post you can create a step that set its output with the value $(date +'%Y-%m-%d')\nThen use this output using ${{ steps.date.outputs.date }}. The following show an example for environment variables and for inputs :\non: [push, pull_request]\nname: build\njobs:\n  build:\n    name: Example\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get current date\n        id: date\n        run: echo \"::set-output name=date::$(date +'%Y-%m-%d')\"\n      - name: Test with environment variables\n        run: echo $TAG_NAME - $RELEASE_NAME\n        env:\n          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}\n          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}\n      - name: Test with input\n        uses: actions/hello-world-docker-action@master\n        with:\n          who-to-greet: Mona-the-Octocat-${{ steps.date.outputs.date }}\n\nOutputs :\n* Test with environment variables\nnightly-tag-2020-03-31 - nightly-release-2020-03-31\n\n* Test with input\nHello Mona-the-Octocat-2020-03-31"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I export GitHub issues to Excel?\n\nHow can I export all my issues from an Enterprise GitHub repository to an Excel file? I have tried searching many Stack Overflow answers but did not succeed. I tried this solution too (exporting Git issues to CSV and getting  \"ImportError: No module named requests\" errors. Is there any tool or any easy way to export all the issues to Excel?"}, {"role": "assistant", "content": "With the official GitHub CLI you can easily export all issues into a CSV format.\nbrew install gh\n\nLog in:\ngh auth login\n\nChange directory to a repository and run this command:\ngh issue list --limit 1000 --state all | tr '\\t' ',' > issues.csv\n\nIn the European .csv files the separator is a semicolon ';', not a comma. Modify the separator as you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fail a job in Github Actions?\n\nI'm developing a Github actions workflow. This workflow runs on Linux, Mac, and Windows.\nAs part of the workflow, I have to check whether 2 environment variables are equal. If they don't - fail the job.\nAs described here,  Github Actions support if: condition:\nsteps:\n- run: # How can I make a cross-platform failure here?\n  if: ${{ envA }} != ${{ envB }}\n\nHow can I make the job fail if the above condition is true?\nIn the beginning, I thought of a script, but there must be a more elegant way to fail a job."}, {"role": "assistant", "content": "I'd do run: exit 1. That will simply exit with an exit code of 1, on all three platforms.\nProof that it's cross-platform: https://github.com/rmunn/Testing/runs/220188838 which runs the following workflow:\nname: Test exiting on failure\n\non: [push]\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    runs-on: ${{ matrix.os }}\n    \n    steps:\n    - uses: actions/checkout@v1\n    - name: Try to fail\n      run: exit 1\n    - name: Print message if we don't fail\n      run: echo Should not get here\n\n(An earlier version of this answer recommended \"/bin/false\", but that would only work on Linux and macOS)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ToC or Sidebar in GitHub Wiki\n\nHow do I create a ToC or a sidebar menu in a GitHub Wiki?\nI saw some mentions of it and gollum the backend seems to support it, but how do I do it in a current GitHub project?\nIt should best be based on the headers I have in the page automatically.\nThese links all mention it, but do not show how to do it:\n\nhttps://gist.github.com/379469 - some JavaScript hack\nhttps://github.com/blog/774-git-powered-wikis-improved - GitHub mentioning it:\n\"GitHub Wikis have a little-documented ability for footers and sidebars, something which some of\nour git-based Wiki authors are familiar with. The new Wiki editor gives you limited web-based\nediting of the footers and sidebars you have on your site. \""}, {"role": "assistant", "content": "While your solution works, there's an easier way to do it using GitHub's web interface. You can simply create a page named _Sidebar and/or _Footer.\nSee detailed instructions in Github Wiki sidebar menu builder with multi-level.\nEdit The original article is gone and I can't find it in the cache so I've updated the link."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "The unauthenticated git protocol on port 9418 is no longer supported\n\nI have been using github actions for quite sometime but today my deployments started failing. Below is the error from github action logs\nCommand: git\nArguments: ls-remote --tags --heads git://github.com/adobe-webplatform/eve.git\nDirectory: /home/runner/work/stackstream-fe/stackstream-fe\nOutput:\nfatal: remote error: \n  The unauthenticated git protocol on port 9418 is no longer supported.\n\nUpon investigation, it appears that below section in my yml file is causing the issue.\n    - name: Installing modules\n      run: yarn install\n\nI have looked into this change log but can't seem to comprehend the issue.\nAdditional Details:\nServer: EC2 Instance\nGithub actions steps:\n  steps:\n  - name: Checkout\n    uses: actions/checkout@v2\n\n  - id: vars\n    run: |\n      if [ '${{ github.ref }}' == 'refs/heads/master' ]; then echo \"::set-output name=environment::prod_stackstream\" ; echo \"::set-output name=api-url::api\" ; elif [ '${{ github.ref }}' == 'refs/heads/staging' ]; then echo \"::set-output name=environment::staging_stackstream\"  ; echo \"::set-output name=api-url::stagingapi\" ; else echo \"::set-output name=environment::dev_stackstream\" ; echo \"::set-output name=api-url::devapi\" ; fi\n\n  - uses: pCYSl5EDgo/cat@master\n    id: slack\n    with:\n      path: .github/workflows/slack.txt\n\n  - name: Slack Start Notification\n    uses: 8398a7/action-slack@v3\n    env:\n      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n      ENVIRONMENT: '`${{ steps.vars.outputs.environment }}`'\n      COLOR: good\n      STATUS: '`Started`'\n    with:\n      status: custom\n      fields: workflow,job,commit,repo,ref,author,took\n      custom_payload: |\n        ${{ steps.slack.outputs.text }}\n\n  - name: Installing modules\n    env:\n      REACT_APP_API_URL: 'https://${{ steps.vars.outputs.api-url }}mergestack.com/api/v1'\n    run: yarn install\n\n  - name: Create Frontend Build\n    env:\n      REACT_APP_API_URL: 'https://${{ steps.vars.outputs.api-url }}mergestack.com/api/v1'\n    run: yarn build\n\n  - name: Deploy to Frontend Server DEV\n    if: ${{ contains(github.ref, 'dev') }}\n    uses: easingthemes/[email\u00a0protected]\n    env:\n      SSH_PRIVATE_KEY: ${{ secrets.DEV_KEY }}\n      ARGS: '-rltgoDzvO --delete'\n      SOURCE: 'deploy/'\n      REMOTE_HOST: ${{ secrets.DEV_HOST }}\n      REMOTE_USER: plyfolio-dev\n      TARGET: '/home/plyfolio-dev/${{ steps.vars.outputs.environment }}/fe/deploy'\n\npackage.json file\n   {\n  \"name\": \"stackstream-fe\",\n  \"version\": \"1.0.0\",\n  \"authors\": [\n    \"[email\u00a0protected]\"\n  ],\n  \"private\": true,\n  \"dependencies\": {\n    \"@fortawesome/fontawesome-svg-core\": \"^1.2.34\",\n    \"@fortawesome/free-solid-svg-icons\": \"^5.15.2\",\n    \"@fortawesome/react-fontawesome\": \"^0.1.14\",\n    \"@fullcalendar/bootstrap\": \"^5.5.0\",\n    \"@fullcalendar/core\": \"^5.5.0\",\n    \"@fullcalendar/daygrid\": \"^5.5.0\",\n    \"@fullcalendar/interaction\": \"^5.5.0\",\n    \"@fullcalendar/react\": \"^5.5.0\",\n    \"@lourenci/react-kanban\": \"^2.1.0\",\n    \"@redux-saga/simple-saga-monitor\": \"^1.1.2\",\n    \"@testing-library/jest-dom\": \"^5.11.9\",\n    \"@testing-library/react\": \"^11.2.3\",\n    \"@testing-library/user-event\": \"^12.6.0\",\n    \"@toast-ui/react-chart\": \"^1.0.2\",\n    \"@types/jest\": \"^26.0.14\",\n    \"@types/node\": \"^14.10.3\",\n    \"@types/react\": \"^16.9.49\",\n    \"@types/react-dom\": \"^16.9.8\",\n    \"@vtaits/react-color-picker\": \"^0.1.1\",\n    \"apexcharts\": \"^3.23.1\",\n    \"availity-reactstrap-validation\": \"^2.7.0\",\n    \"axios\": \"^0.21.1\",\n    \"axios-mock-adapter\": \"^1.19.0\",\n    \"axios-progress-bar\": \"^1.2.0\",\n    \"bootstrap\": \"^5.0.0-beta2\",\n    \"chart.js\": \"^2.9.4\",\n    \"chartist\": \"^0.11.4\",\n    \"classnames\": \"^2.2.6\",\n    \"components\": \"^0.1.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"draft-js\": \"^0.11.7\",\n    \"echarts\": \"^4.9.0\",\n    \"echarts-for-react\": \"^2.0.16\",\n    \"firebase\": \"^8.2.3\",\n    \"google-maps-react\": \"^2.0.6\",\n    \"history\": \"^4.10.1\",\n    \"i\": \"^0.3.6\",\n    \"i18next\": \"^19.8.4\",\n    \"i18next-browser-languagedetector\": \"^6.0.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"leaflet\": \"^1.7.1\",\n    \"lodash\": \"^4.17.21\",\n    \"lodash.clonedeep\": \"^4.5.0\",\n    \"lodash.get\": \"^4.4.2\",\n    \"metismenujs\": \"^1.2.1\",\n    \"mkdirp\": \"^1.0.4\",\n    \"moment\": \"2.29.1\",\n    \"moment-timezone\": \"^0.5.32\",\n    \"nouislider-react\": \"^3.3.9\",\n    \"npm\": \"^7.6.3\",\n    \"prop-types\": \"^15.7.2\",\n    \"query-string\": \"^6.14.0\",\n    \"react\": \"^16.13.1\",\n    \"react-apexcharts\": \"^1.3.7\",\n    \"react-auth-code-input\": \"^1.0.0\",\n    \"react-avatar\": \"^3.10.0\",\n    \"react-bootstrap\": \"^1.5.0\",\n    \"react-bootstrap-editable\": \"^0.8.2\",\n    \"react-bootstrap-sweetalert\": \"^5.2.0\",\n    \"react-bootstrap-table-next\": \"^4.0.3\",\n    \"react-bootstrap-table2-editor\": \"^1.4.0\",\n    \"react-bootstrap-table2-paginator\": \"^2.1.2\",\n    \"react-bootstrap-table2-toolkit\": \"^2.1.3\",\n    \"react-chartist\": \"^0.14.3\",\n    \"react-chartjs-2\": \"^2.11.1\",\n    \"react-color\": \"^2.19.3\",\n    \"react-confirm-alert\": \"^2.7.0\",\n    \"react-content-loader\": \"^6.0.1\",\n    \"react-countdown\": \"^2.3.1\",\n    \"react-countup\": \"^4.3.3\",\n    \"react-cropper\": \"^2.1.4\",\n    \"react-data-table-component\": \"^6.11.8\",\n    \"react-date-picker\": \"^8.0.6\",\n    \"react-datepicker\": \"^3.4.1\",\n    \"react-dom\": \"^16.13.1\",\n    \"react-draft-wysiwyg\": \"^1.14.5\",\n    \"react-drag-listview\": \"^0.1.8\",\n    \"react-drawer\": \"^1.3.4\",\n    \"react-dropzone\": \"^11.2.4\",\n    \"react-dual-listbox\": \"^2.0.0\",\n    \"react-facebook-login\": \"^4.1.1\",\n    \"react-flatpickr\": \"^3.10.6\",\n    \"react-google-login\": \"^5.2.2\",\n    \"react-hook-form\": \"^7.15.2\",\n    \"react-i18next\": \"^11.8.5\",\n    \"react-icons\": \"^4.2.0\",\n    \"react-image-lightbox\": \"^5.1.1\",\n    \"react-input-mask\": \"^2.0.4\",\n    \"react-jvectormap\": \"^0.0.16\",\n    \"react-leaflet\": \"^3.0.5\",\n    \"react-meta-tags\": \"^1.0.1\",\n    \"react-modal-video\": \"^1.2.6\",\n    \"react-notifications\": \"^1.7.2\",\n    \"react-number-format\": \"^4.7.3\",\n    \"react-perfect-scrollbar\": \"^1.5.8\",\n    \"react-rangeslider\": \"^2.2.0\",\n    \"react-rating\": \"^2.0.5\",\n    \"react-rating-tooltip\": \"^1.1.6\",\n    \"react-redux\": \"^7.2.1\",\n    \"react-responsive-carousel\": \"^3.2.11\",\n    \"react-router-dom\": \"^5.2.0\",\n    \"react-script\": \"^2.0.5\",\n    \"react-scripts\": \"3.4.3\",\n    \"react-select\": \"^4.3.1\",\n    \"react-sparklines\": \"^1.7.0\",\n    \"react-star-ratings\": \"^2.3.0\",\n    \"react-super-responsive-table\": \"^5.2.0\",\n    \"react-switch\": \"^6.0.0\",\n    \"react-table\": \"^7.6.3\",\n    \"react-toastify\": \"^7.0.3\",\n    \"react-toastr\": \"^3.0.0\",\n    \"react-twitter-auth\": \"0.0.13\",\n    \"reactstrap\": \"^8.8.1\",\n    \"recharts\": \"^2.0.8\",\n    \"redux\": \"^4.0.5\",\n    \"redux-saga\": \"^1.1.3\",\n    \"reselect\": \"^4.0.0\",\n    \"sass\": \"^1.37.5\",\n    \"simplebar-react\": \"^2.3.0\",\n    \"styled\": \"^1.0.0\",\n    \"styled-components\": \"^5.2.1\",\n    \"toastr\": \"^2.1.4\",\n    \"typescript\": \"^4.0.2\",\n    \"universal-cookie\": \"^4.0.4\"\n  },\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^2.27.0\",\n    \"@typescript-eslint/parser\": \"^2.27.0\",\n    \"@typescript-eslint/typescript-estree\": \"^4.15.2\",\n    \"eslint-config-prettier\": \"^6.10.1\",\n    \"eslint-plugin-prettier\": \"^3.1.2\",\n    \"husky\": \"^4.2.5\",\n    \"lint-staged\": \"^10.1.3\",\n    \"prettier\": \"^1.19.1\",\n    \"react-test-renderer\": \"^16.13.1\",\n    \"redux-devtools-extension\": \"^2.13.8\",\n    \"redux-mock-store\": \"^1.5.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build && mv build ./deploy/build\",\n    \"build-local\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,ts,tsx}\": [\n      \"eslint --fix\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n\npackage-lock.json"}, {"role": "assistant", "content": "First, this error message is indeed expected on Jan. 11th, 2022.\nSee \"Improving Git protocol security on GitHub\".\n\nJanuary 11, 2022  Final brownout.\nThis is the full brownout period where we\u2019ll temporarily stop accepting the deprecated key and signature types, ciphers, and MACs, and the unencrypted Git protocol.\nThis will help clients discover any lingering use of older keys or old URLs.\n\nSecond, check your package.json dependencies for any git:// URL, as in this example, fixed in this PR.\nAs noted by J\u00f6rg W Mittag:\n\nThere was a 4-month warning.\nThe entire Internet has been moving away from unauthenticated, unencrypted protocols for a decade, it's not like this is a huge surprise.\nPersonally, I consider it less an \"issue\" and more \"detecting unmaintained dependencies\".\nPlus, this is still only the brownout period, so the protocol will only be disabled for a short period of time, allowing developers to discover the problem.\nThe permanent shutdown is not until March 15th.\n\n\nFor GitHub Actions:\nAs in actions/checkout issue 14, you can add as a first step:\n    - name: Fix up git URLs\n      run: echo -e '[url \"https://github.com/\"]\\n  insteadOf = \"git://github.com/\"' >> ~/.gitconfig\n\nThat will change any git://github.com/ into https://github.com/.\nFor local projects\nFor all your repositories, you can set:\ngit config --global url.\"https://github.com/\".insteadOf git://github.com/\n\n\nYou can also use SSH, but GitHub Security reminds us that, as of March 15th, 2022, GitHub stopped accepting DSA keys. RSA keys uploaded after Nov 2, 2021 will work only with SHA-2 signatures.\nThe deprecated MACs, ciphers, and unencrypted Git protocol are permanently disabled.\nSo this (with the right key) would work:\ngit config --global url.\"[email\u00a0protected]:\".insteadOf git://github.com/\n\nThat will change any git://github.com/ (unencrypted Git protocol) into [email\u00a0protected]: (SSH URL)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull command from different user\n\nI am working with my friend on a project the code of which is on Git. If I need to pull the changes from my friend's machine, can I pull it from my username/password using the following command without any issue?\ngit pull https://[email\u00a0protected]/abc/theproject.git"}, {"role": "assistant", "content": "This command will help to pull from the repository as the different user:\ngit pull https://[email\u00a0protected]/projectfolder/projectname.git master\n\nIt is a workaround, when you are using same machine that someone else used before you, and had saved credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Commit Syntax to Link a Pull Request/ Issue\n\nI've seen commit messages that refer to a specific issue / pull request.  What is the syntax to include a specific repository's issue or pull request?"}, {"role": "assistant", "content": "Use the documented auto-linking format for issues across repositories.\n\nSyntax: {owner}/{repository}#{issue_number}\nExample: mojombo/jekyll#1\n\nWhen such formatted text is present in a commit message, it's automatically transformed into a clickable link which will redirect one to https://github.com/{owner}/{repository}/issues/{issue_number}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Actions, how to share a calculated value between job steps?\n\nIs there a DRY way to calculate and share a value in multiple job steps with Github Actions?\nIn the below workflow yml file, echo ${GITHUB_REF} | cut -d'/' -f3`-${GITHUB_SHA} is repeated in multiple steps.\nname: Test, Build and Deploy\non:\n  push:\n    branches:\n      - master\njobs:\n  build_and_push:\n    name: Build and Push\n    runs-on: ubuntu-latest\n    steps:\n      - name: Docker Build\n        uses: \"actions/docker/cli@master\"\n        with:\n          args: build . --file Dockerfile -t cflynnus/blog:`echo ${GITHUB_REF} | cut -d'/' -f3`-${GITHUB_SHA}\n      - name: Docker Tag Latest\n        uses: \"actions/docker/cli@master\"\n        with:\n          args: tag cflynnus/blog:`echo ${GITHUB_REF} | cut -d'/' -f3`-${GITHUB_SHA} cflynnus/blog:latest"}, {"role": "assistant", "content": "set-output can be used to define outputs for steps. The outputs can then be used in later steps and evaluated in with and env input sections. Also, the step returning outputs should have an id, which is referred to by the step consuming the outputs.\nThe following is what that would look like for your example.\nname: Test, Build and Deploy\non:\n  push:\n    branches:\n      - master\njobs:\n  build_and_push:\n    name: Build and Push\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set tag var\n        id: vars\n        run: echo \"docker_tag=$(echo ${GITHUB_REF} | cut -d'/' -f3)-${GITHUB_SHA}\" >> $GITHUB_OUTPUT\n      - name: Docker Build\n        uses: \"actions/docker/cli@master\"\n        with:\n          args: build . --file Dockerfile -t cflynnus/blog:${{ steps.vars.outputs.docker_tag }}\n      - name: Docker Tag Latest\n        uses: \"actions/docker/cli@master\"\n        with:\n          args: tag cflynnus/blog:${{ steps.vars.outputs.docker_tag }} cflynnus/blog:latest\n\nHere is another example showing how to dynamically set multiple variables to be used by an action.\n      - name: Set output variables\n        id: vars\n        run: |\n          pr_title=\"[Test] Add report file $(date +%d-%m-%Y)\"\n          pr_body=\"This PR was auto-generated on $(date +%d-%m-%Y) \\\n            by [create-pull-request](https://github.com/peter-evans/create-pull-request).\"\n          echo \"pr_title=$pr_title\" >> $GITHUB_OUTPUT\n          echo \"pr_body=$pr_body\" >> $GITHUB_OUTPUT\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: ${{ steps.vars.outputs.pr_title }}\n          body: ${{ steps.vars.outputs.pr_body }}\n\nAlternatively you can create environment variables.\n      - name: Set environment variables\n        run: |\n          echo \"PR_TITLE=[Test] Add report file $(date +%d-%m-%Y)\" >> $GITHUB_ENV\n          echo \"PR_BODY=This PR was auto-generated on $(date +%d-%m-%Y) by [create-pull-request](https://github.com/peter-evans/create-pull-request).\" >> $GITHUB_ENV\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: ${{ env.PR_TITLE }}\n          body: ${{ env.PR_BODY }}\n\nUpdate: The docker actions in the first example are deprecated. Please see this answer for the latest way to work with docker in GitHub Actions.\nNote: For sharing values between different jobs, see this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Windows client behind proxy\n\nI'm trying to get the GitHub client for Windows working. I am on a corporate Windows\u00a07 x64 computer behind a corporate proxy and firewall.\nFollowing various other posts and experimenting with multiple combinations of environment variables and configuration variables, I have found the only way to get cloning and push updates to work is by using the HTTPS_PROXY environment variable, including my full corporate domain user ID and password.\nThis is unacceptable from a security standpoint. Is there another way to get this to work?\nAdditional notes:\nThe following worked:\n\nAdd an environment variable called HTTPS_PROXY with the value http://[domain]\\[userid]:[password]@someproxy.mycorp.com:8080\n\nThe following did not work:\n\nOmitting user id and password from HTTPS_PROXY variable\nUsing an environment variable called HTTP_PROXY (no S)\nAdding the http.proxy variable to the global configuration file (.gitconfig)\nAdding the https.proxy variable to the global configuration file\n\nIn all cases, the GitHub client still does not recognize the proxy: The content of the file TheLog.txt always shows the following on startup:\n[time]|INFO|thread:4|GitHub.Helpers.StartupLogger|Proxy information: (None)\n[time]|INFO|thread:4|GitHub.Helpers.StartupLogger|Couldn't fetch creds for proxy\n\nAnd it is followed by the output of several failed proxy authentication attempts, all of which indicate \"Credentials are missing.\""}, {"role": "assistant", "content": "Add these entries to your '.gitconfig' file in your user directory (go to %USERPROFILE%):\n[http]\n    proxy = http://<proxy address>:<proxy port>\n\n[https]\n    proxy = https://<proxy address>:<proxy port>\n\nAnd if you don't want to store your password in plaintext, I would use a local proxy forwarder like CNTLM which allows you to direct all traffic through it and can store the passwords hashed.\n\nUnlike the original question, if you don't care if your password is in plain text add these:\n[http]\n    proxy = http://<username>:<password>@<proxy address>:<proxy port>\n\n[https]\n    proxy = https://<username>:<password>@<proxy address>:<proxy port>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git command for making one branch like another\n\nI'm trying to take a branch with changes and bring it back to be identical to the upstream it diverged from. The changes are both local and have been pushed to github, so neither git reset or git rebase are really viable, since they change history, which is a bad thing with a branch that's already been pushed.\nI've also tried git merge with various strategies but none of them undo the local changes, i.e. if I'd added a file, a merge might bring other files back in line, but I'll still have that file that the upstream doesn't have.\nI could just create a new branch off the upstream, but i'd really like a merge that in terms of revision history applies all the changes to take my branch and make it identical to the upstream again, so that I can safely push that change without clobbering history. Is there such a command or series of commands?"}, {"role": "assistant", "content": "You could merge your upstream branch to your dev branch, with a custom merge driver, \"keepTheirs\":\nSee \"\u201cgit merge -s theirs\u201d needed \u2014 but I know it doesn't exist\".\nIn your case, only one .gitattributes would be required, and a keepTheirs script like:\nmv -f $3 $2\nexit 0\n\n\ngit merge --strategy=theirs Simulation #1\nShows as a merge, with upstream as the first parent.\nJefromi mentions (in the comments) the merge -s ours, by merging your work on the upstream (or on a temp branch starting from upstream),  and then fast-forwarding your branch to the result of that merge:\ngit checkout -b tmp origin/upstream\ngit merge -s ours downstream         # ignoring all changes from downstream\ngit checkout downstream\ngit merge tmp                        # fast-forward to tmp HEAD\ngit branch -D tmp                    # deleting tmp\n\n\nThis has the benefit of recording the upstream ancestor as the first parent, so that the merge means \"absorb this out-of-date topic branch\" rather than \"destroy this topic branch and replace it with upstream\".\n\nUpdate 2023: for instance, if you want main to reflect exactly what dev is:\ngit switch -c tmp dev\ngit merge -s ours main   # ignoring all changes from main\ngit switch main\ngit merge tmp            # fast-forward to tmp HEAD, which is dev\ngit branch -D tmp        # deleting tmp\n\n\n(Edit 2011):\nThis workflow has been reported in this blog post by the OP:\n\nWhy do I want this again?\nAs long as my repo had nothing to do with the public version, this was all fine, but since now I'd want the ability to collorate on WIP with other team members and outside contributors, I want to make sure that my public branches are reliable for others to branch off and pull from, i.e. no more rebase and reset on things I've pushed to the remote backup, since it's now on GitHub and public.\nSo that leaves me with how I should proceed.\n99% of the time, my copy will go into the upstream master, so I want to work my master and push into upstream most of the time.\nBut every once in a while, what I have in wip will get invalidated by what goes into upstream, and I will abandon some part of my wip.\nAt that point, I want to bring my master back in sync with upstream, but not destroy any commit points on my publicly pushed master. I.e. I want a merge with upstream that ends up with the changeset that make my copy identical to upstream.\nAnd that's what git merge --strategy=theirs should do.\n\n\ngit merge --strategy=theirs Simulation #2\nShows as a merge, with ours as the first parent.\n(proposed by jcwenger)\ngit checkout -b tmp upstream\ngit merge -s ours thebranch         # ignoring all changes from downstream\ngit checkout downstream\ngit merge --squash tmp               # apply changes from tmp, but not as merge.\ngit rev-parse upstream > .git/MERGE_HEAD #record upstream 2nd merge head\ngit commit -m \"rebaselined thebranch from upstream\" # make the commit.\ngit branch -D tmp                    # deleting tmp\n\n\ngit merge --strategy=theirs Simulation #3\nThis blog post mentions:\ngit merge -s ours ref-to-be-merged\ngit diff --binary ref-to-be-merged | git apply -R --index\ngit commit -F .git/COMMIT_EDITMSG --amend\n\n\nsometimes you do want to do this, and not because you have \"crap\" in your history, but perhaps because you want to change the baseline for development in a public repository where rebasing should be avoided.\n\n\ngit merge --strategy=theirs Simulation #4\n(same blog post)\n\nAlternatively, if you want to keep the local upstream branches fast-forwardable, a potential compromise is to work with the understanding that for sid/unstable, the upstream branch can from time to time be reset/rebased (based on events that are ultimately out of your control on the upstream project's side).\nThis isn't a big deal, and working with that assumption means that it's easy to keep the local upstream branch in a state where it only takes fast-forward updates.\n\ngit branch -m upstream-unstable upstream-unstable-save\ngit branch upstream-unstable upstream-remote/master\ngit merge -s ours upstream-unstable\ngit diff --binary ref-to-be-merged | git apply -R --index --exclude=\"debian/*\"\ngit commit -F .git/COMMIT_EDITMSG --amend\n\n\ngit merge --strategy=theirs Simulation #5\n(proposed by Barak A. Pearlmutter):\ngit checkout MINE\ngit merge --no-commit -s ours HERS\ngit rm -rf .\ngit checkout HERS -- .\ngit checkout MINE -- debian # or whatever, as appropriate\ngit gui # edit commit message & click commit button\n\n\ngit merge --strategy=theirs Simulation #6\n(proposed by the same Michael Gebetsroither):\n\nMichael Gebetsroither chimed in, claiming I was \"cheating\" ;) and gave another solution with lower-level plumbing commands:\n(it wouldn't be git if it wouldn't be possible with git only commands, everything in git with diff/patch/apply isn't a real solution ;).\n\n# get the contents of another branch\ngit read-tree -u --reset <ID>\n# selectivly merge subdirectories\n# e.g. superseed upstream source with that from another branch\ngit merge -s ours --no-commit other_upstream\ngit read-tree --reset -u other_upstream     # or use --prefix=foo/\ngit checkout HEAD -- debian/\ngit checkout HEAD -- .gitignore\ngit commit -m 'superseed upstream source' -a\n\n\ngit merge --strategy=theirs Simulation #7\n\nThe necessary steps can be described as:\n\nReplace your worktree with upstream\nApply the changes to the index\nAdd upstream as the second parent\nCommit\n\nThe command git read-tree overwrites the index with a different tree, accomplishing the second step, and has flags to update the work tree, accomplishing the first step.  When committing, git uses the SHA1 in .git/MERGE_HEAD as the second parent, so we can populate this to create a merge commit.  Therefore, this can be accomplished with:\n\ngit read-tree -u --reset upstream                 # update files and stage changes\ngit rev-parse upstream > .git/MERGE_HEAD          # setup merge commit\ngit commit -m \"Merge branch 'upstream' into mine\" # commit\n\n\nGit 2.44 (Q1 2024) also proposes a custom merge driver approach (that I illustrate in \"git merge -s theirs needed, but it does not exist\").\nCustom merge drivers need access to the names of the revisions they are working on, so that the merge conflict markers they introduce can refer to those revisions.\nThe conflict labels to be used for the common ancestor, local head and other head can be passed by using the placeholders '%S', '%X' and '%Y' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I automatically deploy my app after a git push ( GitHub and node.js)?\n\nI have my application (node.js) deployed on a VPS (linux). I'm using git hub as a repository. How can I deploy the application automatically, on git push ?"}, {"role": "assistant", "content": "Example in PHP:\nNavigate to github into your github repository add click \"Admin\"\nclick tab 'Service Hooks' => 'WebHook URLs'   \nand add\nhttp://your-domain-name/git_test.php\n\nthen create git_test.php \n<?php \ntry\n{\n  $payload = json_decode($_REQUEST['payload']);\n}\ncatch(Exception $e)\n{\n  exit(0);\n}\n\n//log the request\nfile_put_contents('logs/github.txt', print_r($payload, TRUE), FILE_APPEND);\n\n\nif ($payload->ref === 'refs/heads/master')\n{\n  // path to your site deployment script\n  exec('./build.sh');\n}\n\nIn the build.sh you will need to put usual commands to retrieve your site from github"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Most suitable python library for Github API v3 [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am looking for a python library for the Github APIv3 suitable for me.\nI found one library (python-github3) mentioned in the GH API docs. After playing around with it in ipython for an hour or two, I found it really unintuitive to explore/work with. I looked some more, and found there's quite a number of people at least attempting to write such a library. The more promising-looking (at a glance) are PyGithub and another python-github3, which apparently is different from the first one.\nBefore I spend the next days consecutively trying out library after library, I wanted to ask the SO community if there is an accepted, definitive, obvious choice for that library?\nWhat I didn't like about the first library was the (to me) unintuitive way to get at data - some things you get as attributes, some you get as return value of a method, that return value is some complicated object which has to be paged and iterated through, etc. \nIn that regard, PyGithub looks more attractive at first glance - clearly drill down through an object hierarchy, and then arrive at the attribute containing what you want:\nfor repo in g.get_user().get_repos():\n    print repo.name\nSo, any pearls of wisdom to share? I know I don't have skills enough to quickly judge library quality, which is why I'm turning to the SO community.\nedit: fwiw, I ended up using PyGithub. It works well, and the author is really receptive for feedback and bug reports. :-)"}, {"role": "assistant", "content": "Since you mentioned you are a beginner python programmer, I would suggest you to try to use the JSON API without any Github library first. It really isn't that difficult and it will help you a lot later in your programming life since same approach can be applied to any JSON API. Especially if it seems that trying out libraries will take days. \nI'm not saying that some library isn't easier to use, I'm just saying the small extra effort to use the API directly might be worth it in the long run. At least it will help you understand why some of those libraries seem \"unintuitive\" (as you said).\nSimple example to fetch creation time of django repository:\nimport requests\nimport json\nr = requests.get('https://api.github.com/repos/django/django')\nif(r.ok):\n    repoItem = json.loads(r.text or r.content)\n    print \"Django repository created: \" + repoItem['created_at']\n\nThis is using the popular requests library. In your code you'll naturally need to handle the error cases too.\nIf you need access with authentication it will be a bit more complex."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to select/comment on a range of lines in github pull request?\n\nThere is an option to comment on a range of lines in file on github, see How to refer to a specific line or range of lines in github?\nBut is there similar option to comment on range of lines inside pull request?\n\nWhen I click on line, only single line is highlighted yellow and R### (e.g. R446) is appended to url, clicking another line with shift pressed doesn't do anything. I tried to change url to R446-450 but it didn't do anything. Changing it to #L450-458 also didn't do anything. Also even that single highlighted line doesn't seem to affect anything.\nClicking blue plus that appears on hover creates comment window, but it only commenting on a single line.\nCommenting on single line results in this\n\nComment on pull-request page shows only 4 lines above selected/commented line, but I'm interested in showing 7 lines, not 4"}, {"role": "assistant", "content": "Since Oct. 2019, Nat Friedman (CEO of GitHub) declares that feature available\n(And, see below, since Feb. 2020, multi-lines comment reference is possible)\n\n\ud83d\udd25\n  Multi-line comments are here!\n  Click and drag to comment on multiple lines in a pull request diff. \u2728\nThese little quality-of-life improvements are at the heart of what we love doing at GitHub. \n  \ud83e\udd70\n\n\nThanks to:\n\nJohn Caine\nMike Skalnik\nPat Nakajima\nMike Chlipala\nJoel Califa\nMatt Colyer\nMelanie Gilman\n\n\nNick Craver immediately asks:\n\nFollow-up question: are there plans to support suggestions?\n  It seems to apply to the last line at the moment:\n\n\nThat would be, according to Nat, \"Coming early next year\".  \nUpdate Feb. 2020: \"A new interaction for multi-line pull request comments \"\n\nTo leave a comment referencing multiple lines, you can either:\n\nclick on a line number in the diff view, hold Shift, click on a second line number and click the \"+\" button next to the second line number; or\nclick and hold to the right of a line number, drag and then release the mouse when you\u2019ve reached the desired line.\n\n\nThis was announced by Nat Friedman\n\nShipping today on GitHub: multi-line suggestions! \n\n\nWith, again, special thanks to Melanie Gilman, Pat Nakajima, Mike Chlipala, Joel Califa, John Caine, Matt Colyer and \n, and Kelly Arwine.\nGitHub Changelog also references this.\n\nHenry adds an observation \n\nA smaller side effect, but I assume being able to share a multi-line diff in the PR is new too!\n\nExample: babel/babel PR 10511 diff-L261-L263\n\nBut that was available since July 2019"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Comment on a line in Github without a commit?\n\nIn github, you can comment on lines in a commit. Is there a way to comment on a line, while viewing a file in a branch, without having a particular commit?"}, {"role": "assistant", "content": "Unfortunately it is not possible to comment on a line in Github without a commit.\nBut you can create links to lines in your file (click on line and copy link on browser bar). For example you can use this links in your issues to discuss about code line:\nhttps://github.com/laravel/framework/blob/10.x/README.md?plain=1#L1\nUpdate\nYou can also hold shift to obtain a link to a block of lines"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't clone a github repo on Linux via HTTPS\n\nI'm trying to do a simple git clone https://github.com/org/project.git on a CentOS box but get:\n\nerror: The requested URL returned error: 401 while accessing\n  https://github.com/org/project.git/info/refs\nfatal: HTTP request failed\n\nIt never prompts me for my username/password, just fails.\nI can make the exact same call on my Mac no problem- what am I missing?"}, {"role": "assistant", "content": "The answer was simple but not obvious:\nInstead of:\ngit clone https://github.com/org/project.git\n\ndo:\ngit clone https://[email\u00a0protected]/org/project.git\n\nor (insecure)\ngit clone https://username:[email\u00a0protected]/org/project.git\n\n(Note that in the later case, your password will may be visible by other users on your machine by running ps u -u $you and will appear cleartext in your shell's history by default)\nAll 3 ways work on my Mac, but only the last 2 worked on the remote Linux box. (Thinking back on this, it's probably because I had a global git username set up on my Mac, whereas on the remote box I did not? That might have been the case, but the lack of prompt for a username tripped me up... ) \nHaven't seen this documented anywhere, so here it is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does my GitHub page not update its content?\n\nI've been following the official guide @ pages.github.com\nSo far I've created the local repo and pushed it to GitHub, but, whatever change I do, I can see it in my repo at GitHub but not in my GitHub page. How is that possible?"}, {"role": "assistant", "content": "A bit late to the party but I just had this issue and my solution isn't covered by any of the above.\nSpecifically my issue was the following:\n\nI had created a github.pages site with a custom domain.\nI was pushing commits to the correct GitHub branch but not seeing the updates on the github.pages site.\n\nSolution:\nThe issue turned out to be my browser caching the page (despite my having page caching disabled).  To fix it I just cleared my cached data from the past hour and that worked instantly.\nTo clear the cache data in Chrome go to the Chrome menu then More Tools > Clear Browsing Data.\nI don't know what caused the caching, this github.pages/custom domain combo is the only thing that has ever caused it for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I reverse a commit in git?\n\nI'm not really familiar with how git works. I pushed a commit by mistake and want to revert it. I did a \ngit reset --hard HEAD~1\n\nBeware Fellow Googlers: This does not only revert the commit, but discards all file changes!\nand now the project is reverted on my machine, but not on github. If I try to push this code, I get the error 'Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.' How do I remove this commit from github?"}, {"role": "assistant", "content": "This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):\nFrom the article, the easiest command I saw to revert a previous commit by its commit id, was:\ngit revert dd61ab32"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How could I remove my approval from a pull request on github?\n\nI approved a pull request of a random repository I do not have write access too. How can I remove or delete that approval?"}, {"role": "assistant", "content": "Dismiss review\nYou can \"Dismiss review\" in the bottom section of the PR.\n\nexpand approval(s)\nclick three dots\nchoose Dismiss review\n\n(not present in the timeline - little bit confusing)\n\nthen it looks like (in the timeline)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cloning an older version of github repo\n\nI have an Amazon EC2 machine. I would like to clone an older version of github repo on this machine. Normally I use git clone https://linktomyrepo.git How can I clone an older version, say an update from 14 days ago? I can see the exact version I need in the commit history of repository, but do not know how to clone it onto the EC2 machine. Do I need to use the little SHA code next to each commit?"}, {"role": "assistant", "content": "You can always check out any given state by using a commit hash.\nFor instance, by looking at the log, you identified that 233ab4ef was the state you were interested in: issue a git checkout 233ab4ef to check out that state.\nAnother way to achieve this is by using git checkout @{14.days.ago}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I checkout github wikis like a git repository?\n\nI want to modify and view github wikis with local editor like Emacs, and Google Code wikis can be checked out just like code. Is there any way to checkout github wikis? Or is there any other git repository provider offers such feature?"}, {"role": "assistant", "content": "You can now!\ngit clone https://github.com/user/project.wiki.git\n\nor if you use ssh\ngit clone [email\u00a0protected]:username/project.wiki.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Project management to go with GitHub [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\n(EDIT: This question is now outdated for my particular issue, as Google Code supports git now and I've converted Protocol Buffers to Mercurial anyway. However, it's still of general interest, IMO.)\nMy C# Protocol Buffers Port uses github for its source control, and I'm beginning to really enjoy using git. However, as far as I can tell, github doesn't provide any project management tools: defect and feature tracking, discussions, feature requests, docs etc. Given my affiliations, Google Code would be a natural choice, but it would seem odd to create a project there but host the source on github.\nThis question about Fogbugz/Assembla seems to mostly focus on the defect tracking. I was wondering what experiences others have had when it comes to a more \"complete\" project management solution. Does Fogbugz actually do everything I need? (Using a wiki for docs has its advantages, although I also want to be able to distribute documentation with the code.) Beyond the explicit features mentioned in the first paragraph, are there other project aspects I should be considering which I may have missed?\nThis will definitely stay an open source project, and although I'd rather not pay I don't mind if a small fee is required. Currently I'm the only developer, but that may change and there may very well be lots of people filing bugs and feature requests. (In other words, I  hope and expect it to be popular, but with me doing most of the work.)\nPreviously I've contributed to various open source projects, but haven't done much in the way of running a very visible and active one. (MiscUtil is currently still \"hosted\" on my website, with occasional releases - the actual source control is on my local NAS.)\nAnyone care to share their experiences?\nEDIT: Another option I'm now considering is a Google Code project (I really would like to be loyal to my employer) and an occasional merge from git to svn (at the very least, every time I do a release). This would allow non-git users to get hold of the source easily too."}, {"role": "assistant", "content": "If you're thinking that you'll really be the only developer, Fogbugz will help you keep your sanity. Fogbugz is a great product, It builds focused communications and can turn anything into a case (issue). It does all that as well as any system I've seen. \nBut its orientation is commercial -- efficient communication between users and tech support, improve reliability of schedules, focus & prioritize what's being worked on, separate internal & external discussions, some good reporting to track that things are getting handled. (About the only criticism I can think of is it doesn't do  case blocking and dependency tracking, which is really useful for those bugs buried deep.)  \nLittle of this feature set will help you build an active open source project, with open lively communication and the need build a community and have users evolve into developers as the project grows. So if that's where you want to end up, you may really want the less focused communication channels of one of these lightweight tracking systems. \nI haven't used Google Code on a project yet, but in terms of transparent & open  communication, it looks like a good support for an active open source project.  Plus you already know it. If you want to grow the involvement in your project, Google code looks like the way to go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I fork the original repo when I've already forked a different fork\n\nI've previously forked jockm/vert.x and sent him a pull request. Now I want to fork vert-x/vert.x (the upstream of jockm/vert.x) and send them a different pull request.\nBut when I click the Fork button, unsuprisingly I end up in my tjcrowder/vert.x fork of jockm/vert.x instead. Is it possible to fork both vert-x/vert.x and jockm/vert.x simultaneously such that I can send each pull requests as appropriate?\nI fear the answer may be the same as for this question about the converse situation (\"there's no GitHub way, but you can add a remote repo\") but I'm hoping otherwise\u00a0\u2014 not least because I don't see how the answer there would allow me to send pull requests to the new remote."}, {"role": "assistant", "content": "There's no GitHub way (small lie, see below), but there's also nothing to fear.\nBy definition, your fork of a fork is a fork of the original.\nWhen you open a pull request, you get the option to choose both the origin and the destination for your pull request. The choices available there obviously depend on the fork graph, but as long as there is a path in the graph between the 2 repositories, you should be safe.\nAlso, since pull requests live on the website side, you don't even need to add a remote as long as you don't want to use it from git.\nNow of course, you might want to reconsider your place in that graph, and make yourself a direct child of the real upstream, but that's mostly unrelated.\nAs said earlier there is actually a twisted way to have multiple forks, which is to create organizations and fork in them. That way you can \"own\" multiple repositories in the same graph. But there's really no need to go there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I generate a git commit log for the last month, and export it as CSV?\n\nIs there a way to generate a git commit log for the last month, and export it as a CSV file? I'm looking for something I can run from the command line, or a 3rd party app. I'd like the following columns: author, date of commit, subject, file edited and hash."}, {"role": "assistant", "content": "You can use the --since and --pretty option of git log, for instance:\ngit log --since=\"last month\" --pretty=format:'%h,%an,%ar,%s' > log.csv\n\nRefer to the PRETTY FORMATS section of the Git log man page for more options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In Jenkins, how to checkout a project into a specific directory (using GIT)\n\nSorry for the 'svn' style - we are in a process of migration from SVN to GIT (including our CI Jenkins environment).\nWhat we need is to be able to make Jenkins to checkout (or should I say clone?) the GIT project (repository?) into a specific directory. We've tried some refspecs magic but it wasn't too obvious to understand and use successfully.\nFurthermore, if in the same Jenkins project we need to checkout several private GitHub repositories into several separate dirs under a project root, how can we do it please?\nWe have GitHub plugin installed. Hope we've phrased the things right."}, {"role": "assistant", "content": "In the new Jenkins 2.0 pipeline (previously named the Workflow Plugin), this is done differently for:\n\nThe main repository\nOther additional repositories\n\nHere I am specifically referring to the Multibranch Pipeline version 2.9.\nMain repository\nThis is the repository that contains your Jenkinsfile.\nIn the Configure screen for your pipeline project, enter your repository name, etc.\nDo not use Additional Behaviors > Check out to a sub-directory.  This will put your Jenkinsfile in the sub-directory where Jenkins cannot find it.\nIn Jenkinsfile, check out the main repository in the subdirectory using dir():\ndir('subDir') {\n    checkout scm\n}\n\nAdditional repositories\nIf you want to check out more repositories, use the Pipeline Syntax generator to automatically generate a Groovy code snippet.\nIn the Configure screen for your pipeline project:\n\nSelect Pipeline Syntax. In the Sample\nStep drop down menu, choose checkout: General SCM.\nSelect your SCM system, such as Git.  Fill in the usual information\nabout your repository or depot.\nNote that in the Multibranch Pipeline, environment variable\nenv.BRANCH_NAME contains the branch name of the main repository.\nIn the Additional Behaviors drop down menu, select\nCheck out to a sub-directory\nClick Generate Groovy. Jenkins will display the Groovy code snippet\ncorresponding to the SCM checkout that you specified.\nCopy this code into your pipeline script or Jenkinsfile."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error \"The authenticity of host 'github.com' can't be established. RSA key fingerprint \"\n\nI use my project at work, but I would like to work with him from home as I can log into my home machine to work with my project.\nHowever, from home, I see the following message:\nThe authenticity of host 'github.com (ip)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no)?\n\nHow can I get past it?"}, {"role": "assistant", "content": "You should simply be able to answer 'yes', which will update your ~/.ssh/known_hosts file.\n\nA better approach, to avoid any MITM (Man-In-The-Middle) attack, would be (as commented below by Mamsds) to verify GitHub's public key first (see \"GitHub's SSH key fingerprints\") and, if you find a match, then you can answer 'yes'.\nExample:\nssh-keyscan -t ecdsa github.com 2>&1 |ssh-keygen -lf -\n256 SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s github.com (ECDSA)\n\n\nAfter that, you can use a GitHub SSH URL (provided you have generated the SSH public/private keys, and registered the public one to your GitHub profile)\nNote: the ssh key generation should use the base64 old PEM format (option -m PEM), rather than the new current 70 chars OpenSSH one.\nSee \"What is the correct format for private key in Credentials\":\nssh-keygen -m PEM -t rsa -P \"\" -f afile\n\nThat or you can switch to an HTTPS URL.\n\nUpdate March 2023:\nGitHub updated their RSA SSH host key\n\nAt approximately 05:00 UTC on March 24, out of an abundance of caution, we replaced our RSA SSH host key used to secure Git operations for GitHub.com.\nWe did this to protect our users from any chance of an adversary impersonating GitHub or eavesdropping on their Git operations over SSH. This key does not grant access to GitHub\u2019s infrastructure or customer data. This change only impacts Git operations over SSH using RSA.\nWeb traffic to GitHub.com and HTTPS Git operations are not affected.\nOnly GitHub.com\u2019s RSA SSH key was replaced. No change is required for ECDSA or Ed25519 users\nIf you see the following message when connecting to GitHub.com via SSH, then read onward.\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\nSHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.\nPlease contact your system administrator.\nAdd correct host key in ~/.ssh/known_hosts to get rid of this message.\nHost key for github.com has changed and you have requested strict > checking.\nHost key verification failed.\n\nIf you see the above message, you\u2019ll need to remove the old key by running this command:\n$ ssh-keygen -R github.com\n\nOr manually updating your ~/.ssh/known_hosts file to remove the old entry.\nThen, you can manually add the following line to add the new RSA SSH public key entry to your ~/.ssh/known_hosts file:\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n\nOr automatically update GitHub.com\u2019s RSA SSH key in your ~/.ssh/known_hosts, by running the following in your terminal:\n$ ssh-keygen -R github.com\n$ curl -L https://api.github.com/meta | jq -r '.ssh_keys | .[]' | sed -e 's/^/github.com /' >> ~/.ssh/known_hosts\n\n\nOr, without jq, for Mac or Windows users :\ncurl -L https://api.github.com/meta | grep ssh-rsa | \\\n  awk '{print \"github.com\", $2}' >> ~/.ssh/known_hosts\n\n\nYou can verify that your hosts are connecting via our new RSA SSH key by confirming that you see the following fingerprint:\nSHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s\n\nGitHub Actions users may see failed workflow runs if they are using actions/checkout with the ssh-key option.\nWe are updating the actions/checkout action in all our supported tags, including @v2, @v3, and @main.\nIf you pin the action to a commit SHA and use the ssh-key option, you\u2019ll need to update your workflow. You can read more about this process in our official documentation for Actions security hardening.\nFor more information, please visit our official documentation on GitHub\u2019s SSH public key fingerprints.\n\nSo:\n\nWhat happened and what actions have we taken?\nThis week, we discovered that GitHub.com\u2019s RSA SSH private key was briefly exposed in a public GitHub repository.\nWe immediately acted to contain the exposure and began investigating to understand the root cause and impact.\nWe have now completed the key replacement, and users will see the change propagate over the next thirty minutes.\nSome users may have noticed that the new key was briefly present beginning around 02:30 UTC during preparations for this change.\nPlease note that this issue was not the result of a compromise of any GitHub systems or customer information.\nInstead, the exposure was the result of what we believe to be an inadvertent publishing of private information. We have no reason to believe that the exposed key was abused, and took this action out of an abundance of caution.\n\n\nAs noted by bk2204'sanswer:\n\nSome versions of OpenSSH include the host key for the IP address as well as for the hostname.\nThis is rather unhelpful, as IP addresses can change with DNS, but hostname tend to be more stable.\nTo remove the old key entirely:\n\n# linux\nsed -i -e '/AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31\\/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi\\/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==/d' ~/.ssh/known_hosts\n\n# MacOS\nsed -i '' -e '/AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31\\/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi\\/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==/d' ~/.ssh/known_hosts\n\n# Windows\nsed -i -e \"/AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31\\/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi\\/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==/d\" %USERPROFILE%\\.ssh\\known_hosts\n\nThe last command (for Windows) can be done with the %PATH% modified with:\nset \"GH=%ProgramFiles%\\Git\"\nset \"PATH=%GH%\\bin;%GH%\\cmd;%GH%\\usr\\bin;%GH%\\mingw64\\bin;%GH%\\mingw64\\libexec\\git-core;%PATH%\"\n\n\nTo remove any GitHub IP address from your known_hosts file, see discussion 50878:\n\nFor anyone running into repeated ECDSA host key for 'github.com' differs from the key for the IP address / Offending key for IP issues and you can't grep IPs in known_hosts because you have hashed entries, I have created a Gist listing all Github git IPv4 addresses (as of Fri Mar 24 16:33:22 UTC 2023), generated from CIDRs listed in https://api.github.com/meta:\nhttps://gist.github.com/a-abella/fb31a028943b804e8ada6cda4efbe9b6\nYou can loop over these and feed them to ssh-keygen -R.\nA script with optional known_hosts file path argument is available here: https://gist.github.com/a-abella/9d6c91a56a892e4c74933d17d380aa01. The only dependency is curl.\nIf you want a one-liner (though the standard you-shouldn't-pipe-scripts-from-the-internet warnings apply):\ncurl -s https://gist.githubusercontent.com/a-abella/9d6c91a56a892e4c74933d17d380aa01/raw/0bcaef131f94e4938cb659d744c3019fd814643e/strip_github.sh | bash -s -- $HOME/.ssh/known_hosts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "After Git clone from GitHub, I do not see my branch\n\nI have a repository on GitHub. It contains master and one branch.\nWhen I clone it, I obtain only master and do not see my branch.\nWhy is it so? How can I see all branches in the repository?"}, {"role": "assistant", "content": "By default, git clone creates only one branch: the currently checked out one, generally master. However, it does create remote tracking branches for all other branches in the remote. Think of these as local copies of the remote's branches, which can be updated by fetching. They're not real local branches, as they're intended only as pointers to where the remote's branches are, not for you to work on. \nIf you run git branch -a you'll see all branches, local and remote. If you want to see just the remote ones, use git branch -r. If you prefer a visual history display, try gitk --all (or gitk --remotes). \nTo create a local branch to work on, use\ngit branch <branch-name> origin/<branch-name>\n\nThat'll create a new local branch using the remote's branch as the starting point."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to create a folder-specific readme file in github?\n\nGithub parses and displays a readme.txt or readme.md file at the root of the repository.\nI would like to create a similar readme file for a particular folder. Is there a way to accomplish this?\nOne ugly hack I thought of was to name the file _readmeme.md causing it to appear as the first file in the folder, and making it easy for users to find and click it. - it doesn't work, _README appears last and not first."}, {"role": "assistant", "content": "GitHub already has this feature.  Just put your README file in a subdirectory, and it will be displayed just like one in the root directory.\nFor example, see README.md for this subdirectory:\nhttp://github.com/larsbrinkhoff/lbForth/tree/master/targets"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does github figure out a project's language?\n\nI was recently working on a github project in both JavaScript and C++, and noticed that github tagged the project as C++. If you have to pick a single language, this is probably the correct designation since the C++ code is compiled as a JavaScript library, but this made me wonder... how does github figure out what language to tag each project?"}, {"role": "assistant", "content": "Update April 2013, by nuclearsandwich (GitHub support team or \"supportocat\"):\n\nthe help page \"My repository is marked as the wrong language\" mentions using now the linguist library to determine file language for syntax highlighting and repo statistics. Linguist will exclude certain file names and paths from statistic, excluding certain vendor files and directories.\n\nthe help page \"Why isn't my favorite language recognized?\" adds:\n\n\n\nIf your desired language is not receiving syntax highlighting you can contribute to the Linguist library to add it.\n\n\n(Original answer, Oct. 2012)\nThis thread on GitHub support explains it:\n\nIt just sums up file sizes for each extension. Largest one \"wins\".\nWe'd like to avoid opening files up and parsing their content, as both would slow down the process... but that might be the only method of resolving conflicts like this one.\n\nSince this is not 100% accurate, that had lead some to add:\n\nI, too, would vote for a simple manual-override switch for the cases where the guess is wrong.\n\n\nNote: as Mark Rushakoff mentions in his answer (upvoted), the guessing got better since then with the linguist project (open-sourced from June 2011).\nYou can see there are still issues though: GitHub Linguist Issues.\nSee here for more details:\n\nOnce the language has been detected, it is passed to Albino, a Pygments wrapper, which does the actual syntax highlighting.\n\nAnd you can add linguist directives in a .gitattributes file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Embedding images inside a GitHub wiki (gollum) repository?\n\nThe Github wikis are backed by a separate git repository then the main project repository.\nThis post by the Github team makes it sound like you should be able to link to images stored in the wiki repository inside the wiki markup.\n\nImages and Folders\nYou can now reference images hosted inside the Git repository.\n\nI've checked out my wiki's repository and pushed a resource folder and an image into it. My question is, how do I go about using this image?\nIs this even possible or have I misunderstood something?"}, {"role": "assistant", "content": "For viewers wishing to view images on a github wiki I've found the following method to work:\n\nGo to the \"Git Access\" tab inside the wiki page of your repository and retrieve the SSH path which should be some thing like: [email\u00a0protected]:USER/REPO.wiki.git where USER is your account name and REPO is the repository name.\nOn your local machine use whichever Git command line tool you wish to cd into your local directory of choice and get the repository via \n\ngit clone [email\u00a0protected]:USER/REPO.wiki.git\n\nNow within this repository create an image directory, I'll call it \"images\" and put whatever images you want into the directory\nAnd then push your wiki git directory to github\nYou will not be able to physically see the images in say the \"Pages\" tab, but if you simply reference the images in a local link you should be able to see them. Example with Markdown below:  \n![Alt attribute text Here](images/YOURIMAGE.ext) \nYou may also embed the image as a link itself by wrapping it further like so:\n[![Alt attribute text Here](images/YOURIMAGE.ext)](http://Yoursite.com)\n\nYou can also add subdirectories within your local copy to help organize the wiki since the \"pages\" tab simply lists them out. Keep in mind, however, that even when the new directory is pushed the \"pages\" tab doesn't list the directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change GIT account of Visual Studio Team Explorer\n\nI am having a very weird situation when cloning a Git repository from our company private server. The repository is not anonymous (it requires authentication), but when cloning, VS didn't ask any username and password and automatically use an old authentication of old employee. Is there a way to remove the saved username and password and make Visual Studio to prompt them when cloning?"}, {"role": "assistant", "content": "Look in the Windows Credential manager and remove/update your credentials there:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I fetch an unmerged pull request for a branch I don't own?\n\nI need to pull in a specific pull request (that hasn't been processed into the main stream yet) in the NServiceBus repo:\nhttps://github.com/johnsimons/NServiceBus/commit/d8524d53094e8181716e771c1023e968132abc15\nIt's obviously not my repo, but I need the changes that exist in that pull request.\nWhat is the best way to do this?"}, {"role": "assistant", "content": "git pull origin pull/28/head\n\nOr\ngit fetch origin pull/28/head:28\ngit checkout 28\n\nCan I pull a not-yet-merged pull request?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove all files in my git repo and update/push from my local git repo?\n\nIs it possible to remove all files in a repository and update it with only the files I have in my local machine? The reason is that, there are certain files that is not necessary in my github and so I want to remove those files. Instead of removing the files one by one, I wanted to see if its possible to just remove all files in my git repo and update/push with only the files in my local machine. Hope its clear. Thanks."}, {"role": "assistant", "content": "You could do it like this:\ncd /tmp\ngit clone /your/local/rep  # make a temp copy\ncd rep\ngit rm -r *                # delete everything\ncp -r /your/local/rep/* .  # get only the files you want\ngit add *                  # add them again\ngit status                 # everything but those copied will be removed\ngit commit -a -m 'deleting stuff'\ncd /your/local/rep\ngit pull /tmp/rep          # now everything else has been removed\n\nThere's probably a oneliner for that\u2026"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to filter GitHub PRs with specific merge date?\n\nI use the below filter to get PRs closed above 2017-03-19;  but, is there a way to filter with a specific date.\nis:pr is:closed merged:>=2017-03-19 base:master sort:updated-desc\n\n\nThe below fails:\nis:pr is:closed merged:=2017-03-19 base:master sort:updated-desc"}, {"role": "assistant", "content": "Yes, you can do so by filtering as follows:\nis:pr is:closed merged:2017-03-19..2017-03-19 base:master sort:updated-desc \n\nFor more information concerning searching issues and pull requests in GitHub see Searching issues documentation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cloning private github repository within organisation in actions\n\nI have 2 private GitHub repositories (say A and B) in the organization (say ORG). Repository A has repository B in requirements.txt:\n-e [email\u00a0protected]:ORG/B.git#egg=B\n\nAnd I have the following workflow for A (in .github/workflows/test.yml):\nname: Python package\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Install requirements\n      run: |\n        pip install -r requirements.txt\n\n    - name: Test with pytest\n      run: |\n        pytest ./tests\n\nAs B is private, it fails on installing it.\nIs it possible to install B while testing A in this workflow if they are in the same organization? How?"}, {"role": "assistant", "content": "Since access tokens are bound to an account and have write access to all its private repos, it's a very bad solution.\nInstead, use deploy keys.\n\nDeploy keys are simply SSH keys that you can use to clone a repo.\n\nCreate a new SSH key pair on your computer\nPut the public key in the private dependency repo's Deploy keys\nPut the private key in the app repo's Actions secrets\nDelete the keys from your computer\n\n\nOnce it's set, you can set the private key in the GitHub Action's SSH Agent. There's no need to import a third-party GitHub Action, a 2-liner will suffice.\neval `ssh-agent -s`\nssh-add - <<< '${{ secrets.PRIVATE_SSH_KEY }}'\npip install -r requirements.txt\n\n\nI found that ssh-add command here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Switch between user identities in one Git on one computer [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I specify multiple users for myself in .gitconfig?\n\n                                (25 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI have ONE repository on GitHub, let's call it Repo-1.\nI want to first access that repository as a default Git user.\nLet's call that user User-1.\nI created SSH keypair, everything fine, works nice.\n\nI made ANOTHER repository on GitHub, let's call it Repo-2.\nI didn't make any changes in local Git, on my laptop. No configurational changes, nothing.\nNow - I want to clone from Repo-1 as the User-2 (but from the same laptop).\nFirst of all: is this at all possible to do?\nCan local Git on one single laptop switch between \"user accounts\" and present itself as User-2? And then, from THAT identity, clone from Repo-1, make some change, and then push to Repo-1?\nIf possible, how do I do that?"}, {"role": "assistant", "content": "You have your global .gitconfig where you already configured your SSH Keys/User Information. The global .gitconfig is overridden by a local gitconfig - the file \"config\" in your .git folder (if it does not exist you might have to create it).\nFor example you can copy the .gitconfig file into the .git folder (and rename it to \"config\") and just change the lines you want to change (probably github.user and github.token) or you create a new file with just the two lines in it.\nIf you prefer the command line \"git config\" you can avoid all the file moving stuff by omitting the \"--global\" option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Grouping repos on GitHub? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I arrange repositories into folders on Github?\n\n                                (8 answers)\n                            \n\nClosed 5 years ago.\n\n\n\nHere's the situation: I'm migrating a bunch of repos to github. The repos are currently organized into groups/directories like 'stack', 'websites', 'applications', etc.\nThere's no way (I've found) to create groups or folders on GitHub for repos, except with organizations, which seems a poor choice. But maybe not? The problem here is that some of the groups are very small, while others are large... with sub-groups, and I'd like to keep all the projects in one root bucket.\nSo, I'm left with maybe using a naming convention. Like: 'stack-apache', 'website-foo.com', 'application-some-project'. Or just giving up on organizing them in github and let the project pages / website handle the organization.\nRe. scale, I'm looking at 20+ repos initially, with new repos added over time at an estimated rate of 2-5 /year for the next few years.\nAnyone have experience with this kind of thing?"}, {"role": "assistant", "content": "Update 2024\nThere (still) isn't a concrete way of grouping in Github.\nInstead, I use an Organization profile readme and manually group relevant repos.\nIts not ideal, and its manual, but it gives me full control - including linking down to common items like Actions.\n\n\nUpdate 2023\nGithub added the lists-feature (still in beta).\nIf you star a repository you can add it to an existing list or create a new one.\nStill not a very intuitive way to group your own repositories but it works.\n\n\nUpdate 2020\nI'm not sure exactly when, but Github has (somewhat recently) added the concept of projects, which kind of fill the missing gap. I would argue they aren't quite the same as Bitbucket Projects but they are better suited to grouping related repo's in Github than Orgs\n\n\nOriginal answer\nOrganisations in my opinion fit a different purpose in Github than grouping repos (although they do serve to group repos). Organisations are more about fine grained control around repo access (thats my understanding).\nBitbucket has introduced the concept of \"Projects\", with the following hierarchy (with a comparison to Github):\nBitbucket: Team         -> has N -> Projects -> has N -> Repos\nGithub:    Organisation -> has N                      -> Repos\n\nBitbucket still allows Repos to not be assigned to an team or project, I am guessing to support older repos that existed before the concept of a project.\nTo answer the question, no, not directly. There are outstanding requests with Github to add groups, but it doesn't seem likely (at this point in time).\nPrefixing works as a so-so solution:\nRepo name: [project]__[repo name]\nLets say you have a client \"acme\" with two repos:\nEg: acme__api\nEg: acme__landing\nGithub's search is quick and inline, so doing a search for acme__ in your repo list will list all repos for the acme__ project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: in unpopulated submodule\n\nI am quite new to github and I am trying to find a solution to a current problem that I am having. I will go through my process step by step:\nFirst I created a new folder named [project name]\nNext I used these commands:\n    cd [project name]\n    git clone [remote project from github url]\n\nSo far I have created a folder and cloned a project that my group is working on in github.\nNext, I went inside that folder and created an angular project with\n    ng new [angulartest]\n\nThis will create all the components of my angular test into the same folder that is the clone of the one from github.\nFinally, I pushed the new angular test on github with\n    git add [angulartest]\n    git commit\n    git push\n\nWhat happens is that it only pushes the folder [angulartest] but none of its contents (even though there are contents in it).  When I try to pull from its contents, I still just get an empty folder in return.\nWhen I try to enter that folder and add each element of the contents, using these steps:\n    cd [angulartest]\n    git add e2e, src, nodemodules, etc\n    git commit\n    git push\n\nIt gives me the following error (even when I try to add each element individually):\nfatal: in unpopulated submodule [angulartest]\nI was wondering if it was a problem with my git syntax, the angular project, or the way I tried to clone the project.  That way, I know which direction I want to be headed when looking for a solution."}, {"role": "assistant", "content": "It seems like, you may have removed the .git folder. In that case you can try \n git rm --cached angulartest -f"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'git diff' between a remote and local repository\n\nI am trying to diff my local file with a GitHub repository before I submit a pull request, so I can see what will show up. Is there an accurate way of doing this?\nI assume GitHub's compare tool manipulates Git's diff."}, {"role": "assistant", "content": "To compare a local working directory against a remote branch, for example origin/master:\n\ngit fetch origin master\nThis tells git to fetch the branch named 'master' from the remote named 'origin'.   git fetch will not affect the files in your working directory; it does not try to merge changes like git pull does. \ngit diff --summary FETCH_HEAD\nWhen the remote branch is fetched, it can be referenced locally via FETCH_HEAD.  The command above tells git to diff the working directory files against  FETCHed branch's HEAD and report the results in summary format. Summary format gives an overview of the changes, usually a good way to start. If you want a bit more info, use --stat instead of --summary. \ngit diff FETCH_HEAD -- mydir/myfile.js\nIf you want to see changes to a specific file, for example myfile.js, skip the --summary option and reference the file you want (or tree).\n\nAs noted, origin references the remote repository and master references the branch within that repo.  By default, git uses the name origin for a remote, so if you do git clone <url> it will by default call that remote origin.  Use git remote -v to see what origin points to.\nYou may have more than one remote.  For example, if you \"fork\" a project on GitHub, you typically need a remote referencing the original project as well as your own fork.  Say you create https://github.com/yourusername/someproject as a fork of https://github.com/theoriginal/someproject.  By convention, you would name the remote to the original repo upstream, while your own fork would be origin.  If you make changes to your fork on GitHub and want to fetch those changes locally, you would use git fetch origin master. If the upstream has made changes that you need to sync locally before making more changes, you would use git fetch upstream master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How Do I Upload Eclipse Projects to GitHub?\n\nI have code in Eclipse that I'd like to upload to GitHub but so far I can't figure out how. It says \"create a repository\" but that looks more like a folder that holds your projects and I'm not sure how to upload my code to it. Apologies for the seemingly dumb question. Also, how does one delete repositories? Didn't see a way to do that either."}, {"role": "assistant", "content": "While the EGit plugin for Eclipse is a good option, an even better one would be to learn to use git bash -- i.e., git from the command line. It isn't terribly difficult to learn the very basics of git, and it is often very beneficial to understand some basic operations before relying on a GUI to do it for you. But to answer your question:\nFirst things first, download git from http://git-scm.com/. Then go to http://github.com/ and create an account and repository.\nOn your machine, first you will need to navigate to the project folder using git bash. When you get there you do:\ngit init\n\nwhich initiates a new git repository in that directory.\nWhen you've done that, you need to register that new repo with a remote (where you'll upload -- push -- your files to), which in this case will be github. This assumes you have already created a github repository. You'll get the correct URL from your repo in GitHub.\ngit remote add origin https://github.com/[username]/[reponame].git\n\nYou need to add you existing files to your local commit:\ngit add .   # this adds all the files\n\nThen you need to make an initial commit, so you do:\ngit commit -a -m \"Initial commit\" # this stages your files locally for commit. \n                                  # they haven't actually been pushed yet\n\nNow you've created a commit in your local repo, but not in the remote one. To put it on the remote, you do the second line you posted:\ngit push -u origin --all"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push all branches from one remote to another remote\n\nI have two remote: upstream and origin. upstream is something I can't push to. origin is my own repo. How can I fetch all branches from upstream and then push them to origin?\nI tried:\ngit fetch upstream\ngit push --all origin\n\nBut it doesn't work."}, {"role": "assistant", "content": "I just needed to copy one repository from Bitbucket to GitHub, these are the steps assuming your remote is called origin, all branches and tags will be copied:\ngit remote add neworigin url-to-new-remote\ngit push neworigin --tags \"refs/remotes/origin/*:refs/heads/*\"\n\nGood thing about this is that files in your working copy won't be modified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download GitHub Release from private repo using command line\n\nGitHub guide explains 2 way to authorize but looks neither of those works with the Release files.\nas a result of:\ncurl -u 'username' -L -o a.tgz https://github.com/company/repository/releases/download/TAG-NAME/A.tgz\n\nThere always is something like\n<!DOCTYPE html>\n<!--\nHello future GitHubber! ..."}, {"role": "assistant", "content": "To download release file from private repo, you can use Personal access token which can be generated at settings/tokens with Full control of private repositories scope.\nThen download the asset with curl command (change with appropriate values):\ncurl -vLJO -H 'Authorization: token my_access_token' 'https://api.github.com/repos/:owner/:repo/releases/assets/:id'\n\nor if you're using an OAuth app, use:\ncurl -u my_client_id:my_client_secret https://api.github.com/repos/:owner/:repo/releases/assets/:id\n\nwhere:\n\n:owner is your user or organisation username;\n:repo is your repository name;\n:id is your asset id, can be found in tag release URL, like:\nhttps://api.github.com/repos/:owner/:repo/releases/tags/:tag \n\n:token is your personal access token (can be created at /settings/tokens;\n\nNote: Using access_token as a query param is deprecated.\nSee: Repositories API v3 at GitHub\n\nHere is the Bash script which can download asset file given specific name of file:\n#!/usr/bin/env bash\n# Script to download asset file from tag release using GitHub API v3.\n# See: http://stackoverflow.com/a/35688093/55075    \nCWD=\"$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\"\n\n# Check dependencies.\nset -e\ntype curl grep sed tr >&2\nxargs=$(which gxargs || which xargs)\n\n# Validate settings.\n[ -f ~/.secrets ] && source ~/.secrets\n[ \"$GITHUB_API_TOKEN\" ] || { echo \"Error: Please define GITHUB_API_TOKEN variable.\" >&2; exit 1; }\n[ $# -ne 4 ] && { echo \"Usage: $0 [owner] [repo] [tag] [name]\"; exit 1; }\n[ \"$TRACE\" ] && set -x\nread owner repo tag name <<<$@\n\n# Define variables.\nGH_API=\"https://api.github.com\"\nGH_REPO=\"$GH_API/repos/$owner/$repo\"\nGH_TAGS=\"$GH_REPO/releases/tags/$tag\"\nAUTH=\"Authorization: token $GITHUB_API_TOKEN\"\nWGET_ARGS=\"--content-disposition --auth-no-challenge --no-cookie\"\nCURL_ARGS=\"-LJO#\"\n\n# Validate token.\ncurl -o /dev/null -sH \"$AUTH\" $GH_REPO || { echo \"Error: Invalid repo, token or network issue!\";  exit 1; }\n\n# Read asset tags.\nresponse=$(curl -sH \"$AUTH\" $GH_TAGS)\n# Get ID of the asset based on given name.\neval $(echo \"$response\" | grep -C3 \"name.:.\\+$name\" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')\n#id=$(echo \"$response\" | jq --arg name \"$name\" '.assets[] | select(.name == $name).id') # If jq is installed, this can be used instead. \n[ \"$id\" ] || { echo \"Error: Failed to get asset id, response: $response\" | awk 'length($0)<100' >&2; exit 1; }\nGH_ASSET=\"$GH_REPO/releases/assets/$id\"\n\n# Download asset file.\necho \"Downloading asset...\" >&2\ncurl $CURL_ARGS -H \"Authorization: token $GITHUB_API_TOKEN\" -H 'Accept: application/octet-stream' \"$GH_ASSET\"\necho \"$0 done.\" >&2\n\nBefore running, you need to set your GITHUB_API_TOKEN with your GitHub token (see: /settings/tokens at GH). This can be placed in your ~/.secrets file, like:\nGITHUB_API_TOKEN=XXX\n\nExample script usage:\n./get_gh_asset.sh :owner :repo :tag :name\n\nwhere name is your filename (or partial of it). Prefix script with TRACE=1 to debug it.\n\nIn case you wonder why curl fails sometimes with (as mentioned in other answer):\n\nOnly one auth mechanism allowed; only the X-Amz-Algorithm query parameter, Signature query string parameter or the Authorization header should be specified.\n\nwhen running like:\ncurl -vLJ -H 'Authorization: token <token>' -H 'Accept: application/octet-stream' https://api.github.com/repos/:owner/:repo/releases/assets/<id>\n\nthis is because you're specifying multiple mechanism at the same time, so S3 server doesn't know which one to use, therefore you have to choose only one, such as:\n\nX-Amz-Algorithm query parameter\nSignature query string parameter (X-Amz-Signature)\nAuthorization header (Authorization: token <token>)\n\nand since GitHub redirects you from asset page (when requesting application/octet-stream), it populates credentials automatically in query string and since curl is passing over the same credentials in the request header (which you've specified), therefore they're conflicting. So as for workaround you can use access_token instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can GitHub show the history of changes made to one file in patch form?\n\nIf you do git log --patch -- path/to/file, you will get the history of the file along with a diff of all the changes made to it with each commit, like this:\n$ git log --patch -- git-rebase.sh\n\ncommit 20351bb06bf4d32ef3d1a6849d01636f6593339f\nAuthor: Ramkumar Ramachandra <[email\u00a0protected]>\nDate:   Sat Jun 15 18:43:26 2013 +0530\n\n    rebase: use 'git stash store' to simplify logic\n\n    rebase has no reason to know about the implementation of the stash.  In\n    the case when applying the autostash results in conflicts, replace the\n    relevant code in finish_rebase () to simply call 'git stash store'.\n\n    Signed-off-by: Ramkumar Ramachandra <[email\u00a0protected]>\n    Signed-off-by: Junio C Hamano <[email\u00a0protected]>\n\ndiff --git a/git-rebase.sh b/git-rebase.sh\nindex d0c11a9..17be392 100755\n--- a/git-rebase.sh\n+++ b/git-rebase.sh\n@@ -153,11 +153,8 @@ finish_rebase () {\n                then\n                        echo \"$(gettext 'Applied autostash.')\"\n                else\n-                       ref_stash=refs/stash &&\n-                       >>\"$GIT_DIR/logs/$ref_stash\" &&\n-                       git update-ref -m \"autostash\" $ref_stash $stash_sha1 ||\n-                       die \"$(eval_gettext 'Cannot store $stash_sha1')\"\n-\n+                       git stash store -m \"autostash\" -q $stash_sha1 ||\n+                       die \"$(eval_gettext \"Cannot store \\$stash_sha1\")\"\n                        gettext 'Applying autostash resulted in conflicts.\n Your changes are safe in the stash.\n You can run \"git stash pop\" or \"git stash drop\" it at any time.\n\ncommit 2e6e276decde2a9f04fc29bce734a49d3ba8f484\nAuthor: Ramkumar Ramachandra <[email\u00a0protected]>\nDate:   Fri Jun 14 18:47:52 2013 +0530\n\n    rebase: use peel_committish() where appropriate\n\n    The revisions specified on the command-line as <onto> and <upstream>\n    arguments could be of the form :/quuxery; so, use peel_committish() to\n    resolve them.  The failing tests in t/rebase and t/rebase-interactive\n    now pass.\n\n    Signed-off-by: Ramkumar Ramachandra <[email\u00a0protected]>\n    Signed-off-by: Junio C Hamano <[email\u00a0protected]>\n\ndiff --git a/git-rebase.sh b/git-rebase.sh\nindex d0c11a9..6987b9b 100755\n--- a/git-rebase.sh\n+++ b/git-rebase.sh\n@@ -434,7 +434,7 @@ then\n                shift\n                ;;\n        esac\n-       upstream=`git rev-parse --verify \"${upstream_name}^0\"` ||\n+       upstream=$(peel_committish \"${upstream_name}\") ||\n        die \"$(eval_gettext \"invalid upstream \\$upstream_name\")\"\n        upstream_arg=\"$upstream_name\"\n else\n@@ -470,7 +470,7 @@ case \"$onto_name\" in\n        fi\n        ;;\n *)\n-       onto=$(git rev-parse --verify \"${onto_name}^0\") ||\n+       onto=$(peel_committish \"$onto_name\") ||\n        die \"$(eval_gettext \"Does not point to a valid commit: \\$onto_name\")\"\n        ;;\n esac\n\nI want to be able to get the same kind of format using GitHub's web interface (not the command line), and I want a link to send to someone else without the code."}, {"role": "assistant", "content": "The following URL will show all the commits for a single file in a format similar to git log -p:\nhttp://github.com/<username>/<project>/commits/<branch>/<path/to/file>\n...where:\n\n<username> is the username of the person that owns the repo\n<project> is the repo name\n<branch> can be 'master' or any other branch\n<path/to/file> is hopefully self-explanatory\n\nPicking at (somewhat) random, here is an example from the vim-fugitive repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Going back to a previous commit in Github Desktop\n\nI am trying to use GitHub Desktop (i.e. the GUI application - NOT command line) to go back to a previous commit (on the same branch). Something that I would have thought is a core feature, since it's the primary reason for using source control in the first place.\nI can see that it's possible to revert a commit, but this is not really what I want as it creates a new commit. I would just simply like to go back with the option of going forward again, in the same way that I can just hop to a different branch.\nIs this possible or is it a limitation of github desktop and I need to use the cmd line for that?"}, {"role": "assistant", "content": "In general, you can go back to a commit in your history with git reset.\n\nThis is not possible with GitHub Desktop. GitHub Desktop is more of a tool to synchronize your repositories and not a full featured GUI client.\nBut that doesn't mean you have to use the command line, since there are alternatives. You can find a list here. To mention a few (that support git reset):\n\nTortoiseGit (Windows)\nSourceTree (Mac, Windows)\n\n\nHere is how you do it on command line. Most clients provide this in their UI using the same vocabulary (usually, you are able to select a commit and reset to it via context menu).\nYou will go back to the previous commit with\ngit reset HEAD^\n\nor some more commits (for example 3) by\ngit reset HEAD^3\n\nor to a specific commit by\ngit reset f7823ab\n\nHave in mind that, by default, the option --mixed is passed to git reset. So, all changes made, since that commit you reset to, will still be there.\nTo get the original state of the commit that you want to 'revert', you have to pass --hard. For example:\ngit reset f7823ab --hard"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I set up a private Git repository on GitHub? Is it even possible?\n\nI intend to share my source code on an invite-only basis to a few dozen users maybe. The source code itself should not be public. Participants are allowed and encouraged to submit their changes. So I need source control, preferably Git, hosted on a public server with private access for multiple users.\nI learned that it is possible to set up private Git repositories on GitHub which use https:// links. On GitHub itself such a project does not show up in searches. For participating users the project shows a \"lock\" icon. So there are obviously private repositories; I just don't know how set one up. A lot of tutorials use SSH to set up private repositories but they all require you to have \"your own server\".\nI don't care about secure connections when pushing/pulling source code nor do I have trust issues with GitHub. All I care about is giving access only to users I invite. Maybe I'm naive and such a solution is only available via commercial hosting (e.g., Unfuddle, Assembla), but if not, I'd really like to know how it's done!"}, {"role": "assistant", "content": "On January 7th 2019, GitHub announced free and unlimited private repositories for all GitHub users, paying or not. When creating a new repository, you can simply select the Private option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": ".gitignore only on local\n\nI would like to know how to gitignore files but only on local, without pushing it (because the other people working on the project should not get this update of gitignore of files I added there.\nTo be simple, after a git status I only have :\nmodified:   .gitignore\n\nbecause I added my files to ignore to my gitignore but well now I want the line above gone without pushing it."}, {"role": "assistant", "content": "For local ignores you should use the .git/info/exclude file, not .gitignore:\n\nPatterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user\u2019s workflow) should go into the $GIT_DIR/info/exclude file.\n\nThe two files accept the same format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see count of project downloads on GitHub? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\nGithub: Can I see the number of downloads for a repo? \n\nCan anybody tell where can I found the number of downloads of my project on GitHub?"}, {"role": "assistant", "content": "You can find answer on the github support.\n\nThere are technical limitations, we tried this in the past and it had a negative impact on performance. If we find a solution, we'll re-implement it.\n\nhttps://help.github.com/articles/getting-the-download-count-for-your-releases/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "I have 2 GitHub accounts. How can I use both when I am working in VS Code?\n\nI have 2 different GitHub accounts: A personal account for my own needs, and a company GitHub account that I manage. I use V.S. Code for both company & personal projects, and I was hoping to find an answer to the following question.\nIs it possible to log into two GitHub accounts at the same time in V.S. Code? If not, then does someone know if V.S. Code has a quick and easy mechanism built into its UI for switching between GitHub accounts?"}, {"role": "assistant", "content": "LIST of MAJOR REVISION DATES\n\u00a0 \u00a0 \u00a0\nEDIT 1: 2021-06-06\n\u00a0 \u00a0 \u00a0 \u2022 \u00a0 \u00a0 \u00a0\nEDIT 2: 2021-07-15\n\u00a0 \u00a0 \u00a0 \u2022 \u00a0 \u00a0 \u00a0\nEDIT 3: 2022/05/21\nThis question has been edited several times to keep it useful, and current. The most recent edit was on September 14th of 2022 at approx 10am UTC. There have been 3 major edits (or revisions is probably the more appropriate term to use here), that were necessary in order to keep this answer relevant and up to date. The revisions were prompted by changes to the UI and changes to GitHub's own defined protocol that defines the login process (I am specifically referring to GitHub now requiring a PAT security token to be used to authenticate anything pushed using the HTTPS protocol). The most important thing to note is as of 2022/09/14, this is a working answer.\n\n\nThis Q&A Contains 2 Questions.\nThe first question can be answered very quickly, whereas, Question-#2 will require far more explanation and contains the answer that you'll likely be looking for.\n\nThe 1st question (\"Question #1\") asks:\n\nIs it possible to log into two GitHub accounts at the same time in V.S. Code?\n\nANSWER #1\n\nNo! You Cannot Log into 2 GitHub Accounts at the Same Time.\n\n\n\n\nThe 2nd question (\"Question #2\") asks:\n\n(Q) Does V.S. Code have a quick & easy mechanism built into its UI for switching between GitHub accounts?\n\n(A) YES IT DOES! VS Code has an icon on the \"activity-bar\" that can be used for logging in & out of your GitHub & Microsoft accounts. I will go into detail about this below.\n\n\n\n\nStep-1: Install the Following Extensions\n\nYou should have a couple extensions that help to automate the login process, which now requires a PAT (even in the CmdL). And that also help with organizing the user.name and user.email that you use for each project. Bellow are the 2 extension you need.\n\n\n\n\"GitHub Pull Requests & Issues Extension\"\n\n\nLink to open in VS Code: vscode:extension/GitHub.vscode-pull-request-github\n\nREASON 4 INSTALLING - This is a GitHub extension that everyone using GitHub should use, but it also does something to help with Terminal integration that enables UI and CLIs to co-exist. The last sentence was nearly word for word from the extensions description. To be more concise, installing it will help to automate the login process to GitHub. Upon installing it will likely prompt you to log into GitHub. If that is the case, then YES LOG IN\n\n\n\n\nGIT-AutoConfig\n\n\n_\"Git-Autoconfig automatically sets credentials for each new project you clone, &/or create. It also prompts you when you open your projects to make sure that the project is configured with the correct user.name & user.email. When using two GitHub accounts it is critical that you configure each project specifically for the account it belongs to. If a project accidentally gets configured for the wrong project, bad things happen, and lots of time is wasted.\n\nThis extension needs to be configured. The extension attempts to auto-configure each project, but in-case, you feel a project isn't configured, or is configured incorrectly, you can hit the F1 key to drop open the \"Quick Input Menu\". With the menu open, type \"git autoconfig set\". When you see an option that reads, \"Set Config\", select it, and follow the 2-part instructions.\n\n\nA HELPFUL TIP:\nWhen \"Git-AutoConfig\" prompts you, if the setting below is configured in your user-scoped \"settings.json\" file, then you can select a pr-configured input, rather than manually typing the input each time.\n    /**\n     * @file \"settings.json\"\n     * @desc \"This is what my configuration looks like\" */\n\n    \"git-autoconfig.configList\": [\n         {\n              \"user.email\": \"[email\u00a0protected]\",\n              \"user.name\": \"jD3V\"\n          },\n          {\n              \"user.email\": \"[email\u00a0protected]\",\n              \"user.name\": \"JAYD3V\"\n          }\n    ]\n\n\n\nRestart V.S. Code\nBefore continuing to Step-2, please restart your editor, so the menu we use below recognizes the GitHub extension you installed.\n\n\n\nStep-2: Configuring your Git settings using the Git CLI\n\nWe are going to continue forward from the Welcome Page, as being in a project configured for the wrong GitHub account can screw something up. FYI, you want to make sure you are logged into the correct account when bouncing from one project to the next. You don't want to enter a project for one account, when your logged into another account. It can really confuse VS Code, and even more so, VS Code Extensions. Oh, and Git, the software that VS Code uses to make all of this work.\nTo get to the Welcome page, preform the following steps:\n\nChoosing \"FILE\" from the title-bar menu.\nChoose \"CLOSE FOLDER\" from the file-menu.\nYou should now be at the VS Code welcome page, this is a good neutral place to start.\n\n\nIt might sound like I am being finicky, but I want this to work for you, and anything involving Git, can get screwed up very badly, very easily.\n\nStep-3: The Account Context Menu\n\nWe will use the \"Account Context Menu\" to log out of any GitHub accounts your logged into. Click on the icon located at the very bottom of your Activity-bar.\n\n\n\nThe image below shows the selections to choose for logging out. If you are not logged into any GitHub accounts, then thats fine. Just carry on.\n\n\n\nStep-4: Configuring Git\nIn your head, think of the GitHub account your going to log into.\nNow, execute the following commands with the correct values for the account you are going to use to log in.\n~$ git config --global user.name \"urGitHubUsrName\"\n~$ git config --global user.email \"[email\u00a0protected]\"\n\n~$ git config --local user.name \"urGitHubUsrName\"\n~$ git config --local user.email \"[email\u00a0protected]\"\n\n\n\nStep-5: Logging In\nPLEASE NOTE: You are going to log in twice!\n\nFirst, Click the \"Account Context Menu\"\nWith the menu open choose the option that says \"Sign-in to Sync Settings\" as shown in the image below.\nIt will let you choose between signing in with Microsoft or GitHub. With this login, you can choose either, but I by far perfer to use my GitHub account, as I use Linux. Depending on what you have done in VS Code in the past, you may need to use to copy & paste a PAT for authentication.\nAfter signing in to MS/GH for syncing settings, Click the \"Account Context Menu\" again. This time choose \"Sign-in: GitHub Pull-request & Issues\". Follow instructions. Image bellow shows both options\n\n\n\n\n\n\nNow the reason I had you use the settings sync with the GitHub Pull-request & issues extension is for two reasons.\n\nIf you use a different GitHub account for each one, you will be auto-logged out of the other. In other words, if you log into the GH extension using account A, while you already logged into settings sync with account B, account B gets logged out. This isn't all, it creats confusion, trust me when I say you want to avoid the confusion when your working in your projects.\n\nEach GitHub account has its own settings synced for it. This includes settings, keybindings, snippets, ect... This way if you have one for work, and one for personal, you can manage different settings. Usually a Company GitHub account will be used by other people in the compant, meaning you will have to use certain settings. This method will prevent you from having to change your personal configuration.\n\n\n\nLASTLY\nTo login to another account, just repeat the steps. It may seem slow the first time you do it, but I log in and out in literally, about 10 seconds now. Cheers from Nor Cal!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to disable pre-commit code analysis for Git-backed projects using IntelliJ IDEA\n\nI have a project in IntelliJ IDEA, and I'm using Git/GitHub as source control. Each time I try to commit changes, IntelliJ IDEA runs a lengthy code analysis and searches for TODOs. When it finds \"problems,\" it prompts me whether or not I want to review or commit.\nI don't want the pre-commit code analysis to run, and I don't want IntelliJ IDEA to ask me about the results. I can't seem to find any setting in the regular IntelliJ IDEA project/IDE settings to disable this. How can I disable this?"}, {"role": "assistant", "content": "As of 2022-3 there is a cog next to the 'Amend' checkbox that allows you to turn off checks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "For an Amazon S3 bucket deployment from GitHub how do I fix the error AccessControlListNotSupported: The bucket does not allow ACLs?\n\nI have the following access policy set on an IAM user in my AWS account. The policy references the bucket name which is \"xo-staging\".\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AccessToGetBucketLocation\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetBucketLocation\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::*\"\n            ]\n        },\n        {\n            \"Sid\": \"AccessToWebsiteBuckets\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutBucketWebsite\",\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::xo-staging\",\n                \"arn:aws:s3:::xo-staging/*\"\n            ]\n        },\n        {\n            \"Sid\": \"AccessToCloudfront\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudfront:GetInvalidation\",\n                \"cloudfront:CreateInvalidation\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n\nI'm deploying a Gatsby application from my local machine to Github where I am using Github Actions to run a build and deploy script.\nIn my package.json file I have set \"deploy\" to the value of gatsby-plugin-s3 deploy --yes; export AWS_PAGER=\\\"\\\"; aws cloudfront create-invalidation --distribution-id E5FDMTLPHUTLTL --paths '/*';  in my workflows.yml file I have set \"deploy\" to npm run deploy.\nIn Github my build succeeds but my deploy fails. The error I get tells me \"AccessControlListNotSupported: The bucket does not allow ACLs\".\nI've checked the actual bucket permissions in AWS and tried selecting different options, but always the same error message returns. In other words, I have tried removing all blocks on public access and ACLs but still the problem persists.\nPlease can someone suggest what I might need to change to get this full deploy working?"}, {"role": "assistant", "content": "Adding Screenshots to the answer provided by @rudieros\n\nGo to Bucket > Permissions Tab\n\n\nScroll to Object Ownership and click on Edit.\n\n\nChange the settings as below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github linking with other repos\n\nI have a project that relies on two repos in github to function. \nWhen I submit my project to github how do I link to these two repos? \nShould I duplicate the files in my own repo or link to the other repo at a specific revision as I don't want it to update and cause incompatibility.\nI already created my github repo what should I do?"}, {"role": "assistant", "content": "You can use git submodules to \"link\" to other projects.\nSee here - https://github.blog/2016-02-01-working-with-submodules/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does it mean to fork on GitHub?\n\nAfter few explorations, In my understanding, it is related to contribution.\nFork means to make a copy of the repository (the one being forked) into my own github account.\nIf I want to fork the official jQuery repository, then I would go to https://github.com/jquery/jquery and hit the \"Fork\" button and GitHub will copy the repository (jquery) to my account (http://github.com/sanjaykhadka). Then a copied version of that repository will be available to me at http://github.com/sanjaykhadka/jquery\nNow I can make whatever the changes I wish to make to my repository and then send a pull request to the original repository (jQuery's repository), asking the jQuery team to merge my changes into their original repository.\nDid I understand it properly, or does it mean something more or something else?"}, {"role": "assistant", "content": "Yes, you are absolutely right. When i teach others GitHub, i would like to explain the concept via an example. Lets take a scenario in which the teacher is conducting an MCQ in his class. He usually make copy of the question paper and distribute it (Forking) to his students so that they can work on it and mark the correct answer. The teacher still has the master copy. On the completion of the test he can collect the copies from students so that he can assess it(Pull request).\nSimply just like it. Forking is a concept of making copy of the main repository to your account so that you can make modifications in it. You can Submit pull request to the main repository with the modifications. It will make sure that the main repository is prevented from unwanted changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove an applied git patch?\n\nI have a git repo, where we apply many patches in test environment.\ngit apply --stat --check --ignore-whitespace /home/kent/Desktop/patches/test.patch --exclude .gitignore\n\ngit am -s --ignore-whitespace /home/kent/Desktop/patches/test.patch --exclude .gitignore --exclude .gitignore\n\nIf I have to remove the patch and apply a new one, at present I clone the live content and reapply all the test patches and push again.\nThis process is somehow cumbersome and also leads to errors at times I also miss one or two patches.\nI wanted to know if there is a way to remove a patch and apply the new one\nAlso, to add one way is there if we commit each time to the patch and then i can use:\ngit revert <<commit id>>\n\nThe above does not work for me at all times."}, {"role": "assistant", "content": "TL;DR\nYou can revert a patch with:\n$ git apply -R <patch>\n\n\nYou can generate a patch either by one of the following:\nThis will generate a patch from a diff\n$ git diff --patch > 0001-some-modifications.patch\n\nIf you want to generate a patch for just the HEAD commit:\n$ git show --patch HEAD^ > 0001-some-modifications.patch\n\nYou can generate a patch for the previous 3 commits from HEAD:\n$ git show --patch HEAD~3 > 0001-some-modifications.patch\n\nYou can apply the patch by:\n$ git apply -- 0001-some-modifications.patch\n\nYou can revert a patch with:\n$ git apply -R <patch>\n\nWhen you generate a patch it is just a diff with metadata; files, line numbers adds/removes; something along the following:\ncommit 9dad147cbf16befecdef2e812c1249499bdef5ac\nAuthor: My Name <[email\u00a0protected]>\nDate:   Mon Dec 21 20:46:01 2015 +0000\n\n    Example commit message.\n\ndiff --git a/src/example.md b/src/example.md\nnew file mode 100644\nindex 0000000..ab73512\n--- /dev/null\n+++ b/src/example.md\n@@ -0,0 +1,3 @@\n+# Example document\n+\n+ Hello World\n\nSo when you use git apply you're essentially applying the edits as per to the tree.\nWhen you then run git apply -R git will simply do the opposite to the patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone a Github Gist via SSH protocol?\n\nGithub really seems to want us to use the HTTPS protocol to use Gists, for example, they only list the HTTPS url on a Gist page - e.g. https://gist.github.com/donatello/5834862\nIs it possible to clone a Gist using SSH protocol?"}, {"role": "assistant", "content": "Yes, it is possible:\ngit clone [email\u00a0protected]:5834862.git\n\nJust replace with your own Gist ID of course."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub MarkDown: Are Macros and Variables possible?\n\nI've been learning github markdown, I had a question about variables and macros.\nis it possible to define a variable or macro to prevent repeated printing of a block of text? \nThe use case is that I have a table producing a big grid of hyperlinks - the links look like the below. \nhttp://www.a-big-long-big-big-long-hyperlink/more-long-stuff?id=1234\n\nit would be nice if I could do something like the below once:\n$link=http://www.a-big-long-big-big-long-hyperlink/more-long-stuff?id\n\nand then in each cell in the table, I can say something like\n$link=1234\n\nSome other cell\n$link=2345\n\nthe idea being that:\n\nThe table (which has ~10 columns and ~10 rows) is a bit easier to see on a normal screen, at the moment with the prefix to the links being so long, it looks really ugly as the links wrap to the next line\nIf I want to change the root link, I can change it in one place (yes, I know I could do search and replace in an editor!)\n\nCheers."}, {"role": "assistant", "content": "Below are a few ways to write Reference-Links\n[I'm an inline-style link](https://www.somewebsite.com)\n\n[I'm an inline-style link with title](https://www.somewebsite.com \"somewebsite's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself]\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.somewebsite.org\n[1]: http://somewebsite.org\n[link text itself]: http://www.somewebsite.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Pull Request to a new Upstream Branch\n\nMy workflow: I have a fork (origin) of a remote project (upstream). I have created a branch, topic/TICKET. I want to create a pull request of my origin branch to the upstream project in a same-named, brand new \"topic/TICKET\" branch. In other words, I don't want my pull request toward the master branch or any existing branch.\nWhen using BitBucket I have this option. When I create my PR, I select my origin branch and then the remote branch selection allows \"Create new branch (topic/TICKET)\".\nIn GitHub I don't appear to have this option. I can type in the new branch name; but then the option to continue greys out until I select a valid, existing branch upstream.\nThe annoying work-around is creating the branches upstream before I perform the PR; but it requires asking someone who can commit upstream -- it seems to me like there must be an easier way to do this. \nSo, is there any way with GitHub to create a pull request to create a new upstream branch, or is this just a known limitation?"}, {"role": "assistant", "content": "I was trying a similar thing, and the only solution I got is to have an user with push permission to upstream.\nThat way you could do a first push to upstream. Right after that, you also do a push to origin; and afterwards you can make your pull requests from branch to branch as you wish in first place.\nJust be careful when you create the pull request, because the default selected branch for upstream is always \"master\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Permission denied error on Github Push\n\nRecently, I'm added as a member/contributor for Github project. I have cloned that project on local machine.\nI have made some changes and committed locally and now trying to Push changes to original repo but when I try to Push,I get some permission error?\nC:\\Users\\MM\\Documents\\GitHub\\software-licensing-php [master]> git push\norigin master\nremote: Permission to EasySoftwareLicensing/software-licensing-php.git denied to\n irfandayan.\nfatal: unable to access 'https://github.com/EasySoftwareLicensing/software-licen\nsing-php.git/': The requested URL returned error: 403\nC:\\Users\\MM\\Documents\\GitHub\\software-licensing-php [master]> git statu\ns\n# On branch master\n# Your branch is ahead of 'origin/master' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\nnothing to commit, working directory clean\n\nAm I lacking some permission for pushing changes so I could ask the original author of project?"}, {"role": "assistant", "content": "click fork button on original github project page\nclone your forked repository instead original\npush to it\npress Pull Requests button on your repository\ncreate it\nwait for original author to accept it"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What happens to the forks when deleting the original repository?\n\nI want to know what happens if the original repository is deleted when there are different forks. Do the forks stay on GitHub, or are the forks also deleted?"}, {"role": "assistant", "content": "It depends whether the original and the fork are public or private, according to GitHub's documentation:\n\n\nDeleting a private repository will delete all of its forks. \nDeleting a public repository will not delete its forks.\n\n\nMore detail on this page:\n\nDeleting a private repository\nWhen you delete a private repository, all of its private forks are\n  also deleted.\nDeleting a public repository\nWhen you delete a public repository, one of the existing public forks\n  is chosen to be the new parent repository. All other repositories are\n  forked off of this new parent and subsequent pull requests go to this\n  new parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do Git LFS and git-annex differ?\n\ngit-annex has been around for quite some time, but never really gained momentum.\nGit LFS is rather young and is already supported by GitHub, Bitbucket and GitLab.\nBoth tools handle binary files in git repositories. On the other hand, GitLab seems to have replaced git-annex with Git LFS within one year.\n\nWhat are the technical differences?\nDo they solve the same problem?"}, {"role": "assistant", "content": "They do solve the same problem.\nLet me start off with pro/con, then I'll move into technical differences.\ngit-annex\nPros:\n\nSupports multiple remotes that you can store the binaries.\nCan be used without support from hosting provider (for more details see here).\n\nCons:\n\nWindows support in beta, and has been for a long time\nUsers need to learn separate commands for day-to-day work\nnot supported by github and bitbucket\n\ngit-lfs\nPros:\n\nSupported by github, bitbucket and gitlab\nMost supported on all os's\nEasy to use.\nautomated based on filters\n\nCons:\n\nRequires a custom server implementation to work. A simple ssh remote is not sufficient. Reference server is under development https://github.com/git-lfs/lfs-test-server.\n\nTechnical\ngit-annex\ngit-annex works by creating a symlink in your repo that gets committed. The actual data gets stored into a separate backend (S3, rsync, and MANY others). It is written in haskell. Since it uses symlinks, windows users are forced to use annex in a much different manner, which makes the learning curve higher.\ngit-lfs\nPointer files are written. A git-lfs api is used to write the BLOBs to lfs. A special LFS server is required due to this. Git lfs uses filters so you only have to set up lfs once, and again when you want to specify which types of files you want to push to lfs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github remote push pack size exceeded\n\nI am new to Git and have a fairly large project that I want to push to a remote repo (Repo B) on Github. The original project was on Github as well but from a different repo (Repo A). I have to make some changes to files from Repo A before I can setup the project up on Repo B. I have setup the remotes, ssh keys etc. and I run into an issue when pushing the codebase to Repo B.\nI get the following error all the time:\n$ git push <remote_repo_name> master\nEnter passphrase for key '/c/ssh/.ssh/id_rsa':\nCounting objects: 146106, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (35519/35519), done.\nfatal: pack exceeds maximum allowed size00 GiB | 154 KiB/s\nfatal: sha1 file '<stdout>' write error: Invalid arguments\nerror: failed to push some refs to '[email\u00a0protected]:<repo>.git\n\nI changed the following settings in my local gitconfig\ngit config pack.packSizeLimit 1g\ngit config pack.windowMemory 1g\n\n... and ran git gc (which I see reorganized the packs so that each pack stayed within the packsize of 1GB). This did not work and I get the error seen above.\nI tried to lower the size of each pack as well ....\ngit config pack.packSizeLimit 500m\ngit config pack.windowMemory 500m\n\n... and ran git gc (which I see reorganized the packs so that each pack stayed within the packsize of 500MB). This did not work either and I ran into the same error.\nI am not sure of what Github's default packsize limits are (if any). The account is a micro account if that matters."}, {"role": "assistant", "content": "The packsize limit does not affect git protocol commands (your push).\nFrom git-config under \npack.packSizeLimit:\n\nThe maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected.\n\nWhen executing a push git will always create exactly one pack no matter the size!\nTo fix this use two (or more) pushes:\ngit push remoteB <some previous commit on master>:master\n...\ngit push remoteB <some previous commit after the last one>:master\ngit push remoteB master\n\nThese pushes will all have smaller packs and will succeed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install package from github repo subfolder\n\nIs it possible to install npm package from github when the package located inside subfolder?\nFor example, we have Microsoft BotBuilder repository:\nhttps://github.com/Microsoft/BotBuilder\nBut I need to install package inside subfolder \"Node/core/\":\nhttps://github.com/Microsoft/BotBuilder/tree/master/Node/core/\nSo how can I install it with npm?"}, {"role": "assistant", "content": "Add to package.json:\n...\n\"scripts\": {\n  \"postinstall\": \"mkdir BotBuilder; cd BotBuilder; git init; git remote add -f origin https://github.com/Microsoft/BotBuilder.git; git config core.sparseCheckout true; echo \\\"Node/core\\\" >> .git/info/sparse-checkout; git pull --depth=1 origin master; cd ..; npm i ./BotBuilder/Node/core/\"\n  ...\n},\n...\n\npostinstall script is running after the package is installed.\nAnd step by step:\n\nMake folder to clone repo: mkdir BotBuilder\nenter to the folder: cd BotBuilder\ninit git repo: git init\nset git origin to Microsoft/BotBuilder repo: git remote add -f origin https://github.com/Microsoft/BotBuilder.git\nenable sparse checkout: git config core.sparseCheckout true\nadd Node/core to checkout list: echo \"Node/core\" >> .git/info/sparse-checkout\npull part of repo: git pull --depth=1 origin master\nenter to Your app folder: cd ..\ninstall BotBuilder: npm i ./BotBuilder/Node/core/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trigger a GitHub Action when another repository creates a new release\n\nI'm trying to build a GitHub workflow that will be triggered when another repository creates a new release.\nIn the documentation, there is the paragraph: on.event_name.types where event_name will be release.\nThe question is: Is there any way to refer to the release event of another repository?"}, {"role": "assistant", "content": "Is there any way to refer to the release event of another repository?\n\nFairly sure this feature does not exist.\nIf you have have access to the repository creating the release then you could call a webhook event to trigger an on: repository_dispatch workflow to run in another repository. repository-dispatch action can help in this case.\nIf you don't have access to the repository creating the release (which I assume is the case here) then this would be my suggestion. First, create the following workflow that periodically checks the release version tag of the repository you want to track. If it differs from the release version you currently have saved in your repository then the new version will be committed.\nNote that you must prepare the destination file first (e.g. release-versions/swagger-ui-latest.txt) for the the modified files check to work.\nFurther, you must use a repo scoped token instead of the default GITHUB_TOKEN. For more detail about that see Push to origin from GitHub action\nname: Get latest release version\non:\n  schedule:\n    - cron:  '0 10 * * *'\njobs:\n  get-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          token: ${{ secrets.REPO_SCOPED_TOKEN }}\n      - name: Fetch release version\n        run: |\n          curl -sL https://api.github.com/repos/swagger-api/swagger-ui/releases/latest | \\\n          jq -r \".tag_name\" > release-versions/swagger-ui-latest.txt\n      - name: Check for modified files\n        id: git-check\n        run: echo ::set-output name=modified::$([ -z \"`git status --porcelain`\" ] && echo \"false\" || echo \"true\")\n      - name: Commit latest release version\n        if: steps.git-check.outputs.modified == 'true'\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git commit -am \"New release version\"\n          git push\n\nThen you can create a second workflow that only runs when it sees any changes to the directory release-versions.\non:\n  push:\n    paths:\n      - 'release-versions/*'\n\nIn this workflow you can use the saved version to fetch the assets you need and do whatever processing you need to.\nHere is a similar example that raises a pull request instead of committing immediately."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Inline code syntax highlighting in GitHub markdown?\n\nGitHub-flavored markdown supports syntax highlighting in codeblocks. This is done by adding the name of the language next to the triple-grave codeblock markers:\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n\nStandard markdown also supports inline codeblocks by wrapping text in `single graves`. Is there any way to add syntax highlighting to these inline codeblocks?"}, {"role": "assistant", "content": "GitHub comments, wikis, README.md etc. use GFM, essentially CommonMark with some extensions, where it's not possible to add syntax highlighting. (Follow the link to see whether anything has changed, but don't hold your breath because nothing has in the last decade.)\nHowever, GitHub Pages uses Jekyll and by extension kramdown where you can use:\n`x = 4`{:.ruby}\n\nP.S. If you happen to use pandoc, the syntax is:\n`x = 4`{.ruby}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push heroku master says \"Everything up-to-date\", but the app is not current\n\nI have an app on Heroku that is running old code.  I've made a small change and committed the change.  I then ran\ngit push heroku master\n\nIt'll say\nFetching repository, done.\nEverything up-to-date\n\nBut if I go and look at the app, it's all old code.  I did revert the site back to another version in Heroku about 15 days ago, but pushed updates to it since then and they worked.\nWhy is heroku not getting the most current files from my github repository?  Is there a way to just reset the app and push the files from github again?  I have production data in the database so I do NOT want to touch it."}, {"role": "assistant", "content": "Kindly confirm your current branch is master. \n git branch \n\nIf the pointer is not pointing the master, then check out to master branch\ngit checkout master\n\nCommit your changes and try to push to heroku\ngit commit -am \"xxxyyzzz\"    \ngit push heroku master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github Readme - reference issue\n\nHow can I reference (insert a relative link to) an issue in my github Readme.md?\nI found the following document GitHub Flavored Markdown where it is described how to reference to an issue in a commit, but not in the readme.\nE.g. if the Issue is: https://github.com/user/project/issues/5 how can I set a link to it in my readme without using absolute links?"}, {"role": "assistant", "content": "There's a pretty ugly way of doing something like that if you only want to refer to issues from the same repo, which as of 2015-04-29 works:\nsee also [#3](/../../issues/3)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deploying to Heroku using git on bitbucket\n\nI want to host my source on bitbucket using git because I obviously get a free private repo and I want to host my app on heroku using the source code from bitbucket. \nCan i do it using the github client and heroku toolbelt. Will it work? Github is great but i dont want everyone seeing my code and I dont want to pay for a private repo because its a small project."}, {"role": "assistant", "content": "Deploying to Heroku should work regardless of where you host your code as the Heroku CLI adds it's own git remote for the sake of deployments. In fact, you can even git pull from Heroku, so you could technically use Heroku as a private git repository instead (though not recommended). As for using the GitHub client to connect to bitbucket, simply change the repository remote to the URL provided by bitbucket in the settings tab of the client."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to exclude files from git language statistics?\n\nSilly question and not on something that is so necessary, but is it possible to exclude files from Github's language statistics aggregation on top?\nI have checked some external CSS and JavaScript frameworks to be compressed along with the rest of the source code. They get measured as part of the project although they have not been contributed from a team member. This means that the status bar does not reflect the exact state of the project."}, {"role": "assistant", "content": "GitHub uses the Linguist library for source code detection; Linguist treats all of the paths defined in its' vendor.yml as vendored and won't include them in the language statistics for a repository.\nUpdate:\nFrom comments below, currrent instructions are here: https://github.com/github/linguist/blob/master/docs/overrides.md\nOriginal answer:\nYou can specify something different for your repo by editing your repo's .gitattributes file. To treat a path as a vendored file, add the path followed by linguist-vendored:\nspecial-vendored-path/* linguist-vendored\n\nTo treat an otherwise vendored path as unvendored, use linguist-vendored=false:\njquery.js linguist-vendored=false\n\nSource"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge two GitHub accounts\n\nI have two GitHub accounts, one of this was created a long time ago at my work and has an username that refers to the company where I work.\nI have another account which is my personal GitHub account that I can't stop using. \nCould I merge the two accounts so I can work in only one of these?"}, {"role": "assistant", "content": "Merging 2 accounts is not possible at github, you can transfer ownership to your personal account.\ngoto  >> Setting >>Transfer ownership \n\nFor more details : https://help.github.com/articles/merging-multiple-user-accounts/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git stuck on Unpacking Objects phase\n\nI'm trying to do a git pull from a remote repository in github into a local machine...\nbut git gets stuck on 70% into the \"Unpacking objects\" phase, with no sign of going anywhere.. (left it for several hours now with no change)\nAny suggestion on how to fix this issue?\nIs it possible to instruct git to only download the latest commit/version from the remote repository without all the Intermediate states?"}, {"role": "assistant", "content": "I had the same problem when I git pull a repository on github.com. I found there were some large files and the connection to github was slow. So maybe you just have to wait patiently before git pulls the whole repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I cache steps in GitHub actions?\n\nSay I have a GitHub actions workflow with 2 steps.\n\nDownload and compile my application's dependencies.\nCompile and test my application\n\nMy dependencies rarely change and the compiled dependencies can be safely cached until I next change the lock-file that specifies their versions.\nIs a way to save the result of the first step so that in future workflow can skip over that step?"}, {"role": "assistant", "content": "Most use-cases are covered by existing actions, for example:\n\nactions/setup-node for JS\ndocker/build-push-action for Docker\n\n\nCustom caching is supported via the cache action. It works across both jobs and workflows within a repository. See also: GitHub docs and Examples.\nConsider the following example:\nname: GitHub Actions Workflow with NPM cache\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Cache NPM dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.OS }}-npm-cache-\n\n    - name: Install NPM dependencies\n      run: npm install\n\nHow caching works step-by-step:\n\nAt the Cache NPM dependencies step, the action will check if there's an existing cache for the current key\nIf no cache is found, it will check spatial matches using restore-keys. In this case, if package-lock.json changes, it will fall back to a previous cache. It is useful to prefix keys and restore keys with the OS and name of the cache, as it shouldn't load files for a different type of cache or OS.\nIf any cache is found, it will load the files to path\nThe CI continues to the next step and can use the filed loaded from the cache. In this case, npm install will use the files in ~/.npm to save downloading them over the network (note that for NPM, caching node_modules directly is not recommended).\nAt the end of the CI run a post-action is executed to save the updated cache in case the key changes. This is not explicitly defined in the workflow, rather it is built into the cache action to take care of both loading and saving the cache.\n\n\nYou can also build your own reusable caching logic with @actions/cache such as:\n\n1-liner NPM cache\n1-liner Yarn cache\n\n\nOld answer:\nNative caching is not currently possible, expected to be implemented by mid-November 2019.\nYou can use artifacts (1, 2) to move directories between jobs (within 1 workflow) as proposed on the GH Community board. This, however, doesn't work across workflows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSL certificate problem: self signed certificate in certificate chain\n\nI have upgraded my Inteliij IDEA 2019.2 recently and I am getting the following error if I try to pull from using my IDE:\n\nGit Pull Failed: unable to access 'https://github.xxx.com/app-Hello-USD/DGS.git/': SSL certificate problem: self signed certificate in certificate chain.\n\nCould someone help me what option I have to enable?"}, {"role": "assistant", "content": "git config --global http.sslVerify false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Only use a proxy for certain git urls/domains?\n\nIs it possible to configure git to use a proxy only for specific domains?\nI'd like to use our corporate proxy to access Github but leave it off for accessing our own internal git repos.\nI'm using bower and it needs to require items both within our firewall and on github so I can't do this as a per project setting. It needs to be some kind of global configuration option. Any thoughts?"}, {"role": "assistant", "content": "To add another possibility, you can define a proxy through the git config http.proxy.\ngit config --global http.proxy http://mydomain\\\\myusername:mypassword@myproxyserver:proxyport\n\nBut what is really neat is, starting git1.8.5 (October 2013), you can set http settings per url.\nThe \"http.*\" variables can now be specified per URL that the configuration applies.\nFor example,\n[http]\n   sslVerify = true\n[http \"https://weak.example.com/\"]\n   sslVerify = false\n\n\nwould flip http.sslVerify off only when talking to that specified site.\n\n\nSee commit d4770964d5:\n$ git config --bool --get-urlmatch http.sslVerify https://good.example.com\ntrue\n$ git config --bool --get-urlmatch http.sslVerify https://weak.example.com\nfalse\n\n\nWith only <section> specified, you can get a list of all variables in the section with their values that apply to the given URL.  E.g\n\n$ git config --get-urlmatch http https://weak.example.com\nhttp.sslverify false\n\n\nAll the details are in commit 6a56993b:\nhttp.<url>.*::\n\n\nAny of the http.* options above can be applied selectively to some urls.\n  For a config key to match a URL, each element of the config key is compared to that of the URL, in the following order:\n\n\nScheme (e.g., https in https://example.com/).\nHost/domain name (e.g., example.com in https://example.com/).\nPort number (e.g., 8080 in http://example.com:8080/).\nPath (e.g., repo.git in https://example.com/repo.git). \nUser name (e.g., user in https://[email\u00a0protected]/repo.git)\n\n\nThe list above is ordered by decreasing precedence; a URL that matches a config key's path is preferred to one that matches its user name.\n  For example, if the URL is https://[email\u00a0protected]/foo/bar a config key match of https://example.com/foo will be preferred over a config key match of https://[email\u00a0protected].\nAll URLs are normalized before attempting any matching (the password part, if embedded in the URL, is always ignored for matching purposes) so that equivalent urls that are simply spelled differently will match properly.  \nEnvironment variable settings always override any matches.\n  The urls that are matched against are those given directly to Git commands.\n  This means any URLs +visited as a result of a redirection do not participate in matching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Meaning of Github Ahead/Behind Metrics\n\nIn plain language (hopefully with a simple example), what do the ahead/behind metrics on a Github repo's branch mean?\nAnd what are the implications for that branch and the attention it's receiving?  Is being \"behind\" a bad sign for a branch?"}, {"role": "assistant", "content": "Ahead is the number of commits on this branch that do not exist on the base branch. Behind is the number of commits on the base branch that do not exist on this branch.\nAhead and behind are almost like a kind of \"age\" metric. The ahead number tells you roughly how much impact the branch will have on the base branch should it be merged. The behind number tells you how much work has happened on the base branch since this branch was started.\nI find the behind number really useful for judging whether a branch is likely to merge cleanly. When a lot of work has happened on the base branch, it's more likely that the two branches have modified the same line(s). When behind is large, it's a sign that you should probably merge the base branch into this branch to sync up. Once you merge the base branch into this branch, behind will be 0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Permission denied (publickey). fatal: Could not read from remote repository\n\nI\u00b4m having trouble with GitHub. I\u00b4ve playing around with a remote repository of Git.\nWhen I now try to make any changes to the remote directory, i.e.\ngit remote show origin\n\nor\ngit push -u origin master\n\nI get this error\n\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\n\nPlease make sure you have the correct access rights\nand the repository exists.\nUlrichs-MacBook-Pro:coredatatest ulrichheinelt$ git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nI would be happy, when I could start again with a new (empty) remote directory. Or is there a way, to fix this error?\nThis are my first steps with GitHub, started yesterday...\nEdit 1\nmy settings at https://github.com/UlliH/CoreDataTest/settings\n...\nEdit 2\ntoo early happy :-(\nAfter setting the SSH and GPG keys, the errors are still the same. :-/\nEdit 3\nI think that's right so, but still the same..."}, {"role": "assistant", "content": "Generate SSH key using ssh-keygen -t rsa -b 4096 -C \"your email\".\nCopy the output of cat ~/.ssh/id_rsa.pub to your clipboard\nPaste the above-copied output to the form at https://github.com/settings/ssh/new\nThen go ahead to retry the operation that generated the initial fatal error.\n\nUpdate: If you are still facing \"ssh: connect to host github.com port 22: Connection timed out\", then follow the below steps.\nCheck the connection, mostly it will time out\n$ ssh -T [email\u00a0protected]\nssh: connect to host github.com port 22: Connection timed out\n\nCheck the same by providing optional param port\n$ ssh -T -p 443 [email\u00a0protected]\nHi <user_name>! You've successfully authenticated, but GitHub does not provide shell access.\n\nUpdate the SSH settings\n$ vim ~/.ssh/config\n# Add github in the know hosts\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\nCheck the connection, mostly it will connect this time\n$ ssh -T [email\u00a0protected]\nHi <user_name>! You've successfully authenticated, but GitHub does not\nprovide shell access."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hidden markdown text on GitHub\n\nIs there anything in markdown syntax specifically on GitHub to support hidden text?\nI just want to put some to-do notes in README.md for myself, not to be visible.\n\nEXTRAS\nAs a tribute to the great answer by Tamas, and what's also asked a lot of times, below is an example of how to write foldable sections within MD files:\n<details>\n<summary><b>My section header in bold</b></summary>\n\nAny folded content here. It requires an empty line just above it.\n\n</details>"}, {"role": "assistant", "content": "Just use standard HTML comments:\n<!-- This is commented out. -->"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Flow text around an image in (GitHub) Markdown\n\nI have a narrow long image that I want to display at the top right of a README.md file on GitHub. I have been trying several things to get it aligned right and currently have\n<p align=\"right\">\n  <img src=\"doc/subpagelist.png\" />\n</p>\n\nThis works in that the image is aligned on the right side, though is rather useless as all content that is below in image in the Markdown file gets displayed under the bottom of the image, rather then to the left of it.\nIs there a way to have the text flow around the image (without getting rid of headers and paragraphs)?"}, {"role": "assistant", "content": "The align=\"right\" (or left) attribute works in GitHub Markdown:\n<img align=\"right\" src=\"doc/subpagelist.png\">"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In Github, is there a way to search for pull requests created by any author from a provided list?\n\nFor my team's weekly builds, I go through all pull requests from the company GitHub and pull out the PRs associated to my team. This requires an annoying sieving step that requires a walk-through of the company's previous week of code contribution.\nI looked at the official GitHub search documentation (HERE) and found the \"author\" field could be used to narrow down the search in the way I want, but when I try this at https://github.com/pulls it only works on one author at a time.\nIs there a way to search across a list of authors?\nFor a little extra context, my team operates across a large list of repos, all of which are under a blanket organization which houses all repos across the company."}, {"role": "assistant", "content": "Make sure that you are using the full search at https://github.com/search.\nThen simply add extra author: <name> fields to your query. The searching engine will OR fields. For example:\nis:pr author:username1 author:username2\n(Note that this only works on https://github.com/search. The search syntax on other pages, like https://github.com/pulls, is severely limited and does not support searching by multiple authors. If you try the same search on https://github.com/pulls, GitHub will simply ignore all but one author that you list.)\nTo limit it to repositories by a specific owner, add the user: <owner> field to the query."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple GitHub Pages and custom domains via DNS\n\nI want to have one user page and multiple project pages hosted by GitHub Pages but available under ONE custom domain (with subdomains for each GitHub Pages repository, of course). So my goals are as follows:\n\nOne user page (http://florianwolters.github.com) available under http://blog.florianwolters.de, http://www.florianwolters.de and http://florianwolters.de.\nAs many project pages as I wish (e.g. http://florianwolters.github.com/pear available under http://pear.florianwolters.de.\n\nAs of my current understanding, GitHub Pages do only allow ONE CNAME resource record for a page (both user pages and project pages) defined in the CNAME file in the root of a Git repository.\nI already tried out many things (playing around with DNS records and header redirects at my domain provider EUserv, but I can only access my GitHub user pages under one URL (http://blog.florianwolters.de). I am aware that DNS changes can take up until two days.\nCan somebody explain to me, how I can achieve the goals described above? I can not believe that this is not possible but I am also no expert for DNS, etc.\nIf the above is not possible: What is your suggested workaround? I do want to access all my GitHub pages under one domain (and the subdomains of that domain).\nResources\n\nhttp://help.github.com/pages/\nCustom domain for GitHub project pages\nhttps://groups.google.com/forum/?fromgroups#!topic/github/AaAuoDK44Ag\nhttps://github.com/blog/315-cname-support-for-github-pages\nhttp://code.lancepollard.com/custom-domain-github-pages"}, {"role": "assistant", "content": "You can do it. Notice that all DNS CNAME entries point to the same host.\n1:\ngithub.com/florianwolters/florianwolters.github.com\nCNAME file content: blog.florianwolters.de\nDNS CNAME: blog > florianwolters.github.com\n2:\ngithub.com/florianwolters/pear/tree/gh-pages\nCNAME file content: pear.florianwolters.de\nDNS CNAME: pear > florianwolters.github.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reference a file in a GitHub issue? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIn GitHub issues, can I reference a file in the repository directly in the issue and have it auto-link?"}, {"role": "assistant", "content": "You cannot auto-link to a file, only commits and issues.\nSide note, it is better to use a hash when linking to make it \u201cfuture proof\u201d.\nExample:\nhttps://github.com/antirez/redis/blob/3244d8b/MANIFESTO"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete branches whose name matches a certain pattern\n\nHow can I delete branches in git starting with the letter 'o'?\nSuppose, I have a list of branches like the following:\norigin_alpha\norigin_beta\norigin_gamma\nalpha\nbeta\ngamma\n\nI wan't to delete the branches origin_alpha, origin_beta and origin_gamma."}, {"role": "assistant", "content": "Update: The -r option to xargs is a GNU addon. Unless you use xargs from GNU findutils it might not work. You can omit it but that leads to an error if the input piped to xargs is empty.\n\nYou can use git branch --list <pattern> and pipe it's output to xargs git branch -d:\ngit branch --list 'o*' | xargs -r git branch -d\n\nBtw, there is a minor issue with the code above. If you've currently checked out one of the branches that begins with o the output of git branch --list 'o*' would look like this:\n* origin_master\norigin_test\no_what_a_branch\n\nNote the asterisk * in front of the current branch name.\nWhile you cannot delete the current branch anyway, it leads to the fact that xargs also passes * to git branch delete.\nAs I say it is just a cosmetic error, but if you want to avoid it use:\ngit branch --list 'o*' | sed 's/^* //' | xargs -r git branch -d"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does a grey icon in remote GitHub mean\n\nCan anyone please tell me why i have the grey icon when i push my files to github ? In side the app directory, there should be models, views , and controllers but in the remote GitHub I can't click in."}, {"role": "assistant", "content": "git rm --cached <folder_name>\n\nThen go to the parent directory and do:\ngit add .\ngit commit -m \"<your_message>\"\ngit push --all"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I clean up my Github fork so I can make clean pull requests?\n\nI forked a repository on Github. I've made some minor changes and submitted pull requests to the upstream, but along the way my fork has become so mangled I'm unable to generate clean pull requests; when I start a pull request from a branch with six changes, Github wants to submit thirteen, with seven of them already existing upstream (natch). \nMy problem seems to be related to only pulling the latest commits, but when I create a new branch and cherry-pick commits I still have extras. I've futzed with rebasing as well, but now it looks like even my master is so messed up I can't generate a clean copy of upstream. This is apparently because I didn't understand that I needed to rebase instead of merging, so clearly I've made mistakes; what I'm trying to do is figure out how to unsnarl that knot and get back to a clean state where I can move forward usefully.\nI kind of want to blow away my fork and make a new fork of the upstream, but I gather that, too, is difficult. \nHaving confessed my Git sins, how do I obtain github absolution?"}, {"role": "assistant", "content": "Step 1: Pull upstream changes\nIt's recommended to add the upstream repo as \"upstream\" as explained on the Fork a Repo page:\ngit pull --rebase upstream master\n\nThe --rebase option places your changes on top of the latest commit without merges.\nStep 2: (Optional) Merge your commits into 1 commit\ngit reset --soft upstream/master\n\nThis command will \"undo\" all your commits, but won't change the files. So you can commit all your changes in a single commit.\ngit commit -a\n\nStep 3: Check & test your changes\nTo show the changes use a GUI like the built-in gitk, Sourcetree, TortoiseGit or Tower (paid), etc.\nStep 4: Push\ngit push will throw an error, because the push would change the target repository's history.\nIf you're confident the changes shown in step 3 are correct then push with \"-f\"\ngit push -f origin master\n\n\nAdditional information\nThe command to add a remote is:\ngit remote add upstream git://github.com/[username]/[project].git\n\nYou can also also pull from a direct URL:\ngit pull --rebase  git://github.com/[username]/[project].git\n\nBut then you'll need the hash of the latest upstream commit instead of \"upstream/master\" in the other steps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Getting rid of '... does not point to a valid object' for an old git branch\n\nI have a fork of a Git repo and my clone appears to have an issue with an old, no longer existant, branch. I keep seeing this message:\nerror: refs/heads/t_1140 does not point to a valid object!\nI don't have any other messages and the repo works fine. There's no operation that stops me from working on other branches, pushing changes, pulling...etc.\nI've looked around and there's less than clear instructions on how to get around this issue. I've tried to execute git fsck --full but I see no errors. Just a load on dangling ... messages.\nI've also checked my .git/config and there's no references to this branch and have also checked .git/refs/heads and there's no reference to t_1140\nAny idea how to get rid of this error?\np.s I've tried to clone my repo again and it seems like the error is my Github repo too. So, the only thing I can think of right now is to ditch my repo and fork again."}, {"role": "assistant", "content": "This will clean out any missing refs:\ngit for-each-ref --format=\"%(refname)\" | while read ref; do\n    git show-ref --quiet --verify $ref 2>/dev/null || git update-ref -d $ref\ndone"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I fold content in Github markdown?\n\nHow does github fold text blocks?\nlook at this issuecomment"}, {"role": "assistant", "content": "Check if this follows dear-github issue 166, which mentions:\ncollapsible sections are supported:\n<details>\n<summary>Click to expand</summary>\n\nwhatever\n\n</details>\n\nSee more in this example.\n\nThe key is to wrap the whole contents inside the <p>:\n\n<details><summary>stuff with *mark* **down**</summary><p>\n\n## _formatted_ **heading** with [a](link)\n\n---\n{{standard 3-backtick code block omitted from here due to escaping issues}}\n---\n\nCollapsible until here.\n</p></details>\n\n\nGabriel Devillers reports in the comments that GitLab also have a similar collapsible section support."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub \"can't automatically merge\"?\n\nSometimes when i try to merge the head fork into my base fork, or my base fork into the head fork, I get the following message on GitHub: \n\n\"Can\u2019t automatically merge. Don\u2019t worry, you can still create the pull request.\" \n\nHow do I view the conflicts, if there are any for this?\nI have read about 10 different examples with various commands but I can't tell what the names in the examples apply to in my situation as different names for bases, forks, branches, etc, exist.\nAfter all of this, I can't believe there isn't a command you can type to see the conflicts, edit the conflicts and go on with merging. \nIf there is, I haven't found it yet."}, {"role": "assistant", "content": "Let's say there is your-branch and the master branch. You want to merge changes from your-branch into the master for others to see them, but someone else did conflicting changes to the master (e.g. merging their PR) in the meantime. It is often useful to merge master into your-branch (i.e. do the merge the other way round) before creating the PR.\nIn the command line, you can:\ngit checkout master\ngit pull\ngit checkout your-branch\ngit merge master\n\nNow you can see the list of conflicts. Follow the messages you get from git to resolve the conflicts. You can use your favorite tools, so it is way easier. Finally, you commit&push. When you re-create the PR, there should be no conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I use Git locally?\n\nI'm working on a project at the moment, which I'd like to eventually make public on github, but, for the moment, needs to remain private.\nGithub needs users to pay in order to host a private repository, which I'm unwilling to do, so just creating a private github repository is not an option for me.\nHowever, I would still like to use git for version tracking etc. whilst I'm working on the project locally, so that when I do eventually put the project on github, all of this information, the project's changes start-to-finish, will be available.\nBut, I have no clue how to use git without a remote server. I'm wondering now if it just exactly the same, simply without the need for git push.\nThe perfect answer for me would be a step-by-step walkthrough, telling me exactly what I should type into the terminal to set up and maintain a local git repository."}, {"role": "assistant", "content": "You only need to push if you want to use a remote server.\nWhen working locally, you still need to git init to set up the repository, but after that you only need to do the steps\ngit add\ngit commit -m \"new commit\"\n\nto save (\"commit\") your changes.\nDon't git push at all, and don't git pull \u2014 there's no remote to sync changes with (git push and git pull just push and pull changes from the remote/online repository).\nType:\ngit log\n\nTo see that your changes have been recorded."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a Github clone in PHP that I can run on my own server? [closed]\n\nAs it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references, or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question can be improved and possibly reopened, visit the help center for guidance.\n                                \n                            \n\n\n\nClosed 11 years ago.\n\n\n\nI know there are plenty of ways to run git on my server, but I quite like the functionality of git with repo browsing - the fact that i can look at previous versions in the web interface.\nNow was I able to, I'd use github, but the problem is our source control rules are very strict and we aren't allowed to put files on other servers, even if they are encrypted.\nIs there a script that allows us to run a github like interface, or rather one that allows me to browse the revision history of the git project through a web interface?\nI'm running a LAMP server, but would consider alternate languages like python, perl etc should nothing in php be available.\ninterested in both paid and open source softwares"}, {"role": "assistant", "content": "The webapp behind Gitorious is open-source. You can have an interface exactly like it from your web server. It doesn't have all the Github bells and whistles but it has source browsing, revision history, commits, etc.\nIt's rails, which might not be optimal for you, but it's also free :-)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull-Request for only certain files/commits\n\nI have a repository that is forked from GitHub that has a few modifications made to it. However, in a certain commit, a few files were changed that I want to submit a pull-request for, leaving the other modified files out of the request.\nDo pull requests merge all commits, or do I need to do something special to isolate this commit?"}, {"role": "assistant", "content": "A pull request being made of whole commits, you need to split this commit into two separate commits one containing the change to put in the pull request, and the other holding the other changes. To do this you need git rebase -i, see for example How can I split up a Git commit buried in history? for a good explanation on how to do it.\nOnce you have split  the commit, move the ones you want to include into a topic branch, see for example How to move certain commits to another branch in git?, but it depends if the commits that make your pull request are sequential.\nThen finally you can push to Github and create the pull request from your topic branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SourceTree keeps asking for Github password\n\nMy organization is switching from Bitbucket to Github for project management. Today, I was trying to transfer our most recent project from Bitbucket to Github, by using SourceTree. I added a second remote repository to the project (using the URL of the destination repository on Github), brought everything up to date, and then attempted to push the code to the repository. A box popped up, asking for the password to my Github account. I entered in my (correct) password, and clicked 'OK', and the dialog box popped up again. I entered in my password (correctly) again, and it did the same thing.\nMy username is correctly identified, my password is correct, and I tried updating SourceTree because I had heard that it was an issue with a previous version. The problem persists.\nI am using SourceTree 2.3.1"}, {"role": "assistant", "content": "If you are using two-factor authentication with GitHub you will need to create a personal access token and use it with SourceTree:\n\nTo work with GitHub's two-factor authentication in SourceTree you can simply use your access token instead of your password. The steps to do this are as follows:\n\nGo to your Personal Access Tokens settings in GitHub.\nClick on the Generate new token button.\nName the token something descriptive.\nSelect which scopes you wish to grant this token.\nClick the Generate token button.\nCopy the token and use it as a password in your hosted repositories.\n\nYou can find more information about this on GitHub's help here.\n\nMac Users:\nIf your SourceTree keeps on asking for the password, go to the Terminal and type this:\ngit config --global credential.helper osxkeychain"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git rename from index.lock to index failed\n\nUsing the GitHub Windows client I did a sync to pull remote changes to my local machine, but before finishing the sync, I ran out of disk space and the sync failed.  Now I seem to have a bunch of local changes that are actually changes that were being pulled from origin.  I tried to run git pull but got:\nC:\\Users\\Tom\\SourceLog [master +4 ~26 -0 !]> git pull\nUpdating b3a86e1..5afd74f\nerror: Your local changes to the following files would be overwritten by merge:\n        SourceLog.Interface/IChangedFile.cs\n        SourceLog.Interface/ILogEntry.cs\n        ...\nPlease, commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        Lib/MSBuildExtensionPack/4.0.6.0/Ionic.Zip.dll\n        Lib/MSBuildExtensionPack/4.0.6.0/MSBuild.ExtensionPack.dll\n        ...\nAborting\n\nSo now I'm trying to discard the local changes but I'm getting:\nC:\\Users\\Tom\\SourceLog [master +4 ~26 -0 !]> git checkout -- .\nRename from '.git/index.lock' to '.git/index' failed. Should I try again? (y/n) y\nRename from '.git/index.lock' to '.git/index' failed. Should I try again? (y/n) n\nfatal: unable to write new index file\n\nHow can I clean this up?  (I didn't have any local changes before starting the sync.)\nUpdate\nCan't seem to reset head..\nC:\\Users\\Tom\\SourceLog [master +4 ~0 -0 !]> git reset head\nRename from '.git/index.lock' to '.git/index' failed. Should I try again? (y/n) y\nRename from '.git/index.lock' to '.git/index' failed. Should I try again? (y/n) n\nerror: Could not write new index file.\nfatal: Could not reset index file to revision 'head'."}, {"role": "assistant", "content": "In my case, this was caused by using the same Git repo from both admin and non-admin command prompts. When last git pull was from admin cmd, the index was created by it, and then non-admin cmd had insufficient permissions to modify it.\nMy solution was re-creating the index (while keeping the worktree intact):\ndel .git\\index\ndel .git\\index.lock\ngit reset --mixed head"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Set a default reviewer\n\nI do pull requests in a repo where it's always the same person reviewing.\nI would like to set him as the default reviewer so that I don't always have to choose him at each pull request, it'd be automatic.\nHow to do that ?"}, {"role": "assistant", "content": "GitHub has the ability to set the default reviewer using a CODEOWNERS file.\n\nCode owners are automatically requested for review when someone opens a pull request that modifies code that they own. When someone with admin permissions has enabled required reviews, they can optionally require approval from a code owner.\nTo use a CODEOWNERS file, create a new file called CODEOWNERS in the root, docs/, or .github/ directory of the repository, in the branch where you'd like to add the code owners."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to view the committed files you have not pushed yet?\n\nFor example I commit some files, the next day some more files, and so on. After some days I want to view all my committed files and view their difference with the remote repo. Note that I have not pushed anything. I just want to verify that if I push some thing then it will go to the remote repo as I expect."}, {"role": "assistant", "content": "Assuming you're on local branch master, which is tracking origin/master:\ngit diff --stat origin/master.."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github include md files in README.md?\n\nIs there a way in Github to include md files in for example the README.md?\n# Headline\n\nText\n\n[include](File:load_another_md_file_here.md)\n\nIt should not link to the file, it should load the contents from it, like PHP include / file_get_contents."}, {"role": "assistant", "content": "That does not seem to be possible, especially when considering github/markup#346 and github/markup#172.\nNo include directive is supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "what is the best practice of distributing binaries from a github project? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nwhat is the best practice of distributing binaries from a github project? \nI can think of:\n\nCreate a bin folder in your project where you keep a copy of the binaries. \nHowever, github is meant to store source code and not binaries Storing large and \nregularly changing binaries may be expensive qua diskspace and bandwidth?\nUpload a copy of the binaries to the github pages of the \nproject, or use a separate web site for hosting your binaries. \nHowever, that is not always feasible, and requires more (hand)work to keep the\nbinaries up to date, I rather want to have the binaries updated automatically or with a\nsingle action."}, {"role": "assistant", "content": "As of December 11, 2012 the Downloads feature on GitHub is deprecated. The article Distributing large binaries recommends using an external service:\n\nWe recommend Amazon S3 for storage paired with CloudFront for serving\n  via CDN, or other services such as SourceForge.\n\n\nHowever, since 2d July 2013, you now can define a release.\n\nReleases, a workflow for shipping software to end users.\n  Releases are first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts. They're accessible from a repository's homepage:\n\n\n\nReleases are accompanied by release notes and links to download the software or source code.\nFollowing the conventions of many Git projects, releases are tied to Git tags. You can use an existing tag, or let releases create the tag when it's published.\nYou can also attach binary assets (such as compiled executables, minified scripts, documentation) to a release. Once published, the release details and assets are available to anyone that can view the repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "cannot pull Git remote repository from Sourcetree\n\nI Generated ssh keys and configured my git and SourceTree. I could git pull and do other operations from Git-bash. \nNote: I have added the following in .bashrc to make it work.\neval `ssh-agent`\nssh-add\n\nHowever, when I try to git pull in SourceTree, I get this.\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin\n  Permission denied (publickey,password). fatal: Could not read from\n  remote repository.\nPlease make sure you have the correct access rights and the repository\n  exists.\n\nWhen I tried to create ssh-key from Putty(windows), it goes further, but waits with this following message!\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin\n  The server's host key is not cached in the registry. You have no\n  guarantee that the server is the computer you think it is. The\n  server's rsa2 key fingerprint is:\nssh-rsa 2048 0f:ee:bb:1c:6c:b4:50:0e:54:d6:e9:55:9b:38:45:df If you\n  trust this host, enter \"y\" to add the key to PuTTY's cache and carry\n  on connecting. If you want to carry on connecting just once, without\n  adding the key to the cache, enter \"n\". If you do not trust this host,\n  press Return to abandon the connection.\n\nif I open the terminal in SourceTree(which is git-bash), it asks me for passphrase. So, i suspect my .bashrc is not sourced by SourceTree. Or am I missing something else?"}, {"role": "assistant", "content": "I changed the client configuration from putty to openssh.\nGo to: Menu Tools > Options > SSH Client"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm notice Beginning October 4, 2021, all connections to the npm registry - including for package installation - must use TLS 1.2 or higher\n\nI am getting this warning from github on my npm project build process...\nI tried searching on the internet and also read the blog link posted by github - but I could not find the solution to it anywhere. Am I missing something ?\nWarning seen\n\nnpm notice Beginning October 4, 2021, all connections to the npm registry - including for package installation - must use TLS 1.2 or higher. You are currently using plaintext http to connect. Please visit the GitHub blog for more information: https://github.blog/2021-08-23-npm-registry-deprecating-tls-1-0-tls-1-1/"}, {"role": "assistant", "content": "After updating your NodeJS and NPM Version run this command in CLI\nnpm set registry=https://registry.npmjs.org/\n\nSave your Life, Thanks me Later :D"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove a Github Environment\n\nMy question is about cleaning up the \"Environments\" tab on a Github repository.\nI previously deployed via Heroku, using automatic deployment from two separate Github branches (one for staging, one for production).\nThis created a tab \"Environments\" on the repository, in which both Heroku environments were shown - exactly as intended.\nOnce I started to dive into Heroku pipelines, I have now configured the app to be promoted to production from staging, so the production environment no longer auto-deploys from a branch.\nThe Environments tab on my Github repo has no way to remove the environment that I no longer use. I can't seem to find any place on Github or Heroku to make Github \"forget\" this deployment environment.\nI hope my question is clear enough; if I can elaborate on anything, please let me know."}, {"role": "assistant", "content": "I made a little webpage/script too, to automate the process (I don't have Python installed, and I didn't see that someone else had already made a script), and this is online and putting your info will do the process automatically.\nStackblitz - Github Deployments deleter\nEdit 18/07/2020: I copied the script from Stackblitz to a local snippet code in here too, just in case Stackblitz disappears:\n\n\n// RECOMMENDED: Disconnect HEROKU from Github before doing this (though not strictly necessary, I think).\n//See https://stackoverflow.com/a/61272173/6569950 for more info.\n\n// PARAMETERS\nconst TOKEN = \"\"; // MUST BE `repo_deployments` authorized\nconst REPO = \"your-repo\"; // e.g. \"monorepo\"\nconst USER_OR_ORG = \"your-name\"; // e.g. \"your-name\"\n\n// GLOBAL VARS\nconst URL = `https://api.github.com/repos/${USER_OR_ORG}/${REPO}/deployments`;\nconst AUTH_HEADER = `token ${TOKEN}`;\n\n// UTILITY FUNCTIONS\nconst getAllDeployments = () =>\n  fetch(`${URL}`, {\n    headers: {\n      authorization: AUTH_HEADER\n    }\n  }).then(val => val.json());\n\nconst makeDeploymentInactive = id =>\n  fetch(`${URL}/${id}/statuses`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      state: \"inactive\"\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/vnd.github.ant-man-preview+json\",\n      authorization: AUTH_HEADER\n    }\n  }).then(() => id);\n\nconst deleteDeployment = id =>\n  fetch(`${URL}/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: AUTH_HEADER\n    }\n  }).then(() => id);\n\n// MAIN\ngetAllDeployments()\n  .catch(console.error)\n  .then(res => {\n    console.log(`${res.length} deployments found`);\n    return res;\n  })\n  .then(val => val.map(({\n    id\n  }) => id))\n  .then(ids => Promise.all(ids.map(id => makeDeploymentInactive(id))))\n  .then(res => {\n    console.log(`${res.length} deployments marked as \"inactive\"`);\n    return res;\n  })\n  .then(ids => Promise.all(ids.map(id => deleteDeployment(id))))\n  .then(res => {\n    console.log(`${res.length} deployments deleted`);\n    return res;\n  })\n  .then(finalResult => {\n    const appDiv = document.getElementById(\"app\");\n    appDiv.innerHTML = `\n<h1>CLEANUP RESULT</h1>\n<br>\nRemoved Deployments: ${finalResult.length}\n<br>\n<br>Ids:<br>\n${JSON.stringify(finalResult)}\n<br><br><br><br><br><br>\n  <p>(Open up the console)</p>\n`;\n  });\nh1,\nh2 {\n  font-family: Lato;\n}\n<div id=\"app\">\n  <h1>Github Deployment's Cleaner</h1>\n  <p> You need to put the parameters in!</p>\n</div>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - fatal: Unknown index entry format\n\nWhen I'm trying use git status or git checkout master or git pull, \nI'm getting an error :- \n\n\"fatal: Unknown index entry format 61740000\".\n\nI've tried to Reinitialize existing Git repository. But it did not fix the problem.\nI'm new to git, and I have just made a first branch and make some changes and trying to commit the changes.\nTried searching on Google but can't find the right solution for the code 61740000.\nEdit: Deleted the whole local repository and then again cloned from remote repository (git status worked), created a branch (git status worked) and made changes to files (git status error).\nPlease help."}, {"role": "assistant", "content": "When your index is broken you can normally delete the index file and reset it.\nrm -f .git/index\ngit reset\n\nor you clone the repo again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to upload folders on GitHub\n\nHow can I upload folders to GitHub?  I have all of my code in a folder, containing 98 files, on my desktop.  I know how to upload files, but it there a way to upload the entire folder?"}, {"role": "assistant", "content": "This is Web GUI of a GitHub repository:\n\nDrag and drop your folder to the above area. When you upload too much folder/files, GitHub will notice you:\n\nYowza, that\u2019s a lot of files. Try again with fewer than 100 files.\n\n\nand add commit message\n\nAnd press button Commit changes is the last step."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to configure Travis-CI to build pull requests & merges to master w/o redundancy\n\nTo put it in \"BDD\" terms:\n\nBackground: \n  Given I'm contributing to a GH repo\nWhen I create a pull request\n  Then Travis should build the latest commit\nWhen I push to an existing pull request\n  Then Travis should build the latest commit\nWhen I merge a pull request to master \n  Then Travis should build master\n\nI was confused by Travis-CI's \"build pushes\" and \"build PRs\" settings, as:\n\nEnabling both causes each Pull Request to be build twice by Travis\n\n\nonce for the commit on that branch\nand once again for the merge commit of that branch into its destination\n\nEnabling just \"build PRs\" causes PRs to be built, but doesn't result in post-merge builds (i.e. on master).\nEnabling \"pushes\" brute-force satisfies the above criteria by building all pushes to the repo. You can try to finagle things by white- & black-listing branches, but that will probably bite you unless you're rigorously disciplined with branch names.\n\nThis is explained more in Travis-CI docs and GH issue #3241.\nAnyone know a configuration that satisfies the above criteria?"}, {"role": "assistant", "content": "I eventually found another GH issue (#2111) which gave me the idea to try enabling both PRs & pushes, but with a whitelist to restrict pushes to a specific branch. This seems to satisfy the criteria for my workflow.  Here's what I did:\n\nEnable both PRs & branch pushes in the Travis settings for the repo:\n\n\n\nChange .travis.yml to white-list master branch (i.e. only build pushes to master):\n\n\nbranches:\n  only: \n    - master\n\n\nTest it by creating a PR with the .travis.yml change, and another PR with some empty commits to verify it works for forks too.\nVerify successful merge commit build from master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error \"Waiting for a runner to pick up this job\" using GitHub Actions\n\nWhen I use GitHub Actions with my config, there is a long waiting and it shows \"Waiting for a runner to pick up this job\".\nWhat does 'runner' mean? And how can I resolve the problem?"}, {"role": "assistant", "content": "One potential reason might be that GitHub does not support anymore the operating system you're requesting.\nFor example, the following would not work:\nruns-on: ubuntu-18.04\n\nbecause GitHub stopped supporting Ubuntu 18.04 on April 1, 2023, see:\nhttps://github.com/actions/runner-images/issues/6002\nThe solution is to use a supported operating system, for example:\nruns-on: ubuntu-latest\n\nFor a list of supported operating systems, see:\nhttps://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to git fetch efficiently from a shallow clone\n\nWe use git to distribute an operating system and keep it upto date. We can't distribute the full repository since it's too large (>2GB), so we have been using shallow clones (~300M). However recently when fetching from a shallow clone, it's now inefficiently fetches the entire >2GB repository. This is an untenable waste of bandwidth for deployments.\nThe git documentation says you cannot fetch from a shallow repository, though that's strictly not true. Are there any workarounds to make a git clone --depth 1 able to fetch just what's changed from it? Or some other strategy to keep the distribution size as small as possible whilst having all the bits git needs to do an update?\nI have unsuccessfully tried cloning from --depth 20 to see if it will upgrade more efficiently, that didn't work. I did also look into http://git-scm.com/docs/git-bundle, but that seems to create huge bundles."}, {"role": "assistant", "content": "--depth is a git fetch option.  I see the doc doesn't really highlight that git clone does a fetch. \nWhen you fetch, the two repos swap info on who has what by starting from the remote's heads and searching backward for the most recent shared commit in the fetched refs' histories, then filling in all the missing objects to complete just the new commits between the most recent shared commits and the newly fetched ones.\nA --depth=1 fetch just gets the branch tips and no prior history.  Further fetches of those histories will fetch everything new by the above procedure, but if the previously-fetched commits aren't in the newly fetched history, fetch will retrieve all of it -- unless you limit the fetch with --depth.\nYour client did a depth=1 fetch from one repo and switched urls to a different repo. At least one long ancestry path in this new repo's refs apparently shares no commits with anything currently in your repo.  That might be worth investigating, but either way unless there's some particular reason, your clients can just do every fetch --depth=1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find out which release(s) contain a given GIT commit?\n\nSomeone fixed a bug in HHVM in this commit:\nhttps://github.com/facebook/hhvm/commit/796f986aba300b3f00b9ece0bf654c452ee217be\nI want to know if this commit is already part of the official releases.\nIs there a way to list the releases/tags that contain this commit, either on GitHub, or in a local clone of the GIT repository on my machine?"}, {"role": "assistant", "content": "GitHub now shows you the tags containing a commit automatically when you open a commit (click on the ... to show all tags):"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to lock individual files or directories on fork when using git?\n\nWe are a team of 60+ developers working on the same product and are moving from SVN to Git and GitHub. We have a process in SVN where in individual files are locked and whenever a developer wants to commit code, he needs to get it unlocked by the owner of the file. Three of us are the owners of the total 150+ files. The unlocking is preceded by a code review. \nIn Github, we are planning to use the Fork-Clone model - each project a group of dev is working on will do a fork, each developer will do a clone of the fork, write the code & commit to origin, the lead of the feature will do a pull request to upstream.\nThough this seems fine, the problem is when a big project gets delivered, it brings in lots of changes for review and hence, increases the load for the file owners. Also, this might happen in the later cycles of development and hence the project might be jeopardized.\nOne method we thought might work is to have hooks when the git push is done to the origin (fork). There can be one final review git pull to upstream. \nHowever, we could not find any github extensions or push hooks for the same. Is there a quick way (read, existing extension) to do this with Github or should we use the same hooks that we would use with git?"}, {"role": "assistant", "content": "No chance, if file is not mergeable and you need to lock it, use a centralized solution instead of GIT, i.e. SVN or ClearCase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: how to checkout my own repository\n\nI am very new to GitHub.\nI have created a GitHub repository and pushed it from my computer.\nNow I need to work on it from another computer.\nHow can I checkout my own repository? Should I fork it as for other people's repositories?\nIt seems to me a bit silly to fork my own repository, though."}, {"role": "assistant", "content": "On the project page (http://github.com/you/project) there will be a link on the right at the bottom of project tools list with a path to a .git repo \n\nOpen a terminal and type:  \ngit clone [link to repo here]\n\nThat will create a local clone of the repo you can work on, then if you follow the instructions on GitHub to add a remote server you can push your changes back.\nSyncing files back and forwards is just as easy;\nComputer A (Had the original git repo)\nComputer B (Has the cloned repo)\nMake some changes on Computer A, then run\ngit push origin master\n\nGo to computer B, then run\ngit pull origin master\n\nTo sync your new changes, make some changes on computer B then push back\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding Tags to a Pull Request\n\nI have a repo iontech/Anagen forked from agiliq/Anagen\nI made a few commits to my fork and added a tag. Then I opened a Pull Request. This Pull Request includes only my commits.\nHow do I include the tag I've created into the Pull Request?"}, {"role": "assistant", "content": "How do I include the tag I've created into the Pull Request?\n\nYou can't. A pull request does not include tags. A pull request is only a pointer to a thread of commits (a branch) in your repository that you're proposing another repository to merge.\nIf you want to notify the upstream repository that a tag should be created, maybe should you add a comment to the pull request explaining this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore ignore files within a folder that has whitespace in the middle\n\nI have a folder that have a space in the middle, but have a webconfig file inside it. I want git to ignore the webconfig file but somehow it's not ignoring it because of the space in the folder. Anybody know how to work around this?\nMy FolderName/Web.config\n\nI tried to insert the %20 in the middle but that did not help.\nThank you for your help."}, {"role": "assistant", "content": "Try My\\ FolderName/Web.config or \"My FolderName/Web.config\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to stop Google indexing my Github repository\n\nI use Github to store the text of one of my web sites, but the problem is Google indexing the text in Github as well. So the same text will show up both on my site and on Github. e.g. this search The top hit is my site. The second hit is the Github repository.\nI don't mind if people see the sources but I don't want Google to index it (and maybe penalize for duplicate content.) Is there any way, besides taking the repository private, to tell Google to stop indexing it?\nWhat happens in the case of Github Pages? Those are sites where the source is in a Github repository. Do they have the same problem of duplication?\nTake this search the top most hit leads to the Marpa site but I don't see the source listed in the search result. How?"}, {"role": "assistant", "content": "Update\nThis answer is not correct any more since GitHub changed the default branch from \"master\" to \"main\" and also changed the \"robots.txt\" file.\nOriginal\nThe https://github.com/robots.txt file of GitHub allows the indexing of the blobs in the 'master' branch, but restricts all other branches. So if you don't have a 'master' branch, Google is not supposed to index your pages.\nHow to remove the 'master' branch:\nIn your clone create a new branch - let's call it 'main' and push it to GitHub\ngit checkout -b main\ngit push -u origin main\n\nOn GitHub change the default branch (see in the Settings section of your repository)\nor here https://github.com/blog/421-pick-your-default-branch\nThen remove the master branch from your clone and from GitHub:\ngit branch -d master\ngit push origin :master\n\nGet other people who might have already forked your repository to do the same.\nAlternatively, if you'd like to financially support GitHub, you can go private https://help.github.com/articles/making-a-public-repository-private"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I sync documentation with Github Pages?\n\nI have a project together with several people and we have a README.md file with a bunch of GitHub Flavored Markdown that is rendered on our GitHub page. We also set up a GitHub Pages branch which is hosted under our GitHub Organization's subdomain, and used the Automatic Page Generator simply loading in our README.md file when we created our page. However, I notice that when I update our README.md file, it does not update the project page. Instead, we must go to the GitHub settings tab and recreate the project page, reloading the README.md file when we do it. \nAlso, after reading about relative linking working between documentation files on the GitHub project directory pages. I very much like the markdown as it saves tons of time from having to write all the HTML out by hand for our documentation. What I would like however is to be able to have one README.md file which is able to include relative links to other documentation files located at docs/*.md. I was hoping there was an easy solution so that my other documentation files might also be included in my gh-pages branch and be hosted under my GitHub Pages subdomain and be rendered and/or themed.\nIn other words, my questions are:\n\nIs there a way to have my README.md file automatically update on my Github Page subdomain?\n\n\n[ EDIT ] : No appears to be the answer if using the Automatic Page Generator. You must go to the settings page for the repo and reload it every time there is a change in order to update it.\n\u00a0\n\nIs there a way I can have my relative links to my documentation on my README.md file work on my Github Pages, perhaps my somehow syncing my /docs/*.md to my Github Pages and somehow rendering and/or theming them?\n\n\n[ EDIT ] : From what I've learned since writing this question it appears that this is only possible on GitHub pages through the use of a static site generator like the ruby gem Jekyll and probably some uses of the webhooks supported by GitHub that are mentioned in the comments below. I am trying currently trying to find an optimal solution.\n\u00a0\n\nBetter yet, is there an even easier way I can do this and perhaps have just one copy of my README.md and documentation that is used on both gh-pages and my main branch and makes everything easiest?\n\n\n[ EDIT ] : It seems this one is almost definitely a no. I was thinking about the possibility of something built into GitHub to allow this. It seems that better support for this kind of thing may could be built into GitHub Pages in the future, or at least I definitely hope it will be."}, {"role": "assistant", "content": "I am going to post a solution that I setup that takes advantage of the fact that GitHub Pages uses Jekyll already using the Automatic Page Generator.\n\ngit checkout gh-pages\nmkdir _layouts\nmv index.html _layouts\ngit checkout master -- README.md\nmv README.md index.md\nPrepend the following text to index.md \n\n\u00a0\n---\nlayout: index\n---\n\nYou also need to open the index.html file and make the following changes:\n\nRemove the rendered HTML from the markdown in your README.md file. This is usually between <section> or <article> tags. Replace this HTML with the text {{ content }} this will allow us to use this file as a jekyll. The file we apply the layout to will be placed where the content tag is.\nLocate the CSS for your project page theme. for me this was a line like the following:\n\n<link rel='stylesheet' href='stylesheets/stylesheet.css' />\n\nThis needs to be changed to\n\n<link rel='stylesheet' href='{{ site.path }}/stylesheets/stylesheet.css' />\n\nAny other assets stored on your site that will be used in this layout will also need to be prefixed with {{ site.path }}.\n\nBy doing this, Jekyll will render the markdown file as the content of the index.html layout in the _layouts directory. In order to automate this process for not just the README.md file, but also other docs you may have in your master branch, I have taken the following steps:\nCreated the file called post-commit containing the following:\n\u00a0\n#!/bin/bash\n###\n### The following block runs after commit to \"master\" branch\n###\nif [ `git rev-parse --abbrev-ref HEAD` == \"master\" ]; then\n\n    # Layout prefix is prepended to each markdown file synced\n    ###################################################################\n    LAYOUT_PREFIX='---\\r\\nlayout: index\\r\\n---\\r\\n\\r\\n'\n\n    # Switch to gh-pages branch to sync it with master\n    ###################################################################\n    git checkout gh-pages\n\n    # Sync the README.md in master to index.md adding jekyll header\n    ###################################################################\n    git checkout master -- README.md\n    echo -e $LAYOUT_PREFIX > index.md\n    cat README.md >> index.md\n    rm README.md\n    git add index.md\n    git commit -a -m \"Sync README.md in master branch to index.md in gh-pages\"\n\n    # Sync the markdown files in the docs/* directory\n    ###################################################################\n    git checkout master -- docs\n    FILES=docs/*\n    for file in $FILES\n    do\n        echo -e $LAYOUT_PREFIX | cat - \"$file\" > temp && mv temp \"$file\"\n    done\n\n    git add docs\n    git commit -a -m \"Sync docs from master branch to docs gh-pages directory\"\n\n    # Uncomment the following push if you want to auto push to\n    # the gh-pages branch whenever you commit to master locally.\n    # This is a little extreme. Use with care!\n    ###################################################################\n    # git push origin gh-pages\n\n    # Finally, switch back to the master branch and exit block\n    git checkout master\nfi\n\nEDIT: I updated the above script for both the README.md file and the markdown in docs/* to both use the same layout file. This is a much better setup than what I had before. This script goes in your .git/hooks/ directory. bash must be in your path.\nCreate the file _config.yml with the following\nmarkdown: redcarpet\npath: http://username.github.io/reponame\n\nThe above script also syncs markdown files found in the docs/* directory of the master branch, in order that they may be viewed on the GitHub Pages site as well. Relative linking to these documents works if you include the following jQuery function in order to strip the .md extension from the anchors on the gh-pages branch. You can add the following script to index.html in the _layouts directory:\n$(document).on('ready', function () {\n    $('a').each(function (i, e) {\n        var href = e.href;\n        if (href.search('.md') > 0)\n            $(this).attr('href', href.split('.md')[0]);\n    });\n});\n\nEDIT: I changed the code above in my repository, this was a quick and dirty way to do this, but it won't work right in all cases if you know what I mean.. For example, the markdown file company.mdata.md would not be processed correctly. To fix this I updated this to the following script which more carefully checks out the href and removes the extension if found. I also made the script more generic, allowing it to be used to remove other extensions by changing the ext variable. Here is the code:\n$(function () {\n    $('a').each(function () {\n        var ext = '.md';\n        var href = $(this).attr('href');\n        var position = href.length - ext.length;\n        if (href.substring(position) === ext)\n            $(this).attr('href', href.substring(0, position));\n    });\n});\n\nI setup an example repo at CoryG89/docsync, which has a project page here, if you'd like to see how all this works together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create development branch from master on GitHub\n\nI created a repo on GitHub and only have a master branch so far. My local working copy is completely up to date with the remote/origin master on GitHub.\nI now want to create a development branch on GitHub so that other people on my team can start pushing changes to development (instead of directly to master) and submit PRs, request code reviews, etc.\nSo I tried creating a new development branch locally and pushing it:\ngit checkout -b development\ngit push origin development:master\n\nBut git just says Everything up-to-date. So I ask:\nIf I'm current with master, how do I just create a remote development branch that contains an exact copy of master?"}, {"role": "assistant", "content": "Creating a git develop branch\nYou can list all of your current branches like this:\ngit branch -a\n\nThis shows all of the local and remote branches. Assuming you only have a single master branch, you'd see the following:\n* master\n  remotes/origin/master\n\nThe * means the current branch.\nTo create a new branch named develop, use the following command:\ngit checkout -b develop\n\nThe -b flag creates the branch. Listing the branches now should show:\n* develop\n  master\n  remotes/origin/master\n\nChanging branches\nYou shouldn't commit anything directly to the master branch. Instead do all your work on the develop branch and then merge develop into master whenever you have a new public release.\nYou are already in your develop branch, but if you weren't, the way to switch is as follows:\ngit checkout develop\n\nThat's the same way you create a branch but without the -b.\nMaking changes on develop\nWhen making changes, add and commit as usual:\ngit add .\ngit commit -m \"whatever\"\n\nThe first time you push to your remote do it like so:\ngit push -u origin develop\n\nThe -u flag stands for --set-upstream. After the first time you only need to do it like this:\ngit push\n\nMerging develop to master\nOnce your develop is ready to merge into master you can do it like so:\nFirst switch to your local master branch:\ngit checkout master\n\nTo merge develop into master do the following:\ngit merge develop\n\nThen push the changes in local master to the remote master:\ngit push\n\nDone.\nDeleting a branch\nIf you don't need the develop branch anymore, or you just want to delete it and start over, you can do the following:\nDelete the remote develop branch:\ngit push -d origin develop\n\nThen delete the local branch:\ngit branch -d develop\n\nThe -d means delete."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't remove file from git commit\n\nHow do I discard all git commits that haven't been pushed and then force git to not commit anything in the data/ directory?\nI'm trying to force overwrite all changes to a project stored on github from my c9.io project.  I accidentally git added some mongodb data files.  I tried to add the data/ directory to .gitignore. I pulled from github to get the updated .gitignore, however when I try and git push, these stubborn files in data/ are still staged for commit.  I also tried git reset, git rebase, git clean and this where I changed dmpfile.sql to pi/data/node-login.1.\nPlease help I've been at this for hours and I'm really frustrated\nCounting objects: 15, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (13/13), 150.22 KiB | 92 KiB/s, done.\nTotal 13 (delta 6), reused 0 (delta 0)\nremote: warning: File pi/data/local.0 is 64.00 MB; this is larger than GitHub's recommended maximum file size of 50 MB\nremote: warning: File pi/data/node-login.0 is 64.00 MB; this is larger than GitHub's recommended maximum file size of 50 MB\nremote: error: GH001: Large files detected.\nremote: error: Trace: e6ade98208c08b634ed28aefea36dfbb\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: File pi/data/node-login.1 is 128.00 MB; this exceeds GitHub's file size limit of 100 MB\nTo [email\u00a0protected]:bobbyg603/goddard.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to '[email\u00a0protected]:bobbyg603/goddard.git'\n\n.gitignore:\nlib-cov\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n\ndata/\n\npids\nlogs\nresults\n\nnpm-debug.log\nnode_modules\n\n.project\n.settings\n\nThanks,\nBobby"}, {"role": "assistant", "content": "Thanks to Chris I was able to fix this by running the following:\n\ngit filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/node-login.0'\ngit filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/node-login.1'\ngit filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/local.0'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push: Missing or invalid credentials. fatal: Authentication failed for 'https://github.com/username/repo.git'\n\nI was trying to do my first push on a new MacBook and got this error after git push (everything worked well on my old MacBook):\nMissing or invalid credentials.\nError: connect ECONNREFUSED /var/folders/tx/53fffl0j51qb47mhnlf8zsdc0000gn/T/vscode-git-1d38026c7f.sock\n    at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1056:14) {\n  errno: 'ECONNREFUSED',\n  code: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '/var/folders/tx/53fffl0j51qb47mhnlf8zsdc0000gn/T/vscode-git-1d38026c7f.sock'\n}\nMissing or invalid credentials.\nError: connect ECONNREFUSED /var/folders/tx/53fffl0j51qb47mhnlf8zsdc0000gn/T/vscode-git-1d38026c7f.sock\n    at PipeConnectWrap.afterConnect [as oncomplete] (net.js:1056:14) {\n  errno: 'ECONNREFUSED',\n  code: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '/var/folders/tx/53fffl0j51qb47mhnlf8zsdc0000gn/T/vscode-git-1d38026c7f.sock'\n}\nremote: No anonymous write access.\nfatal: Authentication failed for 'https://github.com/username/repo.git/'\n\nAny idea why and how I can resolve it?"}, {"role": "assistant", "content": "You are trying to use git from a terminal in vscode.\nThe problem comes from the authentication handler of vscode.\nTo solve the problem:\n\nOpen vscode File > Preferences > Settings\nSearch for git.terminalAuthentication\nUncheck the option\n\nYou have to re-open the terminal to make it work.\nAs of March 2022, the menus have changed a bit. Here's an illustration of how to access them:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add Xcode project to github repo?\n\nI have JUST created a new github repo on the website. Keep in mind that I am a noob but can do basic things in terminal. Anyway, so I just created the repo on my account on github.com and didn't do a single thing to it yet.\nSo all I want to do is take my Xcode project folder and upload it to my new github repo. How do I do this via terminal?"}, {"role": "assistant", "content": "The best way really is to follow the instructions GitHub gives you:\nFirst, go the correct directory\ncd <directory of your Xcode project>\n\nIt sound like you've already got a local Git project from Xcode. If that's true, skip this code block.\ngit init .\ngit add .\ngit commit -s\n<type in a commit message>\n\nLast, push into your repository. The following is copied directly from my own github account, after I created a new \"test\" repo. Change the \"dhalperi/test\" part.\n\nPush an existing repository from the command line\ngit remote add origin [email\u00a0protected]:dhalperi/test.git\ngit push -u origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Mirroring from GitLab to GitHub\n\nI have been using a private GitLab instance to hold all my code. But since most of the staff that work with me now have a GitHub account, i would really like to get moving and mirror my Gitlab repo to Github.\nMy situation:\n\na server running Gitlab (Omnibus)\na Github account for which I'll create an organization for where me and my staff can be organized together.\n\nI know that there is the --mirror switch in git, but I am not really sure how this is ment to work. Documentation I found online was very wonky... So it would be nice if someone could help me out. :)"}, {"role": "assistant", "content": "GitLab has now an option to do this from the UI, go to the Settings->Repository of your repo:\nhttps://gitlab.com/yourUserNameInGitLab/yourRepoName/settings/repository\nThen find the option \"Mirror a repository\" and click on expand. What you want to do is choose the \"Push\" mirror direction and fill this URL:\nhttps://[email\u00a0protected]/yourUserNameInGitHub/yourRepoName.git\nIn the password field, you have to use a Personal Access Token (as GitHub has deprecated password access now), which you can generate here: https://github.com/settings/tokens (don't forget to enable the \"repo\" and \"workflow\" permissions when generating it)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the base branch of a pull request?\n\nI created a pull request on project on GitHub to a specific remote branch. After some time, the remote branch was deleted.\nHow can I change the pull request to point to another branch (specifically master)?"}, {"role": "assistant", "content": "Updated: as Michael notes below, this is now possible:\n\nYou can now change the base branch of an open pull request. After you\u2019ve created a pull request, you can modify the base branch so that the changes in the pull request are compared against a different branch. By changing the base branch of your original pull request rather than opening a new one with the correct base branch, you\u2019ll be able to keep valuable work and discussion.\n\nClick the Edit button by the title of the pull request to reveal the base branch selector.\n\n\nOld answer\nYou can't. Just make a new pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the best approach for redirection of old pages in Jekyll and GitHub Pages?\n\nI have blog on github pages - jekyll\nWhat is the best way to solve url strategy migration?\nI found the best practice in common is create htaccess like so\nRedirect 301 /programovani/2010/04/git-co-to-je-a-co-s-tim/ /2010/04/05/git-co-to-je-a-co-s-tim.html\n\nBut it does not seems to work with Github. Another solution i found is create rake task, which will generate redirection pages. But since it's an html, it's not able to send 301 head, so SE crawlers will not recognize it as an redirection."}, {"role": "assistant", "content": "The best solution is to use both <meta http-equiv=\"refresh\" and <link rel=\"canonical\" href=\nIt works very well, Google Bot reindexed my entire website under new links without losing positions. Also the users are redirected to the new posts right away.\n<meta http-equiv=\"refresh\" content=\"0; url=http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress/\">\n<link rel=\"canonical\" href=\"http://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress/\" />\n\nUsing <meta http-equiv=\"refresh\" will redirect each visitor to the new post.\n As for Google Bot, it treats <link rel=\"canonical\" href= as 301 redirect, the effect is that you get your pages reindexed and that is what you want.\nI described whole process how I moved my blog from Wordpress to Octopress here.\nhttp://konradpodgorski.com/blog/2013/10/21/how-i-migrated-my-blog-from-wordpress-to-octopress/#redirect-301-on-github-pages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to convert a readonly git clone from github to a forked one\n\nFrom time to time I encounter this issue.\nLet's say that I did following to read the source code of rails because I am running into some issues.\ngit clone git://github.com/rails/rails.git\n\nDuring the research I tested something and now I have a fix I would like rails core team to take a look at. How do I push my changes to a forked version of rails.\nRemember when I cloned, I did not clone a forked version but a read-only version.\nIt is not that I am opposed to forking. It is just that sometimes I think I am just going to browse then I want to add something."}, {"role": "assistant", "content": "When you clone a repo, it automatically sets up a remote called origin which refers to the repo that you have cloned. This is now pointing to the upstream Rails project, but what you need is to create your own fork that you can push to, and then set up a remote that points there so you can push to it.\nThe first step is to click the \"Fork\" button on the upstream GitHub project page (picture from GitHub instructions on forking):\n\nOnce you've done that, find and copy the URL for that repo. Make sure you use the SSH URL, which has read and write access. It should be something like [email\u00a0protected]:nadal/rails.git, assuming your user name is nadal.\nNow you can create the remote, which allows Git to keep track of a remote repository, pulling from it or pushing to it depending on the access you have. You can choose to either replace origin with the one that you will push to (which is how many people have it set up), or leave origin pointing to upstream and instead create a new remote. I'll show how to do the first setup; the second should be easy to figure out.\nTo change origin to point to your fork on GitHub, you will probably want to keep the upstream branch around somewhere, so rename it to upstream:\ngit remote rename origin upstream\n\nNow create a new remote pointing to your fork:\ngit remote add -f origin [email\u00a0protected]:nadal/rails.git\n\nAnd now you should be able to push to your new fork:\ngit push origin master\n\nOnce you are happy with the changes you've pushed up to GitHub, and would like someone from the Rails team to look at it, you have two choices. One is to send a pull request using GitHub; see the docs there for how to do that. If you only have one or a few small patches, however, the Rails team would prefer that you create a Lighthouse ticket and attach you patch; see the instructions on contributing to Rails for more information.\nedit Here's a diagram to indicate what's going on. What you have done is simply clone the upstream rails repo; so now you have your own repo on your own machine, which refers to git://github.com/rails/rails.git as origin:\n\nGithub:    git://github.com/rails/rails.git\n                    ^\n                    |\nRemotes:          origin\n                    |\nYour machine:     rails/\n\nHere's what you get if you forked and then clone your fork:\n\nGithub:    git://github.com/rails/rails.git <-- [email\u00a0protected]:nadal/rails.git\n                                                           ^\n                                                           |\nRemotes:                                                origin\n                                                           |\nYour machine:                                           rails/\n\nIf you follow my instructions, here is what you will get:\n\nGithub:    git://github.com/rails/rails.git <-- [email\u00a0protected]:nadal/rails.git\n                        ^                                  ^\n                        |                                  |\nRemotes:            upstream                            origin\n                        |                                  |\nYour machine:           \\-------------------------------rails/\n\nWhich is just like the version that you get by forking, except that it also has an upstream remote so you can track official changes and merge them in to your code (if you had created the forked version, you would probably want to add the upstream remote as well)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git tag delete and re-add\n\nOn git hub I re-added the tag by doing: \ngit tag -d 12.15\ngit push origin :refs/tags/12.15\ngit tag -a 12.15 -m '12.15'\ngit push --tags\n\nThe tag is still referring to the old tag on github, but locally it is done right.\nUPDATE: It seems github is listing the last commit wrong, but downloading it correctly."}, {"role": "assistant", "content": "The reference is https://stackoverflow.com/a/5480292/1317035\nYou just need to push an 'empty' reference to the remote tag name:\ngit push origin :tagname\n\nOr, more expressively, use the --delete option:\ngit push --delete origin tagname\n\nPushing a branch, tag, or other ref to a remote repository involves specifying \"push where, what source, what destination?\"\ngit push where-to-push source-ref:destination-ref\n\nA real world example where you push your master branch to the origin's master branch is:\ngit push origin refs/heads/master:refs/heads/master\n\nWhich because of default paths, can be shortened to:\ngit push origin master:master\n\nTags work the same way:\ngit push refs/tags/release-1.0:refs/tags/release-1.0\n\nBy omitting the source ref (the part before the colon), you push 'nothing' to the destination, deleting the ref on the remote end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Run Github Actions when pull requests have a specific label\n\nAfter reading the documentation of the Events that trigger workflows, I wonder if it's possible to run a workflow with a given label name, like RFR or WIP.  \nI know we can run a workflow when the pull request is labeled, but there is nothing more for a specifc label name :\non:\n  pull_request:\n    types: [labeled]\n\nHas anyone done this before ?"}, {"role": "assistant", "content": "You can achieve running a workflow on labeling a Pull Request using a conditional expression like \nif: ${{ github.event.label.name == 'label_name' }}\n\nSo if you have your GitHub action config as below\nname: CI\n\non:\n  pull_request:\n    types: [ labeled ]\n\njobs:\n  build:\n    if: ${{ github.event.label.name == 'bug' }}\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run a one-line script\n      run: echo Hello, world!\n\nIt would trigger the workflow whenever a PR is labeled and run the job only if the label is bug and would skip if the label is anything else. You can also use github.event.action == 'labeled' as an extra check but that is not required if you have only types: [ labeled ] for the pull_request as shown in the config above.\nNote: Just for your information, the github event has the following info (removed the irrelevant data for brevity) regarding the label in case of labelling a PR\n\"event\": {\n    \"action\": \"labeled\",\n    \"label\": {\n      \"color\": \"d73a4a\",\n      \"default\": true,\n      \"description\": \"Something isn't working\",\n      \"id\": 1519136641,\n      \"name\": \"bug\",\n      \"node_id\": \"abcd\",\n      \"url\": \"https://api.github.com/repos/owner/repo/labels/bug\"\n    }\n}\n\nGitHub actions documentation regarding conditional expressions is here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Installing packages from github npm registry - auth error 401\n\nI have just published a private package on GitHub, trying to figure out how it should be working. now I'm trying to install it in another project. I authenticated with npm login --registry=https://npm.pkg.github.com with an access token that has write:packages, read:packages and repo privileges. While trying to run npm install https://npm.pkg.github.com/@orgname/package-name I get an error message:\nnpm ERR! code E401\nnpm ERR! Unable to authenticate, need: Basic realm=\"GitHub Package Registry\"\n\nHow can I add/get this privilege?"}, {"role": "assistant", "content": "You need to generate a personal access token on Github and add it to your npm config in addition to setting the registry in the npm config:\n\nIn Github navigate to https://github.com/settings/tokens (Settings > Developer settings > Personal access tokens) and you should see something like this:\n\n\n\nClick Generate new token\nFrom the permissions select at least read:packages\n\n\n\nClick Generate token and copy the token\n\nAdd the following to your local .npmrc:\n@${OWNER}:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=${TOKEN}\n\n\n\nSee the relevant Github Packages documentation\n\nRelated: For Github Actions, be aware of the difference between the GITHUB_TOKEN and a personal access token. The Github Token's permissions are limited to the repository that contains your workflow. For anything else (including granular permissions beyond those allowed for the Github Token) you need a personal access token."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - The revocation function was unable to check revocation for the certificate\n\nI'm trying to clone from Github by using both Github Desktop and the git shell but keep on getting this error:\nCloning into 'C:\\Users\\John Doe\\workspace\\MyProject'...\nfatal: unable to access 'https://github.com/JohnDoe/MyProject.git/': \nschannel: next InitializeSecurityContext failed: Unknown error (0x80092012) - \nThe revocation function was unable to check revocation for the certificate.\n\nSame problem when pulling an existing repository.\nI've already tried to upload SSH keys found in ~/.ssh/github-ssh.pub to Github settings but it doesn't help anything.\nEDIT: Just checked, it will happen even if I try to clone a non-existent repository."}, {"role": "assistant", "content": "This error is also commonly hit when you're on a corporate network that performs MITM on all traffic, and then blocks the revocation check.\nWhile, obviously, the ideal situation is to not block the checks (or at least, to a whitelist of urls), it may be required to work around this problem.\nOne option is, as in the first part of Mike's answer, using the OpenSSL bindings instead.  While this works, it requires manual maintenance of the certificate lists, which may not be practical in extreme situations (say, new root certs issued every day, although this is unlikely).\nThe other option, akin to the second part of Mike's answer, is disabling revocation checking.\nRecent versions, 2.19 and above, of git-for-windows provides an http.schannelCheckRevoke setting:  \n\nUsed to enforce or disable certificate revocation checks in cURL\n      when http.sslBackend is set to \"schannel\". Defaults to true if\n      unset. Only necessary to disable this if Git consistently errors\n      and the message is about checking the revocation status of a\n      certificate. This option is ignored if cURL lacks support for\n      setting the relevant SSL option at runtime.\n\n... so you can simply disable checking for revocation in the first place:\ngit config --global http.schannelCheckRevoke false\nNote that, unlike disabling SSL entirely, this is not inherently less secure than using Mike's answer for specific repositories: if you capture and configure an empty revocation list (the usual case), you have effectively disabled revocation checking.  Disabling revocation checking only becomes a risk in the case of private-key compromise (at some point in the chain), which is rare and difficult.  \nNote, also, that in a corporate MITM setting, revocation checking is being performed for you: no proxy worth using would issue a cert for an invalid or (known) compromised certificate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Warning: Permanently added the RSA host key for IP address\n\nWhen I do pull from Github, I am getting this warning message.    \n    MYPC:/Rails$ git pull origin master\n    Warning: Permanently added the RSA host key for IP address '#{Some IP address}' to the list of known hosts.\n    From github.com:Example/Demo\n     * branch            master     -> FETCH_HEAD\n    Already up-to-date.\n\nI just want to know which IP address it is adding to the known hosts."}, {"role": "assistant", "content": "If you are accessing your repositories over the SSH protocol, you will receive a warning message each time your client connects to a new IP address for github.com. As long as the IP address from the warning is in the range of IP addresses , you shouldn't be concerned. Specifically, the new addresses that are being added this time are in the range from 192.30.252.0 to 192.30.255.255. The warning message looks like this:\nWarning: Permanently added the RSA host key for IP address '$IP' to the list of \n\n\nhttps://github.com/blog/1606-ip-address-changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I make releases public from a private github repo?\n\nI have an application which is in a private github repo, and am wondering if the releases could be made public so that the app can auto-update itself from github instead of us having to host it.\nAdditionally I'm wondering if it's possible to use the github api from the deployed app to check for new updates."}, {"role": "assistant", "content": "A workaround would be to create a public repo, composed of:\n\nempty commits (git commit --allow-empty)\neach commit tagged\neach tag with a release\neach release with the deliveries (the binaries of your private app)\n\nThat way, you have a visible repo dedicated for release hosting, and a private repos for source development."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub API: Repositories Contributed To\n\nIs there a way to get access to the data in the \u201cRepositories contributed to\u201d module on GitHub profile pages via the GitHub API? Ideally the entire list, not just the top five, which are all you can get on the web apparently."}, {"role": "assistant", "content": "With GraphQL API v4, you can now get these contributed repo using :\n{\n  viewer {\n    repositoriesContributedTo(first: 100, contributionTypes: [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]) {\n      totalCount\n      nodes {\n        nameWithOwner\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n\nTry it in the explorer\nIf you have more than 100 contributed repo (including yours), you will have to go through pagination specifying after: \"END_CURSOR_VALUE\" in repositoriesContributedTo for the next request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: How do I add my own projects to an \"organization\" account?\n\nI have started collaborating on a series of projects with several developers on github, and we recently created an organization with it's own \"organization\" type account on github.  I see that I can fork repositories of my collaborators into the organization account using the usual fork menu, but of course I cannot fork my own account.  \nWhat is the expected workflow to import my existing repositories into the organizational account?  (I presume I could fork projects hosted by the other members, but not my own?)"}, {"role": "assistant", "content": "Navigate to the Settings tab of your repository:\n\n\n\nScroll down to the Danger Zone and click Transfer:\n\n\n\nAfter reading the warnings, provide the name of the repository that you want to transfer and the specific organisation that the repository is going to be transferred to and click I understand, transfer this repository:\n\n\n\nDone! You 'll then be notified that you action will take effect in a few minutes:\n\n\nFor more details, you can always refer to the official documentation.\nWarning: once this is done, make sure you also update any local repository references using the following command  git remote set-url origin <new-origin>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix \"Filename too long error\" during git clone\n\nI am trying to take a git clone from a particular branch of my bitbucket repository using the below command:\ngit clone <url> --branch <branchname>.\nHowever, I am getting the below error while taking the clone:\n\nerror:unable to create file foldername/nodemodules/......: Filename\n  too long.\n\nI tried resolving this by running the below command in my git cmd\ngit config --system core.longpaths true.\nBut I am getting:\n\nerror: could not lock config file c://.gitconfig: Permission denied\n  error: could not lock config file c://.gitconfig: Invalid argument.\n\nHow do I solve these two errors?"}, {"role": "assistant", "content": "Start Git Bash as Administrator\nRun command git config --system core.longpaths true\n\nAnother way (only for this clone):\ngit clone -c core.longpaths=true <repo-url>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automated heroku deploy from subfolder\n\nI know you can deploy automatically to heroku from github, but I haven't found a way to only push a subfolder from github to heroku.\nFrom the command-line I know it is possible to do this with:\ngit subtree push --prefix <subfolder> heroku master\n\nHowever, I would like to know if there is a way to use the github integration with heroku to make it pull a specific subfolder automatically when a commit is added to a branch."}, {"role": "assistant", "content": "2018 Update!  To enable automated deployments with heroku, you need to have admin access for the github repo you want to deploy. \nIn the Heroku dashboard:\nStep 1) - Connect github repository to Heroku\nInside the Deploy tab, scroll to Deployment method and connect your Github account. find the repo and hit connect. heroku should be authorized as an Oauth app in your github now. \nIf you cannot find the repo: Either your github has not authorized Heroku or you did not create this repo and need to make sure you have admin access to it. If this is not possible, invite an admin of the repo to your heroku app by going to Access tab in Heroku Dashboard and adding the admin as a collaborator. The admin then logs into heroku and completes Step 1 here. Afterwards you can finish the following steps.\nStep 2) - Set Heroku Config Var PROJECT_PATH to your server folder\nInside the Settings tab, set a config var to tell Heroku the path to find the server code you want deployed.\nExample: lets say your repo name is MyRepo and it has 2 sub-folders. back-end contains a Node.js server and front-end contains a React app. Your github directory looks like this:  \nMyRepo/front-end/package.json\nMyRepo/back-end/package.json\nThen you should set your config var to PROJECT_PATH in the left box and back-end in the right box. \nStep 3) - Set a Heroku Buildpack that will deploy the PROJECT_PATH folder\nAgain inside the Settings tab, you need to add a Buildpack that will tell heroku to look for your folder instead of deploying the repo root. There should already be 1 buildpack there to tell heroku what type of server it is (javascript/node.js, python/django, etc...). \nEnter this url to add buildpack https://github.com/timanovsky/subdir-heroku-buildpack.git   and make sure this is at the top of the buildpack chain (drag the lines on the left to make it above any other buildpacks you have added.\nStep 4) - Enable auto deploy\nInside the Deploy tab, scroll to Automatic Deploys and click the black button to enable automatic deploys\nAuto Deploy complete! Now check the build logs and make sure you don't have any errors"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download a folder from github?\n\nI wished to download the mysite folder from this link:\nhttps://github.com/username/repository/master/"}, {"role": "assistant", "content": "You can download a file/folder from github\nSimply use: svn export <repo>/trunk/<folder>\nEx: svn export https://github.com/lodash/lodash/trunk/docs\nNote: You may first list the contents of the folder in terminal using svn ls <repo>/trunk/folder\n(yes, that's svn here. apparently in 2016 you still need svn to simply download some github files)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I delete all git branches which have been \"Squash and Merge\" via GitHub?\n\nEver since GitHub introduced Squash and Merge, all the cool kids at my workplace are using it when merging pull requests. Is there a way to cleanup \"Squash and Merge\" branches? \nThe following command from How can I delete all git branches which have been merged? does not work for \"Squash and Merge\":\ngit branch --merged | egrep -v \"(^\\*|master|dev)\" | xargs git branch -d"}, {"role": "assistant", "content": "Here's a script that will delete all local branches that have been squash merged into master:\ngit checkout -q master && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done\n\nIf you want to run a dry run, you can instead run this:\ngit checkout -q master && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] && echo \"$branch is merged into master and can be deleted\"; done\n\nYou can then setup an alias like this:\nalias gprunesquashmerged='git checkout -q master && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done'\n\nSource:\nhttps://github.com/not-an-aardvark/git-delete-squashed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "This repository is configured for Git LFS but 'git-lfs' was not found on your path\n\nPlease help me understand what the below error message means and how to comply with its request.\nI want to copy an existing local git repo; then push that copy to a newly created remote.\nBut I get the following error:\n\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\n\nThe code I used immediately prior to getting this message is:\n# create new git repo at https://github.com/username/foo-bar.git\ncp -r OldProject/ NewProject/\ncd NewProject/\ngit remote remove origin # Remove prior origin from copy operation\ngit init\ngit remote add origin https://github.com/username/foo-bar.git\ngit add -A\ngit commit -m \"first commit\"\ngit push -u origin master\n\nWhat am I doing wrong and how can I fix it? Please help me understand what the above error message means and how to comply with its request."}, {"role": "assistant", "content": "This repository is configured for Git LFS but 'git-lfs' was not found on your path\n\nLFS is \"Large File Storage\" an extension for git that keeps large files outside of the actual repository so it doesn't become slow. When the error says \"not found on your path\" it means git was looking for a program that you don't have installed. You can install it using the instructions on https://git-lfs.github.com/.\nA hook, by the way, is a bit of code git runs when you do some action. They are stored in the repository, in the hidden directory .git/hooks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete a file tracked by git-lfs and release the storage quota?\n\nHow to delete a never-use-again file and release the storage back to the github lfs quota?\nDoes deleting the reference point of the file in git history work in this situation?"}, {"role": "assistant", "content": "There doesn't currently appear to be a great way of removing large assets from git-lfs. GitHub's current suggestion is to use a tool called The BFG to completely strip all existence of the file from your repo.\nPresumably it'll then be removed from the lfs storage when git's garbage collection is next run by GitHub.\nFor more info see https://help.github.com/en/github/managing-large-files/removing-files-from-git-large-file-storage\nEdit 2019-11-20\nGitHub has updated their documentation on this explicitly stating there is no way to free up your git-lfs storage without deleting your repository. https://help.github.com/en/github/managing-large-files/removing-files-from-git-large-file-storage\nTheir only recommendation is to still use the BFG tool to strip the file from your repository, which will reduce the size of your repository when cloning, but will still count towards your git-lfs quota until you delete the repository.\nGitLab again suggests using the BFG tool and will automatically clean the lfs storage of any files which aren't referenced in any commits, although currently this doesn't seem to be working correctly. This issue has been open since 2017 with no resolution.\nBitBucket has a section in the repository settings which you can clean up lfs files. https://www.atlassian.com/git/tutorials/git-lfs#deleting-remote-files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to 'fork a fork' in Github?\n\nI am currently working on a project that is a spinoff (fork) from a framework I have been working on.\nThis project is intended to be pretty generic, but now I need to fork the codebase again for a client of mine.\nAt this moment, I have created a custom branch for my client, but I'd rather have a standalone repository for this.\n\nIs is possible to 'fork a fork'?\nIf not, what alternatives do I have?\n\nOutline of the situation:\n\nFramework repository (original)\n\n\nGeneric application repository (fork)\n\n\n(not yet) Client repository (fork of application)\n\n\n\nNote: when trying to  'fork a fork' in Github, you will receive a notification that you have already forked the project:"}, {"role": "assistant", "content": "This is now very possible. You just go to the fork you want to fork\n  and click \"fork\" like you would always do. This only works if you\n  don't have a different fork of that repository in your account\n  already, though. If you do, you have to delete it.\n\nAnswered in a comment by iFreilicht\nSince this is the correct answer now, it is better to highlight it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View the change history of a file using github.com\n\nI've found this post about using the command line, but is it possible to view the file change history of a single file in a repository on github.com?\nAn in-browser solution would help me to better illustrate changes to team members while in meetings."}, {"role": "assistant", "content": "You can view the change history of a file by clicking on the history button, or by adding commits to the URL of the file. Here is what it looks like for a file at the Homebrew repository on GitHub:\nhttps://github.com/mxcl/homebrew/commits/master/SUPPORTERS.md\nTo get a line-by-line history, simply add the SHA-1 string of the commit for which you want to see the diff to the URL after the word commit, and then anchor it with the filename you are interested in. For the same file above:\nhttps://github.com/mxcl/homebrew/commit/288f001e924d5365b79c279e4478f372a04011ae#SUPPORTERS.md\nTo see all commits for a single branch use a URL like this\nhttps://github.com/mxcl/homebrew/commits/master\nTo see all commits for all branches use a URL like this\nhttps://github.com/mxcl/homebrew/commits\nThere is no button or link in the web UI for these URLs, but you can bookmark them easily."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: How to do case sensitive search for the code in repository?\n\nI want to do a case sensitive search for a particular piece of code in a GitHub repository. Is it possible?\nI checked https://help.github.com/articles/searching-code/ and didn't find such a syntax rule."}, {"role": "assistant", "content": "Say you want results for my_var but not MY_VAR, My_Var, etc.  Use this regex search:\n/(?-i)my_var/\n\nThe -i flag here is essentially the opposite of the same grep option (grep is case-sensitive by default and -i makes it case-insensitive).\nThis was a new option included in the 2023 rollout of GitHub's Code Search feature.  See the announcement blog post and the official syntax documentation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create an R package that depends on another R package located on GitHub\n\nI am creating an R package on GitHub, LW1949, that depends on another R package on GitHub, jvamisc.  When I try to install LW1949 using\nrequire(devtools)\ndevtools::install_github(\"user/LW1949\")\n\nI get the message: Skipping 1 packages not available: jvamisc.\nHow can I point the import(jvamisc) part of the LW1949 package (in NAMESPACE) to Github instead of CRAN to find this dependency?\nSurely this question has been asked and answered before, but I was not successful searching for it (perhaps because the search terms are so common - R, package, GitHub, etc.).  I did stumble across Travis CI and Packrat, neither of which I've used.  No idea if they would help.  I would prefer as simple a fix as possible.  (Wouldn't we all?)\nI'm using R version 3.1.3 for Windows in R Studio Version 0.98.1103."}, {"role": "assistant", "content": "This question seems to have been answered quite recently, addressed in this issue of the devtools' github repository.\n\nPackage developer POV:\n\ndo:\nusethis::use_package(\"jvamisc\")\ndevtools::document()\n\n\n\nto add the dependency in the Imports field of your DESCRIPTION file.\n\nmanually add a field \"Remotes:\" in the DESCRIPTION file, specifying where on github R should look for the package:\n#in DESCRIPTION\nImports: ...,\n  jvamisc,\n  ...\nRemotes: JVAdams/jvamisc\n\n\n\n\nEnd-user POV:\n\nthe end user has to have the latest development version of devtools (or at least the one corresponding to commit #f21ca3516c). You have to somehow 'force him' to update his devtools version (I guess just put this in the installation instructions... Can't think of a better way)\ndevtools::install_github(\u201chadley/devtools\u201d, ref = \u201cf21ca3516c\u201d)\n\n\nRestart the R Session on unload/reload the devtools package.\n\ndo the usual install_github:\nrequire(devtools)\ndevtools::install_github(\"user/LW1949\")\n\n\n\nI guess this functionality will be added sooner or later to the CRAN version of devtools, so there will be no need for the user to fetch the dev version and he would go directly to step 3).\n\nThe steps and additional options are detailed in this vignette."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to know who is the maintainer of a GitHub repository?\n\nIs there a way to know which people have merge privileges on a public GitHub repository. If the owner is a user and not an organization, then  at least I know one maintainer, but it's possible that there are other users with merge rights. Also, if the owner is an organization it is possible, that not all members of the organization have merge rights. So is there a way to find the exact maintainers?"}, {"role": "assistant", "content": "Team privileges are not public in general. Even an organization-membership is not public since the publicity must be chosen by the given member, as the Documentation states:\n\nBy default, your organization membership visibility is set to private. You can choose to publicize individual organization memberships on your profile.\n\nThis partly applies for their implementation of CODEOWNERS, too. If it is up to date the given source file is annotated with a link to its responsible GitHub user.\n\nHowever there's normally no need to know the individual maintainers of a repository (since every interaction with repos you're able to access is covered by the GitHub UI, which also assures that somebody takes care about your request). If your attention is about a public repository you might search the commits for accepted pull-request. But in that case you would preferably fork the repo and just generate pull-requests on your own.\nYou are even not able to contact an organization via GitHub - try to find their official website, contact them and ask for their maintainers if you need that information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "[email\u00a0protected]: Permission denied (publickey)\n\nI created a new remote repository and tried to use git push -u origin master command to push my local files into the new repository the first time after I add it and commit it. However, it pops up this [email\u00a0protected]: Permission denied (publickey). fatal: Could not read from remote repository.. How can I fix this fatal error?\nI've tried this\nHow to solve Permission denied (publickey) error when using Git?\nIt seems that the question in this link happens in the first time using git. I've used my git for a while, do I still need to follow this solution? Can anyone gives me a more specific solution? \nThis the fatal error that I got\nC:\\Users\\ASUS\\Desktop\\React-Practice App\\my-app>git status\nOn branch master\nnothing to commit, working tree clean\n\nC:\\Users\\ASUS\\Desktop\\React-Practice App\\my-app>git push -u origin master\n[email\u00a0protected]: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists."}, {"role": "assistant", "content": "You\u2019re accessing GitHub through SSH. First generate an SSH key pair; then add the public key to GitHub.\nGenerate key pair, github prefers the \"Ed25519 algorithm\"\nssh-keygen -t ed25519 -C \"[email\u00a0protected]\"\n\nIt still allows using rsa for systems that don't support Ed25519\nssh-keygen -t rsa -b 4096 -C \u201c[email\u00a0protected]\u201d\n\nSee more at https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent and https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Api download zip or tarball link\n\nThere was a good link here about how the zip/tarball string is created\nWhen I download a zip from github, what is the hex string at the end of the file name represent?\nBut I'm looking at the GitHub APIv3 and I was curious if I'm missing something.\n\nIs there a way to get the zip/tarball link via an API call?\nIf not, is there a way I can build that string without using the git binary or library? Meaning, can I use various API calls to pull out th data a need and assemble to URL I need?\n\nI know the second question is a little unreasonable for stackoverflow and this is a bit of a fun project for me, so I would prefer on the second question if you just kind of nudged me in the right direction as opposed to throwing down a code snippet. Or just told me if it was possible."}, {"role": "assistant", "content": "You can wget your way out of the GitHub repo to get a tar file (archive):\nwget --no-check-certificate https://github.com/User/repo/archive/master.tar.gz\n\n# better, if the certificate authorities are present:\nwget https://github.com/User/repo/archive/master.tar.gz\n\nwill get you a file named 'master' from the user 'User''s repo 'repo'.\nThe updated V3 API url is:\nhttps://api.github.com/repos/User/repo/:archive_format/:ref\n#\n# two possibilities for fomat:\nhttps://api.github.com/repos/User/repo/tarball/master\nhttps://api.github.com/repos/User/repo/zipball/master\n\n# from github example:\n$curl -L https://api.github.com/repos/octokit/octokit.rb/tarball > octokit.tar.gz\n\nYou can then tar xpvf master, getting the full archive. It will create a directory following the naming convention described in the question you mentioned.\nNo Git binary is needed to get an archive from GitHub, thanks to their download service \"Nodeload\".\n\nligemer proposed in an edit the following example:\nEdit 2016-08-25 - Shell Example With Wget, Variables, and Untar:\n#!/bin/bash -ex\n\n# arguments:\n# token = $1\n# organization = $2\n# repo name = $3\n# branch = $4\n\nwget --header=\"Authorization: token ${1}\" --header=\"Accept:application/vnd.github.v3.raw\" -O - https://api.github.com/repos/${2}/${3}/tarball/${4} | tar xz\n\nCall via:\n$ scriptName.sh token my-organization site.example master\n\nThe command above will download and extract the GitHub folder to the same directory as the script.\n\nDiogo Quintela suggests in the comments:\n\nThe following example allow the download, extract and cut the top level directory\n\ncurl -L https://api.github.com/repos/octokit/octokit.rb/tarball | tar xz --strip=1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the fork that a repository is linked to\n\nI have a repo called at MAIN/repo.git and I've forked it to FORK/repo.git.  I have both of these repos cloned onto my computer for different purposes.  \nUsing Github for Windows, a bug seems to have switched FORK/repo.git over to MAIN/repo.git, as when I do git remote show origin, the Fetch URL and Push URL are set to the main repo.  How can I switch this back so the corresponding folder on my local machine points to FORK/repo.git, instead of MAIN/repo.git?"}, {"role": "assistant", "content": "2023: gh repo fork allows since gh v2.37.0 to set default repo when forking repo.\nNow, If the repository is a fork, its parent repository will be set as the default remote repository. See issue 6827 and PR 7768, plus gh repo set-default.\n\n2012: The easiest way would be using command-line git remote, from within your local clone of FORK:\ngit remote rm origin\ngit remote add origin https://github.com/user/FORK.git\n\nOr, in one command, as illustrated in this GitHub article:\ngit remote set-url origin https://github.com/user/FORK.git\n\n\nA better practice is to:\n\nkeep a remote referencing the original repo\nmake your work in new branches (which will have upstream branches tracking your fork)\n\nSo:\ngit remote rename origin upstream\ngit branch -avv # existing branches like master are linked to upstream/xxx\n\ngit remote add origin https://github.com/user/FORK.git\ngit checkout -b newFeatureBranch\n\nWhenever you need to update your fork based on the recent evolution of the original repo:\ngit checkout master\ngit pull # it pulls from upstream!\ngit checkout newFeatureBranch\ngit rebase master # safe if you are alone working on that branch\ngit push --force # ditto. It pushes to origin, which is your fork."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can forks be synced automatically in GitHub?\n\nStash enables automatic fork syncing if selected:\nhttps://confluence.atlassian.com/display/STASH/Keeping+forks+synchronized\nIt will update any branches in your fork that you haven't modified.\nI've been unable to find similar automatic functionality in GitHub; all google searches are turning up manual ways to sync forks via your local cache."}, {"role": "assistant", "content": "For the record, recently I ran into this same problem and addressed it with Github Actions. The solution is rather easy: an scheduled action fetches the upstream repository and merges it into mine.\n# .github/workflows/example.yml\n\nname: Merge upstream branches\non:\n  schedule:\n     # actually, ~5 minutes is the highest\n     # effective frequency you will get\n    - cron:  '* * * * *'\njobs:\n  merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Merge upstream\n        run: |\n          git config --global user.name 'your-name'\n          git config --global user.email '[email\u00a0protected]'\n\n          # \"git checkout master\" is unnecessary, already here by default\n          git pull --unshallow  # this option is very important, you would get\n                                # complains about unrelated histories without it.\n                                # (but actions/checkout@v2 can also be instructed\n                                # to fetch all git depth right from the start)\n\n          git remote add upstream https://github.com/example/test.git\n          git fetch upstream\n\n          # Neither forget the -b opt,\n          # the feature/x ref is ambiguous at this stage\n          git checkout -b feature/x origin/feature/x\n          git merge --no-edit upstream/feature/x\n          git push origin feature/x\n\n          git checkout master\n          git merge --no-edit upstream/master\n          git push origin master\n\n          # etc\n\n\nI run it every Sunday which is more than enough for me. Just schedule this to whatever is fine for you.\nAlso, it is probably wiser to sync every branch in a different job since they will run in parallel and can independently succeed or fail if conflicts occur.\nIf you need to merge an arbitrary number of branches, you can refer to questions like How to fetch all Git branches to find shell tricks to do it.\nI noticed a public action exists to address this by rebasing. It looked promising but it was fairly undocumented so here is my snippet instead. Hope it helps!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push takes forever\n\nWhen I am trying to push to my remote git repository, but it is taking forever and nothing happens. I waited for so long, but push is never getting finished. My OS is Ubuntu 12.10. Thank you."}, {"role": "assistant", "content": "Try using the --verbose option to see what actually happens. Even if you did small changes, some internal things might cause git to push a lot more data. \nHave a look at git gc. It cleans up your local repository and might speed up things, depending on you issue. Backup strongly advised."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Graphics in GitHub commit messages\n\nHow to add graphics/image in git commit messages (pushed to Github)?"}, {"role": "assistant", "content": "Here is a list of codes to put in your commit message to get those icons:\nEmoji cheat sheet\nFor instance, to get this commit message:\n\nenter Release 2.0.1 :gem::star2:.\nIf you see an icon on GitHub you want to use, hover your mouse over it, and the tooltip will tell you that icon\u2019s code. Or copy and paste a commit message to convert icons to their codes.\nThat cheat sheet website is open-source \u2013 here is its code.\nCaveats: you can\u2019t put an arbitrary image into a commit message \u2013 these codes work on GitHub only because GitHub implemented the emoji on that list. And of course, it is up to the Git interface you are using to display emoji or link URLs \u2013 Git\u2019s command-line interface will probably not do either of those."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I code against one github repo on 2 computers?\n\nI have two computers from which I want to contribute to one github repo. How can I accomplish this?"}, {"role": "assistant", "content": "To keep both repositories in sync you should to pull the latest changes to your machine whenever you start working on the code.  \nTo do this you want to execute\ngit pull\n\n...which is usually set up to pull from the default remote (origin) to your current branch. Git might complain if this isn't the case, and so the longer version will work as well:\ngit pull origin {branch_name}\n\nNote: this is the same process that you would use if two or more people were working on the same repo. Which is essentially what is happening, instead of two different people working on the same repository, you have two different machines working on the same repository.\nIf you are starting out fresh on a new machine all you need to do is clone the repo to it first:\ngit clone {remote_url}\n\nYou get this url from your GitHub repo's home page. This command will make a complete working copy of the repo in a subdirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Bitbucket activity graph\n\nI would like to know if there is a solution in Bitbucket similar to Github's graphs. For example, here are the ones for Node.js:\nContributions graph\n\nCommits graph\n\nI've done some research and I haven't found anything similar. Does anybody know if this kind of visualisation exists in a hidden place in Bitbucket? Or is there some 3rd party service which provides these kinds of graphs of a git repository?"}, {"role": "assistant", "content": "Take a look at Awesome Graphs for Bitbucket add-on\nFrom http://blog.bitbucket.org/2015/06/10/atlassian-connect-for-bitbucket-a-new-way-to-extend-your-workflow-in-the-cloud\n\nIf you are currently a user of Bitbucket and want to take a sneak peak, click on your avatar, select \u201cManage Account\u201d, and simply install these new add-ons by selecting \u201cFind new add-ons\u201d from the left menu.\n\nHere is the add-on's release notes page: https://docs.stiltsoft.com/awesome-graphs/cloud/release-notes-cloud"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Error : 'upstream' does not appear to be a git repository\n\nI'm very new to Git, so facing some issues with it correct usage.\nHere is my scenario.\nI have a fork of my master repository and cloned it into my local.\nIn that, I have 2 branches for different fixes.\nWhen I commit, I saw a statement in the git-we saying that I'm 3 commits ahead and around 20 commits behind.\nI understand that my fork is not in sync with master. Also I need to merge the two branches too (or should i do it?)\nI used the windows client to syncing. But seems I'm not following the Git way. So, I tried to follow the steps described in https://help.github.com/articles/syncing-a-fork/ which is giving me an error as follows  (I'm using windows).\n $>git fetch upstream\n fatal: 'upstream' does not appear to be a git repository\n fatal: Could not read from remote repository.\n\n Please make sure you have the correct access rights\n and the repository exists.\n\nI'm a bit confused.\nPlease help me with steps I should follow in this scenario.\n@HuStmpHrrr\nSorry for adding the details in comments\nI'll modify the question for readability\nBy executing the command:\n  $>git remote  returning two values\n  acme-development (which the name of my actual/main repository, from where I forked) and\n  origin\n\n\nAdding some more info.\n\nAfter making a fetch, I tried a origin/master merge on to my master\nPlease see the screenshot\n\nBut, if I login to my Github online account, it is saying a different story.\n\nMy git client says that the local repo is up to date.\nBut the online git says that we are 42 commits behind and 7 commits ahead."}, {"role": "assistant", "content": "The article you link to (though it may have changed since you asked) starts with a reference to https://help.github.com/articles/configuring-a-remote-for-a-fork/. If you complete this you will have a new remote repository named upstream pointing to the original repository which you forked, and git fetch upstream will work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git get short hash from regular hash\n\nI have a regular long SHA-1 hash string. I would like to get the shortest unambiguous SHA-1 hash string version of it. That is, the one I would get by using git log -1 --pretty=format:%h, assuming the long hash refers to the last commit."}, {"role": "assistant", "content": "The shortest SHA1 you can get has a length of 4. Rev parse will give you a SHA1 of 7 digits by default with the short option :\ngit rev-parse --short 921103db8259eb9de72f42db8b939895f5651489\n921103d\n\nYou have to specify 4 to the short option to have the shortest unambiguous SHA1 :\ngit rev-parse --short=4 921103db8259eb9de72f42db8b939895f5651489\n92110\n\nYou can also set it in the core.abbrev configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove a file from a Git Pull Request\n\nI have added a local changes to an existing file into my PR by mistake.\nI want to revert only this file without deleting this file locally.\nI just want that it doesn't show up in the Pull Request.\nI don't want to create new branch as many people have commented on other files in this PR."}, {"role": "assistant", "content": "If you updated a file that already existed and want to remove it from the PR:\nAssume you're working on a branch off of staging, and you PR'd a file named validate_model.py.\nTo remove this file from the PR and revert its changes, simply do:\ngit checkout staging -- validate_model.py"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get another branch instead of default branch with go get\n\nI have 2 repositories. Let say them repo_a and repo_b. I imported repo_a in repo_b\nWhen I ran go get, it will get repo_a master branch.\nIs there any way to get develop branch using go get or another command from repo_b?\nI do not want to git pull on each specific package (in this case repo_a)"}, {"role": "assistant", "content": "Starting with Go 1.11, this is possible when using Go modules. When installing a dependency for a Go module, you can specify a module query which may contain a branch or tag name:\n$ go get <path-to-repo>@<branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unicode / emojis in Github markdown\n\nI just made a failed attempt to put unicode in Github markdown (in a README.md file) in my project.\nI tried this:\n(U+262E)\n\nbut it was not interpreted as unicode. Is there a way to put unicode characters in Github markdown?"}, {"role": "assistant", "content": "I believe the correct answer is to use unicode characters of the following (decimal) form \n&#9658;\n&#767;\n&#2400;\n\nthe above become:\n\u25ba\n\u02ff\n\u0960\nTry it for yourself on Github and see. You have to paste the raw character strings, not the unicode symbol itself. It's not about what shows up in your editor, it's what actually displays on github.com."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SourceTree error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version\n\nI'm using SourceTree and try to clone from a general github repository, but I got this error:\n\nfatal: unable to access 'https://github.com/mfitzp/15-minute-apps.git/': error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version\n  Completed with errors, see above.\n\nHow to solve it?"}, {"role": "assistant", "content": "Check Tools > Options > Git in SourceTree, if you're using Use Embedded Git, you can see the git version is 1.9.5 which is  old, latest version of git is 2.16.2.\nSo click Use System Git, if you install the newer version of git, after Use system Git it'll show newer version, then try to clone again it should work fine.\nAlso see another answer HERE."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing a large github repo fails with \"unable to push to unqualified destination: master\"\n\nI have a large git repo (created from an SVN repo) and I want to push it to github. Given it's large, I can't just try and push it directly, as it fails with a \"pack too large\" error.\nAll good so far, I can push the repo one commit at a time. But when I try to do this what happens is: \ngit push origin 86c310d8a680d6d0e052fa7db89adb25348f3e54:master\nerror: unable to push to unqualified destination: master\nThe destination refspec neither matches an existing ref on the remote nor\nbegins with refs/, and we are unable to guess a prefix based on the source ref.\n\nSo, there is no master branch at the remote repo yet, but I'm trying to push to it and it fails.\nHow do I fix this? Or how do I create an empty master branch at the remote so I can push to it?"}, {"role": "assistant", "content": "Push to refs/heads/master, just this one time. \ngit push origin whatever:refs/heads/master\nThat will create it unambiguously as a branch, and you'll be able to push to it normally in the future.\nThis works because there's no remote ref named master (it hasn't been created yet), the target ref isn't fully-qualified with refs/ so git can't figure it out based on that, and the source ref is a hash rather than a name, so it can't figure it out based on that either. By pushing to refs/heads/master it works because the second condition is true, and then afterwards master exists on the remote so the first condition is true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Hub Clone All Branches At Once\n\nI'm trying to clone an entire repository onto my machine using linux. I used \ngit clone <url>   \n\nI then went into the folder where it was downloaded and typed\ngit branch \n\nin the terminal. It's only showing me master and not other branches which were in the remote repository. How do I clone all branches?\nI know that for each branch in the remote I can separately use \ngit checkout -b <name of local branch> origin/<name of remote branch>\n\nbut is there any way other than that?"}, {"role": "assistant", "content": "(1) Inside git local repostitory, create a new sh file\ntouch getAllBranches.sh\nvi getAllBranches.sh\n\n(2) Insert the below content to getAllBranches.sh file:\nfor branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master `; do\n   git branch --track ${branch#remotes/origin/} $branch\ndone\n\n(3) Get all branches:\nchmod +x getAllBranches.sh    \nsh getAllBranches.sh\n\n(4) Check result at local repository:\ngit branch\n\nFor example, I use repository: https://github.com/donhuvy/spring-boot\nAs you can see, I have fetched all branches to local machine:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install from github pull request\n\nLoooking at the npm install docs it looks possible to npm install from a github repo.  \nIs it also possible to install specifically from a pull request?\nIs the solution just to install based on the last commit (last sha) of the pull request?"}, {"role": "assistant", "content": "GitHub is maintaining a namespace for each PR in the original repo, so this works as well:\nnpm install <user>/<repo>#pull/<id>/head\n\n\nNOTE: It doesn't seeem to be working with NPM v. 5. See the comment below.\nWorks with npm 7.0.23 and possibly earlier versions. See the comment below.\n\nfor example:\nnpm i --save-dev json-schema-faker/json-schema-faker#pull/129/head\n\nor with yarn:\nyarn add <user>/<repo>#<id>/head\n\nfor example:\nyarn add json-schema-faker/json-schema-faker#129/head\n\nNote that in Yarn case there is no pull/ segment in the package identifier.\nThis may be helpful if you need to automate the installation or repo / branch from where PR is originating is removed. See also Modifying an inactive pull request locally at GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you rename a Git commit pushed to GitHub?\n\nI stupidly pushed a commit to GitHub with a very messed up commit name. How do I change this?\nDoes git commit --amend still work for already pushed commit?"}, {"role": "assistant", "content": "git commit --amend\n\nwhich will bring up your editor, or\ngit commit --amend -m \"Your new message here\"\n\nwhich will allow you to specify the new message on the command line. Also possible, but more useful if you have other commits to reword\ngit rebase -i HEAD^\n# then replace 'pick' with 'r' or 'reword' and save, editor should pop up again to edit the msg\n\nBecause this commit has a new SHA1 due to the change of the contents, you will need to force push the new reference. The force is needed because it tells git to forget about the previous commit. It's a safety measure.\ngit push origin your-branch-name -f"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to get the project folder name only on a Github action?\n\nI can get repoowner/repo-name with ${{ github.repository }} but I like to get just the repo-name.\nWhile I am at it.\nGitLab has a straight forward variable for this.\nHow do I get reference access env variables from the .yaml not inside scripts? Does ${{ $ENV_VAR }} work? Probably not.\nIs there a way to remove or replace the slashes directly in the yaml?\n  build:\n    needs: test\n    name: Build release Zip\n    runs-on: ubuntu-latest\n    env:\n      DEPLOY_REF: ${{ github.sha }}\n      DEPLOY_REF_SHORT: ${{ github.sha }}\n      DEPLOY_ZIPFILE: ${{ github.workspace }}/build/zip/${{ github.repository }}-${{ github.sha }}.zip\n    steps:"}, {"role": "assistant", "content": "github context also contains event data, from where you can easily read some more detailed info. In this case, ${{ github.event.repository.name }} will give you only repo-name part.\nIt might be a good idea to create testing workflow/job to print all context data until you're familiar with them, see Example printing context information to the log file.\n\nAs for replacing text, you can always dedicate one of first steps to prepare everything you need later with either ::set-env or ::set-output. You just need to print name/value in specific format, so you can use any shell you're familiar with to manipulate text while doing that:\n# All steps after this one will have env variable `GHA_BRANCH` passed to them.\n- run:   echo ::set-env name=GHA_BRANCH::$(echo $GITHUB_REF | awk -F / '{print $3}')\n  shell: bash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does github keep deleted remote branches in history? If so, can those be restored?\n\nI was wondering if there is a way to restore a remote deleted branch in github. History clearly keeps record of the branch and merges with other branches but I'm not sure if it's possible to restore a deleted branch.\nThanks."}, {"role": "assistant", "content": "Yes, it's possible to restore a deleted branch from git.\nFind your Commit ID: Search for a branch using git reflog\nIf you had the branch in your local git repo within the last 30 days, you may be able to find it in the reflog using the following:\ngit reflog\n\nSearch for the branch name in the reflog and note the HEAD{x} point or the commit ID.\nRe-create the branch from the Reflog HEAD point:\ngit checkout -b branch_name HEAD@{27}\n\nRe-create the branch from the commit ID:\nYou can checkout the commit ID and create a branch off of that commit point:\ngit checkout -b branch_name <commit id>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push >> fatal: no configured push destination\n\nI'm still going through some guides on RoR and I'm stuck here at Deploying The Demo App \nI followed instructions:\n\nWith the completion of the Microposts resource, now is a good time to push the repository up to GitHub:\n$ git add .\n$ git commit -a -m \"Done with the demo app\"\n$ git push\n\n\nWhat happened wrong here was the push part.. it outputted this:\n$ git push\nfatal: No configured push destination.\nEither specify the URL from the command-line or configure a remote repository using\ngit remote add <name> <url>\ngit push <name>\n\nSo I tried following the instructions by doing this command:\n$ git remote add demo_app 'www.github.com/levelone/demo_app'\nfatal: remote demo_app already exists.\n\nSo I push:\n$ git push demo_app\nfatal: 'www.github.com/levelone/demo_app' does not appear to be a git repository\nfatal: The remote end hung up unexpectedly\n\nWhat can I do here? Any help would be much appreciated."}, {"role": "assistant", "content": "You are referring to the section \"2.3.5 Deploying the demo app\" of this \"Ruby on Rails Tutorial \":\nIn section 2.3.1 Planning the application, note that they did:\n$ git remote add origin [email\u00a0protected]:<username>/demo_app.git\n$ git push -u origin master\n\nThat is why a simple git push worked (using here an ssh address).\nDid you follow that step and made that first push?\n www.github.com/levelone/demo_app\n\nThat would not be a writable URI for pushing to a GitHub repo.\nhttps://[email\u00a0protected]/levelone/demo_app.git\n\nThis should be more appropriate.\nCheck what git remote -v returns, and if you need to replace the remote address, as described in GitHub help page, use git remote --set-url.\ngit remote set-url origin https://[email\u00a0protected]/levelone/demo_app.git\n# or \ngit remote set-url origin [email\u00a0protected]:levelone/demo_app.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I delete a local branch on Github Desktop?\n\nLast week I upgraded my Windows Github to Github Desktop.\nIt is certainly a lot faster than that last update they made for Github Windows. It also has a nice little visual timeline of commits and maybe I am being dumb, but the ability to delete local branches seems to be gone. \nBefore it was under \u201cmanage branches\u201d (also gone). Any idea?\nUpdate: \nIn v3.0.5 they have added the option to delete local branches from the gear menu."}, {"role": "assistant", "content": "On Mac OSX:\nfor everyone having this problem with the latest version:\nSelect the branch that you want to delete, go to \"Branch\" -> \"Delete Branch\"\n\nOn Windows:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to fork a public GitHub repo into an enterprise repository?\n\nThere exist a public repo for Quick framework here. I'd like to be able to fork this into a private enterprise GitHub repository.  Forking would allow all the branches to remain. \nthe alternative would be to clone the repo and push up only a single branch to the enterprise but then I lose on not having all the branches from the source/original. \nupdate:\nI ended up pushing all my branches into the enterprise git. \nif you just do a git push yourRemoteName myNewBranch then it will push the code into that branch on the enterprise git while creating that branch in enterprise GitHub."}, {"role": "assistant", "content": "It's not possible, because your GitHub Enterprise (GHE) installation is separate from the public one, so there's no way for the two systems to track each other's branch relationships.\nThe best you can do is exactly as you describe:  Clone the repo, then push it to your GHE installation, and yes, you will then lose the branching relationships across repos.\nThe other option would be to keep a fork on the public GitHub (GH) repo--possibly keeping it in sync (manually, or with a cronjob) with your GHE repo.  Then you'll have two instances of your repo, and the public one would retain branch relationships with the original repo.\nDepending on why you need to put this on GHE, it may or may not work.  If you're making private contributions, it clearly won't work--as your private contributions would no longer be private.  If you want it on GHE due to some corporate policy that all open source projects used internally are kept on the GHE, or something similar, then it would work, with the added administrative overhead of keeping the repo in sync two places."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to easily create Github friendly markdown for documented JavaScript functions?\n\nI want to be able to take JSDoc comments like this anywhere in JavaScript source (even nested down several layers of functions, in a module or even anonymous functions):\n/**\n *  Used to do some important thing that needs doing that works like xyz.\n *  @param {String} whatever - some string that has some purpose\n *  @param {Function} callback - a function that needs to be run\n *  @returns {Boolean} whether or not something happened\n */\n function something(whatever, callback) {\n     ...\n\nand have some easy way to produce nice markdown:\n##`root.something(whatever,callback)`\nUsed to do some important thing that needs doing that works like xyz.\n\n*Parameters*\n  `whatever {String}` some string that has some purpose\n  `callback {Function}` a function that needs to be run\n\n*Returns*\n   `{Boolean}` whether or not something happened\n\nWhere \"root\" is the namespace at which that function is reachable.  Or if it's an anonymous function or a private function (that for some reason should be in public doco, does that even make sense??), use some other convention to denote that.  Maybe\n##_private_function_ `something(whatever,callback)`\n\n  and\n\n##_anonymous_function_`(whatever,callback)`\n\nIt doesn't have to be exactly that format, just something that looks good on Github and makes sense.  The ideal tool would be smart enough to be able to take code like Mustache.js and produce good output.  And extra good would be if it can handle lots of source files and produce one document as output, or a linked set of documents depending on configuration.\nAnd it would be best if this was done in a way that can be fully and easily included in a git repo so that people don't need to set up a highly specific toolchain to update the doco.  Or require a minimal toolchain at least.\nOh, and a pony.\n\nExisting options\nJSDoc, plus some kind of HTML -> markdown conversion\nJSDoc is pretty good.  But I can't seem to make it work well with modules.  Or rather, it's a bigger hassle than it ought to be IMHO.  I shouldn't need to add an extra tag to name the function.  I've tried the @export and @name and still have trouble getting it to show up in the final doc the way I'd want.  If someone can point to a JSDoc commented source that has modules in it and is done well, that might help.  Update: JSDoc v3 actually seems much better with modules than v2 so this might be a better fit.\nEven if I could get JSDoc output like I want, I'd need to convert from HTML to markdown.  I can't seem to find a good tool for that, does one exist?\nDocdown\nI played a bit with Docdown but the fact it's PHP is kind of a nonstarter for me...\nYUIDoc, plus conversion\nI actually haven't played with YUIDoc but it looks ok.  Still, I would need a converter.  Does it deal with modules easily and avoid having to supply the function name and export name explicitly?\nDox, plus markdown templates\nDox produces JSON as it's output, so then you'd need to marry that to some good markdown templates, and plus include a template engine to generate the documents.  Has anyone put together a set of such templates in a useful fashion?\njGrouse, plus conversion\nRuns with ANT.  Next...\nScriptDoc...\nDoes this even exist anymore?  Seems to be part of Aptana studio so that would be a nonstarter... Aptana doesn't seem to any info on it.  But ScriptDoc.org has some interesting information on crack, if that's helpful...\nPdoc\nPdoc is Ruby based but that toolchain is not uncommon so that's not a huge problem.  You can provide your own templates so maybe there are already some good markdown ones.  I haven't played with it... is it worthwhile?  Are there good markdown templates out there?\nSomething else?\nWhat else is out there?\nMake your own!\nAfter messing around with JSDoc for a few hours trying to make it work how I wanted, I gave up and wrote my own quick and dirty solution in Java for CharFunk, a unicode JavaScript library I've been working on.  It works well enough for what I need though it's not close to general purpose yet.\n\nSo.....\nIs this an unmet need or is it just me?"}, {"role": "assistant", "content": "I use jsdoc-to-markdown.. \nwrite documented code:\n/**\na quite wonderful function\n@param {object} - privacy gown\n@param {object} - security\n@returns {survival}\n*/\nfunction protection(cloak, dagger){}\n\nget markdown docs: \n$ jsdoc2md example/function.js\n\n#protection(cloak, dagger)\na quite wonderful function\n\n**Params**\n\n- cloak `object` - privacy gown\n- dagger `object` - security\n\n**Returns**: `survival`\n\nThese projects have readme files rendered by jsdoc2md:\n\nhandbrake-js\narray-tools\ncommand-line-args"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "My new Github page isn't showing up\n\nSo I'm following this guide here to create a Github page\nI created a repository, cloned it to my project directory and pushed, finally got to this last step:\nFire up a browser and go to http://username.github.io. Give it a couple of minutes for your page to show up\u2014there will be a delay this very first time. In the future, changes will show up pretty much instantly.\n\nMy Github repo link is this:\nhttps://github.com/leongaban/gabanco\nSo I assumed my Github page link would be either:\nhttp://leongaban.gabanco.github.io/\nor\nhttp://leongaban.github.io/\nHowever neither link is working at the moment :(\nAnyone create a Github page before? Eventually I want to try out Jekyll on it."}, {"role": "assistant", "content": "Try to push an empty commit and refresh the page. It should work.\ngit commit --allow-empty -m \"Trigger rebuild\"\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to version build artifacts using GitHub Actions?\n\nMy use case is I want to have a unique version number for artifacts per each build/run. With current tools like CircleCI, Travis, etc. there is a build number available which is basically a counter that always goes up. So, I can create version strings like 0.1.0-27. This counter is increased each time even for the same commit.\nHow can I do something similar with GitHub Actions? Github actions only offer GITHUB_SHA and GITHUB_REF."}, {"role": "assistant", "content": "GitHub Actions now has a unique number and ID for a run/build in the github context.\n\ngithub.run_id : A unique number for each workflow run within a repository. This number does not change if you re-run the workflow run.\ngithub.run_number : A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run.\ngithub.run_attempt : A unique number for each attempt of a particular workflow run in a repository. This number begins at 1 for the workflow run's first attempt, and increments with each re-run.\n\nref: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context\nYou can reference them in workflows like this:\n- name: Output Run ID\n  run: echo ${{ github.run_id }}\n- name: Output Run Number\n  run: echo ${{ github.run_number }}\n- name: Output Run Attempt\n  run: echo ${{ github.run_attempt }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to 'Watch' only a directory in a GitHub repository?\n\nFor example, https://github.com/vanillaforums/Garden is the GitHub repository. But I only want to 'watch' this directory https://github.com/vanillaforums/Garden/tree/master/plugins in the repository.\nHow do I do that? There doesn't seem to be a way."}, {"role": "assistant", "content": "GitHub provides feeds that can do this for both directories and files.1 Using that syndication, a service like Blog Trottr can send you an email whenever the feed is updated.\nSome samples, taken from the Linux source code on master:\n\n\n\n\n\nDirectory\nFile\n\n\n\n\nSource on GitHub\n/Documentation\n/Documentation/Makefile\n\n\nHistory on GitHub\n/Documentation\n/Documentation/Makefile\n\n\nHistory Atom feed\n/Documentation\n/Documentation/Makefile\n\n\n\n\n1 Thank you, youfu."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change github diff to be side by side comparison?\n\nFor github web browsing, it is not shown as side by side as lots of diff tool does. Can I change the diff mode to side by side? I mean on the github web."}, {"role": "assistant", "content": "2023: It is hidden behind the cog wheel \u2699 symbol (right to \"Conversations\").\n\n2014:\nYes, it is possible since Sept. 3rd 2014: see \"Introducing split diffs\":\n\n\nDiffs now come in two flavors, unified and split.\nSwitch between them on pull request, commit, and compare pages using the toggle in the top right of the page.\nThe mode you last used will become your preferred default.\n\n\nNote: since Sept. 4th 2014, it also support word diff highlights.\nSee \"Does Github have a view that shows diffs between file versions?\".\n\nSince 2014, and the introduction of dark theme(!) in 2020, the UI is now:\n\nfrom Unified:\n\n\n\nTo split diff:\n\n\nusing: \nNote: adding \"&diff=split\" at the end of the URL will give you the same result: a split diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "A way to restrict Git branch access?\n\nI have four branches in my git repository, which is managed using GitHub:\n\nProduction\nStaging\nMaster\n[person's name]-development\n\nIs there a way to restrict write access to only a single branch ([person's name]-development)? How would I do this? \nFor reference, a similar question: How to write a git hook to restrict writing to branch?."}, {"role": "assistant", "content": "When using GitHub, your best option would be for each developer to have their own fork of the master repository. Everybody pushes to their own repository and somebody with push access to the master repository handles pulling from each developer's repository. This is how most open source projects work.\nIf using your own Git server, it should be possible to use hooks to prevent users from pushing to wrong branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Easy way to add 'copy to clipboard' to GitHub markdown?\n\nSpecifically, I have blocks of code for install that I want the user to be able to quickly copy and paste into a terminal. I'd like a button to 'copy to clipboard' for the code block. Since there's a 'copy to clipboard' button for the git clone URLs, I was wondering if I could piggy back off that or if not whether there was some relatively simple I could add to the MD to make this happen. Or is this simply not possible with the processing and 'safication' the MD text goes through?"}, {"role": "assistant", "content": "The copy button is now a reality (May 2021), as tweeted by Nat Friedman\n\nWe just added a \"Copy\" button to all code blocks on GitHub.\n\n\nTo create a copy button, make a Fenced code block as shown here, in a markdown document\n```\nfunction test() {\n  console.log(\"This code will have a copy button to the right of it\");\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can GitHub automatically merge branches?\n\nWe want to automatically merge out from master to another long-lived branch whenever any changes are committed to master (at the moment, this is a manual process and people forget)\nI appreciate that it may not always be possible, owing to merge conflicts, but if it is possible, we'd like it to happen automatically.\nIs this possible?"}, {"role": "assistant", "content": "You can use GitHub Actions since Aug 13, 2019\nThis method will merge your branch with the master without the requirement to create pull requests manually.\nJust create .github/workflows/automerge.yml file in your repo with this content:\nname: Automerge\n\non:\n  workflow_dispatch:\n  schedule:\n    # You can setup schedule here\n    - cron: '0 0 * * *'\n\nenv:\n  # replace \"github_username\" with your GitHub username\n  # replace \"github.com/username/repo.git\" with your GitHub repo path\n  # do NOT replace ${{secrets.GITHUB_TOKEN}}, GitHub will take care of it\n  MY_REPO: https://github_username:${{secrets.GITHUB_TOKEN}}@github.com/username/repo.git\n\n  # replace \"long-lived_branch_name\" with your branch name\n  MY_BRANCH: long-lived_branch_name\n\n  # replace it with the path to master repo\n  MASTER_REPO: https://github.com/username/master_repo.git\n\n  # replace \"master\" with your master branch name\n  MASTER_BRANCH: master\n\njobs:\n  merge:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Merge with master\n      run: |\n        git clone ${{env.MY_REPO}} -b ${{env.MY_BRANCH}} tmp\n        cd tmp\n        git config user.name \"Automerge Bot\"\n        git config user.email \"[email\u00a0protected]\"\n        git config pull.rebase false\n        git pull ${{env.MASTER_REPO}} ${{env.MASTER_BRANCH}}\n        git push\n\n\n\nreplace \"github_username\" with your GitHub username\nreplace \"github.com/username/repo.git\" with your GitHub repo path\nreplace \"long-lived_branch_name\" with your branch name\nreplace \"master\" with your master branch name\nedit \"cron\" line to adjust the schedule\n\nAlso, don't forget to enable this workflow on the \"Actions\" page of your repo. You can run it manually too. You'll receive an e-mail from GitHub if merge was failed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "jitpack.io failed to resolve github repo\n\nI have a Github repo and pushed tags on it.\nThis is my gradle file of my main project.\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.0\"\n\n    defaultConfig {\n        applicationId \"dropbox.ric.es.myapplication\"\n        minSdkVersion 16\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\nrepositories {\n    //mavenCentral()\n    //jcenter()\n\n    maven { url \"https://jitpack.io\" }\n\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.github.rchampa:DropboxHttpConector:1.0.1'\n}\n\nBut when I sync gradle I have the following error Failed to resolve com.github.rchampa:DropboxHttpConector:1.0.1\nAnother attempt:\nallprojects {\n    repositories {\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.github.rchampa:DropboxHttpConector:1.0.1'\n}\n\nStill failing."}, {"role": "assistant", "content": "For anyone else that made the simple mistake I made:\nEnsure you add the maven { url \"https://jitpack.io\" } under allprojects instead of buildscript.\nProject build.gradle file:\nbuildscript {\n    repositories {\n        jcenter()\n        // DO NOT ADD IT HERE!!!\n    }\n    ...\n}\n\nallprojects {\n    repositories {\n        mavenLocal()\n        jcenter()\n        // ADD IT HERE\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\nThanks to Alexander Pacha for pointing that out in a comment above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create Pull Request Button is disabled\n\nI would like to make a pull request from my fork repo to the upstream repository.\nAs always I was following these steps here from the guidance from Github.\nBut this time I can not make a pull request, as the button is disabled.\nThe branches can be automatically merged.\nI do have changes in my forked repo and I can see commits made.\nBase repo and head repo are indicated correctly."}, {"role": "assistant", "content": "In my case, the pull request Title field didn't auto-populate like it usually does. Once I typed in a title, the button became active."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Atom - Remove the center line in the editor\n\nI just downloaded the GitHub Atom Editor and I'm customizing it.\nBut I couldn't remove the line that is the middle of the editor.\n\nAnyone help me out how to remove that line?"}, {"role": "assistant", "content": "This line is provided by the wrap-guide package. You have the following options to remove the line:\nOption 1\nDisable the wrap-guide package. Go to Atom > Preferences > Packages, type \"wrap\" into the search box, then wait for the wrap-guide package to show up under Core Packages, and click the Disable button there.\nOption 2\nOr add the following to your user stylesheet. Use Atom > Open Your Stylesheet to open the styles.less file in the editor, then add the following:\natom-text-editor::shadow {\n    .wrap-guide {\n        visibility: hidden;\n    }\n}\n\nOnce you save the file, the line will be gone.\nMore info can be found here: https://discuss.atom.io/t/vertical-line-in-editor/2717\nUpdate 2015-06-28 Updated selector due to updates in the Atom style classes. The above now works in Atom 1.0+."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Copy a folder from master branch to another branch\n\nI have folder name utils I want to copy this folder from master branch to work branch. How do I do that ?"}, {"role": "assistant", "content": "To copy the folder over:\n$ git checkout work\nSwitched to branch 'work'\n$ git checkout master -- utils\n$ git add utils\n$ git commit -m \"Adding 'utils' directory from 'master' branch.\"\n[work 9fcd968] Adding 'utils' directory from 'master' branch.\n\u00a01 file changed, 0 insertions(+), 0 deletions(-)\n\u00a0create mode 100644 utils/file\n\nIf you want to delete it on master after that:\n$ git checkout master\nSwitched to branch 'master'\n$ git rm -r utils\nrm 'utils/file'\n$ git commit -m \"Removing 'utils' directory.\"\n[master c786f95] Removing 'utils' directory.\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 utils/file\n\nThen you can just git push as necessary.  Git's output in your project may be different; I just made a simple test repo here with only one file in the utils directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "301 redirect for site hosted at github?\n\nHere's a Github repository of mine: https://github.com/n1k0/casperjs\nThere's a gh-pages branch to hold the project documentation, which is basically the project website: https://github.com/n1k0/casperjs/tree/gh-pages\nThis branch setups the documentation site at http://n1k0.github.com/casperjs/ \u2014 hurray.\nIn the meanwhile, I've bough the casperjs.org domain to get this website available through it, so I put a CNAME file as recommended in the docs: https://github.com/n1k0/casperjs/blob/gh-pages/CNAME \u2014 in their example, the operation is supposed to create redirects from www.example.com and charlie.github.com to example.com\u2026\nWhile the website now points to http://casperjs.org/, there's no 301 redirect from http://n1k0.github.com/casperjs/ (the old site url) to the new domain name.\nAny idea how to setup such a redirect, if it's even possible? Is it a bug? If it is, where should I open an issue?"}, {"role": "assistant", "content": "Bringing this topic back from the dead to mention that GH now supports redirect-from's redirect-to parameter https://github.com/jekyll/jekyll-redirect-from#redirect-to\nSimply add this to your _config.yml\ngems:\n  - jekyll-redirect-from\n\nAnd this to the top of your index page.\n---\nredirect_to: \"http://example.com\"\n---"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is \"Developer Program Member\" on Github.com\n\nI have seen couple of Github profiles having \"Developer Program Member\". I searched on Google a lot but not able to find how people get that in their profile."}, {"role": "assistant", "content": "This is for developers registered to the GitHub Developer Program (like this GitHub profile, for instance)\n\nMembership is open to individual developers and companies who have:\n\nA paid GitHub.com personal or organization plan\n  (since 2019, you don't need a paid membership anymore)\nAn integration in production or development using the GitHub API\nAn email address where GitHub users can contact you for support\n\n\nThat allows for:\n\nStaying in the know:\nBe the first to know about API changes and try out new features before they launch.\nScratching an itch\nBuild your own tools that seamlessly integrate with the place you push code every day.\nTaking on the enterprise\nObtain developer licenses to build and test your application against GitHub Enterprise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fast-forward merge is not possible. To merge this request, first rebase locally\n\nRecently, I have created newbranch and created a merge request to Master branch. Before TeamLead accept merge request into Master branch another team member was committed another fix to the same branch(newbranch). After that I committed my local changes and pulled the changes in newbranch to local branch. And I pushed my local commit to newbranch\n\nMy TeamLead told me to rebase my branch to an earlier version.\nAnd resolve conflicts.\nI don't know what to do now. Any idea?"}, {"role": "assistant", "content": "Starting on your newBranch:\ngit checkout master to get back on the master branch\ngit pull origin master to get the most up-to-date version of the master branch\ngit checkout newBranch to get back on your newBranch\ngit rebase origin/master -i to perform an interactive rebase. The command will take you through and let you pick commits, rename them, squash them, etc. Assuming you will want to keep them all, it will pause when there are merge conflicts and then you'll have to resolve them in your text editor, it will tell you where (in your text editor) that the conflicts occur. You will have to add those files after fixing them then do git rebase --continue to proceed with the rebase.\nWhen you're done with the rebase your newBranch will be synced up with master and have any commits in master that weren't there when you started your work, and all merge conflicts will be resolved so that you can easily merge your newBranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to push changes with a GitHub action?\n\nThis question refers to this: https://github.com/features/actions\nI have written a GitHub action to build my code and create a production bundle. I'd like to have that included into my repository by committing the changes to origin/master. This seems like an obvious feature for GitHub actions to have but I can't find it anywhere. How do I commit changes with a GitHub action and push them?"}, {"role": "assistant", "content": "Update: Please see the following question/answer for full details about how to push changes back to the remote.\nPush to origin from GitHub action\nAn alternative option is create-pull-request action. It will automatically commit changes to a new branch and raise a pull request for you to review the changes. I wrote a detailed explanation about it as an answer to another question here:\nhttps://stackoverflow.com/a/58004257/11934042"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What security issue is caused by changing the visibility of a fork on Github?\n\nOn Github, say I forked a project but did not want to display it on my profile because the project relates to something that I am not allowed to work on for non-compete reasons.\nWhen I try to set the fork to private, I receive this error message on Github:\n\n\"For security reasons, you cannot change the visibility of a fork.\"\n\nWhat are the potential security implications of changing the visibility of a fork?"}, {"role": "assistant", "content": "When you perform a push on GitHub, the data is pushed into the repository for you fork.  Then, if there are multiple forks, those objects are moved into an alternate that is shared by all repositories in that network, forks included.  This saves a lot of space when there are many forks, and it makes pull requests much easier, since the objects are already present in the main repository.\nHowever, it means practically that all objects in all forks in the network are visible through any fork.  As a result, if your fork were private, then someone who knew an object ID could view it through the main repository and see that data.  This would be a security problem, so GitHub doesn't allow it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: could not open '.git/COMMIT_EDITMSG': Permission denied\n\nI am trying to deploy octopress on github pages. I followed these instructions:\nhttp://octopress.org/docs/deploying/github/\nIt all worked well until the commit part, where I get error:\n\nfatal: could not open '.git/COMMIT_EDITMSG': Permission denied\n\nI am the owner of my github.io page, of course, and I never had this issue before. Why is this happening, and more importantly how do I resolve it?"}, {"role": "assistant", "content": "I solved it by deleting .git/COMMIT_EDITMSG. Weird, I know."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push multiple branches from multiple commits?\n\nI never used git before GitHub released the Windows app, so I've never used it in command line.\nSo here's my situation:\nI did some commits on master, then switched branch and did some commits there too. All without pushing to GitHub.\nWhen I then clicked sync in the the windows app (which I assume does git push), to my surprise, all my commits were pushed to my new branch - even the commits I made while I was in master.\nSince this is the behavior of the windows app, I guess I have to use the command line.\nWhat is the correct git push command to push the commits to the correct branches on the remote?"}, {"role": "assistant", "content": "If you want to push several specific branches (for example branch1 and branch2) you can use:\ngit push origin branch1 branch2 \n\nIn Git >= 2.4 this operation can be done atomically (i.e. if it fails to push any of the branches specified nothing will be pushed):\ngit push --atomic origin branch1 branch2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a good-looking notification or warning box in Github Flavoured Markdown?\n\nI am looking for something simple like triple backticks, but that still allows other markdown syntax inside.\nThis is not the case for triple backticks, since it is used for code blocks:\n**NOTE:**\nFind the docs [here](http://example.com/).\n\nEverything inside is taken literally, so it is not possible to use other markdown features inside, like links or bold text ...\nIs there any syntax or feature in markdown that enables such notification boxes?"}, {"role": "assistant", "content": "As Waylan mentions in his answer, Github strips script and style tags from the markdown before displaying it. This means the only possibilities for notification boxes that will render on Github are those provided by native markdown or html.\nAfter some searching and experimenting, I discovered it is possible to (ab)use the\ntables syntax,\nand combine it with Github emoji markdown.\nFor example:\n\nBoxes from a single cell table:\n| :exclamation:  This is very important   |\n|-----------------------------------------|\n\n\n| :zap:        Ignore at your own risk!   |\n|-----------------------------------------|\n\n\n\nBoxes from a single row table with 2 cells:\n| :memo:        | Take note of this       |\n|---------------|:------------------------|\n\n\n| :point_up:    | Remember to not forget! |\n|---------------|:------------------------|\n\n\n\nBoxes from a 2 row table:\n| :warning: WARNING          |\n|:---------------------------|\n| I should warn you ...      |\n\n\n| :boom: DANGER              |\n|:---------------------------|\n| Will explode when clicked! |\n\n\n\n\nNote that markdown tables do not allow newlines, so you should use <br /> tags if you need multiple lines inside the box. In this case it might be simpler to directly use the html <table> tag, since it doesn't have this newline restriction. It also allows getting rid of the bold styling of the table header <thead> by replacing its <th> tags with <td> tags:\n<table>\n  <thead>\n    <tr>\n      <td align=\"left\">\n        :information_source: Information\n      </td>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td>\n        <ul>\n          <li>Tis not true.</li>\n          <li>I won't explode.</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'Enter PIN for authenticator' Issue related to SSH\n\nBrief\nI attempted to generate a SSH key for my Github on a Macbook Pro. Yet I encountered the 'Enter PIN for authenticator' issue when I progressed to the step of adding it to the ssh-agent. The bizarre asking is from the following command:\n$ ssh-add -K ~/.ssh/id_rsa\nEnter PIN for authenticator:\n\nwhich I totally have no idea what I should type into for this asking. Yet as I typed with the following command, everything just worked as this page revealed.\n$ /usr/bin/ssh-add -K ~/.ssh/id_rsa\nIdentity added: /Users/${user_name}/.ssh/id_rsa ([email\u00a0protected])\n\nWhy there exists this kind of difference ? What exactly you need to type for the asking of 'Enter PIN for authenticator:' ?\nSome Info\n\nversion information\n\n$ ssh -V\nOpenSSH_8.3p1, OpenSSL 1.1.1g  21 Apr 2020\n\n$ sw_vers -productVersion\n10.15.6\n\n\nI generated the key with the ed25519 algorithm."}, {"role": "assistant", "content": "If you use this command\n$ ssh-add -K ~/.ssh/id_rsa \n\nyou will be asked to enter the PIN for authentication\nso instead of that use\n$ ssh-add ~/.ssh/id_rsa"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Image not showing up in README.md on GitHub\n\nI am trying to add an image to the README.md in my repository using markdown below:\n![ScreenShot](https://github.com/i-saumitra/Voice-controlled-MP3-Player/blob/master/screenshot.jpg)\n\nBut the image is not showing when I visit my repository. \nInstead the link to the image is showing up. Clicking the link will open the image in new window.\nI have also tried using relative path:\n![ScreenShot](screenshot.jpg)\n\nBut this is giving page not found error.\nWhat is the correct markdown to display image in README.md\nBoth README.md and image file are in same path/directory.\nWhat is the correct way to display an image in github README.md?\nComplete content of README.md file is as below:\nVoice-controlled-MP3-Player\n===========================\n\nA MP3 player which accept voice command like PLAY, PAUSE, FORWARD, etc. Using C# and Microsoft Speech API.\n\n![ScreenShot](https://github.com/i-saumitra/Voice-controlled-MP3-Player/blob/master/screenshot.jpg)"}, {"role": "assistant", "content": "Updated content\nSince January, 30th 2013, GitHub now supports relative links in markup documents.\nThis means that your code ![ScreenShot](screenshot.jpg) would now work flawlessly.\nAs pointed by @Brad, this may also ease a scenario where the images are different in two branches, but bear the same. In that case, switching from one branch to another, would dynamically switch the image in the rendered view, thus without requiring any change to the Readme content.\n\nBlog post announcement\nHelp article\n\nPrevious answer when GitHub wasn't supporting relative links\nYou have to use the raw url format. In your case that would be https://raw.githubusercontent.com/i-saumitra/Voice-controlled-MP3-Player/master/screenshot.jpg\nThis means that the correct markdown would be the following\n![ScreenShot](https://raw.githubusercontent.com/i-saumitra/Voice-controlled-MP3-Player/master/screenshot.jpg)\n\nUsing this in a .mdfile on github will display the following picture ;-)\n\nUpdate following your comment\n\nwhere is this officialy documented that we have to use raw...i couldn't find it anywhere\n\nThis URL format is an undocumented feature of the GitHub site. This means that it could change later. If that ever happens, in order to \"rediscover\" the new format, click the Raw button when displaying a image. This will \"open\" the image in your browser. Copy the URL and Voil\u00e0!\n\nNote: Although the repository is no longer on hosted on GitHub, I've updated the urls to reflect the new GitHub policy regarding user content"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does Git(Hub) handle possible collisions from short SHAs?\n\nBoth Git and GitHub display short versions of SHAs -- just the first 7 characters instead of all 40 -- and both Git and GitHub support taking these short SHAs as arguments.\nE.g. git show 962a9e8\nE.g. https://github.com/joyent/node/commit/962a9e8\nGiven that the possibility space is now orders of magnitude lower, \"just\" 268 million, how do Git and GitHub protect against collisions here? And how do they handle them?"}, {"role": "assistant", "content": "These short forms are just to simplify visual recognition and to make your life easier. Git doesn't really truncate anything, internally everything will be handled with the complete value. You can use a partial SHA-1 at your convenience, though:\n\nGit is smart enough to figure out what commit you meant to type if you provide the first few characters, as long as your partial SHA-1 is at least four characters long and unambiguous \u2014 that is, only one object in the current repository begins with that partial SHA-1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Pull vs. Pull Request\n\nI'm new to using Git, so I apologize if this is trivial.  I have a private repository set up using Github and EGit.\nTo update and merge my local repository branch with the remote version (essentially a git pull), I use Team > Pull in Eclipse.\nTo merge a branch into the master branch, I have to request and subsequently approve a Pull Request on Github.\n\nWhat is the difference between calling git pull and sending a pull request?  \n\nI've seen that this is related to a Fork and Pull collaborative development model and is used for code reviews.  I think I understand the motivation and usefulness of a pull request, but what exactly is it?"}, {"role": "assistant", "content": "If you use git pull, you pull the changes from the remote repository into yours.\nIf you send a pull request to another repository, you ask their maintainers to pull your changes into theirs (you more or less ask them to use a git pull from your repository).\nIf you are the maintainer of that repository, it seems you're making it a bit more difficult by pretending you're playing two roles in that workflow. You might as well merge locally your development branch into your master branch and push that master branch into your GitHub repository directly.\n(As a side note, if you're new to Git, I'd suggest using git fetch and then git merge instead of git pull. git pull is effectively git fetch followed by git merge, but doing them separately gives you better control over potential conflicts.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to make outer repository and embedded repository work as common/standalone repository?\n\nI have a big project(let's say A repo), and it there one child folder which is come from B repo.  I would meet warning like below when I commit from A repo\nwarning: adding embedded git repository: extractor/annotator-server\nhint: You've added another git repository inside your current repository.\nhint: Clones of the outer repository will not contain the contents of\nhint: the embedded repository and will not know how to obtain it.\nhint: If you meant to add a submodule, use:\nhint:\nhint:   git submodule add <url> extractor/annotator-server\nhint:\nhint: If you added this path by mistake, you can remove it from the\nhint: index with:\nhint:\nhint:   git rm --cached extractor/annotator-server\nhint:\nhint: See \"git help submodule\" for more information.\n\nI have seen git-submodule and git-subtree:\nMaintaining Git repo inside another git repo\nhttps://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree\nBut I don't like them , because they need extra config.\n\nWhat I want is , for example:\nstructure like:\nA/\n--- a.py\n\n--- B/\n--- B/b.py\n\nWhen I change B/b.py .\n\nIf I am on path A/ ,  git add can detect B/b.py changed, git push only commit that to A repo.  \ngit add .   (would add changes under A/  )\ngit push   (would push changes under A/  )\ngit pull   (would pull changes under A/  )\ngit clone XXX:A  (would clone all files under A/ ,    A/B/ is just looks like plain folder with all files, not a repo )\n\nIf I am on path A/B/ , git add only add B/b.py changes to B repo,  and git push only commit that to B repo. \ngit add .   (would add changes under B/ , but not add changes to A repo)\ngit push   (would push changes under B/ , but not push changes to A repo)\ngit pull   (would clone changes under B/ ,  )\ngit clone XXX:B  (would clone all files under B/  )\n\nOnce I want to snyc A and B in another machine, just do\ngit clone A\nrm -rf A/B/\ngit clone B ./B\ngit add . && git commit 'sync with B'\n\n\nIn another word, A and B act as a standalone repo.\nBut the truth is , A repo treat B repo as submodule:  \nA repo\nhttps://github.com/eromoe/test\nB repo\nhttps://github.com/eromoe/test2\n\nHow do I force A repo track all files under A/ , and B repo track all files under A/B/ ?   I want A and B act as a self-contain repo , without any other config."}, {"role": "assistant", "content": "You can use below commands to add files from test2 repo to test repo as below:\n# In local test repo\nrm -rf test2\ngit clone https://github.com/eromoe/test2\ngit add test2/\ngit commit -am 'add files from test2 repo to test repo'\ngit push\n\nNote: \nYou should use git add test2/ (with slash, not git add test2).\ngit add test2/ will treat test2 folder and it's files as ordinary folder and file for test repo (create mode 100644). \ngit add test2 will treat test2 folder as a submodule for test repo (create mode 160000)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between Git Bash and the GitHub for Windows shell?\n\nI'm referring to the shell that comes with GitHub for Windows (Github CLI), and Git Bash (which has a stand alone installer)."}, {"role": "assistant", "content": "Well, for one thing, the default shell that comes with GitHub for Windows is PoshGit, which is a Windows Power Shell environment for Git.  On the other hand, Git Bash/msysGit uses the Bash shell (Bourne Again Shell) and MinGW, which is a port of a Linux style environment and command line tools.\nPoshGit will let you use Windows and Power Shell commands with Git at the command line, while Git Bash will let you use MinGW/Linux tools with Git at the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How long should I keep my fork projects on github?\n\nWhen I have a feature request on a library in github, I would either\n\ntry to contact the author\nand/or implement it myself on a local copy, and when I am done, fork the project and push my changes.\n\nMore often than not, the original authors are happy to see the enhancements, and they'll either pull them as is, or merge them manually after some modifications.\nThe question is, what should I do with my fork projects after my commits have been accepted by the upstream? If I am not going to make any further updates, should I delete the repository? Or, should I keep it around for historical interest?\ngithub does not really indicate whose copy is the \"definitive\" repository, so my inactive forks may distract other people from finding the right copy. In fact, I just got a pull request form someone, which was also accepted at the upstream."}, {"role": "assistant", "content": "If I have no interest in being an active contributor or developer, I usually delete mine after the patch has been accepted upstream. I don't see a need to keep the repo around for historical reasons -- the commit will already have my name and email, and the timestamp of the commit, so that seems to be all the historical record it really needs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Suddenly getting \"No supported authentication methods available\" when pushing to github\n\nI started a github project a few weeks ago. I was able to push changes without any problems (I'm using TortoiseGIT).\nSuddenly today when I tried to push my changes, I got \"PuTTY Fatal Error\" \"Disconnected: No supported authentication methods availble\" error window.\nAnything you can recommend to remedy the problem?"}, {"role": "assistant", "content": "For me there was a problem to perform actions against the remote repository only when using TortoiseGit, through CMD / GitBash there have been no issue at all.\nSo what I did was Very simple:\nI opened TortoiseGit-->Settings --> Network and in SSH Client I changed to \"C:\\Program Files\\Git\\usr\\bin\\ssh.exe\" instead of \"TortoiseGitPlink.exe\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I specify a gem to pull from a private github repository?\n\nI have a private repository on Github that I want to use. I deploy my app to Heroku. How can I specify a private repository as the source on my gemfile? I imagine it wouldn't be enough to simply say\ngem \"mygem\", :git=>\"my github address\""}, {"role": "assistant", "content": "The best way I've found to deploy a gem pulled from a private repo is to use GitHub's OAuth access. To do so:\n\nCreate a GitHub user with access to the repo in question (best for teams \u2013 if you're okay exposing your personal access tokens, you can simply use your own account).\nCreate an GitHub OAuth token for the user. It's dead simple to do this over the GitHub API just using curl; see the OAuth API for more.\nAdd the token to the git url in your Gemfile. Example:\n\ngem 'mygem', git: 'https://xxx123abc:[email\u00a0protected]/user_or_team/mygem.git'\n\nI'm currently using this method on Heroku and it works great. The beauty is that you don't have to expose your own personal information, and you can revoke or regenerate the token at any point if something is compromised."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "heroku and github at the same time\n\nSo I understand that heroku functions as a git repository, but let's say i want to use github as well as a repository. How do I set it up such that I have two repositories and both are in sync?"}, {"role": "assistant", "content": "You can have multiple remotes on a git installation. You would have a github remote, and a heroku remote.\nAssuming you already have github setup, then you probably push to github with something like:\ngit push origin master\norigin is your remote, and master is your branch.\nFollow the instructions in getting started with Heroku choose your desired language and continue through the tutorial. This tutorial assumes that you already have github setup, and will show you how to create your heroku remote - via heroku create.\nYou then push to github as normal, and push to heroku via:\ngit push heroku master\nThe same format applies - heroku is your remote, and master is your branch. You are not overwriting your Github remote here, you are adding another, so you can still do both pushes via one commit with workflow such as:\ngit add .\ngit commit -m \"Going to push to Heroku and Git\"\ngit push origin master -- push to Github Master branch\ngit push heroku master -- push to Heroku"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Database on a personal github page\n\nIs it possible to have some data stored somewhere on your personal github page?\nFor example a button that triggers a counter. When you click on the button , counter increments by 1. When other user visits that page and clicks the button , counter gets incremented by 1 once again.\nSo it would be a sum of all click across all visitors that would be displayed on the page."}, {"role": "assistant", "content": "Github pages only allow for static content, so you'd have to use something like firebase in order to get a database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "remove a file from GIT control [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\ngit - removing a file from source control (but not from the source) \n\nI have a .classpath file which is currently in GIT repository.\nAfter I pulled from remove repository(git pull origin master). How can I remove this file from GIT control, I mean NOT to delete this file from my computer but remove it from GIT version control. (Because this file is not needed for version control).\nP.S.\nI tried git rm <path-to>/.classpath , but then my whole project complains about wrong class path, why git rm delete my file instead of remove from version control ???"}, {"role": "assistant", "content": "Use git rm --cached to remove from the index but not the working tree.\nAfter that, you should add .classpath to your .gitignore file, to prevent it from being committed again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see my git secrets unencrypted?\n\nI had some secrets in my code and upon learning about GitHub Actions I decided to save them in the repository's secret menu for later use in my pipeline.\nHowever, now I need to access these secrets to develop a new feature and I can't. Every time I try to see the value it asks me to update the secrets. There is no option to just \"see\" them.\nI don't want to update anything I just want to see their values.\nHow can I see the unencrypted values of my secrets in the project?"}, {"role": "assistant", "content": "In order to see your GitHub Secrets follow these steps:\n\nCreate a workflow that echos all the secrets to a file.\nAs the last step of the workflow, start a tmate session.\nEnter the GitHub Actions runner via SSH (the SSH address will be displayed in the action log) and view your secrets file.\n\nHere is a complete working GitHub Action to do that:\nname: Show Me the S3cr3tz\non: [push]\n\njobs:\n  debug:\n    name: Debug\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v2\n\n    - name: Set up secret file\n      env:\n        DEBUG_PASSWORD: ${{ secrets.DEBUG_PASSWORD }}\n        DEBUG_SECRET_KEY: ${{ secrets.DEBUG_SECRET_KEY }}\n      run: |\n        echo $DEBUG_PASSWORD >> secrets.txt\n        echo $DEBUG_SECRET_KEY >> secrets.txt\n\n    - name: Run tmate\n      uses: mxschmitt/action-tmate@v2\n\nThe reason for using tmate in order to allow SSH access, instead of just running cat secrets.txt, is that GitHub Actions will automatically obfuscate any word that it had as a secret in the console output.\n\nThat said - I agree with the commenters. You should normally avoid that. Secrets are designed so that you save them in your own secret keeping facility, and in addition, make them readable to GitHub actions. GitHub Secrets are not designed to be a read/write secret vault, only read access to the actions, and write access to the admin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins linking to my local git repository\n\nI'm new to Jenkins and git too. I created a remote repository at github.com and made a local copy of it.\nThen I want to link it through Jenkins. I installed needed plugins for git integration, but I don't know what my local Repository URL is to set it when configuring the new project. Could someone help me where to find it?"}, {"role": "assistant", "content": "In this case, the URL should start with the file protocol followed by the path to the repository. E.g., file:///home/rbkcbeqc/dev/git/gitsandbox."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reverting specific commits from git\n\nI have a git tree with a lot of commits and a lot of files. Now, I want to revert specific commits that touch a file only. To explain:\n> git init\nInitialized empty Git repository in /home/psankar/specific/.git/\n> echo \"File a\" > a\n> git add a ; git commit -m \"File a\"\n[master (root-commit) 5267c21] File a\n 1 file changed, 1 insertion(+)\n create mode 100644 a\n> echo \"File b\" > b\n> git add b; git commit -m \"File b\"\n[master 7b560ae] File b\n 1 file changed, 1 insertion(+)\n create mode 100644 b\n> echo \"File c\" > c\n> git add c; git commit -m \"File c\"\n[master fd6c132] File c\n 1 file changed, 1 insertion(+)\n create mode 100644 c\n> echo \"b and c modified\" > b ; cp b c\n> git commit -a -m \"b and c modified\"\n[master 1d8b062] b and c modified\n 2 files changed, 2 insertions(+), 2 deletions(-)\n> echo \"a modified\" > a\n> git commit -a -m \"a modified\"\n[master 5b7e0cd] a modified\n 1 file changed, 1 insertion(+), 1 deletion(-)\n> echo \"c modified\" > c\n> git commit -a -m \"c modified\"\n[master b49eb8e] c modified\n 1 file changed, 1 insertion(+), 1 deletion(-)\n> git log --pretty=oneline c\n> git log --pretty=oneline c | cat\nb49eb8e03af331bddf90342af7d076f831282bc9 c modified\n1d8b062748f23d5b75a77f120930af6610b8ff98 b and c modified\nfd6c13282ae887598d39bcd894c050878c53ccf1 File c\n\nNow I want to revert just the two commits b49eb8 and 1d8b06 without reverting the changes to a. IOW revert only the commits in a file (without reverting other intermediate commits (which may be thousands in number) in different files) How is this possible ?"}, {"role": "assistant", "content": "You can use git revert with the --no-commit option. In your example:\n$ git revert --no-commit b49eb8e 1d8b062\n# Files that were modified in those 2 commits will be changed in your working directory\n# If any of those 2 commits had changed the file 'a' then you could discard the revert for it:\n$ git checkout a\n$ git commit -a -m \"Revert commits b49eb8e and 1d8b062\"\n\n--no-commit option will not do auto commit, it allows you to edit and add your own commit message\nNote that with unlike git reset with git revert all the reverted commits will still be there in the commit history"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reference GitHub file in jsFiddle\n\nIs there a possibility to misuse grab files from a github repo as external resources in jsFiddle?"}, {"role": "assistant", "content": "TLDR; Visit rawgit.com which will pop your files on a CDN straight from GitHub so you can use them.\nUnfortunately none of the answers here worked for me. The rawgithub URL didn't seem to work as the connection gets refused. So here's a full solution that did work. Firstly in GitHub you need to click the Raw button to get the original JavaScript.\n\nThen copy the URL from the page it takes you too. You'll notice if you try and use this directly  you'll get a warning from JSFiddle.\n\nMore to the point is the browser will give you an error, e.g.:\nRefused to execute script from  https://raw.githubusercontent.com/nnnick/Chart.js/master/Chart.min.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled.\nTake that URL and visit rawgit.com. This will give you a URL of the format https://rawgit.com/nnnick/Chart.js/master/Chart.min.js which you can then use.\nI've tried and tested this and it seems to work fine without issue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Number of Commits between two Commitishes\n\nHow can I find the number of commits between two commitishes in git?\nAdditionally, is there some way that I could do the same with any project on GitHub (using the UI, not the API)?"}, {"role": "assistant", "content": "Before I give you an answer, consider this commit graph:\n        o -----------\n       /             \\\n... - A - o - o - o - B\n       \\         /\n        o ----- o\n\nEach o represents a commit, as do A and B (they're just letters to let us talk about specific commits).  How many commits are there between commits A and B?\nThat said, in more linear cases, just use git rev-list --count A..B and then decide what you mean by \"between\" (does it include B and exclude A? that's how git rev-list --count will behave).  In branchy cases like this, you'll get all the commits down all the branches; add --first-parent, for instance, to follow just the \"main line\".\n(You also mentioned \"commitish\", suggesting that we might have annotated tags.  That won't affect the output from git rev-list, which only counts specific commits.)\n\nEdit: Since git rev-list --count A..B includes commit B (while omitting commit A), and you want to exclude both end-points, you need to subtract one.  In modern shells you can do this with shell arithmetic:\ncount=$(($(git rev-list --count A..B) - 1))\n\nFor instance:\n$ x=$(($(git rev-list --count HEAD~3..HEAD) - 1))\n$ echo $x\n2\n\n(this particular repo has a very linear graph structure, so there are no branches here and there are two commits \"between\" the tip and three-behind-the-tip).  Note, however, that this will produce -1 if A and B identify the same commit:\n$ x=$(($(git rev-list --count HEAD..HEAD) - 1))\n$ echo $x\n-1\n\nso you might want to check that first:\ncount=$(git rev-list --count $start..$end)\nif [ $count -eq 0 ]; then\n    ... possible error: start and end are the same commit ...\nelse\n    count=$((count - 1))\nfi"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push fails in GitKraken with errormessage \"Push Failed cannot read property 'fullName' of undefined\"\n\nI was trying to push and create a pull-request from my local feature-branch, as usual, being in my feature-branch and right-clicking on the remote origin/develop -branch (I'm using Git Flow), and this error message popped out:\n\nCan't find anything with that error message. Any ideas?"}, {"role": "assistant", "content": "I had this problem as well when there was a HEAD tag at a commit behind the current local master or origin/master.\nTry double-clicking your local master (which eliminates HEAD) and then push your changes.\nNote that if you do not have a local master, right-click on remote origin master and choose 'Checkout origin/master'. Then pull, commit, push your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git cannot lock ref 'HEAD': unable to resolve reference HEAD\n\nI'm trying to commit the changes to my repository but I receive the error below:\ngit -c diff.mnemonicprefix=false -c core.quotepath=false commit -q -F C:\\Users\\Contronym\\AppData\\Local\\Temp\\bkdweixb.mnu\nfatal: cannot lock ref 'HEAD': unable to resolve reference HEAD: Invalid argument\n\nCompleted with errors, see above.\n\nI'm using bitbucket and SourceTree.\nWhat's the reason for this commit failing? I was able to commit just fine the last 3 commits over the past week. Then, all of a sudden, I receive this error.\nEDIT\nI ran git gc and these are the results:\n$ git gc\nerror: bad ref for HEAD\nerror: bad ref for HEAD\nerror: inflate: data stream error (unknown compression method)\nfatal: loose object 53b65bd9b4fec7f6a7b0b3313c68199a18804327 (stored in .git/objects/53/b65bd9b4fec7f6a7b0b3313c68199a18804327) is corrupt\nerror: failed to run repack\n\nI checked the directory .git/objects/53/b65bd9b4fec7f6a7b0b3313c68199a18804327 but that doesn't exist. There's two other files there, but b65bd9b4fec7f6a7b0b3313c68199a18804327 doesn't exist."}, {"role": "assistant", "content": "I had the same problem and the only solution that I found was to navigate to the head like so:\n.git/refs/heads/branch_name \n\nAnd I deleted the head file. Then I went to the console and I used the command:\ngit reset\n\nThen all the files were unstaged so add them and commit them afterwards."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can github pages CNAME file contain more than one domain?\n\nCan github pages CNAME file contain more than one domain?\nExample file:\nreggi.com\nwww.reggi.com\nblog.reggi.com"}, {"role": "assistant", "content": "No, this is not possible. See the GitHub Help docs that explain this:\n\nEnsure you only have one domain listed in your CNAME file. If you wish to have multiple domains pointing to the same Pages, you will need to set up redirects for the other domains. Most domain registrars and DNS hosts offer this service to their customers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Placing links inside markdown code blocks\n\nI want to have links inside my code blocks using GitHub flavored markdown.\n```cpp\nvoid Click ([Keycode](#keycode) key) const\n```\n\nUnfortunately, it renders that as code, anyway to make it a link instead?"}, {"role": "assistant", "content": "If its a short piece of code this should do the trick:\n[`this is code`](https://this_is_url/)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to auto-reject a pull request if tests are failing (Github actions)\n\nI am doing npm test when pull requests are raised using Github actions.\n\nNow if tests fail,\nI would like to add a message,\nOr at least, reject the PR using actions.\n\nHow can I do this?"}, {"role": "assistant", "content": "I assume you have an on: pull_request workflow that runs npm test. This should automatically create a GitHub Check on the pull request that will fail if your tests fail. The best way to \"reject\" the pull request is to prevent it from being merged unless the tests pass. You can do this by turning on a setting in your repository to \"Require status checks to pass before merging,\" and selecting your workflow as required.\nYou can find this setting under your repository's Settings > Branches.\n\nThere are further details about these settings in the documentation.\nhttps://help.github.com/en/github/administering-a-repository/enabling-required-status-checks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to list organization's private repositories via GitHub API?\n\nI'm trying to get a list of an organization's all repositories, including private ones. (Or to be more specific, all of the private repositories a certain user has access to.)\nReqesting info for the organization (https://api.github.com/orgs/acme?access_token=[...]) shows that there indeed are plenty of private repositories:\n...\n\"public_repos\": 5,\n\"total_private_repos\": 68, \n\"owned_private_repos\": 68, \n...\n\n(The access token I'm using had been previously generated using the API for username/passwd.)\nBut whatever I try to list the repos...\nhttps://api.github.com/orgs/acme/repos?access_token=[...]   \n\n...GitHub API just returns the 5 public repositories. (Documentation says type=all is default. Also tried adding the parameter type=private; no difference.)\nAny idea what I'm doing wrong?\nThe user to whom the access token was generated in fact has Push & Pull access to just some  of the organization's private repositories, but none of those appear in the list I get (just the 5 public repositories)."}, {"role": "assistant", "content": "Everything you are doing is OK. However, when creating OAuth tokens for authentication, be sure that you are defining the right scopes. Each scope defines a specific set of permitted actions (information you can read/write), so you should check that you are creating the token with the repo scope."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Explain clones info in Github's Traffic tab\n\nIn a recent question I made, one of the answers pointed to another answer in another question where a way to explore the forks and clones of a public Github repo was shared.\nI went ahead and did that with my own public repo and came up with this information in the Git clones section under the Traffic tab in the Graphs section:\n\nI'm not really sure I understand what this information means. Are there 6 clones of the repo in total with 4 of them made on the 09/08? Did only 3 unique cloners cloned it?, in which case, does that mean they cloned it more than once? Do those numbers include myself and any clones I might have made in different systems (ie: home PC, work PC, laptop, etc)? Any help is much appreciated."}, {"role": "assistant", "content": "I believe part of the confusion is that the graph shows 4 cloners (blue line), and the label is saying 3 unique cloners. Other than that, it should be interpreted as:\n\n6 clones in the past 14 days, 4 made on 9/8 ... this may not indicate the \"total\" as you ask, as this graph only ever goes back 14 days\n3 unique cloners cloned it, some of them may have cloned it more than once...\n...For example, on 9/8, it could have been cloners:clones of 1:1 and 1:3 ... it doesn't give you that level of information\nIt should include every time the git clone command was executed against the repo, so all of your different devices, yes.\nYou would be identified as a unique user or not based on if it could determine \"unique GitHub users (or anonymous IP addresses)\" + confirmation from GitHub support"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: Mirroring gh-pages to master\n\nI'm developing a jQuery plugin that's being hosting on GitHub. It has a demo included of which I'm manually copying and pushing to the branch gh-pages, what I'd like to do is have it so when I push a change to master it is automatically pushed to gh-pages, or at least a setup where they are mirrored.\nI've already seen this question but not sure if it really answers my question with regard to these requirements:\n\nI use Tower, I don't mind using the terminal (Mac) to make changes to config, so long as the solution works with this GUI.\nI only want this 'mirroring' on certain repos, not on all of them on my machine.\n\nCheers"}, {"role": "assistant", "content": "Add the following 2 lines to the [remote \"origin\"] section of .git/config:\npush = +refs/heads/master:refs/heads/gh-pages\npush = +refs/heads/master:refs/heads/master\n\nEvery time you push it will automatically push master to gh-pages as well.\nI'm using this for the jQuery Lifestream project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create custom labels for issues on GitHub?\n\nI've noticed that some organizations on GitHub have different labels that they can apply to issues.\nFor example, one organization that I am a part of allows any of these labels to be applied:\n\nHowever, on my personal account, I am limited to only these labels, and I can't find a way to create my own custom ones:\n\nAny ideas on how I can go about creating my own?"}, {"role": "assistant", "content": "It looks like you might be accessing GitHub on a mobile device, which likely exposes a somewhat different interface.\nOn the full web interface, simply navigate to https://github.com/:user/:repo/labels and click the green \"New label\" button at the top right. Existing labels can be edited or deleted on the same page.\nYou can also get to this page by clicking on \"issues\" and then \"labels\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: error: RPC failed; result=22, HTTP code = 411\n\nSymptoms:\nGit suddenly refused to push a repository (to github in my case):\n$ git push\nCounting objects: 9292, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2136/2136), done.\nerror: RPC failed; result=22, HTTP code = 411\nfatal: The remote end hung up unexpectedly\nWriting objects: 100% (8222/8222), 1.27 MiB | 837 KiB/s, done.\nTotal 8222 (delta 6060), reused 8181 (delta 6033)\nfatal: The remote end hung up unexpectedly\nEverything up-to-date"}, {"role": "assistant", "content": "Here is what helped, the following command increases git buffer to 500mb:\ngit config http.postBuffer 524288000"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see contributor's email address on Git commit chain?\n\nI can't see how to email a contributor on github after lengthy attempts, and google searches. Why does every beginners guide encourage us to immediately configure our user.email such that it is sent with every commit if its so difficult to view the contributors' email addresses on the commit chain in GitHub?"}, {"role": "assistant", "content": "Add .patch to the end of the commit url to open patch view.\nhttps://github.com/torvalds/test-tlb/commit/4210d1cfc58f2d8a3da0730389ee63d68c6fe914.patch\n\nhttps://www.thereach.io/blog/articles/how-to-find-github-user-email-addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push changes to github after jenkins build completes?\n\nI have a jenkins job that clones the repository from github, then runs the powershell script that increments the version number in the file. I'm now trying to publish that update file back to the original repository on github, so when developer pulls the changes he gets the latest version number.\nI tried using Git Publisher in the post build events, and I can publish tags with no issues, but it doesn't seem to publish any files."}, {"role": "assistant", "content": "The git checkout master of the answer by Woland isn't needed. Instead use the \"Checkout to specific local branch\" in the \"Additional Behaviors\" section to set the \"Branch name\" to master.\nThe git commit -am \"blah\" is still needed.\nNow you can use the \"Git Publisher\" under \"Post-build Actions\" to push the changes.  Be sure to specify the \"Branches\" to push (\"Branch to push\" = master, \"Target remote name\" = origin).\n\"Merge Results\" isn't needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does GitHub call foreign submissions, a \"Pull Request\"?\n\nI'm curious why GitHub calls submissions to merge, \"Pull requests.\"\nFrom my understanding, git pull will pull all changes, from a remote repository, into a current working branch.  Then merge those changes with FETCH_HEAD. (Git Pull)\nSo taking a look at git push... a push would actually push committed changes to a repository.  And isn't that what you are doing with a Git repo?  Submitting a \"request\" to merge your code? So why isn't it called a \"Push request\"?"}, {"role": "assistant", "content": "The term \u201cpull requests\u201d comes from the distributed nature of how many open source projects organize themselves. Instead of just pushing your changes into the repository (like you would do with a centralized repository, e.g. with Subversion), you are publishing your changes separately and ask the maintainer to pull in your changes. The maintainer then can look over the changes and do said pull."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I ignore the launchSettings.json file from being committed in Git?\n\nI find this relatively known GitHub repository, where they considered launchSettings.json file (which is used by Visual Studio 2017 for .Net Core projects) is to be ignored.\nhttps://github.com/github/gitignore/blob/master/VisualStudio.gitignore\nWhy should it be ignored? I used always in the company I work in to commit it, I am curious to know if there is any reason to ignore it."}, {"role": "assistant", "content": "launchSettings.json should not be ignored. That repository has since been updated to not ignore it: https://github.com/github/gitignore/pull/2705\n\nReasons for making this change:\nIgnoring launchSettings.json does not make much sense. Now .NET CLI even considers this file when running with dotnet run, as you can read here.\nThis settings will be useful if shared among project members, so it should be commited to the repo.\nLinks to documentation supporting these rule changes:\nhttps://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-run?tabs=netcore2x"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why do some repository URLs end in .git while others don't?\n\nWhen I clone a repository, is there any difference between these two URLs?\n\nWithout .git extension:\ngit clone http://foo/repo\n\nWith .git extension:\ngit clone http://foo/repo.git"}, {"role": "assistant", "content": "The convention is that the .git extension should be used for bare repositories, and left off of directories with a working tree. Git doesn't really care, but has a few convenience methods that make this fairly transparent.\nFor example, if you have a repository named /tmp/foo.git and you call git clone file:///tmp/foo, Git will first try to find /tmp/foo. If it doesn't exist, it will try /tmp/foo.git instead.\nThis does not work the other way around. If your directory is named /tmp/foo and you try to clone from /tmp/foo.git you will be told:\n\nfatal: '/tmp/foo.git' does not appear to be a git repository\n\nMost of the HTTP/HTTPS functionality is from your web server, not Git. Even if you're using Smart HTTP transport, I suspect most of the magic happens in a server-side LocationMatch directive. Theory aside, some quick tests against GitHub show that it works the same way as the SSH and Git procotols in that respect, but your mileage may vary on other web servers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there any GitHub GUI Client for Linux OS? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIs there anything similar to GitHub for Windows or GitHub for Mac for Linux systems?"}, {"role": "assistant", "content": "Try the SmartGitHg. It's a Git GUI that both support Windows and Linux. And it supports GitHub very well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "self signed certificate in certificate chain on github copilot\n\nI installed the GitHub copilot but the extension do not work, always show the following error :\n\n\nGitHub Copilot could not connect to server. Extension activation failed: \"self signed certificate in certificate chain\"\nSource: GitHub Copilot (Extension) Show Output log\n\nWhat could I do to solve this ?"}, {"role": "assistant", "content": "Copilot error: \u201cGitHub Copilot could not connect to server. Extension activation failed: self-signed certificate in certificate chain\u201d is generally caused using CoPilot behind a Corporate network.\n\nMost corporate networks have a \u2018Man-in-the-middle\u2019 appliance that dynamically breaks open all secure SSL traffic leaving home to enter the internet. This ensures they can inspected any traffic leaving, including your online banking. Usually automation scrubs the traffic looking for theft of company secrets or IP and raises alerts. It all gets logged and reviewed further if need be.\n\nThis action leaves behind a fake cert chain as a fingerprint. The cert for the called site is replaced with a fake, and one signed by the company\u2019s own private CA authority. Hence the self-signed cert in the cert chain error.\n\nFrom any company device (Phones\\Laptop) the company CA is already installed as a trusted CA. So the local browsers and other desktop apps trust this faked cert chain - and so do not raise any concerns someone is snooping your secure network traffic (the company does own the network and the device).\n\nBy default VSCode is not trusting the installed desktop certs, and so it noticed that the GitHub cert is no longer signed by a trusted public CA authority.\n\nAs Rypox states above, the VSCode extension \u2018Win-CA\u2019 (must be set to \u2018append\u2019 mode) solves this issue. It tells VSCode to also trust the CA\u2019s installed on the employees desktop. This makes VSCode happy again trusting the fake cert chain. No 'whitelisting' needed and not 'VPN' related. But certinly not that obvious either. An interesting CA trust issue.\n\nConfirming this does exist is easy from your browser. Go to any outside site (like Amazon) and review the sites \u201cCert\u201d to see who the CA\u2019s are (Certification Path). It should \u2018not\u2019 contain any reference to your company. Look at that same cert from outside the company network on your own personal laptop.\n\n\n\u2026 \u201cbit of a glitch in the Matrix\u201d, installing Win-CA helps hides it again and all looks back to normal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Steps to Troubleshoot \"django.db.utils.ProgrammingError: permission denied for relation django_migrations\"\n\nWhat are some basic steps for troubleshooting and narrowing down the cause of the Django error:\ndjango.db.utils.ProgrammingError: permission denied for relation django_migrations\n\nI'm getting this message after what was initially a stable production server but has since had some changes to several aspects of Django, Postgres, Apache, and a pull from Github. In addition, it has been some time since those changes were made. I don't recall or can't track every change that may be causing the problem.\nI get the message when I run python manage.py runserver or any other python manage.py ... command except python manage.py check, which states the system is good."}, {"role": "assistant", "content": "I was able to solve my issue based on instructions from this question. Basically, postgres privileges needed to be re-granted to the db user. In my case, that was the user I had setup in the virtual environment settings file. Run the following from the commandline (or within postgres) where mydatabase and dbuser should be your own database and user names: \npsql mydatabase -c \"GRANT ALL ON ALL TABLES IN SCHEMA public to dbuser;\"\npsql mydatabase -c \"GRANT ALL ON ALL SEQUENCES IN SCHEMA public to dbuser;\"\npsql mydatabase -c \"GRANT ALL ON ALL FUNCTIONS IN SCHEMA public to dbuser;\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change from master to a new default branch git\n\nHere is a scenerio:\nWe have a default branch master and we work off from this, creating branches and pushing up etc...\nWe have now created a develop branch off master and set this as a default development branch.\nWhat I would like to know is, how do I now know if my git pull command is requesting changes from the default branch via the command line? or point to this new default branch?\nWhat I have done:\n\nSince creating a new default branch git pull into master from origin/master\n\nAlso, any new branch, will it be from master or develop?\nAs you can see\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\nPS C:\\Users\\dir\\Documents\\GitHub\\repo> git log\ncommit 867cxx\n\nfd956f73dc91d0022b (HEAD -> master, origin/master, origin/develop, origin/HEAD)\n\nupdate:\nthis change of default branch occurred after cloning the repo."}, {"role": "assistant", "content": "With git 2.28 you can set a global config with this command\ngit config --global init.defaultBranch {branchName}\nReplace {branchName} with the default branch name\nand now whenever you create a new git repo, the default branch will be this.\nMore details in my video here: https://www.youtube.com/watch?v=YccHk6QlRss"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "TypeError: Request path contains unescaped characters, how can I fix this\n\n/*Making http request to the api (Git hub)\ncreate request\nparse responce\nwrap in a function\n*/\nvar https = require(\"https\");\n\nvar username = 'lynndor';\n//CREATING AN OBJECT\nvar options = {\n    host: 'api.github.com',\n    path: ' /users/'+ username +'/repos',\n    method: 'GET'\n};\n\nvar request = https.request(options, function(responce){\n    var body = ''\n    responce.on(\"data\", function(chunk){\n        body += chunk.toString('utf8')\n    });\n    responce.on(\"end\", function(){\n        console.log(\"Body\", body);\n    });\n});\nrequest.end();\n\n\nIm trying to create a request to the git hub api, the aim is to get the list repository for the specified you, but i keep getting the above mentioned error, please help"}, {"role": "assistant", "content": "for other situation can be helpful\nJavaScript encodeURI() Function\nvar uri = \"my test.asp?name=st\u00e5le&car=saab\";\nvar res = encodeURI(uri);"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Why should I fork?\n\nI understand that forking is cloning the repository on the server side. But I don't understand why I would do that.\nWhy not clone the original repository to my machine, add my code, than push the new branch to GitHub and make a pull request?"}, {"role": "assistant", "content": "I understand that forking is cloning the repository on the server side [...]\n\nThat's about right. On GitHub, a fork is a copy of some other GitHub repo, with a reference to the repo it was copied from.\n\nRemark: the concept of a fork originated with GitHub; it is not a Git concept.\n\n[...] but I don't understand why I would do that. Why not clone the original repository to my machine, add my code, then push the new branch to GitHub and make a pull request?\n\nUnless you have write access to the repository in question, you cannot simply push anything to it; your push will be denied by the server with an error message of the form\nremote: Permission to bos/text.git denied to Jubobs.\nfatal: unable to access 'https://github.com/bos/text/': The requested URL returned error: 403\n\nThat's where a fork comes into play. By forking someone else's repo, you get a copy to which you have write access, i.e. to which you can push your contributions. The entire workflow goes something like this:\n\nIdentify an area in Alice's repo that can be improved.\nFork that repo.\nMake a clone of your fork on your local machine.\nIn that clone, make changes, run tests, create commits (possibly on a new branch), etc.\nOptionally, once you're happy with your amendments to Alice's code, make your work more presentable: tidy/squash your commits, write good commit messages that respect the style of Alice's repo. You may also want to rebase your branch to that of Alice's branch, if Alice has pushed changes to her repo since you forked her repo.\nPush to your fork.\nIssue a pull request to Alice (essentially notifying Alice to take a look at the changes you made in your fork of her repo) and wait for her to review it.\nPush more commits to (and possibly rebase) your branch until Alice is satisfied with your work.\nIf all goes well, Alice merges your pull request; your work gets integrated into her GitHub repo. Champagne! Your work was not in vain.\nIf you don't intend to contribute to Alice's repo any time soon, you can safely delete your fork, to save space on GitHub's servers. If, on the other hand, you frequently contribute to Alice's repo, keep your fork and frequently sync it with Alice's repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can deleted .git be restored?\n\nThis happened when working with git on Ruby on Rails.\nseveral commits and branches were done and created.\ngit version 1.7.3.4\n\nI accidentally deleted the .git folder using\ngit -rf .git\n\nbut I have all the files and updates done on online git-hub repository.\nI want the .git folder restored. Questions ?\n\nAm I totally screwed up ? OR \nIf theres a way to restore .git from my online git-hub repository, how can\nthat be done ?"}, {"role": "assistant", "content": "The only way you can restore a deleted .git folder is by:\n\nCloning it again from somewhere\nChecking your recycling bin or backup (if no remote repository exists)\n\nSince your files are from the online github repository, then its simple. Just clone it again from the directory where you deleted the .git folder:\ngit init\ngit remote add origin <repo_address>\ngit pull origin master\n\nwhere repo_address can be [email\u00a0protected]:yourname/yourproject.git\nYour local checkout will be back to normal. \nIf you have uncommitted changes in your working copy you would want to keep, instead of using git pull use git fetch and then git reset --soft your local branch to the remote branch it should be at. The soft reset will not change your working copy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to force image (cache) update in README.rst on GitHub\n\nIn one of my project I'm using an external image link to display a screenshot via the GitHub page, which automatically parses the README.rst\nGitHub page of ROyWeb\nI updated this screenshot on my web server several times in the last weeks and I just realised that it is not updated on the GitHub page since... well I think it never updated ;-)\nGitHub somehow downloaded the image and loads it from it's cache servers.\nWithin the README.rst, there is clearly the correct link:\nActual link to the ROyWeb screenshot\nWhich you can confirm, when you load the raw file:\nraw README.txt on GitHub\nBut when I check the URL of the displayed image on the GitHub page, I get:\nGitHub cached screenshot of ROyWeb\nDoes anyone know how to force a \"recache\"?"}, {"role": "assistant", "content": "curl -X PURGE {url of cached badge image}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is Github.com source code open source? [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about programming within the scope defined in the help center.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\n... or the shoemaker's children go barefoot?\nI would like to fix some styling & have an idea for the feature (and a lot of free time) but I cannot find any github.com page on github.com."}, {"role": "assistant", "content": "GitHub isn't open-source, but you can apply your ideas on an (open-source) GitHub-look-alike:\nGitLab\nA ruby application with its source code here).\nThey accept suggestions and pull requests\n\ngogs.io (less active than gitea)\nUpdate 2015: you also have other GitHub-look-alike in Go:\n\ngitea.com\n\nGitBLit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I use a GitHub project directly in Maven?\n\nI am interested in using a project on GitHub as a dependency in my project. The GitHub project has a pom file. Can I modify my pom file to use this project? If so, how? If not, what is my best course of action?"}, {"role": "assistant", "content": "Try jitpack, you just need to add the dependency, jitpack will build others for you.\nFrom home page:\n\njitpack\n  Easy to use package repository for Gradle and Maven projects\n  JitPack builds GitHub projects on demand and provides ready-to-use packages\n\nHOW\n\nAdd repository first\n\n<repository>\n    <id>jitpack.io</id>\n    <url>https://jitpack.io</url>\n</repository>\n\n\nAdd dependency\n\n<dependency>\n    <groupId>com.github.User</groupId>\n    <artifactId>Repo name</artifactId>\n    <version>Release tag</version>\n</dependency>\n\nTIPS:\nYou can see its build log too https://jitpack.io/com/github/NanoHttpd/nanohttpd/Release-2.1.0/build.log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Submodule - Permission Denied\n\nI am not able to clone the submodule existing within my private git repository. I do have access to entire repository, \nHave used the below commands but dint work, please help. What is the right way to clone the submodules in an existing repository? \ndjrecker$ git submodule update --init --recursive\nSubmodule 'Path' ([email\u00a0protected]:Path) registered for path 'App'\nCloning into 'Path'...\nPermission denied (publickey).\nfatal: Could not read from remote repository."}, {"role": "assistant", "content": "I was facing the same issue.  The problem was on your github repo , you might be using some old ssh key. \nYou need to update the current ssh key.\nSteps involved are:\n\n1. vim ~/.ssh/id_rsa.pub\n2. copy the ssh key\n3. Go to the github settings\n4. Select the option ssh keys\n5. Remove the old ssh keys not used anymore.\n6. Add a new ssh key.\n7. Try running the \"git submodule update --recursive\"\n\nThis worked for me !!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Clone from a branch other than master\n\nI am trying to pull from a repository in Github. But I don't want to clone the master branch. I want to clone some other branch. When I try git clone <url>, I get the files from the master branch. What should I do?\nAlso, suppose the code is updated in the repository and I want to get the latest code, should I again use git clone ? Because the size of the project is huge. Also if I make changes to the project locally, and then I again use git clone, will the changes I made still be there? What if I don't want changes to be there?\nI am not even sure if git clone is the right command. git pull or git fetch?\nI am sorry, I am very new to git."}, {"role": "assistant", "content": "Try this:\ngit init\ngit fetch url-to-repo branchname:refs/remotes/origin/branchname\n\nEDIT\nA better solution:\ngit clone -b mybranch --single-branch git://sub.domain.com/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I connect to my existing Git repository using Visual Studio Code?\n\nI've been using Visual Studio code for a long time, since v0.9.1. I now have run into the need to use GitHub and an online Git repository.\nI have the online Git repository set up and have been pushing changing to the online repository using GitHub. I have recently come to realize I can save myself a step with using Visual Studio Code to do both: to edit my code, then send it up to the online repository.\nI am very new to the whole Git concept. Visual Studio Code had me install the \"Git\" plugin which installed Git Bash, Git CMD, and Git GUI.\nThis is the online repository URL I'm trying to get to: https://github.com/SpectrumGraphics/Spectrum-Graphic-Designs.git"}, {"role": "assistant", "content": "Open Visual Studio Code terminal (Ctrl + `)\nWrite the Git clone command. For example,\ngit clone https://github.com/angular/angular-phonecat.git\n\nOpen the folder you have just cloned (menu File \u2192 Open Folder)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github pages, HTTP headers\n\nI serve some of my files from my Github pages account. But when I check my \"js\" files' headers, I saw following:\nLast-Modified:Sun, 10 Feb 2013 14:00:46 GMT \nExpires:Sun, 10 Feb 2013 14:13:23 GMT\nCache-Control:max-age=600\n\nThis file was commited 14 days ago. But I don't plan these files so frequent. So I need to make much bigger max-age value and change Last-Modified value to last commited date.\nIs it possible to change headers of Github pages?"}, {"role": "assistant", "content": "I asked this to Github admins, and they told me that \"it is not possible\" to change headers. They added this issue to wishlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see what type of line endings are already in git repository?\n\nFirst of all, I'm not asking what does it mean or how to change it. The thing what interest me most is: how can I see what's already in repo? What type of line endings.\nI have my repositories on github and bitbucket.\nThanks for help"}, {"role": "assistant", "content": "You can use this command:\ngit ls-files --eol\n\nIt will output one line per file with the following information:\ni/lf    w/crlf  attr/text=auto eol=lf   file.txt\n\nIn that example, i/lf means that the file uses lf in the index, and w/crlf means it uses crlf in the working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Which is the smarter git protocol, ssh or git(over ssh) or https protocol?\n\nWhich is efficient? SSH:// or Git://  (File compression)\nI understand in Git, git protocol is smart because there is a protocol agent on both ends of communication to compress the file transfer resulting in faster clone by efficiently using the network bandwidth.\nFrom an O'Reilly book I found the following statements.\nFor secure, authenticated connections, the Git native \nprotocol can be tunneled over an SSH connection using\nthe following URL templates:\n\nssh: //[user@]example.com[:port]/path/to/repo.git\nssh: //[user@]example.com/path/to/repo.git\nssh: //[user@]example.com/~user2/path/to/repo.git\nssh: //[user@]example.com/~/path/to/repo.git*\n\nI'm not sure if the author means what he says. He talks of git protocol getting tunneled over SSH. \nFrom my perspective, unless you connect to the git port (agent port), the protocol is not in effect. And SSH is merely an uncompressed file transfer. But as per the author, if we use SSH he says the git protocol is tunneled over it. So is SSH smarter in GIT?\nVon C,\nThanks for your answer. \"Network protocols (HTTP and Git) are generally read-only\" Git can be made rw when you run the daemon with --enable=receive-pack. \nFollowing are my concerns.\nWhen they say git protocol is smart, they mean when you execute git clone, Git server agent compresses the data that is sent back to the client, so the clone should be faster. In my use case I'll be setting the Git server in Hongkong and using it on San Jose and other countries as well, So I want to be efficient over network due to latency concerns.\nSo my question is when I use git clone ssh://user@server/reposloc do I get the benefits of git protocol also? As per O'Reilly author book he means git is tunneled over ssh, then how does git protocol work when I don't have git daemon running on the server.\nSo using SSh://xyz... does it give both the benefit of ssh and git protocols?\nAppreciate your answers in advance."}, {"role": "assistant", "content": "Update 2010-2014:\nBoth ssh and https are equivalent, since Git 1.6.6+ (2010) and the implementation of smart http protocol:\n\nYou now can use ssh or https for read/write access to your repos.\nYou can also detect if your remote server supports smart http.\nAdd the right environment variable if you have to use a proxy.\nQ3 2015, as Yousha Aleayoub mentions in the comments:\nGitHub \"Which remote URL should I use?\"\n\nThe https:// clone URLs are available on all repositories, public and private.\n  They are smart, so they will provide you with either read-only or read/write access, depending on your permissions to the repository.\n\nThe git-http-backend is the:\n\nsimple CGI program to serve the contents of a Git repository to Git clients accessing the repository over http:// and https:// protocols.\n  The program supports clients fetching using both the smart HTTP protocol and the backwards-compatible dumb HTTP protocol, as well as clients pushing using the smart HTTP protocol.\n\n\nOriginal answer (July 2010):\nFrom the Pro Git Book:\n\nProbably the most common transport protocol for Git is SSH.\n  This is because SSH access to servers is already set up in most places \u2014 and if it isn\u2019t, it\u2019s easy to do. \nSSH is also the only network-based protocol that you can easily read from and write to. The other two network protocols (HTTP and Git) are generally read-only, so even if you have them available for the unwashed masses, you still need SSH for your own write commands. \nSSH is also an authenticated network protocol; and because it\u2019s ubiquitous, it\u2019s generally easy to set up and use.\n\nSo it is not \"smarter\" than Git protocol, just a complementary protocol for certain features not addressed by the Git protocol.\n\nThe downside of the Git protocol is the lack of authentication. It\u2019s generally undesirable for the Git protocol to be the only access to your project.\n  Generally, you\u2019ll pair it with SSH access for the few developers who have push (write) access and have everyone else use git:// for read-only access\nIt also requires firewall access to port 9418, which isn\u2019t a standard port that corporate firewalls always allow. Behind big corporate firewalls, this obscure port is commonly blocked.\n\n(that is why in my shop, I need to use ssh+git and not just git, even for read access: 9418 is blocked...)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git export from github remote repository\n\nI'd like to export from github remote repository, not cloning it. Similar to svn export, I do not want to get .git folder with it. I can work around it by cloning and removing .git folder. I wonder if there is a cleaner way?\nI read it somewhere you can use git archive to achieve this.\nHowever I got the following errors..\n$ git archive --format=tar [email\u00a0protected]:xxx/yyy.git master | tar -xf -\n\nInvalid command: 'git-upload-archive 'xxx/yyy.git''\nYou appear to be using ssh to clone a git:// URL.\nMake sure your core.gitProxy config option and the\nGIT_PROXY_COMMAND environment variable are NOT set.\nfatal: The remote end hung up unexpectedly\n\nAny help would be great. Thanks."}, {"role": "assistant", "content": "Thanks to the Subversion support by GitHub, you can use svn export to get the project without any version control files:\nsvn export https://github.com/user/project/trunk\n\nNotice the URL format:\n\nThe base URL is https://github.com/\nUSERNAME/PROJECTNAME without .git\n/trunk appended at the end\n\nThis way you can get branches and subdirectories too.\nThis creates a directory with the exported files. It's not possible to create a tar/zip directly, you have to do in two steps (export + zip). This is a limitation of svn export itself.\nAs @Jon pointed out, this will create the export in a directory named trunk by default. You can specify a different name if you prefer:\nsvn export https://github.com/username/projectname/trunk projectname\n\nYou can use this technique to export any sub-directory of the project.\nFor example if you want only some/path, you can do:\nsvn export https://github.com/username/projectname/trunk/some/path local-dir-name\n\nYou can get paths from branches and tags too. The endpoint https://github.com/username/projectname behaves fully as a Subversion repository with a regular layout, so you will find branches in https://github.com/username/projectname/branches and tags in https://github.com/username/projectname/tags.\nBefore you export something large by mistake, it's good to check first the content of the path. You can do that using svn ls, for example:\nsvn ls https://github.com/username/projectname/\n\nNormally this should give you:\nbranches/\ntags/\ntrunk/\n\nYou could iteratively explore the repository this way."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a \"bot account\" on github?\n\nI am reading some docs that discuss how to authenticate on GitHub for a particular repo. They say \"You'll likely want to use a bot account for this.\" (Docs are written by a Github employee). What is a bot account? How do I get one?"}, {"role": "assistant", "content": "Look at this section, \"User Accounts / What's the difference between user and organization accounts?\"\n\nUser accounts are intended for humans, but you can give one to a\n  robot, such as a continuous integration bot, if necessary.\n\nIn other words, a \"User account\" can be for a \"person\" (the normal case), but it can also be used by an automated process (a \"bot\").\nWhich is precisely how Benbalter is using GitHub in the Change Agent project you cited above.\nQ: How do I get one?\nA: A \"bot account\" is just another Github user account.  You create it exactly as you would any other Github user account."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between git pull and git pull origin master [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nDifferences between \"git pull\" commands when pulling from origin?\n\n                                (2 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nWhat is the difference between these two commands?\ngit pull\n\nand \ngit pull origin master"}, {"role": "assistant", "content": "[Edit, May 2018: git pull is no longer a shell script and a few details are different in modern Git.  Pull also now has recursion options that make it more useful with submodules.  This answer ignores the submodules.]\nThe git pull script is meant as a convenience method for invoking git fetch followed by git merge (or, with git pull --rebase, invoking git fetch followed by git rebase).\nThe first extra argument to git pull tells it which remote to give to the fetch operation:\ngit pull origin\n\nfor example, means to fetch from origin.  If you leave this out, Git uses the current branch's remote:\n$ git branch\n* master\n$ git config --get branch.master.remote\norigin\n\nThe second (and any additional) arguments to git pull tell it which branch or branches to merge in.  These are the names of the branches as found on the remote.  For instance, suppose you create a new branch feature2 that tracks origin/feature:\n$ git checkout -b feature2 origin/feature\n\nIf you now want to fetch from origin to pick up new commits added to their feature branch, but merge them in to your local feature2 branch:\n$ git pull origin feature\n\nIf you leave out the branch name(s), git uses the current branch's merge:\n$ git config --get branch.feature2.merge\nfeature\n\nNote that if you list multiple branch names, Git will do an \"octopus merge\".  In my experience, this usually surprises people the first time: they think git pull remote br1 br2 will run git fetch followed by a series of separate git merge-s on each branch, but that's not what happens."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone git repository from its zip\n\nI'm trying to clone a remote repository on github, but it is big and my connection doesn't seem to be stable enough, so I can't clone it successfully.\nBut I have successfully downloaded the .zip of the repository.\nIs there a way to use this zip as it was created by git clone, so I can push, pull etc..?"}, {"role": "assistant", "content": "A related post here provides the information needed to grab the .git directory and simplify the answer that uml\u00e4ute provided:\n\nGrab the .git directory by cloning a bare repository\n$ mkdir repo\n$ git clone --bare http://github/user/repo repo\n\nMake the .git directory and move the cloned files\n$ mkdir repo/.git\n$ mv repo/* repo/.git\n\nUnzip the repository\n$ unzip repo.zip\n\nRe-initialize the repository\n$ cd repo\n$ git init\n\nVerify you're sync'ed\n$ git pull\n\nReset the HEAD to clean up the status\n$ git reset HEAD\n\nHere's the log for the repo ... repo location - http://github.com/udacity/fullstack-nanodegree-vm\n$ git log\ncommit ebcbda650bc81d7f4856f5314a0689cea5b43086\nMerge: 574774b b5b787e\nAuthor: Karl Krueger <[email\u00a0protected]>\nDate:   Tue Apr 7 11:39:54 2015 -0700`\n\n        Merge pull request #3 from pmallory/sharedDirAlert\n\n        Add a login alert to explain how to access Vagrant's shared directory\n\ncommit b5b787efdb1ecec0c3c9c7f9c0fd4732f984fcb3\nAuthor: Philip Mallory <[email\u00a0protected]>\nDate:   Mon Apr 6 15:40:32 2015 -0700`\n\n       move the alert into the motd\n\ncommit b8012f33c86b0d19fc4c2b972af092e88d00978f\nAuthor: Philip Mallory <[email\u00a0protected]>\nDate:   Mon Apr 6 14:32:01 2015 -0700`\n\n       Add a login alert to explain how to access Vagrant's shared directory\n\ncommit 574774ba29ccd661154431d5600240f090440c37\nAuthor: Lorenzo Brown <[email\u00a0protected]>\nDate:   Wed Mar 11 14:08:02 2015 -0700`\n\n       Update pg_config.sh\n\n       Added installs for Auth&Auth\n\ncommit 88fc5537b1a0017a1d76af4587a22412473809a4\nAuthor: Lorenzo Brown <[email\u00a0protected]>\nDate:   Wed Mar 4 13:00:25 2015 -0800`\n\n       Update and rename vagrant to vagrant/catalog/README.txt\n\ncommit f978cdc14c62b7295d8da1a95452faaa1bd108b8\nAuthor: Lorenzo Brown <[email\u00a0protected]>\nDate:   Wed Feb 4 11:06:03 2015 -0800`\n\n       Update Vagrantfile\n\n       switched to port forwarding on 8080\n\ncommit d6a3a26578ef3c6d01d28abca76d817938892c7f\nAuthor: Lorenzo Brown <[email\u00a0protected]>\nDate:   Tue Feb 3 14:52:34 2015 -0800`\n\n       Update Vagrantfile\n\n       Added:\n\n       config.vm.network \"forwarded_port\", guest: 80, host: 8080\n       config.vm.network \"forwarded_port\", guest: 5000, host: 5000\n\n       FSF uses these two ports for lessons 2 & 3 respectively.\n\ncommit 752a79e408c7328ef7f1766d1b97bb468ffed90a\nAuthor: Mike Wales <[email\u00a0protected]>\nDate:   Mon Feb 2 11:21:29 2015 -0800`\n\n       Removed .vagrant directory\n\ncommit 5af9d19adf9ab19b1d886f6cc78e556f864b42dd\nAuthor: Mike Wales <[email\u00a0protected]>\nDate:   Mon Feb 2 11:16:45 2015 -0800`\n\n       Initial commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What exactly is a Release in GitHub?\n\nWhat is it exactly?\nFor what is it used?  \nHow widespread is the usage?  \nHow is it usually used?"}, {"role": "assistant", "content": "From Official GitHub:\nReleases are GitHub's way of packaging and providing software to your users. You can think of it as a replacement to using downloads to provide software.\nWith Releases, you can provide links to binary files, as well as release notes describing your changes.\nAt their core, Releases are based on Git tags. Tags mark a specific point in the history of your project, so they're a great way to indicate a Release. Releases are ordered by a tag's date in the following way:\n\nIf it's an annotated tag, the tag object's date is used.\nIf it's a lightweight tag, then the commit object's date is used.\n\nFor more information about viewing your existing tags, see Working With Tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - Moving Pushed Commits to a Different Branch\n\nMy boss decided recently to try out an outsourcing group \"for increased capacity\" as we modify an existing application to add new features. Despite my concern that the group he chose didn't seem to communicate well and wasn't asking enough questions to truly understand and be effective, we went with them anyway.\nWe set them up to collaborate on our Git repository (hosted on GitHub). We created a branch just for them (TheOutsourcedBranch, we'll call it) and requested that they to do all of their work within this branch.\nAdditionally, we asked that they push their commits at the end of each day so that we can get a decent idea of how fast they work and (more importantly) how good their code is.\nToday they pushed for the first time. Five commits, all of them in master. I'm trying to figure out how to move their commits from master into TheOutsourcedBranch, without losing the work they've done (although from the looks of it, we're going to have to throw it away anyway).\n\nOrange dots are their commits, gray dots are mine.\nI know there are a zillion questions about rebasing (and that might be what I need to do here) but I'm having a hard time figuring out which of them apply to my specific case. And in case it matters, the outsourcing group and myself are the only people that are really using the repo right now.\nThanks in advance!\n\nEdit:\nI may have found what I'm looking for: Move the most recent commit(s) to a new branch with Git\nI'd like to check my understanding, though. Locally, I create a branch off of master (TheOutsourcedBranch), which would contain everything A-H. Then I reset master back to C. Master would now contain A-C.\nAssuming that is correct, that would be fine for me (locally). But then what do I need to do to \"force\" the remote repository (GitHub) to accept my local view of how things played out and discard its version of the history?\nOnce this has played out I think I can re-work this question to make it more generic/informative and cut out some fluff--otherwise it's probably a good candidate for deletion, I would guess."}, {"role": "assistant", "content": "Getting the branch is easy:\ngit branch their-branch master\ngit reset --hard master $SHA1_OF_C\ngit push --force $SHARED_REPO_REMOTE\n\nThis will rewrite history; it creates a new branch that is equivalent to the current master branch named their-branch, then resets your local master to point to a random SHA1 (...or branch, or tag, or whatever), and finally forcibly updates the remote repository branch to match your local branch.\nThat delivers exactly the situation you want.\nCaveats: this will rewrite history, and can screw up anyone who has built off the old master.  Watch out for merge problems following.\nNo rebasing desired or required.\n(As an aside, I suggest you either give them a staging repository, or get them to use git send-email, or use GitHub pull requests, or otherwise prevent them pushing to master until they get it right.  Which, based on your summary, might be some time away.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Embed JavaScript in GitHub README.md\n\nI want to embed a tweet in a GitHub README file. Markdown should support this, however when I add the code that is copied from the tweet the JavaScript doesn't get rendered.\nExample:\n<blockquote>...</blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nAny ideas?"}, {"role": "assistant", "content": "Allowing javascript from third parties directly on a website has huge XSS attacks implications. Someone could use javascript code for example to grab the cookies associated to any visitor's github accounts and forward them to a malicious entity.\nThere's also the nuisance potential, as having access to javascript means having access to the CPU of the visitor and being able to do things like pop-ups or blinking text.\nAs such it's natural that javascript isn't supported in READMEs. Markdown may have a way of doing it, but it'll never be allowed on a website like GitHub.\nHowever, you can do it on your project's github page, if you have one, since it doesn't belong to the main github website and the domain is not the same."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Continue working on a Git branch after making a pull request\n\nI've found myself in this situation a couple of times lately, and I'm not totally sure how best to handle it.\nSo I have a fork of a git repository that I'm contributing to. I keep my master branch synced with the upstream master branch.\nWhen I want to work on a new feature, bugfix, etc, I create a branch from my master and do any work. When I'm done, I merge in any changes that have been made to upstream master in the meantime, and then send a pull request from my feature/bugfix branch to the upstream master.\nNow, while I'm waiting for that pull request to be accepted, I want to work on something slightly different. However, the new feature work needs the bugfix/new feature that I just sent the pull request for. I need to build on it.\nHow do I branch/merge/handle branches in such a way that I can work on the continuation, while still being able to merge/pull request in my changes in a clean way once the first pull request is accepted into master?\nThis is all using Github, although I imagine the answer would be applicable to Git in general."}, {"role": "assistant", "content": "Create a new branch feature2 based on the last commit to feature1. feature1 will not move forward any more, and can be merged.\nfeature2 can then be merged later (some people would argue to rebase feature2 on the commit where feature1 was merged into upstream, but personally i dislike rebasing)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Still requiring login after SSH authentication\n\nI followed everything in the GitHub tutorial: https://help.github.com/articles/generating-ssh-keys\nI did all the commands in the directory of my repository.\nI reached the end of tutorial successfully and got the message: \"Hi username! You've successfully authenticated, but GitHub does not # provide shell access.\"\nHowever when I tried to do things such as push it still requested for my username and password."}, {"role": "assistant", "content": "Check your remotes via git remote -v. \nhttps:// URLs will always ask for a password, unless you configure a credential helper. More info on that in this question.\nThe simplest solution for password-less git access would be to use the git remote set-url command and set an SSH url for the existing repo.\nIn your case, git remote set-url origin [email\u00a0protected]:name/repo.\nThen you should be able to git push origin <branch> without being asked for a password."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error, need to remove large file\n\nI am getting this error when I try to push to git and I have no idea how to fix it.\nCounting objects: 1239, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (1062/1062), done.\nWriting objects: 100% (1239/1239), 26.49 MiB | 679.00 KiB/s, done.\nTotal 1239 (delta 128), reused 0 (delta 0)\nremote: warning: File log/development.log is 98.59 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\nremote: error: Trace: efd2d13efa4a231e3216dad097ec25d6\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: File log/development.log is 108.86 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 108.74 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 108.56 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 106.58 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 103.70 MB; this exceeds GitHub's file size limit of 100.00 MB\nTo [email\u00a0protected]:myUsername/myRepo.git\n! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to '[email\u00a0protected]:myUsername/myRepo.git'\n\nI'm guessing I need to remove the large file from the commit, but how do I do that?"}, {"role": "assistant", "content": "To remove large files, GitHub suggests:\n$ git rm --cached giant_file\n# Stage our giant file for removal, but leave it on disk\n\ngit commit --amend -CHEAD\n# Amend the previous commit with your change\n# Simply making a new commit won't work, as you need\n# to remove the file from the unpushed history as well\n\ngit push\n# Push our rewritten, smaller commit\n\nOr if you want more general information on how to work with large files on GitHub.\nAnd next time add /log in your .gitignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install development version of R packages github repository\n\nHow can I install a package that is under development directly from a github repository and once installed how can I switch between development and CRAN versions?\nThe specific package I am interested in installing from git is ggplot2."}, {"role": "assistant", "content": "via Hadley at https://github.com/hadley/ggplot2\n\ninstall.packages(\"devtools\")\n\nlibrary(devtools)\n\ndev_mode(on=T)\n\ninstall_github(\"hadley/ggplot2\")\n\n# use dev ggplot2 now\n\n# when finished do:\n\ndev_mode(on=F)  #and you are back to having stable ggplot2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Transfer gist repo to github\n\nI am working on a small project with gist and since it is growing I would like to put it on github. \nLet's suppose that:\n\nmy gist repo is at: https://gist.github.com/1234\nmy new (empty) repo is at: https://github.com/ChrisJamesC/myNewProject\n\nThe ideal solution would be one that pushes my changes on both the gist and the github repository."}, {"role": "assistant", "content": "You can add the github repository as a remote to your checked out gist repository.\ngit clone [email\u00a0protected]:1234.git\ngit remote add github [email\u00a0protected]:ChrisJamesC/myNewProject.git\n\nPush it to initialize the git on github\ngit push -u github master\n\n\nIf your github repo wasn't quite empty (you created it with a README, license, etc. which you don't mind losing) you will have to do a force overwrite on your push\ngit push -f -u github master\n\nIf you don't want to lose the exiting commits and files, see https://stackoverflow.com/a/40408059/117471\n\nThis will also change the upstream of the branch, so github will be default.\nYou now can rename the remote of gist:\ngit remote rename origin gist\n\nEach time you make changes (or pull changes from github/gist), you can do:\ngit push                 # To github\ngit push gist master     # To gist\n\nThis will also push back your changes to the gist and not only the github repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub pages only showing ReadMe file?\n\nI'm trying to host my webpages into Github pages but for some reason it seems to only show my Readme file.\nGitHub repo: https://github.com/InquisitiveDev2016/InquisitiveDev2016.github.io\nWebsite: \nhttps://inquisitivedev2016.github.io/"}, {"role": "assistant", "content": "GitHub Pages is doing what it is designed to do: hosting the contents of that repository.\nThe root of the question asker's repository only contained a single file (README.md). So there isn't an easy way to navigate to the other pages, e.g. repo/website/webpage.html.\nConsider moving your web content into the root of your repository and renaming your default page to index.md or index.html, depending what type of file it is. (By convention the default page of most websites is called index.html, and this is what GitHub Pages will show by default if it exists.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to update my fork to have the same branches and tags as the original repository on github?\n\nWhen you fork a repository on github your forked repo contains all branches and tags.\nOver time these branches and tags gets outdated.\nHow does one as easy it is with fork make sure your fork has all branches and tags without having to reclone ?\ni.e. a git magicpull --rebase upstream/* myremote/*\nwhich would fetch all the branches and tags in upstream and make sure the same are present in myremote."}, {"role": "assistant", "content": "This assumes your \"upstream\" remote is named \"origin\" and you have your custom fork under your username (i.e. \"maxandersen\")\nWhen you have your clone run the following one-liner (refresh of Track all remote git branches as local branches :\nremote=origin ; for brname in `git branch -r | grep origin | grep -v master | grep -v HEAD | sed -e 's/^[^\\/]*\\///'`; do git branch --track $brname  $remote/$brname ; done\n\nThis will setup tracking branches for all the branches found in the remote named 'origin'.\nIf you already have a checkout with this branchname it will not change anything except ensure the tracking is in place.\n(Optional) Now ensure all your branches are uptodate (useful if you have already branches checked out):\ngit pull --rebase --all\n\nNow with all branches setup for tracking and uptodate push branches and tags to your remote (replace 'maxandersen' with your remote name):\ngit push --all maxandersen\ngit push --tags maxandersen\n\nAfter this your fork is in sync.\nThe following script does all this including asking for confirmation:\n## Checkout all branches from remote as tracking branches. Based on    https://stackoverflow.com/questions/379081/track-all-remote-git-branches-as-local-branches/6300386#6300386\n\nUPSTREAM=$1\nMYREPO=$2\n\nusage() {\n   echo \"Usage:\"\n   echo \"$0 <upstream-remote> <target-remote>\"\n   echo \"\"\n   echo \"Example which ensures remote named 'maxandersen' have all the same branches and tags as 'origin'\"\n   echo \"$0 origin maxandersen\"\n   exit 1\n}\n\nif [ -z \"$UPSTREAM\" ]\nthen\n echo Missing upstream remote name.\n usage\nfi\n\nif [ -z \"$MYREPO\" ]\nthen\n echo Missing target remote name. \n usage\nfi\n\nread -p \"1. This will setup '$MYREPO' to track all branches in '$UPSTREAM' - Are you sure ?\" -n 1 -r\n\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n for brname in `git branch -r | grep \"$UPSTREAM\" | grep -v master | grep -v HEAD | sed -e 's/.*\\///g'`; do git branch --track $brname  $UPSTREAM/$brname ; done\nfi\n\nread -p \"2. This will push all local branches and tags into '$MYREPO' - Are you sure ?\" -n 1 -r\n\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n git push --all $MYREPO\n git push --tags $MYREPO\nfi\n\nSave it as 'updateallbranchestags.sh' and execute it with:\nsh updateallbranches.sh origin maxandersen\n\nAnd all branches/tags from 'origin' will be made available in remote named 'maxandersen'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to escape the (hash) # sign in a GitHub markdown header? (backslash is not working)\n\nI have the following code on a README.md file on GitHub, where I am trying to display the hash sign on a header (I am trying to escape it using the \\ symbol) like so:\n### C\\#\n* [Beginning Game Programming with C#](https://www.coursera.org/course/gameprogramming)\n\nHowever it renders like so:\n\nI obviously want the hash sign to appear on the header, and I also tried to use a double backslash, but it didn't work. How do I get the pound sign to appear?\nEDIT: the linked question deals with GitHub links, my question is to do with headers on a .md file."}, {"role": "assistant", "content": "You could try and add a matching '#', followed by one extra '#':\n### C# #"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does UserA committed with UserB 13 days ago on github mean?\n\nI am interested in knowing which one of the two users made the file changes when github lists both. The git record contains only UserA however."}, {"role": "assistant", "content": "UserA is the one who actually made the changes. UserB is the one who committed those changes to this branch. i.e if UserA commits his changes to branch1, UserB comes, commits a couple changes to branch2, rebases branch1 with branch2. Now, topmost commits in branch1 will show that UserA has committed these changes with UserB. \nEdit: This mainly happens during rebasing and cherry-picking, since authors and committers can be different in these processes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I commit .gitignore file? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nShould you commit .gitignore into the Git repos?\n\n                                (6 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nAfter reading  proper section of GitHub Help I got completely lost. It says:\n\nThis file can be committed into the repository, thus sharing the rule list with any other users that clone the repository.\n\nUp until now, people I've been talking to about Git were telling me that \".gitingore file must be committed or else its rules won't work!\"\nEvery Git begginer's question: \"Why .gitignore rules are not applied?\"\nCould be answered with a simple: \"Did you commit it?\".\nAnd now, here comes the GitHub Help saying, that this file can be commited, but it isn't necessary"}, {"role": "assistant", "content": "Yes, you can track the .gitignore file, but you do not have to.\nThe main reason of having this file into repository is to have everyone working on the project, ignoring same files and folders.\nAlso see this: Should you commit .gitignore into the Git repos?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Prevent git from asking for the GnuPG password during signing a commit\n\nGit always asks me to enter a passphrase to unlock my secret key while signing a commit using.\ngit commit -S -m 'message'\n\nHow can I store in cache the password so that I don't have to enter it each and every time while signing the commit"}, {"role": "assistant", "content": "Git never gets hold of the GnuPG passphrase. You must rely on GnuPG's capabilities of caching passphrases, which happens through gpg-agent which are easily set up by editing ~/.gnupg/gpg-agent.conf (hidden somewhere in your AppData folder in Windows).\nSet default-cache-ttl to the number of seconds the passphrase is cached after each invocation of GnuPG. maximum-cache-ttl sets the time after the passphrase was initially entered at which the cache is wiped. Make sure ignore-cache-for-signing is not set -- otherwise GnuPG will ignore the cache for signing operations.\nIf you want to sign commits without any user interaction, you can prefill the cache through gpg-preset-passphrase, often hidden somewhere in a location like /usr/lib/gnupg2/gpg-preset-passphrase; or by running an arbitrary decryption or signing operation. You might also configure git to use an option like --passphrase [your passphrase] to be passed to gpg, but read up on the restrictions and security implications of this approach (it involves your passphrase being stored in plaintext somewhere).\nFull list of options is here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are pull requests part of Git, or a feature of tools like GitHub, Gerrit and Atlassian Stash?\n\nPull requests seem to be the common way to do code review with Git. However, it is not clear whether this term means the same when using the built-in git request-pull, or a different tool.\nAre pull requests an intrinsic function of Git, or is it a common term for tools like GitHub, Gerrit or Atlassian Stash?\nIs the discussion and \"result\" of the code review stored in the Git commit history or in a separate database?"}, {"role": "assistant", "content": "Pull requests are a simple concept that originated when Git was created but has been taken to different levels since.\nThe essence is that you do not have push rights to the repository you want to contribute on, so instead you fork the repository, making your private copy (a clone already does this btw.) and you contribute to that one instead. And then you ask a maintainer of the original repository to pull in your changes. So you are essentially submitting a patch.\nNow as I said, there are different ways to do this, but it all boils down to requesting a maintainer to pull in your changes, hence the name. The original purpose Git was created for is the Linux kernel, and they have been developing using mailing lists forever. So for them, a pull request is actually sending a patch per email; those patches are actually commit objects prepended by some normal email communication stuff\u2014Git has tools to generate this.\ngit request-pull is a similar tool to generate a message asking for a pull request. But in this case, it\u2019s closer to the pull idea. While patches can just be applied, requests created by request-pull actually tell the maintainer to pull the changes from a different remote repository.\nThe Git book has this example:\n$ git request-pull origin/master myfork\nThe following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:\n  John Smith (1):\n        added a new function\n\nare available in the git repository at:\n\n  git://githost/simplegit.git featureA\n\nJessica Smith (2):\n      add limit to log function\n      change log output to 30 from 25\n\n lib/simplegit.rb |   10 +++++++++-\n 1 files changed, 9 insertions(+), 1 deletions(-)\n\nSo it\u2019s really just a utility to generate messages to execute the underlying concept.\nOther source code hosters like GitHub do this similarly as well. When you create a pull request on GitHub, you just create an issue which contains further information where the commits are the maintainer can pull. Of course, it all being on a single website, they can interlink everything a bit more and provide those one-click merge buttons for example.\nBut the basic concept is still the same: Requesting a maintainer to pull in some changes you have made. The only difference is the way this request is communicated with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git clone hangs forever on github\n\nWhen I follow point 5 (Test everything out) in the github guide, the ssh command also hangs forever. According to the guide, I should be presented with a message that \"Github does not provide shell access\". Below is my output from ssh -vT [email\u00a0protected]\ndebug1: Authentication succeeded (publickey).\nAuthenticated to github.com ([207.97.227.239]:22).\ndebug1: channel 0: new [client-session]\ndebug1: Requesting [email\u00a0protected]\ndebug1: Entering interactive session.\ndebug1: Sending environment.\ndebug1: Sending env LC_MESSAGES = en_US.UTF-8\ndebug1: Sending env LC_COLLATE = en_US.UTF-8\ndebug1: Sending env LANG = da_DK.UTF-8\ndebug1: Sending env LC_CTYPE = en_US.UTF-8"}, {"role": "assistant", "content": "In my case port 22 was being blocked by a firewall, cloning via https may not work if you have 2-factor authentication enabled. Instead edit your .ssh config to use another port. In your terminal:\nnano ~/.ssh/config\n\nthen add this:\nHost github.com\n  Hostname ssh.github.com\n  Port 443"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - error: failed to push some refs to '[email\u00a0protected]:myrepo.git'\n\nI ran these commands below:\ngit add .\n\ngit commit -m 't'\n\nThen, when running the command below:\ngit push origin development\n\nI got the error below:\nTo [email\u00a0protected]:myrepo.git\n ! [rejected]        development -> development (non-fast-forward)\nerror: failed to push some refs to '[email\u00a0protected]:myrepo.git'\nTo prevent you from losing history, non-fast-forward updates were rejected\nMerge the remote changes (e.g. 'git pull') before pushing again.  See the\n'Note about fast-forwards' section of 'git push --help' for details.\n\nAre there any ways to solve the error above?"}, {"role": "assistant", "content": "Your origin repository is ahead of your local repository. You'll need to pull down changes from the origin repository as follows before you can push. This can be executed between your commit and push.\ngit pull origin development\n\ndevelopment refers to the branch you want to pull from.\nIf you want to pull from master branch then type this one.\ngit pull origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git author Unknown\n\nmy author name in all my commits is coming up as unknown https://github.com/freeenergy/Teacher-Login-Validation-Module\ndid this\n$ git config --global user.name \"Firstname Lastname\"Sets the name of the user for all git instances on the system\n$ git config --global user.email \"[email\u00a0protected]\"\n\nbut still the author/committer name shows [unknown]\nnot knowing what I was doing I experimented with  setting $ GIT_AUTHOR_NAME=\"my name\" and it changed my name to my username [freeenergy] (I.E. my issue was fixed.)  But when I switched back to my other computer the issue was the same.\nmy config file now looks like this but is still committing as [unknown]\n[core]\n    repositoryformatversion = 0\n    filemode = false\n    bare = false\n    logallrefupdates = true\n    symlinks = false\n    ignorecase = true\n    hideDotFiles = dotGitOnly\n[remote \"origin\"]\n    url = [email\u00a0protected]:freeenergy/my-project.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[user]\n    name = my name\n    email = myEmail.com"}, {"role": "assistant", "content": "Even better than running git config, you can edit your ~/.gitconfig file directly.  Look and see if there's a section for [user] with the relevant information.  For example, my ~/.gitconfig has this...\n[user]\n    name = Bob Gilmore\n    email = [email\u00a0protected]\n\n(There's no space in front of the [user], and single tabs in front of the name and email labels)\nIf it doesn't have those set properly, just go ahead and edit the .gitconfig file by hand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get all file names from a Github repo through the Github API\n\nIs it possible to get all the file names from repository using the GitHub API?\nI'm currently trying to tinker this using PyGithub, but I'm totally ok with manually doing the request as long as it works.\nMy algorithm so far is:\n\nGet the user repo names\nGet the user repo that matches a certain description\n??? get repo file names?"}, {"role": "assistant", "content": "You can use Github git trees\nhttps://api.github.com/repos/[USER]/[REPO]/git/trees/[BRANCH]?recursive=1\nRepo\nhttps://github.com/deeja/bing-maps-loader\nApi Call\nhttps://api.github.com/repos/deeja/bing-maps-loader/git/trees/master?recursive=1\nwhich returns\n{\nsha: \"55382e87889ccb4c173bc99a42cc738358fc253a\",\nurl: \"https://api.github.com/repos/deeja/bing-maps-loader/git/trees/55382e87889ccb4c173bc99a42cc738358fc253a\",\ntree: [\n{\npath: \"README.md\",\nmode: \"100644\",\ntype: \"blob\",\nsha: \"41ceefc1262bb80a25529342ee3ec2ec7add7063\",\nsize: 3196,\nurl: \"https://api.github.com/repos/deeja/bing-maps-loader/git/blobs/41ceefc1262bb80a25529342ee3ec2ec7add7063\"\n},\n{\npath: \"index.js\",\nmode: \"100644\",\ntype: \"blob\",\nsha: \"a81c94f70d1ca2a0df02bae36eb2aa920c7fb20e\",\nsize: 1581,\nurl: \"https://api.github.com/repos/deeja/bing-maps-loader/git/blobs/a81c94f70d1ca2a0df02bae36eb2aa920c7fb20e\"\n},\n{\npath: \"package.json\",\nmode: \"100644\",\ntype: \"blob\",\nsha: \"45f24dcb7a457b14fede4cb907e957600882b340\",\nsize: 595,\nurl: \"https://api.github.com/repos/deeja/bing-maps-loader/git/blobs/45f24dcb7a457b14fede4cb907e957600882b340\"\n}\n],\ntruncated: false\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github API - create branch?\n\nSeems like it's missing from the \"Repos\" docs for v1, v2, and v3...how do I create a branch using the Github API?"}, {"role": "assistant", "content": "The V3 API mentions branches in its reference page\n\nThe ref in the URL must be formatted as heads/branch, not just branch.\nFor example, the call to get the data for a branch named sc/featureA would be:\n\nGET /repos/:user/:repo/git/refs/heads/sc/featureA\n\nCreate a Reference\nPOST /repos/:user/:repo/git/refs\n\nParameters\nref\n\n\nString of the name of the fully qualified reference (ie: refs/heads/master). If it doesn\u2019t start with \u2018refs\u2019 and have at least two slashes, it will be rejected.\n\nsha\n\n\nString of the SHA1 value to set this reference to\n\nSo it should be possible to create a new branch, by naming a new '/heads' in the ref parameter.\n\nPotherca points out to a working test, using the service of www.hurl.it (which makes HTTP requests)\n\n\nFind the revision you want to branch from.\nEither on Github itself or by doing a GET request from Hurl:\nhttps://api.github.com/repos/<AUTHOR>/<REPO>/git/refs/heads\n\nCopy the revision hash\n\nDo a POST request from Hurl to https://api.github.com/repos/<AUTHOR>/<REPO>/git/refs with the following as the POST body :\n  {\n      \"ref\": \"refs/heads/<NEW-BRANCH-NAME>\",\n      \"sha\": \"<HASH-TO-BRANCH-FROM>\"\n  }\n\n(obviously replacing the <NEW-BRANCH-NAME> with the name your want the new branch to have and the <HASH-TO-BRANCH-FROM> with, you know, the hash of the revision you want to branch from)\nYou will need to use HTTP basic and fill in your Github credentials to access the Github API.\n\nPress the Send button and your branch will be created!\n\n\n\n\nIn 2022, you can also use gh api\ngh api \\\n  --method POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  /repos/OWNER/REPO/git/refs \\\n  -f ref='refs/heads/featureA'\n -f sha='aa218f56b14c9653891f9e74264a383fa43fefbd'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically closing issue from pull request in GitHub\n\nHow do I close an issue using a pull request on GitHub? I know about closing multiple issues with a commit message, but it's a different case.\nI would like to close the issues not from a commit, but from the description of the pull request. More like \nPull request:\nName: bla bla\nDescription ... , _fixes_ #123\n\nAnd when merging the pull request, the #123 to automatically close. Is this possible?"}, {"role": "assistant", "content": "As you mention in the comments,  the merge from the pull request will result in a commit.\nIt is on that commit message you can add a \"close #xx\" in order to trigger the closing of an issue.\nHowever, as mentioned in \"Closing multiple issues in Github with a commit message\", in GitHub blog post \"Closing Issues via Commit Messages\" (January 2013), and in the current GitHub docs.\n\nNow when you enter \"Fixes #33\" in a commit message, issue 33 will only be closed once the commit is merged into your default branch (usually master).\nThis is super useful because it means the issue's open / closed status will map to your default branch.\nIf the bug isn't fixed in your default branch, the issue will remain open.\nOnce the commit with the fix is merged into your default branch the issue will be automatically closed.\nWhen you do make a commit in a non-default branch with the \"Fixes #33\" syntax, the issue will be referenced with a tooltip:\n\nYou can use any of these keywords to close an issue via commit message:\nclose, closes, closed, fix, fixes, fixed, resolve, resolves, resolved\n\n\n\nAs mentioned below by cosmolev (upvoted), the blog post from May 14th 2013 \"Closing Issues via Pull Requests\" adds pull requests as a way to close an issue:\n\nsome issues take more work than a single commit to close.\nThat's why you can now close an issue from a Pull Request.\nAll you have to do is include the special keyword syntax (eg. \"fixes #5\") in the body of your Pull Request.\n\nthe referenced issue will automatically be closed when the PR is merged into the default branch.\nIt even works across repositories.\n\nAs John Eikenberry points out in the comments, the help page \"Closing issues using keywords\" does mention:\n\nTo close multiple issues, preface each issue reference with one of the above keywords.\nYou must use the keyword before each issue you reference for the keyword to work.\n\nFor example, This closes #34, closes #23, and closes example_user/example_repo#42 would close issues #34 and #23 in the same repository, and issue #42 in the \"example_user/example_repo\" repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I push to a pull request on github?\n\nI've added this to my .git/config file:\nfetch = +refs/pull/*/head:refs/remotes/origin/pr/*\n\nWhich allows me to pull down pull request diffs, but when I check it out it actually creates a branch with that same name. Is there any way for me to push to pr/2 and have it actually go to the pull request instead of going to a new branch named pr/2?"}, {"role": "assistant", "content": "Here are GitHub's \"Merging via command line\" instructions for pull requests (I am fulldecent, the other guy is ospr):\nStep 1: From your project repository, check out a new branch and test the changes.\ngit checkout -b ospr-image-rendering master\ngit pull https://github.com/ospr/FDWaveformView.git ospr-image-rendering\n\nStep 2: Merge the changes and update on GitHub.\ngit checkout master\ngit merge --no-ff ospr-image-rendering\ngit push origin master\n\n\nHere is the additional step that sends your changes back upstream(?) to the PR originator.\ngit push https://github.com/ospr/FDWaveformView.git ospr-image-rendering:image-rendering"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between GitHub Flow and GitLab Flow?\n\nRecently I've found three concepts of a workflow in Git:\n\nGitFlow\nGitHub Flow\nGitLab Flow\n\nI've read the nice articles about it but I don't understand GitLab Flow very well.\nBriefly.\nGitFlow\n\nWe've a master branch as a production branch. Also we have a develop branch where every developer merges his features. Sometimes we create a release branch to deploy our features in production. If we have a bug in the release branch, fix it and pull changes into the develop branch. If we have a critical bug in production, create new hotfix-branch, fix the bug and merge branch with production (master) and develop branches.\nThis approach works well if we seldom publish results of our work. (Maybe once every 2 weeks).\nGitHub Flow\n\nWe have a master branch as a production branch. And we (as developers) can  create branches for adding new features or fixing bugs and merge them with production (master) branch. It sounds very simple. This approach fits for extreme programming where the production branch is deployed several times in a day.\nGitLab Flow\n\n\n\nI've seen new terms like a pre-production, a production, a release (stable) branch and a staging environment, a pre-production environment, a production environment. What relationships do they have between them?\nI understand it this way: If we need to add a new feature we deploy a pre-production branch from the master branch. When we have finished the feature, we deploy a production branch from the pre-production branch. A pre-production branch is the intermediate stage. And then the master branch pulls all changes from the production branch.\nThe approach is good if we want to see each separate feature; we just checkout in the branch what we need to look at.\nBut if we need to show our work we create a release branch with a tag as late as possible. If later we fix bugs in the master branch we need to cherry-pick them to the last release branch. At the end we have the release branch with tags that can help us to move between versions.\nIs my understanding correct?\nWhat is the difference between pull and cherry-pick?"}, {"role": "assistant", "content": "It has been a year now since this post was raised, but considering future readers and the fact things have changed a bit I think it's worth refreshing.\nGitHub Flow as originally depicted by Scott Chacon in 2011 assumed each change once reviewed on a feature branch and merged into master should be deployed to production immediately. While this worked at the time and conformed to the only GitHub Flow rule, which is anything in the master branch is deployable, it was quickly discovered that in order to keep master a true record of known working production code the actual deployment to production should happen from the feature branch before merging it into master. Deploying from the feature branch makes perfect sense as in the case of any issue production can be instantaneously reverted by deploying master to it. Please take a look at a short visual introduction to GitHub Flow.\nGitLab Flow is kind of an extension to GitHub Flow accompanied by a set of guidelines and best practices that aim to further standardize the process. Aside from promoting ready to deploy master branch and feature branches (same as GitHub Flow) it introduces three other kinds of branches:\n\nProduction branch\nEnvironment branches: uat, pre-production, production\nRelease branches: 1-5-stable, 1-6-stable\n\nI believe above names and examples are self-descriptive, thus I won't elaborate further."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install R package from private repo using devtools install_github?\n\nI am trying to install a sample package from my github repo:\nhttps://github.com/jpmarindiaz/samplepkg\nI can install it when the repo is public using any of the following commands through the R interpreter:\n\ninstall_github(\"jpmarindiaz/rdali\")\ninstall_github(\"rdali\",user=\"jpmarindiaz\")\ninstall_github(\"jpmarindiaz/rdali\",auth_user=\"jpmarindiaz\")\n\nBut when the git repository is private I get an Error:\nInstalling github repo samplepkg/master from jpmarindiaz\nDownloading samplepkg.zip from     \nhttps://github.com/jpmarindiaz/samplepkg/archive/master.zip\nError: client error: (406) Not Acceptable\n\nI haven't figured out how the authentication works when the repo is private, any hints?"}, {"role": "assistant", "content": "Have you tried setting a personal access token (PAT) and passing it along as the value of the auth_token argument of install_github()? \nSee ?install_github way down at the bottom (Package devtools version 1.5.0.99)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using someone else's repo as a Git Submodule on GitHub\n\nI am trying to find out if it is possible to use someone else's repository (or branch of a repository) as a Submodule in your own Git repository. Documentation on github itself is either missing, or I'm not using the right terminology to look for it. If this isn't the preferred way to go about including a public repository as a shared library within ones git project, suggestions as an alternative best practice would be appreciated."}, {"role": "assistant", "content": "Yes, you can add any repository as a submodule in your project.  Just do:\ngit submodule add git://github.com/whomsoever/whatever.git\n\n... in the top level of your repository.  This is indeed the easiest way with git to use some existing useful repository within your own.  For more information on submodules, you could look at:\n\nPro Git's section on submodules\nThe quite readable bit in the git manual\nThe section on submodules in the git community book\n\nUpdate: as jfountain points out below, if you want to add the submodule at a subdirectory path (or with a name different from the default) you can supply that as an additional parameter to that command, e.g.:\ngit submodule add git://github.com/whomsoever/whatever.git foo/bar"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull Request, ignore some file changes\n\nWhen I do a Pull Request on GitHub (against master branch), can we ignore some file changes, like\n\nwe have one file named 'fileA' in branch 'release', and we have the same file in 'master', but we do some changes in 'fileA' in branch 'release'\nwhen we do a Pull Request, is there any way we can ignore the changes in 'fileA', do not let that merge into 'master'."}, {"role": "assistant", "content": "You can't ignore some files from a pull request selectively.\nTwo workarounds for this can be -\nFirst -\n\nCreate a new branch from 'release'\nReplace the non-required files from 'master'\nCreate pull request from this new branch\n\nSecond -\n\nCreate a new branch from 'master'\nPut changes of required files from 'release'\nCreate pull request from this new branch\n\nAny of this method will work. Which will be easier depends upon how many files are to be included / excluded."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub access token with read-only access to private repositories\n\nI have a project with a Node dependency on a private Git repository. I need to be able to run npm install without being prompted to enter a password or allow an SSH connection, so I'm using an access token that I created on GitHub in my package.json:\n  \"dependencies\": {\n    \"sass-theme\": \"git+https://[token]:[email\u00a0protected]/MyOrg/sass-theme.git#v1.0.2\",\n    \"node-sass\": \"^4.5.0\"\n  }\n\nThis project is shared with dozens of other people, so obviously I don't want to keep my token in source control. I know I can create a read-only deployment key on GitHub, but I believe that would require other developers to import the SSH key to build the project locally.\nIs it possible to create an access token that can be shared but that has read-only access to clone the repository?"}, {"role": "assistant", "content": "The most straightforward way I can think of to create a token that provides read-only access to a private repo is to:\n\nHave a user who has read-only access to the given private repo\n(and ideally, not much else)\nAs that user create a Personal Access Token with the \"repo\" scope\n\nIt would be best if they didn't have access to other orgs/repos, since the \"repo\" scope grants the user total control over any repos that user has write access to.\nI know in an Enterprise solution we would do that with a System ID, but on GitHub you can instead create a Machine User."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I connect github to JIRA?\n\nI've been trying to find a way to update JIRA when I commit to github.\nIt doesn't look like there are any service hooks to do it at github, but you never know, someone might have a ninja way, so I thought I'd ask."}, {"role": "assistant", "content": "UPDATE\nFor integrating with Bitbucket, check out the following link:\nLinking Bitbucket and GitHub accounts to JIRA\nORIGINAL POST\nJIRA GitHub Connector is deprecated:\n\nThis plugin has been superseded by the JIRA DVCS Connector, which includes GitHub functionality.\n\nSo to connect Jira to github use JIRA DVCS Connector for Bitbucket and GitHub:\n\nYou can connect Bitbucket or GitHub accounts with JIRA using the free JIRA DVCS Connector plugin. This plugin comes with JIRA OnDemand.   For JIRA download users, this is a system plugin that you can install. Using the DVCS connector, you can:\n\nLink all or a subset of your existing repositories (both public and private to JIRA).\nCreate new repositories and have them link automatically to JIRA.\nReference JIRA issues from DVCS commit message and have those commits appear in the issue's Commits tab in JIRA.\nTransition issues through a JIRA OnDemand workflow (for example, Close, Reopen, and so forth)  using smart commit messages.\n\n\ncheck out Using the JIRA DVCS Connector Plugin for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to have npm install a typescript dependency from a GitHub url?\n\nConsider the following scenario:\n\nThere is a code library.  The library is written in TypeScript and the typescript code is published in GitHub.  The package.json file has a build script which creates JavaScript files based on the TypeScript code and a publish script which then places the resulting JS files on npm.\nI make a fork of the GitHub repo, make some modifications to the typescript files and push those changes to GitHub.  (I also open a PR to the original GitHub repo but there is a time lage before these changes can be merged.)\nI wish to consume these code changes in a downstream NPM package so in the downstream packages I change the reference (in the downstream's package.json file) to the modified package to the GitHub URL of my fork and do an npm install.\n\nThis doesn't work because:\n\nThe package.json file of the modified package does not list the typescript files in the dist field, only the automatically generated JS files so the TypeScript files are not pulled during the npm install.\nThe compiled JS files aren't present since they aren't checked in to GitHub.\n\nHow can I solve this? Is there a way that I can modify the behavoir of npm install so that it fetches files in the repo that aren't in dist and then runs the build script during the install?"}, {"role": "assistant", "content": "I had the same problem. Saw a lot of articles about monorepos (links below), but not much about how to split a TypeScript project into separate repositories. \nIn short, you need to build JS files at one step or the other.\nSee https://github.com/stared/yarn-adding-pure-typescript-package-example for a working code example.\nSo, there are a few solutions. Let's say that the repository is someuser/package-to-import\nPostinstall\nUsing yarn you can get the project directly from a GitHub repository:\nyarn add someuser/package-to-import#master\n\n(or the same with npm install someuser/package-to-import#master)\nIf you work on a fork of this repository, you can make your life easier by adding to package.json in package-to-import repo this part:\n  \"scripts\": {\n    ...,\n    \"postinstall\": \"tsc --outDir ./build\"\n  }\n\nNow it just works with yarn add/upgrade with no extra scripts.\nAlternatively, you can do it semi-manually, i.e. create a script in your main repository package.json\n  \"scripts\": {\n    ...,\n    \"upgrade-package-to-import\": \"yarn upgrade package-to-import && cd node_modules/package-to-import && yarn build\"\n  }\n\nLink\nThere is a different approach to clone the repository into a different folder, build the files, and link it.\ngit clone [email\u00a0protected]:someuser/package-to-import.git\ncd package-to-import\nnpm run build  # or any other instruction to build\nnpm link\n\nIf you use yarn, the two last lines would be:\nyarn build\nyarn link\n\nThen, enter the folder of your project and write\nnpm link package-to-import\n\nor in case of yarn\nyarn link package-to-import\n\nThese are symlinks, so when you pull from the repo and build files, you will use the updated version.\nSee also:\n\nnpm link andyarn link official documentations\nThe magic behind npm link\n\nMonorepos\nAn entirely different approach.\nWith mixed advice for using git submodules:\n\n4 Ways to Go Monorepo in 2019\n4 Git Submodules Alternatives You Should Know\nA (multi-) monorepo setup with Git Submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Eclipse + EGit: clone project into workspace\n\nI'm a little confused about how EGit workes.\nI have an existing git repository on Github and want to clone it into my workspace. \nMy goal is to have the local repository directly stored inside my workspace-folder but I don't get it working with EGit.\nWhen I want to clone the github repo with EGit, I have to choose a directory as destination. The suggested directory is in my homedir (not in my workspace). When I choose this directory I can see the project in Eclipse but it is not stored in my workspace-folder. Instead it is stored in my home dir. \nWhen I choose a directory directly inside my workspace, later when it comes to import the project it says that there is already a directory with this name. \nI don't know how to solve this. I thought this would be a common scenario. In the past I have used hgEclipse (Mercurial) and it was working exactly the way I thought it should be so I'm confused EGit doesn't. Maybe I misunderstood something.\nProbably this is important to know: In the github repository there are no .project or .settings files from eclipse. I have them on my .gitignore and so in the import-dialog I have to choose \"Import as General Project\" and not \"Import Existing Projects\". But I think this shouldn't matter?\nI hope someone can help me or explain me why the EGit plugin doesn't clone the repository directly into the workspace by default. \nMy Eclipseversion is 3.6, I have installed EGit over the markedplace."}, {"role": "assistant", "content": "As mentioned in this EGit tutorial, the destination directory you mention when importing (cloning) a Git repo is any directory you want, in which the .git will be created:\n\nYou don't have to select the workspace itself (at least, you should select the workspace/myproject subdirectory, in order to not make the all Eclipse workspace a Git repo.\nAnd you can select any other directory outside the workspace: the Eclipse workspace should only contain meta-data about Eclipse projects and settings.\nWhen declaring a new project, you will be able to select the project directory, making that directory the parent for .classpath and .project.\nYour workspace will list that new project, even though it lives outside the workspace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub search - how to exclude (logical NOT) company or user from search results\n\nIn this search query (test it live \u2197) I'm searching for:\n\nall pull requests \nby user limonte (me)\nfor the vaadin company\n\nHow can I search for all my pull requests except (logical NOT) those for vaadin company?\n\nThese two options I tried without success: \n\nis:pr author:limonte user:!vaadin\nis:pr author:limonte user:NOT vaadin"}, {"role": "assistant", "content": "Prefixing any search qualifier with a - excludes all results that are matched by that qualifier.\nFor example, you might be interested in finding all \"cats\" repositories with more than 10 stars that are not written in JavaScript:\ncats stars:>10 -language:javascript\n\nYou might also want to find all issues mentioning @defunkt that are not in repositories in the GitHub organization:\nmentions:defunkt -user:github\n\n\nThe answer for your question is:\n\nis:pr author:limonte -user:vaadin\n\n\nFor more refer the GitHub Search Syntax"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add private github repository as Composer dependency\n\nI have the following in my Laravel 5.1 projects composer.json to add a public github repository as a dependency.\n...    \n\"repositories\": [\n  {\n    \"type\": \"package\",\n    \"package\": {\n      \"name\": \"myVendorName/my_private_repo\",\n      \"version\": \"1.2.3\",\n      \"source\": {\n        \"type\" : \"git\",\n        \"url\" : \"git://github.com/myVendorName/my_private_repo.git\",\n        \"reference\" : \"master\"\n      },\n      \"dist\": {\n        \"url\": \"https://github.com/myVendorName/my_private_repo/archive/master.zip\",\n        \"type\": \"zip\"\n      }\n    }\n  }\n],\n\"require\": {\n     ....\n    \"myVendorName/my_private_repo\": \"*\",\n},\n...\n\nThis works as long as the repository is public. Now I've set this repository to private. The git credentials I use for pulling/pushing to 'my_private_repo' are the one of a colaborator of the project. How can I achieve that composer pulls from that private repository when I run composer update or composer install?"}, {"role": "assistant", "content": "Work with private repositories at GitHub and BitBucket:\nJSON\n{\n    \"require\": {\n        \"vendor/my-private-repo\": \"dev-master\"\n    },\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\":  \"[email\u00a0protected]:vendor/my-private-repo.git\"\n        }\n    ]\n}\n\nThe only requirement is the installation of SSH keys for a git client.\nDocs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: simplest way of squashing commits on master [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\nHow can I squash my last X commits together using git? \n\nI have a project hosted on GitHub and I have a local clone. I have a load of small commits that I have already pushed up to GitHub. This has all been done using the default *master branch.\nI got confused between merge --squash and rebase etc...\nWhat is the most straightforward way of combining several historial commits in to one commit so that it pushes up to GitHub?"}, {"role": "assistant", "content": "Before starting, you should make sure that git status is clean (i.e. there's no output from that command) to avoid losing work.  The simplest way to do what you want is probably:\ngit reset --soft <LAST-COMMIT-THAT'S-OK>\ngit commit -m 'Many squashed commits'\ngit push --force origin master\n\nYou should bear in mind that this is rewriting history (that's why you need the --force option to git push) so you should avoid this if anyone else might have cloned or pulled from your repository.  For some more alternatives, see this question and its answers:\n\nSquash my last X commits together using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to rename a repository on github? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\nChange repo name in github \n\nI got some github repos that i now need to rename, but i can't anywhere find a solution for this except deleting the repo and setting up a new one. I can't delete the repos, because there are a lot of links pointing to the current repos, which i don't want to loose. Anyone any idea on how to do this? (I already read a lot of the google results and searched the github support)."}, {"role": "assistant", "content": "I have changed the name of repositories before, and I'm doing it again right now ;-)\nEdit the name using the built-in feature under the \"Settings\" tab at the top of your GitHub repository page. Then go to your local repository and rename the remote. Like this:\n\nFirst remove it:\ngit remote rm origin\n\nthen add back the new name\ngit remote add origin [email\u00a0protected]:\"yourname\"/\"projectname\".git\n\n\nIf you have recent enough git version you should use set-url command:\n    git remote set-url origin [email\u00a0protected]:\"yourname\"/\"projectname\".git\n\nNow it should be good to go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory\n\nI was going to do a rebase to delete my last commit but I didn't want to finish so I exited. (I realize this probably was not the best way to go about it, but it's done) I guess I did it wrong because I am getting the error: fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory every time I run git status. How do I get rid of this error so I can continue making commits? Can I just delete the file? If I can delete it, how would I do that?"}, {"role": "assistant", "content": "Before you try the following, make sure you stash or commit any uncommitted changes first, or you will lose them irrevocably.\nThen try to do a git rebase --abort."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to use GitHub and GitLab on one machine?\n\nI have accounts in GitHub and GitLab. I generated and added an RSA key to my account in GitLab, but now I need to work with GitHub on a second project. \nI know that GitLab and GitHub both use git. Please tell me if it's possible to use GitHub and GitLab on one machine?"}, {"role": "assistant", "content": "Yes you can, you can share the same key between them both (ssh key) or create a new one per git server.\nCreate a SSH config file\n\nWhen you have multiple identity files(in your case one for gitlab and one for github) , create a SSH config file to store your various identities.\n\n\nThe format for the alias entries use in this example is:\n\n\nHost alias \n\n\n  HostName github.com \n  IdentityFile ~/.ssh/identity\n\n\nTo create a config file for two identities (workid and personalid), you would do the following:\n\nOpen a terminal window.\nEdit the ~/.ssh/config file. \n\nIf you don't have a config file, create one.\nAdd an alias for each identity combination for example:\nHost github\nHostName github.com \nIdentityFile ~/.ssh/github\n\nHost gitlab\nHostName gitlab.com \nIdentityFile ~/.ssh/gitlab\n\nThis way you can have as many accounts as you wish each one with a different ssh key attached to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to find out the users who have checked out my project on GitHub?\n\nI'm wondering if there is any way to know who has checked out my project hosted on GitHub? This would include people who have forked the project directly on GitHub, as well as people who may have cloned the repository using standard git clone commands."}, {"role": "assistant", "content": "If by \"checked out\" you mean people who have cloned your project, then no it is not possible. You don't even need to be a GitHub user to clone a repository, so it would be infeasible to track this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Including JavaScript files from GitHub into HTML pages\n\nPAY ATTENTION!\nYou can't include Github scripts directly from Github after this change.\nWe added the X-Content-Type-Options: nosniff header to our raw URL responses way back in 2011 as a first step in combating hotlinking. This has the effect of forcing the browser to treat content in accordance with the Content-Type header. That means that when we set Content-Type: text/plain for raw views of files, the browser will refuse to treat that file as JavaScript or CSS.\nBut there are alternatives. Check my answer to this question.\n\n\nI am trying to include a JavaScript file from GitHub into a local HTML file for testing (like an image found on the internet: <img src=\"http://...\">). \nI would like something like this:\n<script src=\"https://github.com/[username]/[repository]/blob/master/public/[fileName].js\"></script>\n\nThe problem is that this doesn't work.\nHow can I do this?"}, {"role": "assistant", "content": "https://rawgit.com has been shut down. This answer is unfortunately no longer relevant.\n\n\nYou will be able to do it with a URL similar to this:\n\nhttps://rawgit.com/h5bp/html5-boilerplate/master/src/js/plugins.js\n\nNote that this is not the same as clicking on the \"raw\" button within GitHub;\nthat button will also give you a clean version of the file, but it will be sent\nwith the wrong headers.\n\nA Word of warning; the file is not not being served from GitHub. It is being\nredirected through the rawgit.com domain. As is stated on https://rawgit.com:\n\nHey! rawgit.com is just for fun and is not associated with GitHub in any\nway.\n\nKeep in mind that the owner of that domain is now in control of the traffic and\nis able to manipulate it as they see fit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: how to fork after cloning?\n\nI cloned a git repo to my local machine, played around with it a bit and found it cool.\nNow I would like to keep the result as I modified it in my own github space. How can I proceed?\nI suppose the regular way would have been to fork the repo on the first place to my space, clone it, modify and then push it to GitHub, but now I cloned the original's author repo, how can I commit that as a new thing in my personnal?"}, {"role": "assistant", "content": "First rename the old remote as upstream, in case you want to be able to keep in sync with the original repository.\ngit remote rename origin upstream\n\nThen add your forked repository as origin:\ngit remote add origin https://github.com/<your-username>/<your-project>\n\nOr if you're using ssh:\ngit remote add origin [email\u00a0protected]:<your-username>/<your-project>.git\n\nTo push to your repository:\ngit push -u origin master\n\nTo pull from the base repository:\ngit pull upstream\n\nI recommend you do all of your work in a separate branch, not the master branch. It will be easier to rebase to the upstream/master branch in case you want to make a pull request.\nYou don't really have to rename the origin to upstream - the remote names can be arbitrary, however I recommended you to do so to keep up with the naming convention used by GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How safe is it to host sensitive data on repository sites like github, bitbucket, etc.? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow secure would github hosting be for private repositories? [closed]\n\n                                (4 answers)\n                            \n\nClosed 5 years ago.\n\n\n\nThis is just a question out of curiosity. I am wondering how safe it is generally considered to host sensitive data on repository websites like Github, Bitbucket, etc.? Is it safe enough to get rid of all code on local machines and just store it all on there? How about safety in the sense of keeping company secrets? I notice these sites tout big companies like Google and Yahoo use their services, but do these big companies actually store their trade secrets and important company code on websites like this?\nGithub has a page (http://help.github.com/security), which has some interesting information, that shows they are marketing it as something fool proof like I described. But in practice, do big companies like Google really find that their proprietary secrets and massive amounts of code are really safe from prying eyes and disastrous occurrences on sites like these?"}, {"role": "assistant", "content": "As always, it depends :-)\nThere can be two different meanings of \"safety\":\n\nCan I trust the hoster to keep my stuff (intellectual property, company secrets...) private?\nWhat happens to my code if the hoster suddenly goes out of service?\n\nFor 1., there is no 100% guarantee.\nOf course, the big hosters like GitHub and Bitbucket won't share your code intentionally with third parties, but there is always the possibility that some hacker manages to get the content of your private repositories.\n(this could happen to you as well if you host your code internally in your company, but this is unlikely, because unless your company is as known as, say, Google, the chance of someone trying to attack your company is much smaller than the chance of someone trying to attack a well-known public hoster).\nPlus, you have to consider the laws of the country where the hoster resides.\nA few weeks ago I read somewhere that if your hoster is in the USA, they can be forced by law to give your data to the US government under certain circumstances, and they are not even allowed to tell you about that (I don't remember the name of the law, but maybe someone else knows).\nI guess that all this causes most \"big\" companies to not host their code on a public service (my company is mid-sized, and we host our code private as well).\nBy the way, as you mentioned Google:\nI'm sure that especially Google does not use Bitbucket or GitHub. They have the complete infrastructure for project hosting themselves, so I guess they are using it internally, too. Why should they use an external service? It's in the cloud, yes...but it's their cloud.\nConcerning 2.: it's unlikely that GitHub or Bitbucket will go bankrupt tomorrow, but you never know.\nIMO it's your responsibility to take backups of your code yourself.\nThe nature of DVCS makes sure that you have some local copies of your code anyway, but it might be difficult to search lots of developer machines for the newest versions of all of your projects.\nI do this by pulling all my repositories to my local machine regularly (I wrote a tool that can do this for Bitbucket, which I use for my private projects)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github changes not staged for commit\n\nI have a very basic github setup with a readme, a directory, and another directory inside it with an html file. On github I can only view the readme and the first folder but none of its contents, and I am getting this message\ntc349 ryntc3$ git add *\ntc349 ryntc3$ git status\nOn branch master\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n(commit or discard the untracked or modified content in submodules) \n\nmodified:   week1 (modified content)\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nI feel like if I am adding all to be staged that it should not be an issue. Any help?"}, {"role": "assistant", "content": "Have you tried\ngit add .\n\nThis recurses into sub-directories, whereas I don't think * does.\nSee here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github windows: Commit failed: Failed to create a new commit\n\nI have: http://windows.github.com/\nMy current project has around 20k files, around 150MB (and not speaking about how slow it is and I cannot do a thing now) it doesn't even let me commit! I get this error:  Commit failed: Failed to create a new commit.\nThat seems that nobody is having.\nI've already deleted the folder and cloned again, no escape. What to do?\nIf I choose to open shell, all this *** crashes!\n\nEdit:\nSince the problem I've switched to Git Extensions and I didn't look back!\nthanks for your answers"}, {"role": "assistant", "content": "This happened to me.  Try opening up PowerShell and manually committing each file using the \"git add [file name]\" command.  To see which files have been added, enter \"git status\" into the command line. The green files have been added, the red ones have not been added.  \nOnce you've added them all, type \"git commit.\" Then go back to Github for Windows and sync it up.\nI'm not sure what causes this issue, but once I followed the above steps, Github went back to its normal, awesome behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Bash Command on Windows, yarn command not found\n\nI following this online tutorial on downloading and installing web files from GIT HUB. I got down to the topic: Starting Our Static Website, there I'm prompted to enter the commands to download and install the web files. However, when I enter the command yarn install, I get the following prompt: bash: yarn: command not found\nHow can this problem be resolved?\nI'm using GIT Bash command prompt on Windows 10."}, {"role": "assistant", "content": "If you are using Mintty (Bash) then you simply do npm install -g yarn"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to check the validity of a  remote git repository URL?\n\nWithin a bash script, what would be the simplest way to verify that a git URL points to a valid git repo and that the script has access to read from it?\nProtocols that should be supported are git@, https://, and git://. Curl fails on the git:// protocol.\n[email\u00a0protected]:UserName/Example.git\nhttps://[email\u00a0protected]/UserName/Example.git\ngit://github.com/UserName/Example.git\n\nNote: I'm not asking to check to see if a URL is syntactically correct, I need to verify that a repo exists at the URL location entered from within a bash script."}, {"role": "assistant", "content": "As seen in this issue, you can use git ls-remote to test your address.\n\nIf you need to debug the git calls set GIT_TRACE=1. eg:\n\nenv GIT_PROXY_COMMAND=myproxy.sh GIT_TRACE=1 git ls-remote https://...\n\n\n\"git ls-remote\" is the quickest way I know to test communications with a\nremote repository without actually cloning it. Hence its utility as a test for this\nissue.\n\nYou can see it used for detecting an address issue in \"git ls-remote returns 128 on any repo\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Effortless export from github wiki (?)\n\nI am collecting quite a lot of material in a GitHub wiki. I really like to use the wiki to cooperate with other people and IMHO the platform is really nice, I like it!\nSo, I would like to keep using the GH wiki to collect stuff, edit, save,etc but I also would like to export the content in order to create a pdf file that we can call \"a manual\".\nI would like to generate an updated version of the manual automatically everytime I want just running a couple of scripts, I can not put too much effort on this.\nI guess it is possible to export the content somehow and the use pandoc (http://johnmacfarlane.net/pandoc/) to create the pdf maybe adding an index and a style file.\nAnother interesting idea could be publish a website once a month dumping content directly from the wiki.\nI guess other people already did something like this but I did not find anynthing. \nAny idea?"}, {"role": "assistant", "content": "But... the Github wiki of a GitHub repo is a git repo in itself (introduced in August 2010).\nYou can clone it, push to it or pull from it.\n\nEach wiki is a Git repository, so you're able to push and pull them like anything else.\nEach wiki respects the same permissions as the source repository.\nJust add \".wiki\" to any repository name in the URL, and you're ready to go.\n\nOr, as noted by htafoya in the comments, replace the .git part of the URL (if present) by .wiki.\nThat makes the \"export\" part of your question really trivial.\nFrom there, you will find tons of script for converting markdown pages into pdf:\n\na graddle task\na makefile\na python script\n..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: A tag but not a release\n\nI want to tag a certain commit. When I push the tag, GitHub assumes it's a release, I don't want that.\nIs there a way to just push the tag without releasing?"}, {"role": "assistant", "content": "GitHub, by default, creates a \"release\" point when you push a tag (like you can see in my project), but that doesn't mean it creates an actual release.\nBy default, a tag has one deliverable associated to the tag, and that is the compressed sources of the repo.\nCreating a release means associating other deliverables (executables or other binaries) that you may wish to publish under that tag/release.\nBut you don't have to add any more files (other then the sources) if you don't want to.\nSo: by default, you don't have any release, only \"release placeholders\" (one per tag), for you to create a release.\nAs long as you don't upload a binary to a new release, the tags that you have pushed don't represent a release.\n\nUpdate\nAs of 2017-05-31, Github support has stated it's \"not currently possible as all tags will appear in [the release] list\" - they said they'd pass it along as a feature request, though.\n\n2018-04-17 A \"new request on Github community\" says it is in the feature request.\n\n2021-10-04: a new public beta of GitHub Releases states:\n\nTags no longer show in the Release list view"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically delete git branch after merge to master\n\nWe will be attempting a work flow in github where every ticket is a branch off of master.\nAfter the ticket is complete, the work is merged into staging where regression and integration tests are performed before it is merged into master.\nA team lead brought up the issue of the old ticket branches after a merge will start to build up. \nI found this script and want to know if this would work in our environment. We only want to delete branches that have been merged into master."}, {"role": "assistant", "content": "Github has released a feature where anyone with admin permission to the repository can configure branches to get deleted automatically after pull requests are merged. Here are the steps -\n\nNavigate to main page of the repository and click on Settings.\nUnder \"Merge button\", you can select or unselect \"Automatically delete head branches\" option.\n\nThis feature has been released by Github on July 31, 2019."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge from someone else's fork\n\nI have a repository on github, and someone else has forked it and made changes.\nI want to:\n\nCreate a new branch\nMerge their changes into my branch\n\nI have created the new branch:\ngit commit -b my_new_branch\n\nHow do I merge their code into this new branch? \nThis is the branch that I have created: https://github.com/poundifdef/VirginMobileMinutesChecker/tree/widget_toast\nThis is the branch that I want to merge:\nhttps://github.com/xbakesx/VirginMobileMinutesChecker\nWhat is the best way to do this? I've tried a \"pull\" and it won't work. I honestly have no idea what I'm doing in gitland, so if there is a better way to accomplish this (besides my creating a branch and trying to merge) then I am all ears!"}, {"role": "assistant", "content": "Add their github fork repo as a remote to a clone of your own repo:\ngit remote add other-guys-repo <url to other guys repo>\n\nGet their changes:\ngit fetch other-guys-repo\n\nCheckout the branch where you want to merge:\ngit checkout my_new_branch\n\nMerge their changes in (assuming they did their work on the master branch):\ngit merge other-guys-repo/master\n\nResolve conflicts, commit the resolutions and voila."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why can I not open my folder in GitHub?\n\nThe \"src\" folder in one of my repository is grayed out (and is not clickable):\n\nI took the following steps before pushing to the GitHub:\n\nI created a new repository on GitHub. \nI initialize dthe git on my project.\ngit add .\ngit commit -m \"comment\"\ngit remote add origin url\ngit push -u origin master\nusername\npassword\n\nThe \"src\" folder is showing up on GitHub but cannot be opened. What can I do?"}, {"role": "assistant", "content": "I solved the problem by deleting .git folder inside subfolders (Hidden files and folders). You should have only one .git in the root folder.\nGit recognized that folder as modified but untracked content. There are other solutions for this problem, look this thread: Git - how to track untracked content?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In Git how can you check which repo in Github you are pushing to from the command line?\n\nI have several projects I am working on. I am constantly pulling and pushing. Recently I made some changes to one of my files, added and committed and decided to push my project A, however it pushed into my Github Project B. I then did git pull for kicks and it this happened.\n\nbranch            master     -> FETCH_HEAD\nAlready up-to-date.\n\nIt did not pull none of my files from Project B. I then did git status and it showed every single file/folders in my directory as needing to be committed. How would I know which \"init\" I am on? How can I switch out of this state and how can I disregard these blind commits without losing my files?"}, {"role": "assistant", "content": "I think you need to reconfig git remote\ntype git remote -v and see if there's a mismatch or not.\nIf there is, follow this instruction from github: https://help.github.com/articles/changing-a-remote-s-url/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I change the language of a repository on GitHub?\n\nGitHub search allows filtering repositories by language. How can I set a repository to a specific language?"}, {"role": "assistant", "content": "You can also override certain files\n$ cat .gitattributes\n*.rb linguist-language=Java\n\nSource"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add emphasis github flavored markdown within code block\n\nIs it possible to bold a portion of text within a code block in a github readme?"}, {"role": "assistant", "content": "This answer on StackExchange Meta works on Github too: \nUse a <pre> tag (or <pre><code>) instead of ```, and use <b> tags around the part you want bold."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Use GitHub for Windows for both Bitbucket and GitHub\n\nIs it possible to use GitHub for Windows for both Bitbucket and GitHub at once? \nFor example, can I have repo on both sites show up in the program, and when I commit/synch a repo, it push to the respective repo on the respective website?"}, {"role": "assistant", "content": "No, if you mean: having a local repo with two remotes (one GitHub and one Bitbucket).\nYou can define only one remote with that client, and it will be either a GitHub one or a Bitbucket one.\n\nYes, if you limit to one remote, you can use GitHub for Windows with any upstream repo.  \nThe process of adding an upstream repo is now easier with the (constantly) updated GitHub for Windows app:\n\nselect the URL and then drag the text from your browser, and drop it into the GitHub for Windows app. It will automatically add the repository.\n\n\n\n(Original answer February 2013)\nIn order for \"GitHub for Windows\" to publish (instead of \"pushing to GitHub\"), you need to define a remote \"origin\" (in the settings of your local repo) using the https address of the Bitbucket repo:\nhttps://[email\u00a0protected]/user/repo\n\nSo if you create a local repo through \"GitHub for Windows\", you can add, through its settings, the right remote:\n\nNote that the first refresh will trigger a login screen, in order for you to enter your http credential you are using on bitbucket.org: they will be cached (and encrypted) by GitHub for Windows for the duration of your current session.\n\n(See \"Password Caching\" and \"git: 'credential-cache' is not a git command\",  for more on that credential caching mechanism, recently introduced with Git 1.7.9+)\nAny modification you are doing locally will be picked up by the GitHub for Windows client (you might need to exit the repo (left arrow in the top left corner of the GitHub for Windows client, and click again on your local Bitbucket repository: that will trigger a refresh):\n\nThe key in the next screenshot is in the word \"publish\" (instead of \"push to GitHub\").\nThat is because the remote \"origin\" is an https one.\n\nClick on \"publish\" and you will see your repo status set to \"in sync\":\n\nRush to bitbucket.org to check if, indeed GitHub for Windows did push to Bitbucket:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to solve git merge error \"Swap file .MERGE_MSG.swp already exists\"\n\nWhen I pull:\nE325: ATTENTION\nFound a swap file by the name \"~/Documents/Sites/recipegenerator/.git/.MERGE_MSG.swp\"\n          owned by: username   dated: Wed Dec 14 12:28:45 2016\n         file name: ~username/Documents/Sites/recipegenerator/.git/MERGE_MSG\n          modified: YES\n         user name: username   host name: Users-MacBook-Pro.local\n        process ID: 33747\nWhile opening file \"/Users/larsvanurk/Documents/Sites/recipegenerator/.git/MERGE_MSG\"\n             dated: Thu Dec 22 14:06:17 2016\n      NEWER than swap file!\n\n(1) Another program may be editing the same file.\n    If this is the case, be careful not to end up with two\n    different instances of the same file when making changes.\n    Quit, or continue with caution.\n\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r /Users/username/Documents/Sites/recipegenerator/.git/MERGE_MSG\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \"/Users/username/Documents/Sites/recipegenerator/.git/.MERGE_MSG.swp\"\n    to avoid this message.\n\nSwap file \"~/Documents/Sites/recipegenerator/.git/.MERGE_MSG.swp\" already exists!\n\nWhen I push:\nTo  https://github.com/nickname/recipegenerator.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'https://github.com/nickname/recipegenerator.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nPlease help :C Idk what to do. I can't push or pull. I tried pretty much everything I could think of. I also tried: git merge --abort. The thing is when I do that, I can't seem to find my conflict that I should resolve."}, {"role": "assistant", "content": "It's a message from VIM which apparently you are using as the text editor in git. Have you tried reading and following these two (1) (2) points? One of them will be probably true, and will let you solve this issue.\nFirst of all, check that MERGE_MSG file (not MERGE_MSG.swp), and see if it exists and what's inside. Most likely it's trash or a temporary file that can be safely deleted. Judging from the name, it's probably the file name used as a temporary text editing area for merge commit messages.\nThen, since you use VIM, when VIM starts, it tries to create a swap file for its own internal needs. The error message says it's ~/Documents/Sites/recipegenerator/.git/.MERGE_MSG.swp. Often, you can simply delete such swap files, especially if they are old or unexpected. However, if recently some merge-commit-message-editing session has crashed and if you had a lot of creative text you don't want to lose - then don't delete it and recover that swap instead, as described in (2) in the error message.\nHowever, since you don't know what is going on and you haven't said anything about losing some text you wrote, and since it's probably just a MERGE_MSG that was auto-generated anyways, I suppose you can:\ngit merge --abort\nrm ~/Documents/Sites/recipegenerator/.git/.MERGE_MSG.swp\n\nand try what you were doing once again.\nAlso, it's good to check the hint mentioned in (1) in error message. Check with ps or whatever else for any open VIM sessions that could be currently editing that MERGE_MSG. If you spot any, then, well, get to them and either finish editing, or make them quit (escape, :q!, enter) (vim will cleanup swaps on quitting), or terminate them (kill them, but then you need to remove swap files manually)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to make Github un-approve a pull request if a new commit is pushed to the branch?\n\nUsing the new pull request approval process in Github, if I approve a PR but then a dev pushes a new commit to that branch I'd want the PR to go back to the state it is in to start with (i.e. not approved).\nAt the moment it stays green but in reality there is code that hasn't been reviewed in the branch."}, {"role": "assistant", "content": "On GitHub, navigate to the main page of the repository.\nUnder your repository name, click Settings.\nIn the left menu, click Branches.\nSelect the branch you want to restrict using the drop-down menu.\nSelect Dismiss stale pull request approvals when new commits are pushed. \n\nThis dismisses a pull request approval review when a code-modifying commit is pushed to the branch.\nClick Save changes.\nRef: https://help.github.com/articles/enabling-required-reviews-for-pull-requests/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to connect existing Android Studio project to existing Github repository\n\nSo I am new to Android development and Android Studio.\nI used Android Studio to create an Android project, and each time I wanted to commit the code to GitHub, I switched over to the command line and committed/pushed the code from there. \nHowever, I realize now that Android Studio has it's own features for connecting to GitHub. I'd like to use those features. \nSince the project already exists, I prefer not to just create a new GitHub repository from Android Studio and delete the old one. I just want to connect the existing GitHub repository with the Android Studio project.\nHow can I sync these up?"}, {"role": "assistant", "content": "Maybe it is a little bit late, but if it helps to someone here is what I do in command line:\ncd <proyect folder>\ngit init\ngit remote add origin <link to repo>\ngit fetch origin\ngit checkout master\n\nnote: if there are commits on the repo it may require you to remove conflicting files\ngit add --all\ngit commit -m \"<message>\"\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to protect \"master\" in github?\n\nI have a few contributors in my github project. I want to allow only one of them to \"push\" to master. And this guy is not me (the owner of the repository). Is it possible to do?"}, {"role": "assistant", "content": "Back then, when this question was posted, GitHub didn't allow you to specify access privileges on a branch level. You can only do it on a repository level. So what you are requesting wasn't possible.\nIf you want to work around this limitation, I personally see two options:\n\nyou could use some kind of commit hooks, etc. to at least inform someone that something wrong happened\nIf you really need this tight control, you could use two repositories, one only holding your \"master\" branch. You would then need to make sure that only your \"guy\" gets write access to the master repository\n\nI think it is easier to solve that with some organisation. In my team, we never push anything directly to master, but instead always create pull requests. That ensures that at least someone takes a look before code gets merged and you could also define a policy that only your \"guy\" is allowed to merge pull requests.\nUpdate\nGitHub now announced that they will roll-out a new feature called protected branches. This feature has been present in other git distributions like Atlassian Stash for years. It will allow you to protect some branches from pushes. However, it still doesn't allow complete ACL-based protection of individual branches. So you might want to check this feature out in case you don't want to rely on an organizational solution as outline above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Error - \"ssh: connect to host github.com port 22: Operation timed out fatal: Could not read from remote repository.\"\n\nI want to push a repo from my computer to GitHub. I set the remote origin\ngit remote add origin [email\u00a0protected]:alicht/tweetanuber.git\n\nand then after when I try pushing to GitHub\ngit push -u origin master\n\nI'm greeted with this error:\nssh: connect to host github.com port 22: Operation timed out\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nHow can I resolve this issue and push the repo on my local computer to GitHub?"}, {"role": "assistant", "content": "I have had this same problem the solution was edit ~/.ssh/config and put this lines:\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\nIf there is no file config in this folder, simply create one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Updating pull request after review changes commit doesn't show up in the pull request\n\nI forked a GitHub repository and made some changes on my fork and submited a pull request but the owners of the original GitHub repository asked for some changes which they asked me for in the pull request. I assumed that adding additional changes to my fork will cause them to show up in the current pull request but to my surprise I can't see my changes in the pull request.\nThis is what I did after generating the original pull request:\n\nmade code changes\nadd the files 1git add -A`\ncommit the files git commit -m \"these are my suggested changes in pull request\"\nsubmit my changes with git push\n\nI can see changes on my own fork but I don't understand why I can't see any changes in the pull request.\nDoes anyone know what I need to do for my changes to show up in the current pull request?\nI'd really appreciate your help."}, {"role": "assistant", "content": "First, make sure that you did push to the right branch and that the commit still doesn't show up in the PR. For me, the commit showed up when I viewed the specific branch in the repo, but didn't show in the PR and didn't trigger CI.\nThis is what fixed the issue for me:\n\nClick on Edit in the top right corner.\nClick on the base selector and choose the same base branch.\nGitHub will ask you whether you want to change base, confirm.\nThe PR should update and the commit should show up."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "error: pathspec 'test-branch' did not match any file(s) known to git\n\nI am a new user of Git. I have forked a repository called Spoon-Knife (available for practicing forking with Git). Then, I cloned it locally by running\ngit clone https://github.com/rohinichoudhary/Spoon-Knife.git\n\nThis repository contains three branches, i.e.\n\nmaster,\ntest-branch,\nchange-the-title.\n\nWhen I run git branch, it only shows *master, not the remaining two branches. And when I run\ngit checkout test-branch\n\nI get the following error:\n\nerror: pathspec 'test-branch' did not match any file(s) known to git.\n\nWhy is this happening? How can I solve this problem?"}, {"role": "assistant", "content": "The modern Git should able to detect remote branches and create a local one on checkout.\nHowever if you did a shallow clone (e.g. with --depth 1), try the following commands to correct it:\ngit config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'\ngit fetch --all\n\nand try to checkout out the branch again.\nAlternatively try to unshallow your clone, e.g. git fetch --unshallow and try again.\nSee also: How to fetch all remote branches?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fatal Error when updating submodule using GIT\n\nI am trying to update the submodules of this git repositary but I keep getting a fatal errors:\n[root@iptlock ProdigyView]# git submodule update --recursive\nCloning into core...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\nClone of '[email\u00a0protected]:ProdigyView/ProdigyView-Core.git' into submodule path 'core' failed\n\nOr this way\n[root@iptlock root]# git clone --recursive https://github.com/ProdigyView/ProdigyView.git\nCloning into ProdigyView...\nremote: Counting objects: 438, done.\nremote: Compressing objects: 100% (275/275), done.\nremote: Total 438 (delta 172), reused 394 (delta 128)\nReceiving objects: 100% (438/438), 8.03 MiB | 5.19 MiB/s, done.\nResolving deltas: 100% (172/172), done.\nSubmodule 'core' ([email\u00a0protected]:ProdigyView/ProdigyView-Core.git) registered for path 'core'\nCloning into core...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\nClone of '[email\u00a0protected]:ProdigyView/ProdigyView-Core.git' into submodule path 'core' failed\n\nAny ideas of why this is happening withthe submodule? The repo is this one: \nhttps://github.com/ProdigyView/ProdigyView\n(The submodule is able to be cloned if I do not try to clone it as a submodule.)"}, {"role": "assistant", "content": "The issue is that git can't find the public key needed to download the repo from your server, the solution is to use the public url.\nIn the file .gitmodule you will find the following entry:\n[submodule \"example\"]\n    path = example\n    url = [email\u00a0protected]:webhat/example.git\n\nThe URL need to be changed to the public URL for the module:\n[submodule \"example\"]\n    path = example\n    url = https://github.com/webhat/example.git\n\nAs you can see the prefix git@ has been changed to https:// and the infix : becomes /\nEDIT:\nIn your own repository you might need to use git:// rather than https://\nThe previous answer was unclear to me, so I added this.\nEDIT 2:\nIf you find you need to run git submodule sync or need to edit .git/config to get this to work, you have likely set up remotes for the submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push error: src refspec main does not match any on linux\n\nwhenever I'm trying to upload my files using git push -u origin main\nI'm getting error which is as follows\nerror: src refspec main does not match any\nerror: failed to push some refs to 'github.com:xxxxxx/xxx-project.git'\n\nbut if I do git push -u origin master it is working perfectly and uploading my files to a separate branch named master. upon checking  .git/refs/heads in my project i saw that there is only one file named master so i performed git remote update which added .git/refs/remotes/origin/main but still git push -u origin main didn't work.\nI tried git push origin HEAD:main but produced error:\n! [rejected]        HEAD -> main (non-fast-forward) error: failed to push some refs to 'github.com:xxxxxxx/xxx-project.git' hint: Updates were rejected because a pushed branch tip is behind its remote hint: counterpart. Check out this branch and integrate the remote changes hint: (e.g. 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details.\nI want to push my code to main branch using git push -u origin main. how do I do that ?\nP.S - git version 2.29.2, pop_os 20.10.1\nEdit1 - git push -f origin HEAD:main pushes my code to main branch but how can i replace master file with main file in refs/heads so that i don't have to mention head and force my push ?"}, {"role": "assistant", "content": "This is a multi-part answer because there are two separate issues here that are tangling together now.  Here's a summary of what we'll cover:\n\nmain vs master\nerror: src refspec main does not match any\nreconciling separate main and master branches\n\nEach of these is in its own section.\nmain vs master\nGit itself has no special branch names.1  You could use main, master, trunk, or any other name as the name of your first branch.  Git has traditionally used the name master here, but there is a project to make this configurable, so that if you are French or Spanish you can use the name principal or premi\u00e8re or primero, or if you prefer Maori, you can use matua or tuatahi.  Currently, you can do this manually during or after a git init,2 but the project makes Git just do it automatically, without requiring a second step: If for any reason you want any other name by default, you can configure that.\nMeanwhile, GitHub have already chosen to leap ahead and make their default initial branch name main instead of master.  But this leaves your Git and GitHub's Git out of sync, as it were.  For more about GitHub's changeover, see\nDifference Between Main Branch and Master Branch in Github?\n\n1There are some technical flaws in this kind of claim.  As we know, technically correct is the best kind of correct, so let me add a few caveats in this footnote:\n\nMerging auto-generates a message of the form merge branch X into Y when you are on branch Y and run git merge X.  However, when you're on master, Git traditionally generates only a message of the form merge branch X.\n\nA new, empty repository created by git init has no commits and therefore has no branches (because a branch can only exist by having commits on it).  However, you must be on some branch in this new empty repository.  So Git stores some name in the symbolic ref named HEAD.  This is the branch name that you're on, even if that branch name does not exist (yet).  For a long time, Git has had, hard-coded into it, some code to stick the branch name master in there.  (This is, in effect, what GitHub changed.)\n\nThere are a bunch of other string literals reading master in the source and documentation as well; they're being converted to use the configuration settings but this will all take time.\n\n\n2If you have Git 2.28 or later, run git init --initial-branch=name, and/or set init.defaultBranch with git config in your system or global configuration.  If you have an earlier version of Git installed, or have already run git init, simply use git branch -m to rename master to whatever name you like.\n\nerror: src refspec main does not match any\nThis error message from Git is quite cryptic to newbies, but is actually pretty simple.  The problems are that it's loaded with jargon (webster; wikipedia), and abbreviates \"source\" to \"src\".\nGit is all about commits.  When we clone a repository, we have our Git reach out to some other Git.  That other Git looks up a repository, and that other repository is full of commits.  We then have our Git create a new repository locally, transfer into it all of their commits, and turn all of their branch names into remote-tracking names.  Then our Git creates, in this new repository, one branch name, based on one of their branch names.  At least, that's the normal process.  (And, if you know what all these terms mean, good!  If not, don't worry too much about them right now.  The point to remember here is that we get all their commits and none of their branches, and then we normally have our Git create one branch to match one of theirs.)\nSince Git is all about commits, this process\u2014of copying all their commits, but only copying one of their branch names to a name spelled the same in our own repository\u2014is all we need.  The fact that our Git renames all of their branch names\u2014so that with the one exception, we don't have any branches at all\u2014isn't normally very important.  Our own Git deals with this later, automatically, if and when it's necessary.\nWhen we use git push, we are asking our Git program, which is reading our own Git repository, to connect to some other Git program\u2014typically running on a server machine\u2014that can then write to some other Git repository.  We'd like our Git to send their Git some of our commits.  In particular, we want to send them our new commits: the ones we just made.  Those are, after all, where we put all our good new stuff.  (Git is all about commits, so that's the only place we can put anything.)\nOnce we've sent these commits, though, we need to their Git to set one of their branch names to remember our new commits.  That's because the way Git finds commits is to use branch names.3  The real names of each commit are big ugly hash ID numbers, which nobody wants to remember or look at; so we have Git remember these numbers using the branch names.  That way, we only have to look at the branch names, and these names can be meaningful to us: trunk, or feature/tall, or tuatahi, or whatever.\nBy default and convention, the way we do this using git push is pretty simple:\ngit push origin main\n\nfor instance.  The git push part is the command that means send commits and ask them to set a name.  The origin part is what Git calls a remote: a short name that, mostly, holds a URL.  The main part at the end, here, is our branch name.  That's the one our Git is using to find our commits.  We'll have our Git send our commits, then ask their Git to set their main too.\nThis last part\u2014where we've put in main here\u2014is what Git calls a refspec.  Refspecs actually let us put in two names, separated by a colon, or a couple of other forms.  We can, for instance, use HEAD:main as in Arka's answer (although for technical reasons we might want to use HEAD:refs/heads/main in many cases).  But in simple cases, we can just use one branch name: git push origin main.  The simple branch name is a simple form of refspec.\nFor this to work, the source name must be the name of an existing branch in our own Git repository.  This is where things are going wrong.\n(See also Message 'src refspec master does not match any' when pushing commits in Git)\n\n3Git can use any name, not just a branch name.  For instance, a tag name works fine.  But this answer is about branch names because the question is about branch names, and branch names are the most common ones to use here.\n\nWhat if our Git created only master?\nSuppose we're using GitHub and we've asked GitHub to make a new repository for us.  They run a form of git init that supplies, as the new repository's initial branch name, the name main.  They may or may not create one commit, too.  Let's say we do have them create this one commit.  That one commit will hold README and/or LICENSE files, based on what we choose using the web interface.  Creating that initial commit actually creates the branch name main.\nIf we now clone their repository, we'll get their one commit, which will be under their branch name main.  Our Git will rename their main to origin/main and then create one new branch name, main, to match theirs.  So all will be good.\nBut, if we create our own empty Git repository, using git init ourselves, our Git may set us up so that our first commit will create the name master.  We won't have a main branch: we'll have a master branch instead.\nOr, if we don't have GitHub create an initial commit, the GitHub repository will be totally empty.  Because it has no commits, it has no branches: a branch name is only allowed to exist if it specifies some commit.  So if we clone this empty repository, we'll have no branches either, and our Git won't know to use main: our Git may instead use master.  We're back in that same situation, where our Git think the first name to create should be master.\nSo, in these various situations, we make our first commit(s), and they all go on a branch named master.  If we now run:\ngit push -u origin main\n\n(with or without the -u; I won't go into the details about the -u here) our Git looks around in our Git repository for a branch named main.  There isn't one!  So our Git just gives us that:\nerror: src refspec main does not match any\n\nerror message.\nTo fix this, we can either git push origin master\u2014which sends our commits and then asks GitHub to create a new branch in the GitHub repository, with that branch name being master\u2014or rename our master to whatever name we wanted, and then use that name:\ngit branch -m master xyzzy\ngit push -u origin xyzzy\n\nwill make the (single) branch name that we both use be xyzzy.  If you want main here, rename your master to main.\nWhat if you've accidentally made both branches?\nSuppose we used GitHub to create a new repository, with their new default branch name main, that includes one initial commit with the usual README and LICENSE files.  Then, without thinking about it, we used git init on our own machine to create our own new repository, with its default branch name master, and we made a commit or two on our master.\nIf we now rename our master to main:\ngit branch -m master main\n\nand then try to push:\ngit push -u origin main\n\nwe get a different error:\n ! [rejected]        main -> main (non-fast-forward)\n\nThe reason for this is simple enough: They have a commit, that they find using their name main, that we do not have.  If they change their name main to find the last commit that we're sending them, they'll lose the initial commit they made, with the README and LICENSE files.\nYou have a bunch of options here:\n\nYou can ignore the initial commit they made.  It's just a boilerplate commit, after all.  You can tell them to throw it away entirely.  Use git push --force as outlined in any of many existing StackOverflow answers.\n\nYou can obtain their initial commit and rebase your commits on those commits.  This can be slightly tricky, because your first commit is a root commit.  If your first commit contains README and/or LICENSE files, you'll get an add/add conflict here.  In this case it's probably simpler to just force-push.\n\nYou can obtain their initial commit and merge your commits.  In a modern Git, this requires using the --allow-unrelated-histories option.  As with the rebase method, if your commits contain README and/or LICENSE files, you'll get add/add conflicts.  The resulting repository will also have two root commits.  None of these are serious problems, but they might prove slightly annoying.\n\n\nTo obtain their commit, simply run git fetch origin.  That will get GitHub's first commit, and use the name origin/main in your own Git repository to remember it.  You can then:\ngit rebase origin/main\n\nor:\ngit merge --allow-unrelated-histories origin/main\n\nto achieve the rebase or merge.  You can choose whether to rename your branch to main, if you have not already done so, at any time before or after doing all of this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I clone a private GitLab repository?\n\nWhen I do this:\ngit clone https://example.com/root/test.git\n\nI am getting this error:\n\nfatal: HTTP request failed\n\nWhen I use SSH:\ngit clone username [email\u00a0protected]:root/test.git\n\nI am getting this error:\n\nInitialized empty Git repository in /server/user/[email\u00a0protected]:root/test.git/.git/ \n     fatal: 'user' does not appear to be a git repository \n     fatal: The remote end hung up unexpectedly\n\nIt's a private repository, and I have added my SSH keys."}, {"role": "assistant", "content": "It looks like there's not a straightforward solution for HTTPS-based cloning regarding GitLab. Therefore if you want a SSH-based cloning, you should take account these three forthcoming steps:\n\nCreate properly an SSH key using your email used to sign up. I would use the default filename to key for Windows. Don't forget to introduce a password! (tip: you can skip this step if you already have one ssh key here)\n $ ssh-keygen -t rsa -C \"[email\u00a0protected]\" -b 4096\n\n Generating public/private rsa key pair.\n Enter file in which to save the key ($PWD/.ssh/id_rsa): [\\n]\n Enter passphrase (empty for no passphrase):[your password]\n Enter same passphrase again: [your password]\n Your identification has been saved in $PWD/.ssh/id_rsa.\n Your public key has been saved in $PWD/.ssh/id_rsa.pub.\n\n\nCopy and paste all content from the recently id_rsa.pub generated into Setting>SSH keys>Key from your GitLab profile.\n # Copy to clipboard\n pbcopy < ~/.ssh/id_rsa.pub\n\n\nGet locally connected:\n $ ssh -i $PWD/.ssh/id_rsa [email\u00a0protected]\n\n Enter passphrase for key \"$PWD/.ssh/id_rsa\": [your password]\n PTY allocation request failed on channel 0\n Welcome to GitLab, you!\n Connection to gitlab.com closed.\n\n\n\nFinally, clone any private or internal GitLab repository!\n$ git clone https://git.metabarcoding.org/obitools/ROBIBarcodes.git\n\nCloning into 'ROBIBarcodes'...\nremote: Counting objects: 69, done.\nremote: Compressing objects: 100% (65/65), done.\nremote: Total 69 (delta 14), reused 0 (delta 0)\nUnpacking objects: 100% (69/69), done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git adding files to repo\n\nI followed basic Git tutorial and added README file, which worked. Then I copied my project files to the same folder and tried to add them to repository by running\ngit add --all\ngit ci 'test' (my alias for commit)\ngit push origin master\n\nand nothing got pushed. \nWhat are the commands I should run to push my files to the remote repository (master)?\nI tried to commit changes and run status but it says 'nothing to commit'. It does not recognize, that I copied lots of new files to that folder..\nOK, so I type: git add .   (get no response from console)\nthen type to commit, and says no changes.."}, {"role": "assistant", "content": "This is actually a multi-step process. First you'll need to add all your files to the current stage:\ngit add .\n\nYou can verify that your files will be added when you commit by checking the status of the current stage:\ngit status\n\nThe console should display a message that lists all of the files that are currently staged, like this:\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n#\n#   new file:   README\n#   new file:   src/somefile.js\n#\n\nIf it all looks good then you're ready to commit. Note that the commit action only commits to your local repository. \ngit commit -m \"some message goes here\"\n\nIf you haven't connected your local repository to a remote one yet, you'll have to do that now. Assuming your remote repository is hosted on GitHub and named \"Some-Awesome-Project\", your command is going to look something like this:\ngit remote add origin [email\u00a0protected]:username/Some-Awesome-Project\n\nIt's a bit confusing, but by convention we refer to the remote repository as 'origin' and the initial local repository as 'master'. When you're ready to push your commits to the remote repository (origin), you'll need to use the 'push' command:\ngit push origin master\n\nFor more information check out the tutorial on GitHub: http://learn.github.com/p/intro.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use Github Personal Access Token in Jenkins\n\nI can ask this question in many ways, like\nHow to configure Jenkins credentials with Github Personal Access Token\nHow to clone Github repo in Jenkins using Github Personal Access Token\nSo this is the problem\n\nThe alternate solution that I am aware of\n\nSSH connection\nusername password configuration in Jenkins. However,\nuse of a password with the GitHub API is now deprecated.\n\nBut My question is how to setup Github connection with Jenkins using Personal Access Token"}, {"role": "assistant", "content": "[UPDATE]\nThe new solution proposed by git is\nhttps://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\nWhich says:\n\nBeginning August 13, 2021, we will no longer accept account passwords\nwhen authenticating Git operations and will require the use of\ntoken-based authentication, such as a personal access token (for\ndevelopers) or an OAuth or GitHub App installation token (for\nintegrators) for all authenticated Git operations on GitHub.com. You\nmay also continue using SSH keys where you prefer.\n\nWhat you need to do:\nhttps://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/#what-you-need-to-do-today\nBasically, change the add URL as\nhttps://<access token>@github.com/<userName>/<repository>.git\nSomething like this\nhttps://<access token>@github.com/dupinder/NgnixDockerizedDevEnv.git\nand set the credentials to none.\nThanks to @Gil Stal\n\n[OLD Technique]\nAfter many discussion on multiple threads from Stackoverflow\nI found one thread that is useful.\nRefer to this answer:\nhttps://stackoverflow.com/a/61104603/5108695\n\nBasically\nPersonal access token can be used as a password, as far as Jenkins is concerned at least. I added new credentials to the credential manager.\nGo to Jenkins\n\nGo to credentials > System > Global credentials > Add credentials a page will open.\nIn Kind drop-down select Username and password.\nIn User put a non-existing username like jenkins-user or user.\nAdd Personal Access Token in the password field\n\n\nNow start configuring your project.\n\nsource code management tab, select new configured credentials from Drop-down near credential Under Repository URL\n\nSo this is how we can configure or setup Authentication between Jenkins and Github using Personal Access Token\nReferences: \nGit Clone in Jenkins with Personal Access Token idles forever\nChange jenkins pipeline to use github instead of gitlab"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to get a list of merges into a branch from the Github website OR API?\n\nIn our workflow, no \"direct\" commits are made into the master branch. The master branch only receives merges from Pull Requests.\nWe can think of each merge then as a new feature added to the master branch.\nSo I'd like to get a list of merges into master, as a way to visualize the blocks of features added into the product over time.\nDoes git or the Github API expose this query, or do I have to parse raw commits?"}, {"role": "assistant", "content": "I use the following script:\ngit log main --first-parent --merges \\\n        --pretty=format:\"%h %<(10,trunc)%aN %C(white)%<(15)%ar%Creset %C(red bold)%<(15)%D%Creset %s\"\n\nExplaining each argument:\n\nmain: the name of your main branch. Can be omitted, in which case the current branch will be used.\n--first-parent: skips commits from merged branches. This removes the entries where someone merged master into their branches.\n--merges: shows only \"merge commits\" (commits with more than 1 parent). Omit this argument if you want to see direct commits to your main branch.\n--pretty-format: applies the following formatting:\n\n%h: the commit short hash;\n%<(10,trunc)%aN: author name, truncated at 10 chars;\n%<(15)%ar: the relative commit time, padded to 15 chars;\n%<(15)%D: the tag names, also padded to 15 chars;\n%s: first line of the commit message.\n\n\n\nThe result is pretty satisfying:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Action Status check missing from the list of checks in Protected branch settings\n\nI have the following github action setup that triggers fine on creation of Pull Request. But it does not show up in the status checks list of protected branch (main). I'm not sure what I'm doing wrong.\n\nname: Python application\n\non:\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Set up Python 3.7\n      uses: actions/setup-python@v1\n      with:\n        python-version: 3.7\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n    - name: Lint with flake8\n      run: |\n        pip install flake8\n        # stop the build if there are Python syntax errors or undefined names\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n    - name: GitHub Action for pylint\n      uses: cclauss/[email\u00a0protected]\n    - name: Github Action for pytest\n      run: python3 testing.py\n\nI've also tried the same setting with:\non: [ pull_request ]\n\nEdit:\nScreenshot of the check missing:"}, {"role": "assistant", "content": "Finally figured this out. I did not set a name for the job, so it defaulted to the property, build, in this case. I was searching by workflow name. Once I added the job name, I was able to search for it correctly. Later I also verified that searching for \"build\" brings up the check name in the list too.\njobs:\n  build:\n    name: python test\n..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - Cherry pick a single commit for pull request\n\nI might not have the terminology down yet.\nI made file to be added to a open project on git.\nI forked the project.\nI made some changes and my last commit is the file I want to request to the project and not the small changes I made before hand.\nWhen I go to github site and make pull request, I get all the commits before the one I want (which is last one of a file).\nI don't want to submit all of the other commits, because I don't think it's necessary for the project. Just my own changes.\nWhat do I do?\nShould I just make another res, or attach the file singularly and submit?"}, {"role": "assistant", "content": "You need to create a fresh branch from the remote HEAD, cherry-pick the commit to that branch, push the branch to your repo on GitHub, then create a pull request.\ngit checkout -b mybranch\ngit fetch upstream\ngit reset --hard upstream/master\ngit cherry-pick <commit-hash>\ngit push origin mybranch:mybranch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git revert <hash> not allowed due to a merge but no -m option was given\n\nI am trying to revert to a certain 'hash' number in git, by using the 'revert' command.\nI am using the following command:\ngit revert c14609d74eec3ccebafc73fa875ec58445471765\n\nBut, I am getting the following returned:\n\nerror: Commit c14609d74eec3ccebafc73fa875ec58445471765 is a merge but no -m option was given.\nfatal: revert failed\n\nWhat is happening & what should be done to resolve this?\n\nI want to revert back to this certain commit (c14609d74eec3ccebafc73fa875ec58445471765) that I see when running git log."}, {"role": "assistant", "content": "You are trying to revert a merge commit, and git doesn't know which parent to revert to. The -m allows us to choose which parent to choose. See the merge commit and note down which parent you want to go to. The parent information can be seen in git log, for example:\n\ncommit d02ee0f2179def10277f30c71c5d6f59ded3c595\nMerge: dd3a24c 2462a52\n\nand run:\ngit revert <hash> -m 1\n\nwhere 1 indicates parent number 1 (dd3a24c).\nIf you are trying to revert to that commit, do:\ngit reset --hard <hash>\n\nUnderstand the difference between git revert and git reset from the docs and decide which one you want. git revert is the safer option, but doesn't really do what you want. It just reverts the changes of a (set of) commit. git reset makes you move to a particular commit in history, and will rewrite your history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: How to embed a gist into README.md?\n\nIs it possible to embed gists into README.md file that resides in a GitHub repository?\nSomething like:\n<code id=\"gist-3167145\"></code>"}, {"role": "assistant", "content": "Update : My answer works with github pages, built via jekyll. I use the script tags in markdown which is then processed by jekyll.\nSince markdown supports html, one can simply use the <script> tag to embed gist.\nSimply copy the embed url of the gist provided by github\n\n..and paste it in you markdown file.\nExample : Copy the below and paste in your markdown file.\n<script src=\"https://gist.github.com/nisrulz/11c0d63428b108f10c83.js\"></script>\n..and this is what you will get"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I switch a public repo to private and vice versa on GitHub?\n\nI can't seem to find a way to do this. Is it possible at all? Since this is kind of important in my case, is there a code management platform where this is possible?"}, {"role": "assistant", "content": "Instead of switching back and forth between GitHub repository visibility status (which is possible through the repository settings, section \"danger zone\"), I would rather establish 2 repositories:\n\none public, with only public content\none private, with a mix of public and private content\n\nThat way, you don't have to wonder, when pushing to a repository, if it is today public or private: you would push to one specific repository (of the two), knowing full well its visibility status.\nAnd you would never expose private content, which, is set to public even a few minutes, ... is no longer ever truly private (because it can be cloned, replicated and pushed elsewhere)\n\nThat being said, since June 2020, you have an \"Updated UI for Changing Repository Visibility \":\n\nYou can now set your repository to any available visibility option \u2013 public, private, or internal \u2013 from a single dialog in the repository's settings.\nPreviously, you had to navigate separate sections, buttons, and dialog boxes for changing between public and private, and between private and internal.\n\nSee \"Setting repository visibility\"\n\n(*) \"destructuve action\" because of the consequences of the visibility change:\n\npublic to private: some features won't be available in the repository after you change the visibility to private. Any published GitHub Pages site will be automatically unpublished.\nGitHub Advanced Security features, such as code scanning, will stop working\n\nprivate to public: GitHub will detach private forks and turn them into a standalone private repository\n\n\n\nNote that, since July 10th 2020, the default visibility is private:\n\nDefault visibility for new repositories\n\n\nWhen you create a repository, you can choose whether it should be private or public.\nNow, when you're signed into GitHub through an organization's single sign on service and create a new repository through the website navigation, the default selection is Private.\nThis helps prevent sensitive company data from unintentionally being pushed to public repositories. See the about repository visibility article for more information about this choice."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make git diff show the same result as github's pull request diff?\n\nAfter branches are merged, and GitHub no longer show difference when I try to make a pull request, but git diff will still show differences.\nFor example:\n\nI have branch D\nCreated hotfix on branch H\nMerged H to D\nCreated more stuff on D\n\nNow GitHub pull request from H to D shows no difference but git diff H D show differences.\nWhat I am trying to do is to create a command-line tool to see which old branches (there can be a lot) don't have code differences to develop.  right now I have to go to GitHub, do a pull request and select each branch to see if there are difference."}, {"role": "assistant", "content": "You probably want the \"triple-dot\" syntax:\ngit diff D...H\n\nSee also What are the differences between double-dot \"..\" and triple-dot \"...\" in Git diff commit ranges?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get pull request number within GitHub Actions workflow\n\nI want to access the Pull Request number in a Github Actions workflow. I can access the GITHUB_REF environment variable that is available. Although on a Pull Request action it has the value: refs/pull/125/merge. I need to extract just the 125.\nI have found a similar post here that shows how to get the current branch using this variable. Although in this case, what I am parsing is different and I have been unable to isolate the Pull Request number.\n\nI have tried using {GITHUB_REF##\\*/} which resolves to merge\nI have also tried {GITHUB_REF#\\*/} which resolves to pull/125/merge\n\nI only need the Pull Request number (which in my example is 125)"}, {"role": "assistant", "content": "Although it is already answered, the easiest way I found is using the github context. The following example shows how to set it to an environment variable.\nenv:\n  PR_NUMBER: ${{ github.event.number }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Error \"fatal: invalid branch name: init.defaultBranch =\"\n\nI getting this error when ever I do git clone\nError :-\nfatal: invalid branch name: init.defaultBranch =\nTried to reinstall git (latest)\nStill same error\nOS :- Windows"}, {"role": "assistant", "content": "It would appear that you have experimented with the new (2.28) init.defaultBranch configuration value.\nAssign it a proper value:\ngit config --global init.defaultBranch main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Google Code + SVN or GitHub + Git [closed]\n\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nLet me start by telling you that I never used anything besides SVN and I'm also a Windows user.\nI have a couple of simple projects that are open-source, others are on their way when I'm happy enough to release their source code. Either way, I was thinking of using Google Code and SVN to share the source code of my projects instead of providing a link to the source on my website. This has always been a pain because I had to update the binaries and the code every time I released a new version. This would also help me to have a backup of my code some where instead of just my local machine (I used to have a local Subversion server running).\nWhat I want from a service like this is very simple... I just want a place to store my source code that people can download if they want, that allows me to control revisions and provide a simple and easy issue/bug system so people can submit bugs and stuff like that. I guess both of them have this.\nBut I don't want to host any binaries in their websites. I want this to be hosted on my website so I can control download statistics with my own scripts. I also don't have a need for wiki pages as I prefer to have all the documentation on my own website. Do any of these services provide a way to \"disable\" features like wiki and downloads and not show them at all for my project(s)?\nNow, I'm sure there are lots of pros and cons about using Google Code with SVN and GitHub with Git (of course) but here's what's important for me on each one, and why I like them:\nGoogle Code:\n\nAs with any Google page, the complexity is almost non-existent\nEveryone (or almost everyone) has a Google account, whcih is nice if people want to report problems using the issues system\n\nGitHub:\n\nMay (or may not) be a little more complex (not a problem for me though) than Google's pages but...\n...has a much prettier interface than Google's service\nIt needs people to be registered on GitHub to post about issues\nI like the fact that with Git, you have your own revisions locally (can I use TortoiseGit for this or?)\n\nBasically that's it. Not much, I know...\nWhat other common pros and cons can you tell me about each site/software? Keep in mind that my projects are simple, I'm probably the only one who will ever develop these projects on these repositories (or maybe not, but for now I am)."}, {"role": "assistant", "content": "Google Code is supporting Mercurial now.  Mercurial should give you most of the benefits of Git, but you get the maturity of Google Code.  You also have the option to go with subversion there as well should you want to."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "List all files changed in a pull request in Git/GitHub\n\nIs there a way (from the command line) to list the names of all files changed in a PR in Git/GitHub? This would be used to find what tests need to be run in a Travis CI build for that PR.\nThe CI build runs these commands before it calls our script:\ngit clone --depth=50 git://github.com/jekyll/jekyll.git jekyll/jekyll\ncd jekyll/jekyll\ngit fetch origin +refs/pull/2615/merge\ngit checkout -qf FETCH_HEAD"}, {"role": "assistant", "content": "In general, you can list the files changed between any two commits with\ngit diff --name-only <ref1> <ref2>\n\nHow to list only the names of files that changed between two commits\nThe problem here seems to be determining the 'merge base'. If all branches originate with master, then you could do:\ngit --no-pager diff --name-only FETCH_HEAD $(git merge-base FETCH_HEAD master)\n\nThis will show you the changes between the point at which the FETCH_HEAD was branched from master to the current FETCH_HEAD. I tested this locally, and the PR branches are cut from master I believe it should work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I re-run Github Actions?\n\nI see this on the Github web UI:\n\nbut it's not clear to me whether the disabled re-runs are a result of my .github/main.workflow configuration, or inherited from the Github Actions service.\nSample workflow below - I don't see anything obvious there that would disable re-runs.\nworkflow \"Test, Lint\" {\n  on = \"push\"\n  resolves = [\n    \"Test\",\n    \"Lint\",\n    \"Lint Format\"\n  ]\n}\n\naction \"Install\" {\n  uses = \"actions/npm@master\"\n  args = \"install\"\n  secrets = [\"SECRET_TOKEN\"]\n}\n\naction \"Test\" {\n  needs = \"Install\"\n  uses = \"actions/npm@master\"\n  args = \"test\"\n  secrets = [\"SECRET_TOKEN\"]\n}\n\naction \"Lint\" {\n  needs = \"Install\"\n  uses = \"actions/npm@master\"\n  args = \"run lint\"\n  secrets = [\"SECRET_TOKEN\"]\n}\n\naction \"Lint Format\" {\n  needs = \"Install\"\n  uses = \"actions/npm@master\"\n  args = \"run lint:format\"\n  secrets = [\"SECRET_TOKEN\"]\n}"}, {"role": "assistant", "content": "There are two situations:\n\nOn a failed build, from the docs\n\n\nOptionally, if the run failed, to re-run the workflow, in the upper-right corner of the workflow, use the Re-run checks drop-down menu, and select Re-run all checks.\n\n\n\nIf your run did not fail, you have to trigger the event which your workflow runs on: .\nIn the most usual case of on: push, you can add an empty commit to poke GitHub actions:\ngit commit --allow-empty -m \"trigger GitHub actions\"\ngit push\n\nThis will add an empty commit (no files changed), and will trigger another push event on GitHub, and therefore trigger another workflow run.\nThis does, however, muck up the commit history.\nYou can later squash/remove these if you like, but it's perhaps not ideal.\n\n\n\nThis is an update to my original answer, which referred to GitHub Actions HCL-based v1, prior to the August 2019 YAML-based re-release.\n@tuff got this right first, with @instantepiphany\u2018s caveat."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a permalink to the latest version of gist files?\n\nI created a gist with two files, the raw version of which I would like to use as a reference for an application which will query their contents. These contents will be updated on GitHub.\nI found however that the URL of the file changes with each version of the gist. Is there a permalink which would point to the latest version of a file in a gist?"}, {"role": "assistant", "content": "Raw gist URLs follow the pattern below:\nhttps://gist.githubusercontent.com/[gist username]/[gist ID]/raw/[gist commit ID]/[file name]\n\nTo view the latest version, simply remove the [gist commit ID] part:\nhttps://gist.githubusercontent.com/[gist username]/[gist ID]/raw/[file name]\n\ne.g.\nhttps://gist.githubusercontent.com/mwek/9962f97f3bde157fd5dbd2b5dd0ec3ca/raw/user.js\n\nKeep in mind that the endpoint is cached, so your updates may be visible with a slight delay."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Make Jira links clickable in Github\n\nIs there a way I can make Jira ticket id's on Github link to Jira? (much the same way as how it happens on Bitbucket).\nMaybe there is a plugin or something I could use ?\nEDIT:\nI specifically want ticket id's in Github to link through to Jira, this is not described in any of the resources below:\n\nHow do I connect github to JIRA?\n\nhttps://confluence.atlassian.com/display/BITBUCKET/Linking+Bitbucket+and+GitHub+accounts+to+JIRA\n\nhttps://help.github.com/articles/integrating-jira-with-your-projects/"}, {"role": "assistant", "content": "Update 2022:\nDusan Plavak mentions in the comments that, as of today (Q1 2022), you can also import / automate creation of autolinks via github api.\nYou can also use gh api:\ngh api repos/octocat/hello-world/autolinks \\\n       -f -q 'key_prefix:key_prefix url_template:url_template'\n\n\nAnd since July 2022, you also have autolinks with alphanumeric IDs (for instance for a Trello card URL: https://trello.com/c/3eZr2Bxw).\n\n2019: No need for Chrome plugin, Safari hack or scripts.\nFrom October 2019, GitHub can automatically transform TICKET references to Jira links, for example.\nSee \"Save time linking resources with autolink references\" from Lars Schneider.\n\nNow you can set up an autolink reference and GitHub will automatically create links (to external systems) for you.\n\nHow it works\nIf you use GitHub with external services (like Jira), you might be familiar with shorthand references (like TICKET-123) to point to resources in those external systems.\nStarting today, GitHub can automatically transform shorthand references into clickable links for GitHub Pro, Team, and Enterprise plans.\n\nSo not the regular github.com.\n\nTo enable this feature, a repository admin needs to register the reference prefix (such as TICKET-) in the settings.\nAfterwards, references of that type are detected in issues, pull requests, comments, or commit messages, and turned into links.\nThis speeds up navigation between GitHub and external systems.\n\nSee documentation.\nNote that the ticket prefix is not included in the hyperlink despite being included in the anchor text. The URL preview in the setting is accurate:\n\nThe animation in the feature announcement, replicated above, shows this limitation but not clearly.\nThis means that you have to either include the project key in the target URL as well or prefix all project keys with a another key and use that as the autolink prefix.\nYou cannot even use Git's trailers to reference tickets and use autolinks, because trailers are key-value pairs separated by :  (colon space) and an autolink prefix that ends with a space is invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to configure user.name and user.email per wildcard domains in .gitconfig?\n\nI have a work computer, and it's configured globally to use my work email and name when committing. This is good. However, I'd like to make some sort of rule that says, \"if the repo origin is github, use user X and email Y\"\nI realize you can make a config entry per repository, but I'd like it to be more automatic: if the clone is github, it should use github user details. If I clone from work, it should use work details.\nIs there any way to configure this globally based on the remote domain? Or another way?\nEDIT/UPDATE\nI have accepted the answer below, but modified the script just a bit:\n#!/usr/bin/env bash\n\n# \"Real\" git is the second one returned by 'which'\nREAL_GIT=$(which -a git | sed -n 2p)\n\n# Does the remote \"origin\" point to GitHub?\nif (\"$REAL_GIT\" remote -v 2>/dev/null | grep '^origin\\b.*github.com.*(push)$' >/dev/null 2>&1); then\n\n    # Yes.  Set username and email that you use on GitHub.\n    export GIT_AUTHOR_NAME=$(\"$REAL_GIT\" config --global user.ghname)\n    export GIT_AUTHOR_EMAIL=$(\"$REAL_GIT\" config --global user.ghemail)\n\nfi\n\n\"$REAL_GIT\" \"$@\"\n\nThe primary addition is the requirement for two git config values.\ngit config --global user.ghname \"Your Name\"\ngit config --global user.ghemail \"[email\u00a0protected]\"\n\nThis avoids hard coding the values in the script, allowing it to be more portable. Maybe?"}, {"role": "assistant", "content": "Git 2.13 adds support for conditional config includes. If you organize your checkouts into directories for each domain of work, then you can add custom settings based on where the checkouts are. In your global git config:\n[includeIf \"gitdir:code/work/\"]\n    path = /Users/self/code/work/.gitconfig\n\nAnd then in ~/code/work/.gitconfig:\n[user]\n    email = [email\u00a0protected]\n\nAnd of course you can do that for as many domains of work as you like."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cite a paper using github markdown syntax\n\nI am coding a readme for a repo in github, and I want to add a reference to a paper. What is the most adequate way to code in the citation? e.g. As a blockquote, as code, as simple text, etc?\nSuggestions?"}, {"role": "assistant", "content": "I agree with Horizon_Net that it depends on personal preference.\nI like to have something which looks similar to LaTeX.\nAn example is provided below.\nNote that it demonstrates a numeric citation style.\nAlphabetic or reading style are possible too.\nFor numeric citation style, higher numbers should appear later in the text, and this can make satisfying numeric citation style cumbersome.\nTo avoid this problem, I typically use an alphabetic citation style.\n\"...the **go to** statement should be abolished...\" [[1]](#1).\n\n## References\n<a id=\"1\">[1]</a> \nDijkstra, E. W. (1968). \nGo to statement considered harmful. \nCommunications of the ACM, 11(3), 147-148.\n\n\n\"...the go to statement should be abolished...\" [1].\nReferences\n[1]\nDijkstra, E. W. (1968).\nGo to statement considered harmful.\nCommunications of the ACM, 11(3), 147-148.\n\nOn GitHub flavored Markdown and most other Markdown flavors, you can actually click on [1] to jump to the reference.\nApologies for taking Dijkstra his sentence out of context.\nThe full sentence would make this example more difficult to read.\nEDIT:\nIf the references all have a stable link, it is also possible to use those:\nThe field of natural language processing (NLP) has become mostly dominated by deep learning approaches\n(Young et al., [2018](https://doi.org/10.1109/MCI.2018.2840738)).\nSome are based on transformer neural networks\n(e.g., Devlin et al, [2018](https://arxiv.org/abs/1810.04805)).\n\n\nThe field of natural language processing (NLP) has become mostly dominated by deep learning approaches\n(Young et al., 2018).\nSome are based on transformer neural networks\n(e.g., Devlin et al, 2018)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git best practice for config files etc\n\nI'm still new to all things git and was wondering what is best practice in regards to config files. My local development server needs different config values to my live one so how can I stop it pushing / pulling those files?"}, {"role": "assistant", "content": "Use symbolic links. \nTake an example where you have a config file named \"config.ini\". In the working directory of your git repo, you would do the following:\n\nCreate a version of the config file called \"config-sample.ini\". This is the file you'll do all your work on.\nCreate a symbolic link between \"config.ini\" and \"config-sample.ini\".\nln -s config-sample.ini config.ini\n\nThis let's all your code point to \"config.ini\" even though you're really maintaining \"config-sample.ini\".\nUpdate your .gitignore to prevent the \"config.ini\" from being stored. That is, add a  \"config.ini\" line:\necho \"config.ini\" >> .gitignore\n\n(Optional, but highly recommended) Create a .gitattributes file with the line \"config.ini export-ignore\".\necho \"config.ini export-ignore\" >> .gitattributes\n\nDo some coding and deploy....\nAfter deploying your code to production, copy the \"config-sample.ini\" file over to \"config.ini\". You'll need to make any adjustments necessary to setup for production. You'll only need to do this the first time you deploy and any time you change the structure of your config file.\n\nA few benefits of this:\n\nThe structure of your config file is maintained in the repo.\nReasonable defaults can be maintained for any config options that are the same between dev and production. \nYour \"config-sample.ini\" will update whenever you push a new version to production. This makes it a lot easier to spot any changes you need to make in your \"config.ini\" file. \nYou will never overwrite the production version of \"config.ini\". (The optional step 4 with the .gitattributes file adds an extra guarantee that you'll never export your \"config.ini\" file even if you accidentally add it to the repo.)\n\n(This works great for me on Mac and Linux. I'm guessing there is a corresponding solution possible on Windows, but someone else will have to comment on that.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github file change notification\n\nIs there a way to notify people on change of some certain files? Specifically, I would like to track change of *.sql files and and notify our developers on a change. How can I configure post commit hooks to notify?"}, {"role": "assistant", "content": "If you want folks to get notified via email, and you want them to manage their own notifications, then https://app.github-file-watcher.com/ should do the trick - it monitors any public repo, and will notify you via email of changes to any file, a specific file, or some files that match your criteria."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference between categories and tags in Jekyll?\n\nBoth of their elements can be accessed by for..in, and the way of adding categories and tags are the same. So, what's the difference between categories and tags in Jekyll?"}, {"role": "assistant", "content": "It seems to me that the only important difference is that categories can be used in the post url - a post inside the \"beer\" and \"food\" categories, by default, will have this url:\n/food/beer/2008/09/09/foo-bar.html\n\nInstead of this one:\n/2008/09/09/foo-bar.html\n\nSee the post tests for details\nTags have no influence in the urls, at least according to their tests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Could not read from remote repository\n\nI have received the following error multiple times:\n\nCould not read remote repository. Please make sure you have the correct access rights and the repository exists.\n\nI am very confused about how to remedy this error."}, {"role": "assistant", "content": "Make sure you are using the correct SSH keys/usernames on both your GitHub account and your local machine. Here's how you can\ndo that on GitHub\nAlso, you might consider using an alternative Git manager. I've never heard of Aptana, but I do know that GitHub has an awesome GUI program for managing your repositories.\nIn the future, this is all much easier and more streamlined on Linux/Unix operating systems like Ubuntu. Ubuntu is geared towards developers and has things like Git and SSH installed correctly by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does a red text-background mean in GitHub comparison view?\n\nI created a pull request and was browsing through, the differences are shown with light red/green line-brackgrounds, but some text is bolded with a red text background...\nUpdate: Image changed to show file with some highlighted comments and some not.\n\nWhat does this mean?"}, {"role": "assistant", "content": "The red background-color is definitely being caused by the error-highlighting feature of GitHub's text editor/viewer. You can find the same behaviour occurring to an intended block comment in another JSON file on GitHub:\n\nAs for your comment about some illegal characters not being highlighted: I also found that certain JSON errors aren't caught by GitHub's syntax processor. See this gist as an example:\n\nIn this case, the text outside of the outermost object isn't being highlighted. Whatever reason there is for this may be the same reason that errors aren't being highlighted for you.\nYou can test it out for yourself by copy-pasting your code into a new Gist. Note that the ACE Editor has its own highlighting feature that can highlight code as you type, but its processing rules seem to be a bit different from that of GitHub's code viewer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Android Studio can't login to GitHub\n\nI'm getting this issue while logging in on GitHub on Android Studio: \n\nCan't login: Can't get user info 404: Not found\n\n\nHas someone faced this issue? How can I get around this?"}, {"role": "assistant", "content": "I have faced this problem too. Try using token to login.\nLog in to github.com on the browser. Go to Settings -> Developer settings -> Personal access tokens. There you can create a new token and then, go back to Android Studio, select Enter Token at the login prompt."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Could not create work tree dir 'example.com'.: Permission denied\n\nI have got a virtual private server with nginx Virtual Hosts setup (Server Blocks).\nI've installed Git and got my ssh keys authenticated with GitHub.\nI have my website running in\n ~/var/www/example.com/public_html/\n\nI tried to run:\ngit clone [email\u00a0protected]:example/example.co.uk.git\n\nto pull my files on GitHub to the /public_html/ directory but I get the error:\nfatal: could not create work tree dir 'example.com'.: Permission denied\n\nI've followed this tutorial including the same issue he has mentioned on the page, but it still won't work: http://machiine.com/2013/pulling-a-git-repo-from-github-to-your-ubuntu-server/\nI'm completely new to this, so your help would be much appreciated!"}, {"role": "assistant", "content": "I think you don't have your permissions set up correctly for /var/www\nChange the ownership of the folder.\nsudo chown -R $USER /var/www"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I pull a missing file back into my branch?\n\nI have cloned a Git project into a local Git repository. Then I have done something nasty to one of the files and in that panic I deleted file physically from the drive (rm style.css) and also removed it from Git (git rm style.css).\nI want to get the original style.css file back from origin to my development branch. Unfortunately my Git thinks it is up-to-date and won't do anything.\ncd ~/project.me\ngit status\n\n# On branch dev\nnothing to commit (working directory clean)\n\ngit pull origin dev\n\nPassword for 'https://[email\u00a0protected]':\nFrom https://github.com/somewhere/project.me\n* branch            dev        -> FETCH_HEAD\nAlready up-to-date.\n\nWhat do I need to do to tell git that I want to download original style.css file back into my dev branch?"}, {"role": "assistant", "content": "If you want to restore all the missing files from the local repository\ngit checkout .\n\nWarning: This method also restores all changed files and drops all the changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create a remote branch on GitHub\n\nIn SVN I have at least two ways to create a branch:\nsvn cp /home/me/localcheckout/trunk /home/me/localcheckout/branches/newbranch\nsvn cp http://server/trunk http://server/branches/newbranch\n\nThe first creates it locally then I have to commit the whole branch.\nThe second creates it on the server.\nThe benefit of the second is that I can svn switch my local trunk, make a few changes to some files and commit just a few KB.\nIs it possible to achieve that using Git?\nIs there a way of creating a remote branch on GitHub then pull them to my local repo?\nThe reason that I ask is that I am trying to push a couple of KB to a new remote branch from master using my phones internet connection but when I push it wants to push about 400 MB!\n\nWriting objects:  22% (54080/245586), 86.74 MiB | 13 KiB/s\n\nSee Git - pushing a remote branch for a large project is really slow for a similar question."}, {"role": "assistant", "content": "It looks like github has a simple UI for creating branches.  I opened the branch drop-down and it prompts me to \"Find or create a branch ...\".  Type the name of your new branch, then click the \"create\" button that appears.\nTo retrieve your new branch from github, use the standard git fetch command.\n\nI'm not sure this will help your underlying problem, though, since the underlying data being pushed to the server (the commit objects) is the same no matter what branch it's being pushed to."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'User is missing the Overall/Read permission' error with Jenkins GitHub OAuth Plugin\n\nI'm using the github oauth plugin for our logins but for all of our users in the Organisation I get an error: \nAccess Denied\n\n<user> is missing the Overall/Read permission\n\nI have tried everything I can possibly think of to try to make this work and I'm probably going to fallback to making everyone an admin user, which i would prefer not to do. \nAny advise would be appreciated."}, {"role": "assistant", "content": "This is how I resolved the authentication problem:\n\nEdit config.xml file, e.g.\nsudo vi /var/lib/jenkins/config.xml\n\n\nChange useSecurity element's value to false, e.g.\n<useSecurity>false</useSecurity>\n\nRemove authorizationStrategy block\n\nRestart Jenkins: /etc/init.d/jenkins restart.\nAccess Jenkins through URL as usual and reconfigure security again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a new branch on both local and remote? GIT [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I create a remote Git branch?\n\n                                (26 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI create a new branch like this:\n\ngit branch dev-itt-9\n\nHowever, it only creates a new branch on local\n\ngit branch -a\n\n* dev-itt-9\n  master\n  testing\n\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/development\n  remotes/origin/master\n  remotes/origin/testing\n\nWhat is the proper way to create a new branch on both local and remote?\nI am quite new to git. Sorry if my question is stupid."}, {"role": "assistant", "content": "First, you create your branch locally:\ngit checkout -b <branch-name>\n\nThe remote branch is automatically created when you push it to the remote server. So when you feel ready for it, you can just do:\ngit push <remote-name> <branch-name>\n\nWhere <remote-name> is typically origin, the name which git gives to the remote you cloned from. Your colleagues would then just pull that branch, and it's automatically created locally.\n\nCredit: this answer is a copy of https://stackoverflow.com/a/1519032"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error with git rebase (\"could not apply...\")\n\nI'm the administrator of the GitHub repository https://github.com/plison/opendial. I would like to reduce the number of commits on the repository, since the repository already has a few thousand commits, many of whom are minor debugging changes that could easily be squashed together (especially the ones that are a few years old).\nI'm therefore trying to apply rebasing in order to squash together part of my commits. However, I've experience the following issue:\n\nWhen I type e.g. git rebase -i HEAD~10, I get a quite long number of commit lines (much more than 10) in the interactive editor. What could be the reason?\nMore importantly, once I close the interactive editor to start the rebasing, I systematically get the error message \"error:could not apply ', even when I do not make any change to the commits (i.e. if I leave all lines as 'pick', without any modification or reordering).\n\nHow can I solve these issues? It should be noted that the repository was automatically imported from a previous (SVN) repository hosted on Google Code. The conversion seemed so far to have worked well, but I'm wondering why I get these errors when trying to rebase my commits."}, {"role": "assistant", "content": "As a reminder to myself on how to resolve this:\nThe error message is not very informative. If you type \ngit rebase --continue\n\nyou realize the error is because of a merge conflict that git cannot resolve by itself, and needs your help.\nTo see what files have conflicts, type\ngit status\n\nResolve the merge conflicts in your favorite editor/IDE (hint: this should start with i and end with ntelliJ)\nMark resolution with \ngit add .\n\nIf all the conflicts are resolved, you should see something like this:\n(all conflicts fixed: run \"git rebase --continue\")\n\nSo continue your rebase with \ngit rebase --continue\n\nHopefully your rebase should now be successful\ngit status\n\nshows:\nOn branch feature/DIG-19302-Upgrade-mockito-v2\nYour branch is behind 'origin/feature/your-feature-branch' by 2 commits, and can be fast-forwarded.\n(use \"git pull\" to update your local branch)\n\nnothing to commit, working directory clean\n\nDon't do a git pull. If you do, you will only overwrite your merge conflicts. Instead push your merge conflict resolutions to the branch) with \ngit push --force\n\nYou're done! Your git log should show only 1 commit now (which is the forced update you just did)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Favicon with GitHub Pages\n\nI'm hosting a few sites with GitHub Pages (User and Project Pages), but they are not displaying their favicons (in the browser).\n<link rel=\"shortcut icon\" type=\"image/png\" href=\"/favicon.png\">\n\nIs the problem that GitHub displays the site with <frameset>? I know it's possible to display favicons (at least with Jekyll), but can I display a favicon on it's own?"}, {"role": "assistant", "content": "Yes, you can.\nPut this into the head part of your webpage:\n <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n\nIt is important to not put the slash before the favicon.ico part. Put the favicon.ico file in your repository's home directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create comment on pull request\n\nGitHub's comment API seems to allow you to create comments on a pull request, but only if you supply a specific line number in the diff to comment on.  Is there a way to create a comment on the pull request as a whole, the equivalent of typing at the bottom of the pull request screen in GitHub's web interface?"}, {"role": "assistant", "content": "Yes, it is possible. The section of the API docs you are referencing relates to line comments (comments on specific lines of the commits in the pull req), and the docs say:\n\nPull Request Review Comments are comments on a portion of the unified diff. These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).\n\nWhat you need are those Issue comments, which are explained at the top of this page:\n\nThe Pull Request API allows you to list, view, edit, create, and even merge pull requests. Comments on pull requests can be managed via the Issue Comments API.\n\nSo, in order to create a Pull Request comment, you actually need to create an Issue comment (since a pull request creates an issue to manage it). The page for Issue comments confirms this:\n\nThe Issue Comments API supports listing, viewing, editing, and creating comments on issues and pull requests.\n\nSo, the request you need to make is:\nPOST /repos/:owner/:repo/issues/:number/comments\n\nHow do you know which issue comment URL to POST to? Well, if you look at the response for getting a single pull request, you will see that it contains an attribute called _links, and that this attribute has a nested comments attribute. This is the URL which you should use for reading and creating pull request comments, the same one as to be used in the POST request above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push branches to Git\n\nI have a local repository I'm working on and its remote is hosted on GitHub. I recently created a branch and started working on it, making several commits and now wish to push the branch to GitHub and be able to pull it to another cloned repository. How do I do this?"}, {"role": "assistant", "content": "git push origin <local-branch-name>:<remote-branch-name>\n\nSubstitute for <local-branch-name> and <remote-branch-name>. They may be same or different, as you wish."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a subproject commit?\n\nI'm trying to add the Laravel files to a Github repo.\nI ran \n$ git clone https://github.com/laravel/laravel.git\nThe files show up fine locally but do not show up when I push to github:\n\nThe commit shows:\n\nHow can I add the laravel files to my github repo? Also, what is a subproject commit?"}, {"role": "assistant", "content": "A submodule commit is a gitlink, special entry recorded in the index, created when you add a submodule to your repo;\nIt records the SHA1 currently referenced by the parent repo.\nA git submodule update --init is enough to populate the laravel subdirectory in your repo.\nOnce it is filled, note that your submodule repo is in a detached HEAD mode.\nAs shown here, when switching branches in the parent repo, your submodule gitlink will change accordingly, but your submodule content won't change until you make again a git submodule update (after the git checkout)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "why is Issues tab not present in my repo's github page?\n\nI want to create issues in a github repo to correct technical debt in the repo. I am not able to see the issues tab. For other repos the issues tab present below the pull request tab. How can I enable the issues tab for my repo?"}, {"role": "assistant", "content": "You have to enable the Issues first. You can do that by clicking to Settings and enable the Issues section. Then you can use it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create a GitHub webhook for when a pull request is accepted & merged to master\n\nI have a webhook that currently fires on push to any branch. This triggers the webhook far too frequently. Ideally, the webhook would only fire when a pull request is merged into master. I don't see that as an option, though:\n\nIs there a way to get additional webhook options or to customize the webhook somehow?"}, {"role": "assistant", "content": "So, you can't customize the conditions of the trigger, but as LeGec mentions you can customize your code to only trigger when the Pull Request is merged.\nTo do that, make sure your script responds to the PullRequestEvent. The conditions to test are:\n\n\"action\" is \"closed\"\n\"merged\" (inside of \"pull_request\") is true\n\nThis way your script can ignore all the pings it receives when any other activity occurs on the Pull Request (including closing without merging)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cross-Origin Resource Sharing on GitHub Pages\n\nIs there a way to enable Cross-Origin Resource Sharing (CORS) for a static page hosted on GitHub Pages to allow cross-origin requests in Javascript?\nFor example, can we instruct GH Pages somehow to add these HTTP response headers:\nAccess-Control-Allow-Origin:*  \nAccess-Control-Allow-Methods:GET,POST\nAccess-Control-Max-Age: 1000\nAccess-Control-Allow-Headers:*\n\nCouldn't find anything in their documentation, and this ...\n\n...GitHub Pages does not support customer server configuration files\n  such as .htaccess or .conf...\n\n... doesn't sound very promising - or is there a way?"}, {"role": "assistant", "content": "EDIT: Yay! Looks like GitHub Pages now supports CORS: https://twitter.com/invisiblecomma/status/575219895308324864\nThis can be verified by curling a request to enable-cors.org (which is hosted on GitHub Pages). Running this command: curl -v enable-cors.org > /dev/null returns an Access-Control-Allow-Origin: * header.\nThere's no way to support CORS on GitHub Pages, though I'd love to see this feature. We host http://enable-cors.org on GitHub Pages, and we can't enable CORS on the site itself :)\n\nUpdate\nAs noted by @Styx GitHub Pages now always redirect to HTTPS. So if you want to confirm for yourself that all origins are allowed, for a particular site using GitHub pages, try curl with -L (to follow the redirects that are involved). E.g.:\n$ curl -vL square.github.io/okhttp 2>&1 | fgrep -i access-control-allow-origin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github \"Branch name pattern\" negation\n\nOn Github, when you go to branch settings and create a \"Branch protection rule\", how do I specify any branch other than 'master'? I've tried a bunch of regex-like expressions, but none seem to work :("}, {"role": "assistant", "content": "GitHub uses fnmatch to match against any pattern provided to find out the branches to which the rule applies for branch protection.\nThere isn't an exact fnmatch pattern for GitHub yet which can resolve to precisely anything other than master, but the pattern closest to it would be:\n*[!master]*\n\nBut this would also exclude branches with only m,a,s,t,e,r or branches with only a combination of those letters.\nCheck out more details on the above on GitHub help and the fnmatch documentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Leaving Github, how to change the origin of a Git repo?\n\nI'm hosting a project in Github, but now I purchased a plan with Dreamhost that includes shell access and Git.\n      Github [Origin]\n       /         \\\n  pull/           \\pull\n     /push     push\\\n    /               \\  \nLaptop           Dreamhost\n(cloned)          (cloned)\n\nI would like to delete my repo from Github, and starting push directly to DH.\nHow do I change origin in my Laptop, and should I delete the origin in Dreamhost?"}, {"role": "assistant", "content": "git remote rename origin github\ngit remote add origin <DreamHost-git-URL>\n# test and make sure the DreamHost origin works properly for fetch and push\ngit remote rm github\n\nI prefer using the 'git remote' command instead of screwing about with the .git/config file by hand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I show the \"up\" and \"down\" arrow keyboard key in GitHub markdown?\n\nHow do I show the \"up\" and \"down\" arrow keyboard keys (\u2190, \u2191, \u2192 and \u2193) in GitHub markdown? So far I am able to show up and down. But how do I show the arrow symbol instead the text \"up\" and \"down\"?"}, {"role": "assistant", "content": "As mentioned in \"Unicode in Github markdown\", you need to  use the decimal value of the characters you want.\nIn your case, the arrow symbols, as shown here:\n\nleft arrow: \u2190 &#8592;\nupward arrow: \u2191 &#8593;\nright arrow: \u2192 &#8594;\ndownward arrow: \u2193 &#8595;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is github asking me username/password although I setup SSH authentication?\n\nI have followed these instructions to set up the SSH key for github. But now when I do\n> git pull\nUsername for 'https://github.com': \n\nin a repository on the local computer I have taken the public SSH key from, I am still asked for a username/password. Did I miss a step?"}, {"role": "assistant", "content": "You need to tell Git to use SSH protocol instead of HTTPS. On the repository page on GitHub, select Clone or Download and Use SSH. You will get a URL for the SSH protocol in the form [email\u00a0protected]:<user>/<repo>.git.\nThen run the following command in your working tree to tell Git to use this URL instead of the current one:\ngit remote set-url origin [email\u00a0protected]:<user>/<repo>.git\n\nThis is also explained in the GitHub Help.\nThe method above won\u2019t cause the repository to be cloned again, it just changes the communication protocol used for future synchronization between your local repo and GitHub.\nAlternatively, you could set up a new remote using git remote add <new-remote-name> <url> and then git pull <new-remote-name> but Git would keep track of both protocols as separate remotes, so I do not recommend this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github enterprise - remote: Password authentication is not available for Git operations\n\nMy git was working fine, then without changing anything than the following problem started to happen,\nI have tried resetting the cache in \n\ncredentials.helper\n\nand have gone through pretty much every stackoverflow answer I could find \nremote: Password authentication is not available for Git operations.\nremote: You must use a personal access token or SSH key.\nremote: See https://github.ibm.com/settings/tokens or\n'https://github.ibm.com/WBurney/Blockchain_SDO.git/': \nThe requested URL returned error: 403\n\nThanks"}, {"role": "assistant", "content": "If you have registered a public ssh key to your GitHub enterprise account, you could side-step the issue using an ssh url\ncd /path/to/repo\ngit remote set-url origin [email\u00a0protected]:WBurney/Blockchain_SDO.git\n\nThen any command like git push/git fetch/git pull/git ls-remote would use the SSH URL set by git remote set-url.\nBut regarding your original issue, try and follow \"Creating a personal access token for the command line\".\nIf you are on Mac, update your credentials from the OSX Keychain.\nYou might need to remove an old cached credential first.\n(As commented by RayLoveless)\nAs drazen Bjelovuk confirms in the comments:\n\nUpdating the password to a personal token in my OSX Keychain worked for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error when push commits with Github: fatal: could not read Username\n\nSince few time, I use Github for my projects and I have an issue when I want to push commits. \nTo beginning, I have forked a repository. Then I have cloned the fork (with command line git clone https://github.com/ ...) and, after doing modifications, I have committed with success (git commit -a).\nAfter this, I have tried to push commits with command line git push but I obtain the following error:\nfatal: could not read Username for 'https://github.com': No such file or directory\n\nHave you got an idea to resolve this issue?"}, {"role": "assistant", "content": "What I had to do was:\ngit remote rm origin\ngit remote add origin '[email\u00a0protected]:username/repo.git'\nThen, I was able to push my changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add image with link in Github's README.md?\n\nHow to add an image that is also a link to an external page on  Github's README.md?\nAdding a markdown to display an image is pretty simple (answer at Add images to README.md on GitHub). Adding a link is also pretty simple (GitHub relative link in Markdown file), but it seems there's is no way to add an image that is also a link to an external site.\n<a href=\"https://stackoverflow.com/\"><img src=\"RELATIVE_PATH_TO_IMAGE></img></a>"}, {"role": "assistant", "content": "Try simply the syntax:\n\n2020: [![name](link to image on GH)](link to your URL)\n2023: [<img src=\"path/to/image.png\">](https://link-to-your-URL/),\nsee my README as an example, from commit a932f85.\nSyntax from DaCuteRaccoon's answer.\n\nThat will wrap the image as a link"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get notifications for commits to a GitHub repository?\n\nI'd like to know what kind of commits are being made to the Lithium framework so I can update (or rollback) when there is something major. \nI'm already watching the repository, but from what I've been able to find, that only shows updates on the github dashboard."}, {"role": "assistant", "content": "Subscribe to Github's RSS feed!\nChoose your news feed (all watched repos), or only Lithium's commit history.\nRSS are made for that ;-)\nPS: I don't see how can you find that useful since there is a couple of commits made each day on various branches, some small typo fixes, others fix bugs, and others introduce new things..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github actions: how to check if current push has new tag (is new release)?\n\nname: test-publish\n\non: [push]\n\njobs:\n  test:\n    strategy:\n      ...\n    steps:\n      ...\n\n  publish:\n    needs: test\n    if: github.event_name == 'push' && github.ref???\n    steps:\n      ...  # eg: publish package to PyPI\n\nWhat should I put in jobs.publish.if in order to check that this commit is new release?\nIs this okay: contains(github.ref, '/tags/')?\nWhat will happen if I push code and tag at the same time?"}, {"role": "assistant", "content": "You could do this to check if the current push event is for a tag starting with v.\n  publish:\n    needs: test\n    if: startsWith(github.ref, 'refs/tags/v')\n\nAs you pointed out though, I don't think you can guarantee that this is a new release. My suggestion would be to use on: release instead of on: push. This will only trigger on a newly tagged release.\nSee the docs for on: release here:\nhttps://docs.github.com/en/actions/reference/events-that-trigger-workflows#release"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to resume review process after updating pull request at GitHub?\n\nI forked GitHub repository and created pull request. Reviewer requested changes from me:\n\n\nChanges requested\n1 review requesting changes by reviewers with write access. Learn more.\n\nI've committed and pushed necessary changes in pull request branch, so they are displaying at pull request page. Now I want ask contributor to continue review my changes.\nIs there any button or action for this? Can't find this."}, {"role": "assistant", "content": "2 years and a half years later, (February 2019), do check if the new button \"Re-request review\" would help.  \nAs illustrated on twitter, if your PR was already reviewed, but now it\u2019s time for round 2: With fresh eyes and fresh code, re-request a review \ud83d\udd03\n\n\nNote/caveat: (from \"Requesting a pull request review\")\n\nPull request authors can't request reviews unless they are either a repository owner or collaborator with write access to the repository.\n\nAs noted in the comments by gertvdijk:\n\nI am a contributor on the project and the owner of the PR.\n  It does not make sense to me that I need to be a collaborator on the project to request a re-review? \nOh, wow, it's by design that PR authors can't use this feature?\n  Damn, that's very much killing the whole feature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to move a branch backwards in git?\n\nThe title is not very clear. What I actually need to do often is the following:\nLet's say I have a development going on with several commits c1,c2,... and 3 branches A,B,C\nc1--c2--c3--(B)--c4--(A,C)\n\nBranch A and C are at the same commit.\nNow I want branch A to go back where B is, so that it looks like this:\nc1--c2--c3--(A,B)--c4--(C)\n\nImportant is that this has to happen locally and on GitHub."}, {"role": "assistant", "content": "Use the reset subcommand:\ngit checkout A\ngit reset --hard B\ngit push --force github\n\nAs a sidenote, you should be careful when using git reset while a branch has been pushed elsewhere already. This may cause trouble to those who have already checked out your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I have my GitHub Pages index.html in a subfolder of the repository?\n\nI'm trying to use GitHub pages to host a Doxygen site. Ideally, I'd like to be able to push the generated files and directories to GitHub without having to tweak them at all.\nThis, however, means that my index.html is in a subfolder of the repository and GitHub Pages isn't picking it up (I get a 404 when I try to access the Pages site). Is there a way to make GitHub recognise that index.html when it's in a subfolder?\nIt is a project site."}, {"role": "assistant", "content": "Create a dummy index.html at the root and put this in your header:\n<meta http-equiv=\"refresh\" content=\"0; url=https://repo.github.io/folder/index.html\">\n\nBe sure to change the destination URL. This will instantly redirect from index.html to your folder/index.html."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "HTML code into README.md on Github\n\nI tried to put some HTML snippets into my README.md on Github but the HTML codes are parsed.\nHow do I do it?\n<h2>Example of code</h2>\n\n<pre>\n    <div class=\"container\">\n        <div class=\"block two first\">\n            <h2>Your title</h2>\n            <div class=\"wrap\">\n                //Your content\n            </div>\n        </div>\n    </div>\n</pre>"}, {"role": "assistant", "content": "Try putting your HTML snippet inside an ```HTML block like this:\n```html\n<h2>Example of code</h2>\n\n<pre>\n    <div class=\"container\">\n        <div class=\"block two first\">\n            <h2>Your title</h2>\n            <div class=\"wrap\">\n            //Your content\n            </div>\n        </div>\n    </div>\n</pre>\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do I need Git to use Github in JetBrains IntelliJ IDEA?\n\nJetBrains IntelliJ IDEA has 2 plugins: Git and Github. Do I need to install Git from http://git-scm.com on my local windows machine in order to upload my files to GitHub through IntelliJ IDEA?"}, {"role": "assistant", "content": "I just came up against the same problem.\nIf you choose not to do the full PATH (environment variable) integration when install git (on Windows) you'll need to tell IntelliJ where to find git.cmd; you can do this in\nSettings > Project Settings > Version Control > VCSs > Git\n\nExample in my case it was portable git looks like this on windows\n\nC:\\Users\\user\\AppData\\Local\\GitHub\\PortableGit_d7effa1a4a322478cd29c826b52a0c118ad3db11\\cmd\\git.exe"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pushing to a private repo\n\nI have been working on my local on a web app and I was ask to push it to an empty(only read me file on it) private repo created just for this project. I'm new to git and I'm having trouble doing so. \nCan someone tell me what am I doing wrong? \nI first navigate to the main folder of the app in my local using command line and initialize git. After, I try cloning the remote repo with:\ngit clone git://github.com/somename/Web-App.git\n\nbut I get the error:\n\nCloning into 'Web-App'... fatal: remote error:    Repository not\n  found.\n\nI know the repo is there.. Do I actually need to clone or pull from that remote first or is there a way to just push to that repo. \nAgain, all I'm trying to do is to get the files that I have in my local pushed to a specific repo that I was given access to. \nI will really appreciate any help."}, {"role": "assistant", "content": "Let us say 'yourWebApp' is the folder you have your local web app. Change it to the directory\ncd 'yourWebApp'\n\nInit git in the folder\ngit init\n\nNow add your github url as a remote\ngit remote add origin git://github.com/somename/Web-App.git\n\nHere origin is the short name for your url\nNow pull the read me file from the github repo\n git pull origin master\n\nNow push your web app to the github repository\ngit push origin master\n\nHere it is assumed that you are in your master, the default branch\nHere pulling your readme files is necessary to merge the readme file with your local work. If your github repository is empty, you can skip the pull and directly push to your github repository.\nOn the other hand, if you want to use clone, there is no need to init as clone automatically sets up git in the directory. clone also sets your remote git url. In that case, your workflow should be\n git clone https://github.com/path/to/your/repo\n make some changes\n git add your changes\n git commit your changes\n git push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add GitHub library as dependency to Android Studio project\n\nI am trying to implement ActionBar-PullToRefresh from https://github.com/chrisbanes/ActionBar-PullToRefresh/wiki/QuickStart-ABC. I just made the switch from Eclipse to Android Studio so I am totally new to AS and Gradle.\nchrisbanes writes on the site:\n\nThe easiest way to add ActionBar-PullToRefresh to your project is via\nGradle, you just need to add the following dependency to your\nbuild.gradle:\n\ndependencies {  \n    mavenCentral()\n    compile 'com.github.chrisbanes.actionbarpulltorefresh:extra-abc:+'\n}\n\nDoes this mean that I don't have to download the library and Gradle takes care of it so that I always have the latest version? I just don't know where to put the above line. I have two gradle.build files one in my root that looks like:\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:0.8.+'\n    }\n}\n\nand the one in my project which looks like:\napply plugin: 'android'\n\ndependencies {\n    compile fileTree(dir: 'libs', include: '*.jar')\n    compile 'com.android.support:support-v4:18.0.+'\n    compile 'com.android.support:appcompat-v7:18.0.+'\n}\n\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion \"19.0.1\"\n\n    sourceSets {\n        main {\n            manifest.srcFile 'AndroidManifest.xml'\n            java.srcDirs = ['src']\n            resources.srcDirs = ['src']\n            aidl.srcDirs = ['src']\n            renderscript.srcDirs = ['src']\n            res.srcDirs = ['res']\n            assets.srcDirs = ['assets']\n        }\n\n        // Move the tests to tests/java, tests/res, etc...\n        instrumentTest.setRoot('tests')\n\n        // Move the build types to build-types/<type>\n        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...\n        // This moves them out of them default location under src/<type>/... which would\n        // conflict with src/ being used by the main source set.\n        // Adding new build types or product flavors should be accompanied\n        // by a similar customization.\n        debug.setRoot('build-types/debug')\n        release.setRoot('build-types/release')\n    }\n}\n\nDo I have to add a repository somewhere?"}, {"role": "assistant", "content": "It will work when you put this line in your project build.gradle, in the dependencies section:\ncompile 'com.github.chrisbanes.actionbarpulltorefresh:extra-abc:+'\n\nAlso, add:\nrepositories {\n    mavenCentral()\n}\n\nSo:\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: '*.jar')\n    compile 'com.android.support:support-v4:18.0.+'\n    compile 'com.android.support:appcompat-v7:18.0.+'\n    compile 'com.github.chrisbanes.actionbarpulltorefresh:extra-abc:+'\n}\n\nGradle will download the needed resources automatically for you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is github 'compare & pull request'\n\nI am working on a MeteorIntegration (feature) branch that is published. I did a git push assuming the push was going to the checked-out branch MeteorIntegration: \nAnd now I see the following on both master and MeteorIntegration branches. \n\nI read github documentation: Closing a pull request and Tidying up Pull Requests but that didn't help, possibly because I am not dealing with a pull request here?\nHow do I get rid of this compare & pull request?"}, {"role": "assistant", "content": "You don't actually have a pull request; GitHub just sees that you've pushed a branch, and is offering to create a pull request for it if you want.\nIf you don't care about that, just ignore it.  It's completely harmless and will go away as soon as GitHub doesn't think the branch is \"recent\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to refer to a previous commit in git commit message\n\nIs there a convention for referring to a previous commit in a git commit message?\nExample commit message:\nFixed bug such and such introduced in a1b2c3e4\n\nIn particular, is there a convention that github.com will understand, and convert to a link?"}, {"role": "assistant", "content": "Yup - GitHub will pick up references to SHAs and users/repos patterns using the GitHub Flavored Markdown\nSpecifically about linking to commits:\n\nA bit of the GitHub spice\nIn addition to the changes in the previous section, certain references are auto-linked:\n\nSHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\n#Num: #1\nUser/#Num: mojombo#1\nUser/Project#Num: mojombo/god#1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I connect my python spyder with github?\n\nIs there any way to connect python spyder with github?\nI manage my R scripts via github, because R provides with\ninterfaces that enables users to commit, pull and push,\nbut I wonder if there is same(or similar) system in python(x,y) spyder.\nI want to manage my python scripts with github, not just locally\nediting my code and manually write change logs on my hand every time."}, {"role": "assistant", "content": "A command line git has been integrated into Spyder.\nhttps://github.com/spyder-ide/spyder/issues/6105\n\nFirst right click the tab corresponding to any file in your repository and click \"set console working directory.\"\nThen go to the Ipython window in Spyder and simply type your git commands (assuming Git is installed and its paths are configured properly) but append a \"!\" to the beginning of your command:\n!git add \"file.py\"\n!git commit -m \"My commit\"\n!git push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What flow causes Github commits that are \"authored\" by one user but \"committed\" by another?\n\nFor example, this commit is claimed to be authored by mattcaswell and committed by richsalz\n\nWhat usage flow could have caused this? Suppose I want a commit which is authored by someone else and committed by me to appear in a repo where I'm a contributor - how would I have that?"}, {"role": "assistant", "content": "Git distinguishes between authors and committers (see Difference between author and committer in Git?). Authors are the people who wrote a specific piece of code - committers are the people who put these changes into the git \"history\".\nNormally both are the same (and doesn't change on merging, cloning, pushing or pulling).\nCausing the two to point to different people can happen on rebasing, editing a commit (e.g. amending), doing a commit on behalf of someone else (e.g.  by specifying --author), applying patches (git am), squashing (e.g., on merge or rebase), or cherry-picking."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Find out the admin(s) for a git repo\n\nI am a contributor for a git repo in github for a company.\nI want to find out who among the contributors are the admins.\nHow do I find out who is the admin besides going around and asking everyone in the company?"}, {"role": "assistant", "content": "If you have push access to this repository, you can use Github API to find collaborators\nYou will need an access token, the endpoint https://api.github.com/repos/ORG/REPO/collaborators gives you a list of all collaborators with the list of permission type for each of them :\n\"permissions\": {\n    \"admin\": true,\n    \"push\": true,\n    \"pull\": true\n  }\n\nYou can use curl and jq (to parse JSON response) like this : \ncurl https://api.github.com/repos/ORG/REPO/collaborators \\\n     -H \"Authorization: Token ACCESS_TOKEN\" | \\\n     jq '[ .[] | select(.permissions.admin == true) | .login ]'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - Find the pull request associated with a commit\n\nI'm trying to find a past pull request to see which comments / actions were made on a particular issue. \nI know the file and the change, so I can get to the commit that introduced it by looking at the blame view. However I can't find a way to look at the pull request that pushed that commit to the branch for the first time. \nIs there a way to do this? Or do I have to go on a trip down memory lane and manually browse through past pull requests?"}, {"role": "assistant", "content": "You can filter your pull requests based on the commit SHA - see here\n\nIf you know the specific SHA hash of a commit, you can use it to search for pull requests that contain that SHA. Note that the SHA syntax must be at least seven characters.\n\n\nFor example:\n\n\ne1109ab\nMatches pull requests with a commit SHA that starts with e1109ab.\n\n\n0eff326d6213c is:merged\nMatches merged pull requests with a commit SHA that starts with 0eff326d6213c."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github contributions graph [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nThere is a wonderful contributions chart that github.com came with.\n\nDoes anybody know if they use some kind of library or gem? \nIf it is open source, I would like to use it my project as well. It looks great!"}, {"role": "assistant", "content": "Not exactly the same style, but I think it's done using the calendar example of D3.js.\nIf you do a \"View Source\" on GitHub's page, you'll see that they're using D3 for rendering their calendar.\nA similar look is achieved by js-chart-widgets."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why has Git allowed me to create two branches with the same name?\n\nI'm still relatively new to Git and I have made a bit of a mess of my repository. I'm hoping there is a way to fix it without re-cloning. \nI have a repository which I have cloned from Github. The repository has several branches. I worked on the master branch for a while but then needed to switch to one of the other branches.\nSo, I had:\n$ git branch --all\n* master\n  remotes/origin/abc\n  remotes/origin/def\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/ghi\n\nProblem: I wanted to switch to the 'abc' branch but instead of doing git checkout remotes/origin/abc I accidentally did git branch remotes/origin/abc which leaves me with the following:\n$ git branch --all\n* master\n  remotes/origin/abc\n  remotes/origin/abc\n  remotes/origin/def\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/ghi\n\nMy questions are:\n\nWhy on Earth does Git allow you to create two branches with the same\nname? \nHow do I identify which is the real remotes/origin/abc branch?\nHow do I remove the unwanted remotes/origin/abc that I created by\naccident?\n\nAny help much appreciated."}, {"role": "assistant", "content": "You can't create two local branches or two distant branches with the same name.\n\nHere you have a local branch named remotes/origin/abc and a distant branch named abc on the remote origin. They have not the same name, but it seems to when you use the git branch --all command.\nTo identify which branch is which, you can show local branches with git branch, or show remote branches with git branch --remote. You could also easily differentiate them even while using git branch --all with the branch syntax coloration (git config --global color.branch auto).\nTo remove the accidentally created local branch abc, you have to do git branch -d abc (or git branch -D abc to force deletion, see man git-branch)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove html extension from GitHub Pages\n\nI'm using GitHub pages to host my latest site:\nhttp://mysite.github.io/\n\nI was wondering if there was a way to remove the .html extension from the end of sub-pages:\nhttp://mysite.github.io/contact.html\n\nsince there is no access to the server."}, {"role": "assistant", "content": "It already works and you don't have to do anything\nI'm not sure if you are already aware of that or not but to remove .html extension from GitHub Pages all you have to do is remove .html extension from your links.\nIn other words it already works and you don't have to do anything. You don't have to use subdirectories, CNAME, redirects, Jekyll _config.yml, YAML front-matter or any other hack suggested in all of the answers here.\nExamples\nFor example you can use:\n\nhttps://rsp.github.io/gh-pages-no-extension/test1\n\ninstead of:\n\nhttps://rsp.github.io/gh-pages-no-extension/test1.html\n\nand it displays the same file.\nJust change the links in your links and that's it.\nTests\nI made some tests to demonstrate how it really works where you can click links and it highlights which file is loaded with which URL, including warnings about insecure redirects in certain cases.\nFor eaxample, the link:\n\nhttps://rsp.github.io/gh-pages-no-extension/test1\n\nshows that it is displayed by the test1 in the URL but actually displays the file test1.html:\n\nProblems with other solutions\nUsing things like index.html in special subdirectories as suggested here in other answers will not do what you want, which is simply serving the example.com/name.html when asked for example.com/name, but would instead give you a 301 redirect to example.com/name/ (note the trailing slash) which in turn would give you the contents of example.com/name/index.html file.\nThat leads to the following problems: you are in a different directory and you need to use <a href=\"../name\"> instead of just <a href=\"name\"> for links to other pages on the same level and the same goes for all assets (or you can use absolute paths as someone suggested which is not a good idea on GitHub pages - especially project pages - because after forks and projects renaming you have to remember to update all of the links and js/css assets in all of the html files).\nThe other thing is that now you have a useless redirect for every navigation - which incidentally redirects from HTTPS to HTTP (from secure URLs without the slash to insecure URLs with a slash), e.g. see:\n\nhttps://rsp.github.io/gh-pages-no-extension/dir (secure HTTPS)\n\nwhich (at the time of writing) redirects to:\n\nhttp://rsp.github.io/gh-pages-no-extension/dir/ (insecure HTTP)\n\nand NOT to:\n\nhttps://rsp.github.io/gh-pages-no-extension/dir/ (secure HTTPS)\n\nas you might expect, so make sure that you are aware of that. See:\n\n(Note that this image is linked to a secure HTTPS URL but you end up using an insecure HTTP connection - you may need to use incognito mode to see that.)\nThis is how the headers look like, as of June 17, 2016:\n$ curl -I https://rsp.github.io/gh-pages-no-extension/dir\nHTTP/1.1 301 Moved Permanently\nServer: GitHub.com\nContent-Type: text/html\nLocation: http://rsp.github.io/gh-pages-no-extension/dir/\n...       ^^^^\n\nHopefully GitHub will fix that in the future.\n(I discovered it when I was writing this answer almost a year ago and this problem is still present as of June 2016.)\nThough strangely enough, as of June 17, 2016 (I'm not sure if it always was the case because I noticed it recently while updating this answer) this URL:\n\nhttps://rsp.github.io/gh-pages-no-extension (secure HTTPS)\n\nredirects to:\n\nhttps://rsp.github.io/gh-pages-no-extension/ (secure HTTPS)\n\nas it should. See the headers:\n$ curl -I https://rsp.github.io/gh-pages-no-extension\nHTTP/1.1 301 Moved Permanently\nServer: GitHub.com\nContent-Type: text/html\nLocation: https://rsp.github.io/gh-pages-no-extension/\n...       ^^^^^\n\nThe only difference is that it is a project root URL and not a deeper directory inside the project (see the project structure) so the buggy redirect seems to be present only in deep links inside a project's GitHub Pages and on one browser I tested only when you use incognito mode.\nThe bottom line is that you need to be careful. My advice would be to avoid all redirects altogether and only use those URLs that don't result in any redirects at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I change my author name on GitHub?\n\nI'm new to web development and GitHub. When I commit any changes, these changes are reflected on my GitHub repo under \"unknown (author)\". How do I change this to reflect my name/email address?\nThanks."}, {"role": "assistant", "content": "$ git config --global user.name \"Scott Chacon\"\n$ git config --global user.email \"[email\u00a0protected]\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git pull error \"The requested URL returned error: 503 while accessing\"\n\nI've been facing problems accessing my git repository lately.  It worked perfectly fine earlier but now I cannot run any command on CLI. I can however, access the corresponding Web Page, Could someone help me how to resolve this issue?"}, {"role": "assistant", "content": "Had the same error while using SourceTree connected to BitBucket repository.\nWhen navigating to repository url on bitbucket.org the warning message appeared:\n\nThis repository is in read-only mode. You caught us doing some quick maintenance.\n\nAfter around 2 hours repository was accessible again.\nYou can check status and uptime of bitbucket here:\nhttp://status.bitbucket.org/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Dynamically retrieve GitHub Actions secret\n\nI'm trying to dynamically pull back a GitHub secret using GitHub Actions at runtime:\nLet's say I have two GitHub Secrets:\n\nSECRET_ORANGES : \"This is an orange secret\"\nSECRET_APPLES : \"This is an apple secret\"\n\nIn my GitHub Action, I have another env variable which will differ between branches\nenv:\n  FRUIT_NAME: APPLES\n\nEssentially I want to find a way to do some sort of variable substitution to get the correct secret. So in one of my child jobs, I want to do something like:\nenv:\n  FRUIT_SECRET: {{ 'SECRET_' + env.FRUIT_NAME }}\n\nI've tried the following approaches with no luck:\nsecrets['SECRET_$FRUIT_NAME'] }}\n\nI even tried a simpler approach without concatenation just to try and get it working\nsecrets['$FRUIT_NAME'] }}\n\nand\n{{ secrets.$FRUIT_NAME }}\n\n\nNone of the above worked.\nApologies if I have not explained this very well. I tried to keep my example as simple as possible.\nAnyone have any idea of how to achieve this?\nAlternatively, what I am trying to do is to store secrets on a per-branch basis\nFor example:\nIn customer1 code branch:\nSECRET_CREDENTIAL=\"abc123\"\nIn customer2 code branch:\nSECRET_CREDENTIAL=\"def456\"\nThen I can access the correct value for SECRET_CREDENTIAL depending on which branch I am in.\nThanks!\nUpdate: I'm getting a bit closer to what I am trying to achieve:\nname: Test\n\nenv:\n  CUSTOMER: CUSTOMER1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      AWS_ACCESS_KEY_ID: ${{ env.CUSTOMER }}_AWS_ACCESS_KEY_ID\n    steps:\n    - uses: actions/checkout@v2\n    - run: |\n        AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_ACCESS_KEY_ID] }}\n        echo \"AWS_ACCESS_KEY_ID = $AWS_ACCESS_KEY_ID\""}, {"role": "assistant", "content": "There is a much cleaner option to achieve this using the format function.\nGiven set secrets DEV_A and TEST_A, the following two jobs will use those two secrets:\nname: Secrets\n\non: [push]\n\njobs:\n\n  dev:\n    name: dev\n    runs-on: ubuntu-18.04\n    env:\n      ENVIRONMENT: DEV\n    steps:\n      - run: echo ${{ secrets[format('{0}_A', env.ENVIRONMENT)] }}\n\n  test:\n    name: test\n    runs-on: ubuntu-18.04\n    env:\n      ENVIRONMENT: TEST\n    steps:\n      - run: echo ${{ secrets[format('{0}_A', env.ENVIRONMENT)] }}\n\nThis also works with input provided through manual workflows (the workflow_dispatch event):\nname: Secrets\n\non:\n  workflow_dispatch:\n    inputs:\n      env:\n        description: \"Environment to deploy to\"\n        required: true\n\njobs:\n  secrets:\n    name: secrets\n    runs-on: ubuntu-18.04\n    steps:\n      - run: echo ${{ secrets[format('{0}_A', github.event.inputs.env)] }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "IntelliJ cannot log in to GitHub\n\nFor some reason, a new IntelliJ installation is unable to log in to GitHub. (The credentials are correct.)\nIt happens both when I try to \"share project on githu\" and \"checkout project from version control\", select Git and then try to log in to GitHub.\nHere's the login prompt:\nServer: github.com\nLogin: <my username>\nPassword: <my password>\n\nAnd the error message:\nInvalid authentication data. Can't create token:\nscopes - [repo, gist] - not IntelliJ Plugin_1 422\nUnprocessable Entity - Validation Failed\n[OauthAccess; description]already_exists: null\n\nNow, this is on a freshly installed Windows 10 computer, with a freshly installed IntelliJ. So there are no old tokens or anything like that anywhere in the system. This is the first attempt to access GitHub from IntelliJ. Logging in via web works fine."}, {"role": "assistant", "content": "That kind of error messages can be frustrating, as it takes more than a little knowledge on the subject to understand exactly what is wrong. Usually, however, the problem is either the authentication (invalid username/email/password) or that there's a problem with git (locally).\nFirst of all, check that you have git installed by running \"git\" from the command prompt. This is a more common mistake than one would think.\nSecond, try y.bedrov's suggestion. Log in to github.com on the web. Settings -> Developer settings -> Personal access tokens. Create a new token and then, in IntelliJ, select Enter Token at the login prompt.\nTokens are considered a more secure way to authenticate, I believe."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get Composer to download the latest commit in the master branch from GitHub for a package?\n\nI am trying to get Composer do download the latest commit for the Behat/MinkSelenium2Driver package. That particular repo only has a master branch. I have tried every method I can think of, including deleting the files and letting it pull them back in, to get it to work but it doesn't.\nHow would I get it to pull in latest committed files or at least those from the commit I list below?\nSpecifically I want to get this commit:\nhttps://github.com/Behat/MinkSelenium2Driver/commit/2e73d8134ec8526b6e742f05c146fec2d5e1b8d6\nThanks,\nPatrick"}, {"role": "assistant", "content": "There is only one way to grab the head of the repository: \n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master\" }\n\"minimum-stability\": \"dev\"\n\nOh well, at least two ways:\n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master as 1.1.x-dev\" }\n\"minimum-stability\": \"dev\"\n\nProbably at least three ways:\n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master#2e73d8134ec8526b6e742f05c146fec2d5e1b8d6\" }\n\"minimum-stability\": \"dev\"\n\nBecause that repository actually aliased the master branch as 1.1.x-dev, this would also work without the minimum-stability affecting all other packages:\n\"require\": { \"behat/mink-selenium2-driver\" : \"1.1.*@dev\" }"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Elegant solution to prevent force push on master only\n\nI'm trying to figure out a good way to prevent developers from force pushing master with Git. We used GitHub to host our remote repositories so a pre-receive hook isn't an option. Any other solutions that could easily be implemented for a team of developers?\nAs a side note, I don't want to disable force pushing in general. Sometimes it is a necessary evil. But that said, force pushing on master cannot happen."}, {"role": "assistant", "content": "Update\nGithub has since introduced the concept of protected branches. It can be found under Settings -> Branches -> Protected Branches \nThis \"protection\" can be enabled for any branch, and for any user, including admins.\nMore details here - https://help.github.com/articles/defining-the-mergeability-of-pull-requests/\n\nYou cannot prevent this in Github.\nWhat you can do is have an intermediate repo on your side, run a pre-receive hook in that to prevent force push and push from this intermediate repo to github and block access for direct push to github. Yeah this is not elegant and you lose lots of features with Github, but I don't see any other way.\nEdit: Just came across this answer, which says the same and gives another workaround: GitHub - prevent collaborators from using push -f"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github committing (push) gist\n\nI cannot understand this.\nI have created a gist. Then I run\n$ mkdir mygist\n$ cd mygist\n$ git init\n$ git pull [email\u00a0protected]:869085.git\nThen I add files, change files and try to commit.\n$ git add .\n$ git commit -a -m \"Better comments\"\nThen I do not know how to send it back to github and commit this git."}, {"role": "assistant", "content": "It's probably easiest if you just start by cloning the gist, so that origin (a \"remote\" that refers to the original repository) is set up for you.  Then you can just do git push origin master.  For example:\ngit clone [email\u00a0protected]:869085.git mygist\ncd mygist\n# Make your changes...\ngit add .\ngit commit -m \"Better comments\"\ngit push origin master\n\nHowever, if you don't want to redo your changes, you can do:\ncd mygist\ngit remote add origin [email\u00a0protected]:869085.git\ngit fetch origin\n# Push your changes, also setting the upstream for master:\ngit push -u origin master\n\nStrictly speaking, the git fetch origin and -u argument to git push origin master are optional, but they will helpfully associate the upstream branch master in origin with your local branch master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I merge a pull request on someone else's project in git?\n\nI cloned this repo on my computer: https://github.com/derobins/wmd.git\nThere are several bugs with it though, and it looks like another user has fixed them and issued \"Pull requests\" (I assume these are requests for their changes to be committed?)\nIs it possible to merge those changes into my local version?\nEDIT: just to be clear, this is not my repository. I am using the WMD editor from derobins, but it has several bugs which those pull requests purport to fix. I have cloned the repo on Ubuntu (not in github) and was hoping to merge those changes in if possible."}, {"role": "assistant", "content": "(GitHub has very thorough documentation on how to deal with pull requests.)\nEssentially, you'll want to add a remote for the repository of the person who made the pull requests, e.g.:\ngit remote add helpful git://github.com/helpful-person/whatever.git\n\n... then fetch their changes into remote-tracking branches:\ngit fetch helpful\n\n... so that now you have all the commits from that person's GitHub repository in your clone of the upstream repository.  If you look at the additional commits within that pull request you could:\n\nmerge the latest one, e.g. git merge 75708aeab5\ncherry pick each of those changes, e.g. git cherry-pick 2142db89, git cherry-pick 75708aeab5\ncreate a local branch to work on them further, e.g. git checkout -b fix-for-issue3 75708aeab5\netc. etc.\n\nAn alternative is to just clone the repository of the contributor who made the pull requests instead, if that's the same but for those fixes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Including js from raw.github.com\n\nI have a github.com demo page that is linking to https://raw.github.com/.../master/.../file.js so that I don't need to always copy the .js file over to the gh-pages branch every time it's changed.  This works in every browser except IE which complains:\n\nSEC7112: Script from https://raw.github.com/cwolves/jQuery-iMask/master/dist/jquery-imask-min.js was blocked due to mime type mismatch\n\nThis complaint is coming from the fact that the file is transferred with:\nX-Content-Type-Options: nosniff\nContent-Type: text/plain\n\nwhich I can't change.\nAnyone have any ideas how to accomplish this same thing?  Somehow allowing me to link to the file in the master branch without having to always push it to the gh-pages branch?\nActual page: http://cwolves.github.com/jQuery-iMask/\n(Minor update -- I changed the gh-pages in this exact instance to include the .js file, so IE is no longer broken, but would still like any feedback :))"}, {"role": "assistant", "content": "You can try using https://rawgit.com/ service.\nJust replace raw.github.com with rawgit.com\nUPDATE \nThe Rawgit service (former Rawgithub) has been shutdown. \n\nRawGit has reached the end of its useful life\n  October 8, 2018\nGitHub repositories that served content through RawGit within the last month will continue to be served until at least October of 2019. URLs for other repositories are no longer being served.\nIf you're currently using RawGit, please stop using it as soon as you can."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I rename branch on the GitHub website?\n\nI don't know how to run command line stuff. I just don\u2019t have the\u00a0environment.\nSo I'm trying to rename a branch on the GitHub\u00a0website. It was, by default, named patch-1.\nIs it possible to rename it on the\u00a0site?"}, {"role": "assistant", "content": "I just did it without downloading any code to my laptop and using only the GitHub\u00a0site.\nThe solution looks the same as @swcool\u2019s, but I want to add about the default branch.\nIn my case, the name of the renaming branch did not exist.\n\nChange the default branch (to the old branch you want to rename)\nCreate a new branch (with a new name) \nThis action will copy all the contents of the default branch (the branch with the old name) to the new branch (with a new\u00a0name). At this time, you have two branches with the same\u00a0code.\nChange the default branch\u00a0(to the new one with a new\u00a0name)\nDelete the old branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I view someone's comment history on GitHub?\n\nIt's easy to see someone's commit history on GitHub, at least the recent one, but is there a way to see all comments they've made there?"}, {"role": "assistant", "content": "Search for commenter:username in the main Github search box.\nFor example commenter:gavinandresen\nTo see recent activity, select Recently updated from Sort dropdown\nYou can also narrow the search: is:issue commenter:gavinandresen"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Local git config not overriding global user for project\n\nI have a global git user configured, but want to use a different user for a single git project.\nWithin that project, I've used git config --local user.name \"localuser\" and git config --local user.email \"[email\u00a0protected]\" to set the local project's user and email.\nHowever, when I try to push to my remote on github, I get this error:\nremote: Permission to localuser/repo.git denied to globaluser.\nfatal: unable to access 'https://github.com/localuser/repo.git/': The requested URL returned error: 403\n\nHere's some output that might help with diagnosis:\ngit remote -v:\ngithub  https://github.com/localuser/repo.git (fetch)\ngithub  https://github.com/localuser/repo.git (push)\n\ngit config --list:\nuser.name=globaluser\n[email\u00a0protected]\n...\n\ngit config --local --list:\nuser.name=localuser\n[email\u00a0protected]\n...\n\ngit config user.name:\nlocaluser"}, {"role": "assistant", "content": "I had committed my changes and received a permission denied with my global user. Subsequently setting the local user did nothing, though git config user.name reported the correct local user.\nWhat worked was (courtesy of this google groups thread):\ngit commit --amend --reset-author\nI presume the committed changes had the original author attached."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git status (nothing to commit, working directory clean), however with changes commited\n\nI found many questions with similar subject, but I didn't found any practical guidance about this issue: why git status informs me nothing to commit, working directory clean, even tough I have made a modification at my local branch?\nHere are the steps which I followed:\n\ngit init [On branch master - Initial commit, nothing to commit (create/copy files and use \"git add\" to track)]\ngit remote add https://github.com/username/project.git\ngit pull origin master\ntouch test\ngit add test\ngit commit -m \"Adding file for test purposes only.\"\ngit status [On branch master - nothing to commit, working directory clean]\n\nIf I do a git push, the modification is committed to the remote branch. I just want to perform \"git status\" after my modifications, and receive the information that I have changes on my local branch that must be pushed to the remote branch of the project.\nWhat's going on?"}, {"role": "assistant", "content": "Your local branch doesn't know about the remote branch. If you don't tell git that your local branch (master) is supposed to compare itself to the remote counterpart (origin/master in this case); then git status won't tell you the difference between your branch and the remote one. So you should use:\ngit branch --set-upstream-to origin/master\n\nor with the short option:\ngit branch -u origin/master\n\nThis options --set-upstream-to (or -u in short) was introduced in git 1.8.0.\nOnce you have set this option; git status will show you something like:\n# Your branch is ahead of 'origin/master' by 1 commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How secure would github hosting be for private repositories? [closed]\n\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have read this thread but I'm wondering how secure such a solution would be? I know that github offers ssh/ssl support and am familiar but could someone give me a breakdown of what sort of internal security they would use to make sure my committed conf/credential files don't get hacked?\nEDIT: I've read http://help.github.com/security/ but I would like an answer from someone who has worked with multiple repository hosts and has real-world experience with this."}, {"role": "assistant", "content": "We tried out github recently.\nCompared with our previous git hosting (which was on our own linux virtual server), I'm not overly impressed with the security. We did decide to use it, but only for projects where keeping the code private wasn't a huge concern.\nNamely:\n\nThere's no company control at all over the user accounts. We control which users have access to our repository, but there's no password policies, the users pick their own email addresses, etc.\nThere's no way to limit access by IP address\nPasswords can only be reset by the user\nCompromising the users email account (which we're unable to see what account they've set it to) also results in a compromise of their github account, as they use an email challenge to reset forgotten passwords.\nThere's no access logs (there is an audit trail for most or possibly all changes, but no logging at all for access)\nAccess to the web front end is only password protected, so is vulnerable to password reuse from other sites and to some extent to brute forcing (github's statement about what they do for failed logins is pretty unclear).\n\nOne or two of these we could live, but in combination they basically make github completely unsuitable.\nThey have added 2 factor authentication recently, and there is an API so that organisations can at least check if users with access to their repositories have two factor authentication enabled. Whilst I don't feel this is really the best solution, it probably just about moves github into being secure enough that it can be considered for private repos.\nAs mt3 notes, you can run an enterprise install instead, which presumably significantly improves security - but the cost difference between that and a standard github company account is staggering, and it would probably mean you miss out on all the third party tools that integrate with github.\nOn a non-security note, they do at least now support annual billing properly, which helps reduce the paperwork overhead.\nGitHub have recently announced new business plans with extra features - this could solve '1'/'4'/'5'. (Though the 'uptime guarantee' that's part of it is pretty laughable - not even \"four 9s\", and excludes scheduled maintenance and anything they deem 'outside their reasonable control' - and it's not an actual guarantee, it's just a small credit against your next bill which is capped to be no more than a third of your bill. Basically very carefully worded marketing weasel words instead of any kind of commitment from them.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Mirroring a HG project from Bitbucket to Github\n\nIs there an efficient workflow to mirror a project that is mainly hosted on bitbucket using Hg, to github?"}, {"role": "assistant", "content": "You could use a tool like hg-git to:\n\n\nsetup a Git repository somewhere that you have push access to, \nand then run hg push [path] from within your project. For example:\n\n\n$ cd hg-git # (a Mercurial repository)\n$ hg bookmark -r default master # make a bookmark of master for default, so a ref gets created\n$ hg push git+ssh://[email\u00a0protected]/schacon/hg-git.git\n$ hg push\n\n\nThis will convert all our Mercurial data into Git objects and push them up to the Git server.\n  You can also put that path in the [paths] section of .hg/hgrc and then push to it by name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to disable the automatic linking of images in github markdown rendering?\n\nWhen github.com renders an image in a readme.md, it automatically links the image in an a tag.\nUsing either\n![][http://example.com/path/image]\n\nor\n<img src=\"http://example.com/path/image\" />\n\nThe actual rendered content will appear as\n<a href=\"https://camo.githubusercontent.com/8a545f12e16ff12fd....\" target=\"_blank\"><img src=\"https://camo.githubusercontent.com/8a545f12e16ff12f...\" alt=\"\" data-canonical-src=\"http://example.com/path/image\" style=\"max-width:100%;\"></a>\n\nI understand the github image caching (on camo.githubusercontent.com), and that's fine, but I don't want the a tag to wrap my image.\nI'm not sure if this is part of the github flavored automatic URL linking, or something specific images.\nI am able to provide my own link (using my own a tag), but what I really want is no link, no a tag.\nIs this possible?\nthanks!"}, {"role": "assistant", "content": "You can wrap the image in a link that points to #:\n[![](http://example.com/path/image)](#)\n\n<a href=\"#\"><img src=\"http://example.com/path/image\" /></a>\n\nIt will still be clickable, but won't open a new page, at least."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Proper way to use Gitflow with pull requests\n\nI would like to adopt the git-flow tool inside my team.\nThe problem is that \"git flow feature finish\" merges the branches locally.\nAnd I want to create a pull request instead. Thus, the merge will happen in the origin.\nSo, what is the right way to use the git-flow tool in teams that also work with pull requests?\nTried to google it but could not find something meaningful."}, {"role": "assistant", "content": "You can just use the git flow feature publish <name>this will publish your feature branch to your origin (like Bitbucket).  Then you can create the pull request there and merge it into develop.  After that is done, you need to manually delete the local feature branch.\nThe only command you can not use is git flow feature finish <name>.  This works fairly well and you can still use most of the git flow helpers.\nThe same goes for releases.  I found this article helpfull: https://blog.axosoft.com/pull-requests-gitflow/\nAs well as https://community.atlassian.com/t5/Bitbucket-questions/git-flow-feature-finish-and-pull-request/qaq-p/347877\nHope this helps a little.  There is just not the one perfect solution to this problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting up Git on EC2 to pull from GitHub repo\n\nI'm kind of new to both EC2 and Git, and I have just set up my first instance of EC2, using a clean Amazon Linux AMI. I also installed MySQL, Apache and PHP and opened some ports to make it work as a normal web server, responding to an elastic IP as well.\nNow, my code is on a private repo on GitHub, and I would like to perform simple deployments by doing git pull or something like that. Git is also installed on the server already. I know I could set up my git repo on the server using my personal ssh key, but it seems odd. I guess another solution would be to create a new GitHub user and use it on the server, but it doesn't seem right either.\nHow do I achieve this in an elegant, safe way?"}, {"role": "assistant", "content": "To avoid having to keep an SSH private key on your EC2 instance, people often use a workflow that involves pushing to that remote server in order to deploy.  Essentially, you set up a bare git repository there with a pre-receive hook that deploys to another directory.  There is a simple example of doing this in this tutorial.  Then you only need to have your SSH public key in ~/.ssh/authorized_keys on the server.  However, with this workflow, you couldn't deploy directly from your GitHub repository - you would need to pull it locally and then push to the EC2 machine.\nAn alternative is to use GitHub's deploy keys mechanism.  This would involve creating a new SSH key-pair on your EC2 instance, and adding the public key as a deploy key into your private repository on GitHub.  Then you can pull directly from your private GitHub repository to your EC2 instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Comparison View for 2 branches is incorrect?\n\nWhen I do a Github comparison view between master and another branch A, Github seems to be comparing the HEAD version of A with an older, non head version of master.\nI looked into it, and from what I can tell it sounds like Github is comparing branch A against a common ancestor of master. It's not actually comparing it to what's currently at the HEAD of master.\nIs there a way to diff the HEAD of master against the HEAD of Branch A in Github?\nIf not, why not? This seems like a feature every developer would want to be able to do. Or is there some process that should be done that I'm perhaps missing? I'd like to be able to create a Pull Request directly from one of these diffs.\nEDIT: Here's an example repo that shows the problem\nhttps://github.com/bradparks/test_github_diff_view\n\nI created a new repo that contains a single file, README.md\nI set this file to contain a single line v100.\nI then branched master into a new branch A, and changed the line to `v200'\nI then changed the value in the master branch to 'v300', and  then compared the 2 branches using the compare link\nhttps://github.com/bradparks/test_github_diff_view/compare/A\nand I see the following unexpected result. Why isn't it diffing against v300 instead of v100?"}, {"role": "assistant", "content": "Is there a way to diff the HEAD of master against the HEAD of Branch A in Github?\n\nSept 2018: yes: GitHub now explicitly supports \"Three-dot and two-dot Git diff comparisons\". See an example here.\nkeisuke mentions in the comments a similar initiative on Bitbucket.\nOriginal answer 2015:\nNo: as mentioned in \"GitHub compare view for current versions of branches\", GitHub only supports the triple dots (...) range shortcut specification.\nThat is:\n\nThis form is to view the changes on the branch containing and up to the second , starting at a common ancestor of both.\n\"git diff A...B\" is equivalent to \"git diff $(git-merge-base A B) B\".\nYou can omit any one of , which has the same effect as using HEAD instead.\n\nThe official GitHub help mentions this feature as:\n\nThe most common use of Compare is to compare branches, such as when you're starting a new Pull Request.\n\nIn that scenario, the PR branch starts from master (or should be rebased on top of master anyway), which means master HEAD is the base between master and the PR branch.\nBut when the two branches have forked, the comparison is no longer between HEADs, but between one common ancestor and one HEAD: git diff $(git-merge-base master B) B.\nNote: even if you were to specify two SHA1 directly, as it is clearly documented in \"Comparing commits\", that would still do a git diff $(git-merge-base A B) B.\nThat would not do a diff directly between the two commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Intuitive way to view most active fork in GitHub\n\nThis is a network graph of a GitHub repository:\n\nThere is no indication of which fork has the most stars and watchers. The commits may be simple updates to documentation files, for example.\nIs there a way to evaluate forks in GitHub to determine which ones are more active/popular?"}, {"role": "assistant", "content": "I don't know of one, but you could probably write one easily given the breadth of API wrappers out there. An example with github3.py would be\nimport github3\n\nr = github3.repository('owner', 'repo_name')\nmost_watched = next(r.iter_forks(sort='watchers', number=1))\n\nAs best I know, you cannot sort on stars and repositories don't have that information returned to them. You could, however, sort on forks but you would have to do it by hand.\nThe above example is two lines but you can achieve the same thing like so:\ncurl https://api.github.com/repos/owner/repo_name/forks?sort=watchers\n\nThat won't limit how many results you get, though."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Post Commit Hook Not Running\n\nMy post commit hook is not running after git.  I have verified that the hook does work if I just run it from the terminal.  The code in the hook is:\n#!/bin/sh\n#.git/hooks/post-commit\n# An example hook script that is called after a successful\n# commit is made.\n#\n# To enable this hook, rename this file to \"post-commit\".\n\nperl -pi -e 's/([a-f0-9]+)$/'$( git rev-parse HEAD )/ ../../config/commit.git\n\nI did rename the file to post-commit in ./.git/hooks/ and the permissions are -rwxr-x-r-x so I am not sure why it doesn't work."}, {"role": "assistant", "content": "I'll leave this here as an answer because I stumbled upon my own answer for when my post-commit hook wasn't running: \nchmod +x .git/hooks/post-commit\nProbably applies to any kind of hook. \nIn fact, probably applies to any kind of script."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Removing contributor from github.com?\n\nHow to remove contributor from showing in the main page of project:\n\nLink https://help.github.com/articles/removing-a-collaborator-from-a-personal-repository/ says it possible in settings, but I dont see any collaborator in there:"}, {"role": "assistant", "content": "The below method works in my case at least.\n\nIn the GitHub web interface, change a branch name (From main to main1 for example). You can do that from the url https://github.com/[user]/[repo]/branches. It will update the contributor list on the repository dashboard.\n\n\nThen change the name back (main1 to main).\n\n\nI have multiple GitHub accounts for different projects and different communities and I accidentally pushed a commit using a wrong account. I changed the author of the commit, but the wrong account was still on the contributors list in the repository dashboard.\nMy method keeps the commit history as well as the GitHub action settings and issue history. But I did not check if pull requests are kept."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push error: RPC failed; result=56, HTTP code = 200 fatal: The remote end hung up unexpectedly fatal\n\nWhile doing git push, I receive this error:\nUsername for 'https://github.com': Newbie\nPassword for 'https://[email\u00a0protected]':\nCounting objects: 11507, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (8210/8210), done.\nWriting objects: 100% (11506/11506), 21.75 MiB | 0 bytes/s, done.\nTotal 11506 (delta 2213), reused 11504 (delta 2211)\nefrror: RPC failed; result=56, HTTP code = 200\natal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\nEverything up-to-date\n\nI also tried doing: git config http.postBuffer 524288000, but still error..\nAlso tried: git config --global http.postBuffer 2M by referring on git push error: RPC failed; result=56, HTTP code = 0\nPlease can anyone help me out with this?"}, {"role": "assistant", "content": "Look here: https://flyingtomoon.com/2011/04/12/git-push-is-failed-due-to-rpc-failure-result56/\nThe problem is most likely because your git buffer is too low.\nYou will need to increase Git\u2019s HTTP buffer by setting the git config var \u201chttp.postBuffer\u201d to 524288000.\ngit config http.postBuffer 524288000"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I completely remove Git from an Android Studio project?\n\nI'm developing my first project with Android Studio and can't quite get Git and GitHub configured properly. I'd like to completely remove my project from Git/Git from my project and start fresh. How can I do this? Also, there is no .git folder in my project folder, so where are my git files stored locally and how can I completely start over with Git and GitHub?\nI've set VCS to 'None' in Settings -> Version Control, but I don't think this removes Git. The directory shows as \"Unregistered roots\". I was also wondering if it is normal to have several directories showing in this view? At times I've had  and some directory, and at the moment I have my project directory and as Unregistered root \"app ( [my app directory] )\"...\nAt one point I managed to push stuff onto GitHub, but only some of my project files. Others, which I added to the project after the initial commit, showed up as unversioned, I added them and tried to commit and push, but couldn't. Also, they went back to unversioned every time I built my project. This is why I'd like to completely start over"}, {"role": "assistant", "content": "From Android Studio Preferences,(My Android Studio version 3.6.1)\nSelect Version Control->Select git Path-> Click ' - ' (minus button)->OK\nWindows: File > Settings > Version Control > Select Project > '-' (Minus Button) >Apply > Ok\nUPDATE:\nCurrently google updated this settings.So if you want to delete GitHub connection from your project  Open android Studio Settings ->Version Control ->Github -> click ' - ' (minus button) -> Apply -> OK"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I Git clone a specific release?\n\nSo that's it; I finished the very first version of my application.\nI committed the final state of the first version:\ngit commit -m \"some final tweaks\"\n\nAnd created the versioning tag:\ngit tag v1.0.0\n\nAnd pushed everything remotely.\nNow, I am in the process of starting developing the second version of the application with some improvements I already have in mind.\nIs it possible, later, when I'd made these improvements and commit and create a new tag (v2.0.0), to Git clone a specific state of Git providing a tag?\nIf the last version is v2.0.0, can I still clone the version 1.0.x?\nSomething like git clone [email\u00a0protected]:mygitname/theproject.git#1.0.2 for instance?"}, {"role": "assistant", "content": "You can do this with the --branch flag, which will also accept a tag.\ngit clone  [email\u00a0protected]:mygitname/theproject.git --branch 1.0.2\n\nIn most cases, you will just want to checkout the tag as described in Exprator's answer (now deleted)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding commits to another person's pull request on GitHub\n\nMy project on GitHub has received a pull request. The pull request only partly fixes the issue that it's addressing. I've pulled in the changes to a local branch and added some commits of my own.\nI'd now like to push those commits back to my remote repo and have them show up on the pull request, but without merging them into the target branch. I'd like to keep the pull request open for further review and discussion, and potentially further commits.\nIs there a way I can add commits to the pull request without merging them into the target branch and therefore closing the pull request?"}, {"role": "assistant", "content": "As long as the original author has clicked the checkbox in the bottom right:\n\nIf that box is checked, then you can push back to the original branch without needing to add a remote by using:\ngit push [email\u00a0protected]:user/repo local_branch_name:remote_branch_name\n\nThis is particularly useful if you're using a tool like hub where you can check out a pull request without needing to add a remote.\nEdit: You also need to have write access to the repository where the PR has been opened.\nFurther Edit: The new command line tool from GitHub does a good job of checking out PRs so that you can just use git push as is to push updates to remotes (assuming you have permission)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get github username by id\n\nUsing this link I can see that my (tonylampada) id on github is 218821\nhttps://api.github.com/users/tonylampada\nHow could I do the opposite? Given the user id = 218821, what's the username?\n\nUpdate\nAnswering nulltoken here because it's a long story and it won't fit in a comment.\nFreedomSponsors is a django application that uses django-social-auth to enable login with Github (and others).\n(You should check it out, btw, please see the about page in the blog :-)\nDjango-social-auth has a configuration flag that allows the application to store the github username on the database.\nA few days ago I deployed a new version of FS with github login enabled, but with \"storeGithubUsername\" set to false.\nA few users registered their github accounts, and now the database has their github ids, but not their usernames.\nYou can se in my profile that I have github as a \"connected account\" but there's no link to my github page.\nI need it to make the link point to https://github.com/tonylampada\nI'm ready to deploy a new version that fixes this, by setting the \"storeGithubUsername\" (that's not what it is called, I'm just simplifying here) to true.\nBut I'd like to patch the database with the already github-registered users. I have their github ids, but not their github usernames."}, {"role": "assistant", "content": "We need to do this on Gitter to deal with the situation where a user has changed their username on GitHub and we get a 404 response when querying their old username. \nHere's an undocumented endpoint, so use as your own peril, but it does work for now.\nUse the endpoint: https://api.github.com/user/:id, where :id is the ID of the user. \nSimilar endpoints exist for repos and orgs, at\nhttps://api.github.com/repositories/:id and https://api.github.com/organizations/:id respectively.\nNote that the new repository redirects preview API only supports repositories, not renamed users or organizations. In fact, the HTTP 301 redirect actually points to https://api.github.com/repositories/:id, so there's a good chance that these \"ID\" endpoints may in fact become official soon."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding git submodule that contains another submodule?\n\nI'm working on a project in one git repository (A) that is including another git repository (B), which in turn includes a third git repository (C).  In A, I added B via:\ngit submodule add https://github.com/blt04/sfDoctrine2Plugin.git plugins/sfDoctrine2Plugin\n\nClick here, and you can see where B references C: https://github.com/doctrine/doctrine2\nAfter doing my git submodule add, my plugins/sfDoctrine2Plugin/lib/vendor/doctrine folder (should contain C) is empty.  I tried doing a git submodule update --recursive as per this StackOverflow answer, but it still didn't import the files to that path.  I'm at a loss as to what to do here."}, {"role": "assistant", "content": "You need to do git submodule update --init --recursive. The problem here is the submodule C is never being initialized in the first place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to specify a certain commit in dependencies in Cargo.toml?\n\nI am trying to configure my Rust project with an external dependency in GitHub. Unfortunately, some last commits made some changes in interfaces so I am unable to use the latest version. The developers also do not care of tags and separate branches for different versions, so I think the only correct way is to specify a certain commit somehow where the interface fits what I worked with.\nWhat I have now in Cargo.toml is:\n[dependencies]\n...\nthelib = { git = 'https://github.com/someguys/thelib' }\n\nI saw it is possible to specify a branch like this:\nthelib = { git = 'https://github.com/someguys/thelib', branch = 'branch1' }\n\nBut I have not seen a working example with a commit. Could anybody provide one here?"}, {"role": "assistant", "content": "As hinted in the Cargo.toml vs Cargo.lock section of the Cargo guide, you can use the rev property to specify a commit hash:\n\n[...] If you build this package today, and then you send a copy to me, and I build this package tomorrow, something bad could happen. There could be more commits to rand in the meantime, and my build would include new commits while yours would not. Therefore, we would get different builds. This would be bad because we want reproducible builds.\nWe could fix this problem by putting a rev line in our Cargo.toml:\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand.git\", rev = \"9f35b8e\" }\n\n\nIt is also mentioned in Specifying dependencies, although no example is given (emphasis mine):\n\nSince we haven\u2019t specified any other information, Cargo assumes that we intend to use the latest commit on the master branch to build our package. You can combine the git key with the rev, tag, or branch keys to specify something else. [...]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github not update `raw` after commit\n\nUpdated: Seem it has about 5 minutes to update raw. I will close my question at here.\nI have a problem with Github.\nI want to get the file as raw format.\nI add new commit and my file is updated.\nLook like this:\n\nI add JUST keyword in variable tech.\n\nWhen I click raw. It keeps the previous version.\nLook like this:\n\nHave any method to get raw version of the file was commit."}, {"role": "assistant", "content": "GitHub serves \"raw\" pages with Cache-Control: max-age=300.  That's specified in seconds, meaning the pages are intended to be cached for 5 minutes.\nYou can see this if you open the Developer Tools in your web browser of choice before clicking the \"Raw\" button on GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete a gist on GitHub?\n\nIs there a way I can remove a gist on GitHub? Created a gist earlier, but don't really want it there anymore."}, {"role": "assistant", "content": "Currently:\nThere's a \"delete\" button at the top of each gist now:\n\nPreviously...\nPreviously there was \"delete this gist\" link at the bottom of the gist's page, as below - thanks to Daniel Smith for pointing out in the comments below that this has been changed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins: Failed to connect to repository\n\nI'm trying to connect jenkins on a github repo.\nWhen I specify the Repo URL jenkins return the following error message: \n\nFailed to connect to repository : Command \"git ls-remote -h [email\u00a0protected]:adolfosrs/jenkins-test.git HEAD\" returned status code 128:\n  stdout:\n  stderr: Host key verification failed.\n  fatal: Could not read from remote repository.\n  Please make sure you have the correct access rights\n  and the repository exists.\n\nWhen using the HTTPS:// Url jenkins returns:\n\nFailed to connect to repository : Failed to connect to\n  https://github.com/adolfosrs/jenkins-test.git (status = 407)\n\nI could successfully clone the repo at the same machine where jenkins is running and I also run the git ls-remote -h [email\u00a0protected]:adolfosrs/jenkins-test.git HEAD command. So I have the right SSH at github."}, {"role": "assistant", "content": "The problem was that somehow I created the ssh files with the root user.\nSo the files owner was root. \nThe solution was just change the ownership to the jenkins user. \nchown jenkins id_rsa.pub \nchown jenkins id_rsa"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "whats the lifetime of Github OAuth API access token\n\nwhat is the expiry time of github oauth access token. And also how do I renew it. I don't see any refresh token in their documentation. Please guide me. Thanks in advance."}, {"role": "assistant", "content": "2014: As commented in this \"GitHub OAuth Busy Developer's Guide\"\n\nTokens don't have to expire.\nThey only send back the access token and an expiration (field  \"expires_in\", seen as far back as 2013) if the offline_access scope is not requested (as it is the case for a refresh token).\nRight now, GitHub just assumes all apps want offline access.\n\nYou can check an OAuth application authorization, delete it or revoke it.\nBut the token itself doesn't seem to be bound to an expiry date unless they are not use for one year.\nbadsyntax adds in the comments:\n\nI also found this useful:\n\"An OAuth token does not expire until the person who authorized the OAuth App revokes the token.\"\nFrom \"Migrating OAuth Apps to GitHub Apps\".\n\nStokito points out in the comments to rfc6749 / 4.2.2 Access Token Response:\n\nexpires_in\nRECOMMENDED.\nThe lifetime in seconds of the access token.\nFor example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.\nIf omitted, the authorization server SHOULD provide the expiration time via other means or document the default value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I overwrite or replace a commit with new one once I have pushed to remote?\n\nSo I'm working on a sensitive project with a group and all our sources are on Github. I recently pushed a commit and later realized there were lot of mistakes in my push. I've since fixed all those mistakes on my local copy and am about to push again. However is there any way I can push and overwrite my last commit? My reason being, I don't want the others to look up my initial commit and the changes it had...\nBasically I want to overwrite the old commit with my new one.. so no information about the old commit remains for other group members to see."}, {"role": "assistant", "content": "Usually, once something is out on Github (or a public repo), there's no way to make sure no one else has the bad commit.\nIf you simply want cleaner code history though, the way to do what you ask requires you to overwrite history both locally and on the remote project.\nWhat you want is to either do a git commit --amend to modify your old commit if you've not already created a fresh commit with your changes.\nIf you've already created a fresh commit, you'll want to use git rebase -i to squash your commit on top of the old one.\nAfter you've made this change locally, and verified your commit looks the way you want it to, you'll have to git push --force to overwrite history on the Github remote.\nHere's a tutorial on how to re-write history in git, it explains both the approaches listed in this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I make a second fork of a GitHub project?\n\nI want to fork a github project to fix a couple of issues and then send a pull request.\nThe problem I'm running into is that I've already forked the project to adapt it for another user base. \nIs it possible to create a second fork? If so, how? \nWhen I try to fork now it just takes me to the previously created fork."}, {"role": "assistant", "content": "There is no way to have two forks of the same GitHub project unless you use two different GitHub accounts. \nSo:\n\nCreate a separate GitHub account (and verify the email)\nFork the\nproject  \nInvite your main GitHub account as a \"Collaborator\" (from\nthe settings)\n\nYou may need to add the extra step of creating an organization with the new GitHub account and inviting your main github account as an owner of the organization (also make sure your new fork is in that new organization). This will let you do things like deploy automatically to a Heroku app that is connected to your main GitHub account.\nWhy can't we just have multiple forks???"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there an alternative to .htaccess for GitHub Pages?\n\nI understand that .htaccess is not supported by GitHub Pages. Is there an alternative for password-protecting particular directories for websites hosted by GitHub Pages?"}, {"role": "assistant", "content": "Although you can't use .htaccess or .conf, Github has instructions on how to use the Jekyll Redirect From plugin.\nhttps://help.github.com/articles/redirects-on-github-pages/\nThe page above no longer has any mention of the plugin. The direct link to the jekyll-redirect-from plugin GitHub repo is https://github.com/jekyll/jekyll-redirect-from"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Force bundle install to use https:// instead of git:// for GitHub-based gems\n\nI am trying to build a rails project and because the host I am working on doesn't have access to the Internet for the the git:// protocol (port 9418) I get errors like\nFetching git://github.com/pivotal/jasmine.git\nfatal: unable to connect to github.com:\ngithub.com[0: 192.30.252.130]: errno=Connection refused\n\nwhen running bundle install.\nThe relevant line in the GemFile doesn't specify git:// as a protocol, it just points to GitHub as the source for the gem\ngem 'jasmine', :github => 'pivotal/jasmine-gem'\n\nWhat do I have to do to make bundler to use https:// rather than git:// for pulling gems from GitHub?\nEdit:\nIs there a way other than editing every affected line in the GemFile? I'd prefer to avoid any merging issues down the line if the project's GemFile is updated."}, {"role": "assistant", "content": "Use bundle config github.https true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Repository Name as a GitHub Action environment variable?\n\nHow would you get the repository name (not the user or organization) as an environment variable in GitHub Actions?\nI found github.repository but that contains the owner as the first part like so: owner/repo."}, {"role": "assistant", "content": "Try github.event.repository.name\n- run: echo \"REPO_NAME=${{ github.event.repository.name }}\" >> $GITHUB_ENV\n\n\nDocumentation aside, i'd really recommend dumping contexts (maybe in some test repo) just to get familiar with them, as there is lot of data which might or might not be useful when writing non-trivial workflows.\n- name: Dump github context\n  run:   echo \"$GITHUB_CONTEXT\"\n  shell: bash\n  env:\n   GITHUB_CONTEXT: ${{ toJson(github) }}\n\nBe aware that parts of github context changes depends which event triggered workflow, so it might be a good idea to double check if data you want to use is available for all events used in workflow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to hide connection string, user name, pw when using source control?\n\nI'm working on a small side-project and I'm using connection strings and also api keys and values that should not be seen or used by other people. I use a public GitHub account for source control. What is the usual method for using source control when these values are in plain text in web.config?\nDo I need to remove the values manually before checking in code?"}, {"role": "assistant", "content": "What I find works is to check in a version of the file with blanked or dummy values and then to run:\ngit update-index --assume-unchanged [fileName]\n\nGit will then stop monitoring changes to that file allowing you to put the real config info into it without fear of checking it in.\nIf you later make changes that you DO want to check in you can run:\ngit update-index --no-assume-unchanged [fileName]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete remote repository on github?\n\nI want to know how to delete repo in github account. I cannot see any indicators to delete on github interface."}, {"role": "assistant", "content": "You can go to the main page of the repository and under your repository name, click \"Settings\"...\n\n...and scroll down to the \"Danger Zone\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where does Github desktop install command line version of Git\n\nAccording to https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n\nThe installer includes a command line version of Git as well as the GUI. It also works well with Powershell, and sets up solid credential caching and sane CRLF settings.\n\nWhen I'm launching the latest download from https://desktop.github.com/, it just runs immediately and does not offer me to install command line version. I checked in cmd by typing git, command is not recognized.\nDo GithubDesktop really installed Git command line, if not can I force it to do so somehow ?\nUpdate: I've found the install but cannot access it from Powershell."}, {"role": "assistant", "content": "On Windows the latest Electron / unified versions of github desktop has git stored here:\nC:\\Users\\UserName\\AppData\\Local\\GitHubDesktop\\app-1.0.5\\resources\\app\\git\\cmd\\git.exe"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What do you do with your branch after a pull request on GitHub?\n\nMy team is experimenting with using GitHub pull requests for code reviews. My only question is what do you do with the branch after you're done? I would think you'd want to delete the branch, but since GitHub hides branches that have been merged into your current branch, it seemed like maybe I should keep it.\nJust curious on what your thoughts on best practices for this are."}, {"role": "assistant", "content": "The rule of thumb that we use (which is here some where on Stack Overflow) is \"branches are for work, tags are for history\".\nWhenever a branch is merged (most likely into master) we tag the merge point using the name of the branch with the prefix \"branch\" (e.g. branch-topic). Then delete the branch. If we need to resurrect work at the branch point we have the tag to be able to do that.\nThere are of course exceptions. We have long running branches that we use for various kinds of continuing work. But in general, topic branches are deleted after merging.\nOn that note, those merges are always done with\nmerge --no-ff <branch>\n\nThis ensures that there is a merge point and a record of the merge occurring."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge master branch into main\n\nI have created a new remote repo \"infrastructure\" on GitHub.\nI have then created a local repo on my computer in the folder \"infr\" with git init\nWhen I pushed my local repo with git push -u origin master the new branch \"master\" was created.\nI want to merge \"master\" branch into \"main\" branch now.\nAfter trying to open a pull request git does not detect differences between them and does not let me do the merging, although checking each branch, you can see all files from my project in the master and nothing in the main.\nI have tried renaming my \"master\" branch into \"main\" but I got an error : \"Could not rename branch \"master\" at this time: New branch already exists\".\nSo how do I merge master into main branch ?"}, {"role": "assistant", "content": "I encountered same problem 4 days ago and what I have done is I opened my online repo in git site and went into repo settings and clicked on branches option. I changed the default branch from main to master and i later deleted the main branch as it was empty. tell me if this works for you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Best practice for using multiple .gitignore files\n\nThere exists a collection of useful .gitignore files at\nhttps://github.com/github/gitignore. Every ignores file there has an extension .gitignore, e.g. Java.gitignore, vim.gitignore. When I put these files directly into a workdir, they don't work.\nIs it necessary to create a single file .gitignore and merge the constituent files into it?\nAccordingly, when using a --global .gitignore file, it seems the config points to a single file. If for instance I want to apply all .gitignore files in a Global/ directory, should I manually merge them into a single file? If so, it's extra work to keep this merged file up to date with the \"official\" collection.\nTo reiterate, I acknowledge that we can use different .gitignore files in different directories, but it is not what I want. I want to apply multiple .gitignore files in a single directory."}, {"role": "assistant", "content": "To clarify: a projects gitignore file is called .gitignore\n\nBackground:\nA .gitignore refers to the directory that it's in, which is either the top level or descendent of a directory with a .git repository, i.e. a \".git/\" directory.\nThere can be multiple .gitignore files in any sub directories but the Best Practice is to have one .gitignore in a given projects root and have that file reference sub-directories as necessary, e.g. images/yearly/recent  Otherwise it is be tricky to know \"which\" .gitignore file to look at to find something that's being ignored.  Given that you can use patterns as file names that could be pretty tricky!\nI also recommend avoiding using a global .gitignore file which applies to all projects on your machine, although you might keep a template around for using with new projects.  The main consideration here is that your .gitignore will be different from other developers (which may or may not exist) and so the result is undetermined.  One example of an exception to this is using a global .gitignore file for IDE files that I don't want in any project that I open on my machine so I use a global .gitigore with an entry for .idea/ files (rubyMine).\n\nThe intent of the templates you see listed is that normally you are writing the code for a given file in a specific language.  Given this, a template that is based on the language is frequently sufficient.  \nIf there are multiple languages in the code base, then used you will need to combine multiple .gitignore's for those languages, which can be done in a multitude of ways such as:\ncat .gitignore1 .gitignore2 > .gitignore # if .gitignore doesn't exist yet\ncat .gitignore1 >> .gitignore # Add to it if it already exists\npaste .gitignore1 .gitignore # Add to it if it already exists\n\n\nHot(ish) off the press (summer 2014):\nGitignorer is a simple utility that aids in the creation of .gitignore files. It pulls specific (specified) .gitignore templates, with common files to exclude, from github.com/github/gitignore, mashes them together, and saves them to a .gitignore in the current directory.\nExample usage:\ngitignorer create c java python\n\nGitignorer is currently available in the AUR over at https://aur.archlinux.org/packages/gitignorer/ and on GitHub at https://github.com/zachlatta/gitignorer"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there any way to make markdown tables sortable?\n\nI'd like to write my table in markdown text, but allow it to be sortable on github after its been rendered(simple asc/desc sorting by clicking on the column header.\nAny way to do this?"}, {"role": "assistant", "content": "Table sort is not supported in Github flavored markdown but one alternative is to use user script such as Github Sort Content\nIt's very easy to install, for instance from Chrome : \n\ninstall Tampermonkey\ninstall Github Sort Content from Greasyfork\n\nThen tables from github.com markdown pages can be sorted like :"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to increase the width of the horizontal line using Markdown on GitHub\n\nI am using the below code for drawing the horizontal line\n\"-----\"\n\"***\"\nI want to change the color of the horizontal line plus change the height also.\nHow can I do this?"}, {"role": "assistant", "content": "Instead of using *** or ---, try:\n<hr style=\"border:2px solid gray\">"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "I can't checkout a specific branch, \"detached HEAD state\"\n\nMe and my friend has a repo which he created. He then created a branch called \"lexer\" for us to work on.\nThe problem is that while he can switch forth and back between master and lexer it does not work at all for me.\nEventually I just started over (rm -rf repo and then cloned the repo) but it's still impossible to checkout the lexer branch?\nOn a freshly cloned repo:\ngit branch gives:\n$ git branch\n* master\n\ngit checkout lexer gives:\n$ git checkout lexer\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nI CAN checkout origin/lexer but I end up in a detached HEAD state?\n$ git checkout origin/lexer master\nNote: checking out 'origin/lexer'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIt is possible for me to push to the lexer branch by doing\ngit push origin HEAD:lexer\n\nbut well, I really would like to sort this mess out. It's so weird that it works for him but not for me? He says that he hasn't got any local changes from the git repo either...\nAnyone have any clue?"}, {"role": "assistant", "content": "I'm going to venture a guess that you have a directory named lexer at the top level. Since git checkout is used both to switch branches and to reset files in the tree, it's probably detecting that you don't have a branch called lexer but you do have a path and selects the second mode.\nIt works for your friend because he already has a lexer branch.\nEasiest workaround is probably to create the branch using git branch instead.\ngit branch --track lexer origin/lexer\n\nshould do that for you. You can then use git checkout to switch to it.\nAnother option might be to use the -- flag to git checkout. I haven't tried it but I think it should work:\ngit checkout lexer --\n\nWhen you add --, the word before it is always considered a branch/commit/tree and the word after a path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Use token to push some code to GitHub - \"Support for password authentication was removed\" [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMessage \"Support for password authentication was removed.\"\n\n                                (51 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nError message when using git push:\n\nSupport for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/codingTheWorld777/react-mini-projects.git/': The requested URL returned error: 403\"***\n\nI cannot use my token to access GitHub, so how can I push code to GitHub?"}, {"role": "assistant", "content": "GitHub announced their intent to require the use of token-based authentication for all authenticated Git operations. They will no longer accept account passwords when authenticating Git operations on GitHub.com:\nGenerate token:\n\nGo to your GitHub account token settings\nGenerate a token\n\nOn Mac:\n\nGo to keychain Access\nPress the Login tab and all items\nClick GitHub key\nChange the password to the recent generated token\n\n\nOn Windows:\n\nGo to Control Panel \u2192 User Accounts \u2192 Credential Manager\n\nEdit the Generic Credential of GitHub\n\nPaste the token instead of the password"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Can't push refs to remote. Try running 'Pull' first to integrate your changes.\"\n\nI keep getting this error when I try to push to Github from VScode.\nI've pushed before to that repository by following the exact same steps I am following now.\nWhat is the reason for this error?"}, {"role": "assistant", "content": "You get this message whenever your local branch and your remote branch are not on the same point, before your changes.\nremote branch commits : A -> B -> C -> D\nlocal branch commits  : A -> B -> C -> Local_Commits \n\nNow clearly, there's a change D that you don't have integrated locally. So you need to rebase, then push, which will lead to the following.\nremote branch commits : A -> B -> C -> D\nlocal branch commits  : A -> B -> C -> D -> Local_Commits \n\nTo solve your issue, do the following\ngit pull --rebase origin branchname\ngit push origin branchname"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Official image host for GitHub projects?\n\nWhenever I need to include a picture in a GitHub project's README file I usually just stick it in a Screenshots folder and relatively link to it. However this unnecessarily bloats the file size of the project, especially if I include an animated .gif of the project in action. \nI've noticed in a couple popular Github iOS projects (like MMDrawerController and JASidePanels) that the images are NOT relatively linked, but rather they exist on a domain I've never seen - \"https://github-camo.global.ssl.fastly.net\". Navigating to this site directly doesn't work and Google searches bring up nothing. So for my question: is this site affiliated with GitHub, and how does one get his/her images uploaded here? Of course I could always use a generic image hosting service but I'd prefer to use one that has official ties with GitHub (if such a site exists). \n\nWhere is this?"}, {"role": "assistant", "content": "GitHub itself has a \"secret\" feature to upload images.\nI read about this in a comment by GitHub's own Phil Haack:\n\nI edit (or create) an issue and drag it into there and copy the resulting markdown into my post. It's probably an abuse of GitHub issues.\n\nIf you do it like this, the image will be stored on some GitHub server, and it will have a URL like this one:\nhttps://f.cloud.github.com/assets/19977/1656110/a3f8b280-5b6d-11e3-818d-c06ab05bd613.jpg"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone a specific branch in git bitbucket\n\nI want to clone a specific branch. I don't want download the master branch.\nHow do I clone the whole project and then switch to validations branch?"}, {"role": "assistant", "content": "You can clone a single branch (without inadvertently cloning the whole project) with the following:\ngit clone <url> --branch <branch> --single-branch [<folder>]\n\nAlternatively (attempting to address your new question here...), you can clone the whole project \ngit clone <url> \n\nChange directories into the folder and creating a new branch off of master with\ngit checkout -b validations"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deploy individual services from a monorepo using github actions\n\nI have around 10 individual micro-services which are mostly cloud functions for various data processing jobs, which all live in a single github repository.\nThe goal is to trigger the selective deployment of these service to Google Cloud Functions, on push to a branch - when an individual function has been updated.\nI must avoid the situation in which update of a single service causes the deployment of all the cloud functions.\nMy current repository structure:\n/repo\n--/service_A\n----/function\n----/notebook\n--/service_B\n----/function\n----/notebook\n\nOn a side note, what are the pros/cons of using Github Actions VS Google Cloud Build for such automation?"}, {"role": "assistant", "content": "GitHub Actions supports monorepos with path filtering for workflows. You can create a workflow to selectively trigger when files on a specific path change.\nhttps://help.github.com/en/articles/workflow-syntax-for-github-actions#onpushpull_requestpaths\nFor example, this workflow will trigger on a push when any files under the path service_A/ have changed (note the ** glob to match files in nested directories).\non:\n  push:\n    paths:\n      - 'service_A/**'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push new (rewritten) history to remote repository\n\nBasically, I have an open pull request that I want to fix and at the same time I want to make 1 commit that contains 2 features into 2 seperate commits.\nGithub repository now looks like this where fix is a new branch:\nmaster c-c-c\n            \\\n     fix c-c-c-c\n\nI created a pull request from fix.\nI wanted to change the last commit in fix into 2 commits in my local repository as follows:\nmaster c-c-c\n            \\\n     fix c-c-c-n-n\n\nwhere n-n are my 2 new commits.\nTo get to this point locally, I did this:\n1. git rebase -i HEAD~2\n2. Changed my last commit line to \"edit\", saved and closed the file\n3. git reset HEAD^\n4. git stash save\n5. Removed the changes I don't want in the first commit\n6. git commit -m \"commit a\" -a\n7. git stash apply\n8. git commit -m \"commit b\"\n\nSo now I have 2 commits the way I want. The problem is I found a bug that ended up in the pull request. Since I have already pushed to the remote repository, it won't accept my new commits (as the original one is now missing).\nI run:\ngit push origin fix --dry-run\n\nand I get the message:\nTo [email\u00a0protected]:<UserName>/<Repository>.git\n! [rejected]        fix -> fix (non-fast-forward)\nerror: failed to push some refs to '[email\u00a0protected]:<UserName>/<Repository>.git'\n\nI have seen other posts suggest to pull my changes from origin before pushing back again, but won't that basically reset my 2 commits back into the one?\nIdeally, what I would like to do is assign the same commit ID to the last commit so it can replace the current one as is. Is there a way to do that? (Note that I didn't run git reset with --hard)"}, {"role": "assistant", "content": "When faced with that problem, a force push has worked for me:\ngit push --force origin fix\n\nEDIT: Per comments below, --force-with-lease is preferred over a direct --force because it includes some protections in case there has been an intervening commit. This article describes it as \"--force with a seatbelt\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between author and committer in Git?\n\nI just came across the following commit on GitHub:\nhttps://github.com/felixge/node-formidable/commit/0a0b150668daa3c6f01626d2565b898e5da12392\nHow does one go about having multiple authors on the same commit like that?"}, {"role": "assistant", "content": "That's not really two authors - that's an author and a committer. The two fields have different meanings. The author is the one who created the content, and the committer is the one who committed it. When you do a normal commit, you are both. (And both come with an associated email and timestamp.)\nBut they can become different in a few key ways:\n\ngit format-patch / git am - this pair lets you turn commits into patches, generally submitted by email, then have someone else apply them. You remain the author; the person who applies them is the committer. This is pretty definitely what happened on github there.\ngit commit --amend, git rebase, git filter-branch - These are all basically variants on history rewriting, ranging from single commit to some history of a branch to the entire history. They can potentially modify the committer information - in particular, they always rewrite the committer timestamp. The original author remains in place (in default  modes of operation), and if the author is also the one doing the rewriting, their name and email stay, but the timestamp is naturally different."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push code to Github hiding the API keys?\n\nI want to push some codes to my GitHub Repository. These codes are in different languages like Javascript, Java, Python etc. Some of those codes contain some private API key that I don't want to publish.\nIs there any way to hide the keys automatically.? Should I remove it from my code manually.? \nThere are many projects that I want to push to GitHub. So, manual removal is not a good option."}, {"role": "assistant", "content": "You should consider using .env files and read the keys from the environmental variables. How to do so depends on the language and tools you use (for node.js, php, etc.).\nYou can exclude .env file from commits by adding .env to the .gitignore. You can also upload an example configuration .env.example with dummy data or blanks to show the schema your application requires."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Clear local and remote repo and start over\n\nI accidentally got a repo in a bad state when trying to move a project from using ant to maven. Now, I would like to clear the repo and startover from scratch. Being new to git, I am a little cautious and not sure if I could just checkout then delete all files and folders locally then push to the remote repo or if that was actually a very bad idea. For some reason I'm having a hard time asking the correct questions in google. :D"}, {"role": "assistant", "content": "Simply remove local .git directory, remove repo from server (if it is github - do Repo -> setiings -> remove).\nThen create new repository on server, and locally do:\ngit init\ngit remote add origin [email\u00a0protected]:user/project.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make github follow directory history after renames?\n\nOnce a directory is renamed, \"git log\" no longer shows its history, unless you force it to, by using \"git log --follow\".\nIs there a way to force the \"history\" function on the GitHub web UI to use \"--follow\"?\nAlternatively - is there any way to see pre-rename history on GitHub?"}, {"role": "assistant", "content": "Update June 2022: GitHub now supports viewing commit history across file renames and moves!\n.\n\n2011: This was requested in 2009 (Request 129), and then in 2010 (Request 897), and then in 2021 (github/feedback discussion 6964):\n\nI like this.\nThere could be other issues preventing us from plopping the --follow argument in.\nI'll take a look and let you know.\n\n... and then nothing for now.\n\nNote: Git 2.6+  (Q3 2015) will propose that in command line: see \"Why does git log not default to git log --follow?\"\n\nNote: Git 2.6.0 has been released and includes this feature. Following path changes in the log command can be enabled by setting the log.follow config option to true as in:\ngit config log.follow true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I embed source files from GitHub on my web page other than Gists?\n\nContext\nYou can create a Gist on GitHub and embed it on your web page: embedding Gists.\nThis is an example of a randomly chosen Gist: tap.groovy.\nQuestion\nIs embedding also possible with other code files from GitHub, for example with this randomly chosen C# file ICommand.cs which is not a Gist?"}, {"role": "assistant", "content": "You can try https://emgithub.com, which does exactly what you want.\nTo embed the example file ICommand.cs in your question, you can just add \"em\" before \"github.com\" in the address bar, then press Enter.\nThen you can get a script tag like this:\n\n\n<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcorefx%2Fblob%2Fmaster%2Fsrc%2FSystem.ObjectModel%2Fsrc%2FSystem%2FWindows%2FInput%2FICommand.cs&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showCopy=on\"></script>\n\n\n\nNote if you simply click Run code snippet in StackOverflow, the copying button at top right corner may not work. Running it outside SO would work fine.\nUnlike other websites that do similar work, EmGithub.com is a static site hosted on Github Pages. Fetching target files and highlighting are done on your browser.\n\nDisclosure: I'm the developer of it :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding to someone else\u2019s pull request on a GitHub project that I do not own\n\nIs it possible for me to add commits to someone else\u2019s pull request on a repository where I am not the owner?\ne.g.\nUser A owns Project X.\nUser B forks Project X, creates a feature branch, makes some changes, and submits a pull request.\nUser C likes the pull request, but would like to make some modifications to it. (FWIW User C already has a fork of Project X, so is unable to easily fork User B\u2019s fork).\nCan User C add commits to User B\u2019s PR?"}, {"role": "assistant", "content": "You can check out the branch and re-submit a modified PR (giving credit to the original, preferably).\nYou can also issue a PR to the PR author:\ngit remote add userb https://github.com/userb/name.git\ngit fetch userb\ngit checkout featurebranch\n[change and commit]\ngit push userc featurebranch\n\nWhen you create a PR, GitHub lets you choose the base branch - so you can choose the fork and - if you want to - request changes to the PR."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Pull Requests template not showing\n\nI wanted to create custom Pull Requests template for my Github repo (internal version in my company and not on Github.com), so I followed instructions on this link. I followed below steps:\n\nCreated the new template file in the location: [my-repo]/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md.\nMerged this new file into master.\nCreated a new branch from master, commited some changes into new branch.\nCreated a new Pull Request to master, but the template did not show up.\n\nCreating the new PR did not show up the template I had created. Similar steps for creating new issue templates work fine, but PR templates arent working. I would like to add different templates inside PULL_REQUEST_TEMPLATE folder in order to create multiple pull request templates like feature template, bug-fix template etc. My PR template markdown has the following in it:\n---\nname: Design Review\nabout: Design Review issue template\n\n---\n\n# PR Change Description\nThis PR is to add a new vendor type."}, {"role": "assistant", "content": "You must create templates on the repository's default branch. Templates created in other branches are not available for collaborators to use.\nNOTE: If your PullRequest Template is not applied on every new PR you create it could mostly be due to the following reasons\n\nEither PR template doesn't exist at all in any of the branches.\nOr it is present in non-default branch\n\nYou can store your pull request template in the repository's visible root directory, the docs folder, or the hidden .github directory. Pull request template filenames are not case sensitive, and can have an extension such as .md or .txt."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Keep commits history after a 'git merge'\n\nWhen I work on two different features (on two different branches created from the master) it is quite annoying that I will not have the commit history when I proceed with merging.\nI'll explain better. When I finish work on Branch-A, I merge it into master. And that's fine, if I git log I see all the commits I made on Branch-A.\nInstead, when I finish work on Branch-B and I try to merge it to master (after that Branch-A has been already merged), I have to specify a commit message for the merging (while for the first branch I have not been asked anything).\nAnd after the merging to master, if I type git log, I cannot see the commits of the Branch-B in the history of my master branch\nLet's say I have \n**Branch A**\n\ncommit 09b2unfas9d781n2e\n    Add more stuff\n\ncommit 8uj8masd89jas898a\n    Add stuff\n\n**Branch B**\n\ncommit 09b2unfas9d781n2e\n    Add feature setting\n\ncommit 8uj8masd89jas898a\n    Add feature\n\nI finish having\n**Master**\n\ncommit 6hf6h8hd871udjkdn\nMerge: 09b2un 34osd6\n    Merge branch 'Branch-B' into master\n\ncommit 09b2unfas9d781n2e\n    Add more stuff\n\ncommit 8uj8masd89jas898a\n    Add stuff\n\ncommit 34osd62dhc91123j8\n    I'm a previous commit from 'master'.\n    The last one before branching...\n\nwhile I would like to obtain something like:\n**Master**\n\ncommit 09b2unfas9d781n2e\n    Add feature setting\n\ncommit 8uj8masd89jas898a\n    Add feature\n\ncommit 09b2unfas9d781n2e\n    Add more stuff\n\ncommit 8uj8masd89jas898a\n    Add stuff\n\ncommit 34osd62dhc91123j8\n    I'm a previous commit from 'master'.\n    The last one before branching...\n\n... that would reflect more exactly the history of the performed commits.\nI don't get why I can keep the history from just one of the two branches.\nHow can I keep everything clear without those merge commits that hide/omit the real history of the merged commits?"}, {"role": "assistant", "content": "It looks like the first merge was a fast-forward, and the second one was a three-way merge.\nExplanation\nGit has two versions of merge: fast-forward and three-way. (There are other versions, but that is not what happened here.) The default behavior is to do a fast-forward merge when possible, and otherwise do a three-way merge.\nA fast-forward merge can take place when the commit that is being merged has the current position of the branch in its history (you can force this behavior with the option --ff-only, which will cause the merge to fail when fast-forward is impossible). For example:\nA - B - C - D <-master\n             \\\n              E - F - G <- branch-a\n\nExecuting git merge (with default settings) will result in\nA - B - C - D - E - F - G <- branch-a <-master\n\nYou will also not get a chance to edit the merge commit because there is none.\nA three-way merge when your other branch diverges from master (not just ahead):\nA - B - C - D  - E - F - G <-master\n                  \\\n                   E1 - E2 <- branch-b\n\nIn this case, Git cannot just move the pointer of master from G to E2 because that will get rid of the changes that were made in F and G. When a three-way merge happens, it creates a commit that has two parents, and also has a commit message. Now, master can be moved to this commit. (Notice that in this situation, master and branch-b do NOT point to the same commit.\nA - B - C - D  - E - F - G - H <-master\n                  \\       /\n                   E1 - E2 <- branch-b\n\nIf you want to have a linear history then you need to use rebase, but be forewarned that if anybody else has seen your branch commits this may lead to issues that are beyond the scope of this answer. Using rebase will involve two steps, rebasing and then fast-forward merge. So, instead of merging you first execute the following while on branch-b, git rebase master. This creates new commits that are copies of the old commits, i.e., the same change-set, author information and message, but new committer information and parent history. (I call the commits E1' and E2' in the illustration to indicate that they are just copies.) The old commits will exist until they are garbage collected, but will not be reachable unless you look at the reflog.)\nA - B - C - D  - E - F - G <-master\n                  \\       \\\n                   E1 - E2 \\ \n                            E1' - E2' <- branch-b\n\nExecuting git checkout master; git merge --ff-only branch-b will now fast-forward your changes into master, thereby giving you a linear history.\nA - B - C - D  - E - F - G - E1' -E2' <-master <- branch-b"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Share artifacts between workflows / Github Actions\n\nI know that you can share artifacts between jobs of the same workflow...\nBut how can I share artifacts across different workflows?"}, {"role": "assistant", "content": "GitHub has now added a REST API for downloading artifacts. Basically you do\nGET repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\n\nAnd then you'll have to look for Location: in the response, and then access that url to download the artifact. The url is valid for 1 minute.\nThere's a GitHub Action that uses the API above that you can easily add to your workflow. I use it like this\n- name: Download artifact\n  uses: dawidd6/action-download-artifact@v2\n  with:\n    workflow: ${{ github.event.workflow_run.workflow_id }}\n    workflow_conclusion: success\n\nRead more about it here: https://github.com/dawidd6/action-download-artifact"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I set up Eclipse/EGit with GitHub?\n\nI've never used Git before and would like to learn.\nI have a private repository with GitHub.\nI've installed the EGit plugin for Eclipse.\nI have a workspace where I do my work, generally: ~/Documents/workspace.\nI am able to add my GitHub repository and download it, but in doing so it creates ~/MyRepository.\nWhen I create a project, do I need to point it to ~/MyRepository?\nAlso, how come when I make an edit and I say push to upstream it says up to date?"}, {"role": "assistant", "content": "Make sure your refs for pushing are correct. This tutorial is pretty great, right from the documentation:\nhttp://wiki.eclipse.org/EGit/User_Guide#GitHub_Tutorial\nYou can clone directly from GitHub, you choose where you clone that repository. And when you import that repository to Eclipse, you choose what refspec to push into upstream.\nClick on the Git Repository workspace view, and make sure your remote refs are valid. Make sure you are pointing to the right local branch and pushing to the correct remote branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Very slow download from GitHub\n\nWhen cloning a repository from GitHub I sometimes only get a download rate between 50-100 KiB/sec (staying stable) while most of the time I have about 10 MiB/sec. When cloning the same repository from a different machine (= different global IP) I get full speed.\nDoes GitHub impose a rate limit on repository cloning? The repository in question is quite big (~100 MiB) and I clone it about twice a day."}, {"role": "assistant", "content": "I found a solution that worked very well for me.\nGo to github and copy the link to the clipboard.\nThen open a web proxy website (https://www.proxysite.com worked for me).\nAnd paste the link (I tried with US1) - instead of downloading 670mb in 1+ hour at least, it took less than 2 minutes.\nWorks like a charm!!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Remove unwanted commits from a Pull Request\n\nI have started working on a project and I made some unwanted commits which I pushed to origin master. Now, when I try to do a pull request, Github wants to commit all of the previous commits. \nMy question is, how do I remove the unwanted commits and commit the changes that I want to commit so that I am up to date with master?"}, {"role": "assistant", "content": "I assume your origin is your own fork of some project that you want to do a pull request too?\nSince you will be changing history (by resetting the head) you will need to push with --force flag. Locate the hash of your last good commit using git log.\nNow run\ngit reset SHA\n\nThis will change your head to that sha and preserve the changes in the files since that last good commit, your index will also be reset.\nNow you can change your code and do the commits you want. But you have to do git push --force since you changed the history of the repository. This means that anyone who forked your repository won't be able to pull changes from you anymore. But you will be able to do a pull request to your upstream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cannot push to git repository - permission denied\n\nI have a following problem:\n$ git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nI have already checked the connection doing this:\n$ ssh -vT [email\u00a0protected]\n\nand output looks good, I was correctly authenticated.\nWhile checking further, I noticed that:\n$ ssh-add -l\nThe agent has no identities.\n\nI have tried to run ssh-agent, but nothing changed:\n$ ssh-agent\nSSH_AUTH_SOCK=/tmp/ssh-A1mhFqvqncuO/agent.766; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=767; export SSH_AGENT_PID;\necho Agent pid 767;\n$ ssh-add -l\nCould not open a connection to your authentication agent.\n\nI am using Arch Linux. Any help would be strong appreciated! Thanks in advance!\nGithub diagnostic help here."}, {"role": "assistant", "content": "I had the similar problem and my problem was solved by running the following command to add my key to the list of known keys:\nssh-add ~/.ssh/id_rsa\n\nHope it solves yours too. ;)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you trigger a push when a specific directory in a branch gets an update?\n\nI want my workflow to trigger on a push only if there are changes made to a specific directory. Is this possible, what am I missing? I tried doing something like what you see below, but it didn't fire the trigger.\nname: ABC\n\non:\n  push:\n    branches:  [master/my-directory]\n  pull_request:\n    branches: [ master ]"}, {"role": "assistant", "content": "push has a property called paths:\nname: ABC\non:\n  push:\n    branches:\n      - master\n    paths:\n      - my-directory/**\n\nThis will only trigger on pushes to the master branch with changes in the my-directory directory tree. See the filter pattern cheat sheet for all possible filter patterns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to restore Github and Bitbucket 2FA without recovery codes or backup phone number?\n\nMy android device broke and I lost access to Github and Bitbucket 2 factor authentication codes.\nUnfortunately I didn't save the recovery codes or set up a backup phone number to receive codes by SMS, and I'm not signed in to Github and Bitbucket on any computer.\nIs there another way to gain access to my Github and Bitbucket account?"}, {"role": "assistant", "content": "Luckily for me, there is a way to do this if you assigned a SSH key to your account.\nWhat you need to do is to run this command on the computer where you have the SSH key:\nssh -T [email\u00a0protected] verify\n\nAnd send the output to Github support. With that output they are able to disable your 2fa and allowing you to login just with your password.\nThe output should look like this:\nPlease provide the following verification token to GitHub Support.\n002de4e72d08f47b0b828bab0224dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxf6174ce54ab0040aa7075626c69635f6b6579ce008cacf9\n\nIf you are reading this it's probably too late for that advice but don't be stupid like I was. Save the recovery codes or set up a phone number!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git commits are not getting linked with my GitHub account\n\nI'm having problems trying to link my commits to my GitHub account. Commits are being reported on GitHub the way my picture shows. The values user.name and user.email are correct, any other ideas to check?\nThanks in advance"}, {"role": "assistant", "content": "Even though your settings might look correct, this error implies that something in the user.email field is incorrect, which gives Github the wrong information about who the committer is. A small typo could throw the whole thing off. The fix is in the third step, and the first two steps help identify what the problem is.\nFirst, run git config -l to check your settings and make sure that you don't have something unexpected in there. Run git log and take note of how the Author field looks. It should be in the format of Author: Your-Name <[email\u00a0protected]>. The part within the brackets is the important part as far as Github is concerned.\nSecond, if you've been able to commit something successfully in the past, open that repo and run git log to find the commit where everything worked properly. Check that Author field against the one that isn't working and see if there is a difference.\nThird, if there is a difference, switch back to the repo at issue and run git config --global user.email [email\u00a0protected].\nIf the problem persists, check your Github email settings and make sure that the email address that you are using is added to your account.\nSee this help article for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I sync tags to a forked github repo?\n\nI forked a repository on github and use the \"fetch and merge\" button on the web page to sync the latest code to my fork. I noticed that the code gets updated but new tags from the master repro don't end up in my fork. How do I make that happen?"}, {"role": "assistant", "content": "You would need, in command-line, to fetch tags\ngit fetch --tags upstream\n\nAssuming upstream is the remote name referencing the original repository URL.\n(If not yet defined: git remote add upstream https://github.com/original/repository).\nThen push tags to your fork\ngit push --tags\n\nIf you want to push only the tags from the branch you are pushing:\ngit config --global push.followTags true\n\nThat way, a simple git push is enough."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Golang, importing packages from Github requests me to remember the Github URL?\n\nI'm very new to Golang. I see that in Golang you can import packages directly from Github like:\nimport \"github.com/MakeNowJust/heredoc\"\n\nDoes that mean I have to remember this URL in order to use this package? IMHO this is not cool. What if later the author of the package removed it or changed the URL? Any ideas?"}, {"role": "assistant", "content": "I would recommend you to read the How to Write Go Code documentation and this blog post.\nThe path you're seeing in your import line is not a url, but only the path the package is located in (normally relative to $GOROOT/src/pkg or $GOPATH/src). So your package heredoc is most probably located in the directory $GOPATH/src/github.com/MakeNowJust/heredoc.\nThe recommended way to use external packages is by downloading and installing them via go get. You might want to check out the documentation of go get by go get --help."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Link to a line Markdown file on GitHub\n\nI often link to GitHub source code via the #L param in the URI.\ne.g. : https://github.com/github/learn.github.com/blob/gh-pages/episodes.yaml#L1\nBut is there a way to link to lines within a Markdown file?\ne.g. https://github.com/github/learn.github.com/blob/gh-pages/README.md#L1 (does not work!)\nI know I can link to 'sections', but lines are much better!\ne.g. https://github.com/github/learn.github.com/blob/gh-pages/README.md#learngithubcom"}, {"role": "assistant", "content": "As it is currently not possible, I take the next best option: use blame and then highlight the lines, e.g. https://github.com/rails/rails/blame/master/guides/source/configuring.md#L166"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - Different Remote for each Branch\n\nI'm unsure of how to ask this properly but I'll try and do my best - I'm by no means a Git aficionado, I know how to use the basic commands but not advanced terminology/functionality.\nI have a private repository myrepo cloned from a private server git.mydomain.com. I'm familiar with the process of branching code on the same repository with git checkout -b mybranch - however I'd like to branch to GitHub rather than my private server, resulting in something like this:\nRepo       Branch      Remote Location    (Purpose)\n------------------------------------------------------------\nmyrepo --> private --> git.mydomain.com  (Incremental work)\n  |\n  +------> public  --> github.com        (Public releases)\n\nEssentially I'd like to be able to git checkout public and git merge private."}, {"role": "assistant", "content": "You can set a different branch to push to a different server for individual branches by using these commands:\nAs of Git 1.8.0:\ngit branch --set-upstream-to origin/foo foo\n\nNote: If the last foo is left out, it will choose the current branch.\nAs of Git 1.7.0:\ngit branch --set-upstream foo origin/foo\n\nIn your case, you would use this by adding your two remotes (mydomain and github) and setting each branch to push to them individually. It might look something like this:\nMake sure you add the remotes if you haven't already:\ngit remote add github git://github.com/foo/myrepo.git\ngit remote add mydomain git://git.mydomain.com/foo/myrepo.git\n\nThen set the branches to push to the right places:\ngit branch --set-upstream-to mydomain/private private\ngit branch --set-upstream-to github/public public\n\nAfter this is all set up, you can push and pull just by using git push and git pull. This will push and pull to the github remote when you're on the public branch, and to your mydomain.com remote when you're on your private branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to upload an attachment to GitHub wiki? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 12 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI know how to reference it from wikis but where in GitHub site do I upload the attachment? Thanks a lot!"}, {"role": "assistant", "content": "As of Feburary 14th, 2022 GitHub allows uploading images to Wiki pages by dragging files into the web editor.\nCaveat: Files will be uploaded to their githubusercontent bucket, not added to the git repository for the wiki.\n\nOriginal post:\nJust to answer it shortly: You can't. You have to upload your images somewhere else (like in a repository or on an image hoster) and link it\nBut I agree with @jstephenson"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git push Out of memory, malloc failed\n\nI am trying to push my changes remotely to GitHub, every so often git fails due to \nC:\\dev\\projects>git push -v\nPushing to https://[email\u00a0protected]/mycompany/My-Project.git\nPassword for 'github.com':\nfatal: Out of memory, malloc failed (tried to allocate 524288000 bytes)\nfatal: write error: Invalid argument\n\nThis is very, very aggravating.  I have run the following commands, upgraded git (which wiped out my settings and caused lots of pain, but I digress)\ngit gc --auto --prune=today --aggressive\ngit repack\n\nI have even bumped the value of\nhttp.postbuffer\n\nbut eventually it will fail again.\nThis is a typical Rails 3.1 application, total project size on disk is 9.69 MB."}, {"role": "assistant", "content": "My advice is to try several git parameters related with pack:\n[pack]\n   threads = 1\n   deltaCacheSize = 128m\n   windowMemory = 50m\n\nWhat it got better results for me was setting git config pack.threads 1 and git config pack.windowMemory 50m (default is 10m).\nStill, my host didn't have enough RAM memory (2GB) and kept failing. I hard copied the repo and moved it to another machine with more RAM (8GB). It got better but still failed.\nFinally, I downloaded the latest version of git (https://github.com/git/git), compile it and install it. That fixed the problem just by running git repack -adf with the same parameters. After that I run git gc --aggressive --prune=now \nOnce I got the repo fixed in my local machine I pushed it to master, overwriting the remote repo, git push -f origin master. \nTo prevent similar errors in the future try not to add unnecessary large files to the repo (in my case I got a SQL dump of 3.5GB :)) and disable delta compression for large files (such as images, PDFs, videos). Add the following lines to .gitattributes:\n*.pdf -delta\n*.jpg -delta"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add new commit to the existing Git tag\n\nI have created a Git tag as v1.1 using \ngit tag -a v1.1 -m 'my version 1.1'\n\nand I pushed that tag. Later, I made some changes related to v1.1. Now when I push new changes and check the git tag using \ngit describe it is showing me v1.1-g2dcc97.\nHow can I add my new commit to the existing tag?"}, {"role": "assistant", "content": "You can't put a new commit into an existing tag without breaking an important Git guideline: Never(*) modify commits that you have published.\nTags in Git aren't meant to be mutable. Once you push a tag out there, leave it alone.\nYou can, however, add some changes on top of v1.1 and release something like v1.1.1 or v1.2. One way of doing that would be\n# Create a new branch from tag v1.1\ngit checkout -b newbranch v1.1\n\n# Do some work and commit it\n\n# Create a new tag from your work\ngit tag -a -m \"Tag version 1.1.1, a bugfix release\" v1.1.1\n\n(*) Unless you have a really super special reason for doing so, and only if you completely understand the implications, and even then, don't make a habit of it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting different config for different repositories [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I specify multiple users for myself in .gitconfig?\n\n                                (25 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI was wondering how am I going to change the contents of the command git config --list? I am going to pull/fork a repository from GitHub. I am going to configure such repositories on both of my Windows, Linux and Mac workstations."}, {"role": "assistant", "content": "If you want to set up configurations that are specific for a particular repository, you have two options, to configure it from the command line, or edit the repo's config file in an editor.\nOption 1: Configure via command line\nSimply use the command line, cd into the root of your Git repo, and run git config, without the --system and the --global flags, which are for configuring your machine and user Git settings, respectively:\ncd <your-repo>\ngit config <setting-name> <setting-value>\ngit config <setting-name>=<setting-value> # alternate syntax\n\nOption 2: Edit config file directly\nYour other option is to edit the repo config file directly. With a default Git clone, it's usually the .git/config file in your repo's root folder.  Just open that file in an editor and starting adding your settings, or invoke an editor for it at the command line using git config --edit.\nResources\nYou can learn more about configuring Git at the official Linux Kernel Git documentation for git config. In particular, you may be interested in seeing an example Git config:\n# Core variables\n[core]\n        ; Don't trust file modes\n        filemode = false\n# Our diff algorithm\n[diff]\n        external = /usr/local/bin/diff-wrapper\n        renames = true\n[branch \"devel\"]\n        remote = origin\n        merge = refs/heads/devel\n# Proxy settings\n[core]\n        gitProxy=\"ssh\" for \"kernel.org\"\n        gitProxy=default-proxy ; for the rest\n[include]\n        path = /path/to/foo.inc ; include by absolute path\n        path = foo ; expand \"foo\" relative to the current file\n        path = ~/foo ; expand \"foo\" in your $HOME directory\n\nEdit\nAddressing the original poster's question about how to change user.name and user.email per repository, here is how to do it via the command line. Switch to each repository, and run the following:\ngit config user.name \"<name>\"\ngit config user.email \"<email>\"\n\nSince you're not using the --system or the --global flags, the above commands will apply to whichever repo you have in your terminal working directory only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "strikethrough code in markdown on github\n\nI am talking about github markdown here, for files like README.md.\nQuestion:\nIs it possible to strikethrough a complete code block in markdown on github?\nI know how to mark text as a block of code\nthis is\nmultiline code\n\nand\nthis\n\nthis\nalso\nby indenting by 4 spaces or by using ``` or `...\nI also know how to strike through texts using\n\ndel tag\ns tag\n~~\n\nTemporary solution:\nIndependently they work fine, but together not as expected or desired. I tried several combinations of the above mentioned.\nFor now, I use this:  \nstriked\nthrough\nby using ~~ and ` for every single line.\nRequirement:\nI would like to have a code formatted text striked through, where the code block is continuous:\nunfortunately, this is\nnot striked through\n\nor at least with only a small paragraph in between:\nunfortunately, also not\nstriked through\n\nIs this possible at all?\nI found some old posts and hints on using jekyll, but what I was searching for is a simple way, preferably in markdown."}, {"role": "assistant", "content": "This would only be possible with raw HTML, which GitHub doesn't allow. But you may be able to use a diff instead.\nCode blocks are for \"pre-formatted\" text only. The only formatting you can get in a code block is the formatting that can be represented in plain text (indentation, capitalization, etc). There is no mechanism to mark up the content of a code block (as bold, italic, stricken, underlined, etc). This was an intentional design decision. Otherwise, how would you be able to show Markdown text in a code block? If you want formatted text, then you need to use something other than a code block.\nAs the rules state:\n\nHTML is a publishing format; Markdown is a writing format. Thus, Markdown\u2019s formatting syntax only addresses issues that can be conveyed in plain text.\nFor any markup that is not covered by Markdown\u2019s syntax, you simply use HTML itself.\n\nTherefore you would need to format your own custom HTML code block with the various bits marked up properly:\n<pre><code><del>some stricken code</del>\n<del>A second line of stricken code</del>\n</code></pre>\n\nHowever, for security reasons, GitHub will strip out any such raw HTML in your Markdown. So while this works where you have full control of the entire stack, on a hosted service it is most likely not possible.\nHowever, I'm assuming you want to show some changes made to a block of code. As it turns out, a specific format already exists for that, namely, a diff. Just use a fenced code block with diff as the language and GitHub will format it correctly:\n```diff\n  Unchanged Line\n- Removed Line\n+ Added Line\n```\n\nYou can see how GitHub displays the above code block live (you can also see that in raw), but I've included a screenshot below for convenience.\n\nI realize that the formatting does not use strike-through, but it does use a commonly used and understood format. For more complex blocks, you should probably use the diff utility program to generate the diff for you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does Bitbucket and GitHub have Work In Progress [WIP] pull requests feature?\n\nI know there is a Work In Progress (WIP) merge requests feature on GitLab. \nI find it very useful when you already want to show the code to your peers and want to prevent 'Accept' button to be pressed. Is there a similar feature on Bitbucket? Tried to use [WIP] prefix on Pull Request name in Bitbucket, but it did not work out. \nI am also curious if GitHub has a similar feature too or you still need a plugin for your browser?"}, {"role": "assistant", "content": "Bitbucket does not provide WIP PR status yet, but the enhancement is WIP \ud83d\ude0a. You can vote here for this feature: https://bitbucket.org/site/master/issues/12503/add-additional-pull-request-states"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Solution. How to install_github when there is a proxy\n\nWhen you try to install some package of R from GitHub's repository\ninstall_github('rWBclimate', 'ropensci')\n\nIf you have the following error:\nInstalling github repo(s) rWBclimate/master from ropensci\nDownloading rWBclimate.zip from https://github.com/ropensci/rWBclimate/archive/master.zip\nError in function (type, msg, asError = TRUE)  :\nCould not resolve host: github.com; Host not found, try again\n\nThis error is displayed because R is trying to access on Intenet through a proxy."}, {"role": "assistant", "content": "SOLUTION\nStep 1. Install devtools packages \nif (!require(\"devtools\")) install.packages(\"devtools\")\nlibrary(devtools)\n\nStep 2. Set configuration for our proxy (Please update your information proxy)\nlibrary(httr)\nset_config(\n  use_proxy(url=\"18.91.12.23\", port=8080, username=\"user\",password=\"password\")\n)\ninstall_github('rWBclimate', 'ropensci')"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Import a Python library from Github\n\nI'm new to Python so this may sound silly.\nI want to use a Python library I've found on Github, lets say on https://github.com/praw-dev/praw, and I want to be able to do git pull in the future to pull the latest commits.\nQuestion: Should I git clone <git url> in the project directory and delete everything except the praw directory, then in my python script do a import praw? \nIn iPython,\nimport praw\n\ngives the error ImportError: No module named praw\n\nDirectory Structure\n~\\myProject\\\n    praw\\\n    myNotebook.ipynb"}, {"role": "assistant", "content": "Actually, if given package is not on PyPI (or you want a specific branch) you can still install it through pip from GitHub with:\npip install git+https://github.com/[repo owner]/[repo]@[branch name]\n\nAnd for your problem it would be (although @pandita's answer is correct for normal usage case):\npip install git+https://github.com/praw-dev/praw.git\n\nFor more information check this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How To Upload Files on GitHub\n\nI have recently downloaded GitHub and created a repository on it. I am trying to upload an Objective C project in it. How do I go about doing this?"}, {"role": "assistant", "content": "I didn't find the above answers sufficiently explicit, and it took me some time to figure it out for myself. The most useful page I found was:\nhttp://www.lockergnome.com/web/2011/12/13/how-to-use-github-to-contribute-to-open-source-projects/\nI'm on a Unix box, using the command line. I expect this will all work on a Mac command line. (Mac or Window GUI looks to be available at desktop.github.com but I haven't tested this, and don't know how transferable this will be to the GUI.)\nStep 1: Create a Github account\nStep 2: Create a new repository, typically with a README and LICENCE file created in the process.\nStep 3: Install \"git\" software. \n(Links in answers above and online help at github should suffice to do these steps, so I don't provide detailed instructions.)\nStep 4: Tell git who you are:\ngit config --global user.name \"<NAME>\"\ngit config --global user.email \"<email>\"\n\nI think the e-mail must be one of the addresses you have associated with the github account. I used the same name as I used in github, but I think (not sure) that this is not required. Optionally you can add caching of credentials, so you don't need to type in your github account name and password so often. https://help.github.com/articles/caching-your-github-password-in-git/\nCreate and navigate to some top level working directory:\nmkdir <working>\ncd <working>\n\nImport the nearly empty repository from github:\ngit clone https://github.com/<user>/<repository>\n\nThis might ask for credentials (if github repository is not 'public'.)\nMove to directory, and see what we've done:\ncd <repository>\nls -a\ngit remote -v\n\n(The 'ls' and 'git remote' commands are optional, they just show you stuff)\nCopy the 10000 files and millions of lines of code that you want to put in the repository:\ncp -R <path>/src .\ngit status -s\n\n(assuming everything you want is under a directory named \"src\".) (The second command again is optional and just shows you stuff)\nAdd all the files you just copied to git, and optionally admire the the results:\ngit add src\ngit status -s\n\nCommit all the changes:\ngit commit -m \"<commit comment>\"\n\nPush the changes\ngit push origin master\n\n\"Origin\" is an alias for your github repository which was automatically set up by the \"git clone\" command. \"master\" is the branch you are pushing to. Go look at github in your browser and you should see all the files have been added.\nOptionally remove the directory you did all this in, to reclaim disk space:\ncd ..\nrm -r <working>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is git-cherrypick saying nothing to commit?\n\nI searched a lot for the below issue but couldn't get any substantial info.\nI created a temporary branch 202116 and am trying to do a cherrypick of gerrit 202116 and I get the below message. Why am I not able to cherry-pick this commit and why am I getting this error?\n<>git fetch ssh://[email\u00a0protected]:29418/platform/vendor/company-proprietary/radio refs/changes/25/202116/1 && git cherry-pick FETCH_HEAD\nFrom ssh://company.com:29418/platform/vendor/company-proprietary/radio\n * branch            refs/changes/25/206025/1 -> FETCH_HEAD\n# On branch 202116\n# You are currently cherry-picking.\n#   (all conflicts fixed: run \"git commit\")\n#\nnothing to commit, working directory clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\n\n    git commit --allow-empty"}, {"role": "assistant", "content": "It's exactly what it says: the changes you're trying to cherry-pick are already wholly contained in the branch you're on. I.e. the result of the cherry-pick is no changes. You can create an empty commit with the --allow-empty flag to indicate that you attempted to cherry-pick, but there were no changes to pull in."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Swap git submodule with own fork\n\nI added a submodule to my git repo like this:\n$ git submodule add git://github.com/user/some-library some-library\n\nI've decided I want to create a fork of that library to do some adjustments. How can i swap that submodule so that it points to my own github fork instead?"}, {"role": "assistant", "content": "The submodules are stored in .gitmodules:\n$ cat .gitmodules\n[submodule \"ext/google-maps\"]\n    path = ext/google-maps\n    url = git://git.naquadah.org/google-maps.git\n\nIf you edit the url with a text editor, you need to run the following:\n$ git submodule sync\n\nThis updates .git/config which contains a copy of this submodule list (you could also just edit the relevant [submodule] section of .git/config manually)\nThere might be a way to do it with only git commands, although the submodule system seems a bit incomplete (e.g see the instructions to remove a submodule)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push nuget package in GitHub actions\n\nI am trying to use GitHub actions to generate a NuGet package from my project and push it to the (private) GitHub registry. \nMy script ([NAME] fields redacted):\nname: Update NuGet\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    name: Update NuGet \n    steps:\n      - uses: actions/checkout@master\n      - uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: '2.2.105'\n      - name: Package Release\n        run: |  \n          cd [SOLUTION_FOLDER]\n          dotnet pack -c Release -o out\n      - name: Publish Nuget to GitHub registry\n        run: dotnet nuget push ./[SOLUTION_FOLDER]/[PROJECT_FOLDER]/out/$(ls ./[SOLUTION_FOLDER]/[PROJECT_FOLDER]/out) -s https://nuget.pkg.github.com/[USERNAME]/index.json -k ${GITHUB_TOKEN}  \n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} \n\nLog output:\ninfo : Pushing [PROJECT_FOLDER].3.4.23.nupkg to 'https://nuget.pkg.github.com/[USERNAME]'...\ninfo :   PUT https://nuget.pkg.github.com/[USERNAME]/\ninfo : An error was encountered when fetching 'PUT https://nuget.pkg.github.com/[USERNAME]/'. The request will now be retried.\ninfo : An error occurred while sending the request.\ninfo :   The server returned an invalid or unrecognized response.\ninfo :   PUT https://nuget.pkg.github.com/[USERNAME]/\ninfo : An error was encountered when fetching 'PUT https://nuget.pkg.github.com/[USERNAME]/'. The request will now be retried.\ninfo : An error occurred while sending the request.\ninfo :   The server returned an invalid or unrecognized response.\ninfo :   PUT https://nuget.pkg.github.com/[USERNAME]/\nerror: An error occurred while sending the request.\nerror:   The server returned an invalid or unrecognized response.\n##[error]Process completed with exit code 1.\n\nThis is the coresponding GitHub issue (with a workaround option): https://github.com/NuGet/Home/issues/8580"}, {"role": "assistant", "content": "Second Update:\nI got an answer in the GitHub issue from jcansdale that says (haven't tested this):\n\nSupport for the dotnet nuget push --api-key option has now been added to GitHub Packages. For some reason this works consistently, but using basic auth (password in nuget.config file) fails randomly!\n\nExample:\n  - name: Publish Nuget to GitHub registry\n    run: dotnet nuget push ./<project>/out/*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/<organization>/index.json --skip-duplicate --no-symbols \n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nUpdate:\nBased on Dids answer on GitHub my configuration works now like this:\nname: NuGet Generation\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [closed]\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-18.04\n    name: Update NuGet package\n    steps:\n\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Setup .NET Core @ Latest\n        uses: actions/setup-dotnet@v1\n        with:\n          source-url: https://nuget.pkg.github.com/<organization>/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}        \n          \n      - name: Build solution and generate NuGet package\n        run: |  \n          cd <project>\n          dotnet pack -c Release -o out  \n\n      - name: Push generated package to GitHub registry\n        run: dotnet nuget push ./<project>/out/*.nupkg --skip-duplicate --no-symbols true\n\n\nNote: At the time of writing I needed to use --no-symbols true instead of --no-symbols to prevent exceptions in the dotnet NuGet client.\n\nOld answer:\nI switched to the Windows image and got it to work based on the example of @anangaur. This is my final code:\nname: NuGet Generation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: windows-latest\n    name: Update NuGet \n    steps:\n\n      - name: Checkout repository\n        uses: actions/checkout@master\n\n#  latest image has .NET already installed!\n#      - name: Setup .NET environment\n#        uses: actions/setup-dotnet@v1\n#        with:\n#          dotnet-version: '2.2.105' \n          \n      - name: Build solution and generate NuGet package\n        run: |  \n          cd SOLUTION_FOLDER\n          dotnet pack -c Release -o out  \n\n      - name: Install NuGet client\n        uses: warrenbuckley/Setup-Nuget@v1\n        \n      - name: Add private GitHub registry to NuGet\n        run: nuget sources add -name \"GPR\" -Source https://nuget.pkg.github.com/ORGANIZATION_NAME/index.json -Username ORGANIZATION_NAME -Password ${{ secrets.GITHUB_TOKEN }}\n        \n      - name: Push generated package to GitHub registry\n        run: nuget push .\\SOLUTION_FOLDER\\PROJECT_FOLDER\\out\\*.nupkg -Source \"GPR\" -SkipDuplicate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Make some files private in a repository\n\nI want to host the source code for a website I created in a public repository on Github. I want it to be public so that I can also show the source code to others, however there are some files that I want to remain private. Files that may contain passwords and such (like when connecting to databases). Is there a way to do that?"}, {"role": "assistant", "content": "Although keeping passwords in the repository is a bad practice as @aspyct has explained, I want to add that not all things that one might want to keep private in a repository are passwords, e.g., one might want to develop a new feature but not expose it until it's done(or maybe expose it never).\nIn these cases, we can create two remote repositories both associated with the same local repository, but each corresponding to a different branch. Here's a step by step instruction:\n\nCreate two remote repositories(on GitHub or BitBucket or wherever else) with different names, for example: one myrepo and the other privates.myrepo. Make the myrepo a public repository and the privates.myrepo a private repository.\nOn local, initiate a single git repository: git init.\nAdd the non-private files now in the repository and make an initial commit.\nConnect this repository to the public remote:\n\ngit remote add <remote_branch_name> <remote_repository_address>\n\nin our example which becomes:\ngit remote add origin https://github.com/<YOUR_USERNAME>/myrepo.git\n\n\nPush: git push -u origin master\n\nNow add a branch to the local repository and switch to it: git checkout -b private_work\n\nHere comes the important step: Connect this branch to the other remote, i.e, the private one. In our example:\n\n\ngit remote add privates https://github.com/<YOUR_USERNAME>/privates.myrepo.git\n\n\nNext, add the private files to the local repository and make a commit.\nPush the private_work branch to the privates remote: git push -u privates private_work\n\n\nRead more explanation on how it works here: https://24ways.org/2013/keeping-parts-of-your-codebase-private-on-github/. I've also learned this from him.\nSee a cool terminal-show recording of all these steps together here: http://showterm.io/04130676d3401229e7df6\nAlso, you can add an alias like alias private_push='git push privates private_work in an startup script like .bashrc in case you're on Linux, in order to lower the chances of making a wrong push of private work to the public repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trying to understand wincred with git for windows - confused\n\nWhile following a git tutorial, I've made my first push over https today to a remote on git hub, the tutorial mentions the following command to avoid having to keep typing in password details:\ngit config --global credential.helper wincred\n\nMy question is how is this working as a concept? it is the first time I have come across a credential helper. I'm not sure how it works with Windows and Git, where is it being stored and how does it authenticate when I push or pull?\nI've tried to search for this online but haven't found any information that explains this in a simple way for someone who is a beginner."}, {"role": "assistant", "content": "If you use wincred for credential.helper, git is using the standard windows Credential Manager to store your credentials.\nYou can view the Credential Manager from your Control Panel settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get notifications on new GitHub issues?\n\nRight now, I miss quite some issues for my project hosted on GitHub. I am looking for a way which tells me of new issues. E-Mail would be fine, but those are only sent if I participated in a specific issue. IRC is also an option.\nFor both email and IRC, google spit out nothing helpful. Is this really not possible?"}, {"role": "assistant", "content": "Actually, this one was a bit tricky. I didn't realize that notifications work slightly different with organizations. Sorry, I really forgot about this question and I can't tell you exactly how to configure it as this was a while ago - but if you stumble over this, and you are trying to get notifications for issues that are in organization projects, you should read this:\nhttp://alexking.org/blog/2011/11/28/not-getting-github-notifications\nwhose key point is (a quote from Github support):\n\nUsers in the Owners group don\u2019t receive notifications. You need to create a normal team and add yourself to it to get notifications for that team\u2019s repos."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github Dependabot alert: Inefficient Regular Expression Complexity in nth-check\n\nPossible duplicate, but couldn't find any clear answers.\n\nDependabot cannot update nth-check to a non-vulnerable version\nThe latest possible version that can be installed is 1.0.2 because of the following >conflicting dependency:\n\n[email\u00a0protected] requires nth-check@^1.0.2 via a transitive dependency on [email\u00a0protected]\n\n\njust upgraded to [email\u00a0protected] from 4.0.0."}, {"role": "assistant", "content": "As Dan Abramov explains in this issue, it is (very likely) a false alarm and can be safely dismissed.\nMore specifically, if you are using CRA and nth-check is referenced only from it, it is not an issue, because CRA is a build tool and the vulnerable code will never get into the resulting application bundle and thus will never be called by client code.\nYou can verify this by moving \"react-scripts\" into \"devDependencies\" in package.json and running npm audit --production."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I check my github settings or who I'm signed in as on my current project through the terminal?\n\nMy friend set up my github for me and cloned a project onto my desktop. I want to see what is my profile name on the Github account he gave me. Is there a command to do that?"}, {"role": "assistant", "content": "You can see the current configurations, including username, with git config -l.\nYou'll want to look for user.name, user.email, and github.user. \nYou can unset configurations using --unset, like git config user.name --unset. \nYou can also reset configurations using git config user.name \"Your Name\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete remote branch (e.g. Github) from command line? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I delete a Git branch locally and remotely?\n\n                                (41 answers)\n                            \n\nClosed 6 years ago.\n\n\n\nI have a git repository in my local machine:\nI add a new branch called test and add a few commits\nThen I checkout to master branch and add commits to it.\nSo I use git push --all github and continue working on master.\nAfter some time I decide to completely remove the test branch and use: git branch -d test and git branch -r -d github/test, but it only deletes the local branch used for tracking the actual test branch as git says:\nDeleted remote-tracking branch github/buggy (was acc5a58).\nI'm asking if there's a way to actually remove the test branch from github servers from command-line?"}, {"role": "assistant", "content": "Local Branch\ngit branch -D local_branch\n\nRemote Branch\ngit push origin --delete remote_branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "clone a specific branch from git through ansible playbook\n\nI am using ansible to deploy my app. I am cloning the app from github using the following:\n- name: Deploy site files from Github repository\n  sudo: yes\n  git: [email\u00a0protected]:xyz/abc.git dest=/home/{{deploy_user}}/{{app_name}} key_file=/home/ubuntu/.ssh/id_rsa accept_hostkey=yes force=yes\n\nI want to clone a specific branch from the repository. I read the documentation of ansible but couldn't find any option to clone a specific branch. It has an option to clone a version but not branch."}, {"role": "assistant", "content": "From the documentation:\n\nversion\nWhat version of the repository to check out. This can be the full 40-character SHA-1 hash, the literal string HEAD, a branch name, or a tag name.\n\n(emphasis mine)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Count Git commits per period\n\nis there a way to count the number of commits in certain period (e.g. the last year from 2015-03-01 to 2016-03-01) for git (GitHub) repositories?"}, {"role": "assistant", "content": "To count the commits in a date range in your current branch do this:\n git rev-list --count HEAD --since=\"Dec 3 2015\"  --before=\"Jan 3 2016\"\n\nIf you want the count for all branches in one go use --all additionally\ngit rev-list --count --since=\"Dec 3 2015\"  --before=\"Jan 3 2016\" --all\n\nif you want to exclude merge-commits, use option --no-merges\ngit rev-list --count --since=\"Dec 3 2015\"  --before=\"Jan 3 2016\" --all --no-merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Generating SSH keys for 'apache' user\n\nHow do I add SSH keys for 'apache' user in Linux? \nBACKGROUND \nI am trying to add a service hook to github to notify a URL once I push to my repo. I have the following php page set up:\n<?php `git pull origin master`;  \n\nHowever I get the following output:\nsh: git: Permission denied\n\nThis is because the keys I generated for github access were generated by my 'root' user. However when I exectue a command from php it is the 'apache' user that runs it.\nThe keys therefore do not correspond and permission is denied to pull.\nAs I cannot switch user from the terminal to generate keys as 'apache', I am not too sure what to do. Can anyone suggest a solution?"}, {"role": "assistant", "content": "You may have to copy the root generated keys in the .ssh directory of your apache user.\nAssuming the homedir of apache is /var/www (check /etc/passwd) and the named key is id_rsa-git :\nmkdir -p /var/www/.ssh/\ncp /root/.ssh/id_rsa-git /var/www/.ssh/id_rsa\n\nNo need to copy the public key.\nNote : by default the key used are id_rsa or id_dsa. You may change the name of the copied key to match this.\nYou may also change ownership of the id_rsa key and .ssh directory: \nchown -R apache:apache /var/www/.ssh\nchmod 0700 /var/www/.ssh\nchmod 0600 /var/www/.ssh/id_rsa"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to search issues/pr whose author is NOT somebody in github?\n\nI want to filter all issues created by robot like:\nis:issue is:open author:not:robot\nHow to get all issues except those created by robot?"}, {"role": "assistant", "content": "use dash - to exclude:\n-author:robot"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push a single file in a subdirectory to Github (not master)\n\nI have changed a single file in a subdirectory of my repository and I want to push just that file to Github.  \nI've made a small change to one file, and I don't want to re-upload the entire repository.\nIt seems like all of the instructions that I've seen so far require me to merge locally with the master and then push my local master to the remote origin. \nHow can I push just that one file?"}, {"role": "assistant", "content": "When you do a push, git only takes the changes that you have committed.\nRemember when you do a git status it shows you the files you changed since the last push? \nOnce you commit those changes and do a push they are the only files that get pushed so you don't have to worry about thinking that the entire master gets pushed because in reality it does not.\nHow to push a single file:\ngit commit yourfile.js\ngit status\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to contribute on github anonymously via Tor?\n\nI would like to contribute anonymously to projects on github. Not to cause mischief, more in the spirit of anonymous donations. \nThe tool of choice for being anonymous online seems to be TOR, which works well for almost anything you can do in a browser. However, to contribute on github, it appears necessary to use the command line interface, or the Mac app. \nHow can I channel my git operations in this setup through Tor? And how can I verify that this is actually what is happening?\nEdit: please note the difference between pseudonymous (with a fake e-mail address) and anonymous (with an IP address that cannot be associated with an identity). Pseudonymous access to github is trivial; however, I am looking for anonymous access."}, {"role": "assistant", "content": "None of these answers give a full useable workflow, I want to git push, not send an email! Here's how to do it properly but there's a bit of setup required. Instructions are for OSX\n#Publishing anonymously to github with tor+ssh\n\nDownload tor browser bundle AND the tor command line proxy\n brew install tor\n brew install --cask tor-browser\n\n\n\n1.1 In tor browser, Create a new email address ( I used hmamail).\n1.2 In tor browser, Create a new github account\n\nCreate a new ssh key, only for tor with your new email address\nssh-keygen -t rsa -b 4096 -C \"[email\u00a0protected]\"\n\n\n\n2.1. Give it a name like: ~/.ssh/private_tor_rsa\n2.2. In github, go to SSH and PGP keys and add a new SSH key, make title memorable.\n2.3. In github, set Key to the public key you've just createdclip < ~/.ssh/private_tor_rsa.pub\n\nIn github, create an empty repository, let's call it ByteCoin, don't initialise it with a readme.\n\nEdit the ssh config file ~/.ssh/config (create if it doesn't exist)\nHost github-tor-alias\nUser git\nHostName github.com\nIdentitiesOnly yes\nIdentityFile ~/.ssh/tor_only_rsa\nProxyCommand nc -X 5 -x 127.0.0.1:9050 %h %p\n\n\nYou've created a hostname called github-tor-alias and tells ssh to use a proxy on localhost:9050 and use the tor_only_rsa key to authenticate.\n\nSetup the config for your new project to use the tor proxy and credentials.\nmkdir secret-project\ncd secret-project\ngit init\n\ngit config --add user.name satoshi_2\ngit config --add user.email [email\u00a0protected]\n\n\n\nThis next line is bloody important\n5.1. note the ssh://git and github-tor-alias\n    git remote add origin ssh://git@github-tor-alias/staoshi_2/ByteCoin.git\n\n\nRemember how you installed the tor command line proxy? start it as a service. It listens on localhost:9050\nbrew services start tor\n\n\nAre you ready? Try pushing to github:\ngit push origin master\n\n\n\nDid it work? Go and double check everything, have I missed something? please edit this answer!\nCongratulations\nbreath that free air and get creating!\nSo what have we just done? we've created a new identity who is associated only with the tor network, as far as github.com is concerned, you are staoshi_2 and could be anywhere in the world.\ntor runs a proxy on 127.0.0.1:9050, because we setup a ProxyCommand in the ~/.ssh/config file, all of your traffic goes through the tor proxy, git uses your new ssh key because you added IdentityFile and IdentitiesOnly to your ~/.ssh/config file.\nPowerful stuff.\nLet's double check that you're really anonymous\n\nstop tor and try to git push again, it had better fail!\nssh_exchange_identification: Connection closed by remote host\nfatal: Could not read from remote repository.\n\n\n\n8.1. If that git push succeeded well guess what, you weren't using tor, github.com knows your IP, figure out how to get it working and then start again with a new email address.\n9. Happy freedom!\nanon."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In Xcode 4 how do I add a remote GitHub repository to an existing local project?\n\nThe Git integration in Xcode 4 is very welcome however it seems to be a bit flaky when it comes to dealing with remote repositories.\nFor clarity I'm using OS X version 10.6.7 and Xcode 4.0.2 (4A2002a). \nIf I create a new Xcode 4 Project and accept the option to create a local Git repository, all is well. I can commit locally and that's great.\nWhen I want to push the new project to GitHub I want to add a remote repository and push my local changes up to GitHub. I can add a GitHub repository to Xcode 4 as a new Repository in the Organizer window but there's no method of setting it as a remote repository for my existing project. \nSo I switch to using git commands in Terminal.\ngit remote add origin https://<username>@github.com/<organization>/<repository>.git\n\nIf I then go back to Xcode 4 and try to use \n\nFile -> Source Control -> Push...  \n\nthen the Choose the repository to which to push changes. dialog appears listing the origin remote repository. There's a yellow indicator saying that Authentication is required, which is fine as I've not been able to enter my credentials yet for HTTPS. \nHowever when I click 'Push'  and it tries to push the changes it says \"The operation could not be performed because access to the repository 'origin' is denied.\"\nA dialog prompting me for my username and password then appears with my  pre-filled out so it must be reading this correctly from the local repository's config.\nWhen I enter my password Xcode 4 then crashes with the following error\nASSERTION FAILURE in /SourceCache/IDEKit/IDEKit-303/Framework/Classes/SourceControl/IDESourceControlOperationInfo.m:59\nDetails:  Message sent to invalidated object: <IDESourceControlPushOperationInfo, 0x200bd2a80>. Backtrace for invalidation:\n (null)\nObject:   <IDESourceControlPushOperationInfo: 0x200bd2a80>\nMethod:   -invalidate\nThread:   <NSThread: 0x200020700>{name = (null), num = 1}\nHints:   None\n\nIf I restart Xcode an origin repository has been added to the Repositories browser in Organizer and I can see the master branch on GitHub so I know the credentials are right without me changing anything.\nHas anyone found a reliable way of using Xcode 4 with GitHub starting with a local project first?\nIf I clone an existing GitHub repository with an Xcode project in it, open it with Xcode 4 then even though the first Push seems to fail, the 2nd push did then work. So maybe starting from absolute scratch with Xcode 4 creating the repository for me isn't the best pattern (until they improve the Git tooling in a later version of Xcode 4).\nEDIT WITH FURTHER DETAILS OF ONE WORKAROUND\nThis example only really applies to the first project you're adding to a GitHub repository. As such I think you're better off with the following steps, bearing in mind there still seem to be some Xcode 'gotchas' in this solution.\n\nList item\n'Connect to a repository' from Welcome to Xcode dialog.\nUse GitHub SSH URL for Location\nGive it a name (RepositoryName)and Clone to a directory\n1st attempt appears to fail even though contents are downloaded\nTry Again and it works.\nThere is now a new Repository defined in the Organizer window with its origin set to the GitHub remote SSH URL.\nCreate a New Project within the directory you just cloned into but DO NOT tick the 'Create local git repository for this project' option.\nDo initial commit to local Git repository.\nTry Source Control -> Push and Xcode 4 fails with 'The operation could not be performed because access to the repository RepositoryName was denied. Check username and password'\nTry Source Control -> Push and Xcode 4 pops up the remote Repository dialog again but this time has detected a remote Repository called origin. Next to it there's a yellow ball and 'Authentication required'.\nClicking 'Push' again caused the remote Push to work.\n\nOne thing I've spotted and not managed to work out yet is that the response messages back from GitHub with the checkin hash value and any messages seem to get reported in Xcode Log navigator as Push failures, even though the Push is successful as far as GitHub is concerned.\nAnyone else have a better solution?"}, {"role": "assistant", "content": "I think I found the Xcode way to push a existing project to GitHub or any other remote repository! \nPreconditions\n\nI assume that you have a project created by Xcode 4 with a local git repository.\nYou created an empty remote git repository (I call it RemoteRepository in in the following example)\n\nPush it to remote\n\nOpen the Organizer in Xcode an go to the Repositories tab\nAt first click on Remotes and then on \"Add Remote\" \n\nEnter a Remote Name and the Location of your remote repository and click on create \n\nThen select your project and open File -> Source Control -> Push ... \n\nSelect your remote repository and wait until it is connectable! Look for the Create in the brackets.\n\nNow your old project is published to GitHub\n\n\nI hope it will works for you also! In my case it works with every remote git repository.\nPlease contact me on twitter if something unclear or wrote in bad English!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: Find PRs where user is a reviewer\n\nGithub added reviewers.\nIs there a way to find PRs (e.g. on the Pull Requests page) where the user is a reviewer? Things I have already tried:\n\nChecked https://help.github.com/articles/searching-issues/ for a filter: \nNone found\nTested potential filters reviewer:{{user}}, review:{{user}}\nNo PRs returned\nTested the involved:{{user}} filter\nPRs with the user as only a reviewer are not shown in results."}, {"role": "assistant", "content": "As of 2017-01-23, Github have added this functionality.\nSearch\n\nYou can filter pull requests based their review status (none,\nrequired, approved, changes requested, or required), by reviewer, and\nby requested reviewer. For example:\ntype:pr review:none\nMatches pull requests that have not been reviewed.\ntype:pr review:required\nMatches pull requests that require a review before they can be merged.\ntype:pr review:approved\nMatches pull requests that a reviewer has approved.\ntype:pr review:changes_requested\nMatches pull requests in which a reviewer has asked for changes.\ntype:pr reviewed-by:gjtorikian\nMatches pull requests reviewed by a particular person.\ntype:pr review-requested:benbalter\nMatches pull requests a particular person has been asked to review.\n\nPersonal PRs\nA new tab can be seen on personal PR page https://github.com/pulls\nProject PRs (e.g. Symfony)\nA new filter can be seen on the project PR page e.g. https://github.com/symfony/symfony/pulls"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add another user to project owners in Github\n\nHow can I add another user to project such that the project shows under his name in his Github account too? I don't want a fork. Two users should host same project in their accounts and this should allow both users to collaborate in the project."}, {"role": "assistant", "content": "You can only add collaborators to your repository. It cannot be \"co-owned\".\nBut when someone is added as collaborator to a repo, that repo will be listed in the Your Repositories section ( but the username will be the owner username only)\nThe only way for doing what you want is to fork the repo and collaborate through pull requests.\nNote that you can create an organization ( https://github.com/account/organizations/new ) and achieve a bit of what you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does Git save space and is fast at the same time?\n\nI just saw the first Git tutorial at http://blip.tv/play/Aeu2CAI.\nHow does Git store all the versions of all the files, and how can it still be more economical in space than Subversion which saves only the latest version of the code?\nI know this can be done using compression, but that would be at the cost of speed, but this also says that Git is much faster (though where it gains the maximum is the fact that most of its operations are offline).\nSo, my guess is that\n\nGit compresses data extensively\nIt is still faster because uncompression + work is still faster than network_fetch + work\n\nAm I correct? Even close?"}, {"role": "assistant", "content": "I assume you are asking how it is possible for a git clone (full repository + checkout) to be smaller than checked-out sources in Subversion.  Or did you mean something else?\nThis question is answered in the comments\n\nRepository size\nFirst you should take into account that along checkout (working version) Subversion stores pristine copy (last version) in those .svn subdirectories.  Pristine copy is stored uncompressed in Subversion.\nSecond, git uses the following techniques to make repository smaller:\n\neach version of a file is stored only once; this means that if you have only two different versions of some file in 10 revisions (10 commits), git stores only those two versions, not 10.\nobjects (and deltas, see below) are stored compressed; text files used in programming compress really well (around 60% of original size, or 40% reduction in size from compression)\nafter repacking, objects are stored in deltified form, as a difference from some other version; additionally git tries to order delta chains in such a way that the delta consists mainly of deletions (in the usual case of growing files it is in recency order); IIRC deltas are compressed as well.\n\nPerformance (speed of operations)\nFirst, any operation that involves network would be much slower than a local operation.  Therefore for example comparing current state of working area with some other version, or getting a log (a history), which in Subversion involves network connection and network transfer, and in Git is a local operation, would of course be much slower in Subversion than in Git.  BTW. this is the difference between centralized version control systems (using client-server workflow) and distributed version control systems (using peer-to-peer workflow), not only between Subversion and Git.\nSecond, if I understand it correctly, nowadays the limitation is not CPU but IO (disk access).  Therefore it is possible that the gain from having to read less data from disk because of compression (and being able to mmap it in memory) overcomes the loss from having to decompress data.\nThird, Git was designed with performance in mind (see e.g. GitHistory page on Git Wiki):\n\nThe index stores stat information for files, and Git uses it to decide without examining files if the files were modified or not (see e.g. core.trustctime config variable).\nThe maximum delta depth is limited to pack.depth, which defaults to 50.  Git has delta cache to speed up access.  There is (generated) packfile index for fast access to objects in packfile.\nGit takes care to not touch files it doesn't have to.  For example when switching branches, or rewinding to another version, Git updates only files that changed.  The consequence of this philosophy is that Git does support only very minimal keyword expansion (at least out of the box).\nGit uses its own version of LibXDiff library, nowadays also for diff and merge, instead of calling external diff / external merge tool.\nGit tries to minimize latency, which means good perceived performance.  For example it outputs first page of \"git log\" as fast as possible, and you see it almost immediately, even if generating full history would take more time; it doesn't wait for full history to be generated before displaying it.\nWhen fetching new changes, Git checks what objects you have in common with the server, and sends only (compressed) differences in the form of thin packfile.  Admittedly Subversion can (or perhaps by default it does) also send only differences when updating.\n\nI am not a Git hacker, and I probably missed some techniques and tricks that Git uses for better performance.  Note however that Git heavily uses POSIX (like memory mapped files) for that, so the gain might be not as large on MS Windows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Linking to an issue from a wiki page\n\nOn GitHub, is there a simple way to reference an issue (eg: #1234) from within a markdown file such that it is displayed as a hyperlink?\nI don't want to write out the full form each time, as in:\n[#1234](//github.com/user/project/issues/1234)\n\nIn commit messages, issue numbers are automatically hyperlinked. Can this happen in wiki documents too?\n(This is not a duplicate of this question which is simply asking about markdown hyperlink syntax.)"}, {"role": "assistant", "content": "It doesn't happen in wiki documents.\nYou can use a relative url  but it isn't that much of a shortcut.   It also depends on where you are in the project.\nFor example in the Readme.md in the master branch of the project:\n[#1](../../issues/1)\nOn the github wikis:\n[#1](../issues/1)\nAnywhere:\n[#1](/user/project/issues/1)\n(h/t to VertigoRay for suggesting this)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should we gitignore the .python-version file?\n\nI have a .python-version file, and when I create a Python repo with github and specify that it should have a .gitignore, it adds the .python-version file to it. It seems to me that that file should NOT be ignored since other people running the code on different machines would want to know what version of Python they need.\nSo why is it .gitignored?"}, {"role": "assistant", "content": "While being too specific, you can still version that file (meaning: not include it in the default .gitignore), as :\n\nit will be used only by pyenv\n(and, as noted by diavol in the comments, setup-python GitHub Action uses this file to set the python version of the build environment)\nit is a good addition to the README, in order to illustrate what version of python is recommended for the specific project,\nit can be overridden easily (if you are using pyenv), or simply ignored (if you don't have pyenv).\n\nAs the article \"How to manage multiple Python versions and virtual environments\" states:\n\nWhen setting up a new project that is to use Python 3.6.4 then pyenv local 3.6.4 would be ran in its root directory.\nThis would both set the version, and create a .python-version file, so that other contributors\u2019 machines would pick it up.\n\nBut:\n\npyenv looks in four places to decide which version of Python to use, in priority order:\n\nThe PYENV_VERSION environment variable (if specified).\nYou can use the pyenv shell command to set this environment variable in your current shell session.\nThe application-specific .python-version file in the current directory (if present).\nYou can modify the current directory's .python-version file with the pyenv local command.\nThe first .python-version file found (if any) by searching each parent directory, until reaching the root of your filesystem.\nThe global version file. You can modify this file using the pyenv global command.\nIf the global version file is not present, pyenv assumes you want to use the \"system\" Python. (In other words, whatever version would run if pyenv weren't in your PATH.)\n\n\n\n\nNone of these listed reasons indicate why .python-version should not be stored in source control.\nYou can still have a section in the README saying that the version to be used is specified in the .python-version file.\n\nIf someone is using pyenv it works automatically for them.\nIf not, then they're in no worse of a position than they were if .python-version was not under source control.\n\n\nTrue: Keeping the .python-version file under source control does ensure that pyenv users have an automatic reference point for the Python version to be used, which could streamline the setup process for them. Moreover, it serves as a documented specification of the Python version for those who do not use pyenv, assuming they are informed via the README or other documentation that they should refer to this file for the Python version information.\nHowever, one potential issue with storing the .python-version file in source control could be the risk of unwanted modifications. Developers might accidentally commit changes to the .python-version file as they switch between different Python versions in their local development environment, potentially leading to conflicts or confusion among the team.\nTo mitigate this risk, a possible strategy would be to include clear guidelines in the README on how to handle the .python-version file. That might include instructions to avoid committing changes to the file unless a deliberate decision has been made to update the Python version used by the project.\nBut if you have to rely on README, I would instead put in that file instructions to activate a content filter driver, using a .gitattributes declaration.\n\n(image from \"Customizing Git - Git Attributes\", from \"Pro Git book\")\n\n.gitignore\n.python-version\n\n\n.gitattributes\n.python-version filter=smudgeScript\n\n\ninstructions to activate the content filter driver:\ngit config filter.smudgeScript.smudge /path/to/your/smudgeScript\ngit config filter.smudgeScript.clean \"cat python-version.tpl\"\n\n\n\nAnd now, any checkout/clone would restore the right .python-version while avoiding any unwanted modification in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Meaning of lib directory in github repositories\n\nMost of the time, when I look at projects in github , I see lib/ directory. \nI just googled if there is a conventional meaning of lib/ directory. But I couldn't find much.\nI would like to know what lib/ directory is for just to choose where to start looking at in github projects. \nProject which have lib/ directories. \norchestrator \ngulp"}, {"role": "assistant", "content": "The lib directory, for most of my projects, is where I place shared components that might be used in multiple facets of my application. Things in this folder should not be tightly coupled to your application, and should theoretically be able to be plucked from one project to another, and work as expected (assuming all dependencies are available). Some examples of things I put in my lib folders:\n\nIf I'm defining a policy/process for loading bootstrapped data off the page into my frontend code, I would define the class/method in a file in the lib folder. It is just functional, and not bound to any of my application code or DOM structure.\nIf I need to build my own UI components (let's say I need to merge some Tagging functionality into a text area, and am unhappy with existing OSS alternatives), I would do it here. The code in lib just outlines how my component works, but doesn't implement any application-specific functionality. I can then include this in my core application and use it as if it were a third party library.\n\nEssentially, anything that could be a third party dependency that you don't want to place in it's own repository and set up management for, you can use lib and have that functionality cleanly decoupled within your primary app."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to make pull requests *without* a github account?\n\nOne of the goals of git is to be decentralized. If Github is to be the ... hub of git, then maybe it could take into account that there are other hubs out there, and allow pull requests to happen on git URLs that are not hosted on github.\nThe documentation is fairly clear about this: pull requests require that you have a Github account and that you fork a repository on github. Is this a real current technical limitation or is there a way to workaround that on Github?\nIf not, is it eventually planned to allow Github's \"pull requests\" tool to actually allow to pull from repositories outside of the Github silo?"}, {"role": "assistant", "content": "You can use git request-pull to achieve the same kind of workflow (which is improved with Git1.7.9+).\nSee the article \"using signed tag in pull-requests\"\n\nA typical distributed workflow using Git is for a contributor to fork a project, build on it, publish the result to her public repository, and ask the \"upstream\" person (often the owner of the project where she forked from) to pull from her public repository. Requesting such a \"pull\" is made easy by the git request-pull command.\n\n\nStarting from Git release v1.7.9, a contributor can add a signed tag to the commit at the tip of the history and ask the integrator to pull that signed tag.\nWhen the integrator runs git pull:\n\n\n\nthe signed tag is automatically verified to assure that the history is not tampered with.\n\n\n\nIn addition, the resulting merge commit records the content of the signed tag, so that other people can verify that the branch merged by the integrator was signed by the contributor, without fetching the signed tag used to validate the pull request separately and keeping it in the refs namespace.\n\n\nWith Git 2.40 (Q1 2023), \"git request-pull\"(man) can strip embedded signature from signed tags using non-PGP signatures.\nSee commit a9cad02 (25 Jan 2023) by Gwyneth Morgan (gwymor).\n(Merged by Junio C Hamano -- gitster -- in commit ad7fd3c, 08 Feb 2023)\n\nrequest-pull: filter out SSH/X.509 tag signatures\nSigned-off-by: Gwyneth Morgan\n\n\ngit request-pull(man) filters PGP signatures out of the tag message, but not SSH or X.509 signatures."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Determining a page is outdated on github pages\n\nGithub pages sets very aggressive cache headers (Cache-Control: max-age=86400 1 day, Expires 1 month ahead) on all served content.\nIf you update your pages and push to github, people revisiting the pages who have already got cached copies will not get the new pages without actually cleaning their browser cache.\nHow can a script running in a page determine that it is stale and force an update?\nThe steps might be:\n\ndetermine you are running on github pages: easy, parse window.location for github.com/\ndetermine current version of page: hard, git doesn't let you embed the sha1 in a commited page; no RCS $id$.  So how do you know what version you are?\nget the current version in github; hard, github got rid of non-authenticated v2 API.  And there's a time disconnect between pushing to github and github getting around to publishing too.  So how do you know what version you could get?\nhaving determined you're stale, how do invalidate a page and force reload?  hard, window.location.reload(true) doesn't work in Safari/Chrome, for example...\n\nSo its solve-these-steps; of course there may be another way?"}, {"role": "assistant", "content": "To have a better control of the caching of your website you can use the HTML5 cache manifest. See:\n\nA Beginner's Guide to Using the Application Cache on HTML5 Rocks\nUsing the application cache on Mozilla Developer Network\nCache manifest in HTML5 on Wikipedia\nOffline Web Applications W3C Working Group Note\nOffline Web applications at WHATWG\n\nYou can use the window.applicationCache.swapCache() to update the cached version of your website without the need for manually reloading the page.\nThis is a code example from HTML5 Rocks explaining how to update users to the newest version of your site:\n// Check if a new cache is available on page load.\nwindow.addEventListener('load', function(e) {\n\n  window.applicationCache.addEventListener('updateready', function(e) {\n    if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n      // Browser downloaded a new app cache.\n      // Swap it in and reload the page to get the new hotness.\n      window.applicationCache.swapCache();\n      if (confirm('A new version of this site is available. Load it?')) {\n        window.location.reload();\n      }\n    } else {\n      // Manifest didn't changed. Nothing new to server.\n    }\n  }, false);\n\n}, false);\n\nTo avoid some confusion I'll add that GitHub sets the correct HTTP headers for cache.manifest files:\nContent-Type: text/cache-manifest\nCache-Control: max-age=0\nExpires: [CURRENT TIME]\n\nso your browser knows that it's a cache manifest and that it should always be checked for new versions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding files to a GitHub repository\n\nHow do I add files to my GitHub repository? I'm using Windows and all my project files are in one folder and I just need to upload it to my repo."}, {"role": "assistant", "content": "The general idea is to add, commit and push your files to the GitHub repo.\nFirst you need to clone your GitHub repo.\nThen, you would git add all the files from your other folder: one trick is to specify an alternate working tree when git add'ing your files.\ngit --work-tree=yourSrcFolder add .\n\n(done from the root directory of your cloned Git repo, then git commit -m \"a msg\", and git push origin master)\nThat way, you keep separate your initial source folder, from your Git working tree.\n\nNote that since early December 2012, you can create new files directly from GitHub:\n\n\nProTip\u2122: You can pre-fill the filename field using just the URL.\n  Typing ?filename=yournewfile.txt at the end of the URL will pre-fill the filename field with the name yournewfile.txt."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to skip GitHub Actions job on push event?\n\nWith Travis CI, we can skip the build for a particular commit with adding a suffix to a commit. This is described at Travis CI. I find this feature practical when I only edit README.md which is not code-related and the pre-flight build doesn't need to be triggered.\n[skip ci]\n\nHow do I skip the jobs trigged on: push events using GitHub Actions?\nname: Maven Build\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check-out project\n      uses: actions/checkout@v1\n    - name: Set up JDK 11.0.3\n      uses: actions/setup-java@v1\n      with:\n        java-version: 11.0.3\n    - name: Build with Maven\n      run: mvn -B package --file pom.xml\n\n\nAnswers summary:\nBig thanks to all the answerers providing various ways to achieve it. I bet everybody would need something a little bit different regarding to the origin of their problem and the CI approach. Here are the answers listed for a quick navigation:\n\nSkip CI on readme.md file: https://stackoverflow.com/a/61876395/3764965\nSkip CI on [skip ci] as a new GitHub feature:\n\nhttps://stackoverflow.com/a/66156840/3764965 (answer here)\nhttps://stackoverflow.com/a/66114678/3764965 (answer in another question)\n\n\nSkip CI on [skip ci] message by parsing (customizable solution):\n\nhttps://stackoverflow.com/a/59775665/3764965\n\n\nAllow CI per specific branch: https://stackoverflow.com/a/61876395/3764965\n\nAll the answers deserve upvote! If you like my question, you should double-like the answers."}, {"role": "assistant", "content": "UPDATE: Please see Helmisek anwser, which points out that Github has the functionality built-in now.\nMy answer only makes sense, if you want to skip just some jobs/steps.\n\nYou can give the following a try:\nname: Maven Build\non: [push]\n\njobs:\n  build:\n    if: \"!contains(github.event.commits[0].message, '[skip ci]')\"\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check-out project\n      uses: actions/checkout@v1\n    - name: Set up JDK 11.0.3\n      uses: actions/setup-java@v1\n      with:\n        java-version: 11.0.3\n    - name: Build with Maven\n      run: mvn -B package --file pom.xml"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "pull using git including submodule\n\nIn  one of my iOS project I have add a sub-module added, lets say a friend of my wants to pull it including the submodule, how can he do this? Whenever I tried to download the zip file from github it doesn't pull the submodule along with it"}, {"role": "assistant", "content": "That's by design.  Get the submodules as a second step.\ngit clone git://url...\ncd repo\ngit submodule update --init\n\nThen afterwards, add another step after the git pull.\ngit pull ...\ngit submodule update --recursive\n\nOf course, this only works if the submodules are set up correctly in the first place..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to recover from a git push -force?\n\nHere is what happened:\nI have two remote git branches: master and feature1. For some reason I have to use git push --force for the feature1 branch, but I didn't know when I use git push --force it will also push the master branch. Then, a disaster happened, as I pushed my local master branch to the remote repository.\nLuckily, my local branch is not too far away from the remote. Basically, my remote master has two pull requests merged ahead of my local master.\nSo my problem is: can I reopen the pull request and remerge? I noticed that there is commit version for merge request, so I am worried if I simply make new pull request it will mess up something? Ideally I just want to redo the merging of the two requests.\nIs there some other way to recover from this disaster? I learned the --force is a really, really bad choice. :(\nUpdate, example of what happened:\nI have following branches:\nmaster\nfeature1\norigin/master\norigin/feature1\n\nI integrate two pull requests by using the GitHub's Auto merge pull requests. Then, I didn't fetch the master branch on my local machine. Thus, I think my origin/master is two versions behind the remote master.\nThen I accidentally used git -f push, which overwrote the remote branch and now I lost the commits from the pull requests on remote repository.\nHow can I recover from it without messing up other contributors' history?"}, {"role": "assistant", "content": "When working with github, refer to GHugo's answer which gives a foolproof procedure with github. If you're on an in-house (or other non-github) installation, read on.\nYou can always restore the previously observed state of master, by resetting to the old commit and issuing another push -f. The steps involved typically look like this:\n# work on local master\ngit checkout master\n\n# reset to the previous state of origin/master, as recorded by reflog\ngit reset --hard origin/master@{1}\n\n# at this point verify that this is indeed the desired commit.\n# (if necessary, use git reflog to find the right one, and\n# git reset --hard to that one)\n\n# finally, push the master branch (and only the master branch) to the server\ngit push -f origin master\n\nNote, however, that this restores remote master to the state most recently retrieved by git fetch or equivalent. Any commits pushed by others after the last time you fetched will be lost. However, those commits will still be available in their reflogs, so they can restore them using steps like the above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to diff in a comment on github?\n\nI've seen people show diffs of their code from other forks to illustrate a point in github like on this pull request thread: https://github.com/osTicket/osTicket/pull/3035\nI think it would be really helpful to show the diff of the commit from the current branch. How do you do it?"}, {"role": "assistant", "content": "You can pull the branch to your local copy, and make your modification. After that, copy the output of git diff and paste to GitHub as follows.\n```diff\nyour diff file contents\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub actions: default branch variable\n\nIs there any smart way to determine the default branch in GitHub actions?\nNow I need to write something like:\non:\n  push:\n    branches:\n      - master\n\nis there a way to write something like the code below?\non:\n  push:\n    branches:\n      - $default-branch\n\nI tried to google but found nothing"}, {"role": "assistant", "content": "I accidentally found a really nice way to solve this. That evalutes to the branch name, e.g. master.\n${{ github.event.repository.default_branch }}\n\nAlso, found out the hard way that that always() is side-effecting: my job was getting skipped if always() was not called even though the other clause was true.\nThis works to run a job only when running on default branch\n  if: ${{ always() && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to know if latest commit to master has been pushed to the remote?\n\nI have merged a branch in to master and now I can see that in my git log\nSome time has passed and now I want to know whether I previously also pushed master (with that commit) to the remote.  How can I tell if it has been pushed?\nI can think of a few workaround such as recloning the repository elsewhere, or resetting and checking and then re-merging but I feel that there's probably a somewhat simpler answer.\nfyi this is different from How can I know in git if a branch has been already merged into master? as I know it has been merged, just don't know about the remote push."}, {"role": "assistant", "content": "Do\n> git status\n\nIf the output is\n# On branch master\nnothing to commit, working directory clean\n\nThen you have pushed the current commit.\nIf the output instead begins with \n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#   (use \"git push\" to publish your local commits)\n\nThen you have a local commit that has not yet been pushed. You see this because the remote branch, origin/master, points to the commit that was last pushed to origin. However, your branch is ahead of 'origin/master', meaning that you have a local commit that has been created after the last pushed commit.\nIf the commit you are interested in is not the latest, then you can do\n> git log --decorate --oneline\n\nto find out if the commit in question is before or after the commit pointed to by origin/master.\nIf the commit is after (higher up in the log than) origin/master, then it has not been pushed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github deploy keys: How do I authorize more than one repository for a single machine?\n\nI have a host, call it rob. I used ssh-keygen on rob to get a public key, which I gave to github in the add a new deploy key screen for repository cheech. Now I want to deploy chong on rob as well. But if I go to the add new deploy key screen for repository chong on github, and paste in the public key I generated on rob it says key already in use. I thought, if the key was in use, I could clone chong on rob but that says permission denied.\nSo clearly this is more complicated than I thought and it involves having multiple keys or something. What should I do to clone chong on rob?"}, {"role": "assistant", "content": "Once a key has been attached to one repo as a deploy key, it cannot be\nused on another repo. If you're running into this error while setting\nup deploy keys, then you'll need to modify your remote and set up your\n~/.ssh/config file to use a non-existent github.com hostname that\nssh will be able to use to pick the correct ssh deploy key for your\nrepository.\n# first we remove the origin\n$ git remote -v\norigin  [email\u00a0protected]:username/foo.git (fetch)\norigin  [email\u00a0protected]:username/foo.git (push)\n$ git remote rm origin\n\n# here we add a new origin using a host nickname called\n# foo.github.com that we will reference with a Host stanza in our\n# ~/.ssh/config to specify which key to use with which fake hostname.\n$ git remote add origin [email\u00a0protected]:username/foo.git\n$ git remote -v\norigin  [email\u00a0protected]:username/foo.git (fetch)\norigin  [email\u00a0protected]:username/foo.git (push)\n\nGenerate the deploy key for your repository and name it something\nreasonable like:\n$ ssh-keygen -t rsa -f ~/.ssh/id_rsa-foo -C https://github.com/username/foo\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/username/.ssh/id_rsa-foo.\nYour public key has been saved in /home/username/.ssh/id_rsa-foo.pub.\nThe key fingerprint is:\nc0:ff:ee:34:24:11:5e:6d:7c:4c:b1:a0:de:ad:be:ef https://github.com/username/foo\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|  E   o..o.oo.   |\n| M o o o .+CoW   |\n|  + o = o. ..    |\n| .   . +         |\n|        S        |\n|       o .       |\n|        +        |\n|       . o       |\n|        ..o.     |\n+-----------------+\n\nOnce you've\nadded the deploy key\nyou will then need to  add the following stanza to your ~/.ssh/config file:\nHost fake-hostname-foo.github.com\n    Hostname github.com\n    IdentityFile ~/.ssh/id_rsa-foo\n\nNow you can test it with:\n$ ssh -T [email\u00a0protected]\nHi username! You've successfully authenticated, but GitHub\ndoes not provide shell access."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github actions, schedule operation on branch\n\nI am trying to configure a github workflow, I have managed to configure it on push event. However what if I need it to run on after a time period has passed?\nWhat I have understood from the documentation is that it can be achieved using a schedule.\nname: Release Management\n\non: \n  schedule:\n   - cron: \"*/5 * * * *\"\n\nHow do I specify the branch that the action will run on ?\nMy end goal is to automate releases."}, {"role": "assistant", "content": "If you take a look at the documentation here you will see that the GITHUB_SHA associated with the on: schedule event is \"Last commit on default branch.\" This is what will be checked out by default when you use the actions/checkout action.\nIf your repository's default branch is master (which in general is the case) this workflow will checkout the last commit on master when it triggers.\nname: Release Management\non: \n  schedule:\n   - cron: \"*/5 * * * *\"\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\nIf you want to checkout a different branch you can specify with parameters on the checkout action. This workflow will checkout the last commit on the some-branch branch.\nname: Release Management\non: \n  schedule:\n   - cron: \"*/5 * * * *\"\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: some-branch\n\nSee documentation for the actions/checkout action for other options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Display JavaDocs on GitHub\n\nI'm looking for a way to convert the javadocs from my open source project (generated in Eclipse) to GitHub MarkDown, or come up with some other simple solution to display my documentation on GitHub (shy of simply adding a docs directory). Is there a simple solution for this? Can I simply point the GitHub README.md to my docs directory? Is there something more elegant? I have been striking out on Google."}, {"role": "assistant", "content": "I don't think it's possible to make a usable Javadoc with MarkDown. The best solution is probably to commit the Javadoc you generated on the gh-pages branch (or in the docs/ directory depending on the settings of your GitHub project). It will be available at :\nhttp://username.github.io/projectname\nHere is an example from one of my projects:\nhttp://ebourg.github.io/jsign/apidocs/\nI used to do this but nowadays I just rely on javadoc.io to host the Javadoc:\nhttps://javadoc.io/doc/net.jsign/jsign/\nThe documentation is picked automatically from Maven Central, this saves the extra step of commiting the files into the Git repository when preparing a new release."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Check that git repository exists\n\nIs there any way how to check whether git repository exist just before perform git clone action? Something like git clone $REMOTE_URL --dry-run?\nI would like to implement fast checking method which will check existence before the clone action will be performed. I expect that connection might be slow and repository might be big even more than 1GB, so I don't want to rely on time extensive operation due to simple validation. The clone will be performed asynchronously in the background when validation passes.\nI found this https://superuser.com/questions/227509/git-ping-check-if-remote-repository-exists but it works from git repository context after initial clone action is done.\nMaybe there is some git call which works without git repository context and return \"some data\" if repository on destination exist or error if doesn't."}, {"role": "assistant", "content": "The answer that you linked does what you want it to do.\nTry running this in a folder without a repository in it:\ngit ls-remote https://github.com/git/git\n\nIt should show you the references on the remote, even though you haven't added a local repository with git init or done a git clone.\nSee more: https://www.kernel.org/pub/software/scm/git/docs/git-ls-remote.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to un-approve github review after new commits automatically\n\nOnce a pull request is approved, if there are further commits: \nThe Pull request should go to un-approved state automatically.\nCan this be done?"}, {"role": "assistant", "content": "The ability to Dismiss stale pull request approvals when new commits are pushed is a setting under Require pull request reviews before merging in the branch protection settings. This is disabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change connected commit on release github\n\nHow you I change the connected commit on a github release?\n\nI want to change it to an earlier commit, because I created the release afterwards (after some commits to release 0.9)"}, {"role": "assistant", "content": "When you consider the GitHub API for creating a release, you see a release needs:\n\na tag\na commit referenced by that tag\n\nSo you need to move your tag (locally first, then push it to your GitHub repo)\ngit tag -f -a <tagname> [<commit> | <object>]\n# or, to avoid an editor\ngit tag -m \"tag message\" -f -a <tagname> [<commit> | <object>]\n\ngit push -f <remotename> refs/tags/<tagname>\n\nfor Example:\ngit tag -m \"moving tag to new commit\" -f -a my_tag [commit hash]\ngit push -f origin refs/tags/my_tag\n\nThen see if that is enough for the release to be updated.\n(See \"How do you push a tag to a remote repository using Git?\")\nIf not, you might have to delete that release, and recreate it on the same tag (which will refer to the new commit)\n\nAfter doing this, if you get an error would clobber existing tag, then you need to sync local tags with remote using git fetch --tags -f and the push new commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to publish an organization repository in Github using VSCode\n\nI added my files and commited with no problem.\nThe problem is that when I press \"Publish to Github\" the only options there appear are private and public repositories as individual.\nBut I would like to publish as an organization."}, {"role": "assistant", "content": "Workaround for the lack of functionality:\nYou can add your project to a local repository by pressing \"Initialize Repository\" in your \"Source Control\" tab.\nAfter that, go to Github and make a new empty organisation repository.\nNow you can hit F1 and type \"Add Remote\". You can now choose \"Git: Add remote...\" and then paste the repository's URL, instead of adding from Github.\nNow committing and pushing should work as expected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Not able to checkout branch even after removing worktree and running worktree prune\n\nI create a worktree for branch using the following command:\nGit add worktree <path> <branch-name>\n\nThis created a new worktree for me and checked out the branch  at the path \nNow I thought of deleting/removing the worktree. Ran following commands:\nrm -rf <path>\ngit worktree prune\n\nThis should ideally remove the worktree and remove the reference for that path too. So now I should be able to checkout the branch. But when I run following command to checkout to that branch:\ngit checkout <branch-name>\n\nI get this error:\nfatal: '<branch-name>' is already checked out at ''\n\nCould someone help me with what is going on."}, {"role": "assistant", "content": "I worked around this by erasing .git/worktrees/<branch-name> from the repository directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is the Approve button disabled in GitHub \"pull request review\"?\n\nProblem Background:\nSo far I am the sole owner of a GitHub repo. I committed the code from my system to a branch called release (actually its a tag based on develop branch, if that matters). In GitHub, I created a pull request where base branch is master and compare branch is release. \nBut I am only allowed to comment on review, not allowed to approve. What may be the reason? \nNote: There is no merge conflicts and while creating the pull request the green signal of merging possible was displayed.\n\nHere is how the master branch is protected by me:"}, {"role": "assistant", "content": "If you were the one who has committed the pull request you cannot approve or request changes on this pull request. \nIt's only available when someone else requested such action. \nSo your only option is to comment it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to embed code from repo in github markdown?\n\nIs there a way of embedding the content of a file (from the projects repo) in Githubs markdown?\nI have a code sample and want to embed it in the projects readme."}, {"role": "assistant", "content": "@Petros's answer is (still) correct, however I got annoyed enough with this that I've created a tool to automate the copying and keep your readme synchronised with the source - https://github.com/zakhenry/embedme\nExample usage from the accepted answer\nInsert a comment into the code fence\n```rb\n# path/to/your/file.rb\n```\n\nRun npx embedme README.md (this assumes you have Nodejs installed)\nThe README will be written in-place, with the content of the file following your comment\n```rb\n# path/to/your/file.rb\nclass MyClass\nend\n```\n\nNote that as the comment is still there, you can happily re-run npx embedme README.md again and it won't make any change.\nIf you have CI, you can also run npx embedme --verify README.md which will return 1 if it detects a diff (this would mean that the source was updated without the readme being updated)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to rename main branch to master on a Github repository\n\nI'd like to create a github repository and rename the main branch to master.\nIf I create a new repository on github and do\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M master\n\nI get\nerror: refname refs/heads/master not found\nfatal: Branch rename failed\n\nso I seem to somehow not understand git well enough. What's the issue here?\n\nI must have gotten confused when I was playing around with the above. The following happens:\ngit init create the repository\ngit add README.md adds the file\ngit commit -m \"first commit\" adds the file to the master branch since that still default for git\nso I never have to rename it in the first place. Now Github uses the default main, which can be changed in settings -> repositories on github.com"}, {"role": "assistant", "content": "Using the -m option (move/rename) instead of -M with the name of the branch you're renaming from, here main, will work. Then you can push your renamed branch and maintain your reflog as well.\ngit branch -m main master\ngit push -u origin master\n\nI also wrote a blog post with more details which can in case the repo was cloned by someone else before renaming the branch. You can check it out here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github server-side git hooks (i.e. pre-commit and post-commit)\n\nI've looked around the answers on SO, and the web, and I can't see anything on how to set up a server-side git hook on github (as opposed to webhooks). Is there a way to do this?\nOr alternatively, is there a way to set it up so that .git/hooks is a symlink to a part of the working tree at the time of cloning?\nI should add that this is an internally-hosted github server."}, {"role": "assistant", "content": "For obvious reasons, GitHub won\u2019t allow you to execute arbitrary code on their servers as part of Git hooks. The only hooking they allow is through their webhooks or the integrated third-party services.\nIf you need to run some custom code, you will have to host that somewhere and set up a webhook to run it on your own server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove a dangling commit from GitHub?\n\nYesterday, I pushed to my fork of ConnectBot on GitHub. I pushed once, realized that I hadn't made the change the way I wanted, redid the commit and pushed again.\nNow, GitHub has both commits:\n\nhttps://github.com/nylen/connectbot/commit/1cd775d \u2013 the first, \u201cbad\u201d commit\nhttps://github.com/nylen/connectbot/commit/987671c \u2013 the one I want to keep\n\nMy master branch is only tracking the second commit, but the first commit is still available and is still in my activity feed.  How can I remove it to make sure no one accidentally pulls that commit instead of the corrected version?"}, {"role": "assistant", "content": "If you really need it to be removed immediately, you would probably have to contact GitHub Support.\nPulling should generate a pack that contains only objects that are referenced so no one should get that commit as a result of a clone or a pull.  For example,\n$ git clone git://github.com/nylen/connectbot.git\nCloning into connectbot...\nremote: Counting objects: 6261, done.\nremote: Compressing objects: 100% (1900/1900), done.\nremote: Total 6261 (delta 3739), reused 5980 (delta 3520)\nReceiving objects: 100% (6261/6261), 3.04 MiB | 3.40 MiB/s, done.\nResolving deltas: 100% (3739/3739), done.\n$ git cat-file -t 1cd775d\nfatal: Not a valid object name 1cd775d"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub and Visual Studio [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\nUsing Git with Visual Studio \n\nWhat's the most painless way for the Visual Studio developer to start using GitHub? Ideally the answer would involve a Visual Studio plugin, or some other integration app?\n\nWhat solutions are available today to view/update GitHub repositories? \nCan you rely or expect the same functionality as compared to other VS integrated source control plugins? \nWhat processes would you change, as a user, when approaching this use-case from the TFS or SourceGear Vault scenarios?\nThe current use case is in single-developer mode, but certainly this question is open to single dev and teams of any size. \nAny tools that are Visual Studio plug-ins would be considered 'top of the list'"}, {"role": "assistant", "content": "See this question for general hints using git with Visual Studio.\nThe accepted answer was the Git Extensions project.\nI'm not aware that github would require any specific extras beyond that."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why can't I create an empty Pull Request for discussion prior to developing changes?\n\nI want to branch from master and immediately create an empty Pull Request to discuss implementation details of a specific feature.\nAfter selecting my branch and clicking \"Pull Request\", Github claims \"Nothing to Compare\" and doesn't offer any \"Create Pull Request\" button.\nGithub's own documentation on Flow states (click the right-arrow twice):\n\nYou can open a Pull Request at any point during the development process: when you have little or no code but want to share some screenshots or general ideas, when you're stuck and need help or advice, or when you're ready for someone to review your work.\n\nBut their own documentation on Pull Requests here states:\n\nPull requests can only be opened if there are differences between your branch and the upstream branch\n\nI would like to utilise Github collaboration features with my team prior to committing changes to code.  As we understand it, Pull Requests are for code changes and discussion of implementation details (ie: the \"solution\"), while Issues are higher level, for discussing features/bugs (ie: the \"problem\").\nAm I misunderstanding these things?\nEdit:\nApparently I can circumvent the process by changing the branch with an empty commit:\n\ngit commit --allow-empty -m \"make pull request\"\n\nbut I am trying to better understand why my (default) decision to create an empty PR was wrong in the first place, and why their documentation appears contradictory.  Is there a strict \"discuss code explicitly in PRs\" policy or similar?  Is this a contentious issue?\nUpdate\nGithub have released Draft Pull Requests, but (alas) they can't be created if the 2 branches are identical."}, {"role": "assistant", "content": "The documentation talking about \"no code\" dates from... December 2013:\n\nIt is possible they changed their policy in the official documentation, which is up-to-date and apply to github.com as well as GitHub Enterprise.\nSo  you might want to contact GitHub support to mention this inaccuracy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Travis Could not authorize build request\n\nI'm getting this error for each and every project in my Github organization. \nCould not authorize build request myorg/myproject\n\nI searched everywhere but couldn't find any solutions or what causes this. \nHow to troubleshoot this issue/integration?"}, {"role": "assistant", "content": "'Could not authorize build request ...' usually occurs due to\n\nA plan is not selected. Travis will not select the free plan automatically. Select the free or paid plan for your organization manually.\nSelected plan become inactive. Go to settings and select the plan again.\nExpiration of your paid subscription.\nRan out of free trial build credits available for private repositories.\n\nTravis CI is always-free only for public repositories. The free plan also provides 10,000 build credits try out building private repositories. Read updated info on Billing FAQ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Troubleshooting git push - it asks for a user/pass\n\nI'm using git on a new git linux computer. When I do git push, it me asks for user/password.\nI've setup git properly, and in fact cloning the repo from github into a new folder works perfectly (using my public key, not the readonly copy). When I try to push from a previous clone I made to the same repo I get prompted for a user/pass.\nOf course sshing into [email\u00a0protected] works, and I made sure my public key is configured in github. Any ideas how to continue debugging?"}, {"role": "assistant", "content": "this occurs because you did\ngit clone https://github.com/username/repo\n\ninstead of \ngit clone [email\u00a0protected]:username/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git remove directory\n\nI've got a repository on GitHub (http://github.com/hrickards/PHP-Crypto) for a little project me and a couple of others are working on. My development environment is Aptana Studio, and I use the EGit plugin as Aptana is basically Eclipse underneath. Today the designer sent the HTML and CSS for the website with the images in a folder named img. Previously the images were in a folder called images. Thinking nothing of it and being too lazy to update the CSS and HTML, I simply kept the images in the img directory and commited to Git. However, the GitHub web interface shows both the img and images directories, with the images directory being empty. I've tried deleting the images directory with git rm -r images and git rm images, and even mkdir images; git add images; git rm -r images but whatever I try I get the same result:\nfatal: pathspec 'images' did not match any files.\nHas anyone got any advice on how to remove images, or am I misunderstanding Git or something?"}, {"role": "assistant", "content": "This is what I use, and I think you'll want to as well.  It's close to the other answers, but instructs git to NOT change the local files.  \ngit rm -r -f --cached DirectoryName\n\n\n-r        : recursive\n-f        : force\n--cached  : apply ONLY to index (staging area). Git leaves the local copies alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you display a section of plain text in GitHub markdown?\n\nI'm having a hard time finding any real answer to this (really simple?) question on Google, and I'm starting to worry that there is no solution.\nI am learning GitHub markdown. I would like to show some example code that contains fake email address like [email\u00a0protected]. But GitHub insists on auto-linking this text. I also have a large chunk of text that has many special characters.\nIs there a way to escape blocks or sections so that no special characters are processed, and no auto-links are generated?"}, {"role": "assistant", "content": "Wrap the block in backticks:\n```text\ncode();\n[email\u00a0protected]\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix a permission denied (publickey) error for a git submodule update in the Github Travis CI build?\n\nI cannot update the git submodule, with the error:\n$ git submodule init\nSubmodule 'build/html' ([email\u00a0protected]:quadroid/clonejs.git) registered for path 'build/html'\n...\n$ git submodule update\nCloning into 'build/html'...\nWarning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nBut when I do the same tasks locally, everything is OK.\nHow do I fix this so that the Travis CI build passes and I can still click on the submodule in the repo to direct to it?"}, {"role": "assistant", "content": "This can (thankfully) be easily solved by modifying the .gitmodules file on-the-fly on Travis, so that the SSH URL is replaced with the public URL, before initializing submodules. To accomplish this, add the following to .travis.yml:\n# Handle git submodules yourself\ngit:\n    submodules: false\n# Use sed to replace the SSH URL with the public URL, then initialize submodules\nbefore_install:\n    - sed -i 's/[email\u00a0protected]:/https:\\/\\/github.com\\//' .gitmodules\n    - git submodule update --init --recursive\n\nThanks to Michael Iedema for his gist from which I derived this solution.\nIf your submodules are private repositories, it should work to include credentials in the https URLs, I recommend making a GitHub access token with restricted permissions for this purpose:\n# Replace <user> and <token> with your GitHub username and access token respectively\n- sed -i 's/[email\u00a0protected]:/https:\\/\\/<user>:<token>@github.com\\//' .gitmodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply a git patch when given a pull number\n\nI downloaded a trunk version of a codebase from git, and there are build errors. Aparently a patch is now available, and I received an email :\nsee https://github.com/JustinTulloss/zeromq.node/pull/47 for patch\nI am new to git so I'm not quite sure what to do with this 'patch' especially, since the page looks more like a discussion thread.\nDoes anyone know how I can obtain/apply this patch to my locally cloned git repository?"}, {"role": "assistant", "content": "Save the patch somewhere. If you're using linux you can use curl:\ncurl -L https://github.com/JustinTulloss/zeromq.node/pull/47.patch > /tmp/47.patch\n\nTo apply the patch use git apply. You can see if the patch will apply cleanly with the check option. Change to your git directory and run:\ngit apply --check /tmp/47.patch\n\nIf it looks like you want to apply the patch remove the check option\ngit apply /tmp/47.patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to determine which forks on GitHub are ahead?\n\nSometimes, the original GitHub repository of a piece of software I'm using, such as linkchecker, is seeing little or no development, while a lot of forks have been created (in this case: 142, at the time of writing).\nFor each fork, I'd like to know:\n\nwhich branches it has with commits ahead of the original master branch\n\nand for each such branch:\n\nhow many commits it is ahead of the original\nhow many commits it is behind\n\nGitHub has a web interface for comparing forks, but I don't want to do this manually for each fork, I just want a CSV file with the results for all forks. How can this be scripted? The GitHub API can list the forks, but I can't see how to compare forks with it. Cloning every fork in turn and doing the comparison locally seems a bit crude."}, {"role": "assistant", "content": "Edit: This solution has to be adjusted to a recent change of the GitHub website. GitHub for some reason doesn't show the number of commits immediately anymore, but fetches it with a script as discussed here. Our bookmarklet should be edited to perform the same fetching.\nAfter clicking \"Insights\" on top and then \"Forks\" on the left, the following bookmarklet prints the info (including links to ZIP files) directly onto the web page like this:\n\nOr like this if you click \"Switch to tree view\":\n\nThe code to add as a bookmarklet (or to paste into the console):\njavascript:(async () => {\n  /* while on the forks page, collect all the hrefs and pop off the first one (original repo) */\n  const aTags = [...document.querySelectorAll('div.repo a:last-of-type')].slice(1).concat([...document.querySelectorAll('div.repository-content ul a:last-of-type:not(.Link--muted)')]);\n\n  for (const aTag of aTags) {\n    /* fetch the forked repo as html, search for the \"This branch is [n commits ahead,] [m commits behind]\", print it directly onto the web page */\n    await fetch(aTag.href)\n      .then(x => x.text())\n      .then(html => aTag.outerHTML += `${html.match(/This branch is.*/).pop().replace('This branch is', '').replace(/([0-9]+ commits? ahead)/, '<font color=\"#0c0\">$1</font>').replace(/([0-9]+ commits? behind)/, '<font color=\"red\">$1</font>')}` + \" <a \" + `${html.match(/href=\"[^\"]*\\.zip\">/).pop() + \"Download ZIP</a>\"}`)\n      .catch(console.error);\n  }\n})();\n\nYou can also paste the code into the address bar, but note that some browsers delete the leading javascript: while pasting, so you'll have to type javascript: yourself. Or copy everything except the leading j, type j, and paste the rest.\nIt has been modified from this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove file from Version Control in IntelliJ IDEA\n\nI'm using IntelliJ IDEA Community Edition 2016.1.\nI've put my project under Git, hosted it on GitHub.\nWhen I first hit that Share Project on GitHub button, every single file was selected to be put under version control.\nNow I want to exclude the module IML file from version control. Obliviously, I want to keep it on my hard disk. Unfortunately, I cannot find a way to do this. How do I achieve this?\nI tried to delete it from the web interface, but I'm getting some fatal errors while pulling/pushing."}, {"role": "assistant", "content": "There is a little trick.\n\nGo to File Menu-> Settings | Version Control | Confirmation, then check the Show options before adding to version control setting under the When files are created section.\nAlternatively, you could check Do not add. It is mandatory that you do not check Add silently.\nDelete the file you don't want to be tracked by VCS.\nPress Ctrl + Z to undo the removal of the file.\nIf IDE shows a popup window which lets you choose whether or not to add the new file to VCS, click No.\nCommit your local changes, and the files are removed from VCS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Possible to host a django site on github pages? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 3 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm new to django, and have a small finished project I'd like to publish online. Is it possible to host my site as a github project page, or do I have to use a service like OpenShift?"}, {"role": "assistant", "content": "You can deploy Django on a physical server or VPS (see the deployment docs). You don't have to use a a platform as a service like OpenShift or Heroku.\nIt is not possible to host a Django site on Github pages. Github pages is for static sites, whereas Django requires Python to generate pages dynamically."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I make a GitHub Action matrix element conditional?\n\nI have a workflow that uses 'strategy' = 'matrix' along with a list of specific configurations to build.\nHere is my workflow file:\n#\n# build-N-test-v2.1-Dev and build-N-test-v2.1-Release are nearly\n# identical, but a few tests are commented out (to not needlessly stress CI system)\n# for v2.1-Dev builds\n#\n# NOTE: I've tried many tricks - none which seem to work - to get this working on one file with one\n# workflow and tests\n#     https://github.community/t/what-is-the-correct-if-condition-syntax-for-checking-matrix-os-version/16221\n#     https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853\n#\n# but none seem to work\n#\n\nname: build-N-test-v2.1-Dev\n\non:\n  push:\n    branches:\n      - v2.1-Dev\n      #- v2.1-Release\n  workflow_dispatch:\n    inputs:\n      ignored:\n        description: \"ignored\"\n        required: false\n        default: \"\"\n\n## NB: JOBS section IDENTICAL between v2.1-Dev and 2.1-Release files EXCEPT that on v2.1-Dev file\n## comment out all entries marked with includeInDevBranchBuilds: false\njobs:\n  build-n-test-Linux:\n    runs-on: ${{ matrix.runs_on }}\n    strategy:\n      #\n      # Configuration notes\n      #   o --debug-symbols false to reduce build disk size (and we aren't debugging anyhow) in many debug configurations\n      #\n      matrix:\n        include:\n          # ## SADLY: Container operations are only supported on Linux runners\n          # - displayTargetName: windows-DBG\n          #   os: windows\n          #   compiler: g++-8\n          #   runs_on: windows-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19\n          #   cpp_version: c++17\n          #   config_name: Debug\n          #   extra_config_args: --apply-default-debug-flags --trace2file enable\n\n          ## centos 8\n          - displayTargetName: centos-8\n            os: unix\n            compiler: g++\n            runs_on: ubuntu-latest\n            container_image: sophistsolutionsinc/stroika-buildvm-centos-8-small\n            cpp_version: c++17\n            config_name: Release\n            extra_config_args: --apply-default-release-flags --trace2file enable\n            includeInDevBranchBuilds: true\n\n          ## ubuntu 18.04\n          - displayTargetName: ubuntu-18.04-g++-8 (Debug)\n            os: unix\n            compiler: g++-8\n            runs_on: ubuntu-latest\n            container_image: sophistsolutionsinc/stroika-buildvm-ubuntu1804-regression-tests\n            cpp_version: c++17\n            config_name: Debug\n            extra_config_args: --apply-default-debug-flags --trace2file enable --debug-symbols false\n            includeInDevBranchBuilds: true\n\n          - displayTargetName: ubuntu-18.04-cross-compile-raspberrypi (Debug)\n            os: unix\n            compiler: g++-8\n            runs_on: ubuntu-latest\n            container_image: sophistsolutionsinc/stroika-buildvm-ubuntu1804-regression-tests\n            cpp_version: c++17\n            config_name: Debug\n            extra_config_args: --apply-default-release-flags --trace2file enable --compiler-driver arm-linux-gnueabihf-g++-8 --cross-compiling true\n            includeInDevBranchBuilds: true\n\n          # ubuntu 20.04\n          # - displayTargetName: ubuntu-20.04-g++-9 (Debug)\n          #   os: unix\n          #   compiler: g++-9\n          #   runs_on: ubuntu-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\n          #   cpp_version: c++17\n          #   config_name: Debug\n          #   extra_config_args: --apply-default-debug-flags --trace2file enable --debug-symbols false\n          #   includeInDevBranchBuilds: false\n\n          # - displayTargetName: ubuntu-20.04-g++-10 (Debug)\n          #   os: unix\n          #   compiler: g++-10\n          #   runs_on: ubuntu-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\n          #   cpp_version: c++17\n          #   config_name: Debug\n          #   extra_config_args: --apply-default-debug-flags --trace2file enable --debug-symbols false\n          #   includeInDevBranchBuilds: false\n\n          - displayTargetName: ubuntu-20.04-g++-10\n            os: unix\n            compiler: g++-10\n            runs_on: ubuntu-latest\n            container_image: sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\n            cpp_version: c++17\n            config_name: Release\n            extra_config_args: --apply-default-release-flags --trace2file enable\n            includeInDevBranchBuilds: true\n\n          # - displayTargetName: ubuntu-20.04-g++-10-c++2a\n          #   os: unix\n          #   compiler: g++-10\n          #   runs_on: ubuntu-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\n          #   cpp_version: c++2a\n          #   config_name: Release\n          #   extra_config_args: --apply-default-release-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n\n          # - displayTargetName: ubuntu-20.04-clang++-10\n          #   os: unix\n          #   compiler: clang++-10\n          #   runs_on: ubuntu-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\n          #   cpp_version: c++17\n          #   config_name: Release\n          #   extra_config_args: --apply-default-release-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n\n    ### ATTEMPT TO COMPRESS 2 workflow files into one, but so far not working\n    ### SEE\n    ### https://stackoverflow.com/questions/65384420/how-to-make-a-github-action-matrix-element-conditional/65385385#65385385\n    ###\n    #if: github.ref == 'refs/heads/v2.1-Release' || matrix.includeInDevBranchBuilds\n    env:\n      # vm has 2 virtual CPUs, but 8GB ram, so jobs=5 (empirical), and QUICK_BUILD avoids some internal testing\n      MAKEFLAGS: \"--jobs=3 QUICK_BUILD=1\"\n    container: ${{ matrix.container_image }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build System Info\n        if: ${{ matrix.os=='unix' }}\n        run: |\n          lsb_release -d 2>/dev/null || true\n          echo \"CWD=\" `pwd`\n          echo \"nproc=\" `nproc`\n          grep \"model name\" /proc/cpuinfo | head -1\n          grep processor /proc/cpuinfo | wc -l\n          grep MemTotal /proc/meminfo\n          df -h\n      - name: Build System Info (Windows)\n        if: ${{ matrix.os=='windows' }}\n        run: |\n          echo \"CWD=\" `pwd`\n          df -h\n      - name: Configure ${{ matrix.config_name }}\n        run: |\n          ./configure ${{ matrix.config_name }} --compiler-driver ${{ matrix.compiler }} ${{ matrix.extra_config_args }} --cppstd-version ${{ matrix.cpp_version }}\n          cat ConfigurationFiles/${{ matrix.config_name }}.xml\n      # Break out third-party-components to do clean so we dont run out of disk space, and break out TPC AND library\n      # to show the summary time for each part\n      - name: Make third-party-components\n        run: |\n          make third-party-components\n          make clean\n      - name: Make libraries\n        run: make libraries\n      - name: Make all\n        run: make all\n      - name: Run Tests\n        run: make run-tests\n      - name: Archive Samples Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Sample apps (${{ matrix.displayTargetName }})\n          path: |\n            Builds/${{ matrix.config_name }}/Samples-*\n      - name: Archive Log Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Log Data (${{ matrix.displayTargetName }})\n          path: |\n            Builds/${{ matrix.config_name }}/PerformanceDump.txt\n            /tmp/Trace*.txt\n\n  build-n-test-MacOS:\n    runs-on: ${{ matrix.runs_on }}\n    strategy:\n      matrix:\n        # Add to extra_config_args for build speed: --Xerces no --OpenSSL no --lzma no --boost no\n        include:\n          - displayTargetName: MacOS-Debug\n            os: macos-10.15\n            runs_on: macos-10.15\n            config_name: Debug\n            extra_config_args: --apply-default-debug-flags --trace2file enable\n            includeInDevBranchBuilds: true\n          # - displayTargetName: MacOS\n          #   os: macos-10.15\n          #   runs_on: macos-10.15\n          #   config_name: Release\n          #   extra_config_args: --apply-default-release-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n    env:\n      # vm has 2 virtual CPUs, but 8GB ram, so jobs=5 (empirical), and QUICK_BUILD avoids some internal testing\n      MAKEFLAGS: \"--jobs=3 QUICK_BUILD=1\"\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build System Info\n        run: |\n          echo \"CWD: `pwd`\"\n          df -h\n          system_profiler SPSoftwareDataType\n          sw_vers\n      # If we had docker ability, most of these would be built into a docker file\n      - name: Install Basic Build requirements\n        run: |\n          brew install gnu-sed\n          brew install p7zip\n          brew install automake\n          make install-realpath\n      - name: Configure\n        run: |\n          ./configure ${{ matrix.config_name }} ${{ matrix.extra_config_args }}\n          cat ConfigurationFiles/${{ matrix.config_name }}.xml\n      - name: Build third-party-components\n        run: |\n          make third-party-components\n          make clean\n      - name: Build Library\n        run: |\n          make libraries\n      - name: Build All\n        run: |\n          make all\n      - name: Run-Tests\n        run: |\n          make run-tests\n      - name: Workaround GitHub-Actions-MacOS Issue with env.TMPDIR\n        run: |\n          mkdir /tmp/LOGS-ARCHIVE\n          cp $TMPDIR/Trace*.txt /tmp/LOGS-ARCHIVE\n      - name: DEBUG Workaround GitHub-Actions-MacOS Issue with env.TMPDIR\n        run: |\n          echo \"TMPDIR=$TMPDIR\"\n          echo \"TMPDIR using ENV.TMPDIR=${{ env.TMPDIR }}\"\n          # Just the echo line above shows empty, and then the ls line causes exit 1/failure\n          #ls -l ${{ env.TMPDIR }}/Trace*.txt\n          #if this gets fixed, then lose Workaround GitHub-Actions-MacOS, and directly reference ${{ env.TMPDIR }}/Trace*.txt in Archive Log Results\n      - name: Build System Info\n        run: |\n          df -h\n      - name: Archive Log Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Log Results (${{ matrix.displayTargetName }})\n          path: |\n            Builds/${{ matrix.config_name }}/PerformanceDump.txt\n            /tmp/LOGS-ARCHIVE\n            #${{ env.TMPDIR }}/Trace*.txt\n      - name: Archive Sample Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Samples (${{ matrix.displayTargetName }})\n          path: |\n            Builds/${{ matrix.config_name }}/Samples-*\n\n  build-n-test-Windows:\n    runs-on: ${{ matrix.runs_on }}\n    strategy:\n      matrix:\n        # Add to extra_config_args for build speed: --Xerces no --OpenSSL no --lzma no --boost no\n        include:\n          - displayTargetName: windows-x86-Debug\n            os: windows\n            runs_on: windows-latest\n            container_image: sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19\n            config_name: Debug\n            extra_config_args: --arch x86 --apply-default-debug-flags --trace2file enable\n            includeInDevBranchBuilds: true\n          # - displayTargetName: windows-x86-Release\n          #   os: windows\n          #   runs_on: windows-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19\n          #   config_name: Release\n          #   extra_config_args: --arch x86 --apply-default-release-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n          # - displayTargetName: windows-x86_64-Debug\n          #   os: windows\n          #   runs_on: windows-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19\n          #   config_name: Debug\n          #   extra_config_args: --arch x86_64 --apply-default-debug-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n          # - displayTargetName: windows-x86_64-Release\n          #   os: windows\n          #   runs_on: windows-latest\n          #   container_image: sophistsolutionsinc/stroika-buildvm-windows-cygwin-vs2k19\n          #   config_name: Release\n          #   extra_config_args: --arch x86 --apply-default-release-flags --trace2file enable\n          #   includeInDevBranchBuilds: false\n    env:\n      # vm has 2 virtual CPUs, but 8GB ram, so jobs=5 (empirical), and QUICK_BUILD avoids some internal testing\n      MAKEFLAGS: \"--jobs=3 QUICK_BUILD=1\"\n      ARTIFACTS_DIR: \"c:/Artifacts/\"\n    steps:\n      - uses: actions/checkout@v2\n      # https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions\n      - name: Extract branch name\n        shell: bash\n        run: echo \"##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})\"\n        id: extract_branch\n      - name: Build System Info\n        shell: \"bash\"\n        run: |\n          echo \"CWD: `pwd`\"\n          df -h\n          systeminfo\n          echo NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS\n      - name: docker pull ${{ matrix.container_image }}\n        run: docker pull ${{ matrix.container_image }}\n      - name: Start docker build environment\n        run: |\n          docker run --tty --memory 5G --cpus 2 --storage-opt 'size=50GB' --detach --name buildContainer ${{ matrix.container_image }}\n      - name: Print Info about docker system\n        shell: \"bash\"\n        run: |\n          docker ps -a\n          docker exec buildContainer systeminfo\n          docker exec buildContainer df -h\n      - name: Git Checkout\n        shell: \"bash\"\n        run: |\n          docker exec buildContainer sh -c \"git clone https://github.com/SophistSolutions/Stroika.git && cd Stroika && git checkout ${{ steps.extract_branch.outputs.branch }}\"\n      - name: Configure\n        shell: \"bash\"\n        run: |\n          docker exec --workdir c:/Stroika buildContainer sh -c \"./configure ${{ matrix.config_name }} ${{ matrix.extra_config_args }}\"\n          docker exec --workdir c:/Stroika buildContainer cat ConfigurationFiles/${{ matrix.config_name }}.xml\n      - name: Build\n        shell: \"bash\"\n        run: |\n          docker exec --workdir c:/Stroika --env MAKEFLAGS=\"$MAKEFLAGS\" buildContainer make all\n      - name: Run-Tests\n        shell: \"bash\"\n        run: |\n          docker exec --workdir c:/Stroika --env MAKEFLAGS=\"$MAKEFLAGS\" buildContainer make run-tests\n      - name: Build System Info\n        shell: \"bash\"\n        run: |\n          df -h\n          docker exec buildContainer df -h\n      - name: Copy Build Artifacts\n        shell: \"bash\"\n        # due to flaws in docker (windows must stop) - and cp no wildcards\n        run: |\n          docker exec --workdir c:/Stroika buildContainer bash -c 'mkdir TRACE_LOGS && cp $TEMP/Trace*.txt TRACE_LOGS/'\n          docker stop buildContainer\n          docker cp buildContainer:Stroika/Builds/${{ matrix.config_name }}/ $ARTIFACTS_DIR 2> /dev/null\n          docker cp buildContainer:Stroika/TRACE_LOGS $ARTIFACTS_DIR 2> /dev/null\n          rm -rf $ARTIFACTS_DIR/{ThirdPartyComponents,Tests,*.lib}\n      - name: Archive Log Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Log Results (${{ matrix.displayTargetName }})\n          path: |\n            ${{ env.ARTIFACTS_DIR }}PerformanceDump.txt\n            ${{ env.ARTIFACTS_DIR }}TRACE_LOGS\n      - name: Archive Sample Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: Samples (${{ matrix.displayTargetName }})\n          path: |\n            ${{ env.ARTIFACTS_DIR }}Samples-*\n\nHowever, I'd like to only build some of the configurations only when the branch is v2.1-Release. That is - for the most part - just build one or two configurations but build a bunch more on release.\nI've accomplished this by cloning the script (workflow) and renaming a few things and commenting things out, but it would be nice if the mechanism worked with matrix elements.\nI realize there is an if feature that can be added to each step, but that would create tons of jobs with disabled steps. What I want is to not spin up those jobs at all for each matrix element that has the if part evaluates false."}, {"role": "assistant", "content": "TLDR: you can do what you want with one workflow by filtering the configurations you want to use in a prior build job/step, and using the result of that filtering as the matrix value in your build-n-test job.\n\nLonger version:\nYou can create a job (i.e. build-n-test) where the value of strategy.matrix is different based off of some criteria by setting the value of strategy.matrix to the deserialized output of a previous job (i.e. matrix_prep). This previous job would have the responsibility of constructing the matrix value as per your custom criteria. The following yaml demonstrates this (a copy has been included later on with comments added in for explanation):\nname: Configurable Build Matrix\n\non: push\njobs:\n  matrix_prep:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n    steps:\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v2\n    - id: set-matrix\n      run: |\n        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  \n        matrix=$(jq --arg branchName \"$branchName\" 'map( \n            . | select((.runOn==$branchName) or (.runOn==\"always\"))\n        )' matrix_includes.json)                \n        echo \"matrix={\\\"include\\\":$(echo $matrix)}\" >> $GITHUB_OUTPUT\n  build-n-test:\n    needs: matrix_prep\n    runs-on: ${{ matrix.runs_on }}\n    strategy:\n      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}\n    steps:    \n    - run: echo \"Hello ${{ matrix.someValue }}\"\n\nThe contents of the matrix_includes.json file used in the set-matrix task can be found after this paragraph. To see what the matrix configuration from the question would look like as JSON, please look near the bottom of this answer. I went the route of having a JSON file separate from the workflow definition itself because I found that including the raw JSON in the workflow itself was very messy (especially if the JSON file was large).\n[\n    {\n        \"runs_on\":\"ubuntu-16.04\",\n        \"someValue\":\"Foo\",\n        \"runOn\":\"always\"\n    },\n    {\n        \"runs_on\":\"ubuntu-18.04\",\n        \"someValue\":\"Bar\",\n        \"runOn\":\"v2.1-Release\"\n    },\n    {\n        \"runs_on\":\"ubuntu-20.04\",\n        \"someValue\":\"Hello again\",\n        \"runOn\":\"v2.1-Release\"\n    }\n]\n\nUsing the setup above, one configuration will be included for all builds, and two will only be included if the branch name matches v2.1-Release. With some tweaks to the sed and jq options in the Workflow file, the branch name restrictions could be made looser such that you could have configurations run for all branches that include -Release (instead of just for a single branch). I may include this in this answer if there is interest (as it does not necessarily match your current question).\nset-matrix Job Explanation\nAs far as the set-matrix task is concerned, please refer to the following notes:\n# ${{ github.ref }} returns the full git ref. As such, 'refs/heads/` \n# should be stripped for easier future use.\nbranchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  \n# Use jq to read in a json file that represents the matrix configuration. Each\n# block has a 'runOn' property. The jq filter is setup to only output items that \n# are set to 'always' or that have a branch name that matches the current branch.\nmatrix=$(jq --arg branchName \"$branchName\" 'map(\n  . | select((.runOn==$branchName) or (.runOn==\"always\")) \n)' matrix_includes.json)        \n# This 'echo' uses a special syntax so that the output of this job \n# is set correctly.\necho \"matrix={\\\"include\\\":$(echo $matrix)}\" >> $GITHUB_OUTPUT\n\nWorkflow explanation\nThe following yaml content should be the same as above with some additional comments to help explain things:\nname: Configurable Build Matrix\non: push\njobs:\n  matrix_prep:\n    # Using a separate job and agent so as to be able to use tools \n    # like 'sed' and 'jq'.\n    runs-on: ubuntu-latest\n    # Defining outputs of a job allows for easier consumption and use.\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n    steps:\n    # Checking out code as the set-matrix step utilizes a \n    # file named matrix_includes.json.\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v2\n    # This step is explained more in a following section\n    - id: set-matrix\n      run: |\n        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  \n        matrix=$(jq --arg branchName \"$branchName\" 'map(\n          . | select((.runOn==$branchName) or (.runOn==\"always\")) \n        )' matrix_includes.json)                \n        echo \"matrix={\\\"include\\\":$(echo $matrix)}\" >> $GITHUB_OUTPUT\n  build-n-test:\n    # By stating 'needs' here, the output of 'matrix_prep' is \n    # available to this job.\n    needs: matrix_prep\n    runs-on: ${{ matrix.runs_on }}\n    strategy:\n      # We need to convert the json string output into an object that the \n      # GitHub Workflow expects. Thankfully, the json-schema for Workflows \n      # allows 'matrix' to be set to an expression.\n      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}\n    steps:\n    # Output a configuration specific value as proof and as a sanity check\n    - run: echo \"Hello ${{ matrix.someValue }}\"\n\nDemonstration\nI put together two files for this demonstration:\n\nThe workflow definition (pasted below)\nA JSON file to contain matrix information (pasted below)\n\nThe following two screenshots are from runs on different branches using the same workflow definition. Please note that the amount of build-n-test Jobs are different between the two:\nBuild for main branch\n\nBuild for v2.1-Release branch\n\nThis is due to the first build occurring on the main branch, and the second occurring on the v2.1-Release branch. As can be seen by the included matrix_includes.json file above, this is to be expected as two configurations are set to run only when the branch is v2.1-Release, and only one configuration is set to run always.\nFurther Detail\nMatrix Configuration Filtering\nThe filtering is accomplished through using jq to select objects from the json array that either have their runOn value set to always or that match the current branchName. This is the slight tweak to your logic that I mentioned earlier: instead of saying includeInDevBranchBuilds, I am using runOn as it seemed to work better for this specific example.\nBranchName\nThe set-matrix step uses a value set from the previous line: branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/.*-,,g'). This line will strip refs/heads/ from the branch ref and store the result in the value branchName. For example, if your branch is 2.1-Release, branchName will be set to 2.1-Release, and the filter from earlier will then match any objects that have \"runOn\":\"2.1-Release\" or \"runOn\":\"always\".\nThe JSON file\nThe JSON file was created to simulate the content of the includes statement from the workflow that you linked. JSON is used as GitHub Actions have builtin JSON functions. As a sample, the following is my take on converting your matrix:include section to JSON. Please note that I've changed includeInDevBranchBuilds to be runOn, with the values set to either always or v2.1-Release.\n[\n   {\n      \"displayTargetName\": \"centos-8\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \"sophistsolutionsinc/stroika-buildvm-centos-8-small\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Release\",\n      \"extra_config_args\": \"--apply-default-release-flags --trace2file enable\",\n      \"runOn\": \"always\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-18.04-g++-8 (Debug)\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++-8\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n        \"sophistsolutionsinc/stroika-buildvm-ubuntu1804-regression-tests\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Debug\",\n      \"extra_config_args\": \"--apply-default-debug-flags --trace2file enable\",\n      \"runOn\": \"always\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-20.04-g++-9 (Debug)\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++-9\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n        \"sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Debug\",\n      \"extra_config_args\": \"--apply-default-debug-flags --trace2file enable\",\n      \"runOn\": \"v2.1-Release\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-20.04-g++-10 (Debug)\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++-10\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n        \"sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Debug\",\n      \"extra_config_args\": \"--apply-default-debug-flags --trace2file enable\",\n      \"runOn\": \"v2.1-Release\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-20.04-g++-10\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++-10\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n        \"sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Release\",\n      \"extra_config_args\": \"--apply-default-release-flags --trace2file enable\",\n      \"runOn\": \"always\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-20.04-g++-10-c++2a\",\n      \"os\": \"unix\",\n      \"compiler\": \"g++-10\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n        \"sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\",\n      \"cpp_version\": \"c++2a\",\n      \"config_name\": \"Release\",\n      \"extra_config_args\": \"--apply-default-release-flags --trace2file enable\",\n      \"runOn\": \"v2.1-Release\"\n   },\n   {\n      \"displayTargetName\": \"ubuntu-20.04-clang++-10\",\n      \"os\": \"unix\",\n      \"compiler\": \"clang++-10\",\n      \"runs_on\": \"ubuntu-latest\",\n      \"container_image\": \n         \"sophistsolutionsinc/stroika-buildvm-ubuntu2004-regression-tests\",\n      \"cpp_version\": \"c++17\",\n      \"config_name\": \"Release\",\n      \"extra_config_args\": \"--apply-default-release-flags --trace2file enable\",\n      \"runOn\": \"v2.1-Release\"\n   }\n]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to manage one only key per each git repository?\n\nI use git under two scenarios:\n\nI use some Github repositories.\nI'm currently working with OpenShift, which uses ssh and git for deployment.\n\nFirst, I used ssh-keygen for generating a key which updated at OpenShift site. Such key is stored at ~/.ssh/ and created id_rsa and id_rsa.pub.\nThen I started cloning a repository from Github, I once did ssh-keygen again and started pushing, it worked ok. Then I cloned another repository and started having problems:\nI got problems when cloning to the second repository. Every time I try to push will show something like:\n\nERROR: Permission to diegoaguilar/cursoJava.git denied to diegoaguilar/cursoCannibalCreatures.\n  fatal: The remote end hung up unexpectedly\n\nBut as it can be seen diegoaguilar/cursoCannibalCreatures isn't correct as it's another repository.\nI even tried removing such repository directory, and cloning it again, same happened.\nI already got under ~/.ssh:\nconfig:\nHost cursoJava\nHostname github.com\nUser git\nIdentityFile ~/.ssh/id_java\n\nHost cursoCannibalCreatures\nHostname github.com\nUser git\nIdentityFile ~/.ssh/id_cannibal\n\nHost openshift\nHostname openshift.com\nUser git\nIdentityFile ~/.ssh/openshift\n\nAnd so got:\nid_cannibal  id_cannibal.pub  id_java  id_java.pub  known_hosts\n\nSomething like id_openshift and id_openshift.pub isn't there but as it's not working, I don't care much now.\nI created such files and they're .pub by ssh-keygen -f <filename> and gave different pass phrases to each. I added the content of the .pub's as deploy keys at each Github repository settings.\nWhat am I doing wrong? How is this supposed to work? And, when working at another machine, how to properly obtain these keys, proof it's me and work transparently? \nEDIT\nOutput of git remote -v:\n\nFor cursoJava repository \n\norigin [email\u00a0protected]:diegoaguilar/cursoJava.git (fetch)\n origin [email\u00a0protected]:diegoaguilar/cursoJava.git (push)\n\nFor cursoCannibalCreatures\n\norigin [email\u00a0protected]:diegoaguilar/cursoCannibalCreatures.git (fetch)\n origin [email\u00a0protected]:diegoaguilar/cursoCannibalCreatures.git (push)"}, {"role": "assistant", "content": "As mentioned in \"ssh,github,it doesnot work\", the trick is to not use the default id_rsa(.pub) names for your public:private keys (because yo can only define one couple of those), but different names.\nBut that would be only if you were to access those repos as different users\nIn your case, you are accessing the repos with the same users, and one ssh key should be enough.\nSee \"GitHub help\":\n\nThis error means the key you are pushing with is attached to another repository as a deploy key, and does not have access to the repository you are trying to push to.\nTo remedy this, remove the deploy key from the repository, and attach the key to your user account instead.\n\n\nThis is for using GitHub for two different users.\nYou then define a ~/.ssh/config file in which you reference each private keys by their full path:\nHost github1\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_repo1\n\nHost github2\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_repo2\n\nInstead of using [email\u00a0protected]:user/repo1, you would use:\ngithub1:user/repo1\n\nThat uses the key Host entry 'github1' to reference the user (git), hostname (github.com) and the exact private/public key to use  ~/.ssh/id_repo1(.pub)\n\nSo if you have a second repo which use a second key stored as ~/.ssh/id_repo2(.pub), you need to use the entry 'github2' (you can name it as you want) defined above, and then change the url you have for origin:\ngit remote set-url origin github2:user/repo2\n\nThat way, a git push will use the right key (the one for the repo2)\nIf you don't, you will be able to push for one repo (using the default key  ~/.ssh/id_rsa(.pub), default name), but you won't be able to push to the second repo, which need a different set of public/private key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github actions get URL of test build\n\nI can't seem to find out how to get the URL of a test workflow anywhere in the docs.  I have a simple job which runs tests and on fail it needs to post the URL of the failed job to another web service.\nI was expecting this to be in the default env vars but apparently not.\nThanks,"}, {"role": "assistant", "content": "Here's how you construct the URL:\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git commit bash script\n\nI'm writing a bash script to add, commit, push all files in a directory.\n#!/bin/bash  \ngit add .  \nread -p \"Commit description: \" desc  \ngit commit -m $desc  \ngit push origin master\n\nI'm getting the following error:\n$ ./togithub  \nCommit description:   \ntest commit script  \nerror: pathspec 'commit' did not match any file(s) known to git.  \nerror: pathspec 'script\"' did not match any file(s) known to git.  \nEverything up-to-date\n\nI'm not sure if this is a problem with reading in the text (it echos fine) or passing it to git commit -m."}, {"role": "assistant", "content": "You have to do:\ngit commit -m \"$desc\"\n\nIn the current script, test is going as commit message and commit and script are being treated as next arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I mark a GIT remote as read only? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGit: Set up a fetch-only remote?\n\n                                (5 answers)\n                            \n\nClosed 9 years ago.\n\n\n\nI have read/write access to a repo on GitHub.  I have a local clone of that repo.  I'd like to be able to pull changes from that remote, but I should never push changes to it.\nIs there a way I can mark the remote as read-only so I never accidentally type in the wrong command and push to it?"}, {"role": "assistant", "content": "You could  shut off default pushes via\ngit config push.default nothing\n\nor for stronger protection on a specific remote you could break pushes to that remote entirely by e.g. \ngit config remote.origin.pushurl \"you really didn't want to do that\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Invoke GitHub Actions workflow manually and pass parameters\n\nI want to pass some dynamic parameters and invoke my GitHub Actions workflow manually (ideally via some API). Is this possible?"}, {"role": "assistant", "content": "With the workflow_dispatch event trigger, you can do the manual triggers easily.\nFlow:\non: \n  workflow_dispatch:\n    inputs:\n      logLevel:\n        description: 'Log level'     \n        required: true\n        default: 'warning'\n      tags:\n        description: 'Test scenario tags'  \n\nManual trigger screenshot:\n\nBlog post announcement reference, https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Opening PDF in a browser with Github Pages [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about programming within the scope defined in the help center.\n\n\nClosed 2 years ago.\n\n\nThe community reviewed whether to reopen this question 17 days ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am using GitHub Pages to host my website. I have a PDF file that I want visitors to be able to open directly in a browser. But when I upload the PDF file to GitHub Pages and link to it it opens in GitHub's viewer. Is there any way to open the PDF in a browser? I do not want to upload the document to dropbox or Google Drive as these services are not available in certain countries.\nUsing a raw URL would lead to download. But I would like to have the file open in the browser."}, {"role": "assistant", "content": "Suppose your personal website is hosted in a Github page as follows:\nhttps://username.github.io\n\nThe repository should be name as username.github.io. If you have a pdf file named document.pdf and you place it in the directory folder then you should be able to open it directly in the browser through the following link:\nhttps://username.github.io/folder/document.pdf\n\nTo allow the user to open the pdf in a new window in the browser, you may use the following HTML, where \"PDF\" points to the link:\n<a href=\"username.github.io/folder/document.pdf\" target=\"_blank\">PDF.</a>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'gh' is not recognized... error while trying to create GitHub repo from command prompt\n\nI'm following the instructions on how to add an existing project to GitHub from GitHub docs. However, I get an 'gh' is not recognized as an internal or external command, operable program or batch file. error message when I try to use gh repo create fs1 command in the project root directory as instructed. Here fs1 is my project name. I browsed StackOverflow but couldn't find any help yet. What am I missing?"}, {"role": "assistant", "content": "The page you are following doesn't include the instructions to install the GitHub CLI, so it is likely you don't have it installed (it doesn't come with git as far as I know).\nInstallation instructions can be found here: https://cli.github.com/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I .gitignore my gradlew?\n\nMy gradle project includes gradlew and gradlew.bat files inside of the repository, should they be pushed to git or not? I did not see anybody say they should be removed here. What is the purpose of these files?"}, {"role": "assistant", "content": "NOT Really. Reason being if someone download or clone your repo and try to run your application through command line and they do not have gradle installed on their local machine, they have to install and configure Gradle and then run it. The gradlew provides a convenient way to run a gradle build with installing it.\nHere is what Gradle documentation says:\n\nMost tools require installation on your computer before you can use them. If the installation is easy, you may think that\u2019s fine. But it can be an unnecessary burden on the users of the build. Equally importantly, will the user install the right version of the tool for the build? What if they\u2019re building an old version of the software?\nThe Gradle Wrapper (henceforth referred to as the \u201cWrapper\u201d) solves both these problems and is the preferred way of starting a Gradle build."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "markdown link opening in new tab\n\nIs there a way to open the below markdown link in new tab? I've got some result from markdown target=\u201c_blank\u201d, but in my case it's different have used  <> symbol to projected the link.\nhttp://google.com\nNot used the usual format\n\n(name)[linkname]\n\nUsed\n\n<>\n\nInside this projected the link name. Is possible to open this link in new tab?"}, {"role": "assistant", "content": "The kramdown syntax: \n[link name](url_link){:target=\"_blank\"}\n\ncan be parsed into HTML using the kramdown online editor: \nhttps://kramdown.herokuapp.com/\nThen you can paste the HTML syntax into your markdown document.\nI used it because I already had quite a few kramdown references, and wanted to avoid retyping them in HTML."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub URL for latest release of the _download file_?\n\nAlthough this question is similar to GitHub latest release, it's actually different -- it's about a link that means \"the latest version of the download file itself\".\nGitHub provides a \"Latest\" URL that redirects to the information page for the latest release. For example: https://github.com/reactiveui/ReactiveUI/releases/latest will redirect to https://github.com/reactiveui/ReactiveUI/releases/tag/5.99.6 (as I type this; or to the page for a newer version, someday).\nThat's great but I need a URL to the download file itself. In this example, the .zip file associated with the green download button,  https://github.com/reactiveui/ReactiveUI/releases/download/5.99.6/ReactiveUI-5.99.6.zip (as I type this; or to a newer zip file, someday).\nWhy? I want to give the URL to curl, as part of a Travis CI script, to download the latest version.\nI guessed at a few URLs like /releases/download/latest/file.zip (substituting \"latest\" for the version part) and /releases/download/file.zip but those 404.\nIs there any way to do this -- in the context of a shell script and curl (note: not in a browser page with JS)?"}, {"role": "assistant", "content": "For releases that do not contain the version number or other variable content in their assets' names, you can use a URL of the format:\n\nhttps://github.com/owner/repository/releases/latest/download/ASSET.ext\n\nAs per the docs:\n\nIf you'd like to link directly to a download of your latest release asset you can link to /owner/name/releases/latest/download/asset-name.zip."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating git branch after many commits\n\nI have a repo on GitHub with a single branch master that I've been working on in my local repo.  At some point I stopped pushing commits back up to master on GitHub because I was worried that they'd break things. Now I have lots of commits in my local repo that I want to push back up to GitHub.\nHowever, rather than pushing back up to master I would prefer to create a new branch on GitHub (development) and push all my local commits back up to that branch (which I will merge back into master only after they've been better tested).\nWhat is the simple way to do this?"}, {"role": "assistant", "content": "on master:\ngit checkout -b newbranch or as suggested below, simply do a git branch newbranch to create the new branch without switching to it.\nThis will create a branch that is at your current commit at master.  Once done:\ngit checkout master\nfollowed by:\ngit reset --hard <commit_hash>\nWhere <commit_hash> should be replaced by the commit ID you want master rolled back to.\nNow you can switch to your new branch and push it out to the remote.\ngit checkout newbranch\ngit push origin newbranch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Proper Way To Use Git/GitHub - PHP System with Dev/Testing/Production servers\n\nI apologize if this is obvious or easy, I have looked at a good number of git/github tutorials and read other articles, but I want to make sure what I'm doing is right.\nI want to incorporate VC (for obvious reasons) into my development team and process.\nCurrent development process (using Dreamweaver):\n * Receive a ticket (or work order)\n * Download file on Development server\n * Make changes to the file\n * Upload file back to development server\n * Changes tested/verified\n * Send to production server  \n\nI'm trying to figure out how to make our new development process with using Git.\nI am switching over to PHPStorm (which is an actual PHP IDE with direct integration with Git).\nWould it be something like\n\nReceive a ticket (or work order)  \nCheckout/Update/Download file(s)  \nChange Files  \nUpload file (which I assume is also the current working directory...?)  \nAt the end of the day, do a commit  \nHave build script send data to testing server (nightly build)  \n\nOr would it be better to do something like \n\nReceive a ticket (or work order)  \nCheckout/Update/Download file(s)  \nChange Files  \nUpload file/commit\nHave build script send data to testing server (nightly build) \n\nOr is there another way? Having a bit of trouble understanding what would be the optimal flow?\nAny help would be greatly appreciated.\n\nEdit\nI'm trying see if it is best to have a version of the server locally (every developer), and if so, how does that work if you have 7 or so branches?\nIf not, how do you deal with 7 or so branches with them on the web? Do you FTP files up or use Git Hooks to make them auto update?\nUpdate 07/26/2012 \nAfter working successfully with Git for quite a while now I've been following this branching model with great success:\nA Successful Git Branching Model\nThe answer to the above was yes -- should definitely have a local version of the server."}, {"role": "assistant", "content": "Assuming you have a live server and a development server I would do something along these lines.\nBefore even starting with a development cycle I would at least have two branches:\n\nMaster - the development server runs on this branch\nStable - the live server runs on this branch.\n\nSo if a developer gets a ticket or a work order he/she will perform the following actions:\n\ngit pull origin master\ngit branch featureBranch (named as the ticket id or as a good description for the work order)\ngit checkout featureBranch\nMake changes which will accomplish the desired change. Commit as often as is necessary. Do this because you will create valuable history. For instance you can try an approach to a problem and if it doesn't work, abandon it. If a day later you see the light and want to re-apply the solution, it is in your history!\nWhen the feature is fully developed and tested locally, checkout master.\ngit merge featureBranch\ngit push origin master\nTest the pushed changes on your development server. This is the moment to run every test you can think of.\nIf all is working out, merge the feature or fix into the stable branch. Now the change is live for your customers.\n\nGetting the code on the server\nThe updating of servers shouldn't be a problem. Basically I would set them up as users just like you're developers are. At my company we've setup the servers as read-only users. Basically that means the servers can never push anything but can always pull. Setting this up isn't trivial though, so you could just as well build a simple webinterface which simply only allows a git pull. If you can keep your developers from doing stuff on live implementations you're safe :)\n[EDIT]\nIn response to the last questions asked in the comments of this reaction:\nI don't know if I understand your question correctly, but basically (simplified a bit) this is how I would do this, were I in you shoes.\n\nThe testing machine (or the webroot which acts as testing implementation) has it source code based in a git repository with the master branch checked out. While creating this repository you could even remove all other references to all other branches so you'll be sure no can checkout a wrong branch in this repository. So basically the testing machine has a Git repository with only a master branch which is checked out.\nFor the live servers I would do exactly the same, but this time with the stable branch checked out. Developer should have a local repository cloned in which all branches exist. And a local implementation of the software you guys build. This software gets its source from a the local git repository. In other words: from the currently checked out branch in this repository.\nActual coding\nWhen a new feature is wanted, a local feature branch can be made based on the current master. When the branch is checked out the changes can be made and checked locally by the developer (since the software is now running on the source of the feature branch).\nIf everything seems to be in order, the changes get merged from feature branch to master and pushed to your \"git machine\". \"your github\" so to speak. Testing can now pull the changes in so every test necessary can be done by QA. If they decide everything is ok, the developer can merge the changes from master to stable and push again.\nAll thats left now is pulling form your live machines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Attempting push on git and receiving \"could not read Username for 'https://github.com': terminal prompts disabled\"\n\nI'm using Visual Studio, and the GitHub Extension. I am able to sign in, then clone my team's repository, and then pull changes successfully.\nWhen it comes time to push my changes back to remote, I get a blank command prompt appear on the screen briefly, and then the following errors in the output window:\n\nError encountered while pushing to the remote repository: Git failed with a fatal error. \nfatal: AggregateException encountered. One or more errors occurred. \nerror: cannot spawn askpass: No such file or directory \nfatal: could not read Username for 'https://github.com': terminal prompts disabled\n\nEDIT: pushing via the command line works, as does pushing via the GitHub desktop application, just not within this extension.\nAny ideas why this might be happening? I can't see why it needs the Username given that I have signed into the extension."}, {"role": "assistant", "content": "As per my comment.   You can include your username in the remote URL (similar to FTP).\nExample without password (SSH):\ngit remote set-url origin [email\u00a0protected]/username/repo.git\nExample with password (https)\nhttps://name:[email\u00a0protected]/username/repo.git\nSource: Git push requires username and password\nUpdated 5/14/2018 to correct github.org to github.com in the original answer"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git : empty ident name (for <>) not allowed\n\nI was applying a diff file of an opensource project on the top of my repository using git-am :\n git am -3 < /Downloads/refactorWork.diff\n\nbut it had conflicts and i had to resolve them; but after resolving the conflicts and staging them, when i did git am --continue i got :\nfatal : empty ident name (for <>) not allowed\n\nI looked up on the internet and found this which seemed to be similar to my problem but my usename and email were already added up in global and local git directories. Here is the output of git config list :\nrohan@~/Documents/libo : $ git config --global --list\n[email\u00a0protected]\nuser.name=Rohan Kumar\nalias.l=log --oneline --graph --pretty\ncredential.helper=cache\n\nAlthough i solved this by first commiting the staged changes and then using git am --skip, I am interested in knowing what does that error means and whether what i did was the correct way of doing it, or is there any better way?"}, {"role": "assistant", "content": "This diff file is a plain diff, not something generated by git format-patch. A format-patch generated diff contains information about the commit author, author date, commit message, ... and maintains this information when creating the commit(s).\nYour plain diff does not have these information, so git am will complain that it is missing, naturally.\nYou should instead have used git apply which is meant to apply simple patch files like you have in this case which will only apply the patch to the worktree (and index if you tell it to) but does not create any commit automatically."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"fatal: HttpRequestException encountered.\" Error with GitHub/Bitbucket Repositories due to dropping TLS-1.0 support\n\nProblem\nI recently encountered the following message when I pushed to a GitHub repo:\n\"fatal: HttpRequestException encountered. \"\nfollowed by being prompted for my username and password again. \nFrom previous searches, Visual Studio and various others have the same root problem. For those lazier than I am, a summary of the various solutions for different applications/OS are here with relevant discussions. Hopefully people find this helpful.\nReason\nCan't really call updating sercurity a problem, so here's the reason. The issue is GitHub has removed TLS-1.0 support which is causing the problem with clients including Microsoft Visual Studio's built in git client, versions of Git below 1.14 as well as GUI clients includint tortoiseGit, etc. The full release notes can be found here: \nhttps://githubengineering.com/crypto-removal-notice/\nBitbucket will drop TLSv1.0 and TLSv1.1 starting 1 Dec 2018. I expect similar problems as before. \nSolution\nEdit: moved my self-answer to an answer box. See below."}, {"role": "assistant", "content": "Git hub has removed TLS-1.0 from it's authentication services. https://githubengineering.com/crypto-removal-notice/\nSolutions\nWindows Clients\nUse Version 2.14.3 (or newer) of Git for Windows and newer include an up-to-date Git Credential Manager for Windows: https://gitforwindows.org/\nYou can also explicitly update your Git Windows Credential Manager to the latest version, 1.14.0, to get TLS-1.2 support: https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0\nVisual Studio Clients\nIt is suggested to update your client to VS 2017 or, if you cannot upgrade, there are two machine-wide registry keys you can set that affect all .NET-based applications on the client machine that you can change... https://developercommunity.visualstudio.com/content/problem/201457/unable-to-connect-to-github-due-to-tls-12-only-cha.html\nJDK\nTLS-1.2 is default in JDK8 and available in JDK7.\nhttps://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\nRed Hat native Git clients\nRH 5 does not support TLS-1.2 and GitHubEngineering suggest updating to newer versions of the OS. RH 6.8 and 7.2 will support TLS-1.2. https://www.linuxquestions.org/questions/blog/mensawater-183304/rhel5-wont-support-tlsv1-1-or-higher-36951/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Visual Studio: How to create project from existing GitHub repository?\n\nI came from Eclipse background and I am apparently missing something. \nThere is an existing GitHub project with JS code in it and I would like to start adding TypeScript nature to it, one type at a time.\nI have followed this tutorial to clone project from GitHub to my \"local git repository\". Now the Team Explorer window displays it as local repository and I can commit changes etc but it's not a project and I don't know how to open it as a project (I want to open it as TypeScript project).\nThe workflow I was used to from Eclipse would simply be New -> Other -> SVN -> Checkout Projects from SVN that is automatically followed by New Project Wizard.\nHow do I clone existing JS project from GitHub and make it a TypeScrip project while keeping the existing folder structure?\nEDIT: I am using Visual Studio Express and I am limited to the native Git extension."}, {"role": "assistant", "content": "What I typically do in this situation;\n\nClone repository using Git in Visual Studio; or use GitHub for Windows and Clone in Desktop from the Git project's web page.  This will create a directory (repository) with the project files where you specify.  \nIn visual studio, File->New->create a new project from existing code.   From the wizard, select C# or C++ (whatever your choice it does not really matter)  \nThe wizard requires a project file location: give the location of the Git folder that contains the project files (where you cloned the project's repository).  \nThe Wizard requires a unique project name, for example you can use the name of the Git project with VisualStudio (or VS) appended to the end.  \nGit will now be in sync and you will be able to see all the git files.   Making changes will check them out and allow you to push them to the project etc... \n\n***** By default Git will want to check in the newly created .csproj file that Visual Studio creates to allow you to open the project in Visual Studio.  You will just want to drag this into the excluded changes section because most likely the project in question will not be using Visual Studio.**"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Is it possible to collaborate with someone on a private gist?\n\nI have a private gist. If I send the URL to a friend he can view it, but cannot edit it, unless he forks it.\nIs there a way to edit it directly without forking it?"}, {"role": "assistant", "content": "No. Your friend should fork the repo, and make her changes there.\nYou can then merge in your friend\u2019s commits by:\n\nClone your gist repo locally\nAdd your friend\u2019s fork as a remote\n\ne.g. if your friend is named Cindy: git remote add-url cindy https://gist.github.com/cindy/df03bdacaef75a80f310\n\nFetch your friend\u2019s commits: git fetch cindy/master\nMerge your friend\u2019s changes into your repo: git merge cindy/master\nPush the changes back to GitHub: git push origin/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What to do about \"PTY allocation request failed on channel 0\"\n\nI can't see to wrap my head creating an ssh key for GitHub. I had it working quite awhile back but I can't figure out what has changed. I've since removed the previous SSH keys from my GitHub account. After following the instructions several times for generating an SSH key (http://help.github.com/mac-key-setup) and testing \"ssh [email\u00a0protected]\" I get the following; \n\nPTY allocation request failed on\n  channel 0 ERROR: Hi...successfully\n  authenticated...GitHub does not\n  provide shell access...Connection to\n  github.com closed.\n\nI reviewed the troubleshooting guide and noticed that my ssh directory didn't have a config file. After creating it I'm unsure of what or how to enter the local path on the IdentityFile line. I'm not even sure whether this is necessary in my case? \n\nIf your github authentication\n  information is different from your\n  machine account information, you\u2019ll\n  need to modify your ssh configuration\n  file.\nCreate or open the file at\n  ~/.ssh/config Add the following lines:\n\nHost github.com\n    User git\n    Hostname github.com\n    PreferredAuthentications publickey\n    IdentityFile [local path to private key half of github public key you provided]\n\n\nYou may also need to update the\n  permissions on your .ssh folder and\n  its contents. The SSH application will\n  ignore secret files that are too\n  permissive.\n\n$ chmod 700 ~/.ssh\n$ chmod 600 ~/.ssh/*\n\nI also ran ssh -v [email\u00a0protected] the results of which can be seen here http://gist.github.com/607283 nothing different from what I can tell.\nAny idea what I'm doing wrong?"}, {"role": "assistant", "content": "As described in the comments on the question, the \u201cPTY allocation request failed\u201d is a red herring with respect to GitHub authentication (it is the result of trying to interactively login to GitHub when the only SSH service they offer is non-interactive Git-over-SSH; the authentication is working, they just do not provide interactive, \u201cshell\u201d service).\n\nThe person who asked the question wrote this in a comment: \n\nI guess the related problem is that when I try to create a new repository and \"git push origin master\" I return the following \"Error: Permission to [email\u00a0protected]/myapp denied to myusername. Fatal: the remote end hung up unexpectedly\"\n\nThis seems more likely to be the actual problem. This seems to indicate that the remote named origin not configured to correctly point to a GitHub repository.\nCheck the output of git remote show -n origin. Probably the \u201cFetch URL\u201d and the \u201cPush URL\u201d are the same. They should both look like this:\n[email\u00a0protected]:git-user-name/repository-name\n\nWhen logging into GitHub on the web you can use either your account\u2019s username or its associated email address. When pushing to repositories (or fetching from private repositories) you have to use your actual username (an email address will not work). It looks you are using your email address in there instead of just your GitHub username. To fix this, reconfigure the remote\u2019s URL:\ngit remote set-url origin [email\u00a0protected]:github-username/repository-name\n\nYour username is displayed in many places on the GitHub web pages once you are logged in. The easiest place to find it is between your gravatar and the \u201cDashboard\u201d link on the page header (you will see a silhouette icon if you do not have a gravatar configured). That same location links to your  public profile page; this page\u2019s URL should also end in your username."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change Fork Name For Github\n\nI recently had an idea for a project. I found a project identical to the one I want to create on Github. I got very lucky because the person just started so there is a base, but everything is very raw and perfect for adding onto. \nI made a fork of the project and made a big mistake. After I cloned the fork and committed changes to it I realized I wanted to rename the fork. Obviously this would have been easier to do from the start.\nThese are instructions from Github itself\n\nWhen you rename a repository, its issues, wiki, stars, and followers\n  are preserved. Forks continue to point to the root repository.\nHowever, redirects are not set up for links that point to the old\n  location. You will need to update your local repositories to point to\n  the new location.\n\nWhich is great, i can simply rename the fork on Github but that leaves me repositories with the old links. How can I update my local repositories?"}, {"role": "assistant", "content": "If you haven't renamed already, you can just push all pending changes, rename, and just clone again.\nIf you've already renamed, you should just update the origin on your local repos:\ngit remote set-url origin git://github.com/youruser/yourrepo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a good workflow for submodule forks\n\nSuppose we have the following repository structure on github:\ncompany:project.git\n  \\- company:submodule.git\n\nA developer in my company forks the company project, making his workspace look like this:\ndeveloper:project.git\n  \\- company:submodule.git\n\nThis is fine for 90% of the developers since they don't change the submodule library, they only work in the project. Now suppose there's a new feature which requires improvements in the submodule. The developer charged with this converts his workspace to this:\ndeveloper:project.git\n   \\- developer:submodule.git\n\nGetting there is not trivial as he needs to replace a submdule with another submodule (to git, the original and the fork of the submodule are two different things).\nIf this developer works on the library for a bit longer, he commits this structure to his master branch, so his fork on github always uses the forked submodule.\nOnce he's ready with development, he'll create a pull request. The problem is that when merging the pull request the main repository will look like this:\ncompany:project.git\n   \\- developer:submodule.git\n\nThis is problematic as now every developer that tracks the company branch will end up with the developer's submodule.\nTo workaround the problem, before the developer makes a pull request, his master branch should be moved back to the company:submodule.git - which is just very awkward, especially since locally he'll always still want to work with developer:submodule.git.\nWe've tried several workflows, and the above issue is the only one where we don't have a good workflow yet."}, {"role": "assistant", "content": "When the developer creates a commit with the submodule at a particular version, that's a strong statement that the supermodule works with the submodule at that exact version.  If his code does actually work with the company's version of the submodule, I think the right thing to do is for the developer to:\n\nbranch the supermodule\ncheckout the company version in the submodule\nupdate .gitmodules in the supermodule, if the developer changed that from the upstream version\nstage and commit that change\ntest everything\nissue the pull request\n\nHe can then switch back to his normal development branch in the supermodule.\nOne thing I don't understand about your question is the following:\n\nGetting there is not trivial as he needs to replace a submdule with another submodule (to git, the original and the fork of the submodule are two different things).\n\nOn the contrary, the submodule can be any git repository so long as it contains the commit which the supermodule points to.  If there are two different remote repositories, he can just add an extra remote in the submodule.  (The developer should change .gitmodules as well if they're going to share their repository with anyone else.)\n\nIn response to your comment below, perhaps it's worth going through how to switch a submodule from pointing to one version to another.  Let's suppose that the developer is using their own repositories for the super and submodule, but those are both cloned from the company's versions (i.e. so most of the history is the same), and the submodule is at the path lib.  The developer now wants to switch the submodule to point to the company's version instead.  They can do the following:\n\nEdit the url parameter for the submodule in .gitmodules to point to the company's repository.\ncd lib\ngit remote add company developer@company:/srv/git/lib.git\ngit fetch company\ngit checkout -b upstream-master company/master\ncd ..\ngit add .gitmodules lib\ngit commit -m \"Switch the lib submodule to point back to the company's version\"\n\nSteps 3 to 5 can just be changed to git checkout <whatever> once the remote and branch are set up."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git master branch has no upstream branch\n\nI'm trying to push one of my projects to github, and I keep getting this error:\nfatal: The current branch master has no upstream branch.\n\nI've never seen this before. I re-initialized my git, re-added my origin, deleted and re-made the repo, and recreated my SSH key."}, {"role": "assistant", "content": "Instead of creating a new repository on Github, cloning that, or reinitializing your local repository, the following command would have been sufficient:\ngit push -u origin master\n\norigin stands for the remote name (default is origin),\nmaster is the branch you want to push, in your case it's master, otherwise you would have to change that in the command.\n-u means, that your local branch will be setup to track the new created master branch on the origin repository (the master on the origin will be the upstream branch of your local branch). If the branch master doesn't exist on the remote repository, it will be created, otherwise it will be updated (the -u works no matter if it exists or not)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "can't download github project with curl command\n\nI used \"curl -sO\" command to download project files from this GitHub project link:\nhttp://github.com/ziyaddin/xampp/archive/master.zip\nbut, I couldn't download. There is error occured and says that:\nArchive:  /home/ziyaddin/Desktop/master.zip\n[/home/ziyaddin/Desktop/master.zip]   End-of-central-directory\nsignature not found.  Either this file is not   a zipfile, or it\nconstitutes one disk of a multi-part archive.  In the   latter case\nthe central directory and zipfile comment will be found on   the last\ndisk(s) of this archive. zipinfo:  cannot find zipfile directory in\none of /home/ziyaddin/Desktop/master.zip or\n          /home/ziyaddin/Desktop/master.zip.zip, and cannot find \n/home/ziyaddin/Desktop/master.zip.ZIP, period.\n\nbut I can download this link with curl command:\nhttp://cloud.github.com/downloads/pivotal/jasmine/jasmine-standalone-1.3.1.zip\nI think that it is because it is in cloud.github.com. I want to know how can I download from  first link with curl command?"}, {"role": "assistant", "content": "curl -L -O https://github.com/ziyaddin/xampp/archive/master.zip\n\n\nyou must use https://\nyou must use -L to follow redirects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Tortoisegit undo last commit into the repo\n\nIs there an option in tortoisegit to undo the last commit into the repo?\nBy mistake I pushed a large number of unnecessary files into my git repository(branch:master) which I need to undo. I have searched a lot for the right option in tortoise git to undo the push and go back to the state before the last commit. Please show me a way to undo my last commit."}, {"role": "assistant", "content": "If you haven't pushed your changes yet (so your commit is only local)\n\nTortoiseGit -> Show log\nSelect the commit to which you want to rollback to\nReset \"<branch>\" to this... (Note: The commit is not lost after the reset, the HEAD is just not pointing to it)\nTortoiseGit -> Show log\n\nIf you have, then this can still be done, but then you'd have to also do a force-push (check \"overwrite known changes\" 1).\n1 The \"overwrite known changes\" flag will replace the already pushed commit with a new one. If there is a chance that someone already fetched the commit that you're replacing, don't use this feature, otherwise doing so will create a fork in the history with two conflicting truths.\n\nThere is also a shortcut for when you want to just (1) redo the last commit and (2) you haven't pushed it yet:\n\nCommit -> Check \"Amend Last Commit\"\n\nThat will replace the last commit with a new one. But I don't recommend using this - if the last commit is already pushed, you can end up with a big mess. TortoiseGit will not stop you here.\nBy doing a Reset you are forced to have a look at the log, and there you see if the commit is local or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use curl to access the github graphql API\n\nAfter referring this guide I needed to access the github graphql by using curl for a testing purpose. I tried this simple command \ncurl -i -H \"Authorization: bearer myGithubAccessToken\" -X POST -d '{\"query\": \"query {repository(owner: \"wso2\", name: \"product-is\") {description}}\"}' https://api.github.com/graphql\n\nbut it gives me\n\nproblems parsing JSON\n\nwhat I am doing wrong. I spent nearly 2 hours trying to figure it and tried different examples but none of them worked. Can you please be kind enough help me resolve this"}, {"role": "assistant", "content": "You just need to escape the double quotes that are inside the JSON as the query\n$ curl -i -H 'Content-Type: application/json' -H \"Authorization: bearer myGithubAccessToken\" -X POST -d '{\"query\": \"query {repository(owner: \\\"wso2\\\", name: \\\"product-is\\\") {description}}\"}' https://api.github.com/graphql"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Issues with pushing large files through Git\n\nCurrently when I try to push to a Git repo, I am getting the following error.\nremote: error: GH001: Large files detected.\nremote: error: Trace: 7bbfe5c1099cfe679aa3cd1eee13e10a\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: File e3384023be667de7529538b11c12ec68.201307290946.sql.gz is 125.37 MB; this exceeds GitHub's file size limit of 100 MB\n\nI have gone through and made sure that this file does not exist in the directory, and have done git add -u. We have tried to prune the branch but this doesn't work as it can't find the file to delete."}, {"role": "assistant", "content": "It is possible that you are pushing several commits, one of them including a large file, and another more recent one removing that file.\n2020-2022:\nUse git filter-repo (python-based, to be installed first)\nAnd use some content-based filtering:\n\nIf you want to filter out all files bigger than a certain size, you can use --strip-blobs-bigger-than with some size (K, M, and G suffixes are recognized), e.g.:\ngit filter-repo --strip-blobs-bigger-than 10M\n\n\n\nOriginal answer, using obsolete tools like git filter-branch or BFG:\nIn any case, you can try, as explained in \"Fixing the \u201cthis exceeds GitHub\u2019s file size limit of 100 MB\u201d error\", a filter-branch (if you know the name/path of the large file that you can't see)\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch e3384023be667de7529538b11c12ec68.201307290946.sql.gz' <sha1>..HEAD\n\nOr, if you don't know but want to get rid of any large file (say > 90MB), you can use the BFG repo cleaner\nbfg --strip-blobs-bigger-than 90M  my-repo.git\n\nThat will track for you that elusive large file in your repo history and remove it.\nNote that you will have to do a git push --force after that, because the history of the more recent commits will have been modified.\nIf others already cloned your repo before, a bit of communication is in order to warn them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push changes to github without pull\n\nI developed a project that was been developed by another developers. I sent my code to the previous developers to make changes in their code but they said that they have never worked with git, so they added changes to the project and it is now the actual version but not under version control.\nSo, I already have commits in github and I need to push this new version.\nWhat I did:\n\ngit init\ngit remote add origin\ngit add .\ngit push origin master\n\nBut there is an problem: I can't push new changes before updating the local repo. If I update my repo it will return all the files that the previous developers have deleted.\nHow do I push the current version without pulling data from git?"}, {"role": "assistant", "content": "You can do a forced push.\ngit push -f origin branch_name\n\nThe forced push will erase all commit history of the remote repository's branch, and replace it to your branch.\nCheck the answers for doing forced pushes in \"How do I properly force a Git push?\". Forced push can have unintended consequences as mentioned in \"Git: How to ignore fast forward and revert origin [branch] to earlier commit?\", so check for the same.\nThe forced push will be an incorrect way to push stuff in your case, since you already have previous commits on GitHub, and this will erase the commit history for previous commits.\nHence, to preserve your commit history, you can do the following things:\nRemove all the files from the git repository, and then add the new files here, and then commit the updated files:\ngit rm -rf .\ncp -r path/to/updated/code/* .\ngit add .\n\nDoing a git status now will tell you which files the other developers modified, and a git diff will show what modifications are there. \nIf a file has remain unchanged, then git rm and git add will nullify the effect of each other.\nThe files which those developers deleted remain deleted since you ran the git rm for them but no git add.\nOnce you are satisfied that these indeed are the changes, you can commit using\ngit commit -m \"Merged new code\"\n\nPotential gotchas:\n\nOnly the file mode has changed (755 <=> 644) - depending on what code the other developers sent you.\nYou will lose your .gitignore file with git rm -rf . (and similarly .gitattributes and other such files). Reset HEAD for each such files using git reset HEAD .gitignore before the commit.\nDifferent line terminating characters (in case different development environments are being used), So check for them appropriately."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a commit and push into repo with GitHub API v3?\n\nI want to create a repository and Commit a few files to it via any Python package. How do I do?\nI do not understand how to add files for commit."}, {"role": "assistant", "content": "Solution using the requests library:\nNOTES: I use the requests library to do the calls to GitHub REST API v3.\n1. Get the last commit SHA of a specific branch\n# GET /repos/:owner/:repo/branches/:branch_name\nlast_commit_sha = response.json()['commit']['sha']\n\n2. Create the blobs with the file's content (encoding base64 or utf-8)\n# POST /repos/:owner/:repo/git/blobs\n# {\n#  \"content\": \"aGVsbG8gd29ybGQK\",\n#  \"encoding\": \"base64\"\n#}\nbase64_blob_sha = response.json()['sha']\n\n# POST /repos/:owner/:repo/git/blobs\n# {\n#  \"content\": \"hello world\",\n#  \"encoding\": \"utf-8\"\n#}\nutf8_blob_sha = response.json()['sha']\n\n3. Create a tree which defines the folder structure\n# POST repos/:owner/:repo/git/trees/\n# {\n#   \"base_tree\": last_commit_sha,\n#   \"tree\": [\n#     {\n#       \"path\": \"myfolder/base64file.txt\",\n#       \"mode\": \"100644\",\n#       \"type\": \"blob\",\n#       \"sha\": base64_blob_sha\n#     },\n#     {\n#       \"path\": \"file-utf8.txt\",\n#       \"mode\": \"100644\",\n#       \"type\": \"blob\",\n#       \"sha\": utf8_blob_sha\n#     }\n#   ]\n# }\ntree_sha = response.json()['sha']\n\n4. Create the commit\n# POST /repos/:owner/:repo/git/commits\n# {\n#   \"message\": \"Add new files at once programatically\",\n#   \"author\": {\n#     \"name\": \"Jan-Michael Vincent\",\n#     \"email\": \"[email\u00a0protected]\"\n#   },\n#   \"parents\": [\n#     last_commit_sha\n#   ],\n#   \"tree\": tree_sha\n# }\nnew_commit_sha = response.json()['sha']\n\n5. Update the reference of your branch to point to the new commit SHA (on master branch example)\n# PATCH /repos/:owner/:repo/git/refs/heads/:branch\n# {\n#     \"sha\": new_commit_sha\n# }\n\nFinally, for a more advanced setup read the docs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I get a list of all pull requests for a repo through the github API?\n\nI want to obtain a list of all pull requests on a repo through the github API.\nI've followed the instructions at http://developer.github.com/v3/pulls/ but when I query /repos/:owner/:repo/pulls it's consistently returning fewer pull requests than displayed on the website.\nFor example, when I query the torvalds/linux repo I get 9 open pull requests (there are 14 on the website). If I add ?state=closed I get a different set of 11 closed pull requests (the website shows around 20).\nDoes anyone know where this discrepancy arises, and if there's any way to get a complete list of pull requests for a repo through the API?"}, {"role": "assistant", "content": "You can get all pull requests (closed, opened, merged) through the variable state. \nJust set state=all in the GET query, like this->\nhttps://api.github.com/repos/:owner/:repo/pulls?state=all\n\nFor more info: check the Parameters table at  https://developer.github.com/v3/pulls/#list-pull-requests\nEdit: As per Tom\u00e1\u0161 Votruba's comment:\n\nthe default value for, \"per_page=30\". The maximum is per_page=100. To get more than 100 results, you need to call it multiple itmes: \"&page=1\", \"&page=2\"..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the meaning of revert this commit and roll back this commit in GitHub for Windows?\n\nGithub for Windows features these two commands described as:\n\nrevert this commit - create a new commit that reverts the changes of this commit\nrollback this commit - roll back this commit leaving all changes made in this and later commits in your working directory\n\nCould you explain the exact meaning of these two commands and how they can be used. Specifically I fail to understand what is the purpose of the second one. It makes no sense to me.\nIs it possible to revert to a previous commit check it out and if I don't like it, go back to where it was initially?\nThis gui seems to feature a very small part of the git system but what would be a proper workflow utilizing it?"}, {"role": "assistant", "content": "Suppose you have a single file in your repo, and you have the following commits:\ncommit 1 : the file contains A\ncommit 2 : the file contains B\ncommit 3 : the file contains C\n\nIf you execute revert on commit 3, you'll have this in the repo:\ncommit 1 : the file contains A\ncommit 2 : the file contains B\ncommit 3 : the file contains C\ncommit 4 : the file contains B\n\nAnd the file in your working copy will contain B as well.\nIf you execute roll back, you'll have this in the repo:\ncommit 1 : the file contains A\ncommit 2 : the file contains B\n\nAnd the file in your working copy will be left unmodified. The file will thus contain C. It allows you to fix a small mistake and commit again, for example."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete my follower at github?\n\nIs it possible to do?\nIf yes, could you please provide a curl example?"}, {"role": "assistant", "content": "Removing a follower on Github in fact is possible with this workaround:\nBlock the user who watches you, as described in the github help.\nThen unblock him again. \nAfter that he will not be blocked anymore and he will also no longer follow you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Renaming remote git branch\n\nI have 2 git branches: master and experimental.\nExperimental became good, I want to make it the master. I figured I would rename to shuffle things around, but here is what I got:\nnutebook:Stuff nathan$ git remote rename master old\nerror: Could not rename config section 'remote.master' to 'remote.old'\n\nI use GitHub and Git-Tower."}, {"role": "assistant", "content": "The following is a guide to rename your master branch. It will work just as easily to rename your experimental branch.\n\nHere's how I did the renaming.\nFirst, in your working tree, locally rename master to something\n  else.\ngit branch -m master old-dev\n\nRenaming a branch does work while you are on the branch, so\n  there's no need to checkout something else.\nThen, locally rename the maintenance branch (2.63-branch) to\n  master:\ngit branch -m 2.63-branch master\n\nNow, time to mess with the remote. Just in case you screw up, you\n  might want to make sure you have a current backup. First, delete the\n  remote's master:\ngit push origin :master\n\nAnd now, give the remote your new master:\ngit push origin master:refs/heads/master\n\nUpdate: When creating a new branch, the refs/heads/ prefix is\n  needed on the remote side. If the branch already exists (as master did\n  above) only the branch name is required on the remote side.\n... and your now-renamed old master:\ngit push origin old-dev:refs/heads/old-dev\n\nFinally, delete the old name of your maintenance branch to prevent\n  confusion:\ngit push origin :2.63-branch\n\nClients will now get the 'new' master branch when they pull.\n\nsee this site."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a URL query string for searching own GitHub Gists?\n\nIs there a URL query string for searching only own GitHub Gists? I wouldn't care if it only worked with public Gists.\nThe only thing I could find is the URL for searching all public Gists, but that's not very helpful for finding own Gists\nhttps://gist.github.com/search?q=hello+world\n\nUltimate goal: quickly searching for own Gists via launcher tools (in my case Alfred) or Chrome search engine shortcuts."}, {"role": "assistant", "content": "Try searching with user:<username> hello world. E.g.\nhttps://gist.github.com/search?q=user%3Adefunkt+hello+world"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub repository not listing in Google search [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about programming within the scope defined in the help center.\n\n\nClosed 3 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI created my first repository with GitHub but when I try to google it, its not listing\nRoboSpice-Extn-Retrofit-Tutorial \nEDIT\nI don't know how long it will take. On the other hand anyone can take a help of Google Webmaster, this would solve your problem in minutes :)"}, {"role": "assistant", "content": "That repo seems to have been created less than an hour ago.\nGive Google a little time to parse the new repos, and it should show up.\nNote that it is referenced by GitHub search already:\nhttps://github.com/search?utf8=%E2%9C%93&q=RoboSpice-Extn-Retrofit-Tutorial\nAs the OP used the Webmaster Tools to submit its url, the repo is now indexed in Google.\n\nUpdate 2019: the section \"Enabling GitHub Pages to publish your site from master or gh-pages\" is now (since 2014) more precise:\n\nTo select master or gh-pages as your publishing source, you must have the branch present in your repository.\n  If you don't have a master or gh-pages branch, you can create them and then return to source settings to change your publishing source.\n\nOnce the correct branch is created/populated, and selected as the publishing source, the Google indexing seems to be very quick."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unable to change source branch in GitHub Pages\n\nI have created a simple web site for GitHub Pages. The source of the site is in the \"master\" branch and the generated web site (what I want to see published) is under the \"gh-pages\" branch.\n\nI was expecting to be able to change the source of the site in the settings. However, the setting is grayed out? I cannot change it (see screenshot below). What am I doing wrong? How do I switch to the \"gh-pages\" branch?"}, {"role": "assistant", "content": "Personal or organization sites are built from master. gh-pages branch is used to build sites for projects.\nAs far as I can see, you're using https://user-name.github.io/ url, this is a personal one, so that's why master branch is the default one.\nSee the documentation page\n\nIf your site is a User or Organization Page that has a repository named <username>.github.io or <orgname>.github.io, you cannot publish your site's source files from different locations. User and Organization Pages that have this type of repository name are only published from the master branch.\n\nSo the answer is No, you can not change it. You'll have to adjust your workflow and keep development in another branch (let's call it development) and merge to master when you're ready to publish.\nUPD: It's 2020 out there, so as of July 31st GitHub Pages allow you to configure any branch to act as an old master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move .git repo to parent directory [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMy Git repository is in the wrong root directory. Can I move it? (../ instead of ./)\n\n                                (10 answers)\n                            \n\nClosed 7 years ago.\n\n\n\nI have a subdirectory named \"www\" that is a repo:\nsite\n|-- www/\n|    |-- .git/\n|    |-- index.html\n|-- design/\n|    |-- images.jpg\n\nI'd like to change the repo to the parent directory so that the repo structure mirrors the original file structure as follows:\nsite\n|-- .git/\n|-- www/\n|    |-- index.html\n|-- design/\n|    |-- images.jpg\n\nCan this be done? Are there implications with then pushing the changes up to Gitlab?"}, {"role": "assistant", "content": "Create a www directory in your repo.\ngit mv the HTML files to that directory. Optionally commit this step.\nmv the design directory into your repo, and git add .\nCommit.\nRename/move your whole repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub \"Failed to publish this branch\" error on Windows\n\nI'm new to Git, and I just downloaded it yesterday.  As a test for my first online (not local) repository, I committed a useless text file and then hit publish.  After a short while, I got this very non-descriptive error:\n\nSo I know that I can't publish to this branch.  There's only one and it's the master branch.  Is there any further information on what might be causing this error?\nAs a side note, my partner has successfully uploaded files to the same repository, but I haven't gotten any sort of indication that this has happened.  Does this mean I'm not connected to the repository properly in some way?  I was the one who set it up!"}, {"role": "assistant", "content": "In Windows, right click on your repository \u2192 click on Open a shell here.\nYou will see a command prompt.\nType git push in it. (been aware after seeing SimonBoudrias comment)\nThe command prompt will suggest you to type some other command or shows an error.\nIf the command prompt suggest you to type something else, then type that. It will work. \nIf the command prompt shows an error, then please post the detailed error here.\nInformation: You might want to check this app"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub fork a repo from previous commit\n\nI've found a repository on GitHub I would like to fork - but not the current version.\nI want to fork the repo as it was quite a few commits back - is this possible? The repo has not marked any releases, so I'm not sure how to do this. I could obviously copy the code as it was in that commit, but I would prefer to fork, as then I get the link back to the original repo."}, {"role": "assistant", "content": "You can only fork the current repository.\nYou can reset the forked repository's master branch to an earlier commit though, making it look like as if you had forked it at that point.\nSee: How can I rollback a github repository to a specific commit?\nIf you reset every branch, it effectively resets your repository to an earlier state of the original repository (with exception of branch-independent data, like configuration, hooks etc which are not reset). Since it's possible that not all branches contain the commit from the master branch, you might need to look up commits by date for each branch, to reset them to the last commit before the commit from which you want to fork."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are the status tags, like [build | passing]\n\nMay be a well known question, but actually I'm asking this, because I'm not familiar with these tags.\n\nI've seen similar types of tags in various Github projects, especially in their README.md. My questions are manifold regarding these:\n\nWhat's the purpose of these tags?\nHow to generate them?\nIs there any good practice or documentation that suggests what types of tags can be used or should be used in a project?\nWhen a project can be determined viable using such a tag?"}, {"role": "assistant", "content": "What's the purpose of these tags?\n\nThese images are provided by external services, often continuous integration services, and are used to show interesting information about the repository.\nFor example, the first badge you show in your example says that the build is \"passing\" (the exact definition of this will be build-specific, but it commonly means that the tests pass and nothing blew up during the most recent build).\nThe third example, coverage: 12%, is a code coverage report.\n\nHow to generate them?\n\nEach service will have its own way.\nThe second badge in your example is from Scrutinizer, and unfortunately I can't find documentation about its badges. But most badging systems work by giving you a link for each project or job that you can use on your website or GitHub or whatever, and when a build happens the badge's appearance is updated accordingly.\nThe Travis CI documentation contains a good example.\nHaving answered the first to questions, I think your last two largely disappear. The badges that can be used are determined by whatever services you can find. The badges that should be used are entirely up to you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to generate stats for a GitHub project?\n\nIs there an easy/efficient way to generate some high-level reports for a particular GitHub project? \ne.g. lines of code committed over time, top contributors, etc"}, {"role": "assistant", "content": "You can try applying gitstats to a cloned repo of your GitHub repo.\nSee for example the activity of the Git repo itself, with many data like the commits per year/month:\n\n\nSee also \"Looking at Git Statistics\", with the GitHub 'yearly_stats' for a simple little script.\n\nUpdate April 2013 (\"Get up to speed with Pulse\"):\nCheck out Pulse\n\nPulse is a great way to discover recent activity on projects.\n  Maybe you haven't checked on  your favorite repository in a while or you just discovered a project that looks interesting to you. \n  Pulse will show you who has been actively committing and what has changed in a project's default branch:\n\n\nYou can find the link to the left of the nav bar."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does github allow pre-receive hooks?\n\nDoes GitHub allow for pre-receive or update hooks? \nWhat I would be looking to do is to prevent the primary branches from being pushed to (i.e. master, hotfix, develop) and require that they be merged via a GitHub pull request. This is a private repo so GitHub style forking is not an option. \nAny advice on how to accomplish this would be of great help."}, {"role": "assistant", "content": "Only people that you have listed a 'collaborators' can push to a Github hosted repository.  See the repository's 'admin' page to add collaborators. Everybody else needs to submit a 'pull request' to get their additions accepted by the repository's administrator.  See Github Access Permissions.  (There aren't per-branch access permissions.)  So, in order to accomplish your goal, you don't need hooks; what you need is already built in.  \nTwo Notes: \n\nprivate Github repositories can have multiple contributors \nit would be unusual for Github to support pre-receive hooks (or any other server hooks) given that hooks contains arbitrary code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git SSL certificate- Invalid certificate chain while accessing\n\nI'm fairly new to github and git, but I do have git setup on my Mac (using Mavericks) and have added a repo on github. I'm using MAMP and working on a Drupal site, and when I try my first push to the repo, using git push origin master I get an error:\nerror: SSL certificate problem: Invalid certificate chain while accessing\n    https://githib.com/...git/info/refs?service=git-receive-pack\nfatal: HTTP request failed\n\nI've looked around to try and make sense of this error without any luck. I'd greatly appreciate any help."}, {"role": "assistant", "content": "if you use self generated ssl key, you can try this.\ngit config --global http.sslVerify false\n\nRefer\nhttps://confluence.atlassian.com/display/FISHKB/Unable+to+clone+Git+repository+due+to+self+signed+certificate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: A branch named 'gh-pages' already exists\n\nI made a template sale website (gatsby / react).  I cloned my template GitHub repo and changed the remote origin to a new private repo, pushing to which works fine.\nI deploy to gh-pages with npm srcipt \"deploy\": \"gatsby build --prefix-paths && gh-pages -d public\"\nThe first time I ran this command it seemed to stall so I control c'd out of it. Now, when I try to deploy I get the error \"fatal: A branch named 'gh-pages' already exists.\"\ngit branch -a shows:\nremotes/origin/HEAD -> origin/master\nremotes/origin/gh-pages\nremotes/origin/master \nBut there is not a gh-pages branch on gitHub.\nI tried rm -rf node_modules/gh-pages/.cache didn't work.\nAlso, git push origin --delete gh-pages which gave\n\"error: unable to delete 'gh-pages': remote ref does not exist\".\nI uninstalled and reinstalled gh-pages."}, {"role": "assistant", "content": "I had to manually remove the folder node_modules/.cache/gh-pages to get the deployment to work.\nPrior to this I had tried git fetch --prune, which removed remotes/origin/gh-page.  I don't know if pruning the branches was a necessary step or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Not showing as a contributor on GitHub\n\nI'm struggling to get GitHub to show my contributions to a project. It is not my repository, but other repositories I've contributed to do show up on my profile. \nI've tested contributions to both shared and private repositories work. I've pushed from other projects and everything is working as expected. The patches from the non-working project and a working one, both show the same details. Any pushes to working projects show me as a contributor on both the repository and my personal profile. \ngit config --global user.email and git config --global user.name are both correct. The repository I am committing to shows me as the author, but not on my profile. \nI'm a bit lost on what to do. Does anyone have any ideas?"}, {"role": "assistant", "content": "Github shows only the top 100 contributors for a project.\nIf there are more than 100, the other contributors beyond these top 100 are never shown.\nEven if you set a date range and there are less than 100 contributors displayed for the selected period, the list still only contains contributors who are among the all-time top 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"refusing to merge unrelated histories\" failure while pulling to recovered repository\n\nI come up with a problem about Git push.\nIt worked successfully before, but it failed this time. In the beginning, I am in my master MINGW64 /d/javasoft/apache-tomcat-7.0.70/webapps/MyNote (master), and then,\n\nI use git remote add origin to relate my remote origin, but it alerts that fatal: remote origin already exists.\nthen, I use git remote rm origin (Someone told me to), and it's OK.\nthen, I use git remote add origin https://github.com/***/***.git again. It's OK.\nthen, I use git push -u origin master ( I tried git push origin master, but I lost my local whole .git for some reason before, so I guess it may be the first time to push, and I should add -u ). BUT, it alerts error: failed to push some refs to 'https://github.com/***/***.git'\nthen, someone told me that I should use git pull origin master before I use push, and I did as it. but, it alerted: fatal: refusing to merge unrelated histories.\nI found some answers in Git refusing to merge unrelated histories on rebase, but it seemed that it didn't work. In my issue, it alerted fatal: Couldn't find remote ref \u2013allow-unrelated-histories\n\n\nHow can I do it? I just want to push..."}, {"role": "assistant", "content": "This cannot be answered shortly.\nWarning: You should not use the --allow-unrelated-histories flag unless you know what unrelated history is and are sure you need it. The check was introduced just to prevent disasters when people merge unrelated projects by mistake.\nAs far as I understand, in your case the following has happened:\nYou have cloned a project at some point 1, and made some development to point 2. Meanwhile, project has evolved to some point 3.\n\nThen you for some reason lost your local .git subdirectory - which contained all your history from 1 to 2. You managed to restore the current state though.\n\nBut now it does not have any history - it looks like the whole project has appeared out of nowhere. If you ask Git to merge them it will not be able to say where your changes are, so it can add them to remote project, as far as I understand it will just report massive add/add conflicts.\nYou should now find back that commit 1 from the remote history where you have cloned the project (I assume you did not pull after that; if you did then you should instead look for the last commit you have pulled). Then you should modify your history so that is starts from that commit 1, and then Git will be able to merge correctly (with pull for example).\nSo, the steps (assuming you are now in your restored commit without history):\n\nestimate where is the commit 1 you have cloned from as some 1?, based on commit time for example\nrun git diff _1?_..HEAD, and read carefully. Make sure that the difference contains only edits which you have made. If it contains more then you should have picked a bit wrong 1? and need to adjust it and repeat this step\nafter you have found the commit 1. You should make it your parent; do git --reset --soft _1_, and then git commit.\n\n\nNow it looks like you have cloned from 1, then made one commit with all your changes. Your intermediate history is lost anyway with your older .git directory, but now you can run your git pull - it will merge correctly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Large github commit diff not shown\n\nThis happens to me both with Compare view as well as standard commits that are large in the amount of files changed.\nThe screenshot below is from a compare between two branches with 380 files changed. The files at the beginning of the diff log have their diffs visualized but at a certain point down the page it stops visualizing the diffs. I understand you don't want massive pages but I can't seem to find a way to view a file's diff individually. Instead I have to check these both out locally and do the diff manually.\nDoes anyone have a simpler solution whether it be software driven or (preferably) a link i'm missing on github?"}, {"role": "assistant", "content": "Adding .patch to the end of the URL somewhat helps. Removes the nice UI and comment functionality, of course.\nAn example. If your pull request is: https://github.com/JustinTulloss/zeromq.node/pull/47, then the patch can be found at https://github.com/JustinTulloss/zeromq.node/pull/47.patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove and ignore all files that have an extension from a git repository\n\nI'm working on a django project with a few other developers and we have recently realized that all the .pwc files in our app cause the commits and repository to be cluttered.\nIs there any way I can remove all .pwc files from all child directories in my git repository and then ignore them for any future commit?"}, {"role": "assistant", "content": "Plenty of ways to remove them:\ngit ls-files | grep '\\.pwc$' | xargs git rm\n\nfind . -name *.pwc | xargs git rm\n\nNote: If you haven't committed them, just use rm, not git rm.\nTo ignore them in the future, simply add *.pwc to the .gitignore. (If you don't have one, create a file named .gitignore at the top level of your repository, and just add a single line saying \"*.pwc\")"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a github markdown language identifier for Objective C code?\n\nIn the official github flavored markdown docs they show how we can use fences to mark code blocks, and optionally we can supply a language identifier, such as\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n\nIs there a language identifier for Objective C? I've searched and cannot find a reference.\nFurthermore, is there a list of all supported language identifiers that can be used in github markdown?"}, {"role": "assistant", "content": "The identifier is objective-c. \nHere you can find a full list:\nhttp://coapp.org/reference/garrett-flavored-markdown.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Running a GitHub Actions step only if previous step has run\n\nI've set up a workflow in GitHub actions to run my tests and create an artifact of the test coverage. The stripped down version of my YAML file looks like this:\nname: Build\n\non: [pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Other steps here\n\n      - name: Build app\n      - name: Run tests\n      - name: Create artifact of test coverage\n\n      # Other steps here\n\nThe problem is that the artifact does not get created when the tests fail.\nI figured out about if: always() condition the from the docs, but this will also cause this step to run when my Build app step fails. I don't want that to happen because there is nothing to archive in that case.\nHow can I only run this step if the previous step has run (either succeeded or failed)?"}, {"role": "assistant", "content": "A possible better alternative is <step>.outcome or <step>.conclusion\nhttps://docs.github.com/en/actions/learn-github-actions/contexts#steps-context\n\nsteps.<step id>.conclusion. The result of a completed step after continue-on-error is applied. Possible values are success, failure, cancelled, or skipped. When a continue-on-error step fails, the outcome is failure, but the final conclusion is success.\n\n\nsteps.<step id>.outcome The result of a completed step before continue-on-error is applied. Possible values are success, failure, cancelled, or skipped. When a continue-on-error step fails, the outcome is failure, but the final conclusion is success.\n\n  - name: Build app\n    id: build\n    run: |\n      <build command>\n\n  - name: Run tests\n\n  - name: Create artifact of test coverage\n    if: steps.build.outcome == 'success'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to generate ssh keys (for github)\n\nQuestion: How do I generate ssh private and public keys (to be used in GitHub/GitLab) using command line.\nThe command below generates the error\nsh.exe\": syntax error near unexpected token '('\n\nI am using Windows XP.\n$ ssh-keygen -t rsa -C \"[email\u00a0protected]\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/xxxx/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /c/Users/xxxx/.ssh/id_rsa.\nYour public key has been saved in /c/Users/xxxx/.ssh/id_rsa.pub.\nThe key fingerprint is:\n01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db [email\u00a0protected]"}, {"role": "assistant", "content": "The command to run is only \nssh-keygen -t rsa -C \"[email\u00a0protected]\"\n\nAll the rest beginning with line 2 of your script is the output of ssh-keygen.\nAnd replace [email\u00a0protected] with your email address.\nHave a look at the manual for ssh-keygen to look for additional options. You should probably use a longer key by adding -b 4096 to the option list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "hide api key for a Github page\n\nI have a github page for my organization where I would like to call data from a 3rd party api where I need an auth token. Can I publish this github page without having the auth token displayed on the public repo?"}, {"role": "assistant", "content": "In short, no. If your GitHub repo is public, all its assets are public. You can make the repo private and it will still publish on GitHub Pages if named with the username.github.io convention or if it has a gh-pages branch. While that's an option, that's not necessarily the right thing to do.\nIf your key is in your GitHub Pages repo, it sounds like it's used for client-side API calls in JavaScript. If so, your auth token is publicly visible whether it's in your public repo or sent in your client-side files to the browser. This is usually fine. The third-party API might have generated the auth token based on your website's domain, and restrict calls using that token to pages originating on your domain. Otherwise, they might require the auth token only for logging requests and monitoring usage.\nIf the auth token is truly meant to be private, then you may need to write private server-side code to call the third-party API. Your GitHub Pages site could then hit your service for the data it needs. I've had to do that before where the web API had security concerns, but I still needed to retrieve non-sensitive data from the client-side."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to Connect Visual Studio 2012 with git (github)?\n\nMicrosoft launched Visual studio 2012 which can be integrated with Git (and github), I'm using the following reference linking visual studio 2012 with git, but i'm not getting any option to commit my code. Do i need to install/use Github for windows? Or is it possible to integrate with github directly from visual studio?"}, {"role": "assistant", "content": "First of all, install Visual Studio 2012 Update 3 and the Visual Studio Tools for Git to enable Git support in 2012. And you must ensure that Git for Windows is installed (Visual Studio will prompt you to install it if you haven't done so).\nIf you're using Visual Studio 2013 or later, Git support is built in and doesn't require any plugin installation.\nThen, under Source Control, ensure that you have the \"Microsoft Git Provider\" enabled:\n\nOpen the Team Explorer tab. When you click the connect button in the toolbar (looks like a power plug), make sure your repository is listed under Local Git Repositories, or use the clone option to clone a repository to your system.\n\nWhen you click clone you can enter an existing GitHub repository location, use the \"HTTPS\" location of your repository. Visual Studio doesn't support SSH. You can use the location picker on your GtiHub repository page to get the right clone url.\n\n\nThen finally, on the Unsynced Commits tab you can click Sync to synchronize your local repository with the remote, this will ask for your GitHub credentials.\n\nIf you want to create a new repository from scratch, I have not the slightest idea of how to do that from the UI, but after creating an empty repository on GitHub, you should be able to add a new remote from the commandline. Visual Studio will then pick up that remote and allow you to push into it.\nSee the following steps on github to initialize an empty repository and setup the link between your local repository and github. Once you've done that, the repository should show up in Visual Studio as well (if it doesn't, add it using the add option on the connect page of Team Explorer)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to parse link header from github API\n\nthe github API sends the pagination data for the json results in the http link header:\nLink: <https://api.github.com/repos?page=3&per_page=100>; rel=\"next\",\n<https://api.github.com/repos?page=50&per_page=100>; rel=\"last\"\n\nsince the github API is not the only API using this method (i think) i wanted to ask if someone has a useful little snippet to parse the link header (and convert it to an array for example) so that i can use it for my js app.\ni googled around but found nothing useful regarding how to parse pagination from json APIs"}, {"role": "assistant", "content": "The parse-link-header NPM module exists for this purpose; its source can be found on github under a MIT license (free for commercial use).\nInstallation is as simple as:\nnpm install parse-link-header\n\nUsage looks like the following:\nvar parse = require('parse-link-header');\nvar parsed = parse('<https://api.github.com/repos?page=3&per_page=100>; rel=\"next\", <https://api.github.com/repos?page=50&per_page=100>; rel=\"last\"')\n\n...after which one has parsed.next, parsed.last, etc:\n{ next:\n   { page: '3',\n     per_page: '100',\n     rel: 'next',\n     url: 'https://api.github.com/repos?page=3&per_page=100' },\n  last:\n   { page: '50',\n     per_page: '100',\n     rel: 'last',\n     url: ' https://api.github.com/repos?page=50&per_page=100' } }"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding self-signed SSL certificate without disabling authority-signed ones\n\nI have a corporate git server working through https using self-signed certificate. The local clone contains two remotes \u2014 the origin pointing to that server, and another pointing to github.\nBy default pulling from the origin fails:\n$ git pull\nfatal: unable to access 'https://[email\u00a0protected]/git/fizzbuzz.git/': SSL certificate problem: self signed certificate\n\nThe github remote works fine.\nThere are two often-suggested solutions:\ngit config http.sslVerify false\n\nwhich is a bad idea, and the one suggested at configure Git to accept a particular self-signed server certificate for a particular https remote:\ngit config http.sslCAInfo <downloaded certificate>.pem\n\nwhich fixes pulling from origin, but break the github remote:\n$ git pull github\nfatal: unable to access 'https://github.com/user/fizzbuzz.git/': SSL certificate problem: unable to get local issuer certificate\n\nHow to make pulling from the corporate server work without breaking pulling from github?"}, {"role": "assistant", "content": "If you are using Git 1.8.5+ (August 2013), you can specify http directives per URL(!).\nIn your case:\ngit config --global http.\"https://code.example.com/\".sslVerify false\n#\n# or, if not on default 443 port:\n#\ngit config --global http.\"https://code.example.com:<aPort>/\".sslVerify false\n\nThat would disable SSL verification only for code.example.com, not for other URLs. \nOr:\ngit config --global http.\"https://code.example.com/\".sslCAInfo <downloaded certificate>.pem\n\nSame idea: sslCAInfo would point to <downloaded certificate>.pem only for code.example.com URLs.\nIt is possible to add your certificate in the Git system certificate store, which, with git-for-windows, would be in C:\\path\\to\\PortableGit-2.6.1-64-bit\\usr\\ssl\\certs\\ca-bundle.crt.\nIt isn't the best practice, though, unless you have to distribute a Git distro with internal certificates in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using gitattributes for linguist examples\n\nAre there any concrete examples, in order to detect wrong languages in GitHub via Linguist attributes?  \nSource: https://github.com/github/linguist\n\nlinguist-documentation\nlinguist-language \nlinguist-vendored"}, {"role": "assistant", "content": "Examples can be found in Linguist's documentation.\nDetecting wrong languages (which's what OP asks) can be achieved by setting linguist-language attributes in the .gitattributes file.\nlinguist-language\nWith the following attribute, Linguist detects all .rb files as being Java files.\n*.rb linguist-language=Java\n\nlinguist-vendored\nWith the following attribute, Linguist detects files in the special-vendored-path directory (notice the mandatory trailing *) as vendored and excludes them from statistics.\nspecial-vendored-path/* linguist-vendored\n\nA double * will also apply the override to all subdirectories:\n special-vendored-path/** linguist-vendored\n\nlinguist-documentation\nWithout the following attribute, Linguist would detect the file docs/formatter.rb as documentation and exclude it from statistics.\ndocs/formatter.rb linguist-documentation=false\n\nlinguist-detectable\nWith the following attribute, Linguist counts SQL files in statistics. Without this attribute, only programming and markup languages are counted in statistics.\n*.sql linguist-detectable=true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get GitHub Clone stats?\n\nThere used to be a \"Clones\" sub-tab in the \"Stats & Graphs\" tab of GitHub (for example https://github.com/TeamMentor/TeamMentor-Documentation/graphs/impact) but that is gone.\nIs there another way to get these stats?\nIt would be great if we could get Gauges to show up Git clone, pushes, pulls, GitHub page views, etc."}, {"role": "assistant", "content": "At least regarding clone, you now (August, 12th 2014) have a dedicated graph.\n(In 2019: Insights / Traffic)\nSee \"Clone Graphs\"\n\nOur traffic graphs tab shows you a lot of information about who's visiting your repository on the web.\nWe've added a new graph to this tab, showing git clone activity.\n\nYou can use it to find out:\n\nhow many times your repository's source code is actually cloned in a given day, as well as\nhow many unique GitHub users (or anonymous IP addresses) did the cloning.\n\nFor more information on traffic graphs, check out the documentation.\n\nNote you also see the Referring sites and Unique visitors\n\nUpdate Jan. 2021: Dr. Jan-Philip Gehrcke reports in the comments:\n\nFor periodically collecting traffic/access data (such as clones, views), I've built a GitHub Action: jgehrcke/github-repo-stats:\nit automatically:\n\npersists the data snapshots in a git repository,\naggregates them, and\ngenerates a report with charts that then can span the entire data collection period!\n\nDemo report in the README."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating a GitHub repository with only a subset of a local repository's history\n\nThe background: I'm moving closer to open sourcing a personal research code I've been working on for more than two years. It started life as an SVN repository, but I moved to Git about a year ago, and I'd like to share the code on GitHub. However, it accumulated a lot of cruft over the years, and I'd prefer that the public version begin its life at its current status. However, I'd still like to contribute to it and incorporate other people's potential contributions.\nThe question: is there a way to \"fork\" a Git repository such that no history is retained on the fork (which lives on GitHub), but that my local repository still has a complete history, and I can pull/push to GitHub?\nI don't have any experience in the administrating end of large repositories, so detail is very much appreciated."}, {"role": "assistant", "content": "You can create a new, fresh history quite easily in Git. Let\u2019s say you want your master branch to be the one that you will push to GitHub, and your full history to be stored in old-master. You can just move your master branch to old-master, and then start a fresh new branch with no history using git checkout --orphan:\ngit branch -m master old-master\ngit checkout --orphan master\ngit commit -m \"Import clean version of my code\"\n\nNow you have a new master branch with no history, which you can push to GitHub. But, as you say, you would like to be able to see all of the old history in your local repository; and would probably like for it to not be disconnected.\nYou can do this using git replace. A replacement ref is a way of specifying an alternate commit any time Git looks at a given commit. So you can tell Git to look at the last commit of your old branch, instead of the first commit of your new branch, when looking at history. In order to do this, you need to bring in the disconnected history from the old repository.\ngit replace master old-master\n\nNow you have your new branch, in which you can see all of your history, but the actual commit objects are disconnected from the old history, and so you can push the new commits to GitHub without the old commits coming along. Push your master branch to GitHub, and only the new commits will go to GitHub. But take a look at the history in gitk or git log, and you'll see the full history.\ngit push github master:master\ngitk --all\n\nGotchas\nIf you ever base any new branches on the old commits, you will have to be careful to keep the history separate; otherwise, new commits on those branches will really have the old commits in their history, and so you'll pull the whole history along if you push it up to GitHub. As long as you keep all of your new commits based on your new master, though, you'll be fine.\nIf you ever run git push --tags github, that will push all of your tags, including old ones, which will cause all of your old history to be pulled along with it. You could deal with this by deleting all of your old tags (git tag -d $(git tag -l)), or by never using git push --tags but only ever pushing tags manually, or by using two repositories as described below.\nThe basic problem underlying both of these gotchas is that if you ever push any ref which connects to any of the old history (other than via the replaced commits), you will push up all of the old history. Probably the best way of avoiding this is by using two repositories, one which contains only the new commits, and one which contains both the old and new history, for the purpose of inspecting the full history. You do all of your work, your committing, your pushing and pulling from GitHub, in the repository with just the new commits; that way, you can't possibly accidentally push your old commits up.\nYou then pull all of your new commits into your repository that has the full history, whenever you need to look at the entire thing. You can either pull from GitHub or your other local repository, whichever is more convenient. It will be your archive, but to avoid accidentally publishing your old history, you don't ever push to GitHub from it. Here's how you can set it up:\n\n~$ mkdir newrepo\n~$ cd newrepo\nnewrepo$ git init\nnewrepo$ git pull ~/oldrepo master\n# Now newrepo has just the new history; we can set up oldrepo to pull from it\nnewrepo$ cd ~/oldrepo\noldrepo$ git remote add newrepo ~/newrepo\noldrepo$ git remote update\noldrepo$ git branch --set-upstream master newrepo/master\n# ... do work in newrepo, commit, push to GitHub, etc.\n# Now if we want to look at the full history in oldrepo:\noldrepo$ git pull\n\nIf you're on Git older than 1.7.2\nYou don't have git checkout --orphan, so you'll have to do it manually by creating a fresh repository from the current revision of your existing repository, and then pulling in your old disconnected history. You can do this with, for example:\n\noldrepo$ mkdir ~/newrepo\noldrepo$ cp $(git ls-files) ~/newrepo\noldrepo$ cd ~/newrepo\nnewrepo$ git init\nnewrepo$ git add .\nnewrepo$ git commit -m \"Import clean version of my code\"\nnewrepo$ git fetch ~/oldrepo master:old-master\n\nIf you're on Git older than 1.6.5\ngit replace and replace refs were added in 1.6.5, so you'll have to use an older, somewhat less flexible mechanism known as grafts, which allow you to specify alternate parents for a given commit. Instead of the git replace command, run:\necho $(git rev-parse master) $(git rev-parse old-master) >> .git/info/grafts\n\nThis will make it look, locally, as if the master commit has the old-master commit as its parent, so you will see one more commit than you would with git replace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I add images to a PyPI readme (that works on GitHub)?\n\nIn my readme on GitHub I have several images that are present there in my project's source tree which I reference successfully with directives like\n.. image:: ./doc/source/_static/figs/moon_probe.png\n\nI would also like to have these images appear when this same readme is generated in PyPi.\nHow do I (a) ensure that images are present on PyPi for the readme to access and (b) formulate the .. image:: directive to access them?"}, {"role": "assistant", "content": "PyPI will not read your package distributions for the image. You have to use the image's external link, for example:\n.. image:: https://raw.githubusercontent.com/greyli/flask-share/master/images/demo.png\n\nIf you are using Markdown description, use this:\n![](https://raw.githubusercontent.com/greyli/flask-share/master/images/demo.png)\n\nBe sure to replace the URL in the above examples with your image URL, here I use the image hosted by GitHub, the real demo is on PyPI.\nP.S. To get the image's raw link on GitHub, right-click the image and choose Copy image address."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github show commits on a specific date\n\nI can show/search a list of commits on a specific branch on github like this\n\nhttps://github.com/username/repository/commits/branch_name\n\nI can also filter by author name like\n\nhttps://github.com/username/repository/commits/branch_name?author=author_name\n\nBut I am looking for a way that I can search my commits on a specific date or date range. I tried to find an existing answer but could not find. I also tried some queries like before=2016-07-27 or after=2016-07-27 but it did not work. Any help will be appreciated. Thanks in advance"}, {"role": "assistant", "content": "Per GitHub's REST API v3 documentation for list commits on a repository:\nGET /repos/:owner/:repo/commits\n\nincludes since and until parameters:\n+--------+---------+---------------------------------------------------------------+\n| Name   |  Type   |                          Description                          |\n+--------+---------+---------------------------------------------------------------+\n| since  | string  | Only commits after this date will be returned.                |\n|        |         | This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. |\n| until  | string  | Only commits before this date will be returned.               |\n|        |         | This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. |\n+--------+---------+---------------------------------------------------------------+\n\nFor example, to select commits on master in June 2018 on github/linguist: https://github.com/github/linguist/commits/master?since=2018-05-31&until=2018-07-01\nAccording to the above-linked docs, the branch should be included as a query parameter, e.g. https://github.com/github/linguist/commits?branch=master&since=2018-05-31&until=2018-07-01 but it seems to work fine to use the branch name as a path parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github commit message links\n\nIs it possible to create a commit message with link to other repository commit?\nEg. something like [Username\\Repo\\commitHash]\nUsage example: if some bc break would happen in some framework's commit, I'd like to link to this very commit in my own commits updating my code which uses this framework."}, {"role": "assistant", "content": "I was searching for something like this myself. Found it on:\nhttps://help.github.com/articles/autolinked-references-and-urls/#commit-shas\n<<username>>/<<repo>>@<<commitHash>>\n\nWithout the angle brackets of course :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge branch of forked repo into master branch of original repo?\n\nThere is an open source project on GitHub. Its original repo contains the most recent master branch. Now there is someone (not me) who has forked this repo, created a development branch from the master branch and added stuff to the development branch. What I would like to do now is to merge the development branch back to the master branch. Unfortunately, the master branch of the forked repo is not up-to-date. Also note that I'm not in possession of the two respective remote repos. \nAt the moment, I have cloned both the original repo and the forked repo to my local machine using git clone. How can I merge the development branch of the forked repo into the master branch of the original repo on my local machine (i.e. not on the remote server which is not possible anyway)?"}, {"role": "assistant", "content": "When using GitHub, you could do this using a Pull Request. Simply push your development branch to the forked remote repository and create the pull request as described in the linked article. The owner of the original repository can then add your repository as a new remote repository, fetch your changes and merge your development branch back into the master branch.\nIt is usually not necessary for your master branch to be fully up-to-date -- although it is extremly helpful, especially when merging the development branch.\nFirst, you should bring the master branch in the forked repository up-to-date:\n$ git remote add upstream ssh://path/to/original/repo\n$ git checkout master\n$ git fetch upstream # Instead of \"fetch\" & \"merge\", \"pull\" would also work\n$ git merge upstream/master \n\nThen either rebase or merge your development branch into the master branch:\n$ git checkout development\n$ git rebase master # OR \"git merge master\"\n\nResolve any conflicts, if necessary. When merging, use git commit to finish the merge, when rebasing use git commit && git rebase --continue.\nYou should now be able to git push to the origin of the forked repository, and create a pull request. Alternatively, if you're authorized to do so, you can also push directly to the original repository from your fork."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "On GitHub, can I fork just a wiki?\n\nIf I fork repository joe/foo, and it has a Wiki, I won't get the wiki. Right now I'm just interested in forking the wiki to add pages to it.\n\nIs that possible without forking the repository?\nIf not, is it possible at all?"}, {"role": "assistant", "content": "In June 2019, here's how I did that:\n\nFork a repo. The wiki is not forked automatically. So your fork will have empty wiki.\nCreate a wiki in the forked repo. Just create an empty Home page or whatever.\nClone the git repo of original wiki: git clone https://github.com/org-a/project-x.wiki.git\nAssuming your forked repo now sits in https://github.com/org-b/project-x, add the new remote to the wiki repo: git remote add fork https://github.com/org-b/project-x.wiki.git\nDo the force push to overwrite your wiki with the original git push -f fork master\n\nGreat. Now you have forked a repo and its wiki.\n(By the way, Github should do this automatically, right?)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to integrate a GitHub wiki into the main project\n\nI want keep all my source code and documentation in one single Git repository. I already have the GitHub pages integrated into my main project and now I want to do the same with the GitHub wiki.\nI know that GitHub wikis are plain Git repositories. My plan is to add the wiki as a remote to my main repository and keep everything in one place. However in the wiki repository everything is in the root directory and thus would clutter my main project.\nWhat is the best way to handle this?"}, {"role": "assistant", "content": "You want to add the wiki as a submodule. The same Wiki Git repository connected as a remote, but within a subdirectory with its own .git directory.\ngit submodule add git://github.com/you/proj.wiki\n\nIn the root of your main repository to add the wiki repository as a submodule in the wiki/ directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Upload images to GitHub from the browser\n\nI am using GitHub Pages, Jekyll, and Prose to manage a Website. Everything works fine, besides I cannot find a way to upload images. The Prose image uploader is not working probably as discussed in various tickets (for instance here). \nSince the Website is for a friend without any git or command line experience, I am looking for another option to upload images easily from the browser to GitHub. Are there any other options like this? \nI don't want to host the image on an external site."}, {"role": "assistant", "content": "It is possible to upload the images from the browser, without using Git.\nCreate a new GitHub issue and drag the image into the textbox.\nGitHub will upload the image and create a link like this one:\nhttps://f.cloud.github.com/assets/19977/1656110/a3f8b280-5b6d-11e3-818d-c06ab05bd613.jpg\nSource: GitHub's Phil Haack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are the main functionality differences between Github Wiki and Readme,\n\nWhat are the main functionality differences between Github Wiki and Readme,\nAsking those that have used both readme and wikis extensively. So that we can better decide which to use for the purpose of outputing verbal information. This would be based on your answer. Thanks.\nAs examples, some have used wikis --  \nhttp://github.com/mbostock/d3/wiki\nhttp://github.com/ParticleCore/Particle/wiki/Features\nand some people have used readmes --   \nhttp://gist.github.com/atcuno/3425484ac5cce5298932\nno better place to ask? -- meta.stackexchange.com/questions/157888/what-site-is-good-for-github-questions"}, {"role": "assistant", "content": "Talking about a project repository :\n\nReadme.md is the packaging\nwiki pages is made for development/contributors documentation\ngh-pages branch hosts user documentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Squash to only one \"proper\" commit for github pull request\n\nI have a repo on github which someone else (Bob, for the sake of argument) has issued a pull request for. His code's not perfect, so we go through a few rounds of markups. As I understand it, he commits and pushes to his pull-request for each set of marked up changes.\nSo my repository now looks like this:\nmaster: ---o A (Chowlett\n           |\n           |\npull-req:  o---o---o---o\n               B   C   D (all Bob)\n\nCommit SHAs and msgs are as follows:\nA:\n123456 Good commit <chowlett>\n\nB:\n777ccc Fix the widget bug <bob>\n\nC:\n888ddd Review markups <bob>\n\nD:\n999eee Further markups <bob>\n\nI'm now happy to accept this pull request; but I'd rather the pre-markup versions weren't in my repo. Can I achieve all of the following; and how?\n\nMerge B, C & D into my repo as a single commit\nGenerate the \"Merge pull request #99 into ...\" commit as well\nHave github automatically close the pull request"}, {"role": "assistant", "content": "Note that Bob doesn't have to squash his commits when he is making a GitHub PR.\nSince March 2016, you can leave that operation to the maintainer (you) accepting your PR.\nSee \"Squash your commits\" and its new documentation\n\nThis is a new option which lets you force commit squashing on all pull requests merged via the merge button."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge different issues on github\n\nSometimes the developers open new issues regarding the same subject. \nIt will be great to have the possibility to merge the issues.\nIf it is possible in github, how can I do it?\nIf not, what is the best way to link different issues?"}, {"role": "assistant", "content": "Currently, the simplest way to resolve this situation is to pick one of the issues to be the main one (whether the best documented, oldest, or whatever). Then, add a comment to the other issues linking to the main issue and close the duplicates.\nHere's an example.\nHere's another showing the \"Duplicate of #123\" syntax.\nAlternatively, you can leave the issues open and reference them all together in your commit messages: Example.\nI imagine that in the future, the team behind GitHub will make this process easier."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In GitHub URL's: what is the difference between a tree and a blob?\n\nI keep noticing this whenever I'm trying to add links to github files. You can add a link using blob:\nhttps://github.com/facebook/pop/blob/master/Podfile\nAnd the same doc comes up if you change blob to tree:\nhttps://github.com/facebook/pop/tree/master/Podfile\nWhat is the difference? Whenever I want to add a link for posterity in a doc, which one should I prefer?"}, {"role": "assistant", "content": "GitHub's website currently seems to be:\n\nUsing blob for files, and tree for directories, in URLs;\nRedirecting browsers which request file URLs containing tree to contain blob instead; and\nRedirecting browsers which request directory URLs containing blob to URLs containing tree instead.\n\nIt's possible that GitHub's website, at the time you asked the question, was only rewriting file URLs between tree and blob, instead of properly redirecting them. (Rewriting and redirecting URLs are activities of web servers.) If so, then the change wouldn't appear in your browser's address bar. But maybe you didn't mean that."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Changing source branch for PR on Github\n\nI accidentally created a pull request from the master-branch of my fork of a repo.\nWhile trying to rebase it I noticed that all of these changes were pushed into that pull request \u2014 due to the fact that you can simply Add more commits by pushing to the master branch on username/repo\n\nCan you change the source branch of a pull request after the pull request has been submitted?\n\nI see you can edit the base branch, but that's obviously not what I'm after."}, {"role": "assistant", "content": "AFAIK, you cannot change the source branch after creating a Pull Request. You have to create a new one instead.\nFor future reference, the established best practice is to create a new branch before making any commits. You should not commit directly to master, especially when contributing to team projects.\nSide note:\n\nyou can simply\u00a0Add more commits by pushing to the master branch on username/repo\n\nMore correctly, any changes to the target branch of a PR are automatically included in the PR."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Commenting a pull request in a GitHub action\n\nI am trying to get a regular comment inserted in a pull request from a GitHub action. I can't seem to get it right. Octokit, the underlying library, allows you to create reviewComments to PRs, but those refer to a commit and that's not what I want, I want a simple comment. I figured I can just use octokit.issues.createComment. However, that does not seem to work.\nHere's the code\nimport * as core from '@actions/core';\nconst {GitHub, context} = require('@actions/github')\nconst parse = require('parse-diff')\n\nasync function run() {\n    try {\n        // get information on everything\n        const token = core.getInput('github-token', {required: true})\n        const github = new GitHub(token, {} )\n        console.log( context )\n        const PR_number = context.payload.pull_request.number\n\n        // Check if the body contains required string\n        const bodyContains = core.getInput('bodyContains')\n\n        if ( context.payload.pull_request.body.indexOf( bodyContains) < 0  ) {\n            core.setFailed(\"The body of the PR does not contain \" + bodyContains);\n            console.log( \"Actor \" + context.actor + \" pr number \" PR_number)\n            const result = await github.issues.createComment({\n                owner: context.actor,\n                repo: context.payload.repository.full_name,\n                issue_number: PR_number,\n                body: \"We need to have the word \" + bodyContains + \" in the body of the pull request\"\n            });\n            console.log(result)\n       } // more irrelevant stuff below\n}}\n\nThis simply seems to retur \"Not found\". I can't seem to be able to find out if it's a type problem, or something different. Theoretically, owner, repo, and issue number, as well as body, should be right, and it's printed correctly. Any help will be appreciated. This is probably a more general question in the realm of GitHub API, with GitHub actions being simply the context, so I might be wrong there."}, {"role": "assistant", "content": "A canonical way is using the official Github Script actions. Don't get confused, issues and PRs are the same for the GitHub API.\nEDIT 2023: (V6)\nV6 is out, here's how to use it. No breaking changes, just the script version has changed.\non:\n  # Trigger the workflow on push or pull request\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/github-script@v6\n        with:\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: '\ud83d\udc4b Thanks for reporting!'\n            })\n\n\n\nEDIT 2021: (V5)\nAdapting to GH's newer versions, one has to reference the rest client directly. See note as of writing.\non:\n  # Trigger the workflow on push or pull request\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/github-script@v5\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: '\ud83d\udc4b Thanks for reporting!'\n            })\n\n\n2020: (V3)\non:\n  # Trigger the workflow on push or pull request\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/github-script@v3\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            github.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: '\ud83d\udc4b Thanks for reporting!'\n            })\n\nSeen on: https://github.com/actions/github-script#comment-on-an-issue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unable to connect to git remote repository\n\nAfter performing git push -u origin master, I got:\nfatal: unable to access 'https://github.com/xxxx/xxxx.git': Failed to connect to 127.0.0.1 port 8087: Connection refused\n\nSame error occurred, when I tried to clone other repositories, too.\nThe Port 8087 doesn't seem to be busy. What could go wrong?\nEdit:\nwhen I do clone from git:// instead of https://, it works just fine."}, {"role": "assistant", "content": "This happens because a proxy is configured in git.\nSince it's https proxy (and not http) git config http.proxy and git config --global http.proxy can't help.\n\nTake a look at your git configuration\ngit config --global -l\n\nIf you have nothing related to https proxy like https_proxy=... the problem is not here.\nIf you have something related to https proxy then remove it from the file ~/.gitconfig and try again\n\nIf it still doesn't work, unset environment variables\nCheck your environment variables :\nenv|grep -i proxy  \n\nYou should have one or several lines with https_proxy=...\nUnset one by one with :\nunset https_proxy (or HTTPS_PROXY depending of the name of the variable)\n\nCheck environment variables again\nenv|grep -i proxy\n\nIf it shows nothing you should be good.\nNote: This solution can applies to http and https proxy problems. just the variables name changes from https to http"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing code from one branch of a repo to another branch of another repo\n\nThere is a repo say ABC/A. I had forked this repo to my own github say ME/A. I was asked to create a branch on ME/A say x (originally there were develop and master). I had to write some code, so I cloned ABC/A and worked on its develop branch. But now when I have to push the code, I cannot push it to ABC/A as i dont have rights to do so. I have to push the code to ME/A. The problem is, I worked on develop branch for ABC/A but I have to push the code to ME/A x branch. Is it possible to push code in such a way?"}, {"role": "assistant", "content": "Yes, you can push any local branch to any remote branch. The syntax is\ngit push <remote name, e.g. origin> <local branch name>:<remote branch name>\n\nIf your current branch (the one you want to push) is called develop, the command would be\ngit push ME develop:x"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change GitHub repository in IDEA Intellij?\n\nI've lost access to my previous account on GitHub, so created new one and now, when I am trying to share my project ( which was shared on GitHub before), I get this message:\nCan't get repository info: {myRepositoryName}\n404: Not Found - Not Found\n\nHow to tell IDEA Intellij that I want to share project on different repository? thanks"}, {"role": "assistant", "content": "Update or add Git repository URL in Intellij\nVCS - > Git - > Remotes\nPopup will open with all repository URLs configured, you can simply edit them or add new one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to run stash in Github Desktop?\n\nHow do you run stash in GitHub Desktop on Windows?\nThe feature is available in Sourcetree but I'm unable to find it in GitHub Desktop."}, {"role": "assistant", "content": "GitHub Desktop for Windows doesn't support stash. The only stash-like feature it has is that it will allow you to switch branches if you have uncommited changes. Source\nUpdate: GitHub Desktop V2.0.0 now supports stash (Issue 6107). Now when switching branches, you'll be prompted to either leave your changes on the current branch (stash) or bring your changes over to the other branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I handle images in a Git repo?\n\nI have inherited a medium sized iOS project - ~30,000 lines of code - that has an insane number of image assets. Of course we use Git/Github to scm. Currently the images are included in the directory tree and thus gets ingested into the repo, bloating the heck out of it and generally making development a big headache. \nWe have 4 devs on the project, some virtual. It occurs to me to move the images to Dropbox, refer to them from the iOS project and keep things ship shape.\nDoes anyone have a comment on this idea? What do you do do deal with image/video/audio files in a Git scm setup?"}, {"role": "assistant", "content": "I'd be pretty nervous about that, actually; what if you want to update an image, then change your mind? Or what if you need to build a maintenance release with old images?\nIf this is really a problem -- and I've never seen this actually be a problem in practice, but I'll take your word for it -- why not just use one repo for the images, another for everything else? You can then just be lazy about syncing the image one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create a new file in git bash\n\nI've got Git for Windows running, I'm not sure if it's supposed to function as a text editor though?\nI think I installed it with the Vim editor, but in a Git Bash shell how do I create a file, such as webpage.html?\n$ git add webpage.html\n\ncomes back as\nfatal: pathspec 'webpage.html' did not match any files\n\nbecause it tries to track a non-existing file.\nI understand I can create a new file on the github.com interface, that's easy enough, I'm wondering if I can create a new file (like echo in cmd) and whether this file will actually be blank (echo in cmd creates non-blank files) and how I can write into that file from the git bash shell?\nIf not, I'm guessing I should just create a new file in windows explorer? Is that the norm...?\nEdit\nWow, I was new to all this when I asked the above. No, Git Bash isn't a text editor, it's a Windows version of the git facility on Unix, and only handles the file versioning. git add, git rm, and other git commands just handle how the version control file manager handles the files and folders, and the only things it changes as a result are in a hidden folder named .git. Sorry if this has confused anyone.\nI was confused at the time because, as the name suggests, Git Bash has bash shell commands shipped with it, not just git - e.g. ls (list files), mkdir (make new folder), and -- what I was looking for -- touch (make a new file or update timestamp on existing file), and echo (print text to the command line, or direct that text to a file). \nI could have made my new file webpage.html with:\ntouch webpage.html\n\nThen written to it with:\necho \"<!DOCTYPE html>\" > webpage.html\n\nThen appended lines to it with:\necho \"<html\" >> webpage.html\necho \"<head>\" >> webpage.html\n\nand so on - but I don't think there's any text editor (according to this list of commands). See this thread for details of setting up a text editor with Git on Windows."}, {"role": "assistant", "content": "If you are using the Git Bash shell, you can use the following trick:\n> webpage.html\n\nThis is actually the same as:\necho \"\" > webpage.html\n\nThen, you can use git add webpage.html to stage the file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Merge branch 'master'\n\nBeen trying out Git and Github after many years of svn use. I seem to have the basics down, but one item is confusing me.\n\nUserA makes a change to FileA and pushes to the remote server\n(GitHub) \nUserB makes a change to FileB. He first pulls from remote\nserver, and then pushes his change to FileB to the remote server\nGitHub commit history shows the push from UserA and the push from UserB\nHowever, there is an additional entry in the commit history from UserB called 'Merge branch 'master' of https://github.com/xxx/yyy'. Viewing the diff in Github shows this to be an exact replica of the Changes that UserA made to FileA\n\nWhy is this duplicate shown - both the push from UserA to FileA and the Merge branch master entries are identical...the second seems superfluous to me."}, {"role": "assistant", "content": "Each version (\"commit\") stored in git forms part of a graph, and it's frequently helpful to think about what you're doing in git in terms of that graph.\nWhen UserA begins, let's say that there had only been two commits created, which we'll call P and Q:\nP--Q (master)\n\nHe then modifies FileA, stages that change and creates a commit that represents the new state of the source code - let's say that commit is called R.  This has a single parent, which is the commit Q:\nP--Q--R (master)\n\nAfter successfully pushing, the commit graph for the GitHub repository looks the same.\nUserB started with the same history:\nP--Q (master)\n\n... but created a different commit, say called S, which has his modified version of FileB:\nP--Q--S (master)\n\nUserB tries to push that to GitHub, but the push is refused - unless you \"force\" the push, you're not allowed to update a remote branch unless the version you're pushing includes all of the history in that remote branch.  So, UserB pulls from GitHub.  A pull really consists of two steps, fetching and merging.  The fetch updates origin/master, which is like a cache of the state of the remote branch master from the remote origin.  (This is an example of a \"remote-tracking branch\".)\nP--Q--S (master)\n    \\\n      R (origin/master)\n\nThe history in this graph has diverged, so the merge tries to unify those two histories by creating a merge commit (say M) which has both S and R as parents, and hopefully represents the changes from both branches:\nP--Q--S--M (master)\n    \\   /\n     \\ /\n      R (origin/master)\n\nWhen GitHub shows you a diff that represents the changes introduced by the commit, it's simple in the case of a commit with one parent - it can just do a diff from that version.  However, in the case of a commit such as M, with more than one parent, it has to choose a parent to show the diff against.  That explains why the diff shown for the merge commit M might appear to be the same as that shown for one of S or R.  Commits in git are defined by the exact state of the source tree, not the changes that got the tree into that state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "List all GitHub repos for an organization - INCLUDING those in teams\n\nHere's my query to the GitHub API\ncurl -i -u {user} https://api.github.com/orgs/{org}/repos?type=all\n\nBut this does not list all repos for this organization that I have access to. Specifically, it does not list repos in the organization that are part of a team that I am a member of.\nIf I were to query\ncurl -i -u {user} https://api.github.com/teams/{teamid}/repos\n\nI would see the missing repos. If I were to navigate to github.com, I would see both private organization repos and my team repos next to each other on the same page. Is there a way to get all of these repos in the same API query?"}, {"role": "assistant", "content": "You can use the below command\ngh repo list {organization-name}\n\nbefore this login with below command\ngh auth login\n\ngithub.com/cli/cli"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "E325: ATTENTION Found a swap file by the name \".git/.COMMIT_EDITMSG.swp\"\n\nI've been working with a team for almost a year now. It's always been easy to use github/git to pull and push changes using:\ngit pull\ngit add .\ngit commit -a -m \"my work desc\"\ngit push\n\nThat has always worked fine until recently. Now no matter what, if someone else has pushed, whenever I try to pull I get this message:\nE325: ATTENTION\nFound a swap file by the name \".git/.COMMIT_EDITMSG.swp\"\n          owned by: X   dated: Wed Jan 23 16:01:06 2013\n         file name: ~X/Sites/mysite/.git/COMMIT_EDITMSG\n          modified: no\n         user name: X   host name: X-2.local\n        process ID: 77109\nWhile opening file \".git/COMMIT_EDITMSG\"\n             dated: Thu Jan 24 16:22:48 2013\n      NEWER than swap file!\n\n(1) Another program may be editing the same file.\n    If this is the case, be careful not to end up with two\n    different instances of the same file when making changes.\n    Quit, or continue with caution.\n\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r .git/COMMIT_EDITMSG\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".git/.COMMIT_EDITMSG.swp\"\n    to avoid this message.\n\nSwap file \".git/.COMMIT_EDITMSG.swp\" already exists!\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:\n\nThis happens every time w/o fail. I can eventually get past this by inserting a message, saving and recommitting but it's a pain. Any idea why this keeps happening and what can be done?\nThanks"}, {"role": "assistant", "content": "Unless you need .git/.COMMIT_EDITMSG.swp for some other purpose, you can use:\ngit rm .git/.COMMIT_EDITMSG.swp\n\nto remove the file from the repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git and Trac (or similar)\n\nIn the past I have really enjoyed using Trac with subversion repositories hosted on some of my own servers.  The integrated ticketing and online code browsing is very convenient.\nI have used github for some of my public projects but I don't have the money to shell out for an extra service, espcially when I am already paying for remote VPS hosting.\nDoes anyone know of or have any experience setting up something like Trac with git version control?  Specifically, I can already push to a remote server but I would like some web interface that allows me (and people working with me) to see that commits and current state of the codebase online without making the project public.  I am aware of GitPlugin but have not been able to get it up and running successfully.  Any other suggestions?\nIntegrated ticketing (and wiki) is desired but not an absolute necessity.\nEdit:\nAfter playing around with GitPlugin and Trac a bit more I have been able to get it up and running.  The main problem was that I needed to explicitly enable the plugin for the trac environment by doing something like this in trac.ini:\n[components]\n# for version 0.10\ngitplugin.* = enabled\n# for version 0.11\ntracext.git.* = enabled \n\nI may also try out Redmine and CGit as this seem like other pieces of software that do what I am looking for.  Any other suggestions are welcome."}, {"role": "assistant", "content": "You should take a look at Redmine (http://www.redmine.org/). It has all of the features you mention and more. You can host it on your own vps (I do)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Copilot - please login to github and try again\n\nFor Intellij plugin, GitHub Copilot shows error please login to github and try again.\nI have already done the following:\n\nAuthenticated GitHub Copilot with my GitHub user and password.\nAllowed GitHub Copilot in GitHub account profile.\nRestarted the IDE multiple times after the plugin installation.\nI have license for Github Copilot.\n\nWhat should I do to resolve this error?"}, {"role": "assistant", "content": "I have to restart my IDE, then go to tools->GitHub copilot:\n1- restart IDE\n2- got to \"tools\" -> \"GitHub copilot\" -> \"login to GitHub\"\n3- it will show you a popup with code, click on copy and open to add and trust your device."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Where exactly is the \"working directory\"?\n\nI am going through some Git tutorials. The concept of a \"working directory\" keeps being mentioned, however, none of the tutorials or documents I read points out where or what this \"working directory\" is.\nI have thought that it was actually the .git's parent directory, a.k.a the directory I run git init in. But the video tutorial I am watching talks about the state of nothing to commit and \"working directory clean\":\n\nIn fact you can actually make a copy of the repository, and make that\n  copy so that it does not have a working directory, this is actually\n  called the bare clone. This is actually what GitHub uses.\n\nIf my understanding of the \"working directory\" is correct, how can a repository not have a \"working directory\"? And what does it mean, when it says that GitHub uses a \"bare clone\"?"}, {"role": "assistant", "content": "This should hopefully clear things up for us:\n\nWhat is the difference between a repository created using the git init\n  command and the git init --bare command?\nRepositories created with the git init command are called working\n  directories. In the top level folder of the repository you will find\n  two things:\nA .git subfolder with all the git related revision history of your repo\nA working tree, or checked out copies of your project files.\n\nRepositories created with git init --bare are called bare repos. They\n  are structured a bit differently from working directories. First off,\n  they contain no working or checked out copy of your source files. And\n  second, bare repos store git revision history of your repo in the root\n  folder of your repository instead of in a .git subfolder. Note\u2026 bare\n  repositories are customarily given a .git extension.\n\nTaken from John Saints - What is a bare git repository?\nA bare git clone does not contain a working directory of checked out code, in other words.\nThink of it as just the .git directory (the Git database) without anything else."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the use of \"actions/checkout\" in GitHub Actions?\n\nI saw a lot of uses of :\njobs:\n  myjob:\n    steps:\n      - name: checkout\n        uses: \"actions/checkout@something\"\n      - ...\n\nBut i can not find what is the purpose of the line :\nuses : \"actions/checkout@something\"\n\nIs it similar to this ?\n run: git checkout something"}, {"role": "assistant", "content": "For this line: uses : \"actions/checkout@something\", it will use the actions/checkout github action (source here)  with the ref something. This ref only refers to the github action version (nothing to do with your repo)\nThe uses statement refers to a github action that is being used in this step. From github documentation for jobs.<job_id>.steps[*].uses:\n\nSelects an action to run as part of a step\nin your job. An action is a reusable unit of code. You can use an\naction defined in the same repository as the workflow, a public\nrepository, or in a published Docker container image.\n\nFrom actions/checkout readme :\n\nThis action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.\n\nBy default it checks out only one commit. My understanding is that it's doing something similar to:\ngit fetch --depth 1 origin $GITHUB_REF\n\nThis action also persists an auth token in git config. This way, your workflow can run authenticated git commands\nBy default, it clones your current repository ({{ github.repository }}) but you can also use this action to clone a different repository, and specify additionnal parameters like token, branch, path etc...\nAn example with additionnal input parameters: check out all git history by setting fetch-depth to 0 (default is 1), see usage doc:\n- uses: actions/checkout@v2\n  with:\n    fetch-depth: 0"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do hotfixes with GitHub Pull Requests\n\nCaveat: I am fairly new to both git and GitHub.\nSo, in my current setup, my team uses git flow Hotfixes (usually started and finished by a graphical tool such as GitKraken or IntelliJ) to make changes that have to be merged into two branches and pushed upstream in both. So for example the flow would be:\n\nPull latest from master\nStart hotfix\nCommit changes\nMerge hotfix branch into both master and develop and push both upstream\n\nWe're now looking at moving our code into GitHub and would like to start using Pull Requests, for a couple of reasons:\n\nCI hooks to run tests and stuff\na place to put code-specific comments not directly related to the underlying \"issue\"\navoiding the need for everyone to constantly be pulling the latest master/develop to their local machine so that they can merge changes\n\nBut in the case of Hotfixes, I'm not sure what to do because I'm merging into two branches but it really is one \"action\" so manually creating two pull requests seems weird, particularly since step 4) in our current flow is a single click.\nIs there a smart way of handling this? My ideal case would be that pushing the Merge button on the Pull Request would just merge into both, but that doesn't seem to be an available option."}, {"role": "assistant", "content": "As you mentioned, a Pull Request has only one target branch, so you won't be able to push the hotfix to both master and develop by merging one Pull Request.\nI'm also surprised you mention your step #4 - merging the hotfix branch to both master and develop and push upstream - is one action. While there's a high chance the merge from hotfix to master won't run into merge conflicts, I can't say the same for the merge from hotfix to develop since it could have been worked on since the last deployment to production.\nMy recommendation would then be the following:\n\nCreate one PR from hotfix to master and have someone review it to validate the fix\nOnce it's merged into master, create another PR from hotfix to develop and see if you run into merge conflicts\n\n\nIf that's the case, resolve the merge conflicts so the PR ends up in a state to be merged, and have someone review the PR\nIf there's no merge conflicts, then have someone review the PR\n\n\n\nAn alternative solution, if you really want to go down the automated path, would be to leverage both GitHub webhooks and API.\nThe webhook would allow you to be notified when a PR is merged. You could inspect the payload to make sure that the base branch starts with hotfix/ and the target branch is master. You could then react to that event by using the API to create a new PR from the same hotfix branch to develop.\nIt will involve some development, and the effort might not be worth since creating a PR via the UI is still quite easy and quick."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find the branch from commit id\n\nSo, I am trying to find branch name in which a given commit was made. (c853d8cf3ae34dae9866b874b96c6529515d7e90)\nI have the parent id and commit id referenced on the git issue.\nHow can I find that given commit id was pushed in 'x' branch?"}, {"role": "assistant", "content": "On GitHub specifically, you now can see the branch a given commit is part of.\nThe blog post \"Branch and Tag Labels For Commit Pages\" details:\n\nIf the commit is not on the default branch, the indicator will show the branches which contain the commit.\nIf the commit is part of an unmerged pull request, a link will be shown.\n\n\n\nOnce the commit makes it to the default branch, any tags that contain the commit will be shown, and the default branch will be the only branch listed.\n\n\n\nOriginal answer\nYou can list those branches:\ngit branch --contains <commit>\n\n# in your case\ngit branch --contains <commit> | grep x\n\nMore details in \"Git: Finding what branch a commit came from\".\nDon't forget that a commit can be part of several branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add Github remote to GitKraken\n\nI'm using GitKraken (v. 1.4.1) as my Git managing tool. And now I want to use Github as a remote to back up my repos. But when I click on add remote and try to add a Github repo, it just says 'no match'\n\nDoes anybody know why this happens? (BTW: I'm using Windows 10, just in case that's relevant)"}, {"role": "assistant", "content": "Here's how it seems to work. If you have a local repo and want to connect it to github, you would use the \"URL\" option and put in the github address to set that as the remote repo for your local repo. The first time you do a pull or push on a local branch, it will ask which remote branch you want to use and that becomes the remote location to which you will pushing and pulling changes.\nThe GitHub.com option only comes into play after you have set the remote repo using the \"URL\" option. If there are multiple collaborators on a project and someone has created one or more forks of the project, then instead of \"No Match\" under the GitHub.com, you would see a list of all the forks of the project on which you are a collaborator.\nYou could then add the forked repos as the 2nd, 3rd, etc. remotes, and any activity on those forks would be displayed to you on the commit graph. This allows people to see what's going on in the forks, and you can drag and drop from the forked parts of the graph to create pull requests to the repo you first set up using \"URL\".\nIt's a nice feature, but the remote dialog could be labelled more clearly so that people would know the GitHub.com option was for adding forked repos to the commit graph display.\nYou must always use the \"URL\" option to add the 1st remote, and then the GitHub.com option only becomes available after that if there are forks to which you have access."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Images in github pages and relative links\n\nI created a user's github page.\nNow, suppose I have an Image file at the root of the repo located as Images/Emoticons/Cool.png \nI try to insert that image in my main Index.html file.\nI write -\n- <img src=\"\\images\\emoticons\\cool.png\">  and nothing shows up online and offline\n- <img src=\"images\\emoticons\\cool.png\"> and nothing shows up online but I can see the image offline\n- <img src=\"..\\images\\emoticons\\cool.png\"> and nothing shows up online and offline  \nWhat should be done?"}, {"role": "assistant", "content": "As the site is being served by Linux servers, the path is case sensitive.\nIn order to make this work, replace emoticons with Emoticons in the provided url.\n\nAlso, in a URL, replace the backslash (\\) by a forward slash (/).\nThe following HTML code should properly display the image\n<img src=\"images/Emoticons/cool.png\" alt=\"hi\" class=\"inline\"/>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install Github for Windows offline?\n\nAs the question says how to install Github for Windows without an internet connection? \nIf it is not possible then is there some alternative client with the following features:\n\nSupport for proxy\nOffline installer\n\nI found smartgit which has an offline installer but it seems it doesn't have proxy support.\nIf there is no such client then what can be done to extend the functionality of github for windows or some other client? I mean is there a way to use some API to extend it? Any links for that would be helpful."}, {"role": "assistant", "content": "This is the answer I received from the support today (2015-06-30):\n\nUnfortunately we do not have a standalone installer at this time.\n  GitHub for Windows makes use of Microsoft's ClickOnce technology for\n  installation and updates.\nWe are currently working on an open source replacement for ClickOnce\n  here: \nhttps://github.com/squirrel/squirrel.windows\nOnce that technology is complete and ready for use, we hope to switch\n  GitHub for Windows to use that. It would allow for a standalone\n  installer.\nIn the meantime, you can find a list of alternate GUIs available\n  here:\nhttp://git-scm.com/downloads/guis"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - Hiding the Public Activity/My Actions [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have a free account on GitHub. I have noted that there is not any obvious way to switch off or to control the 'Public Activity'. Therefore, every time I commit or do something even trivial it shows up in my Actions and is available as an RSS feed.  \nIs there a way to control or to switch off the public activity option?"}, {"role": "assistant", "content": "Sept 2022: confirmed:\n\nPrivate profiles are now generally available (Sep. 2022)\nPrivate profiles (now generally available) enables users to turn their GitHub profile \"private\", which gives users control over features that share user data across the GitHub platform.\nWhen a profile is private, the following content is hidden from the profile page:\n\nAchievements and highlights\nActivity overview and activity feed\nContribution graph\nFollower and following counts\nFollow and Sponsor buttons\nOrganization memberships\nStars, projects, packages, and sponsoring tabs\n\nTo enable this setting, visit https://github.com/settings/profile.\n\nLearn more about private profiles.\nAs we continue to release new privacy control features, please share your feedback.\n\n\nUpdate Apr. 2022, eleven years later: Yes!\n\nPrivate Profiles\nUsers now have the ability to turn their GitHub profile \u201cprivate\u201d, which gives users controls over features that share user data across the GitHub platform.\nTo enable this setting, visit https://github.com/settings/profile.\n\nPrivate profiles are in public beta.\n\n\n2011: I don't think there is a way to customize what your public activity shows. The social coding network that GitHub represents is founded on that very same \"public\" activity. The only way to restrict it is by paying for private repositories.\n\nNote: since 2011, GitHub was acquired by Microsoft (June 2018), and the current (2021) pricing include unlimited private repositories(!)\nSo using private repositories is a good option, considering you can now easily change a repository's visibility."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Issue with SourceTree while cloning a GitHub repository\n\nI know that similar questions have already been posted here. However, I think my scenario is a bit different. Here is what I have.\nI downloaded and installed the latest official version of the SourceTree software. Also, I have a GitHub account with permissions to clone and push the repository. In order to manage a local copy, I need to clone the online version. Here are the steps that I take:\n\nStart the SourceTree and navigate to File -> Clone / New ...\n\nIn the opened window I paste the HTTPS clone URL. I copied it from the browser after I logged in to my GitHub account so the link is correct.\n\nThe nest step is to specify a local folder where the repository will be copied. However, when I click to enter Destination Path, the window shows an error:\nThis is not a valid source path / URL\n\nClicking the error may give the following details:\nremote: Repository not found.\nfatal: repository 'https://github.com/org/repo.git/' not found\nremote: Repository not found.\nfatal: repository 'https://github.com/org/repo.git/' not found\n\nOr the details may be empty. SourceTree does not tell me the reason for the error or anything else.\n\n\nI tried to re-install SourceTree but the error still exists. I asked the Administration of the GitHub repository for any other permissions but my account has all of them. I am able to push changes to the online repository using the Terminal console but I would like to use a UI (that SourceTree provides) to manage and compare changes in the code.\nOne think I did not try is to clone the repository using another GtHub account. However, I don't want to do that because I need to commit any changes to the repository on my behalf.\nDoes anybody know how can this error be fixed or worked around?"}, {"role": "assistant", "content": "Lastly on Mac I went to\nSourcetree->Preferences->Git->Git version->Use System Git\nand it works... puf!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "OpenSSL SSL_connect: Connection was reset in connection to github.com:443 while try to git push\n\nfatal: unable to access 'https://github.com/XXX/XXXXX.git/': OpenSSL SSL_connect: Connection was reset in connection to github.com:443\n\nSuddenly I'm getting above error while I try to git pull, git push, or clone the repo."}, {"role": "assistant", "content": "I also encountered a similar situation; that's when I came across an answer on Code Grepper by Shibbir Ahmed, where he provided this:\ngit config --global --unset-all remote.origin.proxy\nThat solved the issue for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git does not recognize exe file\n\nI'd like to upload NuGet.exe to github but all exe files are not listed to my local repository.\nI did upload NuGet.exe file about two weeks ago at another project repo, but now I cannot upload any exe file at all. There is no global .gitignore that I specially defined.\nbelow code is my .gitignore file.\nwhat am I missing?\n# Build Folders (you can keep bin if you'd like, to store dlls and pdbs)\n[Bb]in/\n[Oo]bj/\n\n# mstest test results\nTestResults\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.log\n*.vspscc\n*.vssscc\n.builds\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder \n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\npackages\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n[Tt]est[Rr]esult*\n*.Cache\nClientBin\n[Ss]tyle[Cc]op.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n\n# Windows-specific files\nThumbs.db\ndesktop.ini\n# Mac-specific things (thanks to Michael Aaron Safyan)\n.DS_Store\n\n-- EDIT --\nsame files under .nuget/ directory .config and .targets files are well treated. I can check git ls-files --others -i --exclude-standard gives NuGet.exe is ignored, but I don't know which rule makes it."}, {"role": "assistant", "content": "First, you can check if a file is locally ignored ion your repo with git check-ignore:\ngit check-ignore -v -- yourFile\n\nSecond, you can force to add that file (bypassing any ignore rule):\ngit add -f yourFile"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Force my local master to be origin/master\n\nI've let master and origin/master get stuck in the sidelines, and am no longer interested in the changes on that branch.\nI followed these instructions to get my local master pointing to the right place\nMake the current git branch a master branch\n git checkout better_branch\n git merge --strategy=ours master    # keep the content of this branch, but record a merge\n git checkout master\n git merge better_branch             # fast-forward master up to the merge\n\nwhich worked fine except git status gives\nC:\\data\\localprojects\\Beko2011Azure [master]> git status\n\n# On branch master\n# Your branch and 'origin/master' have diverged,\n# and have 395 and 2 different commits each, respectively.\n#\nnothing to commit, working directory clean\n\nso how do I now persuade origin/master (github) to reflect my master. Anything orphaned on origin/master can be safely abandoned."}, {"role": "assistant", "content": "To have origin/master the same as master:\ngit push -f origin master:master\n\nDiscussion on the parameters:  \n\n-f is the force flag. Normally, some checks are being applied before it's allowed to push to a branch. The -f flag turns off all checks.\norigin is the name of the remote where to push (you could have several remotes in one repo)\nmaster:master means: push my local branch master to the remote branch master. The general form is localbranch:remotebranch. Knowing this is especially handy when you want to delete a branch on the remote: in that case, you push an empty local branch to the remote, thus deleting it: git push origin :remote_branch_to_be_deleted\n\nA more elaborate description of the parameters could be found with man git-push\n\nOpposite direction: If you want to throw away all your changes on master and want to have it exactly the same as origin/master:\ngit checkout master\ngit reset --hard origin/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View rendered output of a gist?\n\nI'm sure I'm being dim, but is it possible to view the rendered output of a gist?\nThis is the gist I'm interested in: https://gist.github.com/844752/420cc52eb4910fe8fa2bec9e13daab18b6230503\nWhere can I see how it actually renders?"}, {"role": "assistant", "content": "rawgit.com provides this service. To use rawgit.com, simply replace the domain of the raw view of the gist or github file you want to view with rawgit.com. For example:\nhttps://gist.githubusercontent.com/mbostock/844752/raw/index.html\n\nto\nhttps://rawgit.com/mbostock/844752/raw/index.html\n\nor\nhttps://raw.githubusercontent.com/caffinatedmonkey/Hello-World-PSP/master/main.cpp\n\nto\nhttps://rawgit.com/caffinatedmonkey/Hello-World-PSP/master/main.cpp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: change origin of cloned submodule\n\nI created a project submodule and put it up on Github.\nI created another project, supermodule, and then did this:\ncd supermodule\ngit init\nmkdir lib\ngit clone git://github.com/tandu/submodule lib/submodule\ngit submodule add ./lib/submodule lib/submodule\n\nThis worked fine, but on the website, it can't find the link to the submodule when viewing the files (in fact it just says \"Loading Commit data\" forever).  The submodule folder itself has the correct origin.\nApparently, what I should have done was\n...\nmkdir lib\ngit submodule add git://github.com/tandu/submodule lib\n\n...but it's too late for that now.  How can I have the submodule in this project correctly point to origin?"}, {"role": "assistant", "content": "This apparently is very much dependent on the version of git you are using.\n\nIf present, change the url entry in the [submodule \"<dirname>\"] section of the .gitmodules file.\nIf present, change the url entry in the [submodule \"<dirname>\"] section of the .git/config file.\nChange the url in the configuration of the submodule itself. The location of the config file is version dependent. Older versions had it in <dirname>/.git/config, newer ones in .git/modules/<dirname>/config. However, you can always use below command:\n\ncd <dirname>\ngit config remote.origin.url <new_url>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to not run github action for readme updates?\n\nI have the following action on Github actions that automatically packs and deploy a package to nuget.org every time a PR gets merged into master.\nname: Nuget Deploy\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 3.1.101\n    - name: Generate Nuget package\n      run: dotnet pack\n      working-directory: DateOverride\n    - name: Deploy to nuget.org\n      run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_DEPLOY_KEY }} -s https://api.nuget.org/v3/index.json\n      working-directory: DateOverride/DateOverride/bin/Debug\n\nBut I would like that it was not run if my update is only a README.md update, is it possible to do so?"}, {"role": "assistant", "content": "I'd think the paths-ignore setting should help:\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/README.md'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Forking a sub directory of a repository on GitHub and making it part of my own repo\n\nApologies, I am very new to Git and GitHub, I've read through a few things but I'm not sure if what I'm trying to do is entirely possible.\nBasically I want to fork the Confluence Skin used on XBMC and modify various elements located here:\nhttps://github.com/xbmc/xbmc/tree/master/addons/skin.confluence\nHowever I don't want to fork the entire XBMC repository, so a simple fork action won't do.\nHere are my general requirements:\n\nI would like to take the contents of the skin.confluence folder and put it into a repository on my own GitHub account\nI need to be able to keep it linked within the original XBMC repo to receive upstream commits, as my modifications will generally be theme based, rather than functionality.\n\nThanks to the response posted by tbekolay, I have been able to do a subtree split to take only the skin.confluence part of repo and essentially create a branch, however I am unsure on how to keep it linked with the original XBMC repo while being pushed to my own repo with my modifications."}, {"role": "assistant", "content": "This is mostly possible with git, though it is not a typical use case, so there may be some rough edges as you do this (especially if you are new to git).\nThe tool that we'll use for this job is git subtree.\nSetting up a repository\nStart by cloning the whole XBMC repository.\ngit clone https://github.com/xbmc/xbmc.git\ncd xbmc\n\nWe start on the master branch by default. We want to make our own master branch, so let's rename master to upstream-master.\ngit branch -m upstream-master\n\nNow use git subtree split to only include the part that you want. We'll make the split off part a new branch called upstream-skin.\ngit subtree split --prefix=addons/skin.confluence -b upstream-skin\ngit checkout upstream-skin\n\nThis gives you a new upstream-skin branch that only contains the contents of addons/skin.confluence, and with a filtered history that contains only the commits that modified files in addons/skin.confluence.\nNow, let's set up our remotes. Since you cloned xbmc/xbmc.git, the origin remote will point there. Let's rename that to upstream.\ngit remote rename origin upstream\n\nMake a repository on Github to contain your modifications to addons/skin.confluence. As an example, I'll use tbekolay/xbmc-skin, but replace this with your own repo. Add this repo as a remote, and push your upstream-skin branch to it.\ngit remote add origin https://github.com/tbekolay/xbmc-skin.git\ngit fetch origin\ngit push -u origin upstream-skin\n\nFinally, we'll make a new branch called master that will contain your changes.\ngit checkout -b master\ngit push -u origin master\n\nYou now have a \"fork\" of the addons/skin.confluence subdirectory.\nMaking changes to your repositories\nWhen you're dealing with your own local and remote repositories, you can use normal git commands. Make sure to do this on the master branch (or some other branch, if you'd like) and not the upstream-skin branch, which should only ever contain commits from the upstream project.\ngit checkout master\necho \"My XBMC Skin\" > README\ngit add README\ngit commit -m \"Added README\"\ngit push\n\nReceiving upstream commits\nWhen you're dealing with the upstream repository, you will have to use a mix of git and git subtree commands. To get new filtered commits, we need to do it in three stages.\nIn the first stage, we'll update upstream-master to the current version of the XBMC repository.\ngit checkout upstream-master\ngit pull\n\nThis should pull down new commits, if there are any.\nNext, we will update upstream-skin with the new filtered version of the commits. Since git subtree ensures that commit hashes will be the same, this should be a clean process. Note that you want to run these commands while still on the upstream-master branch.\ngit subtree split --prefix=addons/skin.confluence \\\n  --onto upstream-skin -b upstream-skin\n\nWith upstream-skin now updated, you can update your master branch as you see fit (either by merging or rebasing).\ngit checkout master\ngit rebase upstream-skin\n\n\nNote that the XBMC repository is gigantic, and the git subtree commands will take quite a bit of time to filter through all that history -- and since you're regenerating the split subtree each time you interact with the remote repository, it's quite an expensive operation. I'm not sure if this can be sped up.\nThis blog post goes into some more detail on the commands above. Also see the git-subtree docs for even more detail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Command to get/clone a fetch/pull/read -only copy of a git repository?\n\nHere's a git repository on github:\n\ngit://github.com/Fudge/gltail.git\n\nWhat's the simplest way to check out a read-only copy using the git command line tool?\nupdate:  Here's a suggestion to the githubbers:  Do something similar to google code, which automatically displays a message such as:\nUse this command to anonymously check out the latest project source code:\n    # Non-members may check out a read-only working copy anonymously over HTTP.\n    svn checkout http://orapig.googlecode.com/svn/trunk/ orapig-read-only\n\nupdate: The githubbers have done this."}, {"role": "assistant", "content": "git clone git://github.com/Fudge/gltail.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Link to a specific (current) revision on GitHub\n\nHere is a sample project on github: http://github.com/ripper234/Test-grails-project\nI would like to capture the latest revision, and send a link to it to someone, so that even if the project changes later he will see the specific revision I was talking about. I guess forking could do that, but it's overkill.\nHow do I do that?"}, {"role": "assistant", "content": "Just press y and the URL will change automatically to reflect the current version.  \nSource"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Log in to GitHub from the command line with multiple accounts\n\nI opened a new GitHub account to separate my business vs. personal repositories.\nNow, I git init my local repository and git add remote origin <the repository HTTPS URL>\nI try to push, and it seems to always take the credentials of my original account, not prompting me for the credentials for the new account.\nI tried using the URL format with\nhttps://<username>:<password>@github.com/<username>/<repository.git>\n\nbut that doesn't seem to help: I still get an error that the credentials are invalid for the original account username.\nHow do I log in with multiple sets of credentials or how would I somehow reset the original credentials to force password prompt when pushing?\n\nThe only way I managed to push right now is by specifying the username:[email\u00a0protected]/ in the URL in the git push command."}, {"role": "assistant", "content": "git config --global credential.helper cache\n\n... which tells git to keep your password cached in memory for (by default) 15 minutes.  You can set a longer timeout with:\ngit config --global credential.helper \"cache --timeout=3600\"\n\nMore useful links:\nhttps://confluence.atlassian.com/bitbucketserver/permanently-authenticating-with-git-repositories-776639846.html\n\nUsing the .netrc file\n  The .netrc file is a mechanism that allows you to specify which credentials to use for which server. \nThis method allows you to avoid entering a username and password every time you push to or pull from Git, but your Git password is stored in plain text.\n\n\nYou can store your credentials using the following command\ngit config credential.helper store\ngit push http://example.com/repo.git\n# Now type username and password and it should be saved by git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete files in github using the web interface\n\nThe title pretty much is the question. I am aware of git rm file but this isn't what I am looking for. I am looking for a way to delete files and folders in a github repo using ONLY a browser."}, {"role": "assistant", "content": "This is not (yet?) available through the web interface.\nAs GitHub added File editing, then File creation features, this may make sense to propose such a feature. The recommended channel to do so is to send an email to [email\u00a0protected].\nUpdate\nDeletion of files through the web interface is now available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download and write a file from Github using Requests\n\nLets say there's a file that lives at the github repo:\nhttps://github.com/someguy/brilliant/blob/master/somefile.txt\nI'm trying to use requests to request this file, write the content of it to disk in the current working directory where it can be used later. Right now, I'm using the following code:\nimport requests\nfrom os import getcwd\n\nurl = \"https://github.com/someguy/brilliant/blob/master/somefile.txt\"\ndirectory = getcwd()\nfilename = directory + 'somefile.txt'\nr = requests.get(url)\n\nf = open(filename,'w')\nf.write(r.content)\n\nUndoubtedly ugly, and more importantly, not working. Instead of the expected text, I get:\n<!DOCTYPE html>\n<!--\n\nHello future GitHubber! I bet you're here to remove those nasty inline styles,\nDRY up these templates and make 'em nice and re-usable, right?\n\nPlease, don't. https://github.com/styleguide/templates/2.0\n\n-->\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n    <title>Page not found &middot; GitHub</title>\n    <style type=\"text/css\" media=\"screen\">\n      body {\n        background: #f1f1f1;\n        font-family: \"HelveticaNeue\", Helvetica, Arial, sans-serif;\n        text-rendering: optimizeLegibility;\n        margin: 0; }\n\n      .container { margin: 50px auto 40px auto; width: 600px; text-align: center; }\n\n      a { color: #4183c4; text-decoration: none; }\n      a:visited { color: #4183c4 }\n      a:hover { text-decoration: none; }\n\n      h1 { letter-spacing: -1px; line-height: 60px; font-size: 60px; font-weight: 100; margin: 0px; text-shadow: 0 1px 0 #fff; }\n      p { color: rgba(0, 0, 0, 0.5); margin: 20px 0 40px; }\n\n      ul { list-style: none; margin: 25px 0; padding: 0; }\n      li { display: table-cell; font-weight: bold; width: 1%; }\n      #error-suggestions { font-size: 14px; }\n      #next-steps { margin: 25px 0 50px 0;}\n      #next-steps li { display: block; width: 100%; text-align: center; padding: 5px 0; font-weight: normal; color: rgba(0, 0, 0, 0.5); }\n      #next-steps a { font-weight: bold; }\n      .divider { border-top: 1px solid #d5d5d5; border-bottom: 1px solid #fafafa;}\n\n      #parallax_wrapper {\n        position: relative;\n        z-index: 0;\n      }\n      #parallax_field {\n        overflow: hidden;\n        position: absolute;\n        left: 0;\n        top: 0;\n        height: 370px;\n        width: 100%;\n      }\n\netc etc.\n \nContent from Github, but not the content of the file. What am I doing wrong?"}, {"role": "assistant", "content": "The content of the file in question is included in the returned data. You are getting the full GitHub view of that file, not just the contents.\nIf you want to download just the file, you need to use the Raw link at the top of the page, which will be (for your example):\nhttps://raw.githubusercontent.com/someguy/brilliant/master/somefile.txt\n\nNote the change in domain name, and the blob/ part of the path is gone.\nTo demonstrate this with the requests GitHub repository itself:\n>>> import requests\n>>> r = requests.get('https://github.com/kennethreitz/requests/blob/master/README.rst')\n>>> 'Requests:' in r.text\nTrue\n>>> r.headers['Content-Type']\n'text/html; charset=utf-8'\n>>> r = requests.get('https://raw.githubusercontent.com/kennethreitz/requests/master/README.rst')\n>>> 'Requests:' in r.text\nTrue\n>>> r.headers['Content-Type']\n'text/plain; charset=utf-8'\n>>> print r.text\nRequests: HTTP for Humans\n=========================\n\n\n.. image:: https://travis-ci.org/kennethreitz/requests.png?branch=master\n[... etc. ...]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I delete a specific revision of a github gist?\n\nI created a Gist on GitHub and I saw information I don't want anyone to see.\nI updated the file since, but everybody can still access the old revision of the file.\nExcept deleting the Gist, is there a way to delete that particular revision definitely?\nI saw that I'm not the only one having that kind of problem (Git: delete a single remote revision) but I didn't manage to remove the revision.\nThe process indicated here seems to help remove some files. I want to remove the whole revision."}, {"role": "assistant", "content": "Github has a help page about removing sensitive data:\nhttp://help.github.com/removing-sensitive-data/\nAs gists are just git repositories, you should be able to locally clone your gist, do the clean-up there and do a forced push to overwrite the github version with the cleaned repo.\nYes, after thinking about it: If <commit> is the commit you want to \"remove\", do\n git rebase -i <commit>^\n\nmark the line for <commit> as edit, save and quit.\ngit will set up the working directory to the state after you comitted <commit>. Fix the file, use git add and git commit --amend to fix the commit. Then do git rebase --continue. If the only thing, the next commit did, was to remove the sensitive data, it will probably be automatically dropped because it doesn't contain any changes after the now-amended commit.\nThen, do a git push -f to force the update (because it is now non-fast-forward, meaning it changes already published git history)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there anyway to programmatically fetch a zipball of private github repo?\n\nWe got a necessity to fetch a zipball of a private repo. For public ones it's pretty easy either through GitHub API or manually (https://github.com/user/repo/zipball/master). But what about private repos? Not exactly obvious how to do it even having oAuth token."}, {"role": "assistant", "content": "New Alternative\nBecause the given accepted answer does not work anymore, I thought I would explain how I was able to do it with the new changes in the github API.\nThe new Download Api Link\nFirst, I found information about downloading the archive here:\nhttps://developer.github.com/v3/repos/contents/#get-archive-link\nPublic Repo\nIf it's a public repo then it is very easy... you can do:\ncurl -L https://api.github.com/repos/pengwynn/octokit/tarball > octokit.tar.gz\n\nPrivate Repo\nIf it's it is a private repo, you need to create an oAuth token by going to your settings and then selecting \"Developer settings\" / \"Personal access tokens\".\nI created a personal token.\nThen using the instructions on the following page I found out how to get private repo that you have permission to:\nhttps://developer.github.com/v3/#authentication\nFull Code\ncurl -H \"Authorization: token ab499f3b...\" \\\n-L https://api.github.com/repos/godzilla/my_priv_repo/tarball > wut.tar.gz\n\nBe sure to replace ab499f3b... with your actual token."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where can I report a GitHub bug?\n\nI have a perfectly valid repository which doesn't display correctly on GitHub. How do I report this to GitHub to get them to fix it?\nThis also affects the git command line tool, unfortunately.\nIf you want to know what's going on, look at the 'encoding' attribute of the commit."}, {"role": "assistant", "content": "If someone encounters a bug with one of GitHub's products, they can submit it to the below URL. It creates a ticket to track the correctness of a bug.\nhttps://support.github.com/contact/bug-report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference between working directory and local repository?\n\nI've created a new GitHub repository.\nI'm quite confused by working directory and local repository.\nWhen working on my own, my stuff all resides on working directory.\nBut when work with repo, I should check my stuff there.\nBut are they the same thing? or should they be separate.\nThen how to commit my stuff in working directory to my local repo.\nHow to commit my local repo to remote repo.\nHow to do this by Git Bash?\nThanks!"}, {"role": "assistant", "content": "Working directory is the directory with your source files under git control (in the root of all dirs under control .git file is present).\nGit is tracking the difference between your working directory and local repository, and between your local repository and (one of) remote repositories.\nTo see what was changed, use  $ git status.\nTo commit your changes (edits and/or new files) to the local repository, use $ git add and then $ git commit.\nTo see what was committed use $ git log.\nThen, if you want to commit your changed to the remote repository, use $ git push.\nPay attention to what git commands are printing, it often contain advice what to do. \nIf you are working with GitHub, their help is also useful: pushing to a remote.\nGood basic information is also in atlassian site.\n\nFOR EXAMPLE:\nSuppose, you initiated your git repository with $ git init in JavaRepo dir and checkouted there the project with $ git pull or $ git clone. Then JavaRepo should contain .git file (among others git dotted files) - you can check it with $ ls -a. These files itself are the local git repository, and there is no need to distinguish 'working directory' and 'local repository' directory.\nSo, start working with files in JavaRepo: say you changed file example.java and created new file example2.java. Execute  $ git status in JavaRepo (or in any its subdirs). It should show: 'modified: example.java', 'Untracked files: example2.java'. \nAdd your files to the staging area with $ git add example.java and $ git add example2.java commands from the directory with these files. (Notice that $ git add is both for changed and new files.)\nAnd finally commit your files by $ git commit -m \"example changes\" (-m stays for message - comments to the commit).\n$ git log should show this commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change a release on Github point to the latest commit?\n\nI recently released a new version of my project on Github by clicking the release button, on the right-hand side of the page. However, I found something error in my code, so, I just fixed and committed it.\nNow, I would like to change my latest release in order to include my latest commit. I tried to remove the release and recreate it once again using the same tag name, however, it still points to the previous commit. I have been googling but still no luck. Any help would be appreciated."}, {"role": "assistant", "content": "You would need to update/move the tag locally first, and force push it (as in here):\n# assuming you are in the branch referencing currently the right new commit:\ngit tag -f <tagname>\n\n# push your new commit:\ngit push \n\n# force push your moved tag:\ngit push origin -f <tagname>\n\nThen you can go on GitHub and associate new binaries with the release for that tag (which should point to the right commit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Set the develop branch as the default for a pull request\n\nI want to make the pull request merge into develop from the feature branch by default.\nI'm advocating the use of git flow, so when a pull request is submitted for a feature, the pull request needs to get merged into develop, and not master.\nSome of the managers commented that being human, there is a possibility that the team leads could overlook that fact and merge the pull request into master by mistake, causing issues with the release later on.\nWe want to mitigate the risks of merge hell so this would go a long way in achieving this goal.\nEdit: I'm using a fork of gitflow called hubflow(http://datasift.github.com/gitflow/). By default, when a feature branch is created  git hf feature start [tik-123]  the feature branch is created per spec but also gets pushed up to origin. We want this for collaboration. Once the feature is complete, the dev will go to the feature branch in github and issue a pull request. The team leads will then review the pull request and merge the feature into dev if the feature is slated for release in the sprint."}, {"role": "assistant", "content": "Alternatively make develop the default branch that everyone sees when visiting the project. The downside is that anyone who clones it will get an unstable branch by default but all pull requests will go to the develop branch by default too."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Shell in Windows: patch's default character encoding is UCS-2 Little Endian - how to change this to ANSI or UTF-8 without BOM?\n\nWhen creating a diff patch with Git Shell in Windows (when using GitHub for Windows), the character encoding of the patch will be UCS-2 Little Endian according to Notepad++ (see the screenshots below). \nHow can I change this behavior, and force git to create patches with ANSI or UTF-8 without BOM character encoding?\nIt causes a problem because UCS-2 Little Endian encoded patches can not be applied, I have to manually convert it to ANSI. If I don't, I get \"fatal: unrecognized input\" error.\n\n\n\nSince then, I also realized that I have to manually convert the EOL from Windows format (\\r\\n) to UNIX (\\n) in Notepad++ (Edit > EOL Conversion > UNIX). If I don't do this, I get \"trailing whitespace\" error (even if all the whitespaces are trimmed: \"TextFX\" > \"TextFX Edit\" > \"Trim Trailing Spaces\").\nSo, the steps I need to do for the patch to be applied:\n\ncreate patch (here is the result)\nconvert character encoding to ANSI\nEOL conversion to UNIX format\napply patch\n\nPlease, take a look at this screenshot:"}, {"role": "assistant", "content": "I'm not a Windows user, so take my answer with a grain of salt. According to the Windows PowerShell Cookbook, PowerShell preprocesses the output of git diff, splitting it in lines. Documentation of the Out-File Cmdlet suggests, that > is the same as | Out-File without parameters. We also find this comment in the PowerShell documentation:\n\nThe results of using the Out-File cmdlet may not be what you expect if you are used to traditional output redirection. To understand its behavior, you must be aware of the context in which the Out-File cmdlet operates.\nBy default, the Out-File cmdlet creates a Unicode file. This is the best default in the long run, but it means that tools that expect ASCII files will not work correctly with the default output format. You can change the default output format to ASCII by using the Encoding parameter:\n[...]\nOut-file formats file contents to look like console output. This causes the output to be truncated just as it is in a console window in most circumstances. [...]\nTo get output that does not force line wraps to match the screen width, you can use the Width parameter to specify line width.\n\nSo, apparently it is not Git which chooses the character encoding, but Out-File. This suggests a) that PowerShell redirection really should only be used for text and b) that\n| Out-File -encoding ASCII -Width 2147483647 my.patch\n\nwill avoid the encoding problems. However, this still does not solve the problem with Windows vs. Unix line-endings . There are Cmdlets (see the PowerShell Community Extensions) to do conversion of line-endings.\nHowever, all this recoding does not increase my confidence in a patch (which has no encoding itself, but is just a string of bytes). The aforementioned Cookbook contains a script Invoke-BinaryProcess, which can be used redirect the output of a command unmodified.\nTo sidestep this whole issue, an alternative would be to use git format-patch instead of git diff. format-patch writes directly to a file (and not to stdout), so its output is not recoded. However, it can only create patches from commits, not arbitrary diffs.\nformat-patch takes a commit range (e.g. master^10..master^5) or a single commit (e.g. X, meaning X..HEAD) and creates patch files of the form NNNN-SUBJECT.patch, where NNNN is an increasing 4-digit number and subject is the (mangled) subject of the patch. An output directory can be specified with -o."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between organisation member and outside collaborator in github\n\nThe github docs are a bit unclear about the semantic difference between organisation member and outside collaborator. What is the distinction?\nI run an github organisation for my school. I create repos and allocate them to students. Should the students be members of the org or outside collaborators?"}, {"role": "assistant", "content": "This particular GitHub Help Doc page may help clear it up.  Outside collaborators only have access to repositories that their team membership allows.  Outside collaborators cannot create teams or view all the organization's members and teams.\n\nOutside collaborators and bot accounts will count toward your organization's total of paid seats if they are given access to a private repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In what ways is an SSH Key different from tokens for git authentication?\n\nI recently started getting notifications about the GitHub deprecation of basic authentication using a password to Git - see their blog post https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/.\nIn this post, they say the following:\n\nFor developers, if you are using a password to authenticate Git operations with GitHub.com today, you must begin using a personal access token over HTTPS (recommended) or SSH key by August 13, 2021, to avoid disruption.\n\nA short while ago, I started using SSH keys on some of the machines I use anyway to avoid entering my password regularly or storing it unencrypted with credential helper. However, as per above, they say personal access tokens are \"recommended\".\nWhat I would like to know is what are the key differences between each of these methods? This is to get some insight into why tokens are \"recommended\" and whether it is worth switching to this method of authentication."}, {"role": "assistant", "content": "From the blog post you linked, I can see at least one benefit of tokens over SSH keys: while tokens and SSH keys both share the Unique, Revocable, and Random benefits quoted in the blog post below, tokens are also Limited in comparison to SSH keys in that they come with their own scoped permissions baked in:\n\nWhile SSH keys can be read-only or read-write enabled, or scoped to specific repositories, personal access tokens do have an edge in terms of their finer-grained permissions model in comparison. This is likely why GitHub recommends tokens over SSH keys.\n\nTokens offer a number of security benefits over password-based\nauthentication:\n\nUnique \u2013 tokens are specific to GitHub and can be generated per use or\nper device\nRevocable \u2013 tokens can can be individually revoked at any\ntime without needing to update unaffected credentials\nLimited \u2013 tokens\ncan be narrowly scoped to allow only the access necessary for the use\ncase\nRandom \u2013 tokens are not subject to the types of dictionary or\nbrute force attempts that simpler passwords that you need to remember\nor enter regularly might be"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Way to compare range of commits in pull request on Github?\n\nScenario, first 5 commits in a PR have already been code reviewed. Made a few more commits and want to focus in on those.\nHow can I compare a range of commits in the pull request on Github?"}, {"role": "assistant", "content": "The most convenient way I found is:\n\nOpen PR conversation\nFind the last commit that have already been reviewed and click its hash link, your URL will look like https://github.com/airbnb/javascript/pull/188/commits/2b6c524e6984f300f6c6e08e57c8dbab9497e798\nChange commits to files and add ..HEAD to the end of URL such as https://github.com/airbnb/javascript/pull/188/files/2b6c524e6984f300f6c6e08e57c8dbab9497e798..HEAD\n\nYou'll see commits range you want to review in context of the PR.\nP.S. Now GitHub provides functionality to view \"Changes since your previous code review\" but sometimes it is useful to select changes manually"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSH Agent Forwarding not working\n\nI'm having an hard time trying to configure Capistrano 3.1 to deploy an app hosted on Github.\nI'm following Capistrano Documentation and I have successfully completed the first step (SSH keys from workstation to servers) and on the second one (From our servers to the repository host) I'm able to successfully run ssh -A [email\u00a0protected] 'git ls-remote [email\u00a0protected]:my_user/my_repo.git':\n18f38afz261df35d462f7f4e2ca847d22f148a06    HEAD\n18f38afz261df35d462f7f4e2ca847d22f148a06    refs/heads/master\n\nhowever, ssh [email\u00a0protected] 'git ls-remote [email\u00a0protected]:my_user/my_repo.git' fails:\nPermission denied (publickey).\n\nCapistrano docs suggests\n\nIf you get the error \"host key verification failed.\" log in into your server and run as the deploy user the command ssh [email\u00a0protected] to add github.com to the list of known hosts.\n\nSO, I tried so but I get\nssh [email\u00a0protected]\nWarning: Permanently added the RSA host key for IP address '192.30.252.131' to the list of known hosts.\nPermission denied (publickey).\n\nAnd I'm basically not able to successfully access the Github repo. \nSSH documentation states:\n\n-A      Enables forwarding of the authentication agent connection.  This\n         can also be specified on a per-host basis in a configuration\n         file.\n\n\nHow can I  specified on a per-host basis in a configuration file?\nMy local machine runs Mac OSX Mavericks.\nThe VPS runs Ubuntu 12.04\nThanks."}, {"role": "assistant", "content": "Do you have your ssh key added to the list of agent identites ?\nYou can check with ssh-add -L , you should see the key your are using to connect to github :\n$ ssh-add -L\nssh-rsa AAAAB3N.....0VmSiRvTzBrbU0ww== /Users/youruser/.ssh/id_rsa\n\nIf you don't see the ssh key you use for github or a message like \n\nThe agent has no identities.\n\nThen you should add your key with :\nssh-add ~/.ssh/id_rsa\n\n(replace with the path to the key you use for github)\nSee the ssh-add doc for more info"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change Github account in Android Studio\n\nI have used one Github account to push an android project to Github from Android Studio. Now I have created another account on Github and want to push my another android project to this new account. But I am not able to find any option to change the Github account in Android Studio. It keeps pushing from the previous account and hence results in this error:\n\nremote: Permission to new_username/repository_name.git denied to old_username.\nfatal: unable to access 'https://github.com/new_username/repository_name.git/': The requested URL returned error: 403\n\nI am using Android Studio 1.2.2 on Windows OS."}, {"role": "assistant", "content": "Go to: \nSetting --> Version Control --> GitHub --> Change you username."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access\n\nH!\nI installed LFS in my github repository to track my *.csv files but when someone else tried to upload other csv and I wanted to make the pull of my repository this was the result\nThis repository is over its data quota. Account responsible for\nLFS bandwidth should purchase more data packs to restore access.\n\nMy question is How can I recover the access to my repository, it doesn\u00b4t matter if I can not use anymore LFS I will move my csv files to other place, I just want to recover the access to my github repository and being able to push and pull."}, {"role": "assistant", "content": "Go to your repo settings.\nScroll down to the archives section.\nCheck on the checkbox of Include Git LFS objects in archives.\nThen try to push from locally again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Logon failed, use Ctrl + C to cancel basic credential prompt\n\nI'm facing problems while trying to pull/push my code into a GitHub repository using the cmd prompt for the last two days. How can I resolve this issue?\n\nLogon failed, use Ctrl + C to cancel basic credential prompt. Username for 'https://github.com': satyendrasingh8 Password for 'https://[email\u00a0protected]': remote: Invalid username or password. fatal: Authentication failed for 'https://github.com/satyendrasingh8/chatApp.git/'"}, {"role": "assistant", "content": "Fitz_Hoo is right! I just wanted to give a more detailed explanation that fix my issue. Essentially GitHub deprecated their password authentication recently (you can read more by clicking here).\n\nNow instead of adding your username/email and password, you will login with your browser. The image below is the new interface. As Fitz_hoo mentions, you must update your Git to see the new changes!\n\nIf you are using Windows, you can simply use this command below to update your Git:\ngit update-git-for-windows"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Forgot to create new branch. How to transfer changes to new branch\n\nthis happens to every developer time-to-time.  You start coding a new feature and forget to branch first locally.\nSo if that happens is there a way I can say hey, transfer these uncommitted (or committed - yea I know those are both two scenarios which I'd like to cover with this) to a new branch for me locally so I don't have to back them out and copy my changes to a new branch to be able to carry on my way?"}, {"role": "assistant", "content": "If you haven't commited your changes yet, you can switch to a new branch prior to committing.\ngit checkout -b my-new-branch\n\nThis will create a new branch called my-new-branch and immediately check it out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - HTTPS access\n\nI am unable to clone my repository via HTTPS:\ngit clone https://github.com/walterjwhite/project.configuration.git\n\nOutput:\nInitialized empty Git repository in ./project.configuration/.git/\nerror: Failed connect to github.com:443; Connection refused while accessing https://github.com/walterjwhite/project.configuration.git/info/refs\nfatal: HTTP request failed\n\nI have configured the .netrc file with my login and password as well as the machine or server I am connecting to."}, {"role": "assistant", "content": "As you did saw yourself in GitHub support, Scott Schacon himself suggested:\n\nSo I guess your .netrc is incorrect or something?\n  Try removing the info from your .netrc and cloning first (since it's a public repo).\n\nIf it isn't a GitHub server issue, it could be your firewall.\nAnd/or your proxy (git config --global http.proxy http://user:password@proxy:xxx)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Floating images in Github Readme\n\nHow would I go about doing this? Putting the following code into the\nMarkdown generator\ngives me the desired output\n<div style=\"float: left\"><img src=\"http://ompldr.org/vaDU5NQ/scrotter.png\"/>\n</div>\nI'm trying not to, kid. Don't act so surprised, Your Highness. You weren't\non any mercy mission this time. Several transmissions were beamed to this\nship by Rebel spies. I want to know what happened to the plans they sent\nyou. Kid, I've flown from one side of this galaxy to the other.\n\nI've seen a lot of strange stuff, but I've never seen anything to make me\nbelieve there's one all-powerful Force controlling everything.\n\nHowever, adding this code to my README.md file makes it an inline image instead\nof floating.\nHow could I work around this? Is it a Github bug?"}, {"role": "assistant", "content": "I know this thread's old, but for anyone interested, you can use <img align=\"left\" src=\"img.jpg\"> and <img align=\"right\" src=\"img.jpg\"> to float images on GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can i see output of .rmd in github?\n\nI am practicing data analysis using R programming. I want my files to be on github. I am unable to figure out why github is not showing the output of .rmd files. \nHere is the link to the file in my github repository Data Analysis Practice\nI want the output including plots to be shown on github."}, {"role": "assistant", "content": "Instead of:\noutput: html_document\n\nmake it:\noutput: rmarkdown::github_document\n\n(assuming you have the latest rmarkdown installed which you should if you're using RStudio \u2014 which I suspect you are \u2014 and keep it updated or update packages regularly).\nIt will create Exploring_one_variable.md and render the images as files. \nWhen you browse to that markdown file, the images will render.\nAn alternative is to use:\noutput: \n  html_document:\n    keep_md: true\n\nand it will render to both Exploring_one_variable.md and Exploring_one_variable.html so you'll have the best of both worlds without the local github-esque preview that the former provides.\nYou can get fancier and put something like the following as the first code section in the Rmd:\n```{r, echo = FALSE}\nknitr::opts_chunk$set(\n  fig.path = \"README_figs/README-\"\n)\n```\n\nwhich will put the figures in a directory of your choosing.\nYou can see this in action here as the README.md was generated with knitr from the README.Rmd in the same directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - How to revert changes to previous state\n\nI am using GitHub as my remote repository.\nI have already pushed 5 commits to the server and want to revert back to the state before the those commits.\nIf the commit hash is 3425661dba2aadccdbab, how do I revert the entire local/remote back to that commit? I tried \n$ reset --hard 3425661dba2aadccdbab\n\nbut that only resetted my working head to that branch and requires me to do a git pull again. I tried checkout, but this caused me to land in a \"detached head\" branch."}, {"role": "assistant", "content": "You basically have two options to revert changes:\n\ncreate a new commit which applies reverse changes. This is the preferred option as it doesn't changes history on a public repository\nRemove the commits and force push them.\n\nThe first option can be achieved by using git revert\n\ngit-revert - Revert some existing commits\nGiven one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them.\n\nAn example would be git revert -n HEAD~5..HEAD. This command creates 5 new commits, each of which undoes one of the last 5 commits of the currently checked out branch.\nThe second option would be to actually remove the commits. Note that this changes history in the repository. So anyone who has already pull the changes will probably be rather surprised and things can get messy quickly. That said, you can do\ngit reset --hard HEAD~5\ngit push --force\n\nThe first command will wipe any uncommitted changes in your current working copy. and reset your local repository to the state of the current HEAD - 5 commits. The second command will force-push to the default remote (i.e. GitHub) There, any changes diverging from your current local repository are overwritten.\nA note of warning again: If you don't really know what you are doing, don't use this option as it can lead to data loss for you or others if not done right. Use the first option instead as it will transparently remove changes but without the nasty side-effects of history-rewriting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: how to reference an issue in a commit from a different repository?\n\nI have two repositories:\n\nRepository A\nRepository B\n\nI also have a project:\n\nProject X\n\nThis Project X has Repository A and Repository B as linked repositories.\nIn Repository A I created several issues:\n\nIssue 1\nIssue 2\nIssue 3\n\nAll these issues are appearing on the kanban board of Project X.\nWhen I now do a commit on Repository B: \ncloses #1\n\nThe commit wont get linked to the Issue 1 of Repository A.\nCan I configure the project in a way that I can create such references from commits from different Repositories? Or do I use this wrong?"}, {"role": "assistant", "content": "#1 refers to issue 1 in this repo.\nusername/repoA#1 refers to issue 1 in username's repoA.\norg/repoA#1 refers to issue 1 in org's repoA.\nYou would use either of the last two options\nSee Autolinked references and URLs: Issues and pull requests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to view diff of a forked github project\n\nI have forked a project on github and need to have a set of changes I made since I forked, in diff format.\nIf you wonder - I've forked Apache httpd and I'm changing some code in core. Currently I'm not commiting any changes, running git diff, and use its output as a patch against vanilla httpd sources in an RPM building process. It is, of course, wrong, but I don't know how to do it properly. All I know is I need a diff in the end."}, {"role": "assistant", "content": "Online solution:\n\nget /repos/{owner}/{repo}/compare/{base}...{head}\n\n\nThe \"compare two commits\" API does support multiple repositories:\n\nBoth :base and :head must be branch names in :repo.\nTo compare branches across other repositories in the same network as :repo, use the format <USERNAME>:branch.\n\nExample:\nhttps://api.github.com/repos/octocat/hello-world/compare/master...abejpn:master\nOr with a GitHub URL:\nhttps://github.com/octocat/Hello-World/compare/master...abejpn:master\n\nOriginal answer 2010:\n\nAdd the original GitHub repo (the one you have forked) as a remote one on your local repo.\n(git remote add mainRepo github_url)\ngit fetch mainRepo to get the latest changes from that original \"mainRepo\".\ngit log HEAD..mainRepo/master will show you all your changes between the latest on mainRepo master branch and your current branch.\ngit diff HEAD..mainRepo/master would display it in diff format.\n\nIn learn.GitHub:\ngit diff mainRepo/master...HEAD\n\nwould list all your changes since you have forked from mainRepo:\n\nThis will not compare the last \u2018master\u2019 branch snapshot and the last \u2018dev\u2019 snapshot - it will instead compare the common ancestor of both with \u2018dev\u2019. That will tell you what changed since the branch point."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use the GitHub Actions `workflow_run` event?\n\nAnother frequently-requested feature for Actions is a way to trigger one workflow based on the completion of another workflow. For example, you may want to take the results of a CI workflow and run some further analysis.\nThe new workflow_run event enables you to trigger a new workflow when one or more workflows are requested or completed. Runs triggered by the workflow_run event always use the default branch for the repository, and have access to a read/write token as well as secrets. As an example, as a maintainer you could set up a workflow that takes the artifacts generated by the pull request workflow, do some analysis, and post comments back to the pull request.  This event is also available as a webhook and works all repos.\n\nThis is quoted from Github's blog.\nCould anybody tell me how to implement the example proposed using the new event workflow_run? The documentation only provide a very simple example:\non:\n  workflow_run:\n    workflows: [\"Run Tests\"]\n    branches: [main]\n    types: \n      - completed\n      - requested\n\nI would be very glad if someone can teach me how to achieve the example."}, {"role": "assistant", "content": "To get the example to work (i.e. to have one workflow wait for another to complete) you need two files. Both files live in the .github/workflows folder of a repository.\nThe first file would be set up as usual. This file will be triggered by whatever event(s) are set in the on section:\n---\nname: Preflight\n\non:\n  - pull_request\n  - push\n\njobs:\n  preflight-job:\n    name: Preflight Step\n    runs-on: ubuntu-latest\n    steps:\n      - run: env\n\nThe second file states that it should only trigger on the workflow_run event for any workflows with the name Preflight:\n---\nname: Test\n\non:\n  workflow_run:\n    workflows:\n      - Preflight\n    types:\n      - completed\n\njobs:\n  test-job:\n    name: Test Step\n    runs-on: ubuntu-latest\n    steps:\n      - run: env\n\nThis more-or-less the same as the example from the GitHub Actions manual.\nAs you can see on the actions page\nof my example repo, the Preflight workflow will run first. After it has completed, the Test workflow will be triggered:\n\nAs you can also see, the branch does not appear for the \"Test\" workflow.\nThis is because, (quoting from the manual):\n\n\nThis event will only trigger a workflow run if the workflow file is on the default branch.\n\nThis means that the \"Test\" workflow will run on/with the code from the default branch (usually main or master).\nThere is a workaround for this...\nEvery actions is run with a set of contexts. The github context holds information about the event that triggered the workflow. This includes the branch that the event was originally triggered from/for: github.event.workflow_run.head_branch.\nThis can be used to check out the origination branch in the action, using the actions/checkout action provided by GitHub.\nTo do this, the Yaml would be:\n---\nname: Test\n\non:\n  workflow_run:\n    workflows:\n      - Preflight\n    types:\n      - completed\n\njobs:\n  test-job:\n    name: Test Step\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n      - run: git branch\n      - run: env"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Relative Link to Repo's Root from Markdown file\n\nI need to have a relative link to root of my repo from markdown file\n(I need it working for any forks)\nSo it looks like the only way it's to provide a link to some file in the root:\nthe [Root](/README.md)\nor\nthe [Root](../README.md)\n(if it's located at /doc/README.md for instance)\nAt the same time I can refer to any folder without referring to a file\nthe [Doc](/doc)\nBut if I try to put a link to the root folder:\nthe [real root](/)\nthe [real root](../)\nI'll have a link such\nhttps://github.com/UserName/RepoName/blob/master\nwhich unlike the \nhttps://github.com/UserName/RepoName/blob/master/doc\nrefers to 404\nSo if I don't want to refer to README.md in the root (I could havn't it at all)\nIs there any way to have such a link?"}, {"role": "assistant", "content": "After some research I've found this solution:\n[the real relative root of any fork](/../../)\nIt always points to the default branch. For me it's Ok, so it's up to you\nPS\nWith such a trick you can also access the following abilities:\n[test](/../../tree/test) - link to another branch\n[doc/readme.md](/../../edit/master/doc/readme.md) - open in editor\n[doc/readme.md](/../../delete/master/doc/readme.md) - ask to delete file\n[doc/readme.md](/../../commits/master/doc/readme.md) - history\n[doc/readme.md](/../../blame/master/doc/readme.md) - blame mode\n[doc/readme.md](/../../raw/master/doc/readme.md) - raw mode (will redirect)\n[doc/](/../../new/master/doc/) - ask to create new file\n[doc/](/../../upload/master/doc/) - ask to upload file\n[find](/../../find/test) - find file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I \"login\" to git?\n\nI need to change who git thinks I am so I can push to a different repo ( both are mine. ).\nHere is a similar issue but I don't want to set any config variables.\nI just want to login once to my current username.  I plan on deleting my other account.\nHere is the error when I attempt a git push origin master\n\nremote: Permission to current_user/fav-front.git denied to\n  user_to_delete. fatal: unable to access\n  'https://github.com/current_user/repo.git/': The requested URL\n  returned error: 403\n\nPlease note that the git config variables for user and email ( user.name and user.email ) are not related to the authentication that git push uses.\nThey are used for commits.\nTo reiterate, I want to login to git as current user."}, {"role": "assistant", "content": "You don't login to Git.\nYou do login to a Git repository hosting server, which requests an authentication, but Git itself has no authentication nor authorization.\n(As an example of a Git repository hosting service offering login:\n\nGitHub: gh auth login\nGitLab: glab auth login)\n\nWhat Git does have is credential caching (check the output of git config credential helper)\nOn Mac: \"Updating credentials from the OSX Keychain\": you can check if your old user was stored there, and update it.\nIf you really want to disable the credential helper, you will be asked your credentials every time you push to a repository hosted on a server requesting authentication.\n\nRegarding AgilePro's answer:\n\nAgain, there is no way to ask git to log in, instead you have to make a bogus change and then try to push the change to get it to prompt you to log in.\n\nNot true.\nGit itself does not log you in, as mentioned in my answer above.\nA third-party CLI tool (like GitHub CLI gh) can connect to a repository hosting service (like github.com) and trigger the authentication.\nNo repository needed.\nWith GitHub: create first through the Web UI a Personal access tokens (classic), with minimum required scopes: repo, read:org, and gist.\nIts token prefix will be ghp_....\nThen authenticate yourself from the command-line, after installing gh, using gh auth login\ngh auth login\n\nYou can enter your GitHub user account name, and your token.\nThen, a gh auth status would give you:\nC:\\Users\\vonc\\git>gh auth status\ngithub.com\n  \u2713 Logged in to github.com as VonC (C:\\Users\\vonc\\AppData\\Roaming\\GitHub CLI\\hosts.yml)\n  \u2713 Git operations for github.com configured to use https protocol.\n  \u2713 Token: ghp_************************************\n  \u2713 Token scopes: admin:org, gist, repo, user, workflow\n\nYou are authenticated (to GitHub, not to \"Git\").\n\nYou can also register your token with the local credential manager:\ngit config --global credential.helper manager\nprintf \"protocol=https\\nhost=github.com\\nusername=<me>\\npassword=<my_token>\" |\\\n  git-credential-manager store\n\nThis is purely for safekeeping, and does not authenticate you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github pull request shows wrong diff\n\nI am having two branches:\n- master and\n- develop.\nI am trying to merge branch develop into master branch.\nI have checked with Tower and Araxis merge, those two branches are identical. But when I do a pull request on Github, I am seeing that there are 381 files changed, like files are not on master at all.\nAny ideas why this behavior?\nUpdate: I am attaching screenshot of pull request."}, {"role": "assistant", "content": "Despite the misleading/broken github interface there's actually a way to get what you want. You need to drop one .\nInstead of:\n\nhttps://github.com/account/repo/compare/branchA...branchB\n\ndo\n\nhttps://github.com/account/repo/compare/branchA..branchB\n\nThis compares branch heads instead of simply using the base branch to find the merge base.\ngithub's reponse is what clued me in from @edwin-evans' response:\n\nThis is a result of the type of diff we use on GitHub. We use git\u2019s three dot diff, which is the difference between the latest commit on the HEAD branch and the last common ancestor commit with the base branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find my GitHub username so that I can be found via the URL? [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about programming within the scope defined in the help center.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm confused about my GitHub username\n\nIs it the one that is being displayed on the top right corner of the window?\nOr is it the one I created using \"git config --global user.name\" from my shell?\n\nI need to give it in a job application form."}, {"role": "assistant", "content": "The one displayed in the top right corner in GitHub is your GitHub username - this is the one you use to login to GitHub when you enter the site and when you commit over HTTPS, and the one that appears in the URLs of your GitHub repositories.\nThe one you create using git config is your Git username - this is the one that appears as the author of your commits when you do git log or git blame.\nSince you can use Git outside of GitHub, those two usernames do not have to be the same. \nAlso, the GitHub username must be unique, but nothing forces uniqueness of Git usernames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can you track or be notified of changes to GitHub wikis?\n\nAre there service hooks for GitHub wiki repositories? Is there some other mechanism that GitHub provides for me to track wiki edits?"}, {"role": "assistant", "content": "Push approach: Within the GitHub API documentation, you can find documentation about setting up service hooks which can be triggered for one or more events. The gollum event is especially raised any time a wiki page is updated.\nJSON-based pull approach: You can also leverage the Events HTTP API to retrieve a JSON formated output of what happens on GitHub, then apply some filtering in order to isolate the events of type GollumEvent.\nBelow a quick jQuery-based sample\n<html>\n    <head>\n        <title>Gollum events</title>\n        <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n        <script type=\"text/javascript\">\n            $(function() {\n                $.getJSON('https://api.github.com/repos/holman/spark/events?callback=?', function(data) {\n\n                    var list = $('#gollum-events');\n\n                    $.each(data.data, function(key, val) {\n                        if (val.type == \"GollumEvent\") {\n                            $.each(val.payload.pages, function(key2, val2) {\n                                list.append('<li id=\"' + key + '.' + key2 + '\"><a href=\"' + val2.html_url + '\">' + val2.page_name + '</a> [' + val.actor.login + ' @ ' + val.created_at + ']</li>');\n                            });\n                        }\n                    });\n                });\n            });\n        </script>\n    </head>\n    <body>\n        <ul id=\"gollum-events\"/>\n    </body>\n</html>\n\nAtom based pull approach: Last but not least, you can subscribe to the wiki changes atom feed. Go to the GitHub Wiki section of the repository, select the Pages sub tab, hover onto the orange icon, copy the link and paste into your favorite RSS reader.\n\nUpdate:\nIt looks like the RSS feed icon is no longer displayed for a wiki.\nHowever, you can still build the URL by yourself\n\nSyntax: https://github.com/:user/:repository/wiki.atom\nExample: https://github.com/holman/spark/wiki.atom"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Images not displaying in Github Pages?\n\nI added a project site to my Github project. But some photos are not displaying in the site.\nImg code:\n<img src=\"img/screenshot2.PNG\" class=\"img-responsive\" alt=\"\"> </div>\n\nfolder structure (img is a folder):\nimg\n    Screenshot2.png\nindex.html\n\nI tried with .png and .PNG (some earlier SO answers suggested it) and none of them work\nAny solutions?"}, {"role": "assistant", "content": "Nevermind, I solved it.\nIf anyone has the same problem.\nGitHub Pages are case sensitive. Not only for folders, but also for image names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "InstanceAgent::Plugins::CodeDeployPlugin::CommandPoller: Missing credentials\n\nI'm trying to deploy a GitHub project to a EC2 Instance using AWS CodeDeploy. After following 2 video tutorials an a bunch of Google answer, I'm still getting the following error:\n2017-02-01 12:20:08 INFO  [codedeploy-agent(1379)]: master 1379: Spawned child 1/1\n2017-02-01 12:20:09 INFO  [codedeploy-agent(1383)]: On Premises config file does not exist or not readable\n2017-02-01 12:20:09 INFO  [codedeploy-agent(1383)]: InstanceAgent::Plugins::CodeDeployPlugin::CommandExecutor: Archives to retain is: 5}\n2017-02-01 12:20:09 INFO  [codedeploy-agent(1383)]: Version file found in /opt/codedeploy-agent/.version.\n2017-02-01 12:20:09 ERROR [codedeploy-agent(1383)]: InstanceAgent::Plugins::CodeDeployPlugin::CommandPoller: Missing credentials - please check if this instance was started with an IAM instance profile\n\nI have two IAM:\n\nCodeDeployInstanceRole\nCodeDeployServiceRole\n\nCodeDeployInstanceRole for the EC2 Instance\nPolicy Name: AmazonEC2RoleforAWSCodeDeploy\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:GetObjectVersion\",\n        \"s3:ListObjects\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n\nPolicy Name: AutoScalingNotificationAccessRole\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\",\n        \"Action\": [\n            \"sqs:SendMessage\",\n            \"sqs:GetQueueUrl\",\n            \"sns:Publish\"\n        ]\n      }\n    ]\n}\n\nTrust Relationship\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": [\n          \"codedeploy.amazonaws.com\",\n          \"ec2.amazonaws.com\"\n        ]\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n\nCodeDeployServiceRole for CodeDeploy\nPolicy Name: AWSCodeDeployRole\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:CompleteLifecycleAction\",\n        \"autoscaling:DeleteLifecycleHook\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribeLifecycleHooks\",\n        \"autoscaling:PutLifecycleHook\",\n        \"autoscaling:RecordLifecycleActionHeartbeat\",\n        \"autoscaling:CreateAutoScalingGroup\",\n        \"autoscaling:UpdateAutoScalingGroup\",\n        \"autoscaling:EnableMetricsCollection\",\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribePolicies\",\n        \"autoscaling:DescribeScheduledActions\",\n        \"autoscaling:DescribeNotificationConfigurations\",\n        \"autoscaling:DescribeLifecycleHooks\",\n        \"autoscaling:SuspendProcesses\",\n        \"autoscaling:ResumeProcesses\",\n        \"autoscaling:AttachLoadBalancers\",\n        \"autoscaling:PutScalingPolicy\",\n        \"autoscaling:PutScheduledUpdateGroupAction\",\n        \"autoscaling:PutNotificationConfiguration\",\n        \"autoscaling:PutLifecycleHook\",\n        \"autoscaling:DescribeScalingActivities\",\n        \"autoscaling:DeleteAutoScalingGroup\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceStatus\",\n        \"ec2:TerminateInstances\",\n        \"tag:GetTags\",\n        \"tag:GetResources\",\n        \"sns:Publish\",\n        \"cloudwatch:DescribeAlarms\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeInstanceHealth\",\n        \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\",\n        \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n\nTrust Relationship\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": [\n          \"codedeploy.amazonaws.com\",\n          \"ec2.amazonaws.com\"\n        ]\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n\nEC2 Instance\nI spin my own image that I have created based on Debian so I have NodeJS already installed. When I spin the new instance I also paste the following code in the User data text area to make sure CodeDeploy is installed.\n#!/bin/bash -x\n\nREGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//') &&\n\nsudo apt-get update -y &&\n\nsudo apt-get install -y python-pip &&\n\nsudo apt-get install -y ruby &&\n\nsudo apt-get install -y wget &&\n\ncd /home/admin &&\n\nwget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install &&\n\nchmod +x ./install &&\n\nsudo ./install auto &&\n\nsudo apt-get remove -y wget &&\n\nsudo service codedeploy-agent start\n\nDebugging\nIf I log in in the EC2 instance that I have create, and execute the following command:\necho $(curl http://169.254.169.254/latest/meta-data/iam/security-credentials/)\n\nI get the following response CodeDeployInstanceRole\nWhen I then execute \ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/CodeDeployInstanceRole\n\nI get the following response \n{\n  \"Code\" : \"Success\",\n  \"LastUpdated\" : \"2017-02-01T12:38:07Z\",\n  \"Type\" : \"AWS-HMAC\",\n  \"AccessKeyId\" : \"THE_KEY\",\n  \"SecretAccessKey\" : \"SECRET\",\n  \"Token\" : \"TOKEN\",\n  \"Expiration\" : \"2017-02-01T19:08:43Z\"\n}\n\nOn GitHub I see that CodeDeploy never accesses my repo even when I select deployment using GitHub, I set the right repo name, and commit ID.\n\nQuestion\nWhat am I missing?"}, {"role": "assistant", "content": "I ran into the same issue. Briefly what caused the problem: \n\nLaunch an instance WITHOUT any roles attached to it\nThen install a codedeploy-agent on that machine\nOnly lastly attach an IAM role to the machine\n\nResult: I get the error: Missing credentials - please check if this instance was started with an IAM instance profile\nSolution: restart the codedeploy agent. Use:\nsudo service codedeploy-agent restart\n\nThe error should be gone now!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Recover a deleted repository github issues\n\nMy repository in the github had been deleted.\nThe code was recovered, but we had a lot of Github issues i'd like to recover, is there a way to recover them once deleted?\nThanks."}, {"role": "assistant", "content": "You need to email [email\u00a0protected] as soon as possible when this happens."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error with 'Git push heroku master' command\n\nI am trying to update the code from my application to my repository and an error appears.\nHow can I fix it?\nC:\\Sites\\ecozap>git push heroku master\nEnter passphrase for key '/c/Users/Dise\u00f1o2/.ssh/id_rsa':\nFetching repository, done.\nTo [email\u00a0protected]:ecozap.git\n! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to '[email\u00a0protected]:ecozap.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."}, {"role": "assistant", "content": "This error means that the master branch on Heroku contains commits that are not in your local branch.\nYou can either pull the missing commits from Heroku and merge them into your local copy:\ngit pull heroku master\n\nOr, if you don't care about the missing commits you can force push to Heroku. This will overwrite the remote repo on Heroku with your local commits.\ngit push --force heroku master\n\nMake sure you really don't care about them as you will lose them from Heroku by doing this. Normally this doesn't matter as Heroku is not normally the canonical repo, somewhere else such as GitHub is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete file from Pull Request on GitHub\n\nI have make pull request on git (with \"xcodeproj/project.pbxproj\" file - my fault), so can I delete this file from created Pull Request? Thanks.."}, {"role": "assistant", "content": "You probably will merge this pull request on master,\nso you can checkout just this specific file again, from master,\non your branch, just type:\ngit checkout master -- xcodeproj/project.pbxproj\ngit commit -m \"removing a file from PR\"\ngit push origin {YOUR BRANCH}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git (GitHub) commit at past date\n\nI am working on a git project (hosted on GitHub) and using GitHub for Windows. Yesterday, I got a lot accomplished but GitHub for Windows bailed on me (says it cannot make a commit) and I was not able to commit.\nI do not want to lose my GitHub commit streak, so I was wondering if there was any way to commit in a past date and sync with my GitHub (if this is possible).\nAlso: I have staged my commits in the git-bash but have not committed yet."}, {"role": "assistant", "content": "While the question \"How do I make a Git commit in the past?\" explains how to amend the commit author date:\ngit commit --amend --no-edit --date=\"Fri Nov 6 20:00:00 2015 -0600\" \n\n\nRun that after a commit to amend the last commit with the timestamp noted.\nThe --no-edit will leave the message as-is.\n\nThe OP asks:\n\nThat question does not specify the GitHub result... would it work in the same way?\n\nYes: multiple projects exist allowing you to generate and push commits \"done in the past\", in order to update your contribution chart.\nSee for instance contribution.io, github-contribution, or gitgardener.\nAll you need to do, is to push those amended commit on the master branch of your GitHub repo, as I mention here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Custom css file for readme.md in a Github repo\n\nI am having trouble verifying the name of the .css file that will modifying the readme.md file at the root of Github repo.\nI believe it is:\n.github/github.css\n\nbut that doesn't seem to do anything to the Markdown. Does anyone know if this is incorrect?"}, {"role": "assistant", "content": "You can add some HTML (actually XHTML) and CSS inside a <foreignObject> tag inside of an svg file and then embed that inside of an <img> tag in your GitHub README.\nThis is a simple animation in CSS that changes the color of the h1 text:\n\n\nh1 {\n  color: red;\n  animation: myanimation 2s infinite;\n}\n\n@keyframes myanimation {\n  from {\n    color: red;\n  }\n  to {\n    color: yellow;\n  }\n}\n<h1>Hello world!</h1>\n\n\n\nYou can embed the style and HTML into a <foreignObject> tag inside of an svg like so:\nexample.svg\n<svg fill=\"none\" viewBox=\"0 0 400 400\" width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n    <foreignObject width=\"100%\" height=\"100%\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">\n            <style>\n            h1 {\n                color: red;\n                animation: mymove 2s infinite;\n            }\n\n            @keyframes mymove {\n                from {\n                    color: red;\n                }\n                to {\n                    color: yellow;\n                }\n            }\n            </style>\n            <h1>HELLO WORLD!</h1>\n        </div>\n    </foreignObject>\n</svg>\n\nThen, lastly you can embed the svg in your README, using an <img> tag and it should render your HTML with the applied CSS styles:\nREADME.md\n# My GitHub README\n\nWelcome to my README!\n\n<div align=\"center\">\n    <img src=\"example.svg\" width=\"400\" height=\"400\" alt=\"css-in-readme\">\n</div>\n\nanother example & source"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cleanup git master branch and move some commit to new branch?\n\nI have a clone of a repo on Github in which I created a new feature for upstream. The problem is, I did that in my master branch which also contains other stuff I pulled in from other clones. That totally broke my ability to create a reasonable pull request.\nSo I want to do the following:\n\nRestore my master branch to be exactly the same as upstream master.\nCreate a new branch.\nMove some of my old commits to the new branch.\nCreate a pull request off the branch.\n\nAnd, in the future, I will do all my work in branches and create pull requests off them while leaving my master branch alone and just merging down whatever comes in from upstream.\nMy questions are:\n\nIs this a reasonable approach?\nHow would I actually do steps 1 and 3?"}, {"role": "assistant", "content": "Make a new branch to hold stuff\n$ git branch old_master\n\nSend to remote for backup (just incase)\n$ git checkout old_master\n$ git push origin old_master\n\nReset local master to the commit before you started modifying stuff\n$ git checkout master\n$ git reset --hard 037hadh527bn\n\nMerge in changes from upstream master\n$ git pull upstream master\n\nNow DELETE master on remote repo\nOn github this won't work without first going into the admin section for the fork and setting the default branch to something other than master temporarily as they try and protect you from blowing stuff away.\n$ git push origin :master\n\nAnd recreate it\n$ git push origin master\n\nOn github you should now set the default branch back to master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github graphQL OrderBy\n\nI have a GraphQL query.\nI cannot understand why it is not working.\n{\n  repositoryOwner(login: \"Naramsim\") {\n    login\n    repositories(first: 3, isFork: true, orderBy: {field: CREATED_AT}) {\n      edges {\n        node {\n          description\n        }\n      }\n    }\n  }\n}\n\nLink"}, {"role": "assistant", "content": "You've got an error\nArgument 'orderBy' on Field 'repositories' has an invalid value.\nExpected type 'RepositoryOrder'.\n\nYou forget to specify direction which is marked as mandatory. This will work:\n{\n  repositoryOwner(login: \"Naramsim\") {\n    login\n    repositories(first: 3, isFork: true,  orderBy: {field: CREATED_AT, direction: ASC}) {\n      edges {\n        node {\n          description\n        }\n      }\n    }\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use environment variables in Github Page?\n\nI want to deploy my create-react-app project to GitHub Pages. But I have a few secret keys. How can I manage these keys inside my React app?"}, {"role": "assistant", "content": "Edited June 2020\nReference @alicia-jasmine\n\"React is purely a front-end framework. Everything accessible to React (even if you embed it through a build step) will later be visible in the front-end code and someone relatively basic to find. To really keep them secret you MUST have something server side!\"\nThe following answer will actually expose the key in the gh-page branch on GitHub, also the keys will be accessible through the network tab in the developer console.\nOriginal Answer\nI'm also using create-react-app, and I found that this can be done by customizing your CI script with GitHub secret settings. (After the setting, you can use environment variables like this in your project.)\nconst apiKey = process.env.REACT_APP_APIKey\nconst apiSecret = process.env.REACT_APP_APISecret\n\nTo add a secret to your repository, go to your repository's Setting > Secrets, click on Add a new secret. In the screenshot below, I added 2 env variables: REACT_APP_APIKey and REACT_APP_APISecret.\nNotice: All the environment variable you want to access with create-react-app need to be prefixed with REACT_APP.\n\nAfter you have your secret ready, you can take a look at this post, it's about how to add your own Action upon push.\nTo setup your action script, go to your repository > Actions, an click on Setup workflow your self, and paste in the script provided in the post or take a look at mine script below.\n\nI use the following script to access the 2 environment variables I set on GitHub secret. (You can access the secret you set in the script by ${{ secrets.REACT_APP_APIKey }}.)\nname: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    \n    - name: Checkout\n      uses: actions/checkout@v1\n\n    - name: Build\n      run: |\n        npm install\n        npm run-script build\n      env:\n        REACT_APP_APIKey: ${{ secrets.REACT_APP_APIKey }}\n        REACT_APP_APISecret: ${{ secrets.REACT_APP_APISecret }}\n\n    - name: Deploy\n      uses: JamesIves/github-pages-deploy-action@releases/v3\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        BRANCH: gh-pages\n        FOLDER: build\n\n\nAfter you setup the script, the action will be triggered by any push to master\nbranch. After you push any commits, you can take a look at the deployment status at actions status.\nYou can see how hard it is for me to figure it out... so many fail attempts lol. Anyway, hope this will help :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Searching in multiple Github repositories\n\nI Want to search all our codebase in our Github installation for different text strings. We have app. 90 different repositories.\nIs there such a method?\nI can only find search for file names, authors etc., not search for strings inside code. My task is to find every project which uses or refers to systems, classes, methods etc. that soon are obsolete. \nAlternately: Is there a method to download/clone all repositories in one action?\nWe use SourceTree as client software."}, {"role": "assistant", "content": "You can search directly at the top of an Organisation now. This results in the prefix org:.\ne.g. if you wanted to search all twitter repos for the word bot you would search for org:twitter bot\nhttps://github.com/search?l=&q=org%3Atwitter+bot&ref=advsearch&type=Code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Wiki pages sort order?\n\nI don't seem to be able to give a sort order to the Wiki pages of a project on GitHub. Does this option even exist?"}, {"role": "assistant", "content": "It does not. \nBut you can use the side bar to make a custom 'table of contents' where you can put them in any order you want, with headings and everything, see below (from https://github.com/BrechtDeMan/WebAudioEvaluationTool/wiki)\nYou may want to have a look at the answers to this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I host my wordpress blog on github pages as a static webpage\n\nI would like to make my WordPress blog installed on Localhost to push into GitHub and run that on GitHub as a static page. Can I do it, and if yes please give me a detailed answer with the steps and problems involved?\nI don't care if my page is static, but will I be able to host it on GitHub pages?"}, {"role": "assistant", "content": "This website gives a good answer on how to do this: https://www.hywel.me/static/site/wordpress/2016/07/17/fast-free-static-website-with-wordpress-and-github-pages.html\nIn short:\n\nSet-up GitHub pages.\nInstall Simply static plugin into WordPress.\nPush the export from the plug-in back to your git repository and you are done!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is required to get a Flask app running on Github pages?\n\nRecently I have been trying to create a personal website using a Flask app with Github pages. Once creating a repository titled .github.io and placing an a file titled index.html it will appear live at the address .github.io. However, once this file is deleted and replaced with a basic Flask application then a 404 page appears.\nWhat is required to get a Flask app running on Github pages?"}, {"role": "assistant", "content": "You can't host a python application on Github pages, it's designed for simple static file hosting.  You could use something like Flask-Frozen to turn your Flask application into static pages, but then you obviously have some big tradeoffs depending on your site's functionality."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically Deploy From GitHub To Server On Push\n\nWe have a VPS on Linode, and code hosted on GitHub. How do we setup so when we push to GitHub, it also pushes automatically to our Linode server. We are using PHP on the Linode server."}, {"role": "assistant", "content": "You probably want to use GitHub's post-receive hooks.\nIn summary, GitHub will POST to a supplied URL when someone pushes to the repo. Just write a short PHP script to run on your linode VPS and pull from GitHub when it receives said POST."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gist Vs. Repository for Tutorial\n\nI'm publishing a tutorial that includes a lot of code interspersed with documentation. I'm considering two ways of hosting the code:\n\nSeparate git repository with code files and markdown files explaining the code \nGithub gist containing both of these\n\nAre there advantages of hosting in a gist v/s a repository? When would one prefer one of these over the other?"}, {"role": "assistant", "content": "Gist is a simple way to share snippets and pastes with others.\nWhereas Repo is simply a place where the history of your work is stored.\nThere is no good answer, it's personal preference. I make mine a conceptual distinction. If it's code designed to demonstrate a technique, teach a principle, or show off a solution it goes in a gist. Doesn't matter if it's one file or 30 files. If it's actual code intended to be run, used as is, or forked as boilerplate I put it in a proper repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Migrate from Sourceforge to Github\n\nI'm thinking about migrating a project from Sourceforge to Github. Besides the svn to git, what about migrating things like the issue tracker? Is there an easy way to do that?"}, {"role": "assistant", "content": "For SVN to GitHub part, this is now the easiest way: https://github.com/new/import\nHelp page: https://help.github.com/en/github/importing-your-projects-to-github/importing-a-repository-with-github-importer\nBut it doesn't import issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do collaborators have commit access on GitHub?\n\nOne thing I noticed: Using the GitHub UI, I added a collaborator to a repository. I saw that they committed changes without any authority / approval from me. It was a private repository.\nWith private repositories, how do I give someone read access versus write access?"}, {"role": "assistant", "content": "With private repositories, how do I give someone read access versus write access?\n\nThis kind of permission is not available for simple accounts. When you add an user as a collaborator, he gains read/write permissions.\nThe story changes if you own an Organization. Organizations contains teams and each team can have different level of access, including read-only.\nYou can assign users to a specific read-only group, and they will only have pull access to the repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to disable pull requests in GitHub?\n\nI am trying to understand how will I be able to disable \"pull requests\" in github.\nQuestion 1: \nWe are trying to use the rebase workflow and that means using pull requests can be harmful if that isn't a fast forward push.\nOne Solution: Setup branch permissions for the branches where I want to disable pull request. Or add me as the reviewer to anything that goes into master. \nQuestion 2:\nSo that begs the question, can I setup branch permissions in github ?? Can I add myself as a reviewer for any change that wants to get into master ?\nQuestion 3:\nGithub has definitely removed pre-receive hooks, so how can I do any enforcements before the source hits the server ? pre-commit hooks can be done, but at the same time can be pain. \nI had asked a similar question here: Commit message hook on github\nIt seems github could be useful for the merge workflow or even git-flow, but it can be hard to maintain for the rebase workflow, is that a fair assumption ? \nCan I consider atlassian Stash as a better tool for the rebase workflow ?"}, {"role": "assistant", "content": "It is not possible according to GitHub support\nI asked support [email\u00a0protected] on February 2018 if it was possible to remove the Pull Requests tab, and the reply from @nickcannariato was:\n\nThanks for writing in! We've definitely heard some users requesting this feature over the last couple of years, and it's currently on our feature request list. I can't make any promises about if or when we may add this ability in the future, but I'll add your +1 to that feature request so the team can see it.\n\nconfirming that it is not possible.\nRequest on the de-facto trackers:\n\nhttps://github.com/isaacs/github/issues/1191\nhttps://github.com/dear-github/dear-github/issues/84"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github actions, 401 unauthorized when installing a Github Package with npm or yarn\n\nWhen I try to install my npm modules from a GitHub action I get the following error:\nnpm ERR! 401 Unauthorized - GET https://npm.pkg.github.com/@xxxx%2fxxxx-analytics - Your request could not be authenticated by the GitHub Packages service. Please ensure your access token is valid and has the appropriate scopes configured.\n\nBefore you comment, I have configured the .npmrc correctly with the scope and access token, and everything works fine when installing the private package locally.\nHere is my GitHub workflow action:\nname: JavaScript workflow\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Use Node.js 12.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: '12.x'\n      - name: npmrc\n        run: cat .npmrc\n      - name: npm install\n        run: |\n          npm install\n        env:\n          CI: true\n          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}\n\n\nhere is my .npmrc\n@fortawesome:registry=https://npm.fontawesome.com/\n//npm.fontawesome.com/:_authToken=XXXXXXXXX\n@colonynetworks:registry=https://npm.pkg.github.com\n//npm.pkg.github.com:_authToken=XXXXXXXXX\nalways-auth=true\n@react-admin:registry=https://registry.marmelab.com\n//registry.marmelab.com:\n_auth=XXXXXXXXX\n[email\u00a0protected]\nalways-auth=true\n\n\nIt's a private repo and the authTokens are currently hardcoded in the .npmrc file.\nHowever while trying to find a solution for this, I did come across this random comment from a Github staff member: https://github.community/t/netlify-getting-401-from-github-package-registry-with-auth-token/16415/3\nIt's a bit vague, but it sounds like it doesn't accept a hardcoded authToken in the .npmrc file.\nSo first thing I tried was to use our env variable instead like so:\n@xxxx=https://npm.pkg.github.com\n//npm.pkg.github.com:_authToken=${NPM_AUTH_TOKEN}\n\n\nThe env variable is correct in our Github repo secrets, and supplied by the workflow.\nHowever this still resulted in the same 401 Unauthorized error.\nFrom looking at other solutions I then tried to generate the .npmrc manually inside the Github action before the install step, like so:\n- name: npmrcgen\n        run: |\n          echo \"//npm.pkg.github.com/:_authToken=XXXXXXX\" > .npmrc\n          echo \"@xxxxx=https://npm.pkg.github.com/\" >> .npmrc\n          echo \"@react-admin:registry=https://registry.marmelab.com\" >> .npmrc\n          echo \"//registry.marmelab.com:\" >> .npmrc\n          echo \"_auth=XXXXXXX\" >> .npmrc\n          echo \"[email\u00a0protected]\" >> .npmrc\n          echo \"always-auth=true\" >> .npmrc\n\nDuring the logging step I added, it the _authToken (only for Github) still shows up as ***, and I still got a 401 Unauthorized error.\nAt this point I wanted to confirm the .npmrc was even being used, so I removed the second private registry we used for marmelab.com, and sure enough, I got an error saying it was no longer able to install their ra-realtime package. This proves the .npmrc file is indeed being read and used by my Github action, but it's not accepting my Github personal access token.\nI have tried to generate a new token as well. It has full access to everything under repo: as well as write:packages and read:packages which is what should be required.\nStill 401 Unauthorized in the Github action, and still works fine locally.\nLastly I have tried to install it with yarn instead of npm. Unsurprisingly this did not fix it either.\nI have seen and tried the following solutions without any success:\n\nDownload private module from Github Package Registry via Yarn within a Github Action? Publishing works, but installing is met with '401 Unauthorized'\nhttps://github.com/FerLuisxd/create-npmrc\nhttps://blog.bitsrc.io/install-npm-private-packages-in-ci-cd-with-github-actions-746db95017cc\n\nOne thing I have not tried, as I have seen no recommendations on how or this being a good idea, but I have not done an npm login within the Github action. Since no one else has done this, and somehow have it working, I assume this is not necessary."}, {"role": "assistant", "content": "I contacted GitHub support and they managed to figure out what the problem was.\nGithub workflows are more strict than local environments and require an extra / before the auth token:\nspot the difference:\n//npm.pkg.github.com:_authToken=XXXXXXXXX. # broken\n//npm.pkg.github.com/:_authToken=XXXXXXXXX # works\n\nadding the extra / before :_authToken= solved the issue for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What happens if you force push to a branch with an existing pull request?\n\nI am working on a git branch that is currently part of a closed pull request on github. Subsequently to the initial pull request, I made some additional commits, pushed those commits to github, and then reverted those commits and recommitted them because I need to revise the commits. \nNow if I want to push those commits to github, I'll need to issue a force push: git push --force. But I have the strong feeling that this might cause mayhem with the existing pull request, even though the changed commits occurred after the commits that existed prior to me making the pull request.\nCan anyone describe to me how best to handle this situation? I think I may need to just create an entirely new branch and then issue a pull request on that branch instead. But if there's a way to link this to the existing pull request that would be preferable."}, {"role": "assistant", "content": "If my memory serves me correctly, then if you force push or update the branch in question in any way, GitHub will automatically update the pull request.  If doing the force push would result in the pull request not being possible, then GitHub will tell you this.\nYou do not need to worry about updating the pull request as GitHub will take care of this for you.\nThis being said, doing a git push --force on any remote branch can cause mayhem for your coworkers who are also currently working on this branch.  So you are correct to be shying away from doing a force push, but fortunately a GitHub pull request is not your biggest problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Best workflow when forking and renaming a GitHub project [closed]\n\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am trying to figure out the best workflow for working with a fork of an existing opensource project in Github. I want to take an existing project and make significant changes to it, in this case to port it to android and add specific android only functionality. I would like to satisfy the following:\n\nBe able to pull changes from their public repo to the new android port as the original code is updated.\nBe able to sumbit changes (via pull requests) to the orginal project when I fix bugs that aren't just applicable to the android port.\nHave a seperate renamed version of the project to make it clear that it is a Android port. I looked at renaming a fork and Github gave me huge warnings about doing this.\n\nMy initial thoughts are I would fork the original project then fork and rename my fork to give me the following repos:\noriginal-author/projectA\nnicstrong/projectA\nnicstrong/projectA-android\n\nThis would allow me to work on my local repo local/projectA-android push changes to nicstrong/projectA-android. Then to update from the orginal project I could rebase nicstrong/projectA to the latest from original-author/projectA then fetch/merge from nicstrong/projectA to local/projectA-android.\nMy questions are:\n\nI am quite new to the whole Git\nthing. Does this seem like a good\napproach? Or is there a better\nworkflow for handling this scenerio?\nHow would I handle pushing from\nprojectA-android back to nicstrong/projectA so I can setup pull request for the original project?"}, {"role": "assistant", "content": "2011:\n1/ Yes, that seems the safest approach, as any modification you end up back-porting in nicstrong/projectA will be in a project with the same structure as original-author/projectA.\nThat means pull requests will be easier to organize, since you will be in a project mirroring the original author's project.\n2/ If you have massive refactoring going on in nicstrong/projectA-android, I would make a backport branch, carefully merge or cherry-pick what you need from the numerous changes to the backport branch, and then push that branch to nicstrong/projectA.\n(which means you have added nicstrong/projectA as a remote of nicstrong/projectA-android)\n\n2022: Note that you can create a fork directly with a different name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove issue reference\n\nI have issue #1 and issue #2 on github.\nI commenting on the issue #1 smthing like this: \"I think that\nissue #2 is associated with this issue\".\nNow in comments of issue #2 the message about referencing issue\n#2 with issue #1 appears.\nI delete my comment on issue #1.\nThe message about referencing issue #2 with issue #1 still\nexists in issue #2 comments.\n\nHow I can remove the message about referencing from issue #2 comments?"}, {"role": "assistant", "content": "It's currently not possible to remove a GitHub Issue reference after it has been created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "cloning laravel project from github\n\nI'm new to GitHub and I found this site very useful for a lot of us. I came upon storing my Laravel project here in GitHub, but there's a problem every time I will clone it to be able to go to production, when I'm about to clone it at first, it always shows this error.\nWarning: require(C:\\xampp\\htdocs\\tourismPortal\\bootstrap/../vendor/autoload.php): failed to open stream: No such file or directory in C:\\xampp\\htdocs\\tourismPortal\\bootstrap\\autoload.php on line 17\n\nFatal error: require(): Failed opening required 'C:\\xampp\\htdocs\\tourismPortal\\bootstrap/../vendor/autoload.php' (include_path='.;C:\\xampp\\php\\PEAR') in C:\\xampp\\htdocs\\tourismPortal\\bootstrap\\autoload.php on line 17\n\nI know this will be solved by using composer update on it, but is there any way to prevent this error so that every time I clone it, I will go to production without encountering this error? Thanks, by the way, I'm using tortoisegit to clone, pull and push."}, {"role": "assistant", "content": "Clone your project\nGo to the folder application using cd command on your cmd or terminal\nRun composer install on your cmd or terminal\nCopy .env.example file to .env on the root folder. You can type copy .env.example .env if using command prompt Windows or cp .env.example .env if using terminal, Ubuntu\nOpen your .env file and change the database name (DB_DATABASE) to whatever you have, username (DB_USERNAME) and password (DB_PASSWORD) field correspond to your configuration.\nRun php artisan key:generate\nRun php artisan migrate\nRun php artisan serve\nGo to http://localhost:8000/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I undo discard changes in GitHub Desktop?\n\nIs there any way to undo discard changes in GitHub Desktop, after the Undo button has disappeared?\n\nI am talking about GitHub Desktop's undo feature, not git in general."}, {"role": "assistant", "content": "As of 5/8/18, and if you're using the latest version of github desktop or github desktop beta, uncommitted discarded changes are now copied over as new files and put into your trash/recycling bin. \nThis is what the current prompt looks like:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Added pod files and pushed. How to undo? how to use gitignore in Xcode & github?\n\nThis is a two part question:\n1) I have added committed and pushed all pod files to github. Is there a way I can remove them and not push them again to github?\n2) I know gitignore can help, but I don't know how to use it. Can anyone please walk me through the process of using gitignore? \nso I think what I can do is, get the project from github, add gitignore, and then push again. is that correct? \nPlease help, new to github & Xcode."}, {"role": "assistant", "content": "That's correct, you need to add the Pods directory to your .gitignore\n1) Remove your files from your github repository:\ngit rm -r Pods/\n\nand don't forget to commit and push\n2) Create a gitignore file:\n\nOpen terminal and go through your project folder where the .git folder is located\nType touch .gitignore\nType echo \"Pods/\" > .gitignore\n\n3) (Added from Gabriel's comment) Last step, remove them from the remote:\ngit rm -r --cache Pods/\n\nMore informations : here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Actions - No Such File or Directory on Any Run Step\n\nI am trying to test out Github Actions for a small web project. I have two projects in the repository, and I want to create a deployment script for only the web client.\nThe repository looks like this:\nroot\n|\n|-src\n|  |-API\n|  |\n|  |-WebClient\n|\n|-docs\n\nI want to run scripts in the WebClient directory. When I try to cd into ./src/webclient, I get the error no such file or directory\nname: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js environment\n        uses: actions/[email\u00a0protected]\n        \n      - name: Open Web Client Directory\n        run: |\n          ls -la\n          cd ./src/webclient\n          ls -la\n          \n      - name: Run a multi-line script\n        run: |\n          echo Add other actions to build,\n          echo test, and deploy your project.\n          ls -la\n\n\nThe output for the \"Open Web Client Directory\" step:\ntotal 28\ndrwxr-xr-x 5 runner docker 4096 Oct 17 18:05 .\ndrwxr-xr-x 3 runner docker 4096 Oct 17 18:05 ..\ndrwxr-xr-x 8 runner docker 4096 Oct 17 18:05 .git\ndrwxr-xr-x 3 runner docker 4096 Oct 17 18:05 .github\n-rw-r--r-- 1 runner docker 6215 Oct 17 18:05 .gitignore\ndrwxr-xr-x 4 runner docker 4096 Oct 17 18:05 src\n/home/runner/work/_temp/43164e53-98ec-41c2-8773-72e94c3453e5.sh: line 2: cd: ./src/webclient: No such file or directory\nError: Process completed with exit code 1.\n\nIt looks to be successfully doing the ls -la command, but fails to find the directory ./src/webclient.\nIs there something obvious that I am missing? I have tried changing the command to cd src/webclient, and it fails also. This works on two different local machines, one ubuntu and one MacOS."}, {"role": "assistant", "content": "I had an issue where a step was failing with the following, no matter how I configured it:\n\nError: No such file or directory\n\nTurns out this was because I had not checked out the repository in a previous step!\nIf you are accessing files from the repo, you need to perform a checkout first:\nsteps:\n  - uses: actions/checkout@v2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "unable to get SSH keys working between sourcetree and github\n\nI was able to create a key and connect to github following these instructions via the command prompt successfully:\nhttps://help.github.com/articles/generating-ssh-keys\nHowever, when I try to connect via Sourcetree and putty I cannot. I've tried:\n\ngenerating a new key with the putty key generator (SSH-2 RSA) \nentering a passphrase\nsaving the private key\nsaving the public key and adding a .pub extension\ncopying/pasting the key from the putty key generator window into github\nattemping to refresh branches on a pull from my private github repository from my local repo using the SSH clone URL I got from github\n\nI also tried opening the key generated from the github command line instructions and it wanted me to convert it to a putty-type key which I did and saved off, tried with that one. Also no luck.\nWhat am I doing wrong?"}, {"role": "assistant", "content": "In order to get it worked I ended up going to Tools -> Options -> SSH Client and changing it to OpenSSH. I generated and uploaded several different types of keys trying to get it work as well but I think this is what finally did it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins-Build when a change is pushed to GitHub option is not working\n\nJenkins is running on localhost.\nI have my repository in GitHub. I have the option to 'Build when a change is pushed to GitHub' checked. \nWhen I click 'Build Now', build is done successfully, no issues there. But when am committing code to my repository, auto build is not happening. I can access GitHub from my system as the repository is public and I believe even Jenkins should be able to detect it. I know there is a polling option but I want Jenkins to  build when change is detected in repository(as this is what we have been trying to achieve).\nConfiguration:\nJenkins 1.615\nGit Plugin 2.3.5\nGit Client Plugin 1.17.1\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nEDIT: \"Build when a change is pushed to GitHub\" option has been renamed to \"GitHub hook trigger for GITScm polling\" in most recent version of GitHub plugin. \n(thanks to @smrubin's feedback.)"}, {"role": "assistant", "content": "I suspect you missed the webhook url. \nBesides checking the Build when a change is pushed to GitHub option, you should also add the webhook url into your Github repository to get the Auto trigger mechanism to work and here is how:\nGo to your Github repository: \n\nSettings--> Webhooks&Services-->Service--> Add Services--> Choose \"Jenkins (GitHub plugin)\"\n\nThen fill in the Jenkins hook url with your jenkins url like this:\nhttp://your_jenkins_url/github-webhook/\n\n\nAnd, VERY IMPORTANT, since you are installing your jenkins server in your localhost, please be aware that you shouldn't fill in above Jenkins hook url like http://localhost:8080/github-webhook/ because Github is not able to recognize localhost or 127.0.0.1 or 192.168.*.*.  \nEither you should use an externally accessible DNS name or an IP address, which can be recognized by Github."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't clone private repo on github from SourceTree\n\nA similar issue is described here however, my symptoms are a little different and none of the steps there seemed to work.  Nor does the suggestion here work.\nI'm attempting to use SourceTree to clone a private repo belonging to github organization of which I am a part.  I have full permissions to view and commit to the repo, I can see it online when I log in, AND I can clone just fine with the command line and also via the github desktop application.  It only fails in SourceTree.  \nFurther, it is not bad credentials or anything like that, because I can clone, commit and push to my other non-private repos on github using SourceTree with my github credentials.\nFrom the \"Clone a Repository\" dialog I enter the source URL, which looks something like this:\nhttps://github.com/MyOrgName/reponame.git\n\nI tab off of that field and it populates the destination path and name fields, but at the bottom of the dialog is a yellow exclamation point with this error:\nThis is not a valid source path / URL\n\nIf I click the error message, it brings up the \"Details\" dialog, which states the following (twice for some reason):\nremote: Repository not found.\nfatal: repository 'https://github.com/MyOrgName/reponame.git/' not found\nremote: Repository not found.\nfatal: repository 'https://github.com/MyOrgName/reponame.git/' not found\n\nI have also tried this by adding my username to the url like so:\nhttps://[email\u00a0protected]/MyOrgName/reponame.git\n\nbut no luck there either."}, {"role": "assistant", "content": "It happens because Sourcetree didn't get some private access from Github while authenticating. So the solution is very simple.\n\nLogin to your Github account on any browser.\n\nFrom the top right corner select SETTINGS.\n\nNow select DEVELOPER SETTINGS.\n\nFrom  DEVELOPER SETTINGS select PERSONAL ACCESS TOKEN.\n\nNow from PERSONAL ACCESS TOKEN select GENERATE TOKEN.\n\nFill Note as Sourcetree and Check All Scopes from the checkbox as shown in the below screenshots.\n\nAfter Click on Generate Token.\n\nNow Open Sourcetree.\n\nClick on Options in Tools menu & Click add Account.\n\nSelect options as shown below screenshot.\n\nEnter username as your Github account username and password as Generated Token from Github.\n\nClick on SAVE now you might see all your repository are visible and can clone too.\n\n\nHope it helps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I properly remove sensitive data pushed to a Git repo?\n\nI pushed a file containing a password to my repo by mistake - FYI the repo is just a small personal project.\nOnce I realised the password was present I added the file to .gitignore and executed git rm -r --cached <filename>, committed and pushed to the repo.\nI now realise the password is still present in the history - what is the best way to remove it?\nI read the Remove sensitive data page on Github which suggests changing the password - which I have done - but I would like to remove the history as well."}, {"role": "assistant", "content": "Since you have already made 5 commits since the commit containing the clear text password, you best bet is to do a git rebase -i in interactive mode on your local branch.  Find the SHA-1 of the commit where you added the clear text password, and type the following:\ngit rebase --interactive dba507c^\n\nwhere dba507c are the first 7 characters of the SHA-1 for the bad commit.\nChange this:\npick dba507c comment for commit containing clear text password\n\nTo this:\nedit dba507c I have removed the clear text password\n\nMake the change to the password file to remove the clear text, then commit your result like this:\ngit commit --all --amend --no-edit\ngit rebase --continue\n\nFinish the rebase, then push your (correct) local branch to the remote via:\ngit push -f origin your_branch\n\nYou will need to force push your_branch because you have rewritten history (by modifying the password file).  Now you have all your latest commits, but you have removed the clear text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cannot enable forking on github repo\n\nI have a private repo. I noticed I cannot fork it. I cannot find any information that says I shouldn't be able to. When I go to Options the ability to fix this is disabled. I am guessing you need to pay or something which is fine, but it doesn't say that anywhere...\n\nCannot click!"}, {"role": "assistant", "content": "I think you are talking about your organisation's private repo, right? As I didn't find this checkbox for personal private repositories.\nIf so, then you need to:\n\ngo to your organisation's settings, Member privileges, and check \"Allow forking of private repositories\" .\n\ngo to your repo and you'll see \"Allow forking\" will be automatically checked after doing step 1,\n.\n\n\nThe process is also described here:\nhttps://docs.github.com/en/organizations/managing-organization-settings/managing-the-forking-policy-for-your-organization"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are Github pages created automatically in the fork of a repo which has a gh-pages branch?\n\nAre github pages within my account created automatically when I fork a repo which already includes gh-pages branch?"}, {"role": "assistant", "content": "There needs to be at least one push to trigger a page build so by doing a git push origin master, I got the page to rebuild."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I use GitHub's 2-Factor Authentication with TortoiseGit?\n\nWe like TortoiseGit, and want to take advantage of GitHub's 2-Factor Authentication...but the two don't seem to want to work together."}, {"role": "assistant", "content": "To compliment Cupcake's answer, use the Personal Access token feature within GitHub.com while using TortoiseGit:\n\nSet up 2-step auth.\nSet up a personal access token - taking note of the generated token (use the Copy to clipboard button next to the generated token).\nSet TortoiseGit to remember your password as detailed here.\nNow perform a pull operation on GitHub.com, enter your username, but instead of using your normal password, use the token that was generated in step #2.\nPerform another pull operation on GitHub.com to ensure the token is remembered."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to increase the API Rate limit or to bypass it altogether for GitHub?\n\nI am developing a web application which needs to send a lot of HTTP requests to GitHub. After n number of successful requests, I get HTTP 403: Forbidden with the message API Rate Limit Exceeded.\nIs there a way to increase the API Rate limit or to bypass it altogether for GitHub?"}, {"role": "assistant", "content": "This is a relative solution, because the limit is still 5000 API calls per hour,\nor ~80 calls per minute, which is really not that much.\nI am writing a tool to compare over 350 repositories in an organization and\nto find their correlations.\nOk, the tool uses python for git/github access, but I think\nthat is not the relevant point, here.\nAfter some initial success, I found out that the capabilities of the GitHub API\nare too limited in # of calls and also in bandwidth, if you really want to ask\nthe repos a lot of deep questions.\nTherefore, I switched the concept, using a different approach:\nInstead of doing everything with the GitHub API, I wrote a GitHub Mirror script \nthat is able to mirror all of those repos in less than 15 minutes using my\nparallel python script via pygit2.\nThen, I wrote everything possible using the local repositories and pygit2.\nThis solution became faster by a factor of 100 or more, because there was neither an API nor a bandwidth bottle neck.\nOf course, this did cost extra effort, because the pygit2 API is quite a bit\ndifferent from github3.py that I preferred for the GitHub solution part.\nAnd that is actually my conclusion/advice:\nThe most efficient way to work with lots of Git data is:\n\nclone all repos you are interested in, locally\nwrite everything possible using pygit2, locally\nwrite other things, like public/private info, pull requests, access to\nwiki pages, issues etc. using the github3.py API or what you prefer.\n\nThis way, you can maximize your throughput, while your limitation is now the\nquality of your program. (also non-trivial)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Comparing the pros and cons of Bitbucket to Github [closed]\n\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nDisclaimer: This is a subjective question. Please follow relevant guidelines.\nI am considering the migration of source code from a traditional VCS to a DVCS. Since having a decent GUI web-based frontend and workflow tools are a must, the two obvious candidates are Bitbucket and Github.\nUnfortunately I have no in-depth experience with either of them, so I'd really like to have a few second opinions before taking the dive. Especially welcome would be observations from a team/business perspective regarding day-to-day usage and features that have an impact on productivity.\nWhat is Your experience with either of them? Any particular highlights or annoyances?"}, {"role": "assistant", "content": "if you are new to them both then it depends on what you need. a free github account doesn't include any private repositories whereas bitbucket free account gives you unlimited private repositories. \nthis was the selling thing for me - I didnt want to initially pay for github as i was trialing it but i didnt want me code to be free for all as it was commercial. This lead me to choose bitbucket\nI now use both (github for my OSS products and bitbucket for more locked down code) but I am moving my entire team away from SVN to mercurial as it was a simplier step to go to that git. From personal experience, it was easier to get to grips with Hg initially before git when I was using a DVCS for the first time. It didnt require the complex git install and could be used from within the windows cmd or powershell windows"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I connect a local folder to an existing github repo?\n\nI made a repo on my laptop. It has a project page on github.com.\nI'm now working on my desktop computer. I manually copied over some files because I didn't think I would need every file from the repo (so I didn't clone the repo onto my desktop). How can I connect my desktop local folder with the existing repo so that I can push the files on my desktop to the repo (the desktop files are now the most recent versions of those files, since I stopped working from my laptop)"}, {"role": "assistant", "content": "Adding an existing project to GitHub using the command line:\n# Initialize the local directory as a Git repository.\ngit init\n\n# Add files\ngit add .\n\n# Commit your changes\ngit commit -m \"First commit\"\n\n# Add remote origin\ngit remote add origin <Remote repository URL>\n# <Remote repository URL> looks like: https://github.com/user/repo.git\n\n# Verifies the new remote URL\ngit remote -v\n\n# Push your changes\ngit push origin master\n\nAnd 2nd way as @evolutionxbox suggest you:\n\nClone git repo\nCopy and paste into it\nPush your change at origin\n\nIf in any case git reject your push you can use git push origin master --force\nUPDATE (10-23-2020):\nBear in mind that since October 1st, 2020, Github renamed the default repository from master to main https://github.com/github/renaming"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find a Github file 's SHA blob\n\nI'm using this API to update a file on my repo, it requires me to have a valid SHA blob for a file that I want to update:\nhttp://developer.github.com/v3/repos/contents/\nHow do I find the SHA blob for the specific file? Supposed in my testrepo in the test account here, what is the SHA blob for the test.txt file?\nhttps://github.com/testacc01/testrepo01\nThank you so much!"}, {"role": "assistant", "content": "The docs for updating a file specify that you will need to provide the SHA for the file you will be replacing. The easiest way would be to query github for that, too. For example:\n> curl https://api.github.com/repos/testacc01/testrepo01/contents/test.txt\n{\n  \"name\": \"test.txt\",\n  \"path\": \"test.txt\",\n  \"sha\": \"4f8a0fd8ab3537b85a64dcffa1487f4196164d78\",\n  \"size\": 13,\n \u2026\n\nSo, you can see what the SHA is in the \"sha\" field of the JSON response. Use that when you formulate your request to update the file with a new version. After you have successfully updated the file, the file will have a new SHA that you will need to request before it can be updated again. (Unless, I guess, your next update goes on a different branch.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is GitHub's character limit, or line length for viewing files on GitHub?\n\nI simple wanted to know how many characters can be viewed without overflow (horizontal scrolling) on any GitHub source view page."}, {"role": "assistant", "content": "On OS\u00a0X v10.9 (Mavericks):\n\nGoogle Chrome: 125\nFirefox: 122\nSafari: 121"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github actions actions/checkout@v2 lfs: true flag not converting pointers to actual files\n\nThis is my github actions yml file:\nname: CI\n\non: [pull_request]\n\njobs:\n  build_ios:\n    name: Set up\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [self-hosted]\n        node-version: [10.x]\n\n    steps:\n      - name: Checkout github repo (+ download lfs dependencies)\n        uses: actions/checkout@v2\n        with:\n          lfs: true\n\nAfter it runs I expect all the git lfs files to be downloaded, checked out and ready to use, but instead the content of the file is this:\nversion https://git-lfs.github.com/spec/v1\noid sha256:f23e4c2b1244bc93085dbccf17c447e54sca44650294648df128d58303e4eff\nsize 58951008\n\nBelow I attach the actual github actions log in case it's helpful:\nRun actions/checkout@v2\n  with:\n    lfs: true\n    repository: SudoPlz/test-project-mobile\n    token: ***\n    ssh-strict: true\n    persist-credentials: true\n    clean: true\n    fetch-depth: 1\n    submodules: false\nSyncing repository: SudoPlz/test-project-mobile\nGetting Git version info\n  Working directory is '/Users/sudoplz/Development/tmp/actions-runner/_work/test-project-mobile/test-project-mobile'\n  /usr/bin/git version\n  git version 2.24.1 (Apple Git-126)\n  /usr/bin/git lfs version\n  git-lfs/2.8.0 (GitHub; darwin amd64; go 1.12.7)\n/usr/bin/git config --local --get remote.origin.url\nhttps://github.com/SudoPlz/test-project-mobile\nRemoving previously created refs, to avoid conflicts\n  /usr/bin/git rev-parse --symbolic-full-name --verify --quiet HEAD\n  HEAD\n  /usr/bin/git rev-parse --symbolic-full-name --branches\n  /usr/bin/git rev-parse --symbolic-full-name --remotes=origin\nCleaning the repository\n  /usr/bin/git clean -ffdx\n  Removing .jest/\n  Removing node_modules/\n  Removing patchLog.txt\n  /usr/bin/git reset --hard HEAD\n  HEAD is now at 21bea25da Merge ab95479fd7dce51551520250ac521532d0079f94 into c70ec18b35029c581b0c0e06566228f69e091d3d\nDisabling automatic garbage collection\n  /usr/bin/git config --local gc.auto 0\nSetting up auth\n  /usr/bin/git config --local --name-only --get-regexp core\\.sshCommand\n  /usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\n  /usr/bin/git config --local --name-only --get-regexp http\\.https\\:\\/\\/github\\.com\\/\\.extraheader\n  /usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\\.https\\:\\/\\/github\\.com\\/\\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\n  /usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***\n/usr/bin/git lfs install --local\nUpdated git hooks.\nGit LFS initialized.\nFetching the repository\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +d4be6d58e6a72e54b0b03be61fc508dcee8d7bec:refs/remotes/pull/44/merge\n  remote: Enumerating objects: 10, done.        \n  remote: Counting objects:  10% (1/10)        \n  remote: Counting objects:  20% (2/10)        \n  remote: Counting objects:  30% (3/10)        \n  remote: Counting objects:  40% (4/10)        \n  remote: Counting objects:  50% (5/10)        \n  remote: Counting objects:  60% (6/10)        \n  remote: Counting objects:  70% (7/10)        \n  remote: Counting objects:  80% (8/10)        \n  remote: Counting objects:  90% (9/10)        \n  remote: Counting objects: 100% (10/10)        \n  remote: Counting objects: 100% (10/10), done.        \n  remote: Compressing objects:  33% (1/3)        \n  remote: Compressing objects:  66% (2/3)    \n  remote: Compressing objects: 100% (3/3)        \n  remote: Compressing objects: 100% (3/3), done.        \n  remote: Total 5 (delta 2), reused 2 (delta 0), pack-reused 0        \n  From https://github.com/SudoPlz/test-project-mobile\n   + 21bea25da...d4be6d58e d4be6d58e6a72e54b0b03be61fc508dcee8d7bec -> pull/44/merge  (forced update)\nDetermining the checkout info\nFetching LFS objects\n  /usr/bin/git lfs fetch origin refs/remotes/pull/44/merge\n  fetch: Fetching reference refs/remotes/pull/44/merge\nChecking out the ref\n  /usr/bin/git checkout --progress --force refs/remotes/pull/44/merge\n  Warning: you are leaving 1 commit behind, not connected to\n  any of your branches:\n\n    21bea25da Merge ab95479fd7dce51551520250ac521532d0079f94 into c70ec18b35029c581b0c0e06566228f69e091d3d\n\n  If you want to keep it by creating a new branch, this may be a good time\n  to do so with:\n\n   git branch <new-branch-name> 21bea25da\n\n  HEAD is now at d4be6d58e Merge 8d05f53305eaef70a2d4635767b39dbfbe663b5a into c70ec18b35029c581b0c0e06566228f69e091d3d\n/usr/bin/git log -1\ncommit d4be6d58e6a72e54b0b03be61fc508dcee8d7bec\nAuthor: SudoPlz <*@*.*>\nDate:   Fri Apr 24 18:38:50 2020 +0000\n\n    Merge 8d05f53305eaef70a2d4635767b39dbfbe663b5a into c70ec18b35029c581b0c0e06566228f69e091d3d"}, {"role": "assistant", "content": "The LFS objects seem to be only fetched based on the log. You need to checkout the LFS files inorder for the pointer files to be replaced with their LFS counterparts. Here's an attempt at a modified actions.yml based on a search on GitHub Actions (never used it before) :\nname: CI\n\non: [pull_request]\n\njobs:\n  build_ios:\n    name: Set up\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [self-hosted]\n        node-version: [10.x]\n\n    steps:\n      - name: Checkout github repo (+ download lfs dependencies)\n        uses: actions/checkout@v2\n        with:\n          lfs: true\n      - name: Checkout LFS objects\n        run: git lfs checkout\n\nIf the LFS objects have not been fetched, then you can replace git lfs checkout with git lfs pull. \nRelevant issues : Cache for LFS"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where can I see the commit history on the gitHub website?\n\nI am looking for the history button on gitHub for all the past git commits.\nThese are buttons on the gitHub page.\nCode\nIssues\nPull requests\nActions\nProjects\nWiki\nSecurity\nInsights\nSettings\n1 branch\n0 tags"}, {"role": "assistant", "content": "On the repository page there is commits button below the Big Green Pull-Down Code button to see all commits. Clicking on it will open all the history"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Install an npm module from a private GitHub repository using GitHub Actions\n\nI am trying to run a build for a Node.js project using GitHub Actions. As part of the npm install, I need to install an npm module directly from a private GitHub repository (not from GPR!).\nIn the package.json I have:\n\"dependencies\": {\n  ...\n  \"my-module\": \"github:<org>/<my-module>#master\",\n  ...\n},\n\nHowever, when running npm install, I get:\n\nnpm ERR! [email\u00a0protected]: Permission denied (publickey).\n  npm ERR! fatal: Could not read from remote repository.\n\nThe repository is part of my own organization, and locally (i.e. from my machine) it works. How can I make this run? \nI have already tried setting the NODE_AUTH_TOKEN environment variable, but it didn't make a difference. Although you find this suggestion quite often, it seems to only address GPR. What I would like to avoid is having to hardcode the token into the package.json file. Any thoughts on this?"}, {"role": "assistant", "content": "This is how I have managed to install dependencies from private GitHub repositories.\nDependencies in package.json can be added as follows. The github: prefix is optional. Specifying the #branch or #tag is also optional.\n    \"dependencies\": {\n        ...\n        \"myrepo\": \"username/myrepo#master\",\n        \"myotherrepo\": \"github:username/myotherrepo\"\n    },\n\nHere is an example workflow. PAT is a repo scoped Personal Access Token. It is important to disable persisted credentials on actions/checkout, otherwise they will override your PAT. Note that the git config change persists between steps so you only need to run it once per job.\n      - uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n      - run: git config --global url.\"https://${{ secrets.PAT }}@github.com/\".insteadOf ssh://[email\u00a0protected]/\n      - run: npm ci\n      ..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get notified when someone pushes into a GitHub branch?\n\nWe're are using GitHub Enterprise in our company.  We have a \u201cdevelop\u201d branch where every programmer must push their work.  Is there a way to get notified when someone pushes into the develop branch along with a link to a diff view, like the one you get for a pull request?"}, {"role": "assistant", "content": "Not quite - but close enough. (You'll get notified for every commit, not push.)\nFor GitHub Enterprise as of mid 2014:\n\nGo into your repository's Settings\nOpen the \"Webhooks and Services\" tab\nClick \"Add Service\" button\nSelect \"Email\" from the long list of services\nPut in an e-mail address. This can be an e-mail address that forwards to multiple e-mail addresses, or just your own if only one person/account needs e-mail notifications.\nCheck \"Send From Author\" (probably) and \"Active\" (definitely).\n\nFor older versions of GitHub Enterprise:\n\nGo into your repository's Settings\nOpen the \"Service Hooks\" tab\nSelect \"Email\" from the long list of services\nPut in an e-mail address. This can be an e-mail address that forwards to multiple e-mail addresses, or just your own if only one person/account needs e-mail notifications.\nCheck \"Send From Author\" (probably) and \"Active\" (definitely).\n\nDone!\nUpdate GitHub plans on shutting down GitHub services before the end of the year. Refer"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Permission denied (publickey). fatal: The remote end hung up unexpectedly while pushing back to git repository [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 11 years ago.\n\n\n\n\nPossible Duplicate:\ngithub: newbie problems -> Permission denied (publickey). fatal: The remote end hung up unexpectedly \n\nplease see the below command ,\n$ git clone git://github.com/{user_name}/{project_name}.git\nInitialized empty Git repository in /home/dengx/rorBlog_demo/rorblog/.git/\n\nChanging the files and committing it, so i need to push back to git repository.\n$ git push [email\u00a0protected]/{user_name}/{project_name}.git master\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\nso, i copy the ssh-key of the repository to my file ~/.ssh/id_rsa.pub, and then push again,\n$ git push [email\u00a0protected]/{user_name}/{project_name}.git master\nAgent admitted failure to sign using the key.\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\nNow, what should i do ,  thanks any helps."}, {"role": "assistant", "content": "Googled \"Permission denied (publickey). fatal: The remote end hung up unexpectedly\", first result an exact SO dupe:\nGitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly which links here in the accepted answer (from the original poster, no less): http://help.github.com/linux-set-up-git/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github/compare: How to diff two different files (different file names, both in HEAD)?\n\nCan I use the github /compare to display the difference between two different source files in HEAD?\nHere is how I do it on the command line with git diff:\n\ngit diff HEAD:docs/tutorial/01-boxed-function-pointers.cpp HEAD:docs/tutorial/02-raw-actors.cpp\n\nMy best guess at the github syntax is the following. But it doesn't work:\nhttps://github.com/RossBencina/Fractorp/compare/HEAD:docs/tutorial/01-boxed-function-pointers.cpp...HEAD:docs/tutorial/02-raw-actors.cpp\nI specifically want an on-line pretty-printed HTML render of the diff.\nIf this can't be done with github, can anyone recommend a third-party website that will render diffs of two arbitrary files hosted on github?\nEdit #1:\nThanks to the answers who recommended https://www.diffchecker.com. However, I need to be able to specify the source files as current HEAD on github. Any third-party tool would need to automatically pull the latest source files from github repo URLs. I notice that http://www.mergely.com can import source from URLs. However I am looking for a live view that always uses the latest HEAD.\nThank you."}, {"role": "assistant", "content": "I sometimes use Diff Checker tool on the diffchecker website. It is an online diff tool to compare text differences between two text files.\nLink: https://www.diffchecker.com/diff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Max length of git branch name\n\nI want to understand what is maximum allowed size of a git branch name.\nI am trying to create some long names (as an experiment) so a name with 370 characters was valid, but 380 characters gave me fatal: Failed to lock ref for update: File name too long\nSo the questions are: what is the maximum number of characters that can be in git branch name? Does it depend on the system? Is it possible to create long branch name in a repository that will be rejected on remote repository (i.e. Github)?"}, {"role": "assistant", "content": "The 'File name too long' is indeed an error coming from your system. It is not a restriction in Git. I don't think there's a way of testing the maximum branch name lengths of other systems, like GitHub's, without experimenting - although I don't see why you would want to know...\n.\nSource: the error mentioned is thrown on line 291 of branch.c. \"File name too long\" is the standard description for the ENAMETOOLONG error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get a list of all the GitHub projects I've contributed to in the last year? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGitHub API: Repositories Contributed To\n\n                                (13 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI realize I can hit https://api.github.com/users/:user_id/repos to get a list of all the repos I own or have forked. But what I would like to do is figure out all of the projects I have contributed to (commits, pull requests, issues, etc.) over the last year. The events API lets me get the last 300 events, but I have contributed a lot more than that in the last twelve months. Is this possible?"}, {"role": "assistant", "content": "Thanks to a tweet from @caged, I wrote this Perl script to iterate over months in my contributions:\nuse v5.12;\nuse warnings;\nuse utf8;\nmy $uname = 'theory';\n\nmy %projects;\nfor my $year (2012..2014) {\n    for my $month (1..12) {\n        last if $year == 2014 && $month > 1;\n        my $from = sprintf '%4d-%02d-01', $year, $month;\n        my $to   = sprintf '%4d-%02d-01', $month == 12 ? ($year + 1, 1) : ($year, $month + 1);\n        my $res = `curl 'https://github.com/$uname?tab=contributions&from=$from&to=$to' | grep 'class=\"title\"'`;\n        while ($res =~ /href=\"([^\"?]+)/g) {\n            my (undef, $user, $repo) = split m{/} => $1;\n            $projects{\"$user/$repo\"}++;\n        }\n    }\n}\n\nsay \"$projects{$_}: $_\" for sort keys %projects;\n\nYeah, HTML scraping is kind of ugly, but did the trick for my needs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does one find out one's own Repo ID?\n\nWhile I definitely am not the owner of this private repo, I have been using it as part of a group for a school project, and the teacher is simply asking for the Repo's ID when sending him emails concerning anything. I'm sorry if this is blatantly obvious to a lot of people, but for the life of me I could not find any clear notes on this via github or google. I am not using a GUI for my git, strictly through a linux shell.\nHow do I find out the ID of the current Repo?"}, {"role": "assistant", "content": "If, like me, you were after the GitHub repository ID (as in - the number identifying the repo - not its name), then I found an easy way to do this via the metadata element on the main page of the repository on GitHub:\n\nView the page source (Right Click > View Page Source in Chrome or Firefox for example) \nSearch the page source and look for octolytics-dimension-repository_id. You should find something that looks like:\n<meta content=\"123456789\" name=\"octolytics-dimension-repository_id\" />\n\nIn this example, the ID of the repository is 123456789."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github unable to access SSL connect error\n\nI have been using git lots for the last few months.  git push worked 12 hours ago now all attempts generate errors, with verbose it produces this:\nGIT_CURL_VERBOSE=1 git push\n* Couldn't find host github.com in the .netrc file; using defaults\n* About to connect() to github.com port 443 (#0)\n* Trying 192.30.253.112... * Connected to github.com (192.30.253.112) port 443 (#0)\n* Initializing NSS with certpath: sql:/etc/pki/nssdb\n*   CAfile: /etc/pki/tls/certs/ca-bundle.crt\n   CApath: none\n* NSS error -12190\n* Expire cleared\n* Closing connection #0\nfatal: unable to access 'https://github.com/waveney/wmff/': SSL connect error\n\nAny bright ideas?  No changes to server from when it worked to now, restart made no difference"}, {"role": "assistant", "content": "I was having the same problem on various CentOS 6 VM's and it turned out to be an issue with stale curl and nss libraries (thanks to this thread for pointing me in the right direction: cURL SSL connect error 35 with NSS error -5961).\nThe fix that worked for me is just:\nyum update -y nss curl libcurl"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Embed Github contributions graph in website\n\nIs there a way to embed the Github contributions graph in HTML5?"}, {"role": "assistant", "content": "I wrote a JavaScript library to do that: github-calendar.\nHere is an example how to use it:\n<!-- Prepare a container for your calendar. -->\n<script\n  src=\"https://cdn.rawgit.com/IonicaBizau/github-calendar/gh-pages/dist/github-calendar.min.js\"\n>\n</script>\n\n<!-- Optionally, include the theme (if you don't want to struggle to write the CSS) -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.rawgit.com/IonicaBizau/github-calendar/gh-pages/dist/github-calendar.css\"\n/>\n\n<!-- Prepare a container for your calendar. -->\n<div class=\"calendar\">\n    <!-- Loading stuff -->\n    Loading the data just for you.\n</div>\n\n<script>\n    new GitHubCalendar(\".calendar\", \"your-username\");\n</script>\n\nHere you can see it in action:\n\nBasically, since we need cross domain requests we need a proxy. It makes a request to GitHub profile page (github.com/<user>) and then brings back the needed stuff from there.\nFor more information, check out the documentation on GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add Image to GitHub Readme.md from Google Drive\n\nI have the image in Drive, How could it be added to the Readme.md so as to display the image in readme.\nI had tried with the shared link, but it isn't working."}, {"role": "assistant", "content": "For example, I have a.jpg on the google drive.\n\nRight click the image and click Share...\nClick Advanced and change the Who can access option to Public on the web - Anyone on the Internet\nCopy the link to share and you will have something like \n\n\nhttps://drive.google.com/file/d/<FILE_ID>/view?usp=sharing\n\nCopy the <FILE_ID>  to make a link like this: \n\n\nhttps://drive.google.com/uc?export=view&id=<FILE_ID>\n\nInsert image in Markdown as ususal using the link from step 4.  For example: \n![image](https://drive.google.com/uc?export=view&id=<FILE_ID>)\n\nExample: I have this octocat image in google, and its file id is 1913oZeBZPBNiUuk8gu3ZSbLBA2l_VQtG. You can try ![image](https://drive.google.com/uc?export=view&id=1913oZeBZPBNiUuk8gu3ZSbLBA2l_VQtG) in your markdown file or even in this answer.\n\nHope this helps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use terminal commands with Github?\n\nI have forked a private repository (an iPhone project) as follows:\ncd nameofdirectory\ngit init\ngit clone forkedURL\n\nNow I want to push the changes done by me to my forked repository so that the main admin can review my written code and merge it with the main repository.\nHow can I push the changes done by me to my forked repository using terminal on MacOS?"}, {"role": "assistant", "content": "You can't push into other people's repositories. This is because push permanently gets code into their repository, which is not cool.\nWhat you should do, is to ask them to pull from your repository. This is done in GitHub by going to the other repository and sending a \"pull request\".\nThere is a very informative article on the GitHub's help itself: https://help.github.com/articles/using-pull-requests\n\nTo interact with your own repository, you have the following commands. I suggest you start reading on Git a bit more for these instructions (lots of materials online).\nTo add new files to the repository or add changed files to staged area:\n$ git add <files>\n\nTo commit them:\n$ git commit\n\nTo commit unstaged but changed files:\n$ git commit -a\n\nTo push to a repository (say origin):\n$ git push origin\n\nTo push only one of your branches (say master):\n$ git push origin master\n\nTo fetch the contents of another repository (say origin):\n$ git fetch origin\n\nTo fetch only one of the branches (say master):\n$ git fetch origin master\n\nTo merge a branch with the current branch (say other_branch):\n$ git merge other_branch\n\nNote that origin/master is the name of the branch you fetched in the previous step from origin. Therefore, updating your master branch from origin is done by:\n$ git fetch origin master\n$ git merge origin/master\n\nYou can read about all of these commands in their manual pages (either on your linux or online), or follow the GitHub helps:\n\nhttps://help.github.com/articles/create-a-repo for commit and push\nhttps://help.github.com/articles/fork-a-repo for fetch and merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github gist editing without changing URL\n\nI have a gist with some javascript code in a script tag, like so:\n<script src=\"https://raw.github.com/gist/b25dff23c2c4b4bd425a/f157aa95163311c4b58febb06b49ffd16419f642/images.js\"></script>\n\nAnd I will need to keep editing the JS file on github. However, when you edit a gist it changes the URL of the gist. How do I keep the same URL?"}, {"role": "assistant", "content": "Gist changed the path to this file pattern:\nhttps://gist.github.com/<USER_NAME>/<GIST_ID>/raw/<GIST_REVISION_ID>/<GIST_FILE_NAME>\n\nYou will notice that now the top answers' links are 404'ing.\nSimply apply this new pattern and voil\u00e0!   \nhttps://gist.github.com/<USER_NAME>/<GIST_ID>/raw/<GIST_FILE_NAME>\n\nFor instance:\nhttps://gist.githubusercontent.com/wesbos/cd16b8b1815825f111a2/raw/lol.js"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git branch name - case sensitive or insensitive?\n\nI am a new git user and recently been handed with an out of date git repository to look after.\nThis is the original state ( output by git show-branch):\n! [cr232] CR 232 Release\n        * [dev] Style Changes\n---------------\n        *   [dev] Style Changes\n        *   [dev^] SMS 5.4\n        *   [dev~2] Logo Change\n        *   [dev~3] SMS 5.3\n        *   [dev~4] SMS 5.2\n        *   [dev~5] SIT R-0.3.3 EDW SMS Layers\n        *   [dev~6] SIT Release R 0.3.0\n       +*   [cr232] CR 232 Release\n       +*   [cr232^] Dashboard Fix\n       +*   [cr232~2] Release for system testing\n\nNote that there is a branch called \u2018dev\u2019 at this point. Note that highlighted there are several references to dev (i.e. dev, dev^, dev~2 etc).\nFor my development purpose, I was trying to come up with a branch called \u2018DEV\u2019, all capital.\nSo I went ahead and create new branch (git branch DEV) and now running git show-branch \u2013date-order:\n! [DEV] Style Changes\n    ! [cr232] CR 232 Release\n        * [dev] Style Changes\n---------------\n        *   [DEV] Style Changes\n        *   [DEV^] SMS 5.4\n        *   [DEV~2] Logo Change\n        *   [DEV~3] SMS 5.3\n        *   [DEV~4] SMS 5.2\n        *   [DEV~5] SIT R-0.3.3 EDW SMS Layers\n        *   [DEV~6] SIT Release R 0.3.0\n       +*   [cr232] CR 232 Release\n       +*   [cr232^] Dashboard Fix\n       +*   [cr232~2] Release for system testing\n\nNote that both dev and DEV are listed as branch. Note also that on the 5th line the references to dev have now changed to DEV (i.e. DEV, DEV^, DEV~2 etc).\nWhat is the 5th line output referring to? I would expect it to remain \u201cdev\u201d instead of being changed to \u201cDEV\u201d as the descriptions next to it refers to the description of old work during \u201cdev\u201d branch.\nI am trying to return back to how it was by modifying the DEV branch name to DV (running git branch \u2013m DEV DV) and showing the branch now look like:\n! [DV] Style Changes\n    ! [cr232] CR 232 Release\n        * [dev] Style Changes\n---------------\n        *   [DV] Style Changes\n        *   [DV^] SMS 5.4\n        *   [DV~2] Logo Change\n        *   [DV~3] SMS 5.3\n        *   [DV~4] SMS 5.2\n        *   [DV~5] SIT R-0.3.3 EDW SMS Layers\n        *   [DV~6] SIT Release R 0.3.0\n       +*   [cr232] CR 232 Release\n       +*   [cr232^] Dashboard Fix\n       +*   [cr232~2] Release for system testing\n\nNote that the branch is now including DV and dev. Note also that the 5th line references to dev have now changed to DV (i.e. DV, DV^, DV~2 etc).\nIs there any way to get back to how it was during original state in term of the DV references? Did the git got confused and renamed my historic information with a branch that is similar and only differs by capital case?\nPlease assist on how I can fix this. Thanks heaps"}, {"role": "assistant", "content": "Answering just the question in the subject line, without addressing anything about git show-branch (like ElpieKay, I never actually use git show-branch; it seems mainly mis-informative):\nGit branch names\u2014and tag names, and all other reference names, as Git calls them\u2014were originally intended to be case-sensitive.\nThis all works perfectly on Linux / Unix machines, where Git's code is case-sensitive to start with.  When Git stores branch names in the file system as file names (which it only does sometimes), the file system is also case-sensitive.1\nIt sometimes fails on Windows and some MacOS systems.  Specifically, it fails when Git stores references in individual files, whose names are derived from the reference name, and those file names are case-insensitive (e.g., case-preserving, but fold case during name-matching; or even converting everything to uppercase-only, as in the really old FAT 8.3 format, but we can hope no modern file system does this).\nAs noted above, Git does not always store reference names as file names.  In fact, on initial clone, all the names are in a single file called .git/packed-refs,2 so at this point they are case sensitive.  But they become \"unpacked\" over time,3 and then on some systems they become case-folding.\nBecause it sometimes fails on some systems, it's generally best to avoid using multiple reference names that differ only in case.\n\n1Of course, on modern Unix/Linux systems, you can now get access to case-preserving-but-case-insensitive file systems, and Windows and MacOS can now be told not to do case-folding for some file systems.  (But if you change from the defaults, expect software that is intended for your box to fail, because it will.  Things like Photoshop internally try to use files named foo and FOO and expect this to refer to the same file!)\n2This packed-references file has been around for quite a while, but not forever, and very early versions of Git may not use it.  Internally, Git is acquiring a new \"pluggable reference name interface\" and future versions of Git might use neither this file, nor individual per-reference files.\n3In general, creating or updating a reference causes an unpacked reference file to come into existence.  Running git pack-refs --all will replace unpacked references with packed ones, restoring full case-sensitivity.  Without --all, git pack-refs only packs already-packed references, which is largely a useless mode of operation (it was intended for a case that is no longer used)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using GitHub Actions to automatically update the repo's submodules\n\nTitle says it all. I tried using a bunch of different git commands like git submodule update --remote --merge and git submodule foreach git pull origin master which work fine on my computer, but not when it's run on GitHub actions.\nI tried adding git status to the workflow and the status just shows \"Up to date with origin/master, nothing to commit\" or something like that."}, {"role": "assistant", "content": "If you need to auto update references to your submodules via GitHub actions:\nCreate a new workflow in your parent repository that will synchronize references:\nname: 'Submodules Sync'\n\non:\n  # Allows you to run this workflow manually from the Actions tab or through HTTP API\n  workflow_dispatch:\n\njobs:\n  sync:\n    name: 'Submodules Sync'\n    runs-on: ubuntu-latest\n\n    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n    # Checkout the repository to the GitHub Actions runner\n    - name: Checkout\n      uses: actions/checkout@v2\n      with:\n        token: ${{ secrets.CI_TOKEN }}\n        submodules: true\n\n    # Update references\n    - name: Git Submodule Update\n      run: |\n        git pull --recurse-submodules\n        git submodule update --remote --recursive\n\n    - name: Commit update\n      run: |\n        git config --global user.name 'Git bot'\n        git config --global user.email '[email\u00a0protected]'\n        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n        git commit -am \"Auto updated submodule references\" && git push || echo \"No changes to commit\"\n\nwhere\n\nCI_TOKEN is a security token variable in GitHub that have 'Read-Write' access to the parent repository, and 'Read' access to submodule repositories.\n\n\nIn the child (submodule) GitHub action notify the parent about changes.\nname: 'Submodule Notify Parent'\n\non:\n  push:\n    branches:\n      - main    \n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  notify:\n    name: 'Submodule Notify Parent'\n    runs-on: ubuntu-latest\n\n    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n    - name: Github REST API Call\n      env:\n        CI_TOKEN: ${{ secrets.CI_TOKEN }}\n        PARENT_REPO: <my_organization/my-app>\n        PARENT_BRANCH: develop\n        WORKFLOW_ID: <9999999>\n      run: |\n        curl -fL --retry 3 -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: token ${{ env.CI_TOKEN }}\" https://api.github.com/repos/${{ env.PARENT_REPO }}/actions/workflows/${{ env.WORKFLOW_ID }}/dispatches -d '{\"ref\":\"${{ env.PARENT_BRANCH }}\"}'\n\nwhere\n\nPARENT_REPO - name of the parent repository as it is in Github (my_org/my_app or just my_app if there is no organization).\nWORKFLOW_ID - parent Wofklow ID to call via rest API. To find it run curl using your CI_TOKEN:\ncurl -X GET -H \"Authorization: token $CI_TOKEN\" https://api.github.com/repos/$PARENT_REPO/actions/workflows\n\n\n\nRepeat the workflow creation for every submodule.\n\nP.S. For me it works very stable. Please add information about existing github actions with the above logic if there is any."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git error - can't push to github - pack-objects died of signal 9\n\nI added some files to the repo, committed, and attempted to push to Github:\n$ git add .  \n$ git commit -m 'bla'  \n$ git push origin master\n\nI am getting an error when I try to push to Github.  \nCounting objects: 84, done.  \nDelta compression using up to 2 threads.  \nerror: pack-objects died of signal 9  \nerror: failed to push some refs to '[email\u00a0protected]:xxxxx/xxxxx.git'\n\nAll was working fine before I went on vacation 2 weeks ago. Nothing has changed in the interim as far as I know.  The config file seems to be fine.  And git push -f also generates the same errors as above."}, {"role": "assistant", "content": "Try this:\ngit config --global pack.windowMemory \"32m\"\n\npack.windowMemory::\n    The maximum size of memory that is consumed by each thread\n    in linkgit:git-pack-objects[1] for pack window memory when\n    no limit is given on the command line.  The value can be\n    suffixed with \"k\", \"m\", or \"g\".  When left unconfigured (or\n    set explicitly to 0), there will be no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Finding total contributions of a user from GitHub API\n\nI am trying to extract the below info for any user from GitHub.\n\nIs there a way/API exposed in GitHub REST API where we can get this information directly?"}, {"role": "assistant", "content": "Answers for 2019, Use GitHub API V4.\nFirst go to GitHub to apply for a token: https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. step 7, scopes select only read:user\ncUrl\ncurl -H \"Authorization: bearer token\" -X POST -d '{\"query\":\"query {\\n  user(login: \\\"MeiK2333\\\") {\\n    name\\n    contributionsCollection {\\n      contributionCalendar {\\n        colors\\n        totalContributions\\n        weeks {\\n          contributionDays {\\n            color\\n            contributionCount\\n            date\\n            weekday\\n          }\\n          firstDay\\n        }\\n      }\\n    }\\n  }\\n}\"}' https://api.github.com/graphql\n\nJavaScript\nasync function getContributions(token, username) {\n    const headers = {\n        'Authorization': `bearer ${token}`,\n    }\n    const body = {\n        \"query\": `query {\n            user(login: \"${username}\") {\n              name\n              contributionsCollection {\n                contributionCalendar {\n                  colors\n                  totalContributions\n                  weeks {\n                    contributionDays {\n                      color\n                      contributionCount\n                      date\n                      weekday\n                    }\n                    firstDay\n                  }\n                }\n              }\n            }\n          }`\n    }\n    const response = await fetch('https://api.github.com/graphql', { method: 'POST', body: JSON.stringify(body), headers: headers })\n    const data = await response.json()\n    return data\n}\n\nconst data = await getContributions('token', 'MeiK2333')\nconsole.log(data)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I receive Github Webhooks in Python\n\nGithub offers to send Post-receive hooks to an URL of your choice when there's activity on your repo.\nI want to write a small Python command-line/background (i.e. no GUI or webapp) application running on my computer (later on a NAS), which continually listens for those incoming POST requests, and once a POST is received from Github, it processes the JSON information contained within. Processing the json as soon as I have it is no problem.\nThe POST can come from a small number of IPs given by github; I plan/hope to specify a port on my computer where it should get sent.\nThe problem is, I don't know enough about web technologies to deal with the vast number of options you find when searching.. do I use Django, Requests, sockets,Flask, microframeworks...? I don't know what most of the terms involved mean, and most sound like they offer too much/are too big to solve my problem - I'm simply overwhelmed and don't know where to start. \nMost tutorials about POST/GET I could find seem to be concerned with either sending or directly requesting data from a website, but not with continually listening for it.\nI feel the problem is not really a difficult one, and will boil down to a couple of lines, once I know where to go/how to do it. Can anybody offer pointers/tutorials/examples/sample code?"}, {"role": "assistant", "content": "First thing is, web is request-response based. So something will request your link, and you will respond accordingly. Your server application will be continuously listening on a port; that you don't have to worry about.\nHere is the similar version in Flask (my micro framework of choice):\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route('/',methods=['POST'])\ndef foo():\n   data = json.loads(request.data)\n   print \"New commit by: {}\".format(data['commits'][0]['author']['name'])\n   return \"OK\"\n\nif __name__ == '__main__':\n   app.run()\n\nHere is a sample run, using the example from github:\nRunning the server (the above code is saved in sample.py):\nburhan@lenux:~$ python sample.py \n * Running on http://127.0.0.1:5000/\n\nHere is a request to the server, basically what github will do:\nburhan@lenux:~$ http POST http://127.0.0.1:5000 < sample.json\nHTTP/1.0 200 OK\nContent-Length: 2\nContent-Type: text/html; charset=utf-8\nDate: Sun, 27 Jan 2013 19:07:56 GMT\nServer: Werkzeug/0.8.3 Python/2.7.3\n\nOK # <-- this is the response the client gets\n\nHere is the output at the server:\nNew commit by: Chris Wanstrath\n127.0.0.1 - - [27/Jan/2013 22:07:56] \"POST / HTTP/1.1\" 200 -"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git how to give people push access that needs to be merged in by organizers?\n\nMy project has quite a few people and I want to give them all push & pull access because right now, they forked the project and when they make changes, they have to push to their fork and send me a pull request. Instead, I want them to be able to clone the main project at myusername/project and be able to push to it automatically.\nSo how would I do that?"}, {"role": "assistant", "content": "Ask for the username of the person you're adding as a collaborator. If they don't have one, they can sign up for GitHub.\nIn the top right corner of any page, click your username.\nOn your profile page, click the Repositories tab, then click the name of your repository.\nIn your repository's right sidebar, click Settings.\nClick the \"Collaborators\" tab.\nStart typing the collaborator's username.\nSelect the user from the drop-down menu.\nClick Add."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to host image at https://user-images.githubusercontent.com/{path}/{filename}?\n\nI'm a developer, I need many screenshots to put in readme.md file where to store or host it? I found out that some people use https://user-images.githubusercontent.com/{path}/{filename} to host their image and link them with readme.md file. How to put images there?"}, {"role": "assistant", "content": "You can create a .github/images directory in your repo and add all your assets there.\nAssets added here will be available on\nhttps://raw.githubusercontent.com/{github_user_name}/{repo_name}/{branch}/.github/images/{asset_name}.{asset_extension}\n\nOnce you push .github/images directory to remote your assets should be available through the mentioned link.\nAnd https://user-images.githubusercontent.com/ is used by GitHub to store images added in issues, PR's, etc.,\nHope it helps!\nUPDATE:\nYou can also create an assets directory in the root of your repo and use a relative path to the image.\n/assets/{asset_name}.{asset_extension}\n\n![Alt Text](/assets/{asset_name}.{asset_extension})\n\nWith this, images can be previewed without actually pushing to remote.\nHosting on user-images.githubusercontent.com subdomain\nIf you do not intend to store any images in your repository, you can always use this https://user-images.githubusercontent.com/\nTo host your images in user-images subdomain you can do the following\n\nClick New Issue this will open up the issue creator.\nDrag and Drop or Upload your image in the body content\nWait for upload completion and copy the URL for the image.\nCancel the issue creation and continue.\n\nBut you will not have access to these images once uploaded, you cannot delete them. You can always contact GitHub Support if required to delete."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deleting SSH keys terminal\n\nHow would I delete github_rsa.pub and id_rsa.pub SSH certificates from my mac computer using mac terminal?"}, {"role": "assistant", "content": "Depending on where they are located:\nrm github_rsa.pub\n\nand\nrm id_rsa.pub\n\nIf they are in the default location then you can do\nrm ~/.ssh/github_rsa.pub\n\nand\nrm ~/.ssh/id_rsa.pub\n\nHowever this is likely answered already elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "pip: pulling updates from remote git repository\n\nI installed scikit-learn from GitHub a couple of weeks ago:\npip install git+git://github.com/scikit-learn/scikit-learn@master\n\nI went to GitHub and there have been several changes to the master branch since then.\nHow can I update my local installation of scikit-learn?\nI tried pip install scikit-learn --upgrade but I got:\nRequirement already up-to-date\nCleaning up ..."}, {"role": "assistant", "content": "pip searches for the library in the Python package index. Your version is newer than the newest one in there, so pip won't update it.\nYou'll have to reinstall from Git:\n$ pip install git+git://github.com/scikit-learn/scikit-learn@main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitFlow: merge to master first or after prod release?\n\nLearning GitFlow and I have some concerns that I don't see addressed in any of the docs/articles I've read about it.\nAt some point code on the develop branch needs to be deployed to a QA/staging environment and tested rigorously. So with GitFlow you cut a release branch off of develop, and then you deploy release to said staging environment.\nFirst, just wanted to clarify something real quick: the very first time a particular project/repo goes through this process, you'll actually be forking/creating this new release branch from develop, yes? And that all other times in the future, you're simply merging develop into release, yes?\nSo then QA tests the release branch on the staging env, all looks good, and we're ready to deploy to prod. Do you:\n\nDeploy to prod and then merge release into master? ; or\nMerge release to master and then deploy to prod?\n\nI ask because it seems like in the former case you would need to deploy the release branch to prod, then deploy to prod, and then merge to master. Which sounds OK, but often prod and non-prod environments are not identical and code that runs perfectly fine in staging chokes the second it fires up on prod servers. I know GitFlow supports the concepts of hotfix branches but they are reserved for minor fixes. In the case of a complicated fix that requires a rollback/backout release, we now have \"dirty code\" (code that breaks prod for some reason) merged into master.\nAnd in the latter case, it might take hours or even days (especially if you need to involve IT/Ops to do prod deploys) from the time you merge and put in the prod release request in, to the time the prod deploy actually occurs. And during this time you have a master branch that says \"features X, Y and Z are in prod\" but they are actually not.\nI'm wondering if GitFlow actually solves this somehow or what the known workarounds to either case are."}, {"role": "assistant", "content": "The project I work in is very chaotic, decisions change in a matter of minutes, so my strategy is to procrastinate as much as possible software configuration management decisions.\nParticularly, merging into master: we only merge to master after we deployed in production and we have a confirmation e-mail that smoke tests worked fine. This way we embrace chaos by managing the risk of decision changes, rollbacks in the deploy, technical problems or whichever issue may happen.\nAt the beginning we merged into master before going into production, but technical issues, rollbacks, management decisions at the very last minute... caused lots of problems to us, so we changed the strategy, and it's been working fine for the last 3 years.\nIf, eventually, after going to production some regression is found, that's a hotfix and must be handled like that :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error fatal: unable to stat '*': No such file or directory\n\nI ran into this error, and found very little documentation on how to fix it online. I got the error by trying to run the command git add ., and received this response:\nfatal: unable to stat 'myPathToAFile': No such file or directory"}, {"role": "assistant", "content": "To solve the problem, I removed the file from git, then re-added it by doing the following:\ngit rm \"myPathToAFile\"\ngit add .\ngit commit -am 'my commit'\nHope this helps someone else!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull - smudge filter lfs failed\n\nI'm attempting to pull code onto our server from Github (git pull origin master). \nThis worked before. However, now, I'm receiving the following error:\n$ git pull origin master\nFrom github.com:org-name/repo-name\n * branch              master     -> FETCH_HEAD\nUpdating 8024663e..e458e5c1\nfatal: path/to/file.msi: smudge filter lfs failed\n\nI ran the same command with GIT_TRACE=1:\n$ GIT_TRACE=1 git pull origin master\n19:25:26.331064 git.c:371               trace: built-in: git 'pull' 'origin' 'master'\n19:25:26.333947 run-command.c:350       trace: run_command: 'fetch' '--update-head-ok' 'origin' 'master'\n19:25:26.334661 exec_cmd.c:116          trace: exec: 'git' 'fetch' '--update-head-ok' 'origin' 'master'\n19:25:26.337625 git.c:371               trace: built-in: git 'fetch' '--update-head-ok' 'origin' 'master'\n19:25:26.344457 run-command.c:350       trace: run_command: 'ssh' '[email\u00a0protected]' 'git-upload-pack '\\''org-name/repo-name.git'\\'''\n19:25:26.925565 run-command.c:350       trace: run_command: 'rev-list' '--objects' '--stdin' '--not' '--all' '--quiet'\n19:25:26.937016 run-command.c:350       trace: run_command: 'rev-list' '--objects' '--stdin' '--not' '--all' '--quiet'\n19:25:26.937833 exec_cmd.c:116          trace: exec: 'git' 'rev-list' '--objects' '--stdin' '--not' '--all' '--quiet'\n19:25:26.941292 git.c:371               trace: built-in: git 'rev-list' '--objects' '--stdin' '--not' '--all' '--quiet'\nFrom github.com:org-name/repo-name\n * branch              master     -> FETCH_HEAD\n19:25:26.994717 run-command.c:1130      run_processes_parallel: preparing to run up to 1 tasks\n19:25:26.994880 run-command.c:1162      run_processes_parallel: done\n19:25:26.995780 run-command.c:350       trace: run_command: 'gc' '--auto'\n19:25:26.996735 exec_cmd.c:116          trace: exec: 'git' 'gc' '--auto'\n19:25:27.000596 git.c:371               trace: built-in: git 'gc' '--auto'\n19:25:27.002716 run-command.c:350       trace: run_command: 'merge' 'FETCH_HEAD'\n19:25:27.003445 exec_cmd.c:116          trace: exec: 'git' 'merge' 'FETCH_HEAD'\n19:25:27.006078 git.c:371               trace: built-in: git 'merge' 'FETCH_HEAD'\nUpdating 8024663e..e458e5c1\n19:25:27.420945 run-command.c:350       trace: run_command: 'git-lfs filter-process'\n19:25:27.470865 run-command.c:209       trace: exec: '/bin/sh' '-c' 'git-lfs filter-process' 'git-lfs filter-process'\ntrace git-lfs: run_command: 'git' version\ntrace git-lfs: run_command: 'git' config -l\ntrace git-lfs: Initialize filter-process\ntrace git-lfs: Read filter-process request.\ntrace git-lfs: Read filter-process request.\nfatal: path/to/file.msi: smudge filter lfs failed\n19:25:27.998635 run-command.c:42        trace: run_command: running exit handler for pid 18022\n\nI verified my ssh credentials are correct:\n$ ssh -T [email\u00a0protected]\nHi user-name! You've successfully authenticated, but GitHub does not provide shell access.\n\nAnd, in fact, I know the credentials are ok, because the pull will bring down the .gitattributes file (along with other small file changes I've done):\n file.msi filter=lfs diff=lfs merge=lfs -text\n\nI verified Git LFS appears to be configured correctly:\n$ git config -l\nfilter.lfs.process=git-lfs filter-process\nfilter.lfs.required=true\nfilter.lfs.clean=git-lfs clean -- %f\nfilter.lfs.smudge=git-lfs smudge -- %f\n...\n\nI found this Github issue, and I tried all three steps:\n$ echo \"protocol=https\\nhost=github.com\" | git credential fill\n$ echo \"protocol=https\\nhost=github.com\" | git credential fill | git credential reject\n$ echo \"protocol=https\\nhost=github.com\" | git credential fill | git credential approve\n\nThe first step asked for my username. So, as it says, it doesn't appear that Git LFS is caching anything.\nI don't have much experience with Git LFS, and frankly, I am out of ideas on how to approach this problem. \nThere are two actions I took recently that might have broken something:\n\nI removed a user from our repository. The server's ssh key belonged to the user. We added a deployment key, but I read that Git LFS didn't support deployment keys (although, it appears that support was added recently). So, we switched to a user key. Both keys were confirmed with the ssh -T [email\u00a0protected] test. Still, perhaps there's an authentication issue? \nI pulled the repository down onto a server without Git LFS. I didn't realize it at the time, but the files transferred to the destination server fine. However, perhaps this broke something in the repository?\n\nAny help you could lend would be greatly appreciated. \nPS - I'm sorry if my anonymizing creates confusion. I replaced our actual IP address with X.X.X.X; our organization name with org-name; our repo name with repo-name; our Github user with user-name; the file name with file.msi; and, a few more things. \nEDIT 5/16/17: Added language to make it clear that it used to work... and that I broke it."}, {"role": "assistant", "content": "In my case the SSH-authenticated repository was updated to use LFS from another client and on my side Git-LFS didn't know about the SSH remote-url. What I did to fix it was the following:\nCopy the URL configured in remote.origin.url (push URL for origin) to lfs.url (the URL LFS uses):\n$ git config lfs.url $(git config remote.origin.url)\n\n(If your remote is not named origin then change to your remote name.)\nThen run\n$ git config lfs.url\n\nto show the URL and confirm that it does indeed contain an SSH url, and not some HTTP/HTTPS url.\nThen you can\n$ git pull\n\nDone.\n\nIf you screwed up before and main and origin/main have somehow diverged as was the case for me then you might need to git checkout -fB main origin/main (this doesn't ask and overwrites the local version of the main branch, so beware and execute carefully!).\nSee also: https://github.com/git-lfs/git-lfs/issues/2661#issuecomment-335903332"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull in changes from a Github fork\n\nSomeone forked a Github project of mine and made some changes. How can I merge the changes back in to my upstream version? \nAlso, is it possible to pull in just a specific commit?\nWhat I'm looking is if there is a way to pull a specific commit instead of the entire branch."}, {"role": "assistant", "content": "Pulling in a single commit would be a cherry-pick and would rewrite the commit ID (and mark you as the committer while retaining the author).  The process is pretty straightforward, though:\ngit fetch git://github.com/user/project.git\ngit cherry-pick <SHA-COMMIT-ID>\n\nYou get the SHA from the repository log, for example:\ngit log --oneline\n\nb019cc0 Check whether we have <linux/compiler.h>.\n0920898 Include <linux/compiler.h> before including <linux/usbdevice_fs.h>.\ncbf0ba1 Add DLT_DBUS, for raw D-Bus messages.\n77ed5cd Libnl 2.x returns its own error codes, not errnos; handle that.\n\nWith git cherry-pick 0920898 you bring the respective commit to your current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git pull origin master does not update origin/master?\n\nAccording to the documentation, git pull performs a git fetch then a git merge, however in that case performing git pull origin master should perform a git fetch origin master right?  However,  it does not appear to be doing so.  Here is an example.\nSupposed my remote origin master (on GitHub in my case) has the following history:\ncommit 1111111 : my first commit\ncommit 2222222 : a commit from someone else\n\nand I only have my first commit locally as doing following shows\ngit checkout master\ngit log --pretty=format:'%h' -n 1\n1111111\n\ngit checkout origin/master\ngit log --pretty=format:'%h' -n 1\n1111111\n\nFrom here I do my pull and look at the results as follows:\ngit checkout master\ngit pull origin master\n\ngit log --pretty=format:'%h' -n 1\n2222222\n\ngit checkout origin/master\ngit log --pretty=format:'%h' -n 1\n1111111\n\nAs can be seen, the pull did in fact update my master branch with the new commit(s) from the remote origin, but my local origin/master is still where it was.  Forcing me to do the following\ngit fetch origin master\n\ngit checkout origin/master\ngit log --pretty=format:'%h' -n 1\n2222222\n\nIs this correct behavior for git pull or might I have something miss configured?  I looked through the git pull man page and didn't see anything that suggested this but I may have missed it."}, {"role": "assistant", "content": "It's a bit weird, but if you use git pull [remote] <refspec> it actually doesn't update the remote refs. It sort of makes sense if you think about it a certain way: since you're specifying a specific ref to fetch, it doesn't have to look up anything about your remote branches, so it doesn't inherently know what remote branch it should update. It of course could figure it out, and I wouldn't be surprised if it gets fixed eventually, but that's the existing behavior. (There may be messages on the mailing list about it - I don't know.)\nYou can easily work around it, though. If you use git pull origin/master, since you're specifying what to fetch via a remote branch, it should update that remote branch. And if you're on your master branch anyway (or any other branch tracking origin/master), you can just do git pull and let it fill in the defaults, and it will update remote branches.\nThis is documented in the git-pull man page, most concisely under EXAMPLES but also elsewhere. The relevant part:\n\nMerge into the current branch the remote branch next:\n$ git pull origin next\n\nThis leaves a copy of next temporarily in FETCH_HEAD, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:\n$ git fetch origin\n$ git merge origin/next"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does 'git log --graph' or 'hg graphlog' work?\n\nI know that the history in Git is stored in a data structure called a DAG. I've heard about DFS and know it's somewhat related.\nI'm curious, how do programs such as git log --graph or hg graphlog draw the history? I always thought it's quite complicated to draw the lanes and everything in such a nice way.\nCould someone write some pseudo code that demonstrates it?\nnote: I tried looking around Git or hg's code but it's very hard to follow and get a general idea of what's going on."}, {"role": "assistant", "content": "First, one obtains a list of commits (as with git rev-list), and parents of each commit. A \"column reservation list\" is kept in memory.\nFor each commit then:\n\nIf the commit has no column reserved for it, assign it to a free column. This is how the branch heads will start.\nPrint the tree graphics according to the column reservation list, and then the commit message\nThe reservation's list entry for the current column/commit is updated with the first parent of the current commit, such that the parent is going to be printed in the same column.\nOther parents get a new free column.\nIf this was a merge, the next line will try to link the second parent to a column where the commit is expected (this makes for the loops and the \"\u2261 bridge\")\n\nExample showing output of git-forest on aufs2-util with an extra commit to have more than one branch).\n\nWith lookahead, one can anticipate how far down the merge point will be and squeeze the wood between two columns to give a more aesthetically pleasing result."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the current workflow to debug Travis builds locally?\n\nOne used to be able to download Vagrant boxes to debug Travis builds (for GitHub projects for instance). Apparently, this is no longer possible, so how do people currently debug complex Travis build chains locally?"}, {"role": "assistant", "content": "One way to inspect the build (not to debug, sorry) is to send the build logs to another server on failure.\nHere is an example:\nafter_failure\n  - sudo tar -czf /tmp/build-${TRAVIS_BUILD_NUMBER}-logs.tgz your-application-logs/\n  - scp /tmp/build-${TRAVIS_BUILD_NUMBER}-logs.tgz [email\u00a0protected]:~/logs\n\nYou could send them via email, store them on a storage server or whatever.\nThese logs would be useful to you if you run your tests in a debug mode and include our own logs as well in the tarball."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "IntelliJ - Git is not installed: Cannot identify version of git executable: no response\n\nI'm using IntelliJ on my MacBook and get this message every time I open the app. I already checked the Preferences > Version Control > Git under \"Path to Git executable\" and set this path to the path that is shown in my terminal for whereis git. Also, testing the path in the IntelliJ settings returns a \"Git version is 2.30.1\". What else can I do to fix this problem?"}, {"role": "assistant", "content": "In my case the issue was solved by invalidating cache and restarting IDE. Simply go to Files -> Invalidate Caches -> Invalidate and Restart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Issue in installing php7.2-mcrypt\n\nAs I'm trying to load mcrypt extension module from PHP 7.2.X version.\nSo I tried to make use of PECL library that is compatible to the current version of my PHP, in order to get installed\nand followed this link:\nInstalling mcrypt on PHP 7.2 during installation!\nThese below are the result's obtained after executing certain commands on the terminal.\nroot@YYY:/var/www/html/orocrm# apt install php-pear\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following package was automatically installed and is no longer required:\n  libllvm4.0\nUse 'sudo apt autoremove' to remove it.\nThe following NEW packages will be installed:\n  php-pear\n0 upgraded, 1 newly installed, 0 to remove and 14 not upgraded.\nNeed to get 285 kB of archives.\nAfter this operation, 2,107 kB of additional disk space will be used.\nGet:1 http://ppa.launchpad.net/ondrej/php/ubuntu xenial/main amd64 php-pear all 1:1.10.5+submodules+notgz-1+ubuntu16.04.1+deb.sury.org+1 [285 kB]\nFetched 285 kB in 1s (230 kB/s)   \nSelecting previously unselected package php-pear.\n(Reading database ... 215503 files and directories currently installed.)\nPreparing to unpack .../php-pear_1%3a1.10.5+submodules+notgz-1+ubuntu16.04.1+deb.sury.org+1_all.deb ...\nUnpacking php-pear (1:1.10.5+submodules+notgz-1+ubuntu16.04.1+deb.sury.org+1) ...\nProcessing triggers for man-db (2.7.5-1) ...\nSetting up php-pear (1:1.10.5+submodules+notgz-1+ubuntu16.04.1+deb.sury.org+1) ...\n\nYYY@YYY:/var/www/html/orocrm$ sudo apt-get -y install gcc make autoconf libc-dev pkg-config\n[sudo] password for YYY: \nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nNote, selecting 'libc6-dev' instead of 'libc-dev'\ngcc is already the newest version (4:5.3.1-1ubuntu1).\nmake is already the newest version (4.1-6).\npkg-config is already the newest version (0.29.1-0ubuntu1).\nlibc6-dev is already the newest version (2.23-0ubuntu9).\nThe following package was automatically installed and is no longer required:\n  libllvm4.0\nUse 'sudo apt autoremove' to remove it.\nSuggested packages:\n  autoconf-archive gnu-standards autoconf-doc libtool\nThe following NEW packages will be installed:\n  autoconf automake autotools-dev libsigsegv2 m4\n0 upgraded, 5 newly installed, 0 to remove and 14 not upgraded.\nNeed to get 1,079 kB of archives.\nAfter this operation, 3,998 kB of additional disk space will be used.\nGet:1 http://in.archive.ubuntu.com/ubuntu xenial/main amd64 libsigsegv2 amd64 2.10-4 [14.1 kB]\nGet:2 http://in.archive.ubuntu.com/ubuntu xenial/main amd64 m4 amd64 1.4.17-5 [195 kB]\nGet:3 http://in.archive.ubuntu.com/ubuntu xenial/main amd64 autoconf all 2.69-9 [321 kB]\nGet:4 http://in.archive.ubuntu.com/ubuntu xenial/main amd64 autotools-dev all 20150820.1 [39.8 kB]\nGet:5 http://in.archive.ubuntu.com/ubuntu xenial/main amd64 automake all 1:1.15-4ubuntu1 [510 kB]\nFetched 1,079 kB in 2s (447 kB/s) \nSelecting previously unselected package libsigsegv2:amd64.\n(Reading database ... 215198 files and directories currently installed.)\nPreparing to unpack .../libsigsegv2_2.10-4_amd64.deb ...\nUnpacking libsigsegv2:amd64 (2.10-4) ...\nSelecting previously unselected package m4.\nPreparing to unpack .../archives/m4_1.4.17-5_amd64.deb ...\nUnpacking m4 (1.4.17-5) ...\nSelecting previously unselected package autoconf.\nPreparing to unpack .../autoconf_2.69-9_all.deb ...\nUnpacking autoconf (2.69-9) ...\nSelecting previously unselected package autotools-dev.\nPreparing to unpack .../autotools-dev_20150820.1_all.deb ...\nUnpacking autotools-dev (20150820.1) ...\nSelecting previously unselected package automake.\nPreparing to unpack .../automake_1%3a1.15-4ubuntu1_all.deb ...\nUnpacking automake (1:1.15-4ubuntu1) ...\nProcessing triggers for install-info (6.1.0.dfsg.1-5) ...\nProcessing triggers for man-db (2.7.5-1) ...\nProcessing triggers for doc-base (0.10.7) ...\nProcessing 1 added doc-base file...\nSetting up libsigsegv2:amd64 (2.10-4) ...\nSetting up m4 (1.4.17-5) ...\nSetting up autoconf (2.69-9) ...\nSetting up autotools-dev (20150820.1) ...\nSetting up automake (1:1.15-4ubuntu1) ...\nupdate-alternatives: using /usr/bin/automake-1.15 to provide /usr/bin/automake (automake) in auto mode\nProcessing triggers for libc-bin (2.23-0ubuntu9) ...\n\nYYY@YYY:/var/www/html/orocrm$ sudo apt-get -y install libmcrypt-dev\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following package was automatically installed and is no longer required:\n  libllvm4.0\nUse 'sudo apt autoremove' to remove it.\nThe following NEW packages will be installed:\n  libmcrypt-dev\n0 upgraded, 1 newly installed, 0 to remove and 14 not upgraded.\nNeed to get 83.7 kB of archives.\nAfter this operation, 438 kB of additional disk space will be used.\nGet:1 http://in.archive.ubuntu.com/ubuntu xenial/universe amd64 libmcrypt-dev amd64 2.5.8-3.3 [83.7 kB]\nFetched 83.7 kB in 0s (105 kB/s)       \nSelecting previously unselected package libmcrypt-dev.\n(Reading database ... 215484 files and directories currently installed.)\nPreparing to unpack .../libmcrypt-dev_2.5.8-3.3_amd64.deb ...\nUnpacking libmcrypt-dev (2.5.8-3.3) ...\nProcessing triggers for man-db (2.7.5-1) ...\nSetting up libmcrypt-dev (2.5.8-3.3) ...\n\nYYY@YYY:/var/www/html/orocrm$ sudo pecl7.2-sp install --nodeps mcrypt-snapshot\nsudo: pecl7.2-sp: command not found\n\nAs I'm getting this type of Error as pecl7.2-sp: command not found\nFrom the documentation section, it had been clearly stated that it had been deprecated and no longer will be available from the security point of view \u2014 since then, from the release version of PHP 7.2.X onward's. \nBut some of the project's need those dependencies, in order to carry out the required functionality as necessary. How do I need to solve the above issue?\n\nUPDATE:\nTL;DR:\nI had a lot of response from the votes to the posted answer. The answers need to be triaged depending upon the OS Architecture level.\nSince I'm using the shared server for hosting, there are more than one projects residing over it & which are coded with the version of PHP 5.X.X, so I decided to downgrade to PHP 7.1.X that \nsupports mcrypt extension by default in my Debian based OS.\nAs I already mentioned in the link while Installing mcrypt Extension on PHP 7.2, by Server Pilot community.\nThese peoples had told a newer version of pecl-7.2 is available to install mcrypt on PHP-7.2. Unfortunately, it ended with \npecl7.2-sp: command not found from the executed commands which were put up. Later the website page got an update, so the commands over there doesn't match the commands that were tried while executing.\nFinally, whichever might be the solutions fit's to your OS Architecture level, Just go for it!.\nOR \nIf the below approaches didn't yield to solve the root cause.\nAlternatively, you can go for PHP 7.1.X version which supports mcrypt extension by default"}, {"role": "assistant", "content": "I followed below steps to install mcrypt for PHP7.2 using PECL.\n\nInstall PECL\n\n\napt-get install php-pecl\n\n\nBefore installing MCRYPT you must install libmcrypt\n\n\napt-get install libmcrypt-dev libreadline-dev\n\n\nInstall MCRYPT 1.0.1 using PECL\n\n\npecl install mcrypt-1.0.1\n\n\nAfter the successful installation \n\n\nYou should add \"extension=mcrypt.so\" to php.ini\n\nPlease comment below if you need any assistance. :-) \n\nIMPORTANT !\nAccording to php.net reference many (all) mcrypt functions have\n  been DEPRECATED as of PHP 7.1.0. Relying on this function is\n  highly discouraged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "remote: repository not found fatal: not found\n\nWhy  won't my git push? I created the repository and I keep getting this message:\nC:\\Users\\petey_000\\rails_projects\\first_app>git push -u github master\nUsername for 'https://github.com': ***@gmail.com\nPassword for 'https://***@[email\u00a0protected]':\nremote: Repository not found.\nfatal: repository 'https://github.com/pete/first_app.git/' not found"}, {"role": "assistant", "content": "Your username shouldn't be an email address, but your GitHub user account: pete.\nAnd your password should be your GitHub account password (2014).\nUpdate 2021: your password should be (since Aug. 2021) a PAT (Personal Access Token).\nYou actually can set your username directly in the remote url, in order for Git to request only your password:\ncd C:\\Users\\petey_000\\rails_projects\\first_app\ngit remote set-url origin https://[email\u00a0protected]/pete/first_app\n\nAnd you need to create the fist_app repo on GitHub first: make sure to create it completely empty, or, if you create it with an initial commit (including a README.md, a license file and a .gitignore file), then do a git pull first, before making your git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Saving ssh key fails\n\ni just started a Git tutorial and I get to a deadend: I try to generate a rsa key part and it fails.\nI did this, in git bash:\nssh-keygen -t rsa -C \"[email\u00a0protected]\"\n\nAnd i got this:\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/Eva/.ssh/id_rsa):\nenter passphrase:\nenter same passphrase again:\nopen /c/Users/Eva/.ssh/id_rsa failed: no such file or directory.\nSaving the key failed:/c/Users/Eva/.ssh/id_rsa.\n\nI tried to save in a different folder and it went OK. but now i do the command ssh -T [email\u00a0protected]  and it gives me the error permisson denied (publickey)."}, {"role": "assistant", "content": "If you're using Windows, the unix-style default path of ssh-keygen is at fault.\nIn Line 2 it says Enter file in which to save the key (/c/Users/Eva/.ssh/id_rsa):.\nThat full filename in the parantheses is the default, obviously Windows cannot access a file like that. If you type the Windows equivalent (c:\\Users\\Eva\\.ssh\\id_rsa), it should work.\nBefore running this, you also need to create the folder. You can do this by running mkdir c:\\Users\\Eva\\.ssh, or by created the folder \".ssh.\" from File Explorer (note the second dot at the end, which will get removed automatically, and is required to create a folder that has a dot at the beginning).\nc:\\Users\\Administrator\\.ssh>ssh-keygen -t rsa -C \"[email\u00a0protected]\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Administrator/.ssh/id_rsa): C:\\Users\\Administrator\\.ssh\\id_rsa\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in C:\\Users\\Administrator\\.ssh\\id_rsa.\nYour public key has been saved in C:\\Users\\Administrator\\.ssh\\id_rsa.pub.\nThe key fingerprint is:\n... [email\u00a0protected]\nThe key's randomart image is:...`\n\nI know this is an old thread, but I thought the answer might help others."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git how to change default branch for everything I do?\n\nBecause of github changing the default branch from master to main all of my pushes end up in a separate branch instead of the main one and I can't change the default. When I start a program and make my first push, git tells me main doesn't exist and I always have to push to master instead."}, {"role": "assistant", "content": "Following the FAQ article \"How to Rename the master branch to main in Git\", and the GitHub documentation  itself, you can:\n\nrename your local branch from master to main: git branch -m master main\npush to main: git push -u origin main\nupdate your default branch on GitHub side:\n\nThen delete the remote master branch: git push origin --delete master\n\nFinally, as I documented in \"How can I create a Git repository with the default branch name other than \"master\"?\", don't forget a:\ngit config --global init.defaultBranch main\n\n(See commit 32ba12d, with Git 2.28+, Q3 2020)\nYour next new repositories will use the right branch name by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Smudge error: Error downloading\n\nI'm not sure if this is the right forum to discuss git-lfs but as we have a tag for it I'll post my question. I have read the \"Troubleshoot Git LFS in Bitbucket\" page.\nI'm getting the following error when runing:\nssh-agent bash -c 'ssh-add /home/dan/.ssh/keyname;  git clone [email\u00a0protected]:[repo name removed].git' \n\n\n$ git-lfs smudge -- [Filename removed].zip Error downloading object:\n  [Filename removed].zip ([code removed]): Smudge error: Error downloading\n  [Filename removed].zip ([code removed]): [[code removed] Object does\n  not exist on the server: [404] Object does not exist on the server\n[404] Object does not exist on the server\n  github.com/git-lfs/git-lfs/errors.newWrappedError\n          /tmp/docker_run/src/github.com/git-lfs/git-lfs/errors/types.go:170:\n  [[code removed]] Object does not exist on the server\n  github.com/git-lfs/git-lfs/errors.newWrappedError\n          /tmp/docker_run/src/github.com/git-lfs/git-lfs/errors/types.go:170:\n  Error downloading [Filename removed].zip ([code removed])\n  github.com/git-lfs/git-lfs/errors.newWrappedError\n          /tmp/docker_run/src/github.com/git-lfs/git-lfs/errors/types.go:170:\n  Smudge error\n\nHas anyone got any advice?"}, {"role": "assistant", "content": "I eventually found an answer by strich: on https://github.com/git-lfs/git-lfs/issues/911\n\nI've had similar issues in the past and I think there may be a\npotential bug in cloning with git lfs (Still to be determined). You\ncan try this method of fetching the repo, which is in fact faster too:\n\n// Skip smudge - We'll download binary files later in a faster batch\ngit lfs install --skip-smudge\n\n// Do git clone here\ngit clone ...\n\n// Fetch all the binary files in the new clone \ngit lfs pull\n\n// Reinstate smudge\ngit lfs install --force \n\n\nThis only needs to be done once to initialize the clone for the first\ntime.\nPlease do test it and let me know if it fixes it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Firebase: Should I add GoogleService-Info.plist to .gitignore?\n\nI'm using Firebase for an iOS project that I want to open source.\nShould I add GoogleService-Info.plist to .gitignore before I upload I share the project on Github?\nI know it contains my API key, client id, etc., which might not be safe to expose?"}, {"role": "assistant", "content": "While it's not the end of the world if you commit GoogleService-Info.plist (similarly, on Android, google-services.json), you're better off leaving it out for one big reason: You're making it clear that others who build your code that they should be setting up their own Firebase project to host its configuration and data (because your project simply won't build with that file missing).  Furthermore, if your project has world-writable resources in it, you can expect that people who get a hold of your app and config so easily will inadvertently start writing data into it, which is probably not what you want.\nOpen source projects that require a Firebase setup should ideally have it stated in the readme that anyone who wants to work with this app needs to go through the process of setting up Firebase.\nThe data in these config files is not exactly private - they can be extracted fairly easily from an IPA or Android APK.  It's just probably not in your best interest to share them as part of your app's code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I amend a commit made with VSCode to GitHub repo?\n\nI learn Git and Using VSCode and just learn the commit \"amend\" command and now trying it on origin (GitHub).\nI can't find any way to do this. Do I need some external tool to do that I don't see any \"push amend\" from the Git menu in VSCode"}, {"role": "assistant", "content": "You can go to Commit -> choose Commit All(Amend) or Commit Staged(Amend). Take a look at the picture."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the starting point of a branch?\n\nUsually I create a branch by running a command like git checkout -b [branch-name] [starting-branch]. In one case, I forgot to include the starting-branch, and now I want to correct it. How do I do so after the branch has already been created?"}, {"role": "assistant", "content": "The short answer is that once you have some commits, you want to git rebase them, using the long form of git rebase: git rebase --onto newbase upstream.  To find out how to identify each of these, see the (very) long answer below.  (Unfortunately, it got a bit out of hand and I do not have time to shorten it.)\nThe problem you have here is that in Git, branches don't have a \"starting point\"\u2014at least, not in any useful way.\nThe term \"branch\", in Git, is ambiguous\nThe first issue here is that, in Git, the word \"branch\" has at least two distinct meanings.  Usually, when we talk loosely about \"the branch\", it's clear from context whether we mean the branch name\u2014the thing that's a word like master or develop or feature-X\u2014or the thing that I call \"branch ancestry\" or \"branch structure\", or more informally, a \"DAGlet\".1  See also What exactly do we mean by \"branch\"?\nIn this particular case, unfortunately, you mean both of these, at the same time.\n\n1The term DAG is short for Directed Acyclic Graph, which is what the commit graph is: a set of vertices or nodes, and directional (from child to parent) edges, such that there are no cycles through the directed edges from any node back to itself.  To this I simply add the \"-let\" diminutive suffix.  The resulting word has a happy resemblance to the word aglet, plus a certain assonance with the word \"dagger\", making it sound slightly dangerous: \"Is this a DAGlet which I see before me?\"\nDraw your commit graph\nWhenever you need to grapple with these issues, it helps to draw a graph of what you have now, or at least some useful subset of what you have now.  There are of course many ways to draw this (see that linked question for several options, including some bad ones :-) ), but in plain text in a StackOverflow answer, I generally draw them like this:\n...--o--o--o           <-- master\n         \\\n          o--o--o--o   <-- develop\n\nThe round o nodes represent commits, and the branch names master and develop point to one specific tip commit on each branch.\nIn Git, every commit points back to its parent commit(s), and this is how Git forms branch structures.  By \"branch structures\", I mean here particular subsets of the overall ancestry part of the graph, or what I call the DAGlets.  The name master points to the tip-most commit of the master branch, and that commit points back (leftward) to another commit that is the previous commit on the branch, and that commit points leftward again, and so on.\nWhen we need to talk about specific commits within this graph, we can use their actual names, which are the big ugly 40-character hashes that identify each Git object.  Those are really clumsy though, so what I do here is replace the little round os with uppercase letters:\n...--A--B--C           <-- master\n         \\\n          D--E--F--G   <-- develop\n\nand now it's easy to say, e.g., that the name master points to commit C, and C points to B, and B points to A, which points back to more history that we don't really care about and hence just left as ....\nWhere does a branch begin?\nNow, it's perfectly obvious, to you and me, based on this graph drawing, that branch develop, whose tip commit is G, starts at commit D.  But it's not obvious to Git\u2014and if we draw the same graph a little differently, it may be less obvious to you and me too.  For instance, look at this drawing:\n          o             <-- X\n         /\n...--o--o--o--o--o--o   <-- Y\n\nObviously branch X has just the one commit and the main line is Y, right?  But let's put some letters in:\n          C             <-- X\n         /\n...--A--B--D--E--F--G   <-- Y\n\nand then move Y down a line:\n          C            <-- X\n         /\n...--A--B\n         \\\n          D--E--F--G   <-- Y\n\nand then look what happens if we move C down to the main line, and realize that X is master and Y is develop?  Which branch is commit B on after all?\nIn Git, commits may be on many branches simultaneously; DAGlets are up to you\nGit's answer to this dilemma is that commits A and B are on both branches.  The beginning of branch X is way off to the left, in the ... part.  But so is the beginning of branch Y.  As far as Git is concerned, a branch \"starts\" at whatever root commit(s) it can find in the graph.\nThis is important to keep in mind in general.  Git has no real concept of where a branch \"started\", so we wind up having to give it extra information.  Sometimes that information is implied, and sometimes it is explicit.  It's also important, in general, to remember that commits are often on many branches\u2014so instead of specifying branches, we usually specify commits.\nWe just often use branch names to do this.  But if we give Git just a branch name, and tell it to find all the ancestors of the tip commit of that branch, Git goes all the way back in history.\nIn your case, if you write the name develop and ask Git to select that commit and its ancestors, you get commits D-E-F-G (which you wanted) and commit B, and commit A, and so on (which you didn't).  The trick, then, is to somehow identify which commits you don't want, along with which commits you do.\nNormally we use the two-dot X..Y syntax\nWith most Git commands, when we want to select some particular DAGlet, we use the two-dot syntax described in gitrevisions, such as master..develop.  Most2 Git commands that work on multiple commits treat this as: \"Select all commits starting from the tip of the develop branch, but then subtract from that set, the set of all commits starting from the tip of the master branch.\"  Look back at our graph drawing of master and develop: this says \"do take commits starting from G and working backwards\"\u2014which gets us too many, since it includes commits B and A and earlier\u2014\"but exclude commits starting from C and working backwards.\"  It's that exclude part that gets us what we want.\nHence, writing master..develop is how we name commits D-E-F-G, and have Git compute that automatically for us, without having to first sit down and draw out a big chunk of the graph.\n\n2Two notable exceptions are git rebase, which is in its own section just below, and git diff.  The git diff command treats X..Y as simply meaning X Y, i.e., it effectively just ignores the two dots entirely.  Note that this has a very different effect than set subtraction: in our case, git diff master..develop simply diffs the tree for commit C against the tree for commit G, even though master..develop never has commit C in the first set.\nIn other words, mathematically speaking, master..develop is normally ancestors(develop) - ancestors(master), where the ancestors function includes the specified commit, i.e., is testing \u2264 rather than just <.  Note that ancestors(develop) does not include commit C at all.  The set subtraction operation simply ignores the presence of C in the set ancestors(master).  But when you feed this to git diff, it does not ignore C: it does not diff, say, B against G.  While that might be a reasonable thing to do, git diff instead steals the three-dot master...develop syntax to accomplish this.\nGit's rebase is a little bit special\nThe rebase command is almost always used to move3 one of these DAGlet commit-subsets from one point in the graph to another.  In fact, that's what rebase is, or was originally anyway, defined to do.  (Now it has a fancy interactive rebase mode, which does this and a bunch more history editing operations.  Mercurial has a similar command, hg histedit, with a slightly better name, and much tighter default semantics.4)\nSince we always (or almost always) want to move a DAGlet, git rebase builds in this subset selection for us.  And, since we always (or almost always) want to move the DAGlet to come just after the tip of some other branch, git rebase defaults to choosing the target (or --onto) commit using a branch name, and then uses that same branch name in the X..Y syntax.5\n\n3Technically, git rebase actually copies commits, rather than moving them.  It has to, because commits are immutable, like all Git's internal objects.  The true name, the SHA-1 hash, of a commit is a checksum of the bits making up the commit, so any time you change anything\u2014including something as simple as the parent ID\u2014you have to make a new, slightly-different, commit.\n4In Mercurial, quite unlike Git, branches really do have starting points, and\u2014more important for histedit\u2014commits record their phase: secret, draft, or published.  History editing readily applies to secret or draft-phase commits, and not so much to published commits.  This is true of Git as well, but since Git has no concept of commit phases, Git's rebase must use these other techniques.\n5Technically the <upstream> and --onto arguments can just be raw commit IDs.  Note that 1234567..develop works just fine as a range selector, and you can rebase --onto 1234567 to place the new commits after commit 1234567.  The only place that git rebase truly needs a branch name is for the name of the current branch, which it normally just reads from HEAD anyway.  However, we usually want to use a name, so that's how I describe it all here.\n\nThat is, if we're currently on branch develop, and in this situation that we drew before:\n...--A--B--C           <-- master\n         \\\n          D--E--F--G   <-- develop\n\nwe probably just want to move the D-E-F-G chain onto the tip of master, to get this:\n...--A--B--C              <-- master\n            \\\n             D'-E'-F'-G'  <-- develop\n\n(The reason I changed the names from D-E-F-G to D'-E'-F'-G' is that rebase is forced to copy the original commits, rather than actually moving them.  The new copies are just as good as the originals, and we can use the same single letter name, but we should at least note, however vaguely, that these are in fact copies.  That's what the \"prime\" marks, the ' characters, are for.)\nBecause this is what we usually want, git rebase will do this automatically if we just name the other branch.  That is, we're on develop now:\n$ git checkout develop\n\nand we want to rebase commits that are on branch develop and are not on master, moving them to the tip of master.  We might express this as git somecmd master..develop master, but then we would have to type the word master twice (such a dreadful fate).  So instead, Git's rebase infers this when we just type in:\n$ git rebase master\n\nThe name master becomes the left side of the two-dot .. DAGlet selector, and the name master also becomes the target of the rebase; and Git then rebases D-E-F-G onto C.  Git gets our branch's name, develop, by reading out the current branch name.  In fact, it uses a shortcut, which is that when you need the current branch name, you can normally just write HEAD instead.  So master..develop and master..HEAD mean the same thing, because HEAD is develop.\nGit's rebase calls this name the <upstream>.  That is, when we say git rebase master, Git claims, in the documentation, that master is the <upstream> argument to git rebase.  The rebase command then operates on commits in <upstream>..HEAD, copying them after whatever commit is in <upstream>.\nThis is going to become a problem for us soon, but for now, just make note of it.\n(Rebase also has the sneaky, but desirable, side feature of omitting any of the D-E-F-G commits that sufficiently resembles commit C.  For our purposes we can ignore this.)\nWhat's wrong with the other answer to this question\nIn case the other answer gets deleted, or becomes one of several other answers, I'll summarize it here as \"use git branch -f to move the branch label.\"  The flaw in the other answer\u2014and, perhaps more importantly, precisely when it's a problem\u2014becomes obvious once we draw our graph DAGlets.\nBranch names are unique, but tip commits are not necessarily so\nLet's take a look at what happens when you run git checkout -b newbranch starting-point.  This asks Git to root around in the current graph for the given starting-point, and make the new branch label point to that specific commit.  (I know I said above that branches don't have a starting point.  This is still mostly true: we're giving the git checkout command a starting point now, but Git is about to set it and then, crucially, forget it.)  Let's say that starting-point is another branch name, and let's draw a whole bunch of branches:\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC\n                 \\\n                  o--o   <-- brD\n\nSince we have four branch names, we have four branch tips: four branch-tip commits, identified by the names brA through brD.  We pick one and make a new branch name newbranch that points to the same commit as one of these four.  I have arbitrarily picked brA here:\n          o--o--o--o     <-- brA, newbranch\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC\n                 \\\n                  o--o   <-- brD\n\nWe now have five names, and five ... er, four? ... well, some tip commits.  The tricky bit is that brA and newbranch both point to the same tip commit.\nGit knows\u2014because git checkout sets it\u2014that we're now on newbranch.  Specifically Git writes the name newbranch into HEAD.  We can make our drawing a bit more accurate by adding this information:\n          o--o--o--o     <-- brA, HEAD -> newbranch\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC\n                 \\\n                  o--o   <-- brD\n\nAt this point, the four commits that used to be only on branch brA are now on both brA and newbranch.  And, by the same token, Git no longer knows that newbranch starts at the tip of brA.  As far as Git is concerned, both brA and newbranch contain those four commits and all the earlier ones too, and both of them \"start\" way back in time somewhere.\nWhen we make new commits, the current name moves\nSince we're on branch newbranch, if we make a new commit now, the new commit's parent will be the old tip commit, and Git will adjust the branch name newbranch to point to the new commit:\n                     o   <-- HEAD -> newbranch\n                    /\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC\n                 \\\n                  o--o   <-- brD\n\nNote that none of the other labels moved: the four \"old\" branches stay put, only the current (HEAD) branch changes.  It changes to accommodate the new commit we just made.\nNote that Git continues to have no idea that branch newbranch \"started\" at brA.  It's just the case, now, that newbranch contains one commit that brA does not, plus the four commits that they both contain, plus all those earlier commits.\nWhat git branch -f does\nUsing git branch -f lets us move a branch label.  Let's say, for whatever mysterious reason, we don't want branch label brB to point where it does in our current drawing.  Instead, we want it to point to the same commit as brC.  We can use git branch -f to change the place to which brB points, i.e., to move the label:\n$ git branch -f brB brC\n\n                     o   <-- HEAD -> newbranch\n                    /\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    [abandoned]\n            \\\n             o--o--o     <-- brC, brB\n                 \\\n                  o--o   <-- brD\n\nThis makes Git \"forget\" or \"abandon\" those three commits that were only on brB before.  That's probably a bad idea\u2014why did we decide to do this strange thing?\u2014so we probably want to put brB back.\nReflogs\nFortunately, \"abandoned\" commits are normally remembered in what Git calls reflogs.  Reflogs use an extended syntax, name@{selector}.  The selector part is usually either a number or date, such as brB@{1} or brB@{yesterday}.  Every time Git updates a branch name to point to some commit, it writes a reflog entry for that branch, with the pointed-to commit's ID, a time-stamp, and an optional message.  Run git reflog brB to see these.  The git branch -f command wrote the new target as brB@{0}, bumping up all the old numbers, so now brB@{1} names the previous tip commit.  So:\n$ git branch -f brB 'brB@{1}'\n    # you may not need the quotes, 'brB@{...}' --\n    # I need them in my shell, otherwise the shell\n    # eats the braces.  Some shells do, some don't.\n\nwill put it back (and also renumber all the numbers again: each update replaces the old @{0} and makes it @{1}, and @{1} becomes @{2}, and so on).\nAnyway, suppose that we do our git checkout -b newbranch while we're on brC, and fail to mention brA.  That is, we start with:\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- HEAD -> brC\n                 \\\n                  o--o   <-- brD\n\nand run git checkout -b newbranch.  Then we get this:\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC, HEAD -> newbranch\n                 \\\n                  o--o   <-- brD\n\nIf we meant to make newbranch point to commit brA, we can in fact do that right now, with git branch -f.  But let's say we make a new commit before realizing that we made newbranch start at the wrong point.  Let's draw it in:\n          o--o--o--o     <-- brA\n         /\n...--o--o--o--o--o--o    <-- brB\n            \\\n             o--o--o     <-- brC\n                 \\  \\\n                 |   o   <-- HEAD -> newbranch\n                 \\\n                  o--o   <-- brD\n\nIf we use git branch -f now, we'll abandon\u2014lose\u2014the commit we just made.  What we want instead is to rebase it, onto the commit that branch brA points-to.\nA simple git rebase copies too much\nWhat if, instead of using git branch -f, we use git rebase brA?  Let's analyze this using\u2014what else\u2014our DAGlets.  We start with the above drawing above, with the extended leg going out to brD, though in the end we get to ignore that leg, and with the section going to brB, most of which we also get to ignore.  What we don't get to ignore is all that stuff in the middle, that we get by tracing the lines back.\nThe git rebase command, in this form, will use brA..newbranch to pick commits to copy.  So, starting with the whole DAGlet, let's mark (with *) all the commits that are on (or contained in) newbranch:\n          o--o--o--o     <-- brA\n         /\n...--*--*--*--o--o--o    <-- brB\n            \\\n             *--*--*     <-- brC\n                 \\  \\\n                 |   *   <-- HEAD -> newbranch\n                 \\\n                  o--o   <-- brD\n\nNow, let's un-mark (with x) all the commits that are on (or contained in) brA:\n          x--x--x--x     <-- brA\n         /\n...--x--x--*--o--o--o    <-- brB\n            \\\n             *--*--*     <-- brC\n                 \\  \\\n                 |   *   <-- HEAD -> newbranch\n                 \\\n                  o--o   <-- brD\n\nWhatever remains\u2014all the * commits\u2014are the ones that git rebase will copy.  That's way too many!\nWe need to get git rebase to copy just the one commit.  What this means is that for the <upstream> argument, we need to give git rebase the name brC.6  That way, Git will use brC..HEAD to select the commits to copy, which will be just the one commit we need to copy.\nBut\u2014alas!\u2014now we have a big problem, because git rebase wants to copy the commit to a point right after the <upstream> we just gave it.  That is, it wants to copy the commits to just after brC.  That's where the commits are now!  (Well, the one commit is.)  So this is no good at all!\nFortunately, git rebase has an escape hatch, specifically the --onto argument.  I mentioned this several times before, but now is when we need it.  We want the copies to go right after brA, so that's what we will supply as the --onto argument.  Git's rebase uses the <upstream> by default, but if we give it an --onto, it uses that instead.  So:\n$ git branch   # just checking...\n  brA\n  brB\n  brC\n  brD\n  master\n* newbranch\n\nOK, good, we're still on newbranch.  (Note that git status works here too, and if you use one of those fancy shell prompt setup things, you can even get your current branch name to be in your prompt, so that you don't need to run git status as often.)\n$ git rebase --onto brA brC\n\nNow Git will select commits in brC..HEAD, which is the right set of commits to copy, and copy them right after the tip of brA, which is the right place to copy them to.  Once the copies are all done, Git will abandon the original commits7 and make the name newbranch point to the new, tip-most, copied commit.\nNote that this works even if you have no new commits on the new branch.  This is the one case where git branch -f also works.  When there are no commits, this git rebase carefully copies all zero of them :-) and then makes the name, newbranch, point to the same commit as brA.  Hence git branch -f is not always wrong; but git rebase is always right\u2014albeit somewhat clumsy: you must identify both the <upstream> and the --onto points manually.\n\n6Or, as we noted in an earlier footnote, we can give git rebase the ID of the commit to which the name brC points.  Either way, we have to supply this as the upstream argument.\n7Except, of course, reflog entry newbranch@{1} will remember the old, now-abandoned, tip commit.  Additional reflog entries for newbranch may remember yet more commits, and remembering the tip commit suffices to keep all its ancestors alive.  The reflog entries eventually expire\u2014after 30 days for some cases, and 90 for others, by default\u2014but this gives you up to a month or so, by default, to recover from mistakes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Referencing a .css file in github repo as stylesheet in a .html file\n\nI've got a repository on github with a .css file in it. Is there any way to have github serve this file in a way that I can consume it in a web page?\nIn other words, I'd like to be able to reference this source file at github directly, from an HTML file on my local computer or a live domain. Something like:\n<link rel=\"stylesheet\"\n      type=\"text/css\"\n      href=\"http://github.com/foouser/barproject/master/xenu-is-my-lover.css\"\n/>\n\nI've tried including a<link> to the \"raw\" source file (http://raw.github.com...), but github serves its Content-Type as text/plain, and consequently, Chrome and FF are not adding its content as CSS styles to the page\u2014the file's data is being discarded and a warning is shown in the debugger consoles of the browsers."}, {"role": "assistant", "content": "Important: rawgit.com is shutting down. Read more about other alternatives here - https://rawgit.com/\n\nFound something really cool. You get the raw link as: http://raw.github.com/...\nSimply fetch the files from rawgit.com (or cdn.rawgit.com) instead of raw.github.com and DONE!\n\nUPDATE:\nYou can also use raw.githack.com if you want to serves raw files directly from Bitbucket or GitLab"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Permission denied (public key) during fetch from GitHub with Jenkins user on Ubuntu\n\nHere is my setup:\n\nJenkins is running on my linux machine as 'jenkins' user.\nI have generated a ssh key-pair as described in Linux - Setup Git, for the 'jenkins' user.\nWhen I sudo su jenkins and try ssh -vT [email\u00a0protected], I am always asked my passphrase, but I am always eventually authenicated. (the verbose option shows which key is used, among others).\nI could clone my repo from GitHub using jenkins:\n\nThusly:\njenkins@alpm:~/jobs/test git/workspace$ git pull \nEnter passphrase for key '/var/lib/jenkins/.ssh/id*_rsa':\nAlready up-to-date.\n\nUp to this point I have followed the instructions to the letter. The problem is that the Jenkins job fails with the following error:\nstatus code 128:\nstdout: \nstderr: Permission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\nThis is same error as I get when I typo the passphrase (but of course, Jenkins does not ask me for the passphrase). The following pages:\n\nGitHub - SSH Issues\nUsing SSH Agent Forwarding\n\nindicate to me that ssh-agent could help remember the passphrase, which it does when I am using my own user, but not the jenkins id. Note that while running as my normal user yields:\necho \"$SSH_AUTH_SOCK\"\n/tmp/keyring-nQlwf9/ssh\n\nWhile running the same command as my 'jenkins' yields nothing (not even permission denied)\nMy understanding of the problem is that the passphrase is not remembered.\nDo you have any idea? \nShall I start a ssh-agent or key ring manager for the jenkins user? How?\nOr is ssh forwarding suitable when forwarding to the same machine?\nAny brighter idea?\nps: I never sudo gitted, I always used jenkins or my user account (as mentioned in this SO post - Ubuntu/GitHub SSH Key Issue)"}, {"role": "assistant", "content": "Since nobody wrote the answer from the comments for several months, I will quickly do so.\nThere are 2 possible problems/solutions:\n\nid_rsa created with wrong user\nCreate id_rsa as the jenkins user (see hudson cannot fetch from git repository)\n\nLeave passphrase empty"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change git account in Git bash? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nConfiguring user and password with Git Bash\n\n                                (14 answers)\n                            \n\nClosed 5 months ago.\n\n\n\nI have weird problem with Git bash. I have two Github accounts, let's say A and B. I set my name and email, like in account A: \ngit config --global user.name \ngit config --global user.email \n\nI initialized new repo, did a commit, then push and git bash asked me about login and password to github. By mistake I put login and password for account B! I logged in successfully, but there is no repository I just initialized.\nHow can I logout and login to different github account? It's not user.name nor user.email"}, {"role": "assistant", "content": "Much simpler, as I explained in \"How to sign out in Git Bash console in Windows?\":\ngit credential-manager erase <url>\n\nHere\ngit credential-manager erase https://github.com\n\nNo need to remove the credential helper which is practical for caching user's password.\nOr (replace xxx wit  the output of git config --global credential.helper):\nprintf \"protocol=https\\nhost=github.com\" | git-credential-xxx erase\n\n# Windows (2020-2021)\nprintf \"protocol=https\\nhost=github.com\" | git-credential-manager-core erase\n\n# Linux\nprintf \"protocol=https\\nhost=github.com\" | git-credential-libsecret erase\n\n# MacOs\nprintf \"protocol=https\\nhost=github.com\" | git-credential-osxkeychain erase"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Warning: the ECDSA host key for 'github.com' differs from the key for the IP address\" issue\n\nI don't know what happened, but one day when I got up and git push my changes it gave:\nWarning: the ECDSA host key for 'github.com' differs from the key for the IP address '140.82.112.4'\nOffending key for IP in /Users/joyliu/.ssh/known_hosts:13\nMatching host key in /Users/joyliu/.ssh/known_hosts:16\n\nIt seems like I'm not able to connect to Github. I Googled the fix and did sed -i '13d' ~/.ssh/known_hosts to delete line 13 but then it shows the same error with a different line number.\nIt also happened when I did git pull.\nCan anyone help me? Thank you in advance!\n======== Update ========\nAfter ssh-keygen -R github.com and ssh-keyscan github.com >> ~/.ssh/known_hosts, it still doesn't work somehow... It gave:\n(base) \u279c  liuzz10.github.io git:(master) ssh-keygen -R github.com\n# Host github.com found: line 17\n# Host github.com found: line 18\n# Host github.com found: line 19\n# Host github.com found: line 20\n/Users/joyliu/.ssh/known_hosts updated.\nOriginal contents retained as /Users/joyliu/.ssh/known_hosts.old\n(base) \u279c  liuzz10.github.io git:(master) ssh-keyscan github.com >> ~/.ssh/known_hosts\n# github.com:22 SSH-2.0-babeld-4b034cc8\n# github.com:22 SSH-2.0-babeld-4b034cc8\n# github.com:22 SSH-2.0-babeld-4b034cc8\n(base) \u279c  liuzz10.github.io git:(master) git pull\nWarning: the ECDSA host key for 'github.com' differs from the key for the IP address '140.82.112.4'\nOffending key for IP in /Users/joyliu/.ssh/known_hosts:13\nMatching host key in /Users/joyliu/.ssh/known_hosts:18\nAre you sure you want to continue connecting (yes/no)? yes\nfatal: refusing to merge unrelated histories\n(base) \u279c  liuzz10.github.io git:(master) git push\nWarning: the ECDSA host key for 'github.com' differs from the key for the IP address '140.82.112.4'\nOffending key for IP in /Users/joyliu/.ssh/known_hosts:13\nMatching host key in /Users/joyliu/.ssh/known_hosts:18\nAre you sure you want to continue connecting (yes/no)? yes\nTo github.com:liuzz10/liuzz10.github.io.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'github.com:liuzz10/liuzz10.github.io.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."}, {"role": "assistant", "content": "If you are getting the following error:\nWarning: the ECDSA host key for 'github.com' differs from the key for the IP address 'IP_ADDRESS'\n\nI would recommend to do the following:\n$ ssh-keygen -R github.com\n\nIf that does not work then remove the IP itself from known-host:\n$ ssh-keygen -R IP_ADDRESS\n\nThis should would fix your issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to copy a branch from one GitHub repository to another?\n\nThe Author had a respository, called Master.  \nI forked Master, and created branch A on it.\nThen the Author created an Organization, forked Master to the Organization, and said that that should be the new official main repository.  \nThen he invited me to join the Organization and now I have commit access.\nI'd like to copy my branch A onto the Organization repository so that it will have branch A, (ie. not integrating the branch,) but looking around, I can't seem to find any simple way to do this.  \nBoth my version and the Organization version were forked from Master, so it should be pretty straightforward to copy the branch over, but everything I can find when I search for instructions online seems to be all about copying branches to your local copy of the repository, which isn't what I'm trying to do.  \nDoes anyone know how to do this?"}, {"role": "assistant", "content": "I'd like to copy my branch A onto the Organization repository so that it will have branch A, (ie. not integrating the branch,) but looking around, I can't seem to find any simple way to do this.\n\nSimply add the new remote (Organization) to your old repository (master).\nOnce you did it simply push the branch A to the new (organization) repository.\ncd <old repository>\ngit remote add origin2 <new_url>\ngit push origin2 <branch A>\n\nNow you should have the new branch A in your new repository.\nThe point is to add new remote and to push the branch to your new repository.\nSecond way id to update the current repository remote to point to the new location:\ngit remote set-url origin <new url>\n\nAnd then push the branch.\nBoth of teh above will have the same result. The difference is that in the first one you add new remote while in the second one you change the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "For how long can you restore/recover a deleted branch on GitHub?\n\nThis is not a question on how to restore lost branches in GitHub, but rather how long you have to restore a deleted branch through the following user case story:\nWithin a pull request (often used as a place for code review) the branch can be merged and then deleted, all in the GitHub GUI. Should you choose to delete it, you are given the option, with a bold and underlined word, to \"restore\" the branch.\nI suspect this option has a time limit and that GitHub doesn't keep this available indefinitely.\nDoes GitHub have a time limit on how long you can do this? If it does, what is that time limit?"}, {"role": "assistant", "content": "I asked GitHub Support, this was their response (emphasis mine):\n\nWe use a separate ref namespace for all Pull Requests which we use for various things including restoring the branch. Since we keep those [Pull Request] refs indefinitely, there's no time limit on restoring a branch.\n\nYou can see these special references in your remote by using the following:\n$ git ls-remote | grep pull\nFrom [email\u00a0protected]:<username>/<remote>.git\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa        refs/pull/1/head\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb        refs/pull/1/merge\ncccccccccccccccccccccccccccccccccccccccc        refs/pull/2/head\ndddddddddddddddddddddddddddddddddddddddd        refs/pull/2/merge\n\nThe references are namespaced under refs/pull/<pull request number>/. The head reference points at the tip of the branch that's being pull requested, i.e. the last commit on the branch. I'm not sure what the merge reference is though."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Keeping a fork up to date\n\nI wanted to commit somthing to a github repository, but I (obviously) didn't have any rights to do so. I made a fork of that repo, commited my changes and submitted a pull-request.\nNow, the problem is that after a while other people have made commits to the original repo, which means my fork is no longer up-to-date.\nHow should now update my fork? Is this (https://stackoverflow.com/a/23853061/5513628) still a valid way or do I have to delete my repo and make a new fork every time?\nThis is what the fork looks like in github desktop:\n\nThe pull request was made by me but the two commits after that were made by other people. They are not contained in my repo..."}, {"role": "assistant", "content": "To sync changes you make in a fork with the original repository, you must configure a remote that points to the upstream repository in Git.\nSpecify a new remote upstream repository that will be synced with the fork.\ngit remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n\nYou can check if it was succesful with:\ngit remote -v\n\nThen fetch it to update your project:\ngit fetch upstream\n\nMerge the changes from upstream/master into your local master branch.\ngit merge upstream/master\n\nAt last, you can commit new update from original repository to your fork repository.\nShortcut: you can also combine the last two commands into a single command:\ngit fetch upstream\ngit merge upstream/master\n\nIs equal to:\ngit pull upstream/master\n\nThis information can also be found on GitHub here and here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to complete a milestone on GitHub?\n\nHow do I close/complete milestones on GitHub projects? I've already three milestones that are \"overdue\" but they are completed already. I simply don't know how to mark them \"completed\" - can anyone help me?\nI already tried to Google this issue, and browsed the GitHub help pages, but couldn't find any information on using milestones."}, {"role": "assistant", "content": "Update: this is an old answer for an old question. The nowerdays correct answer is the one by seeker.\nMilestones now must be closed manually. --- A.J. Brown\n\nSimply creating and closing an issue for a milestone, will mark the milestone completed:\n\nWhen all issues of the milestone are closed, the milestone should be closed as well. \n\n--- Felix King\nThanks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View entire activities of an user in github [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 12 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nHow can I view the entire activities of an user in github.com .\nSay Mr.Geos entire activites\n\nMr.Geo pushed to ..\nMr.Geo deleted ...\n..."}, {"role": "assistant", "content": "You can leverage the GitHub Events API to perform such task and retrieve a JSON formatted response.\n\nThe Events API is a read-only interface to all the event types that\n  power the various activity streams on GitHub.\n\n\nsyntax: GET /users/:user/events \nexample: https://api.github.com/users/mojombo/events\n\nAn alternative way is to subscribe to the public RSS feed of a user. \nFor instance, Mojombo's public feed Url would be\n\nhttps://github.com/mojombo.atom\n\nAlso If you want to view Full activities performed by all contributors ,you can also go to \nIf Private\nhttps://github.com/orgs/YOURORGANISATION/dashboard\nIf Public\nhttps://github.com/REPOSITORYOWNER?tab=activity"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does git submodule update fail with \"fatal: remote error: upload-pack: not our ref\"?\n\nI have a git repo with multiple submodules. I have tried deleting and adding the submodule in question (scopatz's nanorc), however the error persists across the deletion and re-addition. When I clone the repo to a new location I automatically update it with git submodule update --init --recursive, which is when this fails, but only for this submodule...\nBelow is the relevant output from the command with GIT_TRACE=2:\n23:01:26.918691 run-command.c:1569      run_processes_parallel: preparing to run up to 1 tasks\n23:01:26.933567 run-command.c:1601      run_processes_parallel: done\n23:01:26.934373 run-command.c:646       trace: run_command: git gc --auto\n23:01:26.966805 git.c:344               trace: built-in: git gc --auto\n23:01:26.991059 git.c:344               trace: built-in: git rev-parse --local-env-vars\n23:01:27.015684 git.c:344               trace: built-in: git rev-parse --local-env-vars\n23:01:27.032282 git.c:344               trace: built-in: git symbolic-ref -q HEAD\n23:01:27.053948 git.c:344               trace: built-in: git config --get branch.master.remote\n23:01:27.073636 git.c:344               trace: built-in: git fetch origin 151d94a8754b0a612315fc191c5373cc0055c13d\n23:01:27.079657 run-command.c:646       trace: run_command: git-remote-https origin https://github.com/scopatz/nanorc.git\n23:01:28.441725 run-command.c:646       trace: run_command: git rev-list --objects --stdin --not --all --quiet\n23:01:28.452267 run-command.c:646       trace: run_command: git fetch-pack --stateless-rpc --stdin --lock-pack --thin https://github.com/scopatz/nanorc.git/\n23:01:28.467757 git.c:344               trace: built-in: git fetch-pack --stateless-rpc --stdin --lock-pack --thin https://github.com/scopatz/nanorc.git/\nfatal: remote error: upload-pack: not our ref 151d94a8754b0a612315fc191c5373cc0055c13d\nfatal: The remote end hung up unexpectedly\nFetched in submodule path 'submodules/nano', but it did not contain 151d94a8754b0a612315fc191c5373cc0055c13d. Direct fetching of that commit failed.\n\nhoping someone here can help, I'm mostly lost at this point.\n=== EDIT: Solution Steps Below ===\ncd {submodule path}\ngit reset --hard origin/master\ncd -\ngit clean -n\ngit add {submodule path}\ngit commit\ngit submodule update --init --recursive\n\nNo errors, awesome."}, {"role": "assistant", "content": "With Git and submodules, you start with a minimum of two Git repositories.  One is \"your\" repository\u2014the main one, which Git will call the superproject.  The second Git repository is some other Git repository: there is nothing special about it at all.  It's just that your superproject has in it these two parts:\n\nInstructions for cloning the submodule.  That lets your Git run git clone if needed, during git submodule update --init for instance.\nThe raw hash ID of some commit that should be in that other Git repository.  Your main repository will, after cloning or running git fetch if appropriate in your clone of the other Git repository, run git checkout hash using this raw hash ID.\n\nYour superproject is asking for the hash ID 151d94a8754b0a612315fc191c5373cc0055c13d in the Git repository you can clone from https://github.com/scopatz/nanorc.git.  That commit simply does not exist in that repository, so it's not in any clone you make either.\nDo you know why your superproject lists this commit hash ID, even though it does not exist?  (I certainly don't.)  You cannot get it from their Git, because they don't have it.  That's what all these error messages are telling you.\nYou can try searching other repositories (or Google) for 151d94a8754b0a612315fc191c5373cc0055c13d (I just tried with Google and they can't find it).  Or, if you don't really care specifically for that commit, try telling your own Git\u2014your superproject\u2014that it should get some other commit, one that does exist and therefore you can get.\nWhich commit should you get?  I have no idea: that's up to you.  Note that the place where your superproject lists the raw commit hash from the submodule is: in each commit.  You can git checkout some commit, probably the tip of some branch, in your superproject.  Then you can enter the submodule, pick a commit you like, use git checkout in that submodule\u2014it's another Git clone, after all, so you can do any Git command there\u2014to check out the desired commit.  Then, exit the submodule (change directories back to your superproject) and run git add on the submodule path and git commit to record the new desired hash ID.  This new commit now asks for that particular hash ID."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In GitHub Actions, how can I trigger on push but only if a PR is active?\n\nSay I have 2 branches, a feature branch and a develop branch.\nThere's no SLA on feature branch normally, meaning I can push broken code up to it all day long and no CI build should be triggered.\nThen I open a PR into develop.  I trigger a CI build action on pull_request: created.  Let's say this build fails.  By default I can't merge the PR, which is correct.\nNow I want to push edits to feature branch to update the PR.  I want these pushes to trigger a CI build (because we're now working inside an open PR).  I don't want to allow the PR to proceed/be merged until these push-CIs pass.\nHow can I do that in GitHub Actions?   I tried on pull_request: edited but that didn't work for me.\nI'm looking for the functional equivalent of:\non:\n  push:\n    if: inside_open_pr"}, {"role": "assistant", "content": "Use the event pull_request and don't specify activities or specify the activity synchronize:\non:\n  pull_request:\n\n\nNote: By default, a workflow only runs when a pull_request's activity type is opened, synchronize, or reopened. To trigger workflows for more activity types, use the types keyword.\n\nsource\n\nif you push a new commit to the HEAD ref of a pull request then this \u201csynchronize\u201d event will be triggered. This is because the system is syncing the pull requests with the latest changes. This will NOT trigger if the base ref is updated.\n\nsource\nIf you also need to react to a change of the base branch, then you have to add the activity edited.\nsource"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Actions - empty env secrets\n\nI've started playing with GitHub actions, but I'm struggling with accessing repository secrets which I pass as env's.\nMy workflow file:\nname: Invite\n\non: \n  pull_request:\n    branches: [master]\n    types: [closed]\njobs:\n  invite:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Hello world action\n        uses: lekterable/inclusive-organization-action@master\n        env:\n          SECRET_TOKEN: ${{ secrets.SECRET_TOKEN }}\n          organization: string\n          SUPER_SECRET: ${{ secrets.SUPER_SECRET }}\n\naction index file\nconst core = require('@actions/core')\nconst github = require('@actions/github')\n\nconst run = async () => {\n  try {\n    ...\n    console.log('env', process.env)\n    const token = process.env.SECRET_TOKEN\n    const secret = process.env.SUPER_SECRET\n    const organization = process.env.organization\n    console.log('organization', organization)\n    console.log('token?', !!token)\n    console.log('secret?', !!secret)\n    console.log('token length', token.length)\n    ...\n  } catch (error) {\n    core.setFailed(error.message)\n  }\n}\n\nrun()\n\n\nas you can see I'm passing 3 env's, the organization which has a value of 'string' exists as expected, but SECRET_TOKEN and SUPER_SECRET are empty.\n\nAnd yes, I do have the secrets set in the repo which runs the action:\n\nIs there something that I'm doing wrong?"}, {"role": "assistant", "content": "In my case I had to pass the secrets to a reusable workflow by adding secrets: inherit to the parent job\njobs:\n  call-workflow-passing-data:\n    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main\n    with:\n      config-path: .github/labeler.yml\n    secrets: inherit # <= this one\n\nDoc: https://docs.github.com/en/actions/using-workflows/reusing-workflows#passing-inputs-and-secrets-to-a-reusable-workflow"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git - Store branches in separate local directories\n\nI'm rather new to git, and am trying to set up my repository the right way.\nBasically my app is a platform of sorts, so implementations of this platform are based on the master branch, but have some small modifications to those files as well as some additional files.\nI tried setting it up as branches, so I have a master branch, implementation_1 and implementation_2.\nBut as far as I can tell, that would mean that locally all the branches are stored in one directory, with their separation being only through git.\nWhat I would like is to have 3 local directories, master,imp_1, and imp_2. If I make a change to one of the core files in the imp_1 directory, I want to be able to merge that change into the master branch and from there into imp_2.\nI'm beginning to think these need to be 3 different repositories (the implementations being forks of the core). Is that the way to go? In that case, how would I go about handling the above scenario?"}, {"role": "assistant", "content": "Branches are first class citizens in Git. They are not \"emulated\" as branches like in older VCS such SVN, CVS, etc.\nIf you really need three different directories, because you want to have three distinct development environment, make 3 clones:\n\none in a directory called master\none in a directory called imp_1\none in a directory called imp_2\n\nBut to really understand branches, you can read \"Pros and cons of different branching models in DVCS\".\n\nOr, since Git 2.5 (July 2015, 4 years after the OP's question), as I detailed in Multiple working directories with Git?, use git worktree.  \nThat will be one clone, multiple folders (one per branch).\nWith Git 2.7+, you can then list those folders:\n$ git worktree list\n/path/to/bare-source            (bare)\n/path/to/linked-worktree        abcd1234 [master]\n/path/to/other-linked-worktree  1234abc  (detached HEAD)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatic merge of pull requests on Github without the merge bubble\n\nThe \"This pull request can be automatically merged [Merge pull request]\" button in github is great -- except that it creates merge bubbles. \nIs there a way to use this button/functionality in github without it creating merge bubbles?"}, {"role": "assistant", "content": "No.\nThe git blog says using this button you always get an --no-ff merge (no fast-forward merge).\nYou'd have to do a manual merge if you don't want merge bubbles:\ngit checkout master\ngit remote add cameronmcefee git://github.com/cameronmcefee/Spoon-Knife.git\ngit fetch cameronmcefee \ngit merge cameronmcefee/my-branch\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to render a Jekyll markdown page on sites index\n\nI'm probably missing something simple but I have no way to test Jekyll locally.\nI'm using GitHub pages to render Jekyll, for starters I only want to render markdown content on the main  index.html from one markdown page.\nThe structure is: \nIndex.html\n---\nlayout: default\n---\n\n_layouts\n - default.html\n//html stuff..\n<section>\n\n{{page.content}}\n\n</section>\n\nIn root folder I have a page called content.md that I wish to render for {{page.content}} the layout renders but the liquid tags section is blank.\nHow do I render content.md?\nExample: https://github.com/wycks/wordpress-gears-jekyll"}, {"role": "assistant", "content": "There are a few things going on here. \n\nIn your _layouts/default.html file (and any of the other _layouts directory files for that matter), instead of:\n{{ page.content }}\n\nyou need to use:\n{{ content }}\n\nJekyll only lets you includes files from a site root level _includes directory. So, you need to move your content.md from the root to that directory (making it if it doesn't already exist). \nFinally, you need to actually make the call to the include file from your index.html file. This can be done by changing the content of your index.html file to:\n---\nlayout: default\n---\n\n{% include content.md %}\n\n\nThat will setup the behavior you are looking for. \n\nI'd point out two other things:\n\nYou may find that changing the extension of your index file from .html to .md works better. An important note though: you need to use .html if you want pagination. Per the Jekyll Pagination documentation, that feature only works when the file is named index.html.\nIf all you are doing in your index file is calling an include that only resides on that page, you might be just as well off simply putting the content directly in the index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "clojure and leiningen - using a git repository as dependency\n\nIs it possible to have leiningen pull a project directly from a git repository (on github) as a dependency?\nUsing Bundler with Ruby, it is possible to map a gem to a git repo, allowing for rapid development and integration of dependent projects.\nUpdate \nBased on the accepted answer, there is now a leiningen plugin for managing git-deps:\nhttps://github.com/tobyhede/lein-git-deps"}, {"role": "assistant", "content": "I just found this in clojurescriptone's project.clj\nI think it maybe helpful to you:\n:git-dependencies [[\"https://github.com/clojure/clojurescript.git\"\n                       \"886d8dc81812962d30a741d6d05ce9d90975160f\"]\n                   [\"https://github.com/levand/domina.git\"\n                       \"8933b2d12c44832c9bfaecf457a1bc5db251a774\"]]\n\nThe file is here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git rebase failing\n\nI'm trying to rebase the work of a colleague.\nFirst, I get a ton of conflicts where <<<<< head seams to contain the new code. \nThen after a while I get the following error:\nfatal: update_ref failed for ref 'refs/heads/dev_504': \ncannot lock ref     'refs/heads/dev_504': ref refs/heads/dev_504 is at\n XXXXXXX \n but expected     XXXXXXXX\nCould not move back to refs/heads/dev_504\n\nThen if I try to continue anyway I get the following error:\nfatal: cannot resume: .git/rebase-apply/final-commit does not exist.\n\nHow can I fix this so the rebase won't give an error?"}, {"role": "assistant", "content": "You can run git rebase --abort to completely undo the rebase. Git will return you to your branch's state as it was before git rebase was called.\nYou can run git rebase --skip to completely skip the commit. That means that none of the changes introduced by the problematic commit will be included. It is very rare that you would choose this option.\nYou can fix the conflict.\nFailing that, you should re-create your branch or you can be able to remove the .git/rebase-merge directory, which contains the rebase state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SourceTree - git: fatal: remote error: Repository not found\n\nI just signed up for a github account at work and created a new repository. I ran a few git commands over command line and everything worked fine. \n1. git init \n2. git add .\n3. git commit -m \"first commit\"\n4. git remote add origin https://github.com/username/project.git\n\nThen, when I added the working copy from sourcetree and clicked the Fetch button,  i get \"error: Repository Not Found\". I try push and pull and i get the same error.  I've been using sourcetree with my bitbucket and github repositories for a few months now but i've never had this problem. Has anyone had similar issues?"}, {"role": "assistant", "content": "Had the same issue. The reason in my case was that I authenticated via https on command line but then used sourceTree via oAuth. Setting the Auth type to \"Basic\" in my Account settings helped."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "pushing to git remote branch\n\nI could use a hand with learning how to push a local branch to a remote branch. Please see below. Help much appreciated!\nThe local branch was created after cloning the repo then doing\n$ git checkout -b mybranch remotes/origin/mybranch\n\n$ git branch -a\n  master\n* mybranch\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n  remotes/origin/mybranch\n\nBut when trying to push changes back up:\n$ git push mybranch mybranch\nfatal: 'mybranch' does not appear to be a git repository\nfatal: The remote end hung up unexpectedly\n\n$ git push remotes/origin/mybranch mybranch\nfatal: 'mybranch' does not appear to be a git repository\nfatal: The remote end hung up unexpectedly\n\n$ git push origin/mybranch mybranch\nfatal: 'mybranch' does not appear to be a git repository\nfatal: The remote end hung up unexpectedly"}, {"role": "assistant", "content": "As Abizern says, this works:\ngit push origin mybranch\n\nBut, to explain further, the mybranch part is a refspec. This specifies the remote ref which should be updated with the given local commit.\nSo, the command above is equivalent to:\ngit push origin mybranch:mybranch\n\nor even:\ngit push origin mybranch:refs/heads/mybranch\n\nand, indeed, since you're on the local mybranch, you could have done:\ngit push origin HEAD:mybranch\n\nThis is good to understand, because I often find myself doing things like:\ngit push origin HEAD^:mybranch\n\nwhere you want to push all but the topmost patch to the remote branch.\nFinally, if you want to delete the remote mybranch, you do:\ngit push origin :mybranch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error remote: Empty password\n\nI'm trying to clone my git repo from bitbucket, and when I enter this command:\ngit clone https://[email\u00a0protected]/naor_shoyhat/hello-world.git\n\nThe bash then prompts me a window with areas to enter username and password.\nI enter them and then I receive this error:\nremote: Empty password\nfatal: Authentication failed for 'https://[email\u00a0protected]/naor_shoyhat/hello-world.git/'"}, {"role": "assistant", "content": "I'm using  git(2.12.2) 64-bit on Windows 10. My solution is simply close the login window which you have to type account and password, and a SSh window will pop out, then you type your password."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change git repository using android studio\n\nI'm using git with android studio and I already sync other repository. \nBut I hope to change a git repository like github.\nI think I need to disconnect already connected to the repository but I don't found this option.\nTo do that, How can I do?"}, {"role": "assistant", "content": "We can change the repository url. Just follow the steps.\nIn Android Studio Arctic Fox | 2020.3.1\n\nRight click on project folder\nFrom menu Choose \u201cGit\u201d\nThen chosse \"Manage Remotes...\"\nNow, select the existing \"origin\" and click on edit\nEnter your new URL and click OK\n\nFor Android Studio Older versions\n\nRight click on project folder\nFrom menu Choose \u201cGit\u201d\nChoose \u201cRepository\u201d\nChoose \u201cRemotes\u2026\u201d\n\n\n\nNow you got the \u201cGit Remotes\u201d popup\n\n\n\nYou can edit the existing url or remove the old url and then add new url.\nClick \u201cOK\u201d. that\u2019s it. Now you are connected with new repo. But branches are not connected. Just follow few steps to complete.\nTry to pull the changes from repo \u201cGit > Repository > Pull\u2026\u201d\nNow you got the \u201cPull Changes\u201d popup. Click \u201cRefresh\u201d button.\n\n\n\nAfter successfully reconnected with repo then you can see the branches of new repo under \u201cBranches to merge\u201d box.\n\n\n\nDone. Now you are connected with new repo & branches.\n\nHappy Coding :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Webhook With Jenkins return 302 Found\n\nI set up localhost jenkins, using ngrok to expose my jenkins to github.\nI didn't set up any credentials.\nWhen I test delivery from webhook, it shows 302 not found.\nResponse: \nContent-Length: 0\nDate: Mon, 16 Apr 2018 02:09:22 GMT\nLocation: http://056b05cb.ngrok.io/github-webhook/\nServer: Jetty(9.4.z-SNAPSHOT)\nX-Content-Type-Options: nosniff\n\nRequest:\nHeaders\nRequest URL: http://056b05cb.ngrok.io/github-webhook\nRequest method: POST\ncontent-type: application/json\nExpect: \nUser-Agent: GitHub-Hookshot/d5b13bc\nX-GitHub-Delivery: bdc31e52-4115-11e8-9e6b-c7d083151290\nX-GitHub-Event: push\nPayload\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"14e1265dc10ef64c93ee7791db7fa9ccef63279f\",\n  \"after\": \"1f51b991d10af7c2b8fb4bc4c44417a57cf7bb56\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  .....\n}"}, {"role": "assistant", "content": "Just got hit by the same issue.  It appears that you are using the url:\nhttp://056b05cb.ngrok.io/github-webhook\nSimply switch it to http://056b05cb.ngrok.io/github-webhook/ (notice the trailing /)\nIf you hit the url without the / on a browser, it will get a 302 and the browser will simply redirect.  But the webhook does not follow redirects, so it simply tells you what the response was, which was a 302 redirect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove git account from local machine and add new account\n\nI have a github account which is configured in my windows pc. Now I have created a new Github account and want to use the new one.\nHow will I remove my old account from my windows pc and add the new github account ?\nNOTE: I have edited the gitconfig file and added the new user email and username there. But the public key still contains the old user email !!"}, {"role": "assistant", "content": "For windows machine\nyou can manage windows credential for doing this\ngo to search button then write\nmanage windows credential\nthen you will find a button double click it\nthen remove your current windows credential\nafter that when you are using git again git authentication will be asked\nthen you will enter your new github id\nNext you need to edit .gitconfig file\nfile path will be like\nC:\\Users\\Imu\n\nhere imu is my user name\nit will be different in yours\nNow edit .gitconfig file using text editor like nodepad++ or sublime text with ur current id information\nhoping it helps"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Discard all changes in Github Desktop (Mac)\n\nHow to discard all changes in Github desktop (mac), comparing to the latest commit?\nIt is possible to click on one file and select \"discard changes\". But how to discard all changes in files?"}, {"role": "assistant", "content": "Just in case anyone is interested, it can be done via GitHub's Menu Bar: Repository/Discard changes to selected files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSH is looking in the wrong place for the public/private key pair on Windows\n\nI'm trying to configure GIT on my Windows XP machine, but SSH keeps creating and looking for the public/private key pair in non-sensical places, e.g. /.ssh/id_rsa\nIs there a configuration file in the GIT Installation for Windows where I can switch this to my home directory, or another user defined place? By default, it offers to create new key pairs at //.ssh/id_rsa but that gives me the error \"Could not create directory '//.ssh'.\" And when I'm able to find a directory I can create it in, GIT won't look there."}, {"role": "assistant", "content": "Figured out how to manually set my home directory in Windows XP:\n\nRight click \"My Computer\"\nChoose the \"Advanced\" tab\nClick the \"Environmental Variables\" button\nUnder the \"System variables\" section, click \"New\"\nIn the \"Variable name\" enter in \"home\".\nIn the \"Variable value\" enter in the path to your profile.\n\nTo do the same via command prompt do :\nsetx HOME \"your\\path\\to\\home\"\n\n( Please note the suffix x - This is used to persist the change )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Failed to connect to repository\" Error while setting up Github Jenkins Plugin\n\nI am getting an error when inputting my repo location into the \"Source Code Management > Git > Repository URL\" section of a new Job. I have searched all around and tried many different URLs with no success.\nError:\nFailed to connect to repository : Error performing command: git ls-remote -h https://github.com/micdoodle8/Crossbow_Mod_2.git HEAD\n\nAny ideas? Thanks."}, {"role": "assistant", "content": "You might need to set the path to your git executable in Manage Jenkins -> Configure System -> Git -> Git Installations -> Path to Git executable.\nFor example, I was getting the same error in Windows.  I had installed git with chocolatey, and got the location via Powershell:\nGet-Command git.exe | Select Definition\n\nIn Unix, you should be able to do:\nwhich git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git LFS refused to track my large files properly, until I did the following\n\nProblem\nI had troubles trying to use git LFS, despite the many suggestions here on SO, on Git and GitHub's documentation, and on some Gists I'd run across.\nMy problem was as follows:\nAfter performing the necessary steps:\ngit lfs install\ngit lfs track \"<file of interest>\"\ngit commit\n\nI would still not have any files being tracked.  If I performed\ngit lfs ls-files\n\nit would be blank.  If I went ahead & performed the push, the transaction would fail, saying that the files are too large.  (As expected, but I was desperate.)"}, {"role": "assistant", "content": "New Solution\nThe original solution is from 2016. Tech progresses...\nSeems the best solution now is\ngit lfs migrate\n\nThanks to @iff_or for alerting me to this (see comments).\nOutdated Solution, don't use\nI then discovered a few fixes, some of which seem to be bugs, some of which simply were not obvious to me.\n\nIt seems that in order to use lfs with an existing repository, a hack or third party tool such as BFG's converter is needed.\n\nI did not want to go that route, so I simply initialized a new repository locally, then did the challenge of hooking it back up to the real repo.\nI created a new directory, then git init, etc.\n\nIn my case, the remote repository was GitHub.  So I did all those proper hookups like git remote add origin [email\u00a0protected]:<my_id>/<my_repo>.git\n\n\n\n\nAlso, while Git's Training Video claims that you can simply specify a folder, such as \"my_folder/\", I could not get this to work.  Therefore, I just cleverly used filename extensions to manage things.\n\nFor example, git lfs track \"my_folder/\" would not work for me, but git lfs track \"*.zip\" did work.\n\n\nI had no luck getting LFS files to be identified correctly unless I had first updated the .gitattributes file, and committed and pushed that new file to the remote server.\n\ngit lfs track \"*.zip\"\ngit add .gitattributes\ngit commit -m \"Updated the attributes\"\ngit push\ngit add my_large_file.zip\ngit lfs ls-files\n\nAnd here I would ensure that I saw my_large_file.zip being tracked.\n\n\ngit commit -m \"Now I am adding the large file\"\ngit push\n\n\n\n\nIt's possible that some of the things work, and I was simply doing them wrong.  However, following the witchcraft described above finally got LFS to work, so I thought I'd pass on these details for others, in case someone else had the same problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git flow command error: 'flow' is not a git command\n\nI am very new to Git and am starting to learn the command line version. I believe my git flow is not installed correctly. I am running this from a pc. \nWhen i run following command:\ngit flow feature start JamesTest\n\nI get the following error:\n\ngit: 'flow' is not a git command. See 'git --help'\n  Did you mean any of these?\n\nLooks like the git flow command is not being recognized from all paths? How do I fix this?"}, {"role": "assistant", "content": "The git flow is not installed in your machine. Just run this command,\nmacOS:\n$ brew install git-flow-avh\n\nLinux:\n$ apt-get install git-flow\n\nWindows:\n$ wget -q -O - --no-check-certificate https://raw.github.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh install stable | bash\n\n\nSource git-flow cheatsheet by Daniel Kummer\n\nAfter successful installation run git flow init in your project and then follow the instructions to configure the git flow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub can't rebase my feature branch: \"This branch cannot be rebased due to conflicts\"\n\nEven when my feature branch was branched out from the latest version of main, when I attempt to rebase my PR (from feature X to main), I end up seeing:\nThis branch cannot be rebased due to conflicts\nRebasing the commits of this branch on top of the base branch cannot be performed automatically due to conflicts encountered while reapplying the individual commits from the head branch.\nI understand that this can be resolved by:\ngit checkout main\ngit rebase feature/x\n(resolve conflicts)\n\nHowever, direct pushing to main is locked and I need to go through a PR. What are the steps to successfully be able to rebase a feature/x branch to main through a pull request?"}, {"role": "assistant", "content": "If you created the branch from main but you now need to rebase onto main then main must have been updated since you created your branch. The conflicts come from those changes.\n\nI understand that this can be resolved by:\ngit checkout main\ngit rebase feature/x\n(resolve conflicts)\n\n\nThis isn't correct. This would rebase main onto feature/x; you need to rebase feature/x onto main.\nInstead,\n\nupdate your local main from GitHub before the rebase by pulling it or similar,\ncheck feature/x out,\nrun git rebase main, and\nresolve conflicts.\n\nThen push your feature branch to GitHub (you'll need to use --force-with-lease since this rewrites commit hashes). The pull request will be updated accordingly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Install ruby gem globally from github repository\n\nI want to install a ruby gem globally (sudo gem install capybara-webkit) but I want it to be installed from the master in its github repository.  I know this can be done using bundler but I want to do it from the command line because I'm coding mainly using pry."}, {"role": "assistant", "content": "Download the source:\ngit clone https://github.com/thoughtbot/capybara-webkit.git\n\nBuild the gem:\ncd capybara-webkit && gem build capybara-webkit.gemspec\n\nInstall it (the filename/version may vary):\nsudo gem install capybara-webkit-0.14.1.gem"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "AWS CodePipeline not able to access Organization's repositories\n\nI am trying to setup Continuous deployments pipelines in AWS Codepipeline.\nWhile creating a pipeline I provide \"Source provider\" as GitHub and then connect to GitHub. \nI am able to see my public repositories in \"Repository\" drop-down in create Pipeline page. But I am not able to see my Organization's private repositories in this drop-down.\nI have write access in Organization.\nHow can I make AWS Codepipeline have access to my organizations repositories."}, {"role": "assistant", "content": "On Github, follow this path.\n\nGo to your user profile (click the Avatar/icon).\nSettings.\nApplication from the menu.\nAuthorized OAuth Apps tab.\nSelect CodePipeline\nGrant Organization Access to it.\n\n***As of 2021"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cannot push on Github suddenly\n\nWell, it is very weird. I'm using Github protection rules to enforce to make pull requests and to trigger TravisCI for every push. However, because of continuous translation, I need a user who should be able to push without making a pull request and avoiding TravisCI status check (for that I use [ci skip]). This user is included in the white list that Github provides in branch protection rules. It worked perfect since last week, suddenly when I try to push with this user I receive this:\nremote: Resolving deltas: 100% (5/5), completed with 5 local objects.\nremote: error: GH006: Protected branch update failed for refs/heads/master.\nremote: error: Required status check \"Travis CI - Pull Request\" is expected. At least 1 approving review is required by reviewers with write access.\nTo https://github.com/*****\n ! [remote rejected] master -> master (protected branch hook declined)\nerror: failed to push some refs to 'https://*****'\n\nIt is very weird since it always worked till now. And, the user has permissions to push without making a pull request and it is skipping Travis with through the commit message so I do not understand why Github is asking me about status check and approvals."}, {"role": "assistant", "content": "The latest issue I had :\nremote: error: GH006: Protected branch update failed for refs/heads/master.\nremote: error: Cannot force-push to this protected branch\nTo https://github.com/org/project.git\n ! [remote rejected]     master -> master (protected branch hook declined)\nerror: failed to push some refs to 'https://github.com/org/project.git \n\nBecause I'm admin/owner I was able to go and do the following and that helped me to resolve the push problem.\nSteps :\n--> Settings \n   -->Branches\n       --> Tick Allow force pushes\n                Permit force pushes for all users with push access.\nThat will do the work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Having Trouble Switching Github accounts on terminal\n\nIt's been a while since I pushed anything to GitHub.  I had initially set up my account on my computer, and everything worked great.  Then I changed my account to a client's account (so I could push code to their private repository).\nIt's been a while and now I am changing back to my old account, and I am having trouble.  I generated a new rsa_key and pretty much followed the instructions here to a T.\nHowever, when I type: ssh -T [email\u00a0protected] I get:\nHi oldincorrectusername! You've successfully authenticated, but GitHub does not provide shell access.\nI can't push to my repos either, because this old client username isn't authorized.  I've doublechecked my ssh keys both on my computer and on my account setting on GitHub.\nI've also set my global account variables:\ngit config --global user.name \"Firstname Lastname\"\ngit config --global user.email \"[email\u00a0protected]\"\ngit config --global github.user username\ngit config --global github.token 0123456789yourf0123456789token\n\nAnd still it is giving me the old username.  \nAny suggestions?\nThanks,"}, {"role": "assistant", "content": "The problem is that your local ssh is still offering your \u201cold\u201d SSH key to GitHub. This often comes up when you have one GitHub-recognized key (i.e. your \u201cold\u201d key) loaded in an ssh-agent but want to use a different GitHub-recognized key (i.e. your \u201cnew\u201d key).\nssh offers keys in this order:\n\nspecified keys that have been loaded into the agent\nother keys that have been loaded into the agent\nspecified keys that have not been loaded into the agent\n\nBy \u201cspecified keys\u201d I mean those keys specified by the -i command line option or the IdentityFile configuration option (which can be given through ~/.ssh/config or the -o command line option).\nIf your \u201cold\u201d key is loaded into the agent, but your \u201cnew\u201d key is not, then ssh will always offer your \u201cold\u201d key (from the first or second categories) before your \u201cnew\u201d key (only ever in the last category since it is not loaded), even when you specify your \u201cnew\u201d key with -i/IdentitiesOnly.\n\nYou can check which keys are loaded in your ssh-agent with ssh-add -l. If your \u201cold\u201d key is listed, then you can fix the problem by unloading it from your agent (be sure to also unload any other GitHub-recognized keys, except perhaps your \u201cnew\u201d key):\nssh-add -d ~/.ssh/old_key_file\n\nIf you are using Mac OS X, the system may be automatically loading your \u201cold\u201d key if you checked \u201cRemember password in my keychain\u201d when prompted for the password at one point; you can disable this automatic loading by deleting the Keychain entry for the key with the command\n/usr/bin/ssh-add -K -d ~/.ssh/old_key_file. Other systems may do something similar, but the commands to tell them to \u201cstop that\u201d will be different.\n\nInstead of unloading the \u201cold\u201d key from your agent, you can set the IdentitiesOnly configuration option to yes, to tell ssh to skip the second category of keys (non-specified agent-loaded keys). Your ~/.ssh/config might include a section like this:\nHost github.com\n    User           git\n    IdentityFile   ~/.ssh/id_rsa # wherever your \"new\" key lives\n    IdentitiesOnly yes\n\nThis way, it will not matter whether any other GitHub-recognized keys are loaded into your agent; ssh will always offer only your \u201cnew\u201d key.\nIf you anticipate needing to access the repositories of both GitHub accounts and you do not want to have to edit the configuration file whenever you want to switch between GitHub accounts, then you might setup your ~/.ssh/config like this:\nHost clientname.github.com\n    HostName      github.com\n    IdentityFile ~/.ssh/client_id_rsa  # or wherever your \"old\" client key lives\n\nHost github.com\n    IdentityFile   ~/.ssh/id_rsa        # or wherever your \"new\" key lives\n\nHost github.com *.github.com\n    User           git\n    Hostname       github.com\n    IdentitiesOnly yes\n\nThen use URLs like github.com:GitHubAccount/repository for your repositories and URLs like clientname.github.com:GitHubAccount/repository for your client\u2019s repositories (you can put the git@ prefix back in if you like, but it is not necessary since the above entries set the User configuration variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to access a Github Wiki via SSH?\n\nI just created a Wiki for a Github repo, and cloned it to my desktop. There is only the option to clone using https, which means every time I try to push git asks me for my username and password.\nIs there some way to use SSH in a Github Wiki as I do with all my standard repos?\nI checked the Wiki help but couldn't find anything there.\n\nI' using 2FA in Github by the way."}, {"role": "assistant", "content": "You can also clone wiki via ssh : \ngit clone [email\u00a0protected]:YOUR_USERNAME/YOUR_REPOSITORY.wiki.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I remove all stale branches from Github?\n\nWe have a lot of branches that are inactive (the newest is 7 months old, the oldest is two years ago).\nI'd like to remove all of those branches in bulk from the remote if no PR is still open for them.\nShould I be using Github's API? Should I be using git using snippets like those provided in this StackOverflow question?\nIs there some Github functionality I'm not familiar with that can help organize our repository?"}, {"role": "assistant", "content": "You can right click on the browser after opening https://github.com/someowner/someproject/branches/stale and run this in the browser java script console.\nTo delete all the stale branches. i.e) this script automatically clicks to the next page and proceeds to delete stale branches in the next page.\nasync function deleteStaleBranches(delay=500) {     \n    var stale_branches = document.querySelectorAll('[aria-label=\"Delete branch\"]');\n        for (var i = 0; i < stale_branches.length; i++)     {  \n          stale_branches.item(i).click();\n          await new Promise(r => setTimeout(r, delay));     \n        }     \n        const next = document.querySelector('[aria-label=\"Next Page\"]');\n        if(next) {         \n            next.click();\n            setTimeout(() => deleteStaleBranches(500), 500);\n        } \n}  (() => { deleteStaleBranches(500); })();\n\nTo delete the stale branches that is present in the current page only:\nasync function deleteStaleBranches(delay=500) {     \n    var stale_branches = document.querySelectorAll('[aria-label=\"Delete branch\"]');\n        for (var i = 0; i < stale_branches.length; i++)     {  \n          stale_branches.item(i).click();\n          await new Promise(r => setTimeout(r, delay));     \n        }     \n        \n}  (() => { deleteStaleBranches(500); })();"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Ignoring specific files, file types or folders in a pull request diff\n\nWe frequently use the Files Changed tab on a pull request to peer review the work we have done on a branch, unfortunately a major part of our development process is regenerating Flex services so when viewing the files changed 99% of the changes are irrelevant. This makes it very easy to miss important changes that should be reviewed.\nWe know the folder that these regenerated services live in, and we could commit all the regen changes in one commit if that would help.\nDoes anyone have any suggestions how we can improve this? Ideally we would exclude a folder from the pull request diff."}, {"role": "assistant", "content": "Github supports this now with a .gitattributes file.\n\nCreate a .gitattributes file in the root of the repository.\nUse the linguist-generated attribute to mark or unmark paths that you would like to be ignored for the repository's language statistics and hidden by default in diffs.\n\nFor example, to mark search/index.json as a generated file, add this line to .gitattributes:\nsearch/index.json linguist-generated=true\n\nReference: https://help.github.com/en/github/administering-a-repository/customizing-how-changed-files-appear-on-github"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "error: could not lock config file filepath/../.git/config :permission denied\n\ni created a folder called \"try\" in the path /home/bhishan/Copy/try\nthen inside that folder i gave some commands:\nmy commands are follwing:\ncurl -s -O \\\nhttp://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain\n\nchmod u+x git-credential-osxkeychain\n\nsudo mv git-credential-osxkeychain `dirname \\`which git\\``\n\ngit config --global credential.helper osxkeychain\n\ngit init\n\ngit remote add origin https:\n\ngit remote add origin https:\n\ngit push origin master\n\n==============================\nit worked fine but, when i try to delete try folder i cannot delete the folder.\ni also can not give command:\ngit init\n\ninside the try folder ( i have a .git folder there)\n=====================================================\nmy command line and error report is this:\nbhishan@bhishan-HP-Pavilion-dv6-Notebook-PC:~/Copy/try$ git init\nerror: could not lock config file /home/bhishan/Copy/try/.git/config: Permission denied\n\nnow, my question is how can i delete the folder called \"try\" ?"}, {"role": "assistant", "content": "These kinds of problems occur when you use sudo to run commands with side effects such as file creation. \nIt's quite common to find files and directories in your home directory that are owned by root. In this case it seems your .git/config file is owned by root and thus gives you the permissions error when you try to lock it. \nsudo chown bhishan -R .git from the ~/Copy/try directory should fix the permissions issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "MarkdownSharp & GitHub syntax for C# code\n\nIs there a way to get MarkdownSharp (I'm using the NuGet package) to handle 'GitHub flavored Markdown (GFM)' and especially syntax highlighting of c# code, which (in GFM) is written like this:\n```c#\n//my code.....\n```\n\nSo, if I pass Markdown formatted content to MarkDownSharp, containg a C# code block (as above) I want it to generate syntax highlighted html for that c# code. Any ideas? I know I can use the supported 4 spaces to indicate a code block, but again, I'm seeking a solution for getting it to support GitHub flavored Markdown."}, {"role": "assistant", "content": "I have made some light modifications to MarkdownSharp that will transform github flavored fenced code blocks\nhttps://github.com/KyleGobel/MarkdownSharp-GithubCodeBlocks\n```cs\nConsole.WriteLine(\"Fenced code blocks ftw!\");\n```\n\nWould become\n<pre><code class='language-cs'>\nConsole.WriteLine(\"Fenced code blocks ftw!\");\n</code></pre>\n\nIt handles the cases I needed to use, there are probably lots of edge cases though, feel free to fork/change/modify/pull request.  Markdown sharp has plenty of comments and is all only one file, so it's not too bad to modify."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is GitHub's public GPG key?\n\nIf you make an edit through GitHub's website, or merge a pull request, then the resulting commits are automatically signed with GitHub's GPG key. It looks like this:\n\nI would like to have the full public key so that I can add it as a trusted key on my system. What is GitHub's public GPG key?"}, {"role": "assistant", "content": "GitHub sets the committer for all commits made using their web interface to the user web-flow.\nFor any given GitHub account, you can add .gpg to its URL to get its public key\u2014so for web-flow, you can find it at https://github.com/web-flow.gpg:\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nxsBNBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta\nx15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT\nSQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ\n7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa\nbuXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v\nyWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAHNNUdpdEh1YiAod2ViLWZs\nb3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+wsBiBBMBCAAW\nBQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEIACATWFmi2oxlBh3wAsySNCNV4IPf\nDDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6\n9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws\n+8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5\n4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O\nj7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48=\n=HXDP\n-----END PGP PUBLIC KEY BLOCK-----\n\nYou can then import and trust that public key.\nAs shown in this thread:\n$ curl https://github.com/web-flow.gpg | gpg --import\n$ gpg --edit-key [email\u00a0protected]\ngpg> trust\ngpg> save\n$ gpg --lsign-key [email\u00a0protected]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the File Mode on GitHub?\n\n$ git add test-file\n\n$ git commit -m 'first commit'\n create mode 100644 test-file\n\n$ git push\n\n\n$ git update-index --add --chmod=+x test-file\n\n$ git commit -m 'change mode'\n mode change 100644 => 100755 test-file\n\n$ git push\n\n\nAfter that if you go to GitHub it still shows as 100644 no matter what."}, {"role": "assistant", "content": "MSYS is not the problem. Even if MSYS chmod doesn't work (it doesn't), Git has a built in way of getting around that problem, i.e. git update-index --chmod=+x. Let it be clear that git update-index only messes with the index (staging area), not the local repository (working directory).\nI am convinced the problem is with GitHub. On GitHub if a file is initially pushed with mode 100775, all is well. If a file is initially pushed as 100644 it causes a problem. Attempts to change the file mode will succeed with git add, succeed with git commit, succeed with git push, and even show up in the GitHub file history, but not be reflected on the \"blob/master\" page on GitHub.\nUpdate\n\nFrom: Petros Amiridis (GitHub Staff)\nSubject: How to change FIle Mode on GitHub?\nI have some good news. Our awesome team has just confirmed it is a caching bug\non our end. Our team has deployed a fix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Difference between collaborator and contributor\n\nIn github, I often see these terms and in many cases they are used interchangeably. Can someone please explain the difference between a contributor and a collaborator?"}, {"role": "assistant", "content": "From the GitHub Open Source Guide and GitHub Help.\n\nAuthor: The person/s or organization that created the project\nOwner: The person/s who has administrative ownership over the organization or repository (not always the same as the original author)\nMaintainers: Contributors who are responsible for driving the vision and managing the organizational aspects of the project. (They may also be authors or owners of the project.)\nContributors: Everyone who has contributed something back to the project.\nCommunity Members: People who use the project. They might be active in conversations or express their opinion on the project\u2019s direction.\nAn outside collaborator is a person who isn't explicitly a member of your organization, but who has Read, Write, or Admin permissions to one or more repositories in your organization."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I create nested repositories in GitHub?\n\nI am able to create a repository via https://github.com/ (say repo) and have:\nhttps://github.com/username/repo.git\n\nHow do I create another repository (say sub_repo) placed under repo and expectedly have:\nhttps://github.com/username/repo/sub_repo.git"}, {"role": "assistant", "content": "GitHub does not allow nested repositories (IIRC Git doesn't allow this for bare repositories).\nHowever, you can use submodules to nest repositories on the \"client side\" in the working tree.\nYou need to clone the parent directory.\nThen, add the sub-repository as a submodule:\ngit submodule add https://github.com/username/sub_repo.git\n\nThe sub_repo module will then be linked to the parent repo and can be found in the sub_repo directory.\nCommit (.gitmodules and sub_repo), push and you're done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multi-user Github Pull Requests\n\nIs it possible to amend a pull request that someone else has started?\nAssume I maintain project X, and User A has sent me a pull request.  There's some things I want changed before merging and can quickly do them myself.  How can I do this simply and keep it all within one PR?\nIs this even possible?"}, {"role": "assistant", "content": "You can do it like this:\nIn your repo,\ngit checkout -b new-branch\n\nThen pull User A's commits into your new-branch:\ngit pull git://github.com/[User A]/[project-name].git\n\nAfter that, you can change it whatever you like in the new-branch. And when you test and satisfy with your changes, you can merge it into your master branch:\ngit checkout master\ngit merge new-branch\n\nOK, now you have your code with User A and your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I have a nested git repo inside a git-ignored folder?\n\nI have a git repo which have following folders:\n _includes/\n _layouts/\n _plugins/\n _posts/\n _site/\n\n_site folder is added in the .gitignore file.\nNow can I have a git repo inside _site folder with different remote repo for push and pull? Will there be any conflict?\nI have studied git submodules but I think it would be a overkill in my case, if the above stated method can work."}, {"role": "assistant", "content": "I think it should work. For main repo, _site folder does not exists. So what you have inside it doesn't matter. When you cd into _site you will be on that independent repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I view the source of Markdown files on Github?\n\nGithub helpfully renders Markdown (.md) files to HTML when viewing on github.com (for example, this README.md).\nWhen viewing any other source file, it is shown as unrendered source code (for example, this .gitignore). A handy feature this gives is linking directly to a line in the source by clicking the line number (for example, like this).\nHow can I view the unrendered source of Markdown files on Github (so I can link to a particular line in the source)?\nnote: I know of the \"Raw\" button, however it does not provide any of the nice UI Github has."}, {"role": "assistant", "content": "If you don't want to use the \"raw\" button, you can (since June 2021) add ?plain=1 to your GitHub markdown file URL:\n\nAppending ?plain=1 to the url for any Markdown file will now display the file without rendering.\nAs with other code files, it will also show line numbers, and can be used to link other users to a specific line or lines.\nFor example, appending ?plain=1#L52 will highlight line 52 of a plain text Markdown file.\n\nExample:\nhttps://github.com/git/git/blob/master/README.md?plain=1#L49-L51\n\nSince Sept. 2021, there is a button which adds the ?plain=1 for you:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github for windows - ssh-agent.exe using high CPU + 100% disk?\n\nI've just installed Github for Windows on my Windows 8.1 machine and it appears to work fine except that my machine performance drops down dramatically.\nLooking at task manager I see that ssh-agent.exe is using a constant 25% CPU (no doubt 100% of one of my cores) and the disk usage is at 100%.\nI have had a look on the Internet but can't find any reference to what might be causing this.\nAny ideas what might be causing this and how to resolve it?\nUPDATE:\nI can kill the process and GitHub for Windows appears to keep working but the ssh-agent.exe process starts up again as soon as I close and restart Github for Windows."}, {"role": "assistant", "content": "Further to moggizx's comment in one of the other answers, I found this was influenced by SourceTree too.\nThe instance of ssh-agent.exe with the high CPU actually gets terminated when you close SourceTree. Restarting SourceTree does cause another ssh-agent process to be spawned, but the CPU is then idle."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I use a pdf file as the readme in my github repo?\n\nI have a pdf file generated by latex which has many equations and what not.  I want to use this pdf as the readme.md file in my github repo.  How can I do this?\nAlternatively, is it possible to directly integrate the tex file in github and use that as a readme instead of the pdf version? Does github allow any integration with latex syntax as does gmail for example?"}, {"role": "assistant", "content": "You cannot import PDF as Readme, but I also don't see the point as it support the wonderful MD Language which can be seen easily with any device (also mobile).\nI have fixed the equations problem by using images. There is a nice website for that: http://mathurl.com/\nJust type your latex equation and click \"Make Math url\" (bottom left button), the copy paste the image link (in red).\nI have used it in the wiki of github (but it should work the same with readme.md): https://github.com/scholi/pySPM/wiki/Mass-calibration\nEnjoy!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create pull request with github action\n\nI'm trying to make it work this action, but I'm confused also whats it's missing in between, before triggering the peter-evans PR.\nThe scenario is pretty simple, I like on push, on any feature/* branch, to create automatically PR, but instead I'm getting weird scenario, where develop changes are applied on top of the feature/* branch. Can someone give me hints on this?\nname: Pull Request Action\non:\n  push:\n    branches:\n      - feature/*\n\njobs:\n  create-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n          ref: develop\n      \n      - name: Create Pull Request\n        uses: peter-evans/[email\u00a0protected]\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: Simple demo\n          title: '[Example] Simple demo'\n          body: >\n            This PR is auto-generated by \n            [create-pull-request](https://github.com/peter-evans/create-pull-request).\n          labels: feature, automated pr\n          branch: feature/workflow-demo"}, {"role": "assistant", "content": "I know this question is a year old now and asking about the create-pull-request action, but for those that would rather not use third-party actions,  Github actions now support Github command line natively, if you use  Github hosted runners. See: Using Github CLI in Workflows\nThis makes it super easy to create a pull request using the gh pr create command\nSomething like this:\n  steps:\n    - name: create pull request\n      run: gh pr create -B base_branch -H branch_to_merge --title 'Merge branch_to_merge into base_branch' --body 'Created by Github action'\n      env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I run notebooks of a Github project in Google Colab?\n\nI want to run the notbooks in the following project on Github (located in notebook folder)\nhttps://github.com/n-waves/multifit\nThe notebooks depend on the other modules, files and data of the whole project, so I can't just open them in google Colab. I can use !git clone ... to make a clone on the space provided by Colab, but then I can't open the notbooks in the browser and run them (like other notebooks run by google Colab).\nSo, my question is how to run those notebooks in google colab, I would prefer to run them in visual mode (I mean the browser)?"}, {"role": "assistant", "content": "Open the Github notebook that you want to work with in Google Colab.\nChange the domain from 'github.com' to 'githubtocolab.com'.\nThe notebook will open in Colab.\nOnly works with Public repos."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get out of a folder using Git Bash\n\nI am using Git Bash and am trying a few things like making a 'commit' and 'push' to GitHub. \nI want to get out of the current directory C:\\user\\myUsername\\app and land in the C:\\user\\myUsername folder. \nWhat commands do I write in Git Bash?"}, {"role": "assistant", "content": "To change your directory in git-bash to that specific path you can use this command : \ncd /c/user/myUsername\n\nbasically you have to replace backslash with standard slash, or otherwise if you simply want to go to the parent directory you can use : \ncd ..\n\nas stated in comments that you already received on your question ..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change git shell's start directory in windows 7\n\nI downloaded and installed the programs offered by GitHub including Git Shell.\nThe problem is that I want to set up the home directory of the Git Shell program to a custom one, but I don't know how to do that.\nI tried changing the \"start in\" field from the properties menu of the Git Shell shortcut but it didn't work.\nCan anybody please give me some information on how to change the home directory of the Git Shell to a custom one?"}, {"role": "assistant", "content": "Right click on Git Shell\nChoose Properties\nMove to the end of the Target field\nChange --open-shell to --open-shell=c:\\your_dir"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I do basic authentication with RestClient?\n\nDoes anyone know how to do basic authentication with RestClient?\nI need to create a private repository on GitHub through their RESTful API."}, {"role": "assistant", "content": "The easiest way is to embed the details in the URL:\nRestClient.get \"http://username:[email\u00a0protected]\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Visual Studio 2017 15.3.0 git changes include \"storage.ide\" even though .vs/ in .gitignore\n\nI upgraded VS 2017 to 15.3.0 a few days ago. Since then file \"storage.ide\" has remained in my modified files, even through I have used a suggested .gitignore for VS, which includes the .vs/ folder. This includes the following.\n# Visual Studio 2015 cache/options directory\n.vs/\n\nI then added the following to be more specific about ignoring this from the list of files to be tracked\n.vs/SIASAWeb/v15/sqlite3/storage.ide\n.vs/**/storage.ide\n\nThe Changes in the Team Explorer shows the following:\n<project folder>\n  .vs/<project>/v15/sqlite3\n    storage.ide\n\nI have tried to git reset this file, but this then returns on the next commit, and also exists in all branches which I open, resulting in this then preventing the easy shift from one branch to another even if no changes were made.\nIn the Solution Explorer the \"applicationhost.config\" and \".suo\" files are marked as \"ignored\", but \"storage.ide\" is marked as \"pending edit\".\nI have tried committing, synced to the GitHub server, closing and re-opened VS, and even rebooting the computer.\nMy question is why this file is being maintained as a modified file, even though it should be ignored for git."}, {"role": "assistant", "content": "To fix this, if you got to the Team Explorer tab and click on the Manage Connections button (the green one a the top) you will see a list of local Git Repositories. \nRight click on the repository you want to stop tracking the storage.ide file on and select Open Command Prompt.\nYou should then be able to type the following:\ngit rm --cached -r .vs\n\nThis removes the .vs folder and its contents and subdirectories from being tracked in git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Actions CI Conditional Regex\n\nI'm trying to move my CI workflow from CircleCI to GitHub Actions. The last major struggle I'm facing is with deployment.\nCurrently my workflow is such that when I push a tag to my GitHub repo, it will run the tests, then run the deployment. Only thing is CircleCI filters tags to only run the job if the tag matches the regex: /v[0-9]+(\\.[0-9]+)*/.\nHow can I check to ensure the tag I pushed matches the regex pattern above before running the deployment?\nI currently have the following GitHub Actions yml file:\nname: CI\non: [create]\n\njobs:\n  # ...\n\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.ref_type == 'tag' && github.event.ref == SOMETHING HERE\n    steps:\n      - uses: actions/checkout@v1\n      # ...\n\nUnder the if block, I need to change github.event.ref == SOMETHING HERE to be something else. I have looked in the Contexts and expression syntax for GitHub Actions documentation page. But due to how flexible and powerful GitHub Actions is, it seems like there should be a method or way to do this, or at least some type of workaround.\nHow can I ensure the tag (github.event.ref) matches the regex pattern (/v[0-9]+(\\.[0-9]+)*/)?"}, {"role": "assistant", "content": "Unfortunately, I don't think there is any way to do regex matching on if conditional expressions yet.\nOne option is to use filtering on push events.\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\nAnother option is to do the regex check in a separate step where it creates a step output. This can then be used in an if conditional.\n      - name: Check Tag\n        id: check-tag\n        run: |\n          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n              echo \"match=true\" >> $GITHUB_OUTPUT\n          fi\n      - name: Build\n        if: steps.check-tag.outputs.match == 'true'\n        run: |\n          echo \"Tag is a match\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't login to GitHub from SourceTree anymore\n\nI was able to login up until today when it just stopped working. I'm using a Windows 7 machine. I have 2-factor authentication.\nI've tried personal access tokens. I've tried deleting my credentials and re-adding them. I've tried nuking and/or updating credentials in Windows Credentials Manager. I've tried OATH vs Basic authentication. No luck. It just keeps asking me for \"Username or email\" and \"password\".\nI've tried changing my GitHub password. I've tried authenticating with OAuth (SourceTree says it's connected, but then I get the login screen again).\nCan anybody out there give me a list of steps to get back into our repo from SourceTree? I'm blocked now and unable to do work until I get this fixed."}, {"role": "assistant", "content": "Your git is out of date. You need to update your system git and then switch ST to use that. I think ST's embedded git needs to update the latest git version available on their server (complete guess). In the meantime, this works for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Official badge for GitHub actions\n\nDoes GitHub have an official 'badge' for their new 'actions' feature?  \nI came across this request on their official repo and there seems to be an official one:\nhttps://github.com/{github_id}/{repository}/workflows/{workflow_name}/badge.svg\n\nas per this comment, but I am unable to get it to work.  Is it actually working?  When I use it, I get the below output:\n\nNote that I have replaced {github_id} with my username, {repository} with my repo name and {workflow_name} with the corresponding workflow name (removing the curly braces).  Does anyone else have this issue?\nEdit: I am working on a private repo, in case it makes a difference."}, {"role": "assistant", "content": "You can get the actions badge by navigating to the required workflow on your repo on GitHub.com, clicking on the settings button on the right (the one with 3 dots beside the workflow search) and clicking on the Create status badge button.\n\nHere, you can select the badge for the required branch and event and use the generated markdown.\nFor eg, below is the badge that I generated for the default branch and event of the CI workflow of my fork:\n\nThe markdown for the above badge:\n[![Build and Deploy](https://github.com/kratostaine/spring-authorization-server/actions/workflows/continuous-integration-workflow.yml/badge.svg)](https://github.com/kratostaine/spring-authorization-server/actions/workflows/continuous-integration-workflow.yml)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to delete all Git remote branches except master?\n\nLooking for a command to delete all branches on Git repository except for master and push them to remote.\nThis is to clean up Git repository before making a release as the previous history branches everything else are totally dev changes and doesn't matter."}, {"role": "assistant", "content": "This will remove all branches (except for master), even if the branch has a slash '/' in it:\ngit branch -r | grep 'origin' | grep -v 'master$' | grep -v HEAD | cut -d/ -f2- | while read line; do git push origin :heads/$line; done;\n\nThis will do the same, leaving both develop and master branches alone:\ngit branch -r | grep 'origin' | grep -v 'master$' | grep -v 'develop$' | grep -v HEAD | cut -d/ -f2- | while read line; do git push origin :heads/$line; done;\n\nThis is the script for fish shell:\ngit branch -r | grep 'origin' | grep -v 'master$' | grep -v 'develop$' | grep -v HEAD | cut -d/ -f2- | while read line; git push origin :heads/$line; end;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitkraken Desktop App - Error login: \"Please log in to continue\"\n\nWho has been working with client GitKraken as GIT, you will know that authentication required?\nFor the application, log in with: [email\u00a0protected]\nThe repository is with: [email\u00a0protected]\nIt requires credentials to make a pull, but I tried with both emails and usernames, and does not allow me.\nCapture:\n\nIn SourceTree it works perfectly, but here not!.\nThanked fully!."}, {"role": "assistant", "content": "The credentials asked for, are the credentials for the repo you are trying to access, not for your Gitkraken account, which is very confusing.\nIf you are using visualstudio.com, you would have to generate Git credentials. Do this by browsing to your project, click 'Code' and then on the right top corner, there is a button 'clone'. Press that, a popup opens. In there, click 'generate git credentials'. Fill in a username/password combo and press 'save git credentials'. That combo will now work with GitKraken."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a Gitlab webhook to update a mirror repo on Github?\n\nI would like to create a webhook within Gitlab to automatically update a mirror repository on Github, whenever a push event happens. I've checked this page, but I didn't understand how it is done.\nMy Gitlab version is 6.5. Here is the configuration page:\n\nWhat should I put in URL? Where do I need to place the script to update the repository?"}, {"role": "assistant", "content": "You don't need a webhook for that. A regular post-receive hook will work very well.\nTo create and use such a hook you just have to login on the server where your gitlab is installed and create an ssh key for git user.\nsudo -u git ssh-keygen -f /home/git/.ssh/reponame_key\n\n(do not type any passphrase when prompted)\nGo to your github account and add the public key (it's been created as /home/git/ssh/reponame_key.pub) to your project as a deploy key.\nhave a look at https://help.github.com/articles/managing-deploy-keys if you need help with that.\nOnce that is done, you just have to configure the connection between your git server and github's:\nadd an alias to git user's ssh configuration (add following lines to /home/git/.ssh/config - create it if it's not present)\nHost reponame  \nIdentityFile /home/git/.ssh/reponame_key  \nHostName github.com  \nUser git \n\nNow add the new remote (using the alias you just created) to your repository:\ncd /home/git/repositories/namespace/reponame.git\n\ngit remote add --mirror github reponame:youruser/reponame.git\n\nNow that everything is in place you'll have to create the actual hook:\ncd /home/git/repositories/namespace/reponame.git/hooks\n\necho \"exec git push --quiet github &\" >> post-receive\n\nchmod 755 post-receive\n\nThe lastcommand is very important because git will check if a hook is executable before running it.\nThat's it!\n(Replace reponame, namespace and youruser according to your real accounts and enjoy).\nLast note: if you want your name andavatar near commits on github, make sure that the email address you are using on gitlab is one of the addresses inked to your github account as well. You'll see your gitlab username otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make a GitHub mirror to Bitbucket?\n\nI have a repo that I've cloned from GitHub and want to have a mirror of this repo on BitBucket. Is there is any way how to do it? Something like having two origin in the repo as I think."}, {"role": "assistant", "content": "You could simply add a second remote:\ngit remote add bitbucket /url/to/am/empty/bitbucket/repo\n\nand push everything to bitbucket:\ngit push --mirror bitbucket\n\nYou can actually pull from or push to multiple remotes from your local repo.\n\nUpdate 2020:\nAs noted below in Rahulmohan Kolakandy's answer, if you are talking about an on-premise BitBucket server (as opposed to bitbucket.org), then you can take advantage of BitBucket Server Smart Mirroring.\nAs commented by V-Q-A NGUYEN: \nBitBucket Server Smart Mirroring (introduced originally in 2016, and Oct. 2017 for BitBucket Server)\n\nis only available for customers with an active Bitbucket Data Center license"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Latest Update brings Github error on pull, push, or sync\n\nIn Visual Studio 2019, we have been using the GitHub extension successfully since before release.  Now, all of the sudden, when we push, pull, or sync, we receive the following in the Output window:\nWarning: 'C:\\ProgramData/Git/config' has a dubious owner: '(unknown)'.\nFor security reasons, it is therefore ignored.\nTo fix this, please transfer ownership to an admininstrator."}, {"role": "assistant", "content": "You should check if 'C:\\ProgramData/Git/config' actually exists. If it doesn't you can just create it and paste the following into the file:\n[core]\n    symlinks = false\n    autocrlf = true\n    fscache = true\n[color]\n    diff = auto\n    status = auto\n    branch = auto\n    interactive = true\n[help]\n    format = html\n[rebase]\n    autosquash = true\n\nThis worked for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see all Pull requests that im tagged as a reviewer\n\nIn github you can add a number of reviewers. \nWhat I'm looking for is, as a user, to list all the pull requests that I'm currently tagged as a reviewer in. \nI have looked at the views that's available in the \"pull request\" link but this don't meet my demands.\nFor instance if I go to the \"Review requested\" i get a \"No results matched your search\"\nIs there someone who has a either a nice search query for achieving this?"}, {"role": "assistant", "content": "Try the link https://github.com/pulls/review-requested, which shows you all Pull Requests that you've been tagged in as a reviewer. \nNote that you may have to click the Open or Closed buttons on that page to filter the Pull Requests you wish to see.\nThe equivalent Github search is: is:open is:pr review-requested:<username> archived:false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore doesn't ignore .suo Visual studio file\n\nI want to do simple thing, ignore .suo file and bin and obj folders from committing to git repo. I've created .gitignore file and it's working for bin and obj folders, but it keeps allowing .suo file committing. \nThe content of gitignore is simple:\n/build/\n*.suo\n*.user\n_ReSharper.*/\n*.sdf\nbin/\nobj/\nDebug/\nRelease/\n*.opensdf\n*.tlog\n*.log\nTestResult.xml\n*.VisualState.xml\nVersion.cs\nVersion.h\nVersion.cpp\n\nFirstly I've thought that the problem is that .suo file is already on the repo, so I've used set of git commands to remove it from repo:\ngit rm \"file.suo\"\ngit commit -m \"suo removed\"\ngit pull origin master\ngit push origin master\n\nAnd everything goes well, .suo is removed locally, it is removed from repo, and on the next commit it gets pushed again to repo.\nOn the picture is committed .suo file.\n\nDid anyone had a problem like this? How to solve this kind of problem?"}, {"role": "assistant", "content": "This is probably a duplicate of GIT - Can't ignore .suo file\nAnd to be honest, you can try that suggestion. What you are missing here is to remove the already added *.suo file from the git repository.\nThe other answer has a nice set of commands to run: \ngit rm --cached *.suo\ngit commit -m \"Delete suo file from repository\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Static resources not loading on GitHub Pages\n\nI have created a website and am trying to host it on git hub pages. My site is available at - \nhttp://<username>.github.io/<project name>/\n\nBut the static files for my site are available at the following path - \nhttp://<username>.github.io/css/site.css\nhttp://<username>.github.io/script/main.js\n\nThe above path omits the <project name>\nSo whenever I hit the url my static files are not loaded.\nIs there a way to make it work with the github url?\nNote: When I use a custom domain everything works fine because the relative paths are fine in that case. \nTemporary Solution\nI have created a User page instead of a Project page to overcome this issue."}, {"role": "assistant", "content": "The other option is to include the file .nojekyll in your top-level directory which tells github to just serve your pages with out trying to break them (this is useful if you are trying to post the oputput from sphinx which does not need any more parsing/munging/rewriting).\nrelevant link"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to use HTTPS/SSL on GitHub Pages sites with a custom domain?\n\nIs there any way to use HTTPS/SSL on GitHub Pages sites that use a custom domain? SSL is recommended for better search engine ranking and there are a lot of other uses for it beyond that."}, {"role": "assistant", "content": "Custom domains on GitHub Pages do support HTTPS / SSL:\n\nGitHub Pages has supported custom domains since 2009, and sites on the *.github.io domain have supported HTTPS since 2016. Today, custom domains on GitHub Pages are gaining support for HTTPS as well, meaning over a million GitHub Pages sites will be served over HTTPS.\nhttps://blog.github.com/2018-05-01-github-pages-custom-domains-https/\n\n\nGo to https://github.com/**username**/**repo**/settings\n\nCheck the checkbox \"Enforce HTTPS\":\n\n\n\n\nPrior to May 1, 2018, SSL was supported by GitHub Pages only on sites using a *.github.io domain: https://help.github.com/articles/securing-your-github-pages-site-with-https/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Checkout, Fetch and Pull in BitBucket SourceTree\n\nI am using BitBucket for web based hosting of our projects. Along with that I am using their SourceTree for committing and such purpose. I am a bit confused with the Checkout, Fetch and Pull option available in the SourceTree interface and their usage. Can someone familiar with this tool explains the usage of these options available in SourceTree?"}, {"role": "assistant", "content": "Using Atlassian's Git tutorial (link updated) as a reference.\nGit checkout:\n\nThe git checkout command lets you navigate between the branches\n  created by git branch. Checking out a branch updates the files in the\n  working directory to match the version stored in that branch, and it\n  tells Git to record all new commits on that branch. Think of it as a\n  way to select which line of development you\u2019re working on.\nSource: https://www.atlassian.com/git/tutorials/using-branches#git-checkout\n\nGit pull:\n\nYou can think of git pull as Git's version of svn update. It\u2019s an easy\n  way to synchronize your local repository with upstream changes. The\n  following diagram explains each step of the pulling process.\nSource: https://www.atlassian.com/git/tutorials/syncing#git-pull\n\nGit fetch:\n\nThe git fetch command imports commits from a remote repository into\n  your local repo. The resulting commits are stored as remote branches\n  instead of the normal local branches that we\u2019ve been working with.\n  This gives you a chance to review changes before integrating them into\n  your copy of the project.\nSource: https://www.atlassian.com/git/tutorials/syncing#git-fetch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "README extension for Python projects\n\nPython packaging tools expect that our readme file should be named README or README.txt. But if we follow this convention, GitHub displays it as plain text in the project page which is not pretty. (unlike the beautiful HTML version when named as README.rst)\nIs there any technique to make both PyPI and GitHub happy about README."}, {"role": "assistant", "content": "PyPI has no requirement that the file is called README or README.txt, so just call it README.rst. In fact, PyPI will not as far as I'm aware look in your package at all (although I could be wrong there, I haven't studied the code or anything), the text that ends up ion the front is the long_description parameter.\nThen in your setup.py, you do something like this:\nsetup(name='Your module name',\n      version=\"1.0\",\n      description=\"Whatever, dude.\",\n      long_description=open('docs/README.rst', 'rt').read()\n)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I sign out of the desktop version of GitHub?\n\nThis seems like a very silly question but I can not find any way to log out of GitHub on the windows desktop application. Does anyone know how?"}, {"role": "assistant", "content": "Press CTRL + , to get to the options menu from which you can click sign out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push from github to heroku without downloading repo\n\nI have a github repo that I want to push to a heroku node. A 3rd host will be co-ordinating this. As I'm going to be doing this on a large scale I want to avoid having to download the contents of the repo onto the 3rd host. How do I do it?"}, {"role": "assistant", "content": "You can't push straight from Github to Heroku.\nYou're going to have to use the third host to coordinate the push. This could be fired from a Github post-receive hook.\nTo sync straight across use something like:\ngit remote add github [email\u00a0protected]:user/repo.git\ngit remote add heroku [email\u00a0protected]:app.git\n\ngit push heroku refs/remotes/github/master:refs/heads/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Protect Github branches from being deleted\n\nIt looks like the Github UI changed for settings/branches for a repo. I can no longer figure out how to prevent a branch from being deleted.\n\nDoes anyone know how to prevent a branch from being deleted? Aka, protect the branch?"}, {"role": "assistant", "content": "By default if you create a Branch protection rule for any branch, it Disables force-pushes to all matching branches and prevents them from being deleted. So if you create a rule with the pattern master, it would prevent the master branch from deletion by default.\nAbout how the rule pattern works, it uses fnmatch to match against any pattern provided to find out the branches to which the rule applies. For eg :\n\nRule pattern as * would apply to all the branches\nRule pattern as release* would apply to all the branches whose name starts with release\n\nCurrently I don't think you can set any single rule pattern on GitHub (I have tried) to match multiple branches like for eg master and develop, since ideally {master,develop} should match both the branches, but currently it doesn't, and according to the fnmatch documentation {a,b} matches pattern a and pattern b if File::FNM_EXTGLOB flag is enabled\nCheck out more details on the above on GitHub help and the fnmatch documentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub API V3 : what is the difference between pushed_at and updated_at?\n\nLooking to V3 API Repos (GET /repos/:owner/:repo) we have 3 datetime :\n  \"pushed_at\": \"2011-01-26T19:06:43Z\",\n  \"created_at\": \"2011-01-26T19:01:12Z\",\n  \"updated_at\": \"2011-01-26T19:14:43Z\",\n\nto have a fast example just link this https://api.github.com/repos/twitter/bootstrap \nWhat is the difference between pushed_at and updated_at ?"}, {"role": "assistant", "content": "UPDATE: the behavior described below wasn't intended. pushed_at will be updated any time a commit is pushed to any of the repository's branches. updated_at will be updated any time the repository object is updated, e.g. when the description or the primary language of the repository is updated. It's not necessary that a push will update the updated_at attribute -- that will only happen if a push triggers an update to the repository object. For example, if the primary language of the repository was Python, and then you pushed lots of JavaScript code -- that might change the primary language to JavaScript, which updates the repository object's language attribute and in turn updates the updated_at attribute. Previously, the primary language was getting updated after every push, even if it didn't change (which wasn't intended), so it triggered an update to updated_at.\n\nThe difference is that pushed_at represents the date and time of the last commit, whereas the updated_at represents the date and time of the last change the the repository. A change to the repository might be a commit, but it may also be other things, such as changing the description of the repo, creating wiki pages, etc. In other words, commits are a subset of updates, and the pushed_at timestamp will therefore either be the same as the updated_at timestamp, or it will be an earlier timestamp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fork from a branch in github\n\nIs there a way to fork from a specific branch on GitHub? \u2026 For example, moodle has many branches (1.9, 2.0 \u2026 and so on). Can a clone be performed of just branch 1.9 and not the  master branch always? Is it possible to clone a specific branch onto my PC?"}, {"role": "assistant", "content": "I don\u2019t know a native way yet, but you can do it following this recipe:\n\nFork the repository in question (called \u2018upstream\u2019) on the GitHub website to your workspace there.\nRun the GitHub desktop application and clone the repository onto your PC.\nUse the GitHub desktop application to open a shell in the repository. (The git commands are not available from the default PowerShell unless you configure that manually.)\nSet the source repository as upstream:\ngit remote add upstream https://github.com/{user}/{source-repo}.git\n\nFetch the full upstream repository. (Right now, you only have a copy of its master branch.)\ngit fetch upstream\n\nMake your file system copy the branch you want and give it any name:\ngit checkout upstream/{branch-in-question}\ngit checkout -b temporary\n\nPublish your repo using the GitHub desktop application.\nOn the GitHub website, open your repository and click \u2018settings\u2019.\nChange the \u201cDefault branch\u201d to \u2018temporary\u2019. (Just change the drop-down menu, you don\u2019t need to click the \u201cRename\u201d button.)\nGo back to your repository, go to the \u2018branches\u2019 tab, now you can delete the \u201cmaster\u201d branch.\nDelete the master branch on your shell and make a new master branch:\ngit branch -d master\ngit branch master\ngit checkout master\ngit -d temporary\n\nOnce more, publish your repo using the GitHub desktop application.\nOn the GitHub website, open your repository and click \u2018settings\u2019.\nChange the \u201cDefault branch\u201d back to the (new) \u2018master\u2019 branch.\nGo back to your repository, go to the \u2018branches\u2019 tab, now you can delete the \u201ctemporary\u201d branch.\n\nThis should be what you were looking for. Perhaps GitHub will provide a more convenient way to do this in future (e.g., clicking \u201cFork\u201d from a project\u2019s branch results in exactly this behaviour)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Disable push to specific branches on GitHub\n\nI have some Git private repositories on a GitHub company account, and I don't want anybody to push on some specific branches (like master, develop and beta or by pattern). I also tried to define some hooks but I want this to be done on GitHub and not done with a pre-push hook on the clients.\nSo to explain my problem simply, I want:\ngit push origin develop\n\nto be refused by the server (which is GitHub) because of the branch name, but I do not want a client check by pre-push hook, I really want GitHub to do the check and refuse it.\nAlso if it's possible to allow only certain users to do so, but disabling it for everybody would be enough at first."}, {"role": "assistant", "content": "Ok I got the answer from IRC after a long chat. I'll have to work with forks and pull requests, or add pre-push hooks on each dev's machine since GitHub doesn't allow per branch permissions neither pre-publish canceling hooks. Here is a part of the answers I got:\n\nFork the repository. then the developer can work on their own version of the repository, and doesn't have to worry about committing to the wrong branch. And then someone upstream can always merge into whatever branch should be committed into.\n\nYeah but we're a company and we don't want that all our devs have forks\n\nWhy not?\n\nWell they should be able to push their branch on a common repo to work with some other devs on the same feature for example.\n\nHave a read through https://help.github.com/articles/using-pull-requests. You can still send patches around between multiple forks. This is the model that git was built on\n\nI know but I want to be able to see quickly in a central way the actual work on any feature/hotfix, ...\n\nTo cut a long story short: GitHub doesn't support per-branch permissions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gerrit with Github\n\nI am using github and I am willing to start using Gerrit with it.\nSince Gerrit uses JGit, I am scared of the following text from this link:\n\nEGit/JGit is a reimplementation of git\n  in java, due to this GitHub does not\n  officially support it. Issues have\n  happened and repositories have been\n  corrupted by them. While it is usually\n  a simple matter to repair these repos\n  due to git\u2019s distributed nature, be\n  aware that EGit may not work as well\n  as the official git binaries.\n\nDid someone already use it?"}, {"role": "assistant", "content": "Gerrit is it's own server and the issues we've seen were with the client and have recently been fixed in the brand new version of JGit. It also didn't corrupt the repository, it just pushed packfiles that were missing objects.  The Gerrit server is solid and has been used by the Android project for over a year. \nHowever, since it is its own server and enforces a very specific workflow, it is generally not used in conjunction with public GitHub much, since code contributions on GitHub tend to be pull requests, where contributions on Gerrit are peer-verified patch series through the Gerrit system.  Again, you can set them both up for the same project, but most people do not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"git pull --rebase\" leads to \"Cannot rebase onto multiple branches\"\n\nSo, my work environment has precisely one branch with a remote companion on Github.  I'm trying to do git pull --rebase in order to prevent git push from creating merge commit messages that don't provide new information to others working on this project and just gum up the works.  But when I try that, it gives me this:\nFrom https://github.com/our_profile/our_repository\n * branch            HEAD        -> FETCH_HEAD\nCannot rebase onto multiple branches\n\nAnd the pull aborts. Calling git branch informs me that I have only one branch on my local machine, so what's going on?"}, {"role": "assistant", "content": "Try specifying exactly what remote branch you want to pull:\ngit pull --rebase origin branch\n\nAlternatively you can also git fetch all changes from the remote repository first, and then rebase manually:\ngit rebase origin/branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "LaTeX math in github wikis\n\nIs it possible to include LaTeX-style math in any way with github repo wikis? Googling implies github no longer allows things like MathJax, but most references are years old. What (if any) alternatives are there to including LaTeX-formatted math in github wikis?"}, {"role": "assistant", "content": "You can use chart.apis.google.com to render LaTeX formulas as PNG.\nIt work nicely with Githhub's markdown:\nExample (Markdown):\nThe ratio of the momentum to the velocity is\nthe relativistic mass, m.\n\n![f1]\n\nAnd the relativistic mass and the relativistic\nkinetic energy are related by the formula:\n\n![f2]\n\nEinstein wanted to omit the unnatural second term\non the right-hand side, whose only purpose is\nto make the energy at rest zero, and to declare\nthat the particle has a total energy, which obeys:\n![f3] which is a sum of the rest energy ![f4]\nand the kinetic energy.\n\n[f1]: http://chart.apis.google.com/chart?cht=tx&chl=m=\\frac{m_0}{\\sqrt{1-{\\frac{v^2}{c^2}}}}\n[f2]: http://chart.apis.google.com/chart?cht=tx&chl=E_k=mc^2-m_0c^2\n[f3]: http://chart.apis.google.com/chart?cht=tx&chl=E=mc^2\n[f4]: http://chart.apis.google.com/chart?cht=tx&chl=m_0c^2\n\nhttps\nSome installations of Github Enterprise reject http and work only if you use https\nRendered:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: split pull request into smaller PR's based upon the new directories in the pull request\n\nI have a monolith of a feature branch. Instead of one massive PR into master I would like to split it up into 3 prs. \nIdeally I want to pull out some standalone code from the feature branch into a PR by itself. This code is in a new directory and isn't called into yet so it would be a relatively safe PR. However instead of just copying the directory and creating a single commit and PR I would like to retain all the commit history of the changes for the new PR.\nIs this possible using Git?  I've looked into filter-branch but it seems like that is for splitting a repo into two, not for splitting a diff of changes into two (if that makes sense)."}, {"role": "assistant", "content": "is there a way to pull files out of a branch including their commit history into a new branch?\n\nYou pull a commit, meaning a whole repo into a branch, not just some files.\nOne good option would then be to reset the files you don't want to their content pre-branch\n--x--x--x (master)\n         \\\n          y--y--y (branch B1 with mixed work)\n                 \\\n                  z (new branch B2, but with some files reset to master)\n\nB2 starts from B1 and include the files you want, with their history.\nBut B2 also includes other files from B1 that you would like to be as master.\nYou can do (in B2) a git reset --soft master: a git status would tell you all the changes you need to do in order for your index to reflect master. Simply don't add changes that involves the files you want to keep by using git restore -- path/to/file (restore instead of checkout, since Git 2.23, Aug. 2019).\nAnd don't commit. You just want to stage changes back to master for some files.\n(See also \"Practical uses of git reset --soft?\")\nOnce that is done, a git reset --soft B2 moves HEAD back to B2 (but with an index recording all the changes and deletions necessary to reflect master for the right files).\nYou can commit now, with the other files reverted to master and the files you want untouched, identical to B1, with their history intact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "After using git to locally track a project, how can I add it to GitHub?\n\nAfter using git to locally track a project, how can I add it to GitHub?"}, {"role": "assistant", "content": "GitHub gives you instructions after you've created the repository online. \ncd to the directory with the local repository\ngit remote add origin whatever-address-my-repository is.git to set the remote\nthen make a commit, and push to the master branch.\ngit push -u origin master\nhttps://help.github.com/articles/create-a-repo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use ssh authentication with github API?\n\nIs there some way to use ssh-based authentication when accessing the GitHub API through the command line (via, e.g., curl, etc.?).\nFWIW, I tried many variations of the following (varying the way I specified my public ssh key file) but in every case I was still prompted for my password:\n% curl --pubkey ~/.ssh/id_rsa.pub --user yrstruly https://api.github.com/user/repos"}, {"role": "assistant", "content": "If you are using ssh, then you would never logon as 'yrstruly'. You would always connect as 'git'.\nYour public key would be enough for GitHub to recognize you as 'yrstruly'.\nAnd since you are using an https address, and not an ssh one, that --pubkey option is likely to be ignored.\nA valid ssh address would be: ssh://[email\u00a0protected], and I don't think Github proposes that kind of access for its api.\nThe curl --user option would be necessary for https address only, as in \"Having trouble downloading Git archive tarballs from Private Repo\":\ncurl -sL --user \"${username}:${password}\" https://github.com..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Marking a repo as a fork in github, after the fact\n\nWe have a project that was forked a while back mostly via a copy/paste method. But there is still significant overlap between the repos.\nIs it possible to retroactively mark this fork as a fork to github, so that functions like compare and pull requests will do the right thing?\nNote: I have tried the \"hack\" below, of forking anew, cloning the fork, copying the \"forked\" content over, then git add/commit/push. However, the file histories in the original \"fork\" are lost, and branches don't come over."}, {"role": "assistant", "content": "As you don't want to \"squash\" your commits into a single file what you could do is:\n\nFork the \"original\" repository\nCreate a pull request from your \"copy and paste\" repo to the fork\n\nOr you could take a look at how to merge two repositories like in this post. Like they did there you could add your \"c&p repo\" to the fork as a subtree, like it is explained in detail over here.\nThis are the steps taken in the guide:\ngit remote add -f c&prepo /path/to/c&prepo\ngit merge -s ours --no-commit c&prepo/master\ngit read-tree --prefix=vendor/c&prepo/ -u c&prepo/master\ngit commit\n\nHowever even with those methods you aren't able to merge the whole repositories but only specific branches. What you could do is i.e. create a pull request (described in my first method) for each branch, which could take up some time depending on your branching model. \nI don't think there actually is a solution where you can merge two different repositories while keeping their commit history and branches at the same time. Best of luck to you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix the error `found no layout file for \"HTML\" for \"page\"` in Hugo CMS?\n\nI recently imported content from my WordPress page into Hugo. When I run hugo serve I get following error messages:\nWARN 2020/02/17 20:51:06 found no layout file for \"HTML\" for \"page\": You should create a template file which matches Hugo Layouts Lookup Rules for this combination.\n\nThe page in question starts like this:\n---\nlinktitle: \"The Title of the Post\"\ntitle: \"The Title of the Post\"\nauthor: \"Franz Drollig\"\ntype: post\ndate: 2020-01-09T14:41:55+00:00\nurl: /the-title-of-post/\ncategories:\n  - Uncategorized\nweight: 10\n\n---\n\n\nThis is the content of the post. This is the second sentence of the post. \n\nIt is located in mysite/content/posts/YYYY-MM-DD-title.md.\nThe layouts directory is empty. However, the themes directory contains the book theme. This theme is also configured in the config.toml.\nAnother post, starting like shown below, is rendered correctly.\n---\nauthor: \"Michael Henderson\"\ndate: 2014-09-28\nlinktitle: Creating a New Theme\nmenu:\n  main:\n    parent: tutorials\nnext: /tutorials/github-pages-blog\nprev: /tutorials/automated-deployments\ntitle: Creating a New Theme\nweight: 10\n---\n\n\n## Introduction\n\nWhy is my post not rendered properly? How can I fix it?"}, {"role": "assistant", "content": "Okay so here is what is likely happening:\nYou have a theme you added as a git submodule and you recently re-cloned your project. Guess what? Your submodule needs to be re-downloaded as well.\nYou can do this with:\ngit submodule init\ngit submodule update\n\nThen your project will load without errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Workflow is not shown so I cannot run it manually (Github Actions)\n\nI created the workflow Test but there is no Run workflow button to run it manually.\n\nThis is my test.yml file. Is there anything missing?\nname: Test\n\non:\n  release:\n    types: [created]\n  \njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Run a one-line script\n        run: echo Hello, world!"}, {"role": "assistant", "content": "Some workflows, such as those, based on workflow_dispatch event, the workflow will not even show until the code is on the main (or default branch).\nThe good news is, once you do merge your feature to main, you may keep on working on the feature branch. From then on, you will have the option to choose which branch you want to run the workflow on , like in the picture."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix .vscode tracking in gitignore\n\nI'm having trouble using .gitignore with my .vscode folder in my repository.\nI added a rule in my .gitignore to ignore my entire .vscode/ folder:\n# Visual Studio Code # \n.vscode/* \n.vscode/settings.json\n!.vscode/settings.json \n!.vscode/tasks.json \n!.vscode/launch.json \n!.vscode/extensions.json \n.history.vscode/settings.json\n\nDespite this, .vscode is still being tracked by my local git repository. I've tried a variety of different solutions including using git filter-branch to remove this folder from my git history and git rm --cached .vscode to clear my cache and re-commit my changes, but none of these solutions prevents the .vscode folder from being tracked by git.\nWhen I run git status I keep getting this result:\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .vscode/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nSo far, I've worked around this by manually excluding this folder when I git add my changes.\nWhy is .vscode/ still being shown as untracked? If I were to git add . and git commit this, it would add this folder to my git history and eventually to my remote repository when I git push. I don't want this behavior to occur."}, {"role": "assistant", "content": "Had similar problem, turned out the files were added to my cache. Clearing it with below command worked.\ngit rm --cached .vscode/settings.json\n\nReference to the issue on github where I found the solution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Support for password authentication was removed on August 13, 2021 [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMessage \"Support for password authentication was removed.\"\n\n                                (51 answers)\n                            \n\nClosed 10 months ago.\n\n\n\nOver a long period of time I am using tortoise git, today I am not able to use the tortoise git and getting the below error.\n\ngit.exe pull --progress -v --no-rebase \"origin\" remote: Support for\npassword authentication was removed on August 13, 2021. Please use a\npersonal access token instead. remote: Please see\nhttps://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\nfor more information.\n\nI am using the latest tortoise git version.\n\nI understand about the git latest change. But I want to use tortoise git. Someone, please help me out this issue."}, {"role": "assistant", "content": "Github Has Revoked the support for password authentication on 13 Aug 2021 and giving the below mentioned response:\nSupport for password authentication was removed on August 13, 2021\n\nIn order to fix the issue follow the below steps:\n\nGoto settings of Github account\nFind and Select Developer Settings\nFind and Select Personal access tokens\nGenerate a new token\nFill in any note and select the access scopes\nonce done click on generate token\n\nUse the generated token in place of a password to communicate with GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to duplicate a git repository on gitlab/github without forking?\n\nI've an existing repository on Gitlab / Github. I want a duplicate of that under the same group with a different repo name.\nNote: Thought the answers might be similar to another question, I was not able to find the said another question by googling, I'm guessing other users might be unable to do so either."}, {"role": "assistant", "content": "In gitlab there is functionality out of the box:\n\nGo to Settings -> General of existing project\nLast expanded panel Advanced contains Export button. Click it and then on the top of this page you can see info message Project export started. A download link will be sent by email.\nCheck email. There is following message:\n\n\nProject NAME_OF_YOUR_EXISTING_PROJECT was exported successfully.\nThe project export can be downloaded from: SOME_LINK\nThe download link will expire in 24 hours.\n\n\nClick SOME_LINK and then check the Downloads folder\nIn the UI, click the + button at the top of the left sidebar and select `New project/repository\nClick the Import project box\nClick the button Gitlab export\nClick Choose file and select previously downloaded file *.tar.gz\nClick the button Import project\nThen you will see Import in progress label.\nDEAL"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git checkout error: cannot create directory: Permission denied\n\nI am facing issues with the git checkout command. Please help.\nHere is what I did.\n\nCreated a local directory. Created some files. Initiated a git repo locally.\nCreated a repo in bitbucket & pushed my local repo to bitbucket\nCreated a new branch locally, b01\nAdded new files to b01, committed them and successfully pushed the branch to bitbucket\nNow I am trying to merge b01 with master and that is where I am facing issues. I am not able to checkout master.\n\nLists of commands used and the error details:\ngit clone [my repo]\ngit checkout -b b01\n\nHereafter I made multiple changes, including creating new files and directories, committed those changes and successfully pushed the changes on that branch to the repo. like:\ngit push -u origin b01\n\nNow I am done with the changes and want to merge it to the master branch. So I do a:\ngit checkout master\n\nHere is the error it throws:\nfatal: cannot create directory at 'workfolder': Permission denied\n\nGit keeps me in b01, but deletes ALL the files I had created in the branch. \nSo if I now do a \ngit status\n\nit shows me: \nOn branch b01\nYour branch is upto date with 'orgin/b01'\nChanges not staged for commit:\n(use \"git add/rm .....)\n  deleted: new file1\n  deleted: new file2\n<list of the new files I had added but which got deleted as a result of the command>\n\nI am having to run a \ngit checkout -- . \n\nto restore the files.\nPlease help."}, {"role": "assistant", "content": "I had a similar situation. Though it was due to me having the solution open in visual studio. Closing visual studio and doing a git reset put me into a good spot.\nI.e. check to see if any processes are locking the folder/files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "updating local master with remote master\n\nI have a branch that I want to merge to the remote, most up-to-date master. I have a local, outdated master on my computer. \nI ran git pull upstream master, and it retrieved the remote master, and that was great, exactly what I wanted. Then, without thinking, i accidentally discarded the changes while switching to another branch. \nWhile on my local master, I have run git pull, and git pull upstream master many times now, and it always says \"Already up to date.\" when it clearly isn't. At first git pull upstream master worked just fine, but now it doesn't, and the machine thinks it is up to date when it isn't. How can I make my local master the same as the remote one again?"}, {"role": "assistant", "content": "Well, typically when I have an outdated master locally and want to merge recent changes in a branch (say, my_branch) to master (both locally and remotely), I do the following,\n\nCheckout the master branch locally.\nRun git pull --rebase origin master (This pulls down the most up-to-date changes on master locally)\nCheckout local branch say my_branch\nRun git pull --rebase origin master(This updates your local branch against the most recent master on remote. You may need to resolve the conflicts here (if any that is))\ncheckout the master branch locally, again.\nRun git merge my_branch\nRun git push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'Clone URL is incorrect' when importing from GitHub to Azure DevOps\n\nI am trying to import a GitHub repository to Azure DevOps and I keep getting this error:\nImport request cannot be processed due to one of the following reasons:\n\nClone URL is incorrect.\nClone URL requires authorization.\n\nHere is a screenshot of my input parameters:\n\nI have double and triple checked the cloning url and the authentication parameters. No matter what I put into the fields it always displays these two errors. \nHow can I trouble shoot this?"}, {"role": "assistant", "content": "Got the very same problem when trying to make a fresh new import of a private GitHub repo managed by an Organization to my new Azure DevOps account (even though my account is the owner of both GitHub and Azure DevOps profiles I was trying to link).\nThree steps actually helped me to resolve it:\n\nLink two accounts via Azure DevOps > your project > Project Settings > GitHub connections. If your GitHub repo is stored in an Organization profile, here you have to make sure that you grant access to this Organization while you're setting up the connection in Azure DevOps (there will be a small Grant button next to the identified Organization profile in Azure DevOps, you have to press it to actually grant the access). In my case I missed it and the connection did not work (Azure DevOps couldn't find any repos in the GitHub profile). To resolve this, I had to follow the link from an automatic e-mail sent to me by GitHub and grant access to Azure DevOps there. Then in Github > your organization > Organization Settings > Third-party access you will be able to see Azure DevOps in the list - if the status is Approved, you're good to go.\n\nThen I had to create a PAT for my personal profile in GitHub (NOT the Organization profile) and use it instead of the password when I was importing the repo in Azure DevOps (big thanks to @Yang Shen who pointed this out above). This way you first have to go to Github > your profile > Profile Settings > Developer Settings > Personal access tokens and generate a new token there.\n\nThen I returned to Azure DevOps > your project > Repos > Files > Import, putting in:\na) Link to my private Github repo;\nb) Tick \"Authentication required\";\nc) My GitHub username;\nd) My PAT generated at Step 2 above instead of my actual password\n\n\nThen it worked like a charm, my private Github repo was cloned to Azure Repos."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I sign out in the Git Bash console in Windows?\n\nI'm using Git, on Windows, version 2.9.2.windows.1.\nI work on a repository project and when I do a push, it asked me to enter my GitHub username and password. I entered both my GitHub username and password to update the project.\nIn my next push, it doesn't ask for my username and password any more. All my modifications for the project are updated.\nIt looks like my username and password are \"saved\". How do I \"unsave\" them?\nHow do I sign out?\nI tried\ngit config --global --unset user.name\ngit config --global --unset user.email\ngit config --global --unset credential.helper\n\nBut they do not make me sign out.\nI want to clear my sign in so the next time I make a push, it asks me again to enter my username and password."}, {"role": "assistant", "content": "For Windows 10, if your PC has a different login (a MSFT account) and GitHub is on another login, if you go to control panel \u2192 user accounts and search for credential manager, you will see \"Web Credentials\" and \"Windows credentials\".\nGitHub seems to be taking the default ID that is registered in the PC (Microsoft account). Under Windows Credentials, remove the GitHub login details and try Push again. You will be prompted for a GitHub ID and password explicitly. Once we login that gets stored as a personal access token for Git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pushing to a different git repo\n\nI have a repo called react. \nI cloned it into a different repo locally called different-repo.\nHow can I then get different-repo to push remotely to different-repo because currently it is pushing to react.\nEffectively I want to clone many times from react into different named repos but then when i push from those repos they push to their own repo."}, {"role": "assistant", "content": "You have to add an other remote. Usually, you have an origin remotes, which points to the github (maybe bitbucket) repository you cloned it from. Here's a few example of what it is:\n\nhttps://github.com/some-user/some-repo (the .git is optional)\n[email\u00a0protected]:some-user/some-repo (this is ssh, it allows you to push/pull without having to type your ids every single time)\nC:/some/folder/on/your/computer Yes! You can push to an other directory on your own computer.\n\nSo, when you\n$ git push origin master\n\norigin is replaced with it's value: the url\nSo, it's basically just a shortcut. You could type the url yourself each time, it'd do the same!\nNote: you can list all your remotes by doing git remote -v.\nFor your problem\n\nHow can I then get different-repo to push remotely to different-repo because currently it is pushing to react.\n\nI'm guessing you want to create a second repository, right? Well, you can create an other remote (or replace the current origin) with the url to this repo!\nAdd an other remote \u2014 recommended\ngit remote add <remote-name> <url>\n\nSo, for example:\n$ git remote add different-repo https://github.com/your-username/your-repo\n\nAnd then, just\n$ git push different-repo master\n\nChange the origin remote\ngit remote set-url <remote-name> <url>\n\nSo\ngit remote set-url origin https://github.com/your-username/your-repo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull/push error: RPC failed; result=22, HTTP code = 408\n\nI am new to GIT. I am using Git version 1.7.9.5.\nI am working on project hosted on github. While pushing and pulling the code from github sometime it works fine and some time it gives me error.\n\nerror: RPC failed; result=22, HTTP code = 408\nfatal: The remote end hung up unexpectedly\n\nI don't what is going wrong. If anyone can suggest me something what could possibly be the issue."}, {"role": "assistant", "content": "The problem is due to git/https buffer settings. In order to solve it run this below command:-\ngit config http.postBuffer 524288000\n\nAnd try git push again"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to specify a default option for merging a pull request in GitHub?\n\nI'm working on a project where \"squash and merge\" is the preferred approach for merging pull requests.  Is there a way to make this the default option in GitHub, either for my own user, or for the project?\nAs it stands, it's entirely too easy to select the default option (Create a merge commit).  This is made especially problematic by the fact that it is not easily undo-able, given that you generally should not be modifying repository history.\nNote that this is different than How to make --squash default on a merge?, as that one refers to the command line usage of Git, whereas my question concerns functionality within the GitHub user interface."}, {"role": "assistant", "content": "The GitHub user interface will default the option to the last option selected by the user for the current project.  This solves the issue of not accidentally using the wrong default, since after the merge is done correctly for the first PR, subsequent merges will have the desired default.\nThis solution isn't perfect.  If a user makes an intentional one-off merge of a different type, they will need to remember to set it back for their next merge, as the default will have changed to what was intended to be a one-off deviation from the norm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github oauth multiple authorization callback URL\n\nI want to work in my localhost and my live domain, there is any way to insert more then one callback to github oauth settings? How we solve this problem?\nRedirect URLs"}, {"role": "assistant", "content": "I solved this issue by creating a dedicated OAuth application on Github for my local development environment. So I have the following 2 OAuth applications:\n\nMy official OAuth application for production\n\nClient ID: ABC\nClient Secret: 123\nAuthorization callback URL: https://example.com/api/v1/security/oauth/github/callback\n\nMy private OAuth application for development\n\nClient ID: XYZ\nClient Secret: 456\nAuthorization callback URL: https://localhost/api/v1/security/oauth/github/callback\n\n\nWhen I configure my API in local, I use the ID and secret of the development application (2). And in production I use the ID and secret of my official application (1)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use GitHub V3 API to get commit count for a repo?\n\nI am trying to count commits for many large github repos using the API, so I would like to avoid getting the entire list of commits (this way as an example: api.github.com/repos/jasonrudolph/keyboard/commits ) and counting them.\nIf I had the hash of the first (initial) commit , I could use this technique to compare the first commit to the latest and it happily reports the total_commits in between (so I'd need to add one) that way. Unfortunately, I cannot see how to elegantly get the first commit using the API.\nThe base repo URL does give me the created_at (this url is an example: api.github.com/repos/jasonrudolph/keyboard ), so I could get a reduced commit set by limiting the commits to be until the create date (this url is an example: api.github.com/repos/jasonrudolph/keyboard/commits?until=2013-03-30T16:01:43Z) and using the earliest one (always listed last?) or maybe the one with an empty parent (not sure about if forked projects have initial parent commits).\nAny better way to get the first commit hash for a repo?\nBetter yet, this whole thing seems convoluted for a simple statistic, and I wonder if I'm missing something. Any better ideas for using the API to get the repo commit count?\nEdit: This somewhat similar question is trying to filter by certain files (\" and within them to specific files.\"), so has a different answer."}, {"role": "assistant", "content": "Make a request on https://api.github.com/repos/{username}/{repo}/commits?sha={branch}&per_page=1&page=1\nNow just take the Link parameter of the response header and grab out the page count situated just before rel=\"last\"\nThis page count is equal to the total number of commits in that branch!\nThe trick was to use &per_page=1&page=1. It distributed 1 commit in 1 page. So, the total number of commits will be equal to the total number of pages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Android Studio not committing to GitHub\n\nI am trying to use git in Android Studio. If I choose commit changes, it says that it has successfully committed the changed files but those changes do not appear on the GitHub. Instead, if I delete the repository from GitHub and choose Share Project on GitHub, it successfully creates a new repository and uploads the files into it. This means that the connection is fine. Also, I have checked the gitignore file, the java files are not in that list. What could be the problem?"}, {"role": "assistant", "content": "You have to select \"commit and push\".\nIf you want to upload (push) the changes that you made, go to:\nVCS -> Git -> PUSH\n\nOnly after \"pushing\", your changes will be uploaded to GitHub.\nIf you select \"commit\", your changes would remain local."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it okay to use GitHub Secrets with a public repo?\n\nI have a private repo with a GitHub Action that pushes the code to an AWS S3 bucket when there's a new push to the master branch. I need a pair of access keys to be able to push the contents and I'm storing them as GitHub Secrets and referencing them as environment variables in the build script. Now I would like to make this repo public in the near future, and I was wondering if it's a safe thing to do. The workflow (.github/workflows/main.yml) itself for the action is indeed publicly visible and what it does, but it only has the single command aws s3 cp myfile s3://my-bucket and absolutely no access keys in the code itself. \nIs it safe to use GitHub Secrets for the Actions in a public repo? I am the sole owner and only contributor, this will not change in the future. I might switch to CodePipeline with a webhook later but wanted to try GitHub Actions first. Thanks."}, {"role": "assistant", "content": "Yes, secrets are safe to use in public repositories but there are some things you should be careful about.\n\nAll secrets are automatically masked in build logs and show as ***. However, if during your workflow you create a sensitive credential from a secret (e.g. base64 an API key) then you should mask the new value so it doesn't leak in the build log.\necho \"::add-mask::My sensitive value\"\n\n\nIf you are very concerned about the security of your secrets, I would also suggest not using third party GitHub actions directly by following the action's tags or branches. Fork the action and use your fork in workflows. This will prevent the possibility of someone modifying an action you are using to capture secrets being used by the action, and send them to some external server under their control.\nAlternatively, use the action directly and reference the commit hash for the version you want to target.\n- uses: thirdparty/foo-action@172ec762f2ac8e050062398456fccd30444f8f30\n\n\nUse two-factor authentication (2FA) on your account. If your account is compromised, it's trivial for an attacker to create a workflow and export your secrets.\n\nRepository collaborators or any organization users with write access are able to create a workflow to export secrets. So manage access to your repository carefully.\n\n\nPoints related to pull requests:\n\nPublic repository pull_request events triggered by forks do not have access to secrets, except for the default GITHUB_TOKEN. Additionally, The GITHUB_TOKEN has read-only access when an event is triggered by a forked repository. These are intentional restrictions enforced by GitHub Actions to prevent an attacker creating a pull request containing a workflow that captures secrets, or uses secrets to perform operations.\nThe pull_request_target event does not have secret restrictions for events triggered by forks. By default it checks out the last commit on the base branch, but it is possible to checkout the pull request HEAD. Choosing to do this requires extreme caution. Passing secrets to any code that could be modified in a pull request could allow an attacker to write code to export secrets."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to import your own github forked library into android studio\n\nI found a nice open library on GitHub, I imported it into my Android Studio project using Gradle dependencies, but then I realized I need to make little modifications on it.\nSo I forked the library on my GitHub, done the modifications and asked for a pull request, but I can't wait until they approve and merge my modifications with the original code.\nIs there a way to use dependencies to import my forked library (in my Github) into my Android Studio project, rather than the original library?"}, {"role": "assistant", "content": "There is actually a really easy way to do this nowadays: jitpack.io\nAll you need to do is.\n\nadd in your root build.gradle at the end of allprojects repositories:\nallprojects {\nrepositories {\n...\nmaven { url 'https://jitpack.io' }\n}\n}\n\nAdd the dependency in your app build.gradle:\ndependencies {\nimplementation 'com.github.User:Repo:Tag'\n}\n\n\nIf you don't have any releases/tags, you can also just do com.github.User:Repo:branchname-SNAPSHOT to build from the latest commit on that branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github : I am missing \"Settings\" menu on the landing page of my repo\n\nThe \"Settings\" menu is supposed to be the last menu, just after the \"Graphs\" menu.\nNot having the \"Settings\" menu interferes with my ability to set Webhooks.\nAnd yes, this is my repo - I own it.\n landing page of my test-repo-travis repo"}, {"role": "assistant", "content": "I was having the same issue today. Eventually, I figured that I do not have enough permissions to access the repo settings because in my case the repo belongs to an 'organization' and even though I have read/write access to it, I am not the admin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I add issues to github from the command line?\n\nI'm new to git and I'd like to be able to map plans and progress for my project through github.\nThe problem is, that requires lots of clicking around with a browser on github.com, and I'd like to be able to automate the task somewhat by using a command line program.\nIs there a command line interface for github?"}, {"role": "assistant", "content": "There's a ghi gem that you can use to manage issues.\n\nThe most commonly used ghi commands are:\n   list        List your issues (or a repository's)\n   show        Show an issue's details\n   open        Open (or reopen) an issue\n   close       Close an issue\n   edit        Modify an existing issue\n   comment     Leave a comment on an issue\n   label       Create, list, modify, or delete labels\n   assign      Assign an issue to yourself (or someone else)\n   milestone   Manage project milestones"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to git pull from public repo via ssh without a key?\n\nI have a public repo, https://github.com/rlpowell/config .  I used to be able to run git pull without any ssh keys (i.e. from cron), and it work work fine, using the [email\u00a0protected]:rlpowell/config.git URL (i.e. the SSH URL).  This no longer works, and I've no idea why, but it does work for two of my friends.\nI would like to be able to git pull a public repo without an ssh key, or at least understand why it doesn't work for me and does for other people.\nHere's a friend trying my test case:\n$ git clone [email\u00a0protected]:rlpowell/config.git  ; cd config ; (unset SSH_AUTH_SOCK ; ssh-add -l ; git pull )\nCloning into 'config'...\nWarning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts.\nremote: Counting objects: 1061, done.\nremote: Total 1061 (delta 0), reused 0 (delta 0), pack-reused 1061\nReceiving objects: 100% (1061/1061), 544.42 KiB | 495.00 KiB/s, done.\nResolving deltas: 100% (632/632), done.\nChecking connectivity... done.\nCould not open a connection to your authentication agent.\nAlready up-to-date.\n\nAnd here's me doing exactly the same thing:\n$ git clone [email\u00a0protected]:rlpowell/config.git  ; cd config ; (unset SSH_AUTH_SOCK ; ssh-add -l ; git pull )\nCloning into 'config'...\nremote: Counting objects: 1061, done.\nremote: Total 1061 (delta 0), reused 0 (delta 0), pack-reused 1061\nReceiving objects: 100% (1061/1061), 544.42 KiB | 0 bytes/s, done.\nResolving deltas: 100% (632/632), done.\nChecking connectivity... done.\nCould not open a connection to your authentication agent.\nEnter passphrase for key '/home/rlpowell/.ssh/id_rsa':\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\n(I hit enter at the ssh key password prompt).\nIn the repo, the .git/config is:\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = [email\u00a0protected]:rlpowell/config.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n\nAnd git config -l is:\n$ git config -l\n[email\u00a0protected]\nuser.name=Robin Lee Powell\npush.default=matching\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\n[email\u00a0protected]:rlpowell/config.git\nremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\nbranch.master.remote=origin\nbranch.master.merge=refs/heads/master\n\ngit version is 2.5.5\nstrace says the thing actually running ssh is\nssh [email\u00a0protected] git-upload-pack 'rlpowell/config.git'"}, {"role": "assistant", "content": "I just tried it without key, and I confirm it cannot work (without SSH key):\n$ git clone [email\u00a0protected]:rlpowell/config.git\nCloning into 'config'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nThat is because GitHub won't authorize anonymous access through SSH (as opposed to https), as other git repo servers decided to do (like Gogits or go-gitea)\nGitHub does mention:\n\nSSH URLs provide access to a Git repository via SSH, a secure protocol.\n  To use these URLs, you must generate an SSH keypair on your computer and add the public key to your GitHub account.\n\n(emphasis on must)\nWhy? (asked in 2015). While sshd can be configured to allow anonymous access, no public site would ever consider setting this up: it is too big of a security risk.\n\nneeds to work without a specific key\n\nIf you need anonymous access, you can use:\n\nan https URL\na git URL: git://github.com/<user>/<repo>, although it uses the port 9418, which is often blocked in an enterprise environment."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Upload local repository to github.com\n\nI have a git repository which exists fully locally inside my PC. I want to create remote clone of it onto the github.com. How can it be done?"}, {"role": "assistant", "content": "It looks like a very basic question, still follow the below steps\nStep 1: You need to create a github repository first\nStep 2: Then copy the URL of the github repo\nStep 4: Then add remote for the github repo (git remote add origin \"copied repo URL\")\nStep 3: Then clone the repo (Readme files will cloned) (git clone \"copied repo URL\")\nStep 5: Then add file (git add * or git add . or git add file name)\nStep 6: git commit -m \"your message\"\nStep 7: Then push it (git push origin \"branch name\")\n\nLogin to github and check your Repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix this in git \"This branch is out-of-date with the base branch\"?\n\nI am working on a project and I made a PR to the project in github and now my PR says that\n\n\"This branch is out-of-date with the base branch , Merge the latest changes from master into this branch\"\n\nSo which git command should I use in order to make my branch parallel to the master branch?"}, {"role": "assistant", "content": "If you created the Pull Request from a branch in the same project repository, then:\n\nmake sure you've checked out your branch (the one from the PR): git checkout your-branch\nwith your branch checked out, you should do a git pull origin master\nthen git push origin your-branch to update the PR.\n\nIf you forked a repo, created a branch and submit the PR, follow these steps:\n\ncreate a remote with the original project repo: git remote add upstream 'url.git.here'\nmake sure you've checked out your branch: git checkout your-branch\nget the latest changes from the upstream to your-branch: git pull upstream master\nafter that, push the changes you've got from upstream: git push origin your-branch\nfinally, you can go to GitHub page to make sure no more out-of-date is blocking your PR.\n\nAfter that, you should see that your PR is all good to be merge (after reviews is set)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Yarn can't find private Github npm registry\n\nI signed up for the Github private npm registry beta and followed their instruction: https://github.com/features/package-registry\nWorks great with npm but I'd prefer using yarn. And while npm has no issues finding the registered package, yarn can't find it at all.\nyarn add @omniphx/adminite-adminite-ui-components outputs:\nyarn add v1.19.0\ninfo No lockfile found.\nwarning package-lock.json found. Your project contains lock files generated by tools other than Yarn. It is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files. To clear this warning, remove package-lock.json.\n[1/4] \ud83d\udd0d  Resolving packages...\nerror Couldn't find package \"@omniphx/adminite-ui-components\" on the \"npm\" registry.\ninfo Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.\n\nAfter reading up on private repos with yarn, I thought the trick was due to yarn having a slightly different rc format. Unfortunately, that didn't work either and yarn is still unable to find the private registry.\n.npmrc\nregistry=https://registry.npmjs.org\n@omniphx:registry=https://npm.pkg.github.com/omniphx\n\n.yarnrc\nregistry \"https://registry.npmjs.org\"\n\"@omniphx:registry\" \"https://npm.pkg.github.com/omniphx\"\n\nAlso confirmed that my github token is set too with yarn config list:\nyarn config v1.19.0\ninfo yarn config\n{\n  'version-tag-prefix': 'v',\n  'version-git-tag': true,\n  'version-commit-hooks': true,\n  'version-git-sign': false,\n  'version-git-message': 'v%s',\n  'init-version': '1.0.0',\n  'init-license': 'MIT',\n  'save-prefix': '^',\n  'bin-links': true,\n  'ignore-scripts': false,\n  'ignore-optional': false,\n  registry: 'https://registry.npmjs.org',\n  'strict-ssl': true,\n  'user-agent': 'yarn/1.19.0 npm/? node/v12.11.1 darwin x64',\n  email: '[email\u00a0protected]',\n  lastUpdateCheck: 1570679687836,\n  username: 'omniphx',\n  '@omniphx:registry': 'https://npm.pkg.github.com/omniphx'\n}\ninfo npm config\n{\n  '//npm.pkg.github.com/:_authToken': 'fake12345',\n  registry: 'https://registry.npmjs.org',\n  '@omniphx:registry': 'https://npm.pkg.github.com/omniphx',\n  python: '/usr/bin/python'\n}\n\nAny idea?\n\nResolved\nChanged \"@myorg:registry\" \"https://npm.pkg.github.com/myorg\"\nTo      \"@myorg:registry\" \"https://npm.pkg.github.com\""}, {"role": "assistant", "content": "I've just run into a similar situation. It seemed that yarn was only looking in the main Yarn package registry for my organization's private package. I had copied the examples from GitHub's Packages documentation for constructing your .npmrc file directly to the .yarnrc file in the project that will be consuming the app, not knowing that the formats were different (I've never had to deal with .yarnrc files before). \nHowever, after updating the .yarnrc file with the correct format that you've mentioned above (which I also found in googling around), yarn successfully found the private package and installed it correctly. \nAs a heads up, my yarn version: 1.17.3\nSteps I Took\n\nStart new terminal session\ncd to the project\nnvm use (if you have a specific node version to use)\nAdd the correctly-formatted .yarnrc file to the project. See below for what it looks like. \nManually add the package and version range to the package.json for my private package\nRun npm login --registry=https://npm.pkg.github.com --scope=@MyOrg\n\nSee the note below on scope / org gotcha's\n\nRun yarn\n\nThat worked for me. \n.yarnrc\n\"@myorg:registry\" \"https://npm.pkg.github.com\"\n\nNote: See below for a note on the org / scope name gotcha's\nOther Notes\nI know that it appears that you don't have any issues with this, given your GH username / scope above, but for anyone else that comes here, the documentation on GH is a little sparse with regards to mapping your username / org name to a scope in the package name. Just remember these little gotcha's here: \n\nThe name of your package must always be scoped to your org (or username)\n\n\nE.g., name: @johndturn/my-package\n\nIf your organization has capital letters in it, like MyOrg, just replace them in the name of the package in your package.json and your .yarnrc with lowercase\n\n\nE.g., name: @myorg/my-package\nNote: When authenticating with npm login, I still have kept the uppercase letters in the --scope= argument. \n\nThe name of your package doesn't have to be the same name of the repo. \n\n\nE.g., for a repo called MyOrg/random-prefix.js-lib, you can have name: @myorg/js-lib in your package.json file for the project itself. Then, installing it in other projects will look something like @myorg/js-lib: 1.0.0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get all of a user's public github commits\n\nRegardless of project, I'd like to know if there's an easy way of getting all commits to all public repositories for a single username.\nSince I belong to multiple organizations, I'm trying to compile a list of the projects on which I'm a contributor, as well as projects that I have accepted pull requests.\nSo far my google-fu and looking through the github api docs has proved insufficient."}, {"role": "assistant", "content": "https://connectionrequired.com/gitspective is your friend. :-) Filter out all but \"Push\", and you have your view, albeit without the coding work to implement it yourself first.\nInspecting what goes on with the Chrome DevTools \"Network\" tab might help you mimic the API queries, if you want to redo the work yourself."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github - link to function in source\n\nI know I can have anchors to a certain line, but if the source changes that line might become irrelevant. Example:\n...source.php#L33 < line 33 may become line 40 later :(\nIs there some way to tell GitHub to link to a certain function or property from the source, without specifying the line?\n(The source is written in PHP code.)"}, {"role": "assistant", "content": "AFAIK, no, but you can link to a certain revision of the file, and thus, you can know for sure that line will always point at the start of the function.\nThe URL looks like /{user}/{repo}/blob/{hash}/{file}#L{line}\nTo get it, click \"Commits\", select the last commit, click \"Browse code\", and find your file and line as usual.\ndocumentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to modify someone else's Github pull request?\n\nSomeone created a pull request on my Github repo. It mostly looks good, but I had to make a few minor changes to get it to pass my continuous integration server.\nGithub's on-screen instructions to \"review\" the request were to run:\ngit checkout -b otheruser-fix_somebug\ngit pull https://github.com/otheruser/myrepo.git fix_somebug\n\nI then made my changes, and committed locally. However, when I went to run git push, git informed me:\nfatal: The current branch otheruser-fix_somebug has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin otheruser-fix_somebug\n\nwhich I did, but my changes are not showing under the pull request, but instead under a copy of the branch otheruser-fix_somebug mirrored on my Github repo and unconnected to the pull request.\nHow should I have called git push to get the changes to appear on the pull request?"}, {"role": "assistant", "content": "To my knowledge, you can only do this if they grant you permission. In the past this was only possible by them adding you as a contributor on their fork, however, in September 2016, GitHub added a feature for exactly this use case, allowing the person requesting the Pull Request to give permission to the maintainer(s) of the upstream repository simply by marking a checkbox.\nYou can make a comment on the Pull Request, telling them that their are some issues you'd like to fix before merging the Pull Request, and stating that you'd like them to give you permission to commit to their Pull Request branch by checking the \"Allow edits from maintainers\" checkbox on the Pull Request, and giving them a link to the GitHub Help page about the feature, so they can see exactly how to enable it. Once they've done so, you can push to the Pull Request branch of their repository directly.\n\nThings you can do if they haven't/won't give you write access to their pull request branch:\n\nMake comments on their Pull Request:\n\nGo to the Pull Request in your browser\nScroll to the bottom of the \"Conversation\" (default) page\nPost comments describing the changes they need to make before you'll accept the PR.\n\nMake comments on the code in their Pull Request:\n\nGo to the Pull Request in your browser\nClicking the \"Files changed\" link at the top\nHover over a line of code that should be changed\nClicking the little blue \"+\" button that appears next to it\n(NB: these only appear on changed, and nearby lines)\nPost a comment and/or some code to fix what's there\nRepeat 3-5 as needed.\n\nAccept it as is, then fix it in your own repository\n\nMerge their branch as if there was nothing wrong with it\nMake a new commit to your repository that fixes the issues (preferably mentioning the PR by issue id in your commit message so that GitHub can tell it's related and show it in the PR's Conversation page)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub : Is it possible to search inside code and sort by stars\n\nI'm not sure if this is the right forum for this question. Saw quite a few Q&A related to search on GitHub, hence posting here. \nE.g. Search code inside a Github project \nGitHub advanced search allows terms like stars:>100 but the query term is restricted to repository names only. Is it possible to search for a term inside the files (code) & sort by stars? My aim is to see which popular repos are using a particular keyword in their code. It would be very useful if GitHub's advanced search options for Repositories worked for Code also."}, {"role": "assistant", "content": "It is not possible to sort by stars when searching inside code.\nFrom an e-mail from github.com support:\n\nCode search does not support sorting by number of stars, but I will definitely add your +1 to that suggestion internally! I can't say if or when a change will happen, but your feedback is in the right hands.\n\n\nYou may want to vote for this feature: Add Stars count filter.\nThe feedback is related to this announcement: Improving GitHub code search"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github push event signature don't match\n\nI'm coding a Webhook for GitHub, and implemented secure verification in KOA.js as:\nfunction sign(tok, blob) {\n  var hmac;\n\n  hmac = crypto\n    .createHmac('sha1', tok)\n    .update(blob)\n    .digest('hex');\n\n  return 'sha1=' + hmac;\n}\n\n...\n\nkey = this.request.headers['x-hub-signature'];\nblob = JSON.stringify(this.request.body);\n\nif (!key || !blob) {\n  this.status = 400;\n  this.body = 'Bad Request';\n}\n\nlock = sign(settings.api_secret, blob);\n\nif (lock !== key) {\n  console.log(symbols.warning, 'Unauthorized');\n  this.status = 403;\n  this.body = 'Unauthorized';\n  return;\n}\n\n...\n\nfor pull_requests and create events this works ok, even pushing new branches works, but for push commits events the x-hub-signature and the computed hash from the payload don't match, so it always get 403 unauthorized.\nUpdate\nI've noticed that for this kind of push payloads the commits and head_commit are added to the payload. I've tried removing the commits and the head_commit from the body but it didn't work.\nUpdate\nFor more information please review these example payloads. I've also included url for the test repo and token info: https://gist.github.com/marcoslhc/ec581f1a5ccdd80f8b33"}, {"role": "assistant", "content": "The default encoding of Crypto hash.update() is binary as detailed in the answer to Node JS crypto, cannot create hmac on chars with accents.  This causes a problem in your push-event payload, which contains the character U+00E1 LATIN SMALL LETTER A WITH ACUTE in Hern\u00e1ndez four times, and GitHub services is hashing the payload as utf-8 encoded.  Note that your Gist shows these incorrectly-encoded in ISO-8859-1, so also make sure that you are handling the incoming request character-encoding properly (but this should happen by-default).\nTo fix this you need to either use a Buffer:\nhmac = crypto.createHmac('sha1', tok).update(new Buffer(blob, 'utf-8')).digest('hex');\n\n... or pass the encoding directly to update:\nhmac = crypto.createHmac('sha1', tok).update(blob, 'utf-8').digest('hex');\n\nThe correct hash of 7f9e6014b7bddf5533494eff6a2c71c4ec7c042d will then be calculated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I make the Mylyn GitHub Connector for Eclipse run authenticated requests?\n\nI'm using the very cool Github Mylyn Connector for Eclipse Indigo. However, since I use it for many projects on GitHub, I run very quickly into the 60 requests per second rate limit enforced on unauthenticated requests against the GitHub v3 API.\nThe Symptom is that refreshing any query (however small \u2014 again, the limiting factor here is more that I deal with may repositories) I get the error:\nUnexpected error : API Rate Limit Exceeded for XXX.XXX.XXX.XXX\n\nWhere XXX.XXX.XXX.XXX is of course my IP.\nI have configured the GitHub repositories in the Task Repository View with my GitHub username and password, but the connector doesn't seem to make use of those for either OAuth or Basic Authentication. I have read the FAQ of the GitHub connector plugin and haven't found anything of use there.\nIs there a way to get the GitHub connector to make authenticated requests (that would count against the much more relaxed rate limit of 5K/hour ?) ?\n\nEdit: I have tried with a private repository (which has at least one active issue) to check whether some credentials were sent there. I got Unexpected error: Issues are disabled for this repo.\n\nEdit: I noticed the problem with the version of the plugin on the Eclipse Marketplace, then switched to getting my EGit plugin from the nightlies repo, and likewise for the Mylyn Github Connector. It didn't help"}, {"role": "assistant", "content": "Eclipse Neon with Mylyn Github connector 4.4.\nTested with 2-factor access token. Anonymous rate limit successfully exceeded on a public repository with hundreds of issues.  I did not test with simple login but it should work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Authentication to GitHub using personal access token on macOS?\n\nAfter creating a personal access token, how do you unset any existing authentication and use the token in the macOS terminal?\nI tried running osxkeychain command  git config --global credential.helper osxkeychain but it doesn't change anything. I also tried unsetting the user password with  git config --global --unset user.password, and I tried opening Keychain Access application and delete GitHub entries, but neither worked."}, {"role": "assistant", "content": "Step 1: Unset existing credentials\nCopy this into your terminal:\ngit config --global --unset credential.helper\ngit credential-osxkeychain erase\nhost=github.com\nprotocol=https\n\nand hit 'Enter' twice to delete existing GitHub credentials (username and password) from your computer.\nRecommended: if you were previously authenticating using a GitHub Personal Access Token (PAT) and want to update to a new one, invalidate any old one(s) by visiting https://github.com/settings/tokens and clicking 'Delete' or 'Revoke All' to ensure an old token can no longer be used.\nStep 2\nGenerate a new access token: go to GitHub, click on your profile pic on the top right -> Settings -> Developer Settings -> Personal Access Tokens -> Tokens (classic) and create a new one (tip: if you're not sure what permissions to grant, just select full 'repos' permissions and nothing more - you can always create another token with more permissions later if required).\nStep 3\nGo into private repository and try to push/pull. GitHub will prompt you for your username (email or GitHub username) and password (the token you just generated)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "setup pre-commit hook jshint\n\nI recently started a project on github.\nI've managed to setup automatic testing after each commit using Travis. But now I would like to setup a pre-commit hook with jshint too. So if jshint reports errors, the commit should fail. But is this possible, and if so, how to do this ?"}, {"role": "assistant", "content": "There's an easier way of doing pre-commit checks (e.g. JSHint) in your Node.js workflow:\nInstall jshint from NPM:\nnpm install jshint\nNext create a .jshintrc file in your project if you don't already have one.\ne.g: https://github.com/nelsonic/learn-jshint/blob/master/.jshintrc\nNow install pre-commit module (and save it as a dev dependency):\nnpm install pre-commit --save-dev\nNext you will need to define the task (script) that will be run for JSHint in your package.json\ne.g: \n{ \"scripts\": { \"jshint\": \"jshint -c .jshintrc --exclude-path .gitignore .\" } }\nthen you register the scripts you want to be run pre-commit (also in package.json) e.g:\n\"pre-commit\": [ \"jshint\", \"coverage\", \"etc\" ]\nThis allows you to have more than just one check in your pre-commit workflow.\n(We have checks to ensure team members code complies with JSHint, Code Style and Test Coverage is 100%)\nFor a more detailed tutorial you can share with your team see: https://github.com/nelsonic/learn-pre-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: unable to access \".....\": gnutls_handshake() failed: Handshake failed\n\nI've been using Git for the past few months. Recently when I try to clone or to push, I keep on getting this error. I've researched on the internet but so far no solution has worked for me. Does anyone have an idea?\nExternal note : Now I moved to different country, it was working perfectly where I was before.\nGit Version : 2.11.0   , OS : Debian GNU/Linux 9.11 (stretch)\nError :\ngit push\nfatal: unable to access 'https://**************/': gnutls_handshake() failed: Handshake failed"}, {"role": "assistant", "content": "This is solution fix this issue on ubuntu server 14.04.x\n1, Edit file:\nsudo nano  /etc/apt/sources.list\n\n2, Add to file sources.list\ndeb http://security.ubuntu.com/ubuntu xenial-security main\ndeb http://cz.archive.ubuntu.com/ubuntu xenial main universe\n\n3, Run command update and update CURL to new version\napt-get update && apt-get install curl\n\n4, Check version (Optional):\ncurl -V\nResponse :\n\ncurl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.28 librtmp/2.3\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp \nFeatures: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets \n\n5, Test connect with bitbucket (Optional)\nGIT_CURL_VERBOSE=1 git ls-remote https://bitbucket.org/\nResponse:\n\n\n* Closing connection 0\nfatal: repository 'https://bitbucket.org/' not found\n\nThis done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github for mac doesn't allow to perform partial checkin/commit\n\nI am using GitHub for Mac, and have bunch of changes in my branch. I am have committed some of the changes and kept others as uncommitted as I am expecting some more changes. however, when I try to do sync in order to push those changes to Git repository it complains - 'Uncommitted Changes - Please commit all your changes before syncing.'\nAny idea? does it expects all the changes to be committed all the time when you do sync?"}, {"role": "assistant", "content": "Rather than \"syncing\" your changes, GitHub for Mac does offer you the ability to push, pull and sync changes.  Unfortunately, the UI button is for sync only.  However, if you go to the menu bar, under \"Repository\" you see there are two additional changes: push (command + P) or pull (shift + command + P)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can Git and iCloud Drive be effectively used together?\n\nIn the same flavor as this question, are there any possible complications that can arise when using the two services together?"}, {"role": "assistant", "content": "No, they shouldn\u2019t be used together.\n\nApple says \u201cYou shouldn\u2019t store app folders, libraries, or .tmp files in iCloud Drive.\u201d .git is an app folder.\nThere is a list of filenames excluded by iCloud Drive that git doesn\u2019t avoid. So, for example, if you name a tag \u201ctmp\u201d, that tag won\u2019t be synced. There\u2019s also nothing stopping git modifying its internal file structure, or iCloud Drive modifying its exclusion list, such that this sync failure always occurs.\niCloud Drive ignores symlinks, git doesn\u2019t. So, git status may return different results on different computers that iCloud Drive is done syncing.\n\nMore broadly speaking, git and iCloud Drive are two different lossy implementations of \u201cwhat are the contents of this directory\u201d, one shouldn\u2019t expect them to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using syntax highlight from GitHub\n\nWhat syntax highlighting is used on GitHub (for HTML, CSS, JavaScript, C#) when viewing source code-file and is it available for the public to use?\nIt works on the page and it works when embedding on a page (from a Gist), like this:\n<script src=\"https://gist.github.com/1009439.js\"></script>\n\nBut can I just include their JavaScript-library and let it highlight my code?"}, {"role": "assistant", "content": "Github uses pygments to highlight syntax. Pygments is running on the server, instead of a pure Javascript client solution. If you're looking for a Javascript solution check out this review of the various options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Completely remove a file from whole git repository\n\nUsing git for a project, I accidentally added to a commit a big .zip file. I didn't notice until I started uploading it to github. When I noticed, I hit ctrl-c, git remove, git commit and uploaded it again (now with the file untracked).\nI know that this wasn't the right choice to do, because once I committed the .zip, it stays in the repo until I revert the commit, but sadly I didn't.\nNow, when someone tries to download from the repo, it takes a lot of time to do it, sometimes yields git the remote end hung up unexpectedly (which I've read can be solved by doing some git config) and is very annoying.\nMy point is: is there a way to tell further pull/fetch request that forget this specific file in this specific commit version?"}, {"role": "assistant", "content": "Github provide a useful help page on removing files like this. There are also other questions on StackOverflow which cover this\n\nCompletely remove unwanted file from Git repository history\nHow can I completely remove a file from a git repository?\n\nSee also this section of the Pro Git book, an example given there:\n\nTo remove a file named passwords.txt from your entire history, you can\n  use the --tree-filter option to filter-branch:\n$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef 'refs/heads/master' was rewritten\n\n\nAfter the cleanup, you could also try a git gc to further compress and clean up for repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git cherry pick - range of commits and exclude some in between\n\nI normally use the following git command to cherryppick a range of gerrits..no how do I exclude a couple gerrits in between.. can the below command be modified or is there one where we can pick a range of gerrits and exclude the ones we want..\ngit cherrypick fromgerritSHA1..togerritSHA1"}, {"role": "assistant", "content": "You can specify multiple ranges:\ngit cherry-pick A..B C..D E..F\n\nor even specific commits:\ngit cherry-pick A B C D E F\n\nIf you have lots of commits you want to exclude, it might be easier to do something like this (sort of like a poor man's git rebase -i for git cherry-pick):\ngit log --pretty=oneline A..F | tac > tempfile.txt\n< edit tempfile.txt to remove the commits you don't want >\ngit cherry-pick $(awk '{print $1}' tempfile.txt)\n\nEdit: Added recommendation to tac the log, since git cherry-pick wants to see the commits in the opposite order from what git log produces (could also use git log --reverse ...)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How do I pull a tagged revision into my fork?\n\nI have a fork of a project on github where the main trunk was recently tagged.  I want to pull the code from the tagged revision into my fork.  How would I do that?"}, {"role": "assistant", "content": "Once you have the tag in local repository you can do something like\n\ngit merge tags/yourtag\n\nIf you don't have the \"trunk\" tags locally, you can fetch it using\n\ngit fetch remote-url \"refs/tags/*:refs/tags/*\"\n\nOr by setting up the remote\n\ngit remote add upstream remote-url\n\nand fetching the stuff using\n\ngit fetch -t upstream\n\nI think, though, using\n\ngit remote update\n\nwill have similar effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Has Bitbucket the git-blame on a line feature similiar to GitHub?\n\nCan I view the of a file/ a line who committed what and when on bitbucket? Can't find these functions on the site.  Thank you!"}, {"role": "assistant", "content": "Yes, but the button is not visible in all views.  If you go to source view you should see the blame button at the upper right hand side of the code view pane.  Depending on your version of bitbucket, it may be labeled as \"annotate\" instead of \"blame\" in an (unpopular with users) attempt to give the feature a more \"positive\" name!\nhttps://bitbucket.org/site/master/issues/16318/blame-button-seems-to-be-missing"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Connect an issue with a commit after the commit\n\nI did a git commit and pushed to github, but forgot to mention the issue number in the commit (I forgot to write something like ... closes #123).\nIf I had mentioned the issue number in the commit message, github would have connected the commit to the issue. Is there any way to do this after the commit, when it's too late for me to change the commit message?\nEDIT: Assume that it's too late to amend the commit or otherwise alter the history. I am really asking about github functionality, not git."}, {"role": "assistant", "content": "In your issue on GitHub, just write a comment with the commit hash. For instance:\nFixed with commit 61d949320fc0bf1a8dba09b3845bddcd153b1a64\n\nGitHub will recognize it as a SHA and link to the right commit page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Notorious Git Error: remote rejected (failed to lock)\n\nI am trying to push to a branch from my local to the origin. The branch name and the path is same. I have been pushing and pulling from this branch for a while and never had a problem. But suddenly, it started behaving badly. Last time when I tried to push to origin with following command:\ngit push origin feature/Prizefulfilment\n\nIt gives me following errror:\n72c6c1da98e5cff4484e254a538d9e3b472156ff but expected 0000000000000000000000000000000000000000\n\nI have Googled around but did not find a quite satisfying solution to it yet. \nMy exact error looks like following:\n$ git push origin feature/Prizefulfilment\nCounting objects: 126, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (75/75), done.\nWriting objects: 100% (78/78), 8.83 KiB, done.\nTotal 78 (delta 61), reused 0 (delta 0)\nerror: Ref refs/heads/feature/Prizefulfilment is at 72c6c1da98e5cff4484e254a538d9e3b472156ff but expected 0000000000000000000000000000000000000000\nremote: error: failed to lock refs/heads/feature/Prizefulfilment\nTo [email\u00a0protected]:OpusOneSCRUM\n ! [remote rejected] feature/Prizefulfilment -> feature/Prizefulfilment (failed to lock)\nerror: failed to push some refs to '[email\u00a0protected]:OpusOneSCRUM'`\n\nAny ideas?"}, {"role": "assistant", "content": "git push feature/prizeFulfilment: feature/Prizefulfilment\n\nThat is similar to this answer:\n\nFor the record, I believe the root cause of this problem was the difference in capitalisation between the local and remote branch names, and the case-insensitive nature of the Windows share that hosted the remote repository.\nWe just encountered this exact same error and were able to resolve the problem simply by renaming the local branch to match the capitalisation of the existing remote branch.\n\nTry and make sure to use the same capitalization between local and remote branches.\nYou second command make the link between the prizeFulfilment and remote Prizefulfilment explicit, which is why it worked. But it isn't a good solution to keep a local branch with that kind of difference."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to checkout submodule in GitHub action?\n\nI've got a repository with a submodule and I'm creating a build when I push to certain branches or tags. The problem I have is that my checkout step cannot access my submodule. The setup is:\n\nBoth repositories are on GitHub.\nI'm the owner of both repositories.\nBoth repositories are private.\nThe repositories are only accessible with ssh (https disabled).\n\nI've tried using the GitHub Action actions/checkout@v2 to no avail. As can be seen below I've tried using the 'ssh-key' option where I've added the public key to the the submodules repositories deploy keys and the private key to the secrets of the repository where I run the action. I get the following error messages:\nFetching the repository\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin __myrepo__\n  ERROR: Repository not found.\n  Error: fatal: Could not read from remote repository.\n  \n  Please make sure you have the correct access rights\n  and the repository exists.\n  The process '/usr/bin/git' failed with exit code 128\n  Waiting 13 seconds before trying again\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin __myrepo__\n  ERROR: Repository not found.\n  Error: fatal: Could not read from remote repository.\n  \n  Please make sure you have the correct access rights\n  and the repository exists.\n  The process '/usr/bin/git' failed with exit code 128\n  Waiting 19 seconds before trying again\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin __myrepo__\n  ERROR: Repository not found.\n  Error: fatal: Could not read from remote repository.\n  \n  Please make sure you have the correct access rights\n  and the repository exists.\n  Error: The process '/usr/bin/git' failed with exit code 128\n\nI've tried with and without the ssh-key as well as with true and recursive option on submodules. The destination of the submodule is in a directory called src. The checkout step in my workflow is the following:\nStep-01:\n  runs-on: ubuntu-18.04\n  steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: 'true'\n        ssh-key: ${{ secrets.PRIVATE_KEY_FOR_DEPLOY_KEY_IN_SUBMODULE }}\n\nThe .gitmodules is:\n[submodule \"name\"]\n    path = src/name\n    url = [email\u00a0protected]:user/repository.git\n    branch = master\n\nI'm very new to GitHub Actions (CI/CD overall) and not super comfortable with submodules so I may very well have made some basic mistakes."}, {"role": "assistant", "content": "I finally got it working, completely thanks to this.\nTo clarify the situation SAML SSO is enforced. So instead of using SSH to try and access the submodule I used a personal access token (PAT) where the SSO has been authorized.\nWhat I did:\n\nI generated a PAT in account settings.\nI enabled SSO and authorized it.\nI added the token in the repository (that wants to access the submodule) secrets.\nI updated the workflow to the following (just change the ssh-key line).\n\n\nStep-01:\n  runs-on: ubuntu-18.04\n  steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: 'true'\n        token: ${{ secrets.PAT_TOKEN }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add syntax highlighting to gh-pages\n\nIs there an easy way to add syntax highlighting to my various plugin's gh-pages using github's Pygments?\nI know that every page runs through the Jekyll engine and provides syntax highlighting (ref). But I don't want to install a blog. I just want syntax highlighting applied to the code blocks in my gh-pages.\nI guess I could always just include a different plugin with my gh-pages..."}, {"role": "assistant", "content": "Pages already does pygments, there's nothing to install.  Just use it!\n---\nlayout: default\ntitle: Something with codes\n---\n\nHappy fun highlighting. \n[More details](https://github.com/mojombo/jekyll/wiki/liquid-extensions)\n\n{% highlight ruby %}\ndef foo\n  puts 'foo'\nend\n{% endhighlight %}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Actions Invalid Workflow File Error\n\nI started using GitHub Actions and I was able to setup a CI pipeline for Elixir, the action builds and tests without any issues. I also wanted to deploy the application using the heroku actions so I went ahead and added the one that is available in GitHub but after doing that I'm getting the following error:\nInvalid Workflow File\nEvery step must define a uses or run key\nThis is how my workflow looked before adding the heroku action:\nname: Elixir CI\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: elixir:1.9.1-slim\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Install Dependencies\n      run: |\n        mix local.rebar --force\n        mix local.hex --force\n        mix deps.get\n\n  test:\n\n    runs-on: ubuntu-latest\n\n    services:\n      db:\n        image: postgres:11\n        ports: ['5432:5432']\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/[email\u00a0protected]\n      - uses: actions/[email\u00a0protected]\n        with:\n          otp-version: 22.x\n          elixir-version: 1.9.x\n      - run: mix deps.get\n      - run: mix test\n\n\nAnd this is how I added the heroku action\n  deploy:\n\n      runs-on: ubuntu-latest\n\n      steps:\n        - uses: actions/[email\u00a0protected]\n        - name: GitHub Action for Heroku    \n        - run: |\n            heroku login\n\n          env:\n            CI: true\n\nHere is the error for more details."}, {"role": "assistant", "content": "You have too many - where you are defining the step. There should only be one - per step in the job.\nThe README for actions/heroku hasn't been updated yet to show an example for yaml workflows. There is an open pull request to update it though. The following is the example from that pull request which might help you.\non: push\nname: Deploy to Heroku\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: login\n      uses: actions/heroku@master\n      env:\n        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}\n      with:\n        args: container:login\n    - name: push\n      uses: actions/heroku@master\n      env:\n        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}\n      with:\n        args: container:push -a calm-fortress-1234 web\n    - name: release\n      uses: actions/heroku@master\n      env:\n        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}\n      with:\n        args: container:release -a calm-fortress-1234 web"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to sync gitlab with github\n\nI have several developers working on a local Gitlab instance. The client requires that their Github repo is kept updated. So our Gitlab repo should push any commits directly to Github. Any commits to Github should likewise be pulled into Gitlab.  \nI could do the first part (dev --> gitlab --> github) with jenkins or something, but am stuck on the reverse. Our Gitlab and Jenkins run inside our firewall.   \nAny hints or pointers (or drop in solutions!) would be very appreciated."}, {"role": "assistant", "content": "It's only in the enterprise edition and on GitLab.com, but GitLab has introduced this feature directly, without any workarounds.\nThey've documented pulling/pushing from/to a remote repository in GitLab Docs \u2192 User Docs \u2192 Projects \u2192 Repositories \u2192 Mirroring.\nIt's in the same section of configuration that you can push, too:\n\nFrom within a project use the gear icon to select Mirror Repository\nScroll down to Push to a remote repository\nCheckmark Remote mirror repository: Automatically update the remote mirror's branches, tags, and commits from this repository every hour.\nEnter the repository you want to update; for GitHub you can include your username and password in the URL, like so: https://yourgithubusername:[email\u00a0protected]/agaric/guts_discuss_resource.git\n\nNote that I haven't tried it, but you should be able to push to and pull from the same repository.  It's working great for me pulling from a remote repository (drupal.org), and pushing to a different remote repository (gitlab.com)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error setting certificate verify locations - Github\n\nI am having problem accessing github repository through Git Bash.\n2 days ago I was able to push/pull the repositories. Then \n1) I created an account on gitlab.com\n2) I generated ssh key on my local pc following GitLab and SSH keys using git bash on windows\n3) After this I did not create/pull/push any repository on gitlab.\nToday I make few changes in a code (that is deployed on github), when I try to push that code I get following error\nfatal: unable to access 'https://github.com/junaidbinsarfraz/repo.git/': error setting certificate verify locations:\n  CAfile: E:/Softwares/Git/mingw64/libexec/ssl/certs/ca-bundle.crt\n  CApath: none\n\nThere is no ssl folder in libexec\n\nAlso no file/folder changed in Git folder since Jan 2017\n\nIt seems like git-bash issue, not sure. Can anyone help ?"}, {"role": "assistant", "content": "In my case, on windows, It was not working after setting of name, e mail as well as certificates path for git config. following command run from command prompt fixed this issue.\ngit config --global http.sslcainfo \"C:\\Program Files\\Git\\usr\\ssl\\certs\\ca-bundle.crt\"\npath of your ca-bundle.crt may vary in your case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get a multipage site from GitHub Pages' automatic generator?\n\nI am using the 'Automatic Generator' of GitHub Pages, and I see it only generates a single index.html and other web resources.\nHow it works if I want to have a multi-page website generated from other markdown files?"}, {"role": "assistant", "content": "You can get github to generate .html files from .markdown files by ensuring the top of the .markdown starts with the ---- block like this:\n---\ntitle: This will be used as the title-tag of the page head\n---\n\nhello\n=====\n\n**You are here!**\n\nFound this here:\nhttp://xlson.com/2010/11/09/getting-started-with-github-pages.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - prevent collaborators from using push -f\n\nIs there a way to prevent force push into a branch or repository?   \nI want to stop important branches from having their history rewritten either accidentally or intentionally.  How do people deal with this in larger development teams?\nIdeally, in my view, would possible to lock few branches per repository, and prevent everyone, other than the repository owner from doing a force push into them."}, {"role": "assistant", "content": "This is easy to do with Git with a pre-receive hook. Of course, this requires that you are actually able to install hooks, and for obvious reasons, GitHub doesn't allow you to upload arbitrary executable files to run on their servers :-)\nIn general, the workflow with Git or really any distributed version control system, is that you don't allow other people to push to your repository. Instead, you pull from theirs. This requires a much lower level of trust. So, this would be workaround number 1: don't let them push, have them fork and then pull from them. That way, you can control what goes into your repository.\nAnother workaround would be to set up your own staging repository on a server you own, where you can install your own Git hooks. You can configure a pre-receive hook which denies pushing if it's not a fast-forward and post-receive hook which automatically forwards all pushes to GitHub. Of course, this means that you lose many of the benefits of using GitHub in the first place.\nAs a third workaround, you could use multiple repositories. This is a combination of the two other approaches: have one repository that your collaborators can push to and another one that only you have access to, that you pull into from the first repository.\nAt any rate, you should file a feature request with GitHub (especially if you are a paying customer!) since this seems to be a useful feature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git refs merge vs head in pull request\n\nThe refs/pull/*/head refers to head of the PR but what about the refs/pull/*/merge, I am not finding any git commits which are shown as part of /merge in commit history. What does this /merge exactly mean for a PR and when PR has multiple commits to it, when PR is open,  When PR is closed etc\n$ git ls-remote\nFrom git@<repo url>\n01c8cd97857c21cfc5d413bd64e3c0e8cc8fd03d        HEAD\n37b88346a9edb426f676d080be502a1d4349c499        refs/heads/PR1\n6fda26f078c00adf518ec620e94f54daa85bb894        refs/heads/PR1-1\nbd88e471db4127f066b3b2f1d699b8296ca62f6d        refs/heads/PR5\n25b5eec47ca186a778c93439cd81e8a4125b5d6f        refs/heads/PR6\n58a82cf11218991f8f544a14ef6c57d3963690ee        refs/heads/PR7\na5831973e1a4561527551a8bc8a9d5f9436f004b        refs/heads/Pr2\n01c8cd97857c21cfc5d413bd64e3c0e8cc8fd03d        refs/heads/develop\n442c0bc7f8b3872660d48cbd42690be677314b94        refs/heads/master\n37b88346a9edb426f676d080be502a1d4349c499        refs/pull/1/head\n2db24e8a6a53ce006694c4c5db1886df44620372        refs/pull/1/merge\na5831973e1a4561527551a8bc8a9d5f9436f004b        refs/pull/2/head\n4ea1814dda65e2ca8572fbbc5da9cc8141391ab8        refs/pull/2/merge\n6fda26f078c00adf518ec620e94f54daa85bb894        refs/pull/3/head\nb6cde57523fc73ce08dd7e588eeb606c3f047136        refs/pull/3/merge\n442c0bc7f8b3872660d48cbd42690be677314b94        refs/pull/4/head\n58a82cf11218991f8f544a14ef6c57d3963690ee        refs/pull/5/head\ne4a82d455b8b8e81b70dfbf4f6d79a1fb5158cbb        refs/pull/5/merge\nbd88e471db4127f066b3b2f1d699b8296ca62f6d        refs/pull/6/head\ne8825e286aa9c36c04046c5d4ac85c9d7a4ebf5c        refs/pull/6/merge\n25b5eec47ca186a778c93439cd81e8a4125b5d6f        refs/pull/7/head\ned262d8c4766b037207f3113b634c777b3a0af37        refs/pull/7/merge\n\nfor ex.\n25b5eec47ca186a778c93439cd81e8a4125b5d6f        refs/pull/7/head\ned262d8c4766b037207f3113b634c777b3a0af37        refs/pull/7/merge/\n\nwhat is the significance of ed262d8c4766b037207f3113b634c777b3a0af37        refs/pull/7/merge/\nand this commit id ed262d8c4766b037207f3113b634c777b3a0af37         is not found anywhere"}, {"role": "assistant", "content": "The refs/pull/<number>/merge is a reference created by GitHub to keep track of what would happen if a pull request was merged. It references the merge commit between refs/pull/<number>/head and the destination branch (e.g. master).\nYou can think of it as a \"future\" commit. GitHub (as well as other Git-based collaboration platforms) use this technique to determine whether the pull request would successfully merge with all the checks passing and no merge conflicts.\nAtlassian has a good explanation of the reasoning behind this server-side implementation detail here:\n\nWhen you view a pull request, you\u2019re seeing what the resultant merge commit will actually look like. We do this by actually creating a merge commit behind the scenes, and showing you the difference between it and the tip of the target branch.\n\nThey're obviously talking about Bitbucket, but the same applies to GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to test github workflow without merging into master/main branch\n\nI am creating a new git workflow. And just like any other piece of code, I want to test it separately without having to merge it into master first.\nThis will also help if I have to make few corrections if something doesn't work in the workflow yaml.\nHere is the mechanism that I am looking for:\n\nmain branch has .github folder which contains all workflows\nI create a branch and add my workflow to .github folder\nNow I should be able to see(somewhere on Github) workflows from my branch running\nWhen I know that workflows are working fine, I merge my branch in master\nNow under github 'Action' tab, new workflows will reflect\n\nIs there a way to do this?"}, {"role": "assistant", "content": "So, from the previous answers, seems that the (least-disrupting) solution is:\n\nAdd the following trigger to the workflow\n\n\non:\n  pull_request:\n\n\n\nCreate a draft PR\n\nThe Workflow will then show-up under the Actions menu, it will immediately trigger, and it will again be triggered whenever new changes will be pushed to the branch you're using in the PR."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Haskell Stack install package dependency from github\n\nIs it possible to install a version of a package from github using Haskell stack?\ne.g. in a .cabal or a stack.yaml file, how can I point a dependency at a git repo/branch/revision?"}, {"role": "assistant", "content": "For stack <1.11:\nThe documentation for the stack.yaml packages section gives examples of referring to more complex package locations.\n\npackages:\n- location: .\n- location: dir1/dir2\n- location: https://example.com/foo/bar/baz-0.0.2.tar.gz\n- location: http://github.com/yesodweb/wai/archive/2f8a8e1b771829f4a8a77c0111352ce45a14c30f.zip\n- location:\n    git: [email\u00a0protected]:commercialhaskell/stack.git\n    commit: 6a86ee32e5b869a877151f74064572225e1a0398\n- location:\n    hg: https://example.com/hg/repo\n    commit: da39a3ee5e6b4b0d3255bfef95601890afd80709\n\n\nThen add extra-dep: true to the package entry just to tell stack not to treat the code it pulls in as something you're developing on (e.g., don't load it in GHCi)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "HowTo: Teamcity + GitHub\n\nHas anybody successfully configured Teamcity to monitor, extract, and build from GitHub?\nI can't seem to figure how where and how to configure the SSH keys for Teamcity.  I have Teamcity running as a system service, under a system account.  So where does Teamcity stash its SSH configuration?\nEDIT\nTo get this to work, I needed to stop the agent from running under a system account."}, {"role": "assistant", "content": "Ok...  I got this to start working on my Windows server.  Here are the steps I took to configure TeamCity 4.5 Professional:\n\nDownloaded the JetBrains Git VCS Plugin\nCopied the downloaded zip file to .BuildServer\\plugins\nIn the Administration > Edit Build Configuration > Edit VCS Root configuration screen, I selected \"Git (JetBrains)\"\nEntered my Clone Url from the GitHub project page\nSet for authentication method \"Default Private Key\" -- this is IMPORTANT\n\n\nThe TeamCity BuildAgent should be running as a standard user, with the SSH installation configured properly for that user.  \nFollow the GitHub SSH directions for SSH configuration\n\nLeave the username blank.  This should already be provided for in your GitHub clone URL"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to run cloned Django project?\n\nI am a junior software engineer and am quite new to Django. I built this app and am working on a README to explain to others how to fork, clone and setup the app on their own machines. I've gotten stuck while trying to re-create the steps.\nThis is the order in which I've drawn up the steps:\n\nFork and clone the repo\nSource a virtual environment\nPip install requirements.txt\nObtain access_token and secret_key and store in secrets.sh\nSetup a Postgres DB, create user & database\nMigrate (?) - This is where I get stuck! \n\nI tried migrating the app but there are no migrations to apply.\nI tried django-admin startproject ig_miner_app . but am getting this error code:\nCommandError: /Users/Erin/Desktop/CodeByEAllard/project/instagram_miner/manage.py already exists, overlaying a project or app into an existing directory won't replace conflicting files\nIf I can get this sorted out, I should just be able to run the server like normal, right?\nI'm sure I'm missing something (or many things) but don't know what they are. I feel silly because I was obviously able to create the app in the first place, but can't figure out how to explain to someone else to do the same! Does any have suggestions for how to get the server to run?\nThank you!"}, {"role": "assistant", "content": "First off, you are getting that error because you are starting a project within the same directory as the cloned project, this directory already contains an app with the name ig_miner_app hence the name conflict. \nAs regards steps to running the project by other users , this should work.\nclone the project \ngit clone https://github.com/erinallard/instagram_miner.git \n\ncreate and start a  a virtual environment\nvirtualenv env --no-site-packages\n\nsource env/bin/activate\n\nInstall the project dependencies:\npip install -r requirements.txt\n\ncreate a file named \"secrets.sh\"\ntouch secrets.sh (mac and linux)\nobtain a secret from MiniWebTool key and add to secrets.sh\nexport SECRET_KEY='<secret_key>'\n\nadd secrets.sh to .gitignore file\ncreate a postgres db and add the credentials to settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'db_name',\n        'USER': 'name',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\nthen run\npython manage.py migrate\n\ncreate admin account\npython manage.py createsuperuser\n\nthen\npython manage.py makemigrations ig_miner_app\n\nto makemigrations for the app\nthen again run\npython manage.py migrate\n\nto start the development server\npython manage.py runserver\n\nand open localhost:8000 on your browser to view the app.\nI believe this should get the app up and running on others' machines. Let me know if you get stuck on any of these steps so I make edits, if not, you can just use it and add any other relevant info I might not have added."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How make travis-ci execute for some branch?\n\nI have a few branches in my repo and I have the .travis.yml file in a branch A (master branch does not have this file). But travis-CI is not starting the build for branch A. What do I need to do to run travis for this branch? When I create a Pull Request from some other branch to master, then travis starts the build.\nP.S. I turned off/on Build only if .travis.yml is present but it did not help. Also I can't see any branches in Branches tab. I added\nbranches:\n  only:\n    -A\n    -master\n\nin the .travis.yml, but it too did not help."}, {"role": "assistant", "content": "You can try and check if it would work with a whitelist.\nSee \"Specify branches to build\"\nYou can either white- or blacklist branches that you want to be built:\n# blacklist\nbranches:\n  except:\n    - legacy\n    - experimental\n\n# whitelist\nbranches:\n  only:\n    - master\n    - stable\n\nTry and put A in a whitelist syntax in the travis.yml, and see if that is picked-up."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to prevent phabricator from eating my commit history\n\nHere is the scenario that is pretty much annoying me.\nJack works in foobar a software house, Jack is a Working Programmer, he loves coding and commits frequently. Paul who is jack's manager tells him that we are going to start using a new code review tool, phabricator. Jack complies, Jack creates a local branch and starts working. He adds features and commits to his local branch very frequently. Now at the end of the day he sends a phabricator request.\narc diff development\n\nJohn who is jacks team member reviews his code and accepts his changes.\nNow Jack opens the terminal and moves to his repository directory.\nJack types the following command to close the revision and merge his code with the development branch.\narc land --onto development\n\nHe sees the following message\nLanding current branch 'feature-awesome-features'.\nSwitched to branch development. Updating branch...\nThe following commit(s) will be landed:\n\nb2ff76e  Added the foo to bar\n33f33ba  Added a really important check which can destroy the project or save it\n31a4c9a Added that new awesome feature\n8cae3bf rewrote that awful code john wrote\nbc54afb  bug fixes\n\nSwitched to branch feature-awesome-features. Identifying and merging...\nLanding revision 'D1067: Added the awesome feature'...\nRebasing feature-awesome-features onto development\nAlready up-to-date.\nPushing change...\n\nNow jack opens Github to see his code , his beautiful commits. but what he sees is pure horror all of his commits have been replaced by a single commit which basically says something like this\nSummary: Added the awesome feature\n\nTest Plan:  do foo bar testing\n\nReviewers: John\n\nReviewed By: John\n\nCC: Paul\n\nDifferential Revision: http://phabricator.foobar.com/D1067\n\nNow jack is sad, because he wants to see all of his commits, jack thinks that this commit makes him look like The Hoarder which he is not. He wants to fix this so he goes to ask a question on stackoverflow.\nThat how may he prevent phabricator from eating his commit history."}, {"role": "assistant", "content": "asherkin's answer explains the rationale for this behavior, and why this is the default.\nIf you don't find that argument compelling, you can use the --merge flag to arc land to perform --no-ff merges instead of --squash merges. These merges will not destroy local commits.\nIf you set history.immutable to true in your .arcconfig, arc land will --no-ff merge by default.\nYou can also use raw git commands if you don't like the behavior of arc land; it is provided only for convenience.\nIn your example, we recommend creating five separate reviews -- there are multiple different ideas being implemented, and they are not related and seem easily separable. See Writing Reviewable Code. Combining bugfixes, style changes and new features into one change is hoarding."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where did git put a clone\n\nI'm pretty new to git. For a class the teacher posted a link to clone a project file it said\ngit clone git://github.com/foo\n\nI typed the command and it seemed to work. Problem is I don't know where the file is! If I type the command again it says destination path already exists and is not an empty directory.\nAny help really appreciated =S"}, {"role": "assistant", "content": "The repository should have been cloned into a directory named \"foo\" located in whichever directory you ran the git clone command from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does the github website work (architecture)? [closed]\n\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 4 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nGithub is a truly amazing service. I'm keen to understand what their architecture is like and how they fit the different pieces together; how they store the repositories, how they access those repositories to show file contents, how they handle displaying diffs, etc. Could someone give an overview of the technologies and techniques they use, so I can study them to expand my knowledge and in turn skills?"}, {"role": "assistant", "content": "The core of Github is the open-source software git, which is a distributed version control and source code management software. Github adds many features onto git's functionality, including issue tracking, wiki, access control, etc.\nHowever, Github is proprietary software, and many of it's internals remain unknown to general public.\nIn order to find out how pieces are fit together, I suggest following the leads below:\n\nGithub's official Engineering Blog, which covers a wide range of topics of the design of the platform.\n\n\nespecially this article, an extensive overview written by Github CTO.\n\nProjects that power Github, an officially curated list of open-source projects that power Github. Here are a few highlights:\n\n\nrails - web backend\njekyll - blog engine behind Github Pages\nelasticsearch - search engine\nhubot - a chat bot for task automation\nace - browswer based code editor\nd3 - js lib for graphs and charts\nresque - background works\n\nGitLab, an open-source alternative to Github, which offers pretty much the same functionalities.\n\n\nRead the source code of GitLab and you'll get to know how GitLab (and Github as well) works under the hood.\nGitLab Architecture Overview. This article is definitely a good entry point.\n\n\nI stole a system layout diagram from Gitlab Architecture Overview. Bet you've already get a hang of how gitlab works from this diagram.\n(There surely are lots of difference between Github and GitLab. But an open-source project is always better for someone who wants to learn, isn't it?)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to convert files in GitHub repository to a Gist\n\nWhat I would like to do is the inverse of this question.  I have a folder within a GitHub repo that contains a d3 visualization that I would like to continue making changes to.  It would be nice to have a \"gist\" version of this repo to display the visualization on bl.ocks.org that I could push changes to when from the primary repo after I am happy with them.\nAnother similar question is here, but the answers describe the step gist -> bl.ocks.org.  I am unsure of the step githup repo -> gist.  What is the best way to accomplish this?"}, {"role": "assistant", "content": "First of all, note that Gist doesn't support directories. To import a repository into a gist follow the next steps:\n\nCreate a new gist and clone it locally (replace the dummy id with your Gist id):\ngit clone [email\u00a0protected]:792bxxxxxxxxxxxxxxx9.git\n\ncd to that gist directory\nPull and merge from your GitHub repository:\ngit pull [email\u00a0protected]:<user>/<repo>.git\n\nPush your changes\ngit push\n\n\nAgain, note that if you have directories, you have to delete and commit them:\nrm -rf some-directory\ngit commit -m 'Removed some-directory' .\n\nUsing the steps above, the project history will be kept. If you don't care about history, you can always push files in your Gist. Let's say you have a repository containing multiple folders and you want for each folder to create a Gist. You will repeat the next steps (or a script could do that):\ngit clone [email\u00a0protected]:<gist-id>.git\ncd <gist-id>\ncp ../path/to/your/github/repository/and/some/folder/* .\ngit add .\ngit commit -m 'Added the Gist files' .\ngit push\n\n\nGist is different than how GitHub works:\n\nGist is a simple way to share snippets and pastes with others. All gists are Git repositories, so they are automatically versioned, forkable and usable from Git.\n\nHowever, if you try to push directories in Gists you will get errors from remote:\n$ git push\nCounting objects: 32, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (21/21), done.\nWriting objects: 100% (32/32), 7.35 KiB | 0 bytes/s, done.\nTotal 32 (delta 10), reused 0 (delta 0)\nremote: Gist does not support directories.\nremote: These are the directories that are causing problems:\nremote: foo\nTo [email\u00a0protected]:792.....0b79.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to '[email\u00a0protected]:79.......9.git'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are the ethics & etiquette of forking someone else's github project to release it as a gem?\n\nI'm doing some spare time coding around CultureGrid. They have a SOLR API to access 1.2m cultural artefacts. I've released a gem to consume their service, but I've got a nice idea about using Datamapper with a SOLR adapter backend to do it in a better way.\nI just found a project from last year on Github handily called dm-solr-adapter. It's a fork of someone else's work from 2008 and to use it you have to clone the project and run a rake task to install it (not much use on heroku, so I'd have to vendor it). Unfortunately that task is now broken because they didn't pin their gem versions, and Bones has changed considerably between version 2 and 3.\nBasically - it needs a bit of a recode to get it to be a gem, and if I'm going to do that I might as well release it myself and do it the way I know - using Jeweler instead.\nSo, of course I'll drop all of the authors a line, but I just wondered what the ethics and etiquette are here. Do I include my username in the gem or do I use the original gem name? Could that potentially trash someone else's installation, even though the gem is not listed on Rubygems.org? Do I follow their numbering convention? They seem to have chosen \"1.0.0\" and stuck with it, with no further activity. Or do I just start again from version 0.1.0?\nFailing that, do I just grab the bits I want, include it in my new project and give a hat tip? That doesn't sound very useful for others who might want to do the same things.\nOr perhaps I take the bits I find useful, make an entirely new gem called something like dm-solr-backend and go from scratch?\nOh, the dilemmas - what would you do?"}, {"role": "assistant", "content": "So, if you're not going to release a gem, just go ahead and fork (assuming the license allows it) and don't worry about it.  That's 100% OK and even expected behavior at this point.  Forks are actually one of the easiest ways to accept patches from contributors.  The network graph is often a good way to evaluate both the health of a project as well as the potential areas for improvement.\nIf you intend to release a gem because the original has become unmaintained, you should either:\n\nRelease it as username-originalgemname\nContact the original author and offer to take it over.  Then push new gems under the original name.\n\nIf you intend to release a gem because you need changes to the gem that would not benefit the community as a whole, you should either:\n\nUnpack the gem into a vendor directory and never release\nRelease it as username-originalgemname\n\nIn most cases, there is no problem with a gem release named username-originalgemname.  This was the model that the GitHub gem repository took, so that's how most people handle forks at this point."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove \"generated from\" tag?\n\nI see this message below my repo name. Is there any way to remove it? I used template for my app for a quick start, but in current form my app doesn't look like this template, because everything changed so much. I don't see any reason why it's still there."}, {"role": "assistant", "content": "I had the same problem and at the time for writing this answer, there is no option of removing this from Github. So removed this tag by deleting the repository from Github and recreating a new one with the same name.\n\u26a0\ufe0f This operation will preserve only the information stored in git, not all other Github features, i.e. issues, PRs, ... If your repository has been used for a while, this might not be the right time to do this anymore.\nSpecific instructions:\n\nMake sure you have cloned your repository and all your non-stale branches are saved locally.\ngit fetch\n\n\nDelete the original repository in the Github web UI.\nCreate a new repository with the same name.\nPush the branches you want back to the remote.\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gantt Chart for GitHub [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nWe've been using GitHub for 6-months now and have more/less figured out \"best practices\" with regards on how to put in tasks, milestones, etc. However, from a management point of view, there are a few features that are lacking. For instance, Gantt Chart capabilities found in solutions such as RedMine, or even overlaying on top of a calendar tasks/milestone markers, roadmaps, etc.\nIs there some sort of \"add on\" or 3rd party website that can hook into GitHub and generate these for me? Since we've already integrated so much within GitHub, I'd like to stay on it, but if a migration to another system is possible with the functionality we require, I may be willing to transfer. \nAny advice/help would be greatly appreciated!"}, {"role": "assistant", "content": "I started a project which does exactly that :\nhttps://github.com/neyric/gh-issues-gantt\nIt only handles issue durations in days, but we found it to be easier to maintain and quite accurate for our usage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to stop github from adding new commits to existing pull request\n\nI have created a pull request from my master branch to upstream and now every new commit on that branch automatically attaches itself to this pull request.\nThere was a \"Change commits\" button on pull request page at the time of creation but it seems to disappear after request is created. Can I do it some other way now ?"}, {"role": "assistant", "content": "In GitHub a Pull Request denotes the request to merge one branch with another. When either branch is updated, the pull-request is updated too and the merge is re-evaluated.\nThus, when you push new changes to a branch that has an outstanding pull request linked to it, the pull request will be updated to include the new changes.\nTo reset your pull request to a previous state you can:\n   git switch branch-you-want-to-fix\n   git branch backup-of-later-changes\n   git reset --hard hash-of-desired-changes\n   git push --force\n\nThis will create a new local branch with your later changes and will remove those changes from the branch on github.\nThe pull-request will be re-evaluated (one of its sides has been updated with your force push), and you can create a new pull request from your backup-of-later-changes branch.\nAs long as the new commits aren't pushed to the pr-branch, they won't automatically appear in it, even if these changes are based on top of your original pr-branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "NPM: Missing dist and src directories when trying to install directly from a github url\n\nAn npm package I am using has been forked on github with some bug fixes and I now want to use the forked code in my project until the fork is merged.\nIn my package.json I change the reference in dependencies from e.g. \n\u201ccool-package\u201d: \"^0.10.0\"\nto \u201ccool-package\u201c: \"git://github.com/developer-who-forked/cool-package.git\" but this doesn\u2019t work.\nIf I run npm install after updating the package.json and then go in to node_modules/cool-package/ I don\u2019t see any /src folder or any /dist folder (all the other modules installed via normal npm seem to have at least a /dist folder).\nI only see an /example folder and a /test folder alongside a package.json and a README.md. If i\u2019d installed the package by including \u201ccool-package\u201d: \"^0.10.0\" there would be the src/ and dist/ folders.\nThe forked repo, or the original repo it was forked from don\u2019t have a /dist folder - it is actually in the .gitignore file. So I think I am missing some build step that is required to create the /dist files when trying to access github repos directly in the package.json."}, {"role": "assistant", "content": "What worked for me was:\n\ncommiting /dist to gh\nrunning npm install {username}/{repo}.git instead of manually adding the record to package.json"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git always asks for my ssh-key passphrase\n\nI have a problem that occurs when using git.\nWhen I use the command git pull origin my_branch or git fetch or git push origin my_branch, git always asks for my passphrase for key. I don't understand why this occurs?\nCan someone please explain why and how to avoid entering the passphrase each time.\n$ git fetch\nEnter passphrase for key '/home/khanhpn/.ssh/id_rsa':"}, {"role": "assistant", "content": "Like Nasreddine says, it's because your key is encrypted with a passphrase to prevent others from reading it.\nThe most convenient way of using passphrased keys is by using ssh-agent to start an authentication agent (which runs in the background):\n$ eval \"$(ssh-agent)\"\nAgent pid 44304\n\n...and then using ssh-add to register your key with the agent so that it's used automatically for subsequent SSH connections:\n$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /home/khanhpn/.ssh/id_rsa:\n\nYou'll be asked to enter your passphrase when you run ssh-add, but you won't need to do so again while ssh-agent is running.\nYou can find more information on GitHub.  Also note that you'll have to do this every time you log in, so you might like to add the eval \"$(ssh-agent)\" step to your .profile script."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Actions is not permitted to create or approve pull requests (createPullRequest)\n\nSince the 3rd of May this month, github added the setting Allow GitHub Actions to create and approve pull requests for creating pull requests in github actions, under Settings > Actions > General. However, it seems I cannot select this option for my repo, it is grayed out without any explanation why it is grayed out.\nWhenever the \"default permissions\" setting is changed and saved, it is possible to select the Allow GitHub Actions to create and approve pull requests, but if it is saved it snaps back to the original grayed out version, unchecked.\nI also tried giving the workflow file the pull-request permission like so:\npermissions:\n   pull-requests: write\n\nbut that didn't work either. Is there something I am missing which prevents me from using pull requests within github actions?"}, {"role": "assistant", "content": "You are probably using an organization, which means you must first enable this behavior on the organization level and then on the repository level\n\nGo to https://github.com/organizations/YOUR_ORG/settings/actions and check Allow GitHub Actions to create and approve pull requests\nThen go to https://github.com/YOUR_ORG/YOUR_REPO/settings/actions and check the box that previously was grayed out"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Make private repo contribution history public\n\nI would like to show a client my contribution history towards a project, without making the repo public. Is there a way to do this through github (eg: not taking screenshots of everything).\nIdeally they could see at least the number of contributions towards the project; it would be great if they could also see the graph features (punch card, timeline, etc.).\nIs this possible?"}, {"role": "assistant", "content": "I created a script that solves this problem:\nhttps://github.com/ebrian/gitdummy\nIt will transfer all of your commit messages and dates for a given email address out of an existing repo and into a dummy repo that you can then push up to your GitHub account. It won't transfer source code, project names, or project team members' commits.\nEnjoy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a gist on command line\n\nI am trying to create a gist from bash, and I have tried many versions scripts I could get, but none are working.\nThis seems like a correct one, but it does not work also. \ncurl -X POST -d '{\"public\":true,\"files\":{\"test.txt\":{\"content\":\"String file contents\"}}}' https://api.github.com/gists\n\nI have a test.txt file with content I would like to create the gist, but it won't work.  It says, invalid email, if I try to add -u USER or -u USER:PASS it still won't work saying \"message\": \"Problems parsing JSON\", .. \nI don't know what is wrong. the documentation does not provide much except for this line: \n\nPOST /gists \n  as you can see, I am passing the test.txt file."}, {"role": "assistant", "content": "Recently GitHub CLI released.\nSo you can now use it instead.\nJust install it to your system (https://github.com/cli/cli#installation)\nThe authenticate (it's pretty simple)\ngh auth login\n\nAfter you logged in you can simply create a new gist by:\ngh gist create -d \"my test gist\" -f some_local_file.txt  test_gist\n\nFor more details you can use help:\ngh <command> <subcommand> --help"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to tell git to ignore all further edit to a single file without removing it from the repo\n\nI have forked a project on github and started messing around with it on my own machine, I want to commit the changes I have made back to my fork on github but without commiting the changes I have made to the .cfg file, since this contains things like db password etc"}, {"role": "assistant", "content": "Use this:\ngit update-index --skip-worktree path/file.cfg\n\nAnd to restore:\ngit update-index --no-skip-worktree path/file.cfg\n\nLastly, if you want to list files that are marked with skip-worktree:\ngit ls-files -v | grep ^S | awk '{print $2}'\n\nTo simplify, you can make an alias for that in your $HOME/.gitconfig:\n[alias]\n    ls-ignored-changes = !git ls-files -v | grep ^S | awk '{print $2}'\n\nThen you can type just git ls-ignored-changes. It even works with auto-completion if you have the git-completion in place (for bash, tcsh, zsh)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub API: using 'repo' scope, but still can't see private repos\n\nPer the GitHub API docs, I am requesting the repo scope which gives access to private repositories. \nThe user is presented with the following dialog, which also mentions private repos. They accept the application.\n\nDespite this, when using the oauth access token obtained when asking for 'repo' access, I can only see public repos when I GET https://api.github.com/users/someusername/repos. No private repos are shown.\nThe user account is my own, and I have not revoked access.\nHow can I see private repos using the GitHub API V3?"}, {"role": "assistant", "content": "From testing:\n\nGETing /users/someusername/repos doesn't show private repos (even if it's the user whose oauth access token you're using).\nGETing /user/repos show private repos.\n\nThis isn't documented in the GitHub API docs at present, I just found out via testing.\nThanks to @ivanzuzak for suggesting to look at the endpoint."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to unsubscribe from all repos within an organisation\n\nAfter you join an Organization on Github you automatically subscribed to all of its repos and you start getting all those updates you don't really want. To unsubscribe you need to go per repo and do it manually. Is it possible to unsubscribe from all repos within a particular Organisation at once?"}, {"role": "assistant", "content": "You can unsubscribe from all repos or one by one under https://github.com/watching\nMaybe not exactly the best way but I find it useful. Hope it helps!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get branch name on GitHub action?\n\nDuring a GitHub action, I'd like to know the name of the branch:\n\nfor a push action: name of the current branch\nfor a pull_request action: name of the target branch\n\nI need a string like develop, master or feature/xxx (and not refs/pull/\u2026).\nThe ${{ github.ref }} var gives me refs/heads/develop. How can I get only the develop?"}, {"role": "assistant", "content": "Update: GitHub added the context variable ${{ github.ref_name }}, returning \"The branch or tag name that triggered the workflow run.\"\nOriginal Answer:\nYou can create a step output of the last part of GITHUB_REF like the following.\non: push\njobs:\n  example:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set output\n        id: vars\n        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}\n\n      - name: Check output\n        run: echo ${{ steps.vars.outputs.short_ref }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins giving error while cloning from gitHub\n\nI am new to Jenkins, I am getting following error while cloning repository from GitHub.\nI tried to search all relevant issues here but could find exact stacktstrace with answers.\nI am trying to clone repository which requires username and password, I am providing SSH:// repository-path in job configuration settings for my job. I have not done any .ssh related settings yet as this seems to be different problem than security issue with GIT repository. \nI couldn't figure out what comment Jenkins is trying to execute, which file/directory it is not finding clueless.\nHere is my exact stack trace from Jenkins job:\n\nCaused by: java.io.IOException: Cannot run program:  Error trying to\n  determine the git version: Error performing command:  --version\n      Assuming 1.6\n      ERROR: Error cloning remote repo 'myRE' : Could not clone [email\u00a0protected]:myORG/RVL.myProj.git\n      hudson.plugins.git.GitException: Could not clone [email\u00a0protected]:myORG/RVL.myProj.git\n        at hudson.plugins.git.GitAPI.clone(GitAPI.java:268)\n        at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:1122)\n        at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:1064)\n        at hudson.FilePath.act(FilePath.java:842)\n        at hudson.FilePath.act(FilePath.java:824)\n        at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1064)\n        at hudson.model.AbstractProject.checkout(AbstractProject.java:1256)\n        at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:589)\n        at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:88)\n        at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:494)\n        at hudson.model.Run.execute(Run.java:1502)\n        at hudson.maven.MavenModuleSetBuild.run(MavenModuleSetBuild.java:477)\n        at hudson.model.ResourceController.execute(ResourceController.java:88)\n        at hudson.model.Executor.run(Executor.java:236)\n      Caused by: hudson.plugins.git.GitException: Error performing command:  clone -o RVL.myProj [email\u00a0protected]:myORG/RVL.myProj.git\n  /var/lib/jenkins/jobs/myProj/workspace\n        at hudson.plugins.git.GitAPI.launchCommandIn(GitAPI.java:862)\n        at hudson.plugins.git.GitAPI.access$000(GitAPI.java:40)\n        at hudson.plugins.git.GitAPI$1.invoke(GitAPI.java:264)\n        at hudson.plugins.git.GitAPI$1.invoke(GitAPI.java:244)\n        at hudson.FilePath.act(FilePath.java:842)\n        at hudson.FilePath.act(FilePath.java:824)\n        at hudson.plugins.git.GitAPI.clone(GitAPI.java:244)\n        ... 13 more\n      Caused by: java.io.IOException: Cannot run program \"\": error=2, No such file or directory\n        at java.lang.ProcessBuilder.start(Unknown Source)\n        at hudson.Proc$LocalProc.(Proc.java:244)\n        at hudson.Proc$LocalProc.(Proc.java:216)\n        at hudson.Launcher$LocalLauncher.launch(Launcher.java:709)\n        at hudson.Launcher$ProcStarter.start(Launcher.java:338)\n        at hudson.Launcher$ProcStarter.join(Launcher.java:345)\n        at hudson.plugins.git.GitAPI.launchCommandIn(GitAPI.java:843)\n        ... 19 more\n      Caused by: java.io.IOException: error=2, No such file or directory\n        at java.lang.UNIXProcess.forkAndExec(Native Method)\n        at java.lang.UNIXProcess.(Unknown Source)\n        at java.lang.Pro"}, {"role": "assistant", "content": "I encountered and fixed the same problem :)\nThere are two way to configure the path of git:\n\nOn Jenkins Master\na. Enter Jenkins System Configure (Jenkins -> Manage Jenkins -> Configure System )\nb. Find the Git item and Configure the git installation (specify the git path on Jenkins Master)\nOn Jenkins Slave\na. Enter Jenkins Slave's Configure\nb. Check the \"Tool Locations\" Checkbox and specify the path of git on the Jenkins Slave.\n\nIn my situation, I don't have the privilege to access the Jenkins Master. So I install the git on the Jenkins Slave and add it to Jenkins Slave's Configure."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Python / pip, how do I install a specific version of a git repository from github (what is the correct url)?\n\nI want to install Django 1.7 via pip. It is currently a development version, so not in pips repositories. \nSo I have installed packages from github before using:\npip install git+[url here]\n\nNow looking at github, I get the clone url on the django page:\nhttps://github.com/django/django.git\n\nBut this mentions nothing of the branch. How do I specify that I want version 1.7? \nIs it somewhere obvious on the github page?"}, {"role": "assistant", "content": "Specify the branch, commit hash, or tag name after an @ at the end of the url:\npip install git+https://github.com/django/[email\u00a0protected]\n\nThis will install the version tagged with 1.7b3.\nReference: https://pip.pypa.io/en/latest/cli/pip_install/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get my own GitHub events payload json for testing GitHub Actions locally?\n\nI use GitHub Actions and want to test it locally.\nI'm using this tool and it works fine.\nhttps://github.com/nektos/act\nI can provide a event.json for local testing, but it's really hard to create a real event payload.\nIs there any way to get real event payload?\nFor example, I create pull request on my repository from the console, and get that event payload json."}, {"role": "assistant", "content": "To get event data, you can use a GitHub action to print the event to the log.\n# change this to the event type you want to get the data for\non:\n  pull_request:\n    types: [opened, closed, reopened]\n\njobs:\n  printJob:    \n    name: Print event\n    runs-on: ubuntu-latest\n    steps:\n    - name: Dump GitHub context\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: |\n        echo \"$GITHUB_CONTEXT\"\n\nAlternatively, you can find example event data in the documentation:\nhttps://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#webhook-payload-example-30"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merging Issues with Git\n\nI am using git version 1.7.11.msysgit.0\nI created a repository under GitHUB and added a file called as README.md with some text content .\nLater on , I have installed GIT Client , did a clone to get the server contents on to my machine .\nThen I deleted the file README.md on to my local machine .\nNow when I do git commit , I get this error \npraveenk@MSIN-BT-100 /d/workspace/MYTestRepo (master|MERGING)\n$ git commit ;\nU       README.md\nerror: 'commit' is not possible because you have unmerged files.\nhint: Fix them up in the work tree,\nhint: and then use 'git add/rm <file>' as\nhint: appropriate to mark resolution and make a commit,\nhint: or use 'git commit -a'.\nfatal: Exiting because of an unresolved conflict.\n\nThis is with git pull:\n$ git pull;\nU       README.md\nA       One.txt\nPull is not possible because you have unmerged files.\nPlease, fix them up in the work tree, and then use 'git add/rm <file>'\nas appropriate to mark resolution, or use 'git commit -a'.\n\nHow to resolve these errors ?"}, {"role": "assistant", "content": "Do this:\ngit merge --abort\ngit pull (to be sure you're up-to-date)\n\nNow replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.md\nThen if you replaced the contents, commit and push those contents with:\ngit add README.md\ngit commit -m \"comment\"\ngit push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add binary distribution to github's download link\n\nGithub has this download link on the repositories. How can I add binary distributions to this list?\nI cannot find any info on help.github, so a link to some documentation would be helpful."}, {"role": "assistant", "content": "On Dec 11, 2012 \"Upload Releases\" functionality aka \"Downloads\" was deprecated.\nhttps://github.com/blog/1302-goodbye-uploads\nUpdate: On July 2, 2013 GitHub team announced a new \"Releases\" feature as a replacement for \"Downloads\"\nhttps://github.com/blog/1547-release-your-software"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding private git repo via cPanel\n\nI'm trying to add a private git repo onto cPanel but have ran into permission issues and not sure where I'm going wrong\nI have generated the SSH keys in cPanel at the 'SSH Access' section. I then added the key onto the private repo in git at the 'Deploy keys' section.\nBut when I try to clone the repo on cPanel I get the error:\n\nError: \u201c/usr/local/cpanel/3rdparty/bin/git\u201d reported error code \u201c128\u201d\n  when it ended: Permission denied (publickey). fatal: Could not read\n  from remote repository. Please make sure you have the correct access\n  rights and the repository exists.\n\nI'm trying to clone with SSH [email\u00a0protected]:myusername/myrepo.git\nHave I done something wrong or missed a step?"}, {"role": "assistant", "content": "CLONE GITHUB REPOSITORY TO CPANEL STEPS\nsteps 1. Cpanel -> SSH Access -> Generate New Key(without enter pasword)->after generated key go to under public key-> manage-> authorize (make authoize) -> back, now view/download-> copy key\nStep 2.  Go Github-> https://github.com// -> Settings(repository setting) ->Deploy Keys (rights side)-> add deploy key (give title,and add key)-> done\nStep 3. Go to Cpanel ->  Git\u2122 Version Control -> clone url : [email\u00a0protected]:/<private_repository_name>.git\n [email\u00a0protected]:<user_name>/<repository_name>.git\n\n-> give_repository_path \n-> give_ repository_name\n-> create\nStep 4. manage repository from list-> Manage  -> pull or deploy from Github -> Click on Update from Remote: works perfectly(any files edit or delete you fetch/pull from GitHub now)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do a pull request in GitHub with only the latest commit in the master branch of my forked repository\n\nI forked a repository on github. I made some changes and did a pull request.\nNow I made some other changes and want to do a new pull request, but on the preview screen before doing the pull request it shows the old commits too (the ones that were already accepted).\nHow do I select only the latest commit in the master branch of my forked repository so that I can do a pull request with only that commit?"}, {"role": "assistant", "content": "This answer from a coworker fixed my problem:\ngit checkout -b NEW_BRANCH_NAME LAST_COMMIT_NAME_BEFORE_THE_ONE_WANTED\ngit cherry-pick COMMIT_NAME_WANTED\ngit push origin NEW_BRANCH_NAME\n\nThen on GitHub you can do a pull request for the new branch you created.\nUPDATE\nI asked and answered this question when I first started working with git. Now that I know more about it, I'd like to expand this answer.\nWhen working with a fork you probably want to keep it updated with respect to the original repo. So these would be the steps I would follow today:\ngit remote add upstream GIT_URL_OF_THE_ORIGINAL_REPO\n\nNow you have a reference called upstream which points to that repo. By default you should also have another one called origin which would point to your fork in this case. upstream and origin is just how people usually name these references, but you can use whatever name you want.\nNow you need to get the latest changes:\ngit fetch upstream\n\nThen if you want to update your fork with changes from upstream you'd do this:\ngit checkout master //checkout your master branch\ngit merge upstream/master //merge changes from the master branch in upstream into the branch you checked out (master)\ngit push origin master //if you want to push your updated master to your remote fork\n\nNow, to answer the original question, what I would do today if I wanted to submit a new PR, would be:\ngit fetch upstream //get the latest changes from the original repo\ngit checkout -b my_new_feature upstream/master //create a new branch, starting from the master in the original repo\ngit cherry-pick WHATEVER_COMMIT_I_WANT //select the commit I want and add it to this new branch\ngit push origin my_new_feature //push a new branch to my fork\n\nThen I would request a new PR for the my_new_feature branch.\nYou can replace git cherry-pick WHATEVER_COMMIT_I_WANT with just modifying/adding a file and then doing git add FILENAME, git commit -m \"Fixing some stuff\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "x509: certificate signed by unknown authority - both with docker and with github\n\ndocker build -t oreng/iojs .\nINFO[0000] Get https://index.docker.io/v1/repositories/library/iojs/images: x509: certificate signed by unknown authority. \n\nmy Dockerfile is\nFROM iojs:latest\nRUN useradd -ms /bin/bash developer\nWORKDIR /home/developer\nUSER developer\n\nAlso hub create (using https://github.com/github/hub)\nPost https://api.github.com/user/repos: x509: certificate signed by unknown authority"}, {"role": "assistant", "content": "As mentioned in crypto/x509/root_unix.go, Go (which is what Docker uses) will check CA certificates in\n\"/etc/ssl/certs/ca-certificates.crt\",     // Debian/Ubuntu/Gentoo etc.\n\"/etc/pki/tls/certs/ca-bundle.crt\",       // Fedora/RHEL\n\"/etc/ssl/ca-bundle.pem\",                 // OpenSUSE\n\"/etc/ssl/cert.pem\",                      // OpenBSD\n\"/usr/local/share/certs/ca-root-nss.crt\", // FreeBSD/DragonFly\n\"/etc/pki/tls/cacert.pem\",                // OpenELEC\n\"/etc/certs/ca-certificates.crt\",         // Solaris 11.2+\n\nMake sure those files are available and not corrupted.\nThere can be also sporadic issue with the CDN, as in this comment:\n\nbecause now it works :+1: . It must be a amazon edge isssue \n\nThe last thread also includes the following check:\n\nThe user reporting the issue either has non of those files or those files don't include the rapidssl cert.\n  We could ask them to send us those files and check if the certificate is included.\n  The user may also try this:\n\nopenssl s_client -showcerts -verify 32 -connect index.docker.io:443\n\n\nIf that fails, the certificates are missing.\n\nRegarding GitHub, be aware it is under a massive DDoS attack at the moment, which could have other side-effects beside the certificate issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do I need authentication as well as signing keys on Github?\n\nGithub allows users to add SSH keys in order to access the repositories but it doesn't do a great job of explaining what the difference is between an \"Authentication Key\" and a \"Signing Key\" Specific questions I would like to know are:\n\nDo I need both Types of keys in order to access the repository?\n\nIf I only add one key and that key is a \"Singing Key\" will that also allow me to simply check out the code?  in other words does a Signing Key also do authentication?\n\nIf I would like to do both Authentication and Signing, do those keys have to be different from one another or can I use the exact same key for both.\n\nIf those keys have to be different from one another, how do I configure Git on my server to send both keys, as I presume that would be necessary right?"}, {"role": "assistant", "content": "The difference between signing keys and authentication keys is that signing keys can be used to sign Git commits and authentication keys can be used to access repositories.  If you add a key as only one type, then it can be used only for that purpose, but the same key may be added for both.\nIf you just want to access repositories, then all you need is an authentication key.  If you want to use an SSH key to verify that your commits have not been modified or tampered with and that they did indeed come from you (and not someone who forged your name and email in commits), then you'd want a signing key (plus a recent version of Git).\nThe reason they're different sets is that they have different security models and so it makes sense to allow people to set different keys for different purposes if they so choose.  This is also in line with best practices for cryptographic key management."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I update a forked project, on git, to the original/master copy?\n\nA few weeks ago i forked a public project on GitHub. Today, I wish to try some stuff on it BUT i want to make sure the copy I use is the most recent.\nCan I update my fork, first? \nAnd what happens if there's changes to the fork AFTER i've started my changes. Can i update my fork again, while leaving my changes in there (ie. merge, if needs be?)"}, {"role": "assistant", "content": "Yeah you can pull the changes from the original repo into your fork. Add a remote to it ( since origin will be your fork ) and pull.\nThis from GitHub help:\nFirst up, add a remote to the original repo. \nHelp here: http://help.github.com/remotes/\nThen you can pull in updates to the original repo. Quote from http://help.github.com/fork-a-repo/\n\nPull in upstream changes \nIf the original repo you forked your project from gets updated, you\n  can add those updates to your fork by running the following code:\n$ git fetch upstream\n$ git merge upstream/master\n\nAll these are for doing from command line. \nBelow are instructions for TortoiseGit:\nRight click over your project -> TortoiseGit -> Settings -> Remote. \nAdd the remote details here:\n\nNow, right-click -> TortoiseGit -> Pull.\nYou will be presented with a dialog to choose the remote ( you should be able to see the remote you added in previous step). Choose it and pull."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: unable to update url base from redirection\n\n$ git remote set-url origin https://[email\u00a0protected]/home/demodev/public_html/waqtpar.git`\n\n$ git push -u origin master`\n\n\nfatal: unable to update url base from redirection:   asked for: https://[email\u00a0protected]:/home/demodev/public_html/waqtpar.git/info/refs?service=git-receive-pack    redirect: https://[email\u00a0protected]:/404.html`"}, {"role": "assistant", "content": "You may be using browser url instead of git repository clone url.\nThe url has to end with .git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-upload-pack not found\n\nI'm trying to clone an existing github-repository (Git for Windows) to an empty folder using\ngit clone https://github.com/di98jgu/D0016E---Digitalt-projekt.git\n\nbut keep getting the error message:\n\nfatal: https://github.com/di98jgu/D0016E---Digitalt-projekt.git/info/refs?service=git-upload-pack not found: did you run git update-server-info on the server?\n\nThe server is working fine (others are using it). Have tried adding the paths of git-upload-pack and git-receive-pack to gitconfig, \n[remote \"origin\"] \nurl = https://github.com/di98jgu/D0016E--Digital-projekt.git \nfetch = +refs/heads/*:refs/remotes/origin/* \nuploadpack = libexec/git-core/git-upload-pack\nreceivepack = libexec/git-core/git-receive-pack\n\nbut it didn't help. Seems like a lot of people are having problems causing a similar, but not exactly the same, error message git-upload-pack command not found, but don't think these solutions apply to my situation.\nAnyone know how to solve this?"}, {"role": "assistant", "content": "I just come across this issue right now, it is caused by permissions, please make sure that you current account has the permissions of git pull and git push\uff0cin your case , maybe you create a private repository in Github, and not add this account as Manage Collaborators, then the issue come.\nCertainly you also should check if the remote URL is completely correct, include case insensitive, https or http."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to release a build artifact asset on GitHub with a script?\n\nI am trying to figure out a one-command process for generating a build on GitHub.\nWhat I anticipate doing is running some sort of command- make release, say, and the make release script builds up the release artifact and then uploads it to GitHub in some fashion.\nHowever, I'm fairly confused about how to actually get a release artifact on GitHub. Source code is awesome, but not everyone wants to do their own builds. :-)"}, {"role": "assistant", "content": "Update 2022: The official GitHub CLI comes with gh release upload\n\nUpload asset files to a GitHub Release.\n\nYou can create the release first with gh release create\nUpload all tarballs in a directory as release assets\n$ gh release create v1.2.3 ./dist/*.tgz\n\nUpload a release asset with a display label\n$ gh release create v1.2.3 '/path/to/asset.zip#My display label'\n\n\nUpdate September 2013, you can automate a release (API in preview mode)\nUpdate January 2014, there's an unofficial command-line app, called github-release by Nicolas Hillegeer (aktau), for creating releases and uploading (binary) artifacts.\nIt uses the new github releases API mentioned above. Look at the Makefile of the project to see how to automate it more still.\nExample:\n# create a formal release\n$ github-release release \\\n    --user aktau \\\n    --repo gofinance \\\n    --tag v0.1.0 \\\n    --name \"the wolf of source street\" \\\n    --description \"Not a movie, contrary to popular opinion. Still, my first release!\" \\\n    --pre-release\n\n\n\nThis API is a little different due to the binary assets. We use the Accept header for content negotation when requesting a release asset.\nPass a standard API media type to get the API representation:\n\n$ curl -i -H \"Authorization: token TOKEN\" \\\n     -H \"Accept: application/vnd.github.manifold-preview\" \\\n     \"https://uploads.github.com/repos/hubot/singularity/releases/assets/123\"\n\nHTTP/1.1 200 OK\n\n{\n  \"id\": 123,\n...\n}\n\n\nPass \u201capplication/octet-stream\u201d to download the binary content.\n\n$ curl -i -H \"Authorization: token TOKEN\" \\\n     -H \"Accept: application/octet-stream\" \\\n     \"https://uploads.github.com/repos/hubot/singularity/releases/assets/123\"\n\nHTTP/1.1 302 Found\n\n\nUploads are handled by a single request to a companion \u201cuploads.github.com\u201d service.\n\n$ curl -H \"Authorization: token TOKEN\" \\\n     -H \"Accept: application/vnd.github.manifold-preview\" \\\n     -H \"Content-Type: application/zip\" \\\n     --data-binary @build/mac/package.zip \\\n     \"https://uploads.github.com/repos/hubot/singularity/releases/123/assets?name=1.0.0-mac.zip\"\n\n\nUpdate 2d July 2013, you now can define a release.\n\n\nReleases are accompanied by release notes and links to download the software or source code.\nFollowing the conventions of many Git projects, releases are tied to Git tags. You can use an existing tag, or let releases create the tag when it's published.\nYou can also attach binary assets (such as compiled executables, minified scripts, documentation) to a release. Once published, the release details and assets are available to anyone that can view the repository.\n\nThis is what replaces the old binary upload service, which was removed in December 2012!\n\n\nthe make release script builds up the release artifact and then uploads it to github in some fashion.\n\nThat would mean adding it (\"it\" being the delivery made of one or several files, generally including binaries) to a regular local repo, and then pushing that repo to its matching GitHub repo.\nThat being said, the reason GitHub isn't mention in any \"release\" task is because Git is a source control management system, and is ill-suited for binaries.\nIt can have those files (binaries) of course, but isn't made to have them regularly, because of the bloated size of the repo after a while: each cloning would take longer and longer.\nSee What are the Git limits, and also \"git - should source files and repository be on the same machine ?\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why put the _site-directory of a Jekyll site in .gitignore?\n\nThe documentation of Jekyll tells me, that the _site-directory of a Jekyll site contains the compiled version of the site I have created after running \nJekyll build\n\nSeveral articles recommend, that I include the _site-directory in my .gitignore-file because \"it just contains the compiled version of my site\". (that's what some articles recommend. So, I am not sure if I don't understand some concept of Jekyll or some concept of Git.\nIf the _site-directory contains the compiled version of a site, shouldn't that be the thing that is on the server the provides the final website? I do understand why you put source code on github and what to do with it, but in the case of github pages, Github is not a versioning system but a file hosting system and the file hosting system should host compiled versions of my work to provide it via MyUsername.github.io to users, right?\nMy question is: shouldn't it be only the _site-directory of my Jekyll website that I deploy to Github because that should be the compiled source code that github provides to users? So, shouldn't I put anything else in the .gitignore-file EXCEPT the _site-directory?\nIf I got this all wrong: what is the point in compiling my website via\nJekyll build\n\nif I don't use the compiled source code for anything?"}, {"role": "assistant", "content": "Two solutions :\nYou don't use Jekyll plugins (or only those supported by github pages)\nYou build your site only if you need to test it locally (jekyll build or jekyll serve). The generated code (in _site) will not be versioned as github pages will generate pages from the sources.\n\nPut _site to .gitignore\nPush you sources to github pages\n\nYou use Jekyll plugins\nIn this case, you need to build locally because Github pages cannot do the job with plugins.\n\nJekyll build locally\nPut _site to .gitignore\ncommit your sources in one branch\ncommit your _site in another branch\n\nSee this post for more explanations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I fork another persons repo twice into my own account?\n\nOn GitHub, I can't seem to figure out how I can fork a repo twice into one account.\nSo there is a repo from Bob/CoolFramework\nI fork it to Jeremy/MyShooter and start to build a game\nNow I also want to fork it to Jeremy/MyRPG to build another new game\nWhen I try to fork CoolFramework a second time, it just takes me to MyShooter.\nSo the options I can think of:\nA) I'm not using Git in the right way\nB) It's not possible on Git\nC) I just couldn't see the option on Github"}, {"role": "assistant", "content": "In your case, I would suggest going with submodules. However to answer your exact question, here's how you should proceed.\n\nStart by creating Jeremy/MyShooter and Jeremy/MyRPG on Github. Keep them empty.\nClone your origin project on your system, twice, giving it different names\n$ git clone http://github.com/Bob/CoolFramework MyShooter\n$ git clone http://github.com/Bob/CoolFramework MyRPG\n\nYou now have 2 different local repos pointing to the same origin. You should remove the origin and point to yours as a remote:\n$ cd MyShooter\n$ git remote remove origin\n$ git remote add origin http://github.com/Jeremy/MyShooter.git\n$ git push -u origin master\n\nDon't forget to do the same for MyRPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I create a github repository named the same as one that existed but was deleted?\n\nThrough the github web interface I created a new repository. I forgot to chose some options at creation time and thought I'd delete the new, empty repository and start again.\nI deleted the repository but now cannot create a new repository with the same name as one that was deleted. I get a 'Name already exists on this account' error when I try.\nI don't know if this is a permanent matter (i.e. I can never create a new repository named the same as one that has been deleted) or just a temporary matter perhaps due to some information being cached which will later be cleared.\nCan I create a github repository named the same as one that existed but was deleted?"}, {"role": "assistant", "content": "You certainly should be able to create a new one with the same name. I'm fairly sure I've done this before.\nI'd leave it for 5/10 minutes and try again if I were you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get specific github notifications like pull requests or assigned issues?\n\nGithub provides notifications via mail or web, based on watched repos. But is there a way to get more in detail? Like only watch a specific pull requet or assigned issue? I feel like i get spammed from comments on other pull requests that have nothing to do with me."}, {"role": "assistant", "content": "Update Nov. 2020: you now have \"Custom notification controls\"\n\nThis week we are giving you more control over the types of content that you are notified about on GitHub:\n\nWatching a repository can often be a double-edged sword.\nYou want to stay up to date with a project, but if you have a specific interest or role within the community, you have no choice but to subscribe to updates on everything.\nNo more.\nBeneath the watch button, you\u2019ll find that we have made a few changes: we\u2019ve made the language clearer so you know what you\u2019ll receive updates about, we\u2019ve made the interface more accessible and, we\u2019ve introduced a new custom category.\nWithin this, you can select the types of content you would like to be notified about.\nDo you focus on code review? Limit your notifications to pull requests.\nAre you a community manager? Select Discussions.\nAs new types of notifications are added, you\u2019ll find them in this menu.\nYou\u2019ll find these controls on all repository pages and on your watching page where you can customize notifications for repositories you already watch.\n\n\nUpdate May 2019: you now have \"Custom thread subscriptions\"\n\nYou can now limit the types of notifications you receive for any issue and pull request to be specific to merge, reopened and/or closed events.\n\n\nThat should allow to further control the amount of emails received.\n\nUpdate July 2017: you now can declare in the GitHub repo a code owner.\nAny pull request touching a file managed by said code owner will trigger a notification to that person.\nSee \"Repo owner automatic notification after updating a pull request\"\n\n2015: Yes, for instance, for a specific issue on a project (issue 2595), you can register by clicking the \"Subscribe\" button at the right side of the page (since 2015).\nOnce clicked, it will appear as \"Unsubscribe\" (for you to click if you don't want any more notifications)\n\nSo you don't have to watch the all repo, you can subscribe only to specific issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do GitHub raw urls expire?\n\nDo GitHub raw urls for private repositories expire?  I'm referring to the link generated when you click the Raw button while viewing a file on github.com.\nThe link includes a token but there's no info about where that token comes from."}, {"role": "assistant", "content": "No one has clearly mentioned this, but the github raw urls expire in 7 days.\nYou can use longer lasting personal access tokens generated here: https://github.com/settings/tokens but those can only be used via curl:\ncurl -H 'Authorization: token <personal_token>' <raw_url>\n\nNote that the personal access tokens expire if unused for an entire year."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Compare old and new versions of force-pushed GitHub pull request\n\nFrequently, my colleagues will make some changes to an open pull request, rebase their local branch against the base branch - often squashing their changes into previous commits as well - and force-push.\nHow can I see what changed between the old version of the PR and the new version of the PR?\nI guess I could do a git pull and git checkout $BRANCH_NAME when the PR was first raised, then git fetch and then git diff $BRANCH_NAME..origin/$BRANCH_NAME after the PR was updated - but that will also show changes that have been introduced into the base branch (typically master) and brought into the PR via a rebase. Is it possible to remove that noise and just show what has changed in the PR itself?"}, {"role": "assistant", "content": "the old version of the PR\n\nYou can do so directly on GitHub: see \"Find committer of a force push on GitHub\"\n\nClicking the \u201cforce-pushed\u201d link will show a two dot comparison between the two commits.\n\n\nOriginal answer: 2016\nThat would be only available in the reflog of the remote repo, which would include the previous HEAD of the branch force-pushed.\nSince the remote repo is a GitHub one, you still can infer the old commit by looking at push events: see \"Does github remember commit IDs?\".\n\nhat will also show changes that have been introduced into the base branch (typically master) \n\nMore exactly, you will always have the differences against a common ancestor (which will include commits from the base branch like master)\nSee What are the differences between double-dot \"..\" and triple-dot \"...\" in Git diff commit ranges?\n\nSo in your case, your forced-pushed branch looks like this on the remote repo:\n      x--x--x        (old branch in reflog)\n     /\n m--M0--M--M   (master)\n            \\\n             X--X--X (new branch forced push)\n\nA diff old_HEAD..newHEAD would include the few M commits from the base branch, as they are part of the common ancestor (M0) path.\nSo you can compare a force-pushed branch (providing you are monitoring pushEvents and know of the previous HEAD of that branch).\nBut uou cannot easily compare two branches without their common ancestor path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to handle your first Pull Request on GitHub?\n\nI'm relatively new to Git. My knowledge thus far includes git add push commit. That's about it, and until now it served me well enough. :)\nHowever this morning someone sent me a pull request, which as I've read means someone forked my repository, made some tweaks and is flagging me saying, \"Hey Sergio, I made some improvement. Consider them for the master branch.\"\nAm I correct?\nhttps://github.com/sergiotapia/CherryTomato/pulls\nIf so, how do I easily merge this users changes into the master branch of the repository? What commands do I need to fire? More importantly, can someone explain the process in layman terms to what has to happen?"}, {"role": "assistant", "content": "You have the right idea. if that set of changes looks useful to you then you probably want to merge it into your repository.\nGithub offers a nice guide to responding to pull requests: https://help.github.com/articles/using-pull-requests \u2013 I'd start with that and see if you have any more specific questions about the process."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Atom/RSS feeds on Github Issues?\n\nI've been using Google Code and basically everything has an individual RSS feed there.  Now I'm trying to migrate over to Github and find the equivalent.  I've found the URL for all commits https://github.com/ORG/PROJECT/commits/master.atom but now I'd like to get some other RSS feeds, most importantly the recent updates to issues - does any such feed exist?  \nAre there other RSS feeds for projects that can be accessed (Ex: Changes to the wiki)?\nIs there a way to make the private feeds public?"}, {"role": "assistant", "content": "I just solved this issue for one of my repos and imported GitHub feed items into my drupal site.\nI had originally created a feed of only commits using the URL convention:\nhttps://github.com/ORG/PROJECT/commits/master.atom \n\nbut I also wanted a feed of GitHub-Issues and updates to Issues.\nGitHub appears to now support an \"everything\" feed with the following convention:\nhttps://github.com/username.private.actor.atom?token=somehextoken\n\nWhere somehextoken is replaced with a token relevant to your account. \nYou can get his feed+token URL automatically from GitHub using the following steps:\n\nLogin to your GitHub account \nGo to the following page:\nhttps://github.com/dashboard/ (updated 2013-09)\nClick on the News Feed button with feed-icon in the top right of the page.\nThis will take you to a feed XML page. Copy the URL form your browser and paste where needed.\nFilter the feed to your needs. The feed itself appears to include Issues updates and other details from all of the repos connected to your account. In my case, I just used a standard text filter to grab just the feed elements with MyAcct/MyRepo1 in their title.\n\nNote that this question is related to a similar question in the web-apps stack exchange site"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to set default fork for pull requests?\n\nI have a set of documentation for my company's API, based on the excellent Slate framework from TripIt. Per instructions, I forked their repo and proceeded to customize it. That fork lives here.\nThe obnoxious thing is that when contributors in my organization do a new pull request, the \"base fork\" on the Github \"Comparing Changes\" screen defaults to TripIt's repository, not my fork. They've more than once sent pull requests to the wrong place. Telling people \"don't do that\" isn't a particularly reliable solution. How can I set the default for where PRs are based to my fork?"}, {"role": "assistant", "content": "GitHub keeps track of forks made through their interface and assumes pull requests will be for that original repository.  You need to tell GitHub that your copy is not a fork but rather a regular repository that just happens to have identical history.  Sadly, GitHub doesn't offer a good way to just uncheck the fork link.  I typically solve it this way:\n\nClone the repository, git pull, and ensure your local copy is completely up to date.\nDelete the repository on GitHub.\nCreate the repository on GitHub using the exact same name.  Ensure it's an empty repository (don't create a README or LICENSE file.)\ngit push all the content back into the repository.  (You may need to switch to each branch and push it, and you also may need to git push --tags.)\n\nFRAGILE: This approach will lose existing GitHub issues and pull request comments.  If you're using these heavily, this approach is probably a bad idea, and you should contact GitHub customer support to help you instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I do a wildcard (*) search on github.com?\n\nI want to search a repository for any files that end in *Test.java* but if I search for *Test.java* I just get files that contain that exact string.\nI can't find any information anywhere that suggests this is possible. Is this just due to limitations of indexing such an enormous amount of data?\nI'd like to find a way to search a repo for all classes ending in Test."}, {"role": "assistant", "content": "The easiest way to find a file in a repository is to use the file finder. You can activate it at any time when you are in repository view by pressing t. See this screenshot from the official annoucement:\n\nThe file finder will perform some fuzzy matching using the characters you input into the \"search box\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove Github's Wiki default sidebar\n\nSince a few weeks, Github wikis present a compulsory side bar to the right of wiki pages that take up some space for writing. Example:\n\nI could not find any button nor instructions on the net to remove this sidebar.\nIs there a command or instructions to get it removed somewhere?"}, {"role": "assistant", "content": "As of right now there is not a way to remove the sidebar. I would suggest you make a note to the developers of this issue and they may act upon it. Until then we will just have to deal with the stick sidebar."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to undelete a branch on github?\n\nIt seems that I delete a branch on github when I should not do it.\nWhat I did was as follow:\n1- I add a new .gitignore to my system \n2- I use \n git rm -r --cached .  \n git add .  \n git commit -m \".gitignore is now working\"  \n\nWhen I did this, I had one branch on my local system but the server had two branch.\nThen I pushed my branches to server and since I had not the second branch, the second branch was deleted on server.\nHow can I bring it back?\nI am using Github as remote server."}, {"role": "assistant", "content": "If you know the last commit message of the deleted branch you can do this:\ngit reflog\n\n# search for message\nfd0e4da HEAD@{14}: commit: This is the commit message I want\n\n# checkout revision\ngit checkout fd0e4da \n\nor\ngit checkout HEAD@{14}\n\n# create branch       \ngit branch my-recovered-branch\n\n# push branch\ngit push origin my-recovered-branch:my-recovered-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to publish to Github Pages from Travis CI?\n\nWe are compiling Doxygen docs on the travis-ci server and want to push them onto our gh-pages branch.\nHow do I handle the authorization for git push? Does someone have an example for using encrypted variables in travis-ci? Should I go for https authorization or for an SSH key?"}, {"role": "assistant", "content": "Step-by-step example with HTTPS API Token in environment variable\nOthers have mentioned it, but here goes a more detailed procedure.\n\nCreate a separate repository for the website (optional). This will reduce the likelihood that you overwrite your main repository, and will keep output files from polluting it.\nGet a Personal Access Token under https://github.com/settings/tokens\nOnly enable \"public_repo\" access for public repositories, \"repo\" for private.\nSave the token somewhere as you can only see it once.\nOn the Travis settings for the repository https://travis-ci.org/<me>/<myrepo>/settings create an environment variable:\nGITHUB_API_KEY=<token>\n\nand make sure to mark \"Display value in build log\" as \"Off\".\nThis is safe because only authorized pushes by you see such environment variables, so if a malicious user tries to make a pull request to get your string, the variable won't be there.\nJust make sure that you never, ever list your environment variables on your build!\nAdd the following to your .travis.yml:\nafter_success: |\n  if [ -n \"$GITHUB_API_KEY\" ]; then\n    cd \"$TRAVIS_BUILD_DIR\"\n    # This generates a `web` directory containing the website.\n    make web\n    cd web\n    git init\n    git checkout -b gh-pages\n    git add .\n    git -c user.name='travis' -c user.email='travis' commit -m init\n    # Make sure to make the output quiet, or else the API token will leak!\n    # This works because the API key can replace your password.\n    git push -f -q https://<me>:[email\u00a0protected]/<me>/<myrepo>-gh-pages gh-pages &>/dev/null\n    cd \"$TRAVIS_BUILD_DIR\"\n  fi\n\n\nAlternative travis encrypt method\nExplained in detail at: https://stackoverflow.com/a/33109519/895245\nEncrypt the string GITHUB_API_KEY=<key> with the travis gem, and add it to your .travis.yml:\nenv:\n  secure: <encrypted>\n\nThis has the advantage that it does not require using the Travis web interface, but does require using a Gem and some more copy pasting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to show a progressbar on Github Wiki?\n\nI want to show the progress of the current iteration of my project on Github Wiki. However I couldn't find a way to do this. \nI am looking for something similar to the Bootstrap progress bars without any interaction. Is there a simple way to do this?"}, {"role": "assistant", "content": "Use this link as an image:\nhttps://progress-bar.dev/<thepercentage>\nExample: ![50%](https://progress-bar.dev/50) \nIf you want to add a title like shields.io:\nhttps://progress-bar.dev/<thepercentage>?title=<title> \nMore documentation can be found here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git request-pull: how to create a (github) pull request on the command line?\n\nI've cloned a project, and pushed a branch with just a renamed readme file to README. I am trying to create a pull-request on the command line, just to try PR from here instead of a website.\n$ git request-pull origin/master origin readme:readme\nThe following changes since commit 51320a3a42f82ba83cd7919d24ac4aa5c4c99ac6:\n\n  first commit message\n\nare available in the git repository at:\n\n  [email\u00a0protected]:example/com:example.git readme\n\nfor you to fetch changes up to 891c05c5236341bcbe33ceddc415ae921ee42e44:\n\n  second commit message\n\n----------------------------------------------------------------\nSimone Gentili (1):\n      Fix\n\n readme.md => README.md | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename readme.md => README.md (100%)\n\ngithub shows no pull request and I don't see errors.\n\nis possibile to create a pull request directly from bash?\nis PR correct and can I view pull request list?"}, {"role": "assistant", "content": "Even though they are called exactly the same thing, a GitHub pull request and a 'git request-pull' are completely different.\nThe git request-pull is for generating a summary of pending changes to be sent to a mailing list. It has no integration by default with GitHub.\nThe GitHub Pull Requests is a fully featured function of GitHub only. It allows for merging and integration of code from a different branch/fork. You can resolve merge conflicts, do code reviews, or add additional comments to a GitHub pull request.\nUnfortunately the git command is named similarly to GitHub functionality which makes it sound like they should be doing the same thing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Importing private repo to other private repo Git\n\nI have a private repo on git that I would love to import in another private repo. When I try to import it, I log in with my account and then this message Your old project requires credentials for read-only access. We will only temporarily store them for importing.\ncontinue to pop up and I cannot import the repo. Someone could help?"}, {"role": "assistant", "content": "I had the same problem and was able to resolve it by using the Personal Access Token (token access to Private Repositories) instead of the password. Take a look at this from the github community which gives a bit more detail (the answer from hobojoe1848): https://github.community/t/import-repository-not-working/2044/4"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to I change the size of an image in Github/Markdown?\n\nI'm editing a Readme.md file in a Github repository and have inserted a picture (see https://github.com/khpeek/FMCW-radar). The picture takes up the full width but is rather grainy that way, and I would prefer to make it smaller. Is there any way to do that?\nP.S. I've tried the commands on\nHow to change image size Markdown?, but they don't seem to work."}, {"role": "assistant", "content": "You can change the size of an image in GitHub markdown by using the image link in an HTML img tag:\nFrom this:\n![image](https://user-images.githubusercontent.com/link-to-your-image.png)\n\nTo this:\n<img src=\"https://user-images.githubusercontent.com/link-to-your-image.png\" width=\"200\" />"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I get last commit from GitHub API\n\nWhich is the best way to get the latest commit information from a git repository using GitHub API (Rest API v3).\nOption 1: GET /repos/:owner/:repo/commits/master\nCan I assume that the object 'commit' of the response is the latest commit from branch master?\nOption 2: GET /repos/:owner/:repo/git/commits/5a2ff\nOr make two calls, one to get the sha by getting the HEAD ref from master and then get the commit information using the sha returned."}, {"role": "assistant", "content": "It depends on your definition of \"last\".\n\nfor a given branch (like master), GET /repos/:owner/:repo/commits/master is indeed the last (most recent) commit.\nBut you can also consider the last push event: that would represent the last and most recent commit done (on any branch), pushed by a user to this repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Echo Github Action Environment variables\n\nI'm trying to dive in the GitHub Action, and to understand the process I would like to echo some environment variables, such as ${{ github.repository }}, ${{ github.repository_owner }} or event secrets like ${{ secrets.GITHUB_TOKEN }}, etc. But then in the output I'm getting ***.\nIs there any way to force the output to show the actual values instead of the asterisks?\n\ndev.yml\n\nname: Dev\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - dev\n\nenv:\n  BUILD_TYPE: core\n  DEFAULT_PYTHON: 3.8\n\njobs:\n  any_name:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Any Name Bash Test Step\n        shell: bash\n        run: |\n          echo \"GH_REPO: $GH_REPO\"\n          echo \"GH_REPO_O: $GH_REPO_O\"\n          echo \"GH_T: $GH_T\"\n        env:\n          GH_REPO: ${{ github.repository }}\n          GH_REPO_O: ${{ github.repository_owner }}\n          GH_T: ${{ secrets.GITHUB_TOKEN }}\n\n\noutput\n\nRun echo \"GH_REPO: $GH_REPO\"\n  echo \"GH_REPO_O: $GH_REPO_O\"\n  echo \"GH_T: $GH_T\"\n  shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}\n  env:\n    BUILD_TYPE: core\n    DEFAULT_PYTHON: 3.8\n    GH_REPO: ***/core\n    GH_REPO_O: ***\n    GH_T: ***\nGH_REPO: ***/core\nGH_REPO_O: ***\nGH_T: ***"}, {"role": "assistant", "content": "name: This is an example\n\non: [pull_request]\n\njobs:\n  one:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dump GitHub context\n        env:\n          GITHUB_CONTEXT: ${{ toJson(github) }}\n        run: echo \"$GITHUB_CONTEXT\"\n      - name: Dump job context\n        env:\n          JOB_CONTEXT: ${{ toJson(job) }}\n        run: echo \"$JOB_CONTEXT\"\n      - name: Dump steps context\n        env:\n          STEPS_CONTEXT: ${{ toJson(steps) }}\n        run: echo \"$STEPS_CONTEXT\"\n      - name: Dump runner context\n        env:\n          RUNNER_CONTEXT: ${{ toJson(runner) }}\n        run: echo \"$RUNNER_CONTEXT\"\n      - name: Dump strategy context\n        env:\n          STRATEGY_CONTEXT: ${{ toJson(strategy) }}\n        run: echo \"$STRATEGY_CONTEXT\"\n      - name: Dump matrix context\n        env:\n          MATRIX_CONTEXT: ${{ toJson(matrix) }}\n        run: echo \"$MATRIX_CONTEXT\"\n\n      - name: Show default environment variables\n        run: |\n          echo \"The job_id is: $GITHUB_JOB\"   # reference the default environment variables\n          echo \"The id of this action is: $GITHUB_ACTION\"   # reference the default environment variables\n          echo \"The run id is: $GITHUB_RUN_ID\"\n          echo \"The GitHub Actor's username is: $GITHUB_ACTOR\"\n          echo \"GitHub SHA: $GITHUB_SHA\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Compare files before commit\n\nIs there a functionality in git where I could compare my local files to a git source control prior to committing changes?"}, {"role": "assistant", "content": "Of-course you can do.\n\nUsing git diffcommand without any arguments:\nwill compare each modified files in your file system against the files in the current checked-out branch (or) tag.  \nUsing git diff <tag(or)branch name>:\nwill compare each modified files in your file system against the files in the specified branch (or) tag.  \nUsing git diff <path/to/file_name (or) path/to/folder>:\nwill compare the specified file or files in the folder in your file system against the current checked-out branch (or) tag.  \nUsing git diff <tag1(or)branch1 name> <tag2(or)branch2 name>:\nwill compare all modified files between two branches / tags.\n\nThere are many options, you can pass to 'git diff' command to format your output. Here I've listed a few:\n\ngit diff --name-only : Show only names of changed files, not the contents.  \ngit diff --name-status : Show only names and status of changed files.\ngit diff --cached (or --staged) : compares only the files which are staged/indexed.\n\nfor more information: execute git diff --help in your git bash.\nFYI: git diff will generate output in command line. If you want to see the output in some visual tools, use git difftool.\nUsing git difftool: you can configure the git to use diff/merge tool to compare files. \nCheckout this link: use Winmerge inside of Git to file diff\nYou can pass all git diff arguments and options to git difftool as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to get the stash back after pulling\n\nYesterday I made some changes on the master branch but didn't commit them, today I tried to pull the master but it said I have to commit or stash my changes Please, commit your changes or stash them before you can merge.\n\nI stashed them git stash and then pulled from master git pull now I have done some changes in my code but figured out that should have done the stash and i had to commit the changes. Now what can I do to have \n1) the changes from stash back\n2) what I got from git pull\n3) and my current changes\nI found this post here but the person hadn't pulled from master, so I am not sure the answers there would work for me and cannot really risk it and try as it is on master."}, {"role": "assistant", "content": "Just use git stash pop or git stash apply. As long as the stashed changes do not conflict with what you pulled or edited, it will just work, if not you get some merge conflicts that you can resolve like when you do a merge or rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to switch to a new remote git repository\n\nI've recently cloned a repo to my local drive, but now I'm trying to push all changes to a complete new repo. However, git keeps telling me that permission is denied, and that's because it's trying to push to the originally-cloned repo.\nDETAILS:\nI originally cloned from https://github.com/taylonr/intro-to-protractor (i.e. based on a Pluralsight course at https://app.pluralsight.com/library/courses/protractor-introduction/table-of-contents ) .\nNow that I've completed the course, I'd like to push my finalized code up to my own git repo (which I just created on github): \nhttps://github.com/robertmazzo/intro-to-protractor\nWhen I use the following git command: \n\ngit remote add origin https://github.com/robertmazzo/intro-to-protractor.git\n\nit tells me remote origin already exists , which I guess is fine because I already created it on github.com.\nHowever, when I push my changes up I'm getting an exception.\n\ngit push origin master\n\nremote: Permission to taylonr/intro-to-protractor.git denied to robertmazzo.\nfatal: unable to access 'https://github.com/taylonr/intro-to-protractor.git/':\nThe requested URL returned error: 403\nSo I'm investigating how I can switch to my new repository, but this is exactly where my issue is. I cannot figure this part out."}, {"role": "assistant", "content": "To change your current origin to a new one, use:\ngit remote set-url origin <url>\n\nSource:\nhttps://help.github.com/articles/changing-a-remote-s-url/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub GraphQL equivalent of the contents API\n\nDoes GitHub's GraphQL API have an equivalent to the contents API?\nI can't seem to come up with a query that accepts repo owner, repo name and file path and returns the contents of the file. I'm guessing it has something to do with the tree object?\nhttps://developer.github.com/early-access/graphql/explorer/"}, {"role": "assistant", "content": "After some digging, found it:\nquery {\n  repository(name: \"repoName\", owner: \"repoOwner\") {\n    object(expression: \"branch:path/to/file\") {\n      ... on Blob {\n        text\n      }\n    }\n  }\n}\n\nThe argument passed to expression on the object field is actually a git revision expression suitable for rev-parse, so I guess you can have fun with it to do advanced querying.\nDocumentation:\n\nRepository object on GitHub API\nrev-parse"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Amend username for a pushed commit on Github\n\nI made a push to a newly forked git repo on Github but after committing i noticed that my username was incorrect. The username I pushed was \"Brock Woolf\" but it should have been brockwoolf which is my username on github.\nI already changed the default locally like this:\ngit config --global user.name \"brockwoolf\"\n\nBut how can I change the username on the already pushed change?"}, {"role": "assistant", "content": "The already pushed change, if people have pulled it, is something you'll have to live with. If no one's pulled it (i.e. you realize your mistake right after pushing), you can amend your commit:\ngit commit --amend\n\nMake sure you don't add any new changes to the commit - don't use -a, don't use git add first. Then you can force the push, since this is a non-fast-forward change:\ngit push -f\n\nIf anyone's already pulled the commit with the incorrect name... this probably won't actually mess them up, since merging it with something containing the original commit should be easy; the patches are the same. However, if that person ever pushed back to your repo, they'd push that merge - along with the original commit on one side of it. Kind of defeats the purpose of renaming yourself if you end up with both names in the repo. (This is exactly the problem I described in my comment on the OP's answer.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to wrap a Github README video link in a table cell?\n\nI would like to wrap a video link like this in a table cell in a README Markdown file. Is there any way to accomplish this?"}, {"role": "assistant", "content": "You can achieve that by using HTML tag <video>.\nExample:\n| Video 1  | Video 2 |\n| ------------- | ------------- |\n| <video src=\"https://user-images.githubusercontent.com/13440061/129455220-23fa27a2-c8f0-4953-b291-b4893959d5d9.mp4\">  | <video src=\"https://user-images.githubusercontent.com/13440061/129455220-23fa27a2-c8f0-4953-b291-b4893959d5d9.mp4\">|"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pulling changes from fork parent in Git\n\nHow do you pull changes from the parent of a fork in Git, specifically in a github configured project?\nFor example, say I forked http://github.com/originaluser/originalproject into http://github.com/myuser/myproject. I don't plan on myproject on being a permanent fork, as I only want to maintain a \"dev\" branch to test some experimental features, and then eventually merge it back into the original project.\nAs such, whenever commits are made to originalproject, I want to be able to pull them down and merge them with myproject. However, I also want to be able to push changes up into myproject, but not yet immediately create a pull request to get them merged into originalproject until my branch is complete and tested. What's the best way to do this?\nEdit: By default, when I create a local checkout/fork of my github fork for local development, and then push/pull changes up, these changes only effect my personal fork. I never get changes from the original project. How do I fix that?\nSorry for any incorrect git terminology."}, {"role": "assistant", "content": "Expanding on other answers, these are the steps I took on a fork I had of tsc-watch:\ngit remote add upstream https://github.com/gilamran/tsc-watch.git\ngit fetch upstream\ngit merge upstream/master\ngit push\n\nExplained:\n\nadding the remote server as upstream (alias)\nfetch all changes from  the upstream remote\nmerge changes from upstream/master branch into my current branch\npush all changes to GitHub"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push changes to branch?\n\nCan you explain me how to use git in case, when I have access to repository:\n\nHow to download repository\nHow to push changes in selected branch\nHow to select branch to push\n\nI tried these steps\ngit init\ngit clone git.repository\ngit pull develop  (where develop is branch)\ngit add .\ngit commit -m \"m\"\ngit push origin develop\n\nResult is:\n* branch            develop    -> FETCH_HEAD\nfatal: refusing to merge unrelated histories\n\nWhat I do wrong?"}, {"role": "assistant", "content": "3 Steps to Commit your changes\nSuppose you have created a new branch on GitHub with the name feature-branch.\n\nFETCH\n    git pull --all         Pull all remote branches\n    git branch -a          List all branches now\n\nCheckout and switch to the feature-branch directory. You can simply copy the branch name from the output of branch -a command above\n\ngit checkout -b feature-branch\n\nVALIDATE\nNext use the git branch command to see the current branch. It will show feature-branch with * In front of it\ngit branch   check current branch\ngit status   check the state of your codebase       \n\nCOMMIT\ngit add .   add all untracked files\ngit commit -m \"Rafactore code or use your message\"\n\nTake update and the push changes on the origin server \n git pull origin feature-branch\n git push origin feature-branch\n\nOR you can rebase with the master before commit\ngit fetch\ngit rebase origin/master\ngit push origin feature-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fork a branch and not the repository?\n\nHow can I fork a branch instead of a complete repository?\nI wish to copy only the branch https://github.com/COMSYS/contiki/tree/split-buffer and not the complete repository https://github.com/jenshiller/contiki. \nHow to fork a branch in Git? won't work in my case. I don't want to clone the branch."}, {"role": "assistant", "content": "In github (and in git's mental framework) you clone and fork repositories. \nThere's no way to fork a branch; that doesn't make sense. Just fork the project, and work off the branch you're interested in. You don't lose anything by doing so. \n\"Working off a branch\" usually means you \n\nclone a repository (e.g. git clone http://repository), then\ncheck out the branch you're interested in (git checkout awesome-branchname), \nand create a new branch based of that (git checkout -b new-even-more-awesome-branch-name)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to work with multiple ssh keys [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMultiple GitHub Accounts & SSH Config\n\n                                (15 answers)\n                            \n\nClosed 11 years ago.\n\n\n\nGitHub Users,\nI am newbie on github and have some issue with git setup.\nI have 2 account with different users on github and i have setup git on my system 2 times\n\nFirst /.ssh folder (as usual) (contain id_rsa which copied in first\n  account) Second /.ssh/new folder  (contain id_rsa which copied in\n  second account)\n\nnow at the time of push how can i switch between ssh key?\nBecause if i would like to push for second account it will use .ssh key instead of .ssh/new and gives me error.\nPlease make me correct if i am understood something wrong here.\nThanks."}, {"role": "assistant", "content": "(I've voted to close this as a possible duplicate, but I might as well add a similar answer anyway.)\nWhen using the SSH transport, GitHub identifies you as a user based on the SSH key that you use to authenticate.  So, you need to make sure that git is using one SSH key for one repository and another for the other.\nI'm going to assume that:\n\nYou have a GitHub account called user1, and you've added to that account the public key corresponding to your local private key /home/whoever/.ssh/id_rsa.  Let's say that the repository you're interested in accessing as user1 is user1/whatever on GitHub.\nYou have a second GitHub account called user2 and you've added to that account the public key corresponding to your local private key /home/whoever/.ssh/new/id_rsa.  Let's say that the repository you're interested in accessing as user2 is user2/whatever on GitHub.\n\nThe simplest way to do deal with this is to create a new \"remote\" (i.e. a nickname for a remote repository) for each repository, where the hostname is in each remote's URL is actually an alias that you've set up in ~/.ssh/config.  (If that config file doesn't exist, you'll have to create it.)\nFor example, one entry in the ~/.ssh/config file might look like:\nHost github-as-user1\n  HostName github.com\n  User git\n  IdentityFile /home/whoever/.ssh/id_rsa\n\nThen you can add a remote called gh-user1, say, with:\ngit remote add gh-user1 git@github-as-user1:user1/whatever.git\n\n... and then if you want to push your master branch to the repository user1/whatever on GitHub using the ~/.ssh/id_rsa key, you can just do:\ngit push gh-user1 master\n\nIn order to push as the other user (user2) to the second repository, you need to add a second alias to you ~/.ssh/config file.  For example:\nHost gh-as-user2\n  HostName github.com\n  User git\n  IdentityFile /home/whoever/.ssh/new/id_rsa\n\nThen to push to that second repository as the different user, you can just do:\ngit push gh-user2 master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move git repository to another github user\n\nThere are many answers on Google that point in the same direction, but when it comes to version control I don't want to try anything and then mess up my repository.\nI have set up a repository on GitHub and would like to move it to another user, so that I can close the repository. He would then invite me to the repo once it belongs to his account. I guess this is quite a common use case for working with clients - once you finished the project, you hand it over to them.\nNow, assuming this is possible, how would I change my local Git settings in the project so that I am now pushing to/pulling from the new location? And, by moving the repo, would I lose the commit history?"}, {"role": "assistant", "content": "Any of the following will work:\n\nJust transfer ownership of the repo to another user and have them add you as a collaborator.\nIf someone forks your repo, then you delete the original, their fork is still there, unless it's a private repository. they can then add you as a collaborator on their fork repo.\nAnother user can simply clone your repo (commits intact), create a new repo on GitHub, add the new repo's remote info, and push your repo up to their new one. (Then, they can add you as a collaborator.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see untracked files in git instead of untracked directory\n\ngit status shows directory (e.g smaller_fc) is untracked. \nHowever, I want to see exactly which files inside the directories (e.g smaller_fc) are untracked.\nI would like to know if .gitignore is indeed ignoring certain subdir inside smaller_fc dir.\nHere is terminal output.\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   .gitignore\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nnets/models/500K_iterations/500K_iteration_eval.txt\nnets/models/from_solverstate_150K/\nnets/models/pretrained_model/\nnets/models/smaller_fc/\n\n.gitignore file:\n.cproject\n.project\n.pydevproject\nbuild\n*~\n*.pyc\n*.caffemodel\n*/solverstate/*\n\ndirectory structure:\nroot\n-models\n--model1\n---solverstate\n----somefiles.txt\n--model2\n---solverstate\n----anotherfiles.txt\n.gitignore\n\nCould not find it on google."}, {"role": "assistant", "content": "If git only shows that the directory is untracked, then every file in it (including files in subdirectories) is untracked.\n\nIf you have some ignored files in the directory, pass the -u flag when running git status (i.e., git status -u) to show the status of individual untracked files."}]}

{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "NAME git - the stupid content tracker"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SYNOPSIS git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--config-env=<name>=<envvar>] <command> [<args>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial[7] to get started, then see giteveryday[7] for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli[7] manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -v  --version"}, {"role": "assistant", "content": "Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts\nthe same options as the git-version[1] command. If --help is\nalso given, it takes precedence over --version ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help[1] for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -C <path>"}, {"role": "assistant", "content": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path> .  If <path> is present but empty, e.g. -C \"\" , then the\ncurrent working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --html-path"}, {"role": "assistant", "content": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --info-path"}, {"role": "assistant", "content": "Print the path where the Info files documenting this\nversion of Git are installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -p  --paginate"}, {"role": "assistant", "content": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section\nbelow)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -P  --no-pager"}, {"role": "assistant", "content": "Do not pipe Git output into a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --git-dir=<path>"}, {"role": "assistant", "content": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config[1] for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces[7] for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-replace-objects"}, {"role": "assistant", "content": "Do not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-lazy-fetch"}, {"role": "assistant", "content": "Do not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --literal-pathspecs"}, {"role": "assistant", "content": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-optional-locks"}, {"role": "assistant", "content": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --list-cmds=<group>[,<group>…​]"}, {"role": "assistant", "content": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --attr-source=<tree-ish>"}, {"role": "assistant", "content": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes[5] . This is equivalent to setting the GIT_ATTR_SOURCE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-add[1]"}, {"role": "assistant", "content": "Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am[1]"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archive[1]"}, {"role": "assistant", "content": "Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect[1]"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch[1]"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle[1]"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout[1]"}, {"role": "assistant", "content": "Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick[1]"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool[1]"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean[1]"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone[1]"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit[1]"}, {"role": "assistant", "content": "Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe[1]"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff[1]"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch[1]"}, {"role": "assistant", "content": "Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch[1]"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc[1]"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep[1]"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gui[1]"}, {"role": "assistant", "content": "A portable graphical interface to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init[1]"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log[1]"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-maintenance[1]"}, {"role": "assistant", "content": "Run tasks to optimize Git repository data"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge[1]"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv[1]"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-notes[1]"}, {"role": "assistant", "content": "Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull[1]"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push[1]"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-range-diff[1]"}, {"role": "assistant", "content": "Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rebase[1]"}, {"role": "assistant", "content": "Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset[1]"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore[1]"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert[1]"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rm[1]"}, {"role": "assistant", "content": "Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog[1]"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show[1]"}, {"role": "assistant", "content": "Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout[1]"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash[1]"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status[1]"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule[1]"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch[1]"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-tag[1]"}, {"role": "assistant", "content": "Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree[1]"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk[1]"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar[1]"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config[1]"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-export[1]"}, {"role": "assistant", "content": "Git data exporter"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import[1]"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-filter-branch[1]"}, {"role": "assistant", "content": "Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool[1]"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-refs[1]"}, {"role": "assistant", "content": "Pack heads and tags for efficient repository access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune[1]"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog[1]"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote[1]"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-repack[1]"}, {"role": "assistant", "content": "Pack unpacked objects in a repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replace[1]"}, {"role": "assistant", "content": "Create, list, delete refs to replace objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate[1]"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame[1]"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport[1]"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-count-objects[1]"}, {"role": "assistant", "content": "Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diagnose[1]"}, {"role": "assistant", "content": "Generate a zip archive of diagnostic information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-difftool[1]"}, {"role": "assistant", "content": "Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fsck[1]"}, {"role": "assistant", "content": "Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help[1]"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-instaweb[1]"}, {"role": "assistant", "content": "Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-tree[1]"}, {"role": "assistant", "content": "Perform merge without touching index or working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere[1]"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch[1]"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-commit[1]"}, {"role": "assistant", "content": "Check the GPG signature of commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-tag[1]"}, {"role": "assistant", "content": "Check the GPG signature of tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-version[1]"}, {"role": "assistant", "content": "Display version information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-whatchanged[1]"}, {"role": "assistant", "content": "Show logs with differences each commit introduces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitweb[1]"}, {"role": "assistant", "content": "Git web interface (web frontend to Git repositories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archimport[1]"}, {"role": "assistant", "content": "Import a GNU Arch repository into Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit[1]"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsimport[1]"}, {"role": "assistant", "content": "Salvage your data out of another SCM people love to hate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver[1]"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send[1]"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-p4[1]"}, {"role": "assistant", "content": "Import from and submit to Perforce repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-quiltimport[1]"}, {"role": "assistant", "content": "Applies a quilt patchset onto the current branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull[1]"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-email[1]"}, {"role": "assistant", "content": "Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-svn[1]"}, {"role": "assistant", "content": "Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-apply[1]"}, {"role": "assistant", "content": "Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout-index[1]"}, {"role": "assistant", "content": "Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-graph[1]"}, {"role": "assistant", "content": "Write and verify Git commit-graph files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-tree[1]"}, {"role": "assistant", "content": "Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object[1]"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack[1]"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-file[1]"}, {"role": "assistant", "content": "Run a three-way file merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-index[1]"}, {"role": "assistant", "content": "Run a merge for files needing merging"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktag[1]"}, {"role": "assistant", "content": "Creates a tag object with extra validation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktree[1]"}, {"role": "assistant", "content": "Build a tree-object from ls-tree formatted text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-multi-pack-index[1]"}, {"role": "assistant", "content": "Write and verify multi-pack-indexes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects[1]"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune-packed[1]"}, {"role": "assistant", "content": "Remove extra objects that are already in pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-read-tree[1]"}, {"role": "assistant", "content": "Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay[1]"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref[1]"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-objects[1]"}, {"role": "assistant", "content": "Unpack objects from a packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index[1]"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-ref[1]"}, {"role": "assistant", "content": "Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree[1]"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file[1]"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry[1]"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-files[1]"}, {"role": "assistant", "content": "Compares files in the working tree and the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index[1]"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-tree[1]"}, {"role": "assistant", "content": "Compares the content and mode of blobs found via two tree objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-ref[1]"}, {"role": "assistant", "content": "Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-repo[1]"}, {"role": "assistant", "content": "Run a Git command on a list of repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id[1]"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files[1]"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-remote[1]"}, {"role": "assistant", "content": "List references in a remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree[1]"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-base[1]"}, {"role": "assistant", "content": "Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev[1]"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant[1]"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list[1]"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-parse[1]"}, {"role": "assistant", "content": "Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-index[1]"}, {"role": "assistant", "content": "Show packed archive index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-ref[1]"}, {"role": "assistant", "content": "List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-file[1]"}, {"role": "assistant", "content": "Creates a temporary file with a blob’s contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-var[1]"}, {"role": "assistant", "content": "Show a Git logical variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-pack[1]"}, {"role": "assistant", "content": "Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-daemon[1]"}, {"role": "assistant", "content": "A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch-pack[1]"}, {"role": "assistant", "content": "Receive missing objects from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-backend[1]"}, {"role": "assistant", "content": "Server side implementation of Git over HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-pack[1]"}, {"role": "assistant", "content": "Push objects over Git protocol to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-server-info[1]"}, {"role": "assistant", "content": "Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch[1]"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push[1]"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack[1]"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell[1]"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive[1]"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-pack[1]"}, {"role": "assistant", "content": "Send objects packed back to git-fetch-pack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-attr[1]"}, {"role": "assistant", "content": "Display gitattributes information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore[1]"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-mailmap[1]"}, {"role": "assistant", "content": "Show canonical names and email addresses of contacts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ref-format[1]"}, {"role": "assistant", "content": "Ensures that a reference name is well formed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-column[1]"}, {"role": "assistant", "content": "Display data in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential[1]"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache[1]"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-store[1]"}, {"role": "assistant", "content": "Helper to store credentials on disk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fmt-merge-msg[1]"}, {"role": "assistant", "content": "Produce a merge commit message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook[1]"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers[1]"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailinfo[1]"}, {"role": "assistant", "content": "Extracts patch and authorship from a single e-mail message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailsplit[1]"}, {"role": "assistant", "content": "Simple UNIX mbox splitter program"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file[1]"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-patch-id[1]"}, {"role": "assistant", "content": "Compute unique ID for a patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n[1]"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup[1]"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace[1]"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcore-tutorial[7]"}, {"role": "assistant", "content": "A Git core tutorial for developers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials[7]"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration[7]"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore[7]"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  giteveryday[7]"}, {"role": "assistant", "content": "A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq[7]"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitglossary[7]"}, {"role": "assistant", "content": "A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitnamespaces[7]"}, {"role": "assistant", "content": "Git namespaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers[7]"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitsubmodules[7]"}, {"role": "assistant", "content": "Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial[7]"}, {"role": "assistant", "content": "A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2[7]"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows[7]"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitattributes[5]"}, {"role": "assistant", "content": "Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli[7]"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  githooks[5]"}, {"role": "assistant", "content": "Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore[5]"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap[5]"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules[5]"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout[5]"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrevisions[7]"}, {"role": "assistant", "content": "Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle[5]"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-chunk[5]"}, {"role": "assistant", "content": "Chunk-based file formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph[5]"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-index[5]"}, {"role": "assistant", "content": "Git index format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack[5]"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature[5]"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities[5]"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-common[5]"}, {"role": "assistant", "content": "Things common to various protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-http[5]"}, {"role": "assistant", "content": "Git HTTP-based protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-pack[5]"}, {"role": "assistant", "content": "How packs are transferred over-the-wire"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-v2[5]"}, {"role": "assistant", "content": "Git Wire Protocol, Version 2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config[1] for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <object>"}, {"role": "assistant", "content": "Indicates the object name for any type of object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <blob>"}, {"role": "assistant", "content": "Indicates a blob object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree>"}, {"role": "assistant", "content": "Indicates a tree object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit>"}, {"role": "assistant", "content": "Indicates a commit object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit-ish>"}, {"role": "assistant", "content": "Indicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <file>"}, {"role": "assistant", "content": "Indicates a filename - almost always relative to the\nroot of the tree structure GIT_INDEX_FILE describes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  HEAD"}, {"role": "assistant", "content": "indicates the head of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tag>"}, {"role": "assistant", "content": "a valid tag name (i.e. a refs/tags/<tag> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <head>"}, {"role": "assistant", "content": "a valid head name (i.e. a refs/heads/<head> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "File/Directory Structure Please see the gitrepository-layout[5] document. Read githooks[5] for more details about each hook. Higher level SCMs may provide and manage additional information in the $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Terminology Please see gitglossary[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIR"}, {"role": "assistant", "content": "If the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_WORK_TREE"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nThis can also be controlled by the --work-tree command-line\noption and the core.worktree configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NAMESPACE"}, {"role": "assistant", "content": "Set the Git namespace; see gitnamespaces[7] for details.\nThe --namespace command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CEILING_DIRECTORIES"}, {"role": "assistant", "content": "This should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMON_DIR"}, {"role": "assistant", "content": "If this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout[5] and git-worktree[1] for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_REF_FORMAT"}, {"role": "assistant", "content": "If this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit[1] for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_NAME"}, {"role": "assistant", "content": "The human-readable name used in the committer identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_DATE"}, {"role": "assistant", "content": "The date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit[1] for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EXTERNAL_DIFF"}, {"role": "assistant", "content": "When the environment variable GIT_EXTERNAL_DIFF is set, the\nprogram named by it is called to generate diffs, and Git\ndoes not use its builtin diff machinery.\nFor a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters: path old-file old-hex old-mode new-file new-hex new-mode where:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-mode"}, {"role": "assistant", "content": "are the octal representation of the file modes. The file parameters can point at the user’s working file\n(e.g. new-file in \"git-diff-files\"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the\nindex). GIT_EXTERNAL_DIFF should not worry about unlinking the\ntemporary file — it is removed when GIT_EXTERNAL_DIFF exits. For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\nparameter, <path>. For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_TOTAL"}, {"role": "assistant", "content": "The total number of paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge[1]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides $EDITOR and $VISUAL .\nIt is used by several Git commands when, on interactive mode,\nan editor is to be launched. See also git-var[1] and the core.editor option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SEQUENCE_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase[1] and the sequence.editor option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH  GIT_SSH_COMMAND"}, {"role": "assistant", "content": "If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\nThe command-line parameters passed to the configured command are\ndetermined by the ssh variant.  See ssh.variant option in git-config[1] for details. $GIT_SSH_COMMAND takes precedence over $GIT_SSH , and is interpreted\nby the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded). Usually it is easier to configure any desired options through your\npersonal .ssh/config file.  Please consult your ssh documentation\nfor further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git’s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ATTR_SOURCE"}, {"role": "assistant", "content": "Sets the treeish that gitattributes will be read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ASKPASS"}, {"role": "assistant", "content": "If this environment variable is set, then Git commands which need to\nacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\nwill call this program with a suitable prompt as command-line argument\nand read the password from its STDOUT. See also the core.askPass option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TERMINAL_PROMPT"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, git will not prompt\non the terminal (e.g., when asking for HTTP authentication)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_FLUSH"}, {"role": "assistant", "content": "If this Boolean environment variable is set to true, then commands such\nas git blame (in incremental mode), git rev-list , git log , git check-attr and git check-ignore will\nforce a flush of the output stream after each record have been\nflushed. If this\nvariable is set to false, the output of these commands will be done\nusing completely buffered I/O.   If this environment variable is\nnot set, Git will choose buffered or record-oriented flushing\nbased on whether stdout appears to be redirected to a file or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_FSMONITOR"}, {"role": "assistant", "content": "Enables trace messages for the filesystem monitor extension.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACK_ACCESS"}, {"role": "assistant", "content": "Enables trace messages for all accesses to any packs. For each\naccess, the pack file name and an offset in the pack is\nrecorded. This may be helpful for troubleshooting some\npack-related performance problems.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKET"}, {"role": "assistant", "content": "Enables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKFILE"}, {"role": "assistant", "content": "Enables tracing of packfiles sent or received by a\ngiven program. Unlike other trace output, this trace is\nverbatim: no headers, and no quoting of binary data. You almost\ncertainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack ) rather than displaying it on\nthe terminal or mixing it with other trace output. Note that this is currently only implemented for the client side\nof clones and fetches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PERFORMANCE"}, {"role": "assistant", "content": "Enables performance related trace messages, e.g. total execution\ntime of each Git command.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SETUP"}, {"role": "assistant", "content": "Enables trace messages printing the .git, working tree and current\nworking directory after Git has completed its setup phase.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SHALLOW"}, {"role": "assistant", "content": "Enables trace messages that can help debugging fetching /\ncloning of shallow repositories.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2"}, {"role": "assistant", "content": "Enables more detailed trace messages from the \"trace2\" library.\nOutput from GIT_TRACE2 is a simple text-based format for human\nreadability. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions). In addition, if the variable is set to af_unix:[<socket-type>:]<absolute-pathname> , Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either stream or dgram . Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages. See Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_PERF"}, {"role": "assistant", "content": "In addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REDACT"}, {"role": "assistant", "content": "By default, when tracing is activated, Git redacts the values of\ncookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\nheader and packfile URIs. Set this Boolean environment variable to false to prevent this\nredaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_REPLACE_OBJECTS"}, {"role": "assistant", "content": "Setting and exporting this environment variable tells Git to\nignore replacement refs and do not replace Git objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_LITERAL_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs literally, rather than as glob patterns. For example,\nrunning GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search\nfor commits that touch the path *.c , not any paths that the\nglob *.c matches. You might want this if you are feeding\nliteral paths to Git (e.g., paths previously given to you by git ls-tree , --raw diff output, etc)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REFLOG_ACTION"}, {"role": "assistant", "content": "When a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REF_PARANOIA"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune[1] ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA"}, {"role": "assistant", "content": "When loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALLOW_PROTOCOL"}, {"role": "assistant", "content": "If set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL_FROM_USER"}, {"role": "assistant", "content": "Set this Boolean environment variable to false to prevent protocols used by fetch/push/clone which are\nconfigured to the user state.  This is useful to restrict recursive\nsubmodule initialization from an untrusted repository or for programs\nwhich feed potentially-untrusted URLS to git commands.  See git-config[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend[1] . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OPTIONAL_LOCKS"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REDIRECT_STDIN  GIT_REDIRECT_STDOUT  GIT_REDIRECT_STDERR"}, {"role": "assistant", "content": "Windows-only: allow redirecting the standard input/output/error\nhandles to paths specified by the environment variables. This is\nparticularly useful in multi-threaded applications where the\ncanonical way to pass standard handles via CreateProcess() is\nnot an option because it would require the handles to be marked\ninheritable (and consequently every spawned process would\ninherit them, possibly blocking regular Git operations). The\nprimary intended use case is to use named pipes for communication\n(e.g. \\\\.\\pipe\\my-git-stdin-123 ). Two special values are supported: off will simply close the\ncorresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1 , standard error will be redirected to the same handle as\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout[1] ) and the raw\ndiff output ( git-diff[1] ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial[7] . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config[1] . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon[1] , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial[7] both provide\nintroductions to the underlying Git architecture. See gitworkflows[7] for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Authors Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n< git@vger.kernel.org >. https://openhub.net/p/git/contributors/summary gives you a more complete list of contributors. If you have a clone of git.git itself, the\noutput of git-shortlog[1] and git-blame[1] can show you\nthe authors for specific parts of the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Reporting Bugs Report bugs to the Git mailing list < git@vger.kernel.org > where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions. Issues which are security relevant should be disclosed privately to\nthe Git Security mailing list < git-security@googlegroups.com >."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SEE ALSO gittutorial[7] , gittutorial-2[7] , giteveryday[7] , gitcvs-migration[7] , gitglossary[7] , gitcore-tutorial[7] , gitcli[7] , The Git User’s Manual , gitworkflows[7]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "NAME git - the stupid content tracker"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SYNOPSIS git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--config-env=<name>=<envvar>] <command> [<args>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial[7] to get started, then see giteveryday[7] for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli[7] manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -v  --version"}, {"role": "assistant", "content": "Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts\nthe same options as the git-version[1] command. If --help is\nalso given, it takes precedence over --version ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help[1] for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -C <path>"}, {"role": "assistant", "content": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path> .  If <path> is present but empty, e.g. -C \"\" , then the\ncurrent working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --html-path"}, {"role": "assistant", "content": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --info-path"}, {"role": "assistant", "content": "Print the path where the Info files documenting this\nversion of Git are installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -p  --paginate"}, {"role": "assistant", "content": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section\nbelow)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -P  --no-pager"}, {"role": "assistant", "content": "Do not pipe Git output into a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --git-dir=<path>"}, {"role": "assistant", "content": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config[1] for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces[7] for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-replace-objects"}, {"role": "assistant", "content": "Do not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-lazy-fetch"}, {"role": "assistant", "content": "Do not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --literal-pathspecs"}, {"role": "assistant", "content": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-optional-locks"}, {"role": "assistant", "content": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --list-cmds=<group>[,<group>…​]"}, {"role": "assistant", "content": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --attr-source=<tree-ish>"}, {"role": "assistant", "content": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes[5] . This is equivalent to setting the GIT_ATTR_SOURCE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-add[1]"}, {"role": "assistant", "content": "Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am[1]"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archive[1]"}, {"role": "assistant", "content": "Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect[1]"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch[1]"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle[1]"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout[1]"}, {"role": "assistant", "content": "Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick[1]"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool[1]"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean[1]"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone[1]"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit[1]"}, {"role": "assistant", "content": "Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe[1]"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff[1]"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch[1]"}, {"role": "assistant", "content": "Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch[1]"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc[1]"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep[1]"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gui[1]"}, {"role": "assistant", "content": "A portable graphical interface to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init[1]"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log[1]"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-maintenance[1]"}, {"role": "assistant", "content": "Run tasks to optimize Git repository data"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge[1]"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv[1]"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-notes[1]"}, {"role": "assistant", "content": "Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull[1]"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push[1]"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-range-diff[1]"}, {"role": "assistant", "content": "Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rebase[1]"}, {"role": "assistant", "content": "Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset[1]"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore[1]"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert[1]"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rm[1]"}, {"role": "assistant", "content": "Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog[1]"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show[1]"}, {"role": "assistant", "content": "Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout[1]"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash[1]"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status[1]"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule[1]"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch[1]"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-tag[1]"}, {"role": "assistant", "content": "Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree[1]"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk[1]"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar[1]"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config[1]"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-export[1]"}, {"role": "assistant", "content": "Git data exporter"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import[1]"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-filter-branch[1]"}, {"role": "assistant", "content": "Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool[1]"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-refs[1]"}, {"role": "assistant", "content": "Pack heads and tags for efficient repository access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune[1]"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog[1]"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote[1]"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-repack[1]"}, {"role": "assistant", "content": "Pack unpacked objects in a repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replace[1]"}, {"role": "assistant", "content": "Create, list, delete refs to replace objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate[1]"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame[1]"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport[1]"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-count-objects[1]"}, {"role": "assistant", "content": "Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diagnose[1]"}, {"role": "assistant", "content": "Generate a zip archive of diagnostic information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-difftool[1]"}, {"role": "assistant", "content": "Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fsck[1]"}, {"role": "assistant", "content": "Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help[1]"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-instaweb[1]"}, {"role": "assistant", "content": "Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-tree[1]"}, {"role": "assistant", "content": "Perform merge without touching index or working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere[1]"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch[1]"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-commit[1]"}, {"role": "assistant", "content": "Check the GPG signature of commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-tag[1]"}, {"role": "assistant", "content": "Check the GPG signature of tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-version[1]"}, {"role": "assistant", "content": "Display version information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-whatchanged[1]"}, {"role": "assistant", "content": "Show logs with differences each commit introduces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitweb[1]"}, {"role": "assistant", "content": "Git web interface (web frontend to Git repositories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archimport[1]"}, {"role": "assistant", "content": "Import a GNU Arch repository into Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit[1]"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsimport[1]"}, {"role": "assistant", "content": "Salvage your data out of another SCM people love to hate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver[1]"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send[1]"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-p4[1]"}, {"role": "assistant", "content": "Import from and submit to Perforce repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-quiltimport[1]"}, {"role": "assistant", "content": "Applies a quilt patchset onto the current branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull[1]"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-email[1]"}, {"role": "assistant", "content": "Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-svn[1]"}, {"role": "assistant", "content": "Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-apply[1]"}, {"role": "assistant", "content": "Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout-index[1]"}, {"role": "assistant", "content": "Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-graph[1]"}, {"role": "assistant", "content": "Write and verify Git commit-graph files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-tree[1]"}, {"role": "assistant", "content": "Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object[1]"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack[1]"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-file[1]"}, {"role": "assistant", "content": "Run a three-way file merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-index[1]"}, {"role": "assistant", "content": "Run a merge for files needing merging"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktag[1]"}, {"role": "assistant", "content": "Creates a tag object with extra validation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktree[1]"}, {"role": "assistant", "content": "Build a tree-object from ls-tree formatted text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-multi-pack-index[1]"}, {"role": "assistant", "content": "Write and verify multi-pack-indexes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects[1]"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune-packed[1]"}, {"role": "assistant", "content": "Remove extra objects that are already in pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-read-tree[1]"}, {"role": "assistant", "content": "Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay[1]"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref[1]"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-objects[1]"}, {"role": "assistant", "content": "Unpack objects from a packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index[1]"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-ref[1]"}, {"role": "assistant", "content": "Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree[1]"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file[1]"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry[1]"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-files[1]"}, {"role": "assistant", "content": "Compares files in the working tree and the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index[1]"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-tree[1]"}, {"role": "assistant", "content": "Compares the content and mode of blobs found via two tree objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-ref[1]"}, {"role": "assistant", "content": "Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-repo[1]"}, {"role": "assistant", "content": "Run a Git command on a list of repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id[1]"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files[1]"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-remote[1]"}, {"role": "assistant", "content": "List references in a remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree[1]"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-base[1]"}, {"role": "assistant", "content": "Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev[1]"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant[1]"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list[1]"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-parse[1]"}, {"role": "assistant", "content": "Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-index[1]"}, {"role": "assistant", "content": "Show packed archive index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-ref[1]"}, {"role": "assistant", "content": "List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-file[1]"}, {"role": "assistant", "content": "Creates a temporary file with a blob’s contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-var[1]"}, {"role": "assistant", "content": "Show a Git logical variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-pack[1]"}, {"role": "assistant", "content": "Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-daemon[1]"}, {"role": "assistant", "content": "A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch-pack[1]"}, {"role": "assistant", "content": "Receive missing objects from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-backend[1]"}, {"role": "assistant", "content": "Server side implementation of Git over HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-pack[1]"}, {"role": "assistant", "content": "Push objects over Git protocol to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-server-info[1]"}, {"role": "assistant", "content": "Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch[1]"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push[1]"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack[1]"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell[1]"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive[1]"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-pack[1]"}, {"role": "assistant", "content": "Send objects packed back to git-fetch-pack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-attr[1]"}, {"role": "assistant", "content": "Display gitattributes information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore[1]"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-mailmap[1]"}, {"role": "assistant", "content": "Show canonical names and email addresses of contacts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ref-format[1]"}, {"role": "assistant", "content": "Ensures that a reference name is well formed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-column[1]"}, {"role": "assistant", "content": "Display data in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential[1]"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache[1]"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-store[1]"}, {"role": "assistant", "content": "Helper to store credentials on disk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fmt-merge-msg[1]"}, {"role": "assistant", "content": "Produce a merge commit message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook[1]"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers[1]"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailinfo[1]"}, {"role": "assistant", "content": "Extracts patch and authorship from a single e-mail message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailsplit[1]"}, {"role": "assistant", "content": "Simple UNIX mbox splitter program"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file[1]"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-patch-id[1]"}, {"role": "assistant", "content": "Compute unique ID for a patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n[1]"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup[1]"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace[1]"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcore-tutorial[7]"}, {"role": "assistant", "content": "A Git core tutorial for developers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials[7]"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration[7]"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore[7]"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  giteveryday[7]"}, {"role": "assistant", "content": "A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq[7]"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitglossary[7]"}, {"role": "assistant", "content": "A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitnamespaces[7]"}, {"role": "assistant", "content": "Git namespaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers[7]"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitsubmodules[7]"}, {"role": "assistant", "content": "Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial[7]"}, {"role": "assistant", "content": "A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2[7]"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows[7]"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitattributes[5]"}, {"role": "assistant", "content": "Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli[7]"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  githooks[5]"}, {"role": "assistant", "content": "Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore[5]"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap[5]"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules[5]"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout[5]"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrevisions[7]"}, {"role": "assistant", "content": "Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle[5]"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-chunk[5]"}, {"role": "assistant", "content": "Chunk-based file formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph[5]"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-index[5]"}, {"role": "assistant", "content": "Git index format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack[5]"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature[5]"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities[5]"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-common[5]"}, {"role": "assistant", "content": "Things common to various protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-http[5]"}, {"role": "assistant", "content": "Git HTTP-based protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-pack[5]"}, {"role": "assistant", "content": "How packs are transferred over-the-wire"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-v2[5]"}, {"role": "assistant", "content": "Git Wire Protocol, Version 2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config[1] for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <object>"}, {"role": "assistant", "content": "Indicates the object name for any type of object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <blob>"}, {"role": "assistant", "content": "Indicates a blob object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree>"}, {"role": "assistant", "content": "Indicates a tree object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit>"}, {"role": "assistant", "content": "Indicates a commit object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit-ish>"}, {"role": "assistant", "content": "Indicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <file>"}, {"role": "assistant", "content": "Indicates a filename - almost always relative to the\nroot of the tree structure GIT_INDEX_FILE describes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  HEAD"}, {"role": "assistant", "content": "indicates the head of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tag>"}, {"role": "assistant", "content": "a valid tag name (i.e. a refs/tags/<tag> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <head>"}, {"role": "assistant", "content": "a valid head name (i.e. a refs/heads/<head> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "File/Directory Structure Please see the gitrepository-layout[5] document. Read githooks[5] for more details about each hook. Higher level SCMs may provide and manage additional information in the $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Terminology Please see gitglossary[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIR"}, {"role": "assistant", "content": "If the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_WORK_TREE"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nThis can also be controlled by the --work-tree command-line\noption and the core.worktree configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NAMESPACE"}, {"role": "assistant", "content": "Set the Git namespace; see gitnamespaces[7] for details.\nThe --namespace command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CEILING_DIRECTORIES"}, {"role": "assistant", "content": "This should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMON_DIR"}, {"role": "assistant", "content": "If this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout[5] and git-worktree[1] for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_REF_FORMAT"}, {"role": "assistant", "content": "If this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit[1] for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_NAME"}, {"role": "assistant", "content": "The human-readable name used in the committer identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_DATE"}, {"role": "assistant", "content": "The date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit[1] for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EXTERNAL_DIFF"}, {"role": "assistant", "content": "When the environment variable GIT_EXTERNAL_DIFF is set, the\nprogram named by it is called to generate diffs, and Git\ndoes not use its builtin diff machinery.\nFor a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters: path old-file old-hex old-mode new-file new-hex new-mode where:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-mode"}, {"role": "assistant", "content": "are the octal representation of the file modes. The file parameters can point at the user’s working file\n(e.g. new-file in \"git-diff-files\"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the\nindex). GIT_EXTERNAL_DIFF should not worry about unlinking the\ntemporary file — it is removed when GIT_EXTERNAL_DIFF exits. For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\nparameter, <path>. For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_TOTAL"}, {"role": "assistant", "content": "The total number of paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge[1]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides $EDITOR and $VISUAL .\nIt is used by several Git commands when, on interactive mode,\nan editor is to be launched. See also git-var[1] and the core.editor option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SEQUENCE_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase[1] and the sequence.editor option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH  GIT_SSH_COMMAND"}, {"role": "assistant", "content": "If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\nThe command-line parameters passed to the configured command are\ndetermined by the ssh variant.  See ssh.variant option in git-config[1] for details. $GIT_SSH_COMMAND takes precedence over $GIT_SSH , and is interpreted\nby the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded). Usually it is easier to configure any desired options through your\npersonal .ssh/config file.  Please consult your ssh documentation\nfor further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git’s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ATTR_SOURCE"}, {"role": "assistant", "content": "Sets the treeish that gitattributes will be read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ASKPASS"}, {"role": "assistant", "content": "If this environment variable is set, then Git commands which need to\nacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\nwill call this program with a suitable prompt as command-line argument\nand read the password from its STDOUT. See also the core.askPass option in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TERMINAL_PROMPT"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, git will not prompt\non the terminal (e.g., when asking for HTTP authentication)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_FLUSH"}, {"role": "assistant", "content": "If this Boolean environment variable is set to true, then commands such\nas git blame (in incremental mode), git rev-list , git log , git check-attr and git check-ignore will\nforce a flush of the output stream after each record have been\nflushed. If this\nvariable is set to false, the output of these commands will be done\nusing completely buffered I/O.   If this environment variable is\nnot set, Git will choose buffered or record-oriented flushing\nbased on whether stdout appears to be redirected to a file or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_FSMONITOR"}, {"role": "assistant", "content": "Enables trace messages for the filesystem monitor extension.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACK_ACCESS"}, {"role": "assistant", "content": "Enables trace messages for all accesses to any packs. For each\naccess, the pack file name and an offset in the pack is\nrecorded. This may be helpful for troubleshooting some\npack-related performance problems.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKET"}, {"role": "assistant", "content": "Enables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKFILE"}, {"role": "assistant", "content": "Enables tracing of packfiles sent or received by a\ngiven program. Unlike other trace output, this trace is\nverbatim: no headers, and no quoting of binary data. You almost\ncertainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack ) rather than displaying it on\nthe terminal or mixing it with other trace output. Note that this is currently only implemented for the client side\nof clones and fetches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PERFORMANCE"}, {"role": "assistant", "content": "Enables performance related trace messages, e.g. total execution\ntime of each Git command.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SETUP"}, {"role": "assistant", "content": "Enables trace messages printing the .git, working tree and current\nworking directory after Git has completed its setup phase.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SHALLOW"}, {"role": "assistant", "content": "Enables trace messages that can help debugging fetching /\ncloning of shallow repositories.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2"}, {"role": "assistant", "content": "Enables more detailed trace messages from the \"trace2\" library.\nOutput from GIT_TRACE2 is a simple text-based format for human\nreadability. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions). In addition, if the variable is set to af_unix:[<socket-type>:]<absolute-pathname> , Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either stream or dgram . Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages. See Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_PERF"}, {"role": "assistant", "content": "In addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REDACT"}, {"role": "assistant", "content": "By default, when tracing is activated, Git redacts the values of\ncookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\nheader and packfile URIs. Set this Boolean environment variable to false to prevent this\nredaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_REPLACE_OBJECTS"}, {"role": "assistant", "content": "Setting and exporting this environment variable tells Git to\nignore replacement refs and do not replace Git objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_LITERAL_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs literally, rather than as glob patterns. For example,\nrunning GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search\nfor commits that touch the path *.c , not any paths that the\nglob *.c matches. You might want this if you are feeding\nliteral paths to Git (e.g., paths previously given to you by git ls-tree , --raw diff output, etc)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REFLOG_ACTION"}, {"role": "assistant", "content": "When a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REF_PARANOIA"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune[1] ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA"}, {"role": "assistant", "content": "When loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALLOW_PROTOCOL"}, {"role": "assistant", "content": "If set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL_FROM_USER"}, {"role": "assistant", "content": "Set this Boolean environment variable to false to prevent protocols used by fetch/push/clone which are\nconfigured to the user state.  This is useful to restrict recursive\nsubmodule initialization from an untrusted repository or for programs\nwhich feed potentially-untrusted URLS to git commands.  See git-config[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend[1] . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OPTIONAL_LOCKS"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REDIRECT_STDIN  GIT_REDIRECT_STDOUT  GIT_REDIRECT_STDERR"}, {"role": "assistant", "content": "Windows-only: allow redirecting the standard input/output/error\nhandles to paths specified by the environment variables. This is\nparticularly useful in multi-threaded applications where the\ncanonical way to pass standard handles via CreateProcess() is\nnot an option because it would require the handles to be marked\ninheritable (and consequently every spawned process would\ninherit them, possibly blocking regular Git operations). The\nprimary intended use case is to use named pipes for communication\n(e.g. \\\\.\\pipe\\my-git-stdin-123 ). Two special values are supported: off will simply close the\ncorresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1 , standard error will be redirected to the same handle as\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout[1] ) and the raw\ndiff output ( git-diff[1] ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial[7] . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config[1] . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon[1] , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial[7] both provide\nintroductions to the underlying Git architecture. See gitworkflows[7] for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Authors Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n< git@vger.kernel.org >. https://openhub.net/p/git/contributors/summary gives you a more complete list of contributors. If you have a clone of git.git itself, the\noutput of git-shortlog[1] and git-blame[1] can show you\nthe authors for specific parts of the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Reporting Bugs Report bugs to the Git mailing list < git@vger.kernel.org > where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions. Issues which are security relevant should be disclosed privately to\nthe Git Security mailing list < git-security@googlegroups.com >."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SEE ALSO gittutorial[7] , gittutorial-2[7] , giteveryday[7] , gitcvs-migration[7] , gitglossary[7] , gitcore-tutorial[7] , gitcli[7] , The Git User’s Manual , gitworkflows[7]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "NAME git-config - Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "SYNOPSIS git config [<file-option>] [--type=<type>] [--comment=<message>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] <name> [<value> [<value-pattern>]] git config [<file-option>] [--type=<type>] [--comment=<message>] --add <name> <value> git config [<file-option>] [--type=<type>] [--comment=<message>] [--fixed-value] --replace-all <name> <value> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get <name> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all <name> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp <name-regex> [<value-pattern>] git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch <name> <URL> git config [<file-option>] [--fixed-value] --unset <name> [<value-pattern>] git config [<file-option>] [--fixed-value] --unset-all <name> [<value-pattern>] git config [<file-option>] --rename-section <old-name> <new-name> git config [<file-option>] --remove-section <name> git config [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list git config [<file-option>] --get-color <name> [<default>] git config [<file-option>] --get-colorbool <name> [<stdout-is-tty>] git config [<file-option>] -e | --edit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "DESCRIPTION You can query/set/replace/unset options with this command. The name is\nactually the section and the key separated by a dot, and the value will be\nescaped. Multiple lines can be added to an option by using the --add option.\nIf you want to update or unset an option which can occur on multiple\nlines, a value-pattern (which is an extended regular expression,\nunless the --fixed-value option is given) needs to be given.  Only the\nexisting values that match the pattern are updated or unset.  If\nyou want to handle the lines that do not match the pattern, just\nprepend a single exclamation mark in front (see also EXAMPLES ),\nbut note that this only works when the --fixed-value option is not\nin use. The --type=<type> option instructs git config to ensure that incoming and\noutgoing values are canonicalize-able under the given <type>.  If no --type=<type> is given, no canonicalization will be performed. Callers may\nunset an existing --type specifier with --no-type . When reading, the values are read from the system, global and\nrepository local configuration files by default, and options --system , --global , --local , --worktree and --file <filename> can be used to tell the command to read from only\nthat location (see FILES ). When writing, the new value is written to the repository local\nconfiguration file by default, and options --system , --global , --worktree , --file <filename> can be used to tell the command to\nwrite to that location (you can say --local but that is the\ndefault). This command will fail with non-zero status upon error.  Some exit\ncodes are: The section or key is invalid (ret=1), no section or name was provided (ret=2), the config file is invalid (ret=3), the config file cannot be written (ret=4), you try to unset an option which does not exist (ret=5), you try to unset/set an option for which multiple lines match (ret=5), or you try to use an invalid regexp (ret=6). On success, the command returns the exit code 0. A list of all available configuration variables can be obtained using the git help --config command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --replace-all"}, {"role": "assistant", "content": "Default behavior is to replace at most one line. This replaces\nall lines matching the key (and optionally the value-pattern )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --add"}, {"role": "assistant", "content": "Adds a new line to the option without altering any existing\nvalues.  This is the same as providing ^$ as the value-pattern in --replace-all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --comment <message>"}, {"role": "assistant", "content": "Append a comment at the end of new or modified lines. If _<message>_ begins with one or more whitespaces followed\nby \"#\", it is used as-is.  If it begins with \"#\", a space is\nprepended before it is used.  Otherwise, a string \" # \" (a\nspace followed by a hash followed by a space) is prepended\nto it.  And the resulting string is placed immediately after\nthe value defined for the variable.  The _<message>_ must\nnot contain linefeed characters (no multi-line comments are\npermitted)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get"}, {"role": "assistant", "content": "Get the value for a given key (optionally filtered by a regex\nmatching the value). Returns error code 1 if the key was not\nfound and the last value if multiple key values were found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-all"}, {"role": "assistant", "content": "Like get, but returns all values for a multi-valued key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-regexp"}, {"role": "assistant", "content": "Like --get-all, but interprets the name as a regular expression and\nwrites out the key names.  Regular expression matching is currently\ncase-sensitive and done against a canonicalized version of the key\nin which section and variable names are lowercased, but subsection\nnames are not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-urlmatch <name> <URL>"}, {"role": "assistant", "content": "When given a two-part <name> as <section>.<key>, the value for\n<section>.<URL>.<key> whose <URL> part matches the best to the\ngiven URL is returned (if no such key exists, the value for\n<section>.<key> is used as a fallback).  When given just the\n<section> as name, do so for all the keys in the section and\nlist them.  Returns error code 1 if no value is found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --global"}, {"role": "assistant", "content": "For writing options: write to global ~/.gitconfig file\nrather than the repository .git/config , write to $XDG_CONFIG_HOME/git/config file if this file exists and the ~/.gitconfig file doesn’t. For reading options: read only from global ~/.gitconfig and from $XDG_CONFIG_HOME/git/config rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --system"}, {"role": "assistant", "content": "For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config . For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --local"}, {"role": "assistant", "content": "For writing options: write to the repository .git/config file.\nThis is the default behavior. For reading options: read only from the repository .git/config rather than\nfrom all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --worktree"}, {"role": "assistant", "content": "Similar to --local except that $GIT_DIR/config.worktree is\nread from or written to if extensions.worktreeConfig is\nenabled. If not it’s the same as --local . Note that $GIT_DIR is equal to $GIT_COMMON_DIR for the main working tree, but is of\nthe form $GIT_DIR/worktrees/<id>/ for other working trees. See git-worktree[1] to learn how to enable extensions.worktreeConfig ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -f <config-file>  --file <config-file>"}, {"role": "assistant", "content": "For writing options: write to the specified file rather than the\nrepository .git/config . For reading options: read only from the specified file rather than from all\navailable files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --blob <blob>"}, {"role": "assistant", "content": "Similar to --file but use the given blob instead of a file. E.g.\nyou can use master:.gitmodules to read values from the file .gitmodules in the master branch. See \"SPECIFYING REVISIONS\"\nsection in gitrevisions[7] for a more complete list of\nways to spell blob names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --remove-section"}, {"role": "assistant", "content": "Remove the given section from the configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --rename-section"}, {"role": "assistant", "content": "Rename the given section to a new name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --unset"}, {"role": "assistant", "content": "Remove the line matching the key from config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --unset-all"}, {"role": "assistant", "content": "Remove all lines matching the key from config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -l  --list"}, {"role": "assistant", "content": "List all variables set in config file, along with their values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --fixed-value"}, {"role": "assistant", "content": "When used with the value-pattern argument, treat value-pattern as\nan exact string instead of a regular expression. This will restrict\nthe name/value pairs that are matched to only those where the value\nis exactly equal to the value-pattern ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --type <type>"}, {"role": "assistant", "content": "git config will ensure that any input or output is valid under the given\ntype constraint(s), and will canonicalize outgoing values in <type> 's\ncanonical form. Valid <type> 's include: bool : canonicalize values as either \"true\" or \"false\". int : canonicalize values as simple decimal numbers. An optional suffix of k , m , or g will cause the value to be multiplied by 1024, 1048576, or\n1073741824 upon input. bool-or-int : canonicalize according to either bool or int , as described\nabove. path : canonicalize by expanding a leading ~ to the value of $HOME and ~user to the home directory for the specified user. This specifier has no\neffect when setting the value (but you can use git config section.variable\n~/ from the command line to let your shell do the expansion.) expiry-date : canonicalize by converting from a fixed or relative date-string\nto a timestamp. This specifier has no effect when setting the value. color : When getting a value, canonicalize by converting to an ANSI color\nescape sequence. When setting a value, a sanity-check is performed to ensure\nthat the given value is canonicalize-able as an ANSI color, but it is written\nas-is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --bool  --int  --bool-or-int  --path  --expiry-date"}, {"role": "assistant", "content": "Historical options for selecting a type specifier. Prefer instead --type (see above)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --no-type"}, {"role": "assistant", "content": "Un-sets the previously set type specifier (if one was previously set). This\noption requests that git config not canonicalize the retrieved variable. --no-type has no effect without --type=<type> or --<type> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -z  --null"}, {"role": "assistant", "content": "For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --name-only"}, {"role": "assistant", "content": "Output only the names of config variables for --list or --get-regexp ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --show-origin"}, {"role": "assistant", "content": "Augment the output of all queried config options with the\norigin type (file, standard input, blob, command line) and\nthe actual origin (config file path, ref, or blob id if\napplicable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --show-scope"}, {"role": "assistant", "content": "Similar to --show-origin in that it augments the output of\nall queried config options with the scope of that value\n(worktree, local, global, system, command)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-colorbool <name> [<stdout-is-tty>]"}, {"role": "assistant", "content": "Find the color setting for <name> (e.g. color.diff ) and output\n\"true\" or \"false\". <stdout-is-tty> should be either \"true\" or\n\"false\", and is taken into account when configuration says\n\"auto\".  If <stdout-is-tty> is missing, then checks the standard\noutput of the command itself, and exits with status 0 if color\nis to be used, or exits with status 1 otherwise.\nWhen the color setting for name is undefined, the command uses color.ui as fallback."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-color <name> [<default>]"}, {"role": "assistant", "content": "Find the color configured for name (e.g. color.diff.new ) and\noutput it as the ANSI color escape sequence to the standard\noutput.  The optional default parameter is used instead, if\nthere is no color configured for name . --type=color [--default=<default>] is preferred over --get-color (but note that --get-color will omit the trailing newline printed by --type=color )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -e  --edit"}, {"role": "assistant", "content": "Opens an editor to modify the specified config file; either --system , --global , --local (default), --worktree , or --file <config-file> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --[no-]includes"}, {"role": "assistant", "content": "Respect include.* directives in config files when looking up\nvalues. Defaults to off when a specific file is given (e.g.,\nusing --file , --global , etc) and on when searching all\nconfig files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --default <value>"}, {"role": "assistant", "content": "When using --get , and the requested variable is not found, behave as if\n<value> were the value assigned to that variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "CONFIGURATION pager.config is only respected when listing configuration, i.e., when\nusing --list or any of the --get-* which may return multiple results.\nThe default is to use a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $(prefix)/etc/gitconfig"}, {"role": "assistant", "content": "System-wide configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $XDG_CONFIG_HOME/git/config  ~/.gitconfig"}, {"role": "assistant", "content": "User-specific configuration files. When the XDG_CONFIG_HOME environment\nvariable is not set or empty, $HOME/.config/ is used as\n$XDG_CONFIG_HOME. These are also called \"global\" configuration files. If both files exist, both\nfiles are read in the order given above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $GIT_DIR/config"}, {"role": "assistant", "content": "Repository specific configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $GIT_DIR/config.worktree"}, {"role": "assistant", "content": "This is optional and is only searched when extensions.worktreeConfig is present in $GIT_DIR/config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  system"}, {"role": "assistant", "content": "$(prefix)/etc/gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  global"}, {"role": "assistant", "content": "$XDG_CONFIG_HOME/git/config ~/.gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  local"}, {"role": "assistant", "content": "$GIT_DIR/config"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktree"}, {"role": "assistant", "content": "$GIT_DIR/config.worktree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  command"}, {"role": "assistant", "content": "GIT_CONFIG_{COUNT,KEY,VALUE} environment variables (see ENVIRONMENT below) the -c option"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration. See git[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide\n$(prefix)/etc/gitconfig file. See git[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_COUNT  GIT_CONFIG_KEY_<n>  GIT_CONFIG_VALUE_<n>"}, {"role": "assistant", "content": "If GIT_CONFIG_COUNT is set to a positive number, all environment pairs\nGIT_CONFIG_KEY_<n> and GIT_CONFIG_VALUE_<n> up to that number will be\nadded to the process’s runtime configuration. The config pairs are\nzero-indexed. Any missing key or value is treated as an error. An empty\nGIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no\npairs are processed. These environment variables will override values\nin configuration files, but will be overridden by any explicit options\npassed via git -c . This is useful for cases where you want to spawn multiple git commands\nwith a common configuration but cannot depend on a configuration file,\nfor example when writing scripts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG"}, {"role": "assistant", "content": "If no --file option is provided to git config , use the file\ngiven by GIT_CONFIG as if it were provided via --file . This\nvariable has no effect on other Git commands, and is mostly for\nhistorical compatibility; there is generally no reason to use it\ninstead of the --file option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "EXAMPLES Given a .git/config like this: #\n# This is the config file, and\n# a '#' or ';' character indicates\n# a comment\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; Our diff algorithm\n[diff]\n\texternal = /usr/local/bin/diff-wrapper\n\trenames = true\n\n; Proxy settings\n[core]\n\tgitproxy=proxy-command for kernel.org\n\tgitproxy=default-proxy ; for all the rest\n\n; HTTP\n[http]\n\tsslVerify\n[http \"https://weak.example.com\"]\n\tsslVerify = false\n\tcookieFile = /tmp/cookie.txt you can set the filemode to true with % git config core.filemode true The hypothetical proxy command entries actually have a postfix to discern\nwhat URL they apply to. Here is how to change the entry for kernel.org\nto \"ssh\". % git config core.gitproxy '\"ssh\" for kernel.org' 'for kernel.org$' This makes sure that only the key/value pair for kernel.org is replaced. To delete the entry for renames, do % git config --unset diff.renames If you want to delete an entry for a multivar (like core.gitproxy above),\nyou have to provide a regex matching the value of exactly one line. To query the value for a given key, do % git config --get core.filemode or % git config core.filemode or, to query a multivar: % git config --get core.gitproxy \"for kernel.org$\" If you want to know all the values for a multivar, do: % git config --get-all core.gitproxy If you like to live dangerously, you can replace all core.gitproxy by a\nnew one with % git config --replace-all core.gitproxy ssh However, if you really only want to replace the line for the default proxy,\ni.e. the one without a \"for …​\" postfix, do something like this: % git config core.gitproxy ssh '! for ' To actually match only values with an exclamation mark, you have to % git config section.key value '[!]' To add a new proxy, without altering any of the existing ones, use % git config --add core.gitproxy '\"proxy-command\" for example.com' An example to use customized color from the configuration in your\nscript: #!/bin/sh\nWS=$(git config --get-color color.diff.whitespace \"blue reverse\")\nRESET=$(git config --get-color \"\" \"reset\")\necho \"${WS}your whitespace color or blue reverse${RESET}\" For URLs in https://weak.example.com , http.sslVerify is set to\nfalse, while it is set to true for all others: % git config --type=bool --get-urlmatch http.sslverify https://good.example.com\ntrue\n% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com\nfalse\n% git config --get-urlmatch http https://weak.example.com\nhttp.cookieFile /tmp/cookie.txt\nhttp.sslverify false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitdir"}, {"role": "assistant", "content": "The data that follows the keyword gitdir: is used as a glob\npattern. If the location of the .git directory matches the\npattern, the include condition is met. The .git location may be auto-discovered, or come from $GIT_DIR environment variable. If the repository is auto-discovered via a .git\nfile (e.g. from submodules, or a linked worktree), the .git location\nwould be the final location where the .git directory is, not where the\n.git file is. The pattern can contain standard globbing wildcards and two additional\nones, **/ and /** , that can match multiple path components. Please\nrefer to gitignore[5] for details. For convenience: If the pattern starts with ~/ , ~ will be substituted with the\ncontent of the environment variable HOME . If the pattern starts with ./ , it is replaced with the directory\ncontaining the current config file. If the pattern does not start with either ~/ , ./ or / , **/ will be automatically prepended. For example, the pattern foo/bar becomes **/foo/bar and would match /any/path/to/foo/bar . If the pattern ends with / , ** will be automatically added. For\nexample, the pattern foo/ becomes foo/** . In other words, it\nmatches \"foo\" and everything inside, recursively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitdir/i"}, {"role": "assistant", "content": "This is the same as gitdir except that matching is done\ncase-insensitively (e.g. on case-insensitive file systems)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  onbranch"}, {"role": "assistant", "content": "The data that follows the keyword onbranch: is taken to be a\npattern with standard globbing wildcards and two additional\nones, **/ and /** , that can match multiple path components.\nIf we are in a worktree where the name of the branch that is\ncurrently checked out matches the pattern, the include condition\nis met. If the pattern ends with / , ** will be automatically added. For\nexample, the pattern foo/ becomes foo/** . In other words, it matches\nall branches that begin with foo/ . This is useful if your branches are\norganized hierarchically and you would like to apply a configuration to\nall the branches in that hierarchy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  hasconfig:remote.*.url:"}, {"role": "assistant", "content": "The data that follows this keyword is taken to\nbe a pattern with standard globbing wildcards and two\nadditional ones, **/ and /** , that can match multiple\ncomponents. The first time this keyword is seen, the rest of\nthe config files will be scanned for remote URLs (without\napplying any values). If there exists at least one remote URL\nthat matches this pattern, the include condition is met. Files included by this option (directly or indirectly) are not allowed\nto contain remote URLs. Note that unlike other includeIf conditions, resolving this condition\nrelies on information that is not yet known at the point of reading the\ncondition. A typical use case is this option being present as a\nsystem-level or global-level config, and the remote URL being in a\nlocal-level config; hence the need to scan ahead when resolving this\ncondition. In order to avoid the chicken-and-egg problem in which\npotentially-included files can affect whether such files are potentially\nincluded, Git breaks the cycle by prohibiting these files from affecting\nthe resolution of these conditions (thus, prohibiting them from\ndeclaring remote URLs). As for the naming of this keyword, it is for forwards compatibility with\na naming scheme that supports more variable-based include conditions,\nbut currently Git only supports the exact keyword described above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  boolean"}, {"role": "assistant", "content": "When a variable is said to take a boolean value, many\nsynonyms are accepted for true and false ; these are all\ncase-insensitive. true Boolean true literals are yes , on , true ,\nand 1 .  Also, a variable defined without = <value> is taken as true. false Boolean false literals are no , off , false , 0 and the empty string. When converting a value to its canonical form using the --type=bool type\nspecifier, git config will ensure that the output is \"true\" or\n\"false\" (spelled in lowercase)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  integer"}, {"role": "assistant", "content": "The value for many variables that specify various sizes can\nbe suffixed with k , M ,…​ to mean \"scale the number by\n1024\", \"by 1024x1024\", etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color"}, {"role": "assistant", "content": "The value for a variable that takes a color is a list of\ncolors (at most two, one for foreground and one for background)\nand attributes (as many as you want), separated by spaces. The basic colors accepted are normal , black , red , green , yellow , blue , magenta , cyan , white and default .  The first\ncolor given is the foreground; the second is the background.  All the\nbasic colors except normal and default have a bright variant that can\nbe specified by prefixing the color with bright , like brightred . The color normal makes no change to the color. It is the same as an\nempty string, but can be used as the foreground color when specifying a\nbackground color alone (for example, \"normal red\"). The color default explicitly resets the color to the terminal default,\nfor example to specify a cleared background. Although it varies between\nterminals, this is usually not the same as setting to \"white black\". Colors may also be given as numbers between 0 and 255; these use ANSI\n256-color mode (but note that not all terminals may support this).  If\nyour terminal supports it, you may also specify 24-bit RGB values as\nhex, like #ff0ab3 . The accepted attributes are bold , dim , ul , blink , reverse , italic , and strike (for crossed-out or \"strikethrough\" letters).\nThe position of any attributes with respect to the colors\n(before, after, or in between), doesn’t matter. Specific attributes may\nbe turned off by prefixing them with no or no- (e.g., noreverse , no-ul , etc). The pseudo-attribute reset resets all colors and attributes before\napplying the specified coloring. For example, reset green will result\nin a green foreground and default background without any active\nattributes. An empty color string produces no color effect at all. This can be used\nto avoid coloring specific elements without disabling color entirely. For git’s pre-defined color slots, the attributes are meant to be reset\nat the beginning of each item in the colored output. So setting color.decorate.branch to black will paint that branch name in a\nplain black , even if the previous thing on the same output line (e.g.\nopening parenthesis before the list of branch names in log --decorate output) is set to be painted with bold or some other attribute.\nHowever, custom log formats may do more complicated and layered\ncoloring, and the negated forms may be useful there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pathname"}, {"role": "assistant", "content": "A variable that takes a pathname value can be given a\nstring that begins with \" ~/ \" or \" ~user/ \", and the usual\ntilde expansion happens to such a string: ~/ is expanded to the value of $HOME , and ~user/ to the\nspecified user’s home directory. If a path starts with %(prefix)/ , the remainder is interpreted as a\npath relative to Git’s \"runtime prefix\", i.e. relative to the location\nwhere Git itself was installed. For example, %(prefix)/bin/ refers to\nthe directory in which the Git executable itself lives. If Git was\ncompiled without runtime prefix support, the compiled-in prefix will be\nsubstituted instead. In the unlikely event that a literal path needs to\nbe specified that should not be expanded, it needs to be prefixed by ./ , like so: ./%(prefix)/bin ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  true"}, {"role": "assistant", "content": "Boolean true literals are yes , on , true ,\nand 1 .  Also, a variable defined without = <value> is taken as true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  false"}, {"role": "assistant", "content": "Boolean false literals are no , off , false , 0 and the empty string. When converting a value to its canonical form using the --type=bool type\nspecifier, git config will ensure that the output is \"true\" or\n\"false\" (spelled in lowercase)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  add.ignoreErrors  add.ignore-errors (deprecated)"}, {"role": "assistant", "content": "Tells git add to continue adding files when some files cannot be\nadded due to indexing errors. Equivalent to the --ignore-errors option of git-add[1] . add.ignore-errors is deprecated,\nas it does not follow the usual naming convention for configuration\nvariables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  add.interactive.useBuiltin"}, {"role": "assistant", "content": "Unused configuration variable. Used in Git versions v2.25.0 to\nv2.36.0 to enable the built-in version of git-add[1] 's\ninteractive mode, which then became the default in Git\nversions v2.37.0 to v2.39.0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  advice.*"}, {"role": "assistant", "content": "These variables control various optional help messages designed to\naid new users.  When left unconfigured, Git will give the message\nalongside instructions on how to squelch it.  You can tell Git\nthat you do not need the help message by setting these to false : addEmbeddedRepo Shown when the user accidentally adds one\ngit repo inside of another. addEmptyPathspec Shown when the user runs git add without providing\nthe pathspec parameter. addIgnoredFile Shown when the user attempts to add an ignored file to\nthe index. amWorkDir Shown when git-am[1] fails to apply a patch\nfile, to tell the user the location of the file. ambiguousFetchRefspec Shown when a fetch refspec for multiple remotes maps to\nthe same remote-tracking branch namespace and causes branch\ntracking set-up to fail. checkoutAmbiguousRemoteBranchName Shown when the argument to git-checkout[1] and git-switch[1] ambiguously resolves to a\nremote tracking branch on more than one remote in\nsituations where an unambiguous argument would have\notherwise caused a remote-tracking branch to be\nchecked out. See the checkout.defaultRemote configuration variable for how to set a given remote\nto be used by default in some situations where this\nadvice would be printed. commitBeforeMerge Shown when git-merge[1] refuses to\nmerge to avoid overwriting local changes. detachedHead Shown when the user uses git-switch[1] or git-checkout[1] to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact. diverging Shown when a fast-forward is not possible. fetchShowForcedUpdates Shown when git-fetch[1] takes a long time\nto calculate forced updates after ref updates, or to warn\nthat the check is disabled. forceDeleteBranch Shown when the user tries to delete a not fully merged\nbranch without the force option set. ignoredHook Shown when a hook is ignored because the hook is not\nset as executable. implicitIdentity Shown when the user’s information is guessed from the\nsystem username and domain name, to tell the user how to\nset their identity configuration. mergeConflict Shown when various commands stop because of conflicts. nestedTag Shown when a user attempts to recursively tag a tag object. pushAlreadyExists Shown when git-push[1] rejects an update that\ndoes not qualify for fast-forwarding (e.g., a tag.) pushFetchFirst Shown when git-push[1] rejects an update that\ntries to overwrite a remote ref that points at an\nobject we do not have. pushNeedsForce Shown when git-push[1] rejects an update that\ntries to overwrite a remote ref that points at an\nobject that is not a commit-ish, or make the remote\nref point at an object that is not a commit-ish. pushNonFFCurrent Shown when git-push[1] fails due to a\nnon-fast-forward update to the current branch. pushNonFFMatching Shown when the user ran git-push[1] and pushed\n\"matching refs\" explicitly (i.e. used : , or\nspecified a refspec that isn’t the current branch) and\nit resulted in a non-fast-forward error. pushRefNeedsUpdate Shown when git-push[1] rejects a forced update of\na branch when its remote-tracking ref has updates that we\ndo not have locally. pushUnqualifiedRefname Shown when git-push[1] gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object. pushUpdateRejected Set this variable to false if you want to disable pushNonFFCurrent , pushNonFFMatching , pushAlreadyExists , pushFetchFirst , pushNeedsForce , and pushRefNeedsUpdate simultaneously. refSyntax Shown when the user provides an illegal ref name, to\ntell the user about the ref syntax documentation. resetNoRefresh Shown when git-reset[1] takes more than 2\nseconds to refresh the index after reset, to tell the user\nthat they can use the --no-refresh option. resolveConflict Shown by various commands when conflicts\nprevent the operation from being performed. rmHints Shown on failure in the output of git-rm[1] , to\ngive directions on how to proceed from the current state. sequencerInUse Shown when a sequencer command is already in progress. skippedCherryPicks Shown when git-rebase[1] skips a commit that has already\nbeen cherry-picked onto the upstream branch. statusAheadBehind Shown when git-status[1] computes the ahead/behind\ncounts for a local ref compared to its remote tracking ref,\nand that calculation takes longer than expected. Will not\nappear if status.aheadBehind is false or the option --no-ahead-behind is given. statusHints Show directions on how to proceed from the current\nstate in the output of git-status[1] , in\nthe template shown when writing commit messages in git-commit[1] , and in the help message shown\nby git-switch[1] or git-checkout[1] when switching branches. statusUoption Shown when git-status[1] takes more than 2\nseconds to enumerate untracked files, to tell the user that\nthey can use the -u option. submoduleAlternateErrorStrategyDie Shown when a submodule.alternateErrorStrategy option\nconfigured to \"die\" causes a fatal error. submoduleMergeConflict Advice shown when a non-trivial submodule merge conflict is\nencountered. submodulesNotUpdated Shown when a user runs a submodule command that fails\nbecause git submodule update --init was not run. suggestDetachingHead Shown when git-switch[1] refuses to detach HEAD\nwithout the explicit --detach option. updateSparsePath Shown when either git-add[1] or git-rm[1] is asked to update index entries outside the current sparse\ncheckout. waitingForEditor Shown when Git is waiting for editor input. Relevant\nwhen e.g. the editor is not launched inside the terminal. worktreeAddOrphan Shown when the user tries to create a worktree from an\ninvalid reference, to tell the user how to create a new unborn\nbranch instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  alias.*"}, {"role": "assistant", "content": "Command aliases for the git[1] command wrapper - e.g.\nafter defining alias.last = cat-file commit HEAD , the invocation git last is equivalent to git cat-file commit HEAD . To avoid\nconfusion and troubles with script usage, aliases that\nhide existing Git commands are ignored. Arguments are split by\nspaces, the usual shell quoting and escaping are supported.\nA quote pair or a backslash can be used to quote them. Note that the first word of an alias does not necessarily have to be a\ncommand. It can be a command-line option that will be passed into the\ninvocation of git . In particular, this is useful when used with -c to pass in one-time configurations or -p to force pagination. For example, loud-rebase = -c commit.verbose=true rebase can be defined such that\nrunning git loud-rebase would be equivalent to git -c commit.verbose=true rebase . Also, ps = -p status would be a\nhelpful alias since git ps would paginate the output of git status where the original command does not. If the alias expansion is prefixed with an exclamation point,\nit will be treated as a shell command.  For example, defining alias.new = !gitk --all --not ORIG_HEAD , the invocation git new is equivalent to running the shell command gitk --all --not ORIG_HEAD .  Note that shell commands will be\nexecuted from the top-level directory of a repository, which may\nnot necessarily be the current directory. GIT_PREFIX is set as returned by running git rev-parse --show-prefix from the original current directory. See git-rev-parse[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  am.keepcr"}, {"role": "assistant", "content": "If true, git-am will call git-mailsplit for patches in mbox format\nwith parameter --keep-cr . In this case git-mailsplit will\nnot remove \\r from lines ending with \\r\\n . Can be overridden\nby giving --no-keep-cr from the command line.\nSee git-am[1] , git-mailsplit[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  am.threeWay"}, {"role": "assistant", "content": "By default, git am will fail if the patch does not apply cleanly. When\nset to true, this setting tells git am to fall back on 3-way merge if\nthe patch records the identity of blobs it is supposed to apply to and\nwe have those blobs available locally (equivalent to giving the --3way option from the command line). Defaults to false .\nSee git-am[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  apply.ignoreWhitespace"}, {"role": "assistant", "content": "When set to change , tells git apply to ignore changes in\nwhitespace, in the same way as the --ignore-space-change option.\nWhen set to one of: no, none, never, false, it tells git apply to\nrespect all whitespace differences.\nSee git-apply[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  apply.whitespace"}, {"role": "assistant", "content": "Tells git apply how to handle whitespace, in the same way\nas the --whitespace option. See git-apply[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  attr.tree"}, {"role": "assistant", "content": "A reference to a tree in the repository from which to read attributes,\ninstead of the .gitattributes file in the working tree. In a bare\nrepository, this defaults to HEAD:.gitattributes . If the value does\nnot resolve to a valid tree object, an empty tree is used instead.\nWhen the GIT_ATTR_SOURCE environment variable or --attr-source command line option are used, this configuration variable has no effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.blankBoundary"}, {"role": "assistant", "content": "Show blank commit object name for boundary commits in git-blame[1] . This option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.coloring"}, {"role": "assistant", "content": "This determines the coloring scheme to be applied to blame\noutput. It can be repeatedLines , highlightRecent ,\nor none which is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.date"}, {"role": "assistant", "content": "Specifies the format used to output dates in git-blame[1] .\nIf unset the iso format is used. For supported values,\nsee the discussion of the --date option at git-log[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.showEmail"}, {"role": "assistant", "content": "Show the author email instead of author name in git-blame[1] .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.showRoot"}, {"role": "assistant", "content": "Do not treat root commits as boundaries in git-blame[1] .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.ignoreRevsFile"}, {"role": "assistant", "content": "Ignore revisions listed in the file, one unabbreviated object name per\nline, in git-blame[1] .  Whitespace and comments beginning with # are ignored.  This option may be repeated multiple times.  Empty\nfile names will reset the list of ignored revisions.  This option will\nbe handled before the command line option --ignore-revs-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.markUnblamableLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we could not\nattribute to another commit with a * in the output of git-blame[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.markIgnoredLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we attributed to\nanother commit with a ? in the output of git-blame[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.autoSetupMerge"}, {"role": "assistant", "content": "Tells git branch , git switch and git checkout to set up new branches\nso that git-pull[1] will appropriately merge from the\nstarting point branch. Note that even if this option is not set,\nthis behavior can be chosen per-branch using the --track and --no-track options. The valid settings are: false — no\nautomatic setup is done; true — automatic setup is done when the\nstarting point is a remote-tracking branch; always — automatic setup is done when the starting point is either a\nlocal branch or remote-tracking branch; inherit — if the starting point\nhas a tracking configuration, it is copied to the new\nbranch; simple — automatic setup is done only when the starting point\nis a remote-tracking branch and the new branch has the same name as the\nremote branch. This option defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.autoSetupRebase"}, {"role": "assistant", "content": "When a new branch is created with git branch , git switch or git checkout that tracks another branch, this variable tells Git to set\nup pull to rebase instead of merge (see \"branch.<name>.rebase\").\nWhen never , rebase is never automatically set to true.\nWhen local , rebase is set to true for tracked branches of\nother local branches.\nWhen remote , rebase is set to true for tracked branches of\nremote-tracking branches.\nWhen always , rebase will be set to true for all tracking\nbranches.\nSee \"branch.autoSetupMerge\" for details on how to set up a\nbranch to track another branch.\nThis option defaults to never."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.sort"}, {"role": "assistant", "content": "This variable controls the sort ordering of branches when displayed by git-branch[1] . Without the \"--sort=<value>\" option provided, the\nvalue of this variable will be used as the default.\nSee git-for-each-ref[1] field names for valid values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.remote"}, {"role": "assistant", "content": "When on branch <name>, it tells git fetch and git push which remote to fetch from or push to.  The remote to push to\nmay be overridden with remote.pushDefault (for all branches).\nThe remote to push to, for the current branch, may be further\noverridden by branch.<name>.pushRemote .  If no remote is\nconfigured, or if you are not on any branch and there is more than\none remote defined in the repository, it defaults to origin for\nfetching and remote.pushDefault for pushing.\nAdditionally, . (a period) is the current local repository\n(a dot-repository), see branch.<name>.merge 's final note below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.pushRemote"}, {"role": "assistant", "content": "When on branch <name>, it overrides branch.<name>.remote for\npushing.  It also overrides remote.pushDefault for pushing\nfrom branch <name>.  When you pull from one place (e.g. your\nupstream) and push to another place (e.g. your own publishing\nrepository), you would want to set remote.pushDefault to\nspecify the remote to push to for all branches, and use this\noption to override it for a specific branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.merge"}, {"role": "assistant", "content": "Defines, together with branch.<name>.remote, the upstream branch\nfor the given branch. It tells git fetch / git pull / git rebase which\nbranch to merge and can also affect git push (see push.default).\nWhen in branch <name>, it tells git fetch the default\nrefspec to be marked for merging in FETCH_HEAD. The value is\nhandled like the remote part of a refspec, and must match a\nref which is fetched from the remote given by\n\"branch.<name>.remote\".\nThe merge information is used by git pull (which first calls git fetch ) to lookup the default branch for merging. Without\nthis option, git pull defaults to merge the first refspec fetched.\nSpecify multiple values to get an octopus merge.\nIf you wish to setup git pull so that it merges into <name> from\nanother branch in the local repository, you can point\nbranch.<name>.merge to the desired branch, and use the relative path\nsetting . (a period) for branch.<name>.remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.mergeOptions"}, {"role": "assistant", "content": "Sets default options for merging into branch <name>. The syntax and\nsupported options are the same as those of git-merge[1] , but\noption values containing whitespace characters are currently not\nsupported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.rebase"}, {"role": "assistant", "content": "When true, rebase the branch <name> on top of the fetched branch,\ninstead of merging the default branch from the default remote when\n\"git pull\" is run. See \"pull.rebase\" for doing this in a non\nbranch-specific manner. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase[1] for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.description"}, {"role": "assistant", "content": "Branch description, can be edited with git branch --edit-description . Branch description is\nautomatically added to the format-patch cover letter or\nrequest-pull summary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  browser.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified browser. The\nspecified command is evaluated in shell with the URLs passed\nas arguments. (See git-web--browse[1] .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  browser.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool that may be used to\nbrowse HTML help (see -w option in git-help[1] ) or a\nworking repository in gitweb (see git-instaweb[1] )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.*"}, {"role": "assistant", "content": "The bundle.* keys may appear in a bundle list file found via the git clone --bundle-uri option. These keys currently have no effect\nif placed in a repository config file, though this will change in the\nfuture. See the bundle URI design\ndocument for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.version"}, {"role": "assistant", "content": "This integer value advertises the version of the bundle list format\nused by the bundle list. Currently, the only accepted value is 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.mode"}, {"role": "assistant", "content": "This string value should be either all or any . This value describes\nwhether all of the advertised bundles are required to unbundle a\ncomplete understanding of the bundled information ( all ) or if any one\nof the listed bundle URIs is sufficient ( any )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.heuristic"}, {"role": "assistant", "content": "If this string-valued key exists, then the bundle list is designed to\nwork well with incremental git fetch commands. The heuristic signals\nthat there are additional keys available for each bundle that help\ndetermine which subset of bundles the client should download. The\nonly value currently understood is creationToken ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.<id>.*"}, {"role": "assistant", "content": "The bundle.<id>.* keys are used to describe a single item in the\nbundle list, grouped under <id> for identification purposes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.<id>.uri"}, {"role": "assistant", "content": "This string value defines the URI by which Git can reach the contents\nof this <id> . This URI may be a bundle file or another bundle list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.defaultRemote"}, {"role": "assistant", "content": "When you run git checkout <something> or git switch <something> and only have one\nremote, it may implicitly fall back on checking out and\ntracking e.g. origin/<something> . This stops working as soon\nas you have more than one remote with a <something> reference. This setting allows for setting the name of a\npreferred remote that should always win when it comes to\ndisambiguation. The typical use-case is to set this to origin . Currently this is used by git-switch[1] and git-checkout[1] when git checkout <something> or git switch <something> will checkout the <something> branch on another remote,\nand by git-worktree[1] when git worktree add refers to a\nremote branch. This setting might be used for other checkout-like\ncommands or functionality in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.guess"}, {"role": "assistant", "content": "Provides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch[1] and git-checkout[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.workers"}, {"role": "assistant", "content": "The number of parallel workers to use when updating the working tree.\nThe default is one, i.e. sequential execution. If set to a value less\nthan one, Git will use as many workers as the number of logical cores\navailable. This setting and checkout.thresholdForParallelism affect\nall commands that perform checkout. E.g. checkout, clone, reset,\nsparse-checkout, etc. Note: Parallel checkout usually delivers better performance for repositories\nlocated on SSDs or over NFS. For repositories on spinning disks and/or machines\nwith a small number of cores, the default sequential checkout often performs\nbetter. The size and compression level of a repository might also influence how\nwell the parallel version performs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.thresholdForParallelism"}, {"role": "assistant", "content": "When running parallel checkout with a small number of files, the cost\nof subprocess spawning and inter-process communication might outweigh\nthe parallelization gains. This setting allows you to define the minimum\nnumber of files for which parallel checkout should be attempted. The\ndefault is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clean.requireForce"}, {"role": "assistant", "content": "A boolean to make git-clean refuse to delete files unless -f\nis given. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.defaultRemoteName"}, {"role": "assistant", "content": "The name of the remote to create when cloning a repository.  Defaults to origin .\nIt can be overridden by passing the --origin command-line\noption to git-clone[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.rejectShallow"}, {"role": "assistant", "content": "Reject cloning a repository if it is a shallow one; this can be overridden by\npassing the --reject-shallow option on the command line.\nSee git-clone[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.filterSubmodules"}, {"role": "assistant", "content": "If a partial clone filter is provided (see --filter in git-rev-list[1] ) and --recurse-submodules is used, also apply\nthe filter to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.advice"}, {"role": "assistant", "content": "A boolean to enable/disable color in hints (e.g. when a push\nfailed, see advice.* for a list).  May be set to always , false (or never ) or auto (or true ), in which case colors\nare used only when the error output goes to a terminal. If\nunset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.advice.hint"}, {"role": "assistant", "content": "Use customized color for hints."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.highlightRecent"}, {"role": "assistant", "content": "Specify the line annotation color for git blame --color-by-age depending upon the age of the line. This setting should be set to a comma-separated list of color and\ndate settings, starting and ending with a color, the dates should be\nset from oldest to newest. The metadata will be colored with the\nspecified colors if the line was introduced before the given\ntimestamp, overwriting older timestamped colors. Instead of an absolute timestamp relative timestamps work as well,\ne.g. 2.weeks.ago is valid to address anything older than 2 weeks. It defaults to blue,12 month ago,white,1 month ago,red , which\ncolors everything older than one year blue, recent changes between\none month and one year old are kept white, and lines introduced\nwithin the last month are colored red."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.repeatedLines"}, {"role": "assistant", "content": "Use the specified color to colorize line annotations for git blame --color-lines , if they come from the same commit as the\npreceding line. Defaults to cyan."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.branch"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-branch[1] . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.branch.<slot>"}, {"role": "assistant", "content": "Use customized color for branch coloration. <slot> is one of current (the current branch), local (a local branch), remote (a remote-tracking branch in refs/remotes/), upstream (upstream tracking branch), plain (other\nrefs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.diff"}, {"role": "assistant", "content": "Whether to use ANSI escape sequences to add color to patches.\nIf this is set to always , git-diff[1] , git-log[1] , and git-show[1] will use color\nfor all patches.  If it is set to true or auto , those\ncommands will only use color when output is to the terminal.\nIf unset, then the value of color.ui is used ( auto by\ndefault). This does not affect git-format-patch[1] or the git-diff-* plumbing commands.  Can be overridden on the\ncommand line with the --color[=<when>] option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.diff.<slot>"}, {"role": "assistant", "content": "Use customized color for diff colorization. <slot> specifies\nwhich part of the patch to use the specified color, and is one\nof context (context text - plain is a historical synonym), meta (metainformation), frag (hunk header), func (function in hunk header), old (removed lines), new (added lines), commit (commit headers), whitespace (highlighting whitespace errors), oldMoved (deleted lines), newMoved (added lines), oldMovedDimmed , oldMovedAlternative , oldMovedAlternativeDimmed , newMovedDimmed , newMovedAlternative newMovedAlternativeDimmed (See the <mode> setting of --color-moved in git-diff[1] for details), contextDimmed , oldDimmed , newDimmed , contextBold , oldBold , and newBold (see git-range-diff[1] for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.decorate.<slot>"}, {"role": "assistant", "content": "Use customized color for git log --decorate output. <slot> is one\nof branch , remoteBranch , tag , stash or HEAD for local\nbranches, remote-tracking branches, tags, stash and HEAD, respectively\nand grafted for grafted commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.grep"}, {"role": "assistant", "content": "When set to always , always highlight matches.  When false (or never ), never.  When set to true or auto , use color only\nwhen the output is written to the terminal.  If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.grep.<slot>"}, {"role": "assistant", "content": "Use customized color for grep colorization. <slot> specifies which\npart of the line to use the specified color, and is one of context non-matching text in context lines (when using -A , -B , or -C ) filename filename prefix (when not using -h ) function function name lines (when using -p ) lineNumber line number prefix (when using -n ) column column number prefix (when using --column ) match matching text (same as setting matchContext and matchSelected ) matchContext matching text in context lines matchSelected matching text in selected lines. Also, used to customize the following git-log[1] subcommands: --grep , --author , and --committer . selected non-matching text in selected lines. Also, used to customize the\nfollowing git-log[1] subcommands: --grep , --author and --committer . separator separators between fields on a line ( : , - , and = )\nand between hunks ( -- )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.interactive"}, {"role": "assistant", "content": "When set to always , always use colors for interactive prompts\nand displays (such as those used by \"git-add --interactive\" and\n\"git-clean --interactive\"). When false (or never ), never.\nWhen set to true or auto , use colors only when the output is\nto the terminal. If unset, then the value of color.ui is\nused ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.interactive.<slot>"}, {"role": "assistant", "content": "Use customized color for git add --interactive and git clean\n--interactive output. <slot> may be prompt , header , help or error , for four distinct types of normal output from\ninteractive commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.pager"}, {"role": "assistant", "content": "A boolean to specify whether auto color modes should colorize\noutput going to the pager. Defaults to true; set this to false\nif your pager does not understand ANSI color codes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.push"}, {"role": "assistant", "content": "A boolean to enable/disable color in push errors. May be set to always , false (or never ) or auto (or true ), in which\ncase colors are used only when the error output goes to a terminal.\nIf unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.push.error"}, {"role": "assistant", "content": "Use customized color for push errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.remote"}, {"role": "assistant", "content": "If set, keywords at the start of the line are highlighted. The\nkeywords are \"error\", \"warning\", \"hint\" and \"success\", and are\nmatched case-insensitively. May be set to always , false (or never ) or auto (or true ). If unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.remote.<slot>"}, {"role": "assistant", "content": "Use customized color for each remote keyword. <slot> may be hint , warning , success or error which match the\ncorresponding keyword."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.showBranch"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-show-branch[1] . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.status"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-status[1] . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.status.<slot>"}, {"role": "assistant", "content": "Use customized color for status colorization. <slot> is\none of header (the header text of the status message), added or updated (files which are added but not committed), changed (files which are changed but not added in the index), untracked (files which are not tracked by Git), branch (the current branch), nobranch (the color the no branch warning is shown in, defaulting\nto red), localBranch or remoteBranch (the local and remote branch names,\nrespectively, when branch and tracking information is displayed in the\nstatus short-format), or unmerged (files which have unmerged changes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.transport"}, {"role": "assistant", "content": "A boolean to enable/disable color when pushes are rejected. May be\nset to always , false (or never ) or auto (or true ), in which\ncase colors are used only when the error output goes to a terminal.\nIf unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.transport.rejected"}, {"role": "assistant", "content": "Use customized color when a push was rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.ui"}, {"role": "assistant", "content": "This variable determines the default value for variables such\nas color.diff and color.grep that control the use of color\nper command family. Its scope will expand as more commands learn\nconfiguration to set a default for the --color option.  Set it\nto false or never if you prefer Git commands not to use\ncolor unless enabled explicitly with some other configuration\nor the --color option. Set it to always if you want all\noutput not intended for machine consumption to use color, to true or auto (this is the default since Git 1.8.4) if you\nwant such output to use color when written to the terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.ui"}, {"role": "assistant", "content": "Specify whether supported commands should output in columns.\nThis variable consists of a list of tokens separated by spaces\nor commas: These options control when the feature should be enabled\n(defaults to never ): always always show in columns never never show in columns auto show in columns if the output is to the terminal These options control layout (defaults to column ).  Setting any\nof these implies always if none of always , never , or auto are\nspecified. column fill columns before rows row fill rows before columns plain show in one column Finally, these options can be combined with a layout option (defaults\nto nodense ): dense make unequal size columns to utilize more space nodense make equal size columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.branch"}, {"role": "assistant", "content": "Specify whether to output branch listing in git branch in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.clean"}, {"role": "assistant", "content": "Specify the layout when listing items in git clean -i , which always\nshows files and directories in columns. See column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.status"}, {"role": "assistant", "content": "Specify whether to output untracked files in git status in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.tag"}, {"role": "assistant", "content": "Specify whether to output tag listings in git tag in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.cleanup"}, {"role": "assistant", "content": "This setting overrides the default of the --cleanup option in git commit . See git-commit[1] for details. Changing the\ndefault can be useful when you always want to keep lines that begin\nwith the comment character # in your log message, in which case you\nwould do git config commit.cleanup whitespace (note that you will\nhave to remove the help lines that begin with # in the commit log\ntemplate yourself, if you do this)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.gpgSign"}, {"role": "assistant", "content": "A boolean to specify whether all commits should be GPG signed.\nUse of this option when doing operations such as rebase can\nresult in a large number of commits being signed. It may be\nconvenient to use an agent to avoid typing your GPG passphrase\nseveral times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.status"}, {"role": "assistant", "content": "A boolean to enable/disable inclusion of status information in the\ncommit message template when using an editor to prepare the commit\nmessage.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.template"}, {"role": "assistant", "content": "Specify the pathname of a file to use as the template for\nnew commit messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.verbose"}, {"role": "assistant", "content": "A boolean or int to specify the level of verbosity with git commit .\nSee git-commit[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.generationVersion"}, {"role": "assistant", "content": "Specifies the type of generation number version to use when writing\nor reading the commit-graph file. If version 1 is specified, then\nthe corrected commit dates will not be written or read. Defaults to\n2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.maxNewFilters"}, {"role": "assistant", "content": "Specifies the default value for the --max-new-filters option of git\ncommit-graph write (c.f., git-commit-graph[1] )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.readChangedPaths"}, {"role": "assistant", "content": "If true, then git will use the changed-path Bloom filters in the\ncommit-graph file (if it exists, and they are present). Defaults to\ntrue. See git-commit-graph[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  completion.commands"}, {"role": "assistant", "content": "This is only used by git-completion.bash to add or remove\ncommands from the list of completed commands. Normally only\nporcelain commands and a few select others are completed. You\ncan add more commands, separated by space, in this\nvariable. Prefixing the command with - will remove it from\nthe existing list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fileMode"}, {"role": "assistant", "content": "Tells Git if the executable bit of files in the working tree\nis to be honored. Some filesystems lose the executable bit when a file that is\nmarked as executable is checked out, or checks out a\nnon-executable file with executable bit on. git-clone[1] or git-init[1] probe the filesystem\nto see if it handles the executable bit correctly\nand this variable is automatically set as necessary. A repository, however, may be on a filesystem that handles\nthe filemode correctly, and this variable is set to true when created, but later may be made accessible from another\nenvironment that loses the filemode (e.g. exporting ext4 via\nCIFS mount, visiting a Cygwin created repository with\nGit for Windows or Eclipse).\nIn such a case it may be necessary to set this variable to false .\nSee git-update-index[1] . The default is true (when core.filemode is not specified in the config file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.hideDotFiles"}, {"role": "assistant", "content": "(Windows-only) If true, mark newly-created directories and files whose\nname starts with a dot as hidden.  If dotGitOnly , only the .git/ directory is hidden, but no other files starting with a dot.  The\ndefault mode is dotGitOnly ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.ignoreCase"}, {"role": "assistant", "content": "Internal variable which enables various workarounds to enable\nGit to work better on filesystems that are not case sensitive,\nlike APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing\nfinds \"makefile\" when Git expects \"Makefile\", Git will assume\nit is really the same file, and continue to remember it as\n\"Makefile\". The default is false, except git-clone[1] or git-init[1] will probe and set core.ignoreCase true if appropriate when the repository\nis created. Git relies on the proper configuration of this variable for your operating\nand file system. Modifying this value may result in unexpected behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.precomposeUnicode"}, {"role": "assistant", "content": "This option is only used by Mac OS implementation of Git.\nWhen core.precomposeUnicode=true, Git reverts the unicode decomposition\nof filenames done by Mac OS. This is useful when sharing a repository\nbetween Mac OS and Linux or Windows.\n(Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).\nWhen false, file names are handled fully transparent by Git,\nwhich is backward compatible with older versions of Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectHFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\nbe considered equivalent to .git on an HFS+ filesystem.\nDefaults to true on Mac OS, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectNTFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\ncause problems with the NTFS filesystem, e.g. conflict with\n8.3 \"short\" names.\nDefaults to true on Windows, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitor"}, {"role": "assistant", "content": "If set to true, enable the built-in file system monitor\ndaemon for this working directory ( git-fsmonitor--daemon[1] ). Like hook-based file system monitors, the built-in file system monitor\ncan speed up Git commands that need to refresh the Git index\n(e.g. git status ) in a working directory with many files.  The\nbuilt-in monitor eliminates the need to install and maintain an\nexternal third-party tool. The built-in file system monitor is currently available only on a\nlimited set of supported platforms.  Currently, this includes Windows\nand MacOS. Otherwise, this variable contains the pathname of the \"fsmonitor\"\nhook command. This hook command is used to identify all files that may have changed\nsince the requested date/time. This information is used to speed up\ngit by avoiding unnecessary scanning of files that have not changed. See the \"fsmonitor-watchman\" section of githooks[5] . Note that if you concurrently use multiple versions of Git, such\nas one version on the command line and another version in an IDE\ntool, that the definition of core.fsmonitor was extended to\nallow boolean values in addition to hook pathnames.  Git versions\n2.35.1 and prior will not understand the boolean values and will\nconsider the \"true\" or \"false\" values as hook pathnames to be\ninvoked.  Git versions 2.26 thru 2.35.1 default to hook protocol\nV2 and will fall back to no fsmonitor (full scan).  Git versions\nprior to 2.26 default to hook protocol V1 and will silently\nassume there were no changes to report (no scan), so status\ncommands may report incomplete results.  For this reason, it is\nbest to upgrade all of your Git versions before using the built-in\nfile system monitor."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitorHookVersion"}, {"role": "assistant", "content": "Sets the protocol version to be used when invoking the\n\"fsmonitor\" hook. There are currently versions 1 and 2. When this is not set,\nversion 2 will be tried first and if it fails then version 1\nwill be tried. Version 1 uses a timestamp as input to determine\nwhich files have changes since that time but some monitors\nlike Watchman have race conditions when used with a timestamp.\nVersion 2 uses an opaque string so that the monitor can return\nsomething that can be used to determine what files have changed\nwithout race conditions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.trustctime"}, {"role": "assistant", "content": "If false, the ctime differences between the index and the\nworking tree are ignored; useful when the inode change time\nis regularly modified by something outside Git (file system\ncrawlers and some backup systems).\nSee git-update-index[1] . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.splitIndex"}, {"role": "assistant", "content": "If true, the split-index feature of the index will be used.\nSee git-update-index[1] . False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.untrackedCache"}, {"role": "assistant", "content": "Determines what to do about the untracked cache feature of the\nindex. It will be kept, if this variable is unset or set to keep . It will automatically be added if set to true . And\nit will automatically be removed, if set to false . Before\nsetting it to true , you should check that mtime is working\nproperly on your system.\nSee git-update-index[1] . keep by default, unless feature.manyFiles is enabled which sets this setting to true by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.checkStat"}, {"role": "assistant", "content": "When missing or is set to default , many fields in the stat\nstructure are checked to detect if a file has been modified\nsince Git looked at it.  When this configuration variable is\nset to minimal , sub-second part of mtime and ctime, the\nuid and gid of the owner of the file, the inode number (and\nthe device number, if Git was compiled to use it), are\nexcluded from the check among these fields, leaving only the\nwhole-second part of mtime (and ctime, if core.trustCtime is set) and the filesize to be checked. There are implementations of Git that do not leave usable values in\nsome fields (e.g. JGit); by excluding these fields from the\ncomparison, the minimal mode may help interoperability when the\nsame repository is used by these other systems at the same time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.quotePath"}, {"role": "assistant", "content": "Commands that output paths (e.g. ls-files , diff ), will\nquote \"unusual\" characters in the pathname by enclosing the\npathname in double-quotes and escaping those characters with\nbackslashes in the same way C escapes control characters (e.g. \\t for TAB, \\n for LF, \\\\ for backslash) or bytes with\nvalues larger than 0x80 (e.g. octal \\302\\265 for \"micro\" in\nUTF-8).  If this variable is set to false, bytes higher than\n0x80 are not considered \"unusual\" any more. Double-quotes,\nbackslash and control characters are always escaped regardless\nof the setting of this variable.  A simple space character is\nnot considered \"unusual\".  Many commands can output pathnames\ncompletely verbatim using the -z option. The default value\nis true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.eol"}, {"role": "assistant", "content": "Sets the line ending type to use in the working directory for\nfiles that are marked as text (either by having the text attribute set, or by having text=auto and Git auto-detecting\nthe contents as text).\nAlternatives are lf , crlf and native , which uses the platform’s\nnative line ending.  The default value is native .  See gitattributes[5] for more information on end-of-line\nconversion. Note that this value is ignored if core.autocrlf is set to true or input ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.safecrlf"}, {"role": "assistant", "content": "If true, makes Git check if converting CRLF is reversible when\nend-of-line conversion is active.  Git will verify if a command\nmodifies a file in the work tree either directly or indirectly.\nFor example, committing a file followed by checking out the\nsame file should yield the original file in the work tree.  If\nthis is not the case for the current setting of core.autocrlf , Git will reject the file.  The variable can\nbe set to \"warn\", in which case Git will only warn about an\nirreversible conversion but continue the operation. CRLF conversion bears a slight chance of corrupting data.\nWhen it is enabled, Git will convert CRLF to LF during commit and LF to\nCRLF during checkout.  A file that contains a mixture of LF and\nCRLF before the commit cannot be recreated by Git.  For text\nfiles this is the right thing to do: it corrects line endings\nsuch that we have only LF line endings in the repository.\nBut for binary files that are accidentally classified as text the\nconversion can corrupt data. If you recognize such corruption early you can easily fix it by\nsetting the conversion type explicitly in .gitattributes.  Right\nafter committing you still have the original file in your work\ntree and this file is not yet corrupted.  You can explicitly tell\nGit that this file is binary and Git will handle the file\nappropriately. Unfortunately, the desired effect of cleaning up text files with\nmixed line endings and the undesired effect of corrupting binary\nfiles cannot be distinguished.  In both cases CRLFs are removed\nin an irreversible way.  For text files this is the right thing\nto do because CRLFs are line endings, while for binary files\nconverting CRLFs corrupts data. Note, this safety check does not mean that a checkout will generate a\nfile identical to the original file for a different setting of core.eol and core.autocrlf , but only for the current one.  For\nexample, a text file with LF would be accepted with core.eol=lf and could later be checked out with core.eol=crlf , in which case the\nresulting file would contain CRLF , although the original file\ncontained LF .  However, in both work trees the line endings would be\nconsistent, that is either all LF or all CRLF , but never mixed.  A\nfile with mixed line endings would be reported by the core.safecrlf mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.autocrlf"}, {"role": "assistant", "content": "Setting this variable to \"true\" is the same as setting\nthe text attribute to \"auto\" on all files and core.eol to \"crlf\".\nSet to true if you want to have CRLF line endings in your\nworking directory and the repository has LF line endings.\nThis variable can be set to input ,\nin which case no output conversion is performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.checkRoundtripEncoding"}, {"role": "assistant", "content": "A comma and/or whitespace separated list of encodings that Git\nperforms UTF-8 round trip checks on if they are used in an working-tree-encoding attribute (see gitattributes[5] ).\nThe default value is SHIFT-JIS ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.symlinks"}, {"role": "assistant", "content": "If false, symbolic links are checked out as small plain files that\ncontain the link text. git-update-index[1] and git-add[1] will not change the recorded type to regular\nfile. Useful on filesystems like FAT that do not support\nsymbolic links. The default is true, except git-clone[1] or git-init[1] will probe and set core.symlinks false if appropriate when the repository\nis created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.gitProxy"}, {"role": "assistant", "content": "A \"proxy command\" to execute (as command host port ) instead\nof establishing direct connection to the remote server when\nusing the Git protocol for fetching. If the variable value is\nin the \"COMMAND for DOMAIN\" format, the command is applied only\non hostnames ending with the specified domain string. This variable\nmay be set multiple times and is matched in the given order;\nthe first match wins. Can be overridden by the GIT_PROXY_COMMAND environment variable\n(which always applies universally, without the special \"for\"\nhandling). The special string none can be used as the proxy command to\nspecify that no proxy be used for a given domain pattern.\nThis is useful for excluding servers inside a firewall from\nproxy use, while defaulting to a common proxy for external domains."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sshCommand"}, {"role": "assistant", "content": "If this variable is set, git fetch and git push will\nuse the specified command instead of ssh when they need to\nconnect to a remote system. The command is in the same form as\nthe GIT_SSH_COMMAND environment variable and is overridden\nwhen the environment variable is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.ignoreStat"}, {"role": "assistant", "content": "If true, Git will avoid using lstat() calls to detect if files have\nchanged by setting the \"assume-unchanged\" bit for those tracked files\nwhich it has updated identically in both the index and working tree. When files are modified outside of Git, the user will need to stage\nthe modified files explicitly (e.g. see Examples section in git-update-index[1] ).\nGit will not normally detect changes to those files. This is useful on systems where lstat() calls are very slow, such as\nCIFS/Microsoft Windows. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.preferSymlinkRefs"}, {"role": "assistant", "content": "Instead of the default \"symref\" format for HEAD\nand other symbolic reference files, use symbolic links.\nThis is sometimes needed to work with old scripts that\nexpect HEAD to be a symbolic link."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.alternateRefsCommand"}, {"role": "assistant", "content": "When advertising tips of available history from an alternate, use the shell to\nexecute the specified command instead of git-for-each-ref[1] . The\nfirst argument is the absolute path of the alternate. Output must contain one\nhex object id per line (i.e., the same as produced by git for-each-ref\n--format='%(objectname)' ). Note that you cannot generally put git for-each-ref directly into the config\nvalue, as it does not take a repository path as an argument (but you can wrap\nthe command above in a shell script)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.alternateRefsPrefixes"}, {"role": "assistant", "content": "When listing references from an alternate, list only references that begin\nwith the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref[1] . To list multiple prefixes, separate them with\nwhitespace. If core.alternateRefsCommand is set, setting core.alternateRefsPrefixes has no effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bare"}, {"role": "assistant", "content": "If true this repository is assumed to be bare and has no\nworking directory associated with it.  If this is the case a\nnumber of commands that require a working directory will be\ndisabled, such as git-add[1] or git-merge[1] . This setting is automatically guessed by git-clone[1] or git-init[1] when the repository was created.  By default a\nrepository that ends in \"/.git\" is assumed to be not bare (bare =\nfalse), while all other repositories are assumed to be bare (bare\n= true)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.worktree"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nIf GIT_COMMON_DIR environment variable is set, core.worktree\nis ignored and not used for determining the root of working tree.\nThis can be overridden by the GIT_WORK_TREE environment\nvariable and the --work-tree command-line option.\nThe value can be an absolute path or relative to the path to\nthe .git directory, which is either specified by --git-dir\nor GIT_DIR, or automatically discovered.\nIf --git-dir or GIT_DIR is specified but none of\n--work-tree, GIT_WORK_TREE and core.worktree is specified,\nthe current working directory is regarded as the top level\nof your working tree. Note that this variable is honored even when set in a configuration\nfile in a \".git\" subdirectory of a directory and its value differs\nfrom the latter directory (e.g. \"/path/to/.git/config\" has\ncore.worktree set to \"/different/path\"), which is most likely a\nmisconfiguration.  Running Git commands in the \"/path/to\" directory will\nstill use \"/different/path\" as the root of the work tree and can cause\nconfusion unless you know what you are doing (e.g. you are creating a\nread-only snapshot of the same index to a location different from the\nrepository’s usual working tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.logAllRefUpdates"}, {"role": "assistant", "content": "Enable the reflog. Updates to a ref <ref> is logged to the file\n\" $GIT_DIR/logs/<ref> \", by appending the new and old\nSHA-1, the date/time and the reason of the update, but\nonly when the file exists.  If this configuration\nvariable is set to true , missing \" $GIT_DIR/logs/<ref> \"\nfile is automatically created for branch heads (i.e. under refs/heads/ ), remote refs (i.e. under refs/remotes/ ),\nnote refs (i.e. under refs/notes/ ), and the symbolic ref HEAD .\nIf it is set to always , then a missing reflog is automatically\ncreated for any ref under refs/ . This information can be used to determine what commit\nwas the tip of a branch \"2 days ago\". This value is true by default in a repository that has\na working directory associated with it, and false by\ndefault in a bare repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.repositoryFormatVersion"}, {"role": "assistant", "content": "Internal variable identifying the repository format and layout\nversion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sharedRepository"}, {"role": "assistant", "content": "When group (or true ), the repository is made shareable between\nseveral users in a group (making sure all the files and objects are\ngroup-writable). When all (or world or everybody ), the\nrepository will be readable by all users, additionally to being\ngroup-shareable. When umask (or false ), Git will use permissions\nreported by umask(2). When 0xxx , where 0xxx is an octal number,\nfiles in the repository will have this mode value. 0xxx will override\nuser’s umask value (whereas the other options will only override\nrequested parts of the user’s umask value). Examples: 0660 will make\nthe repo read/write-able for the owner and group, but inaccessible to\nothers (equivalent to group unless umask is e.g. 0022 ). 0640 is a\nrepository that is group-readable but not group-writable.\nSee git-init[1] . False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.warnAmbiguousRefs"}, {"role": "assistant", "content": "If true, Git will warn you if the ref name you passed it is ambiguous\nand might match multiple refs in the repository. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.compression"}, {"role": "assistant", "content": "An integer -1..9, indicating a default compression level.\n-1 is the zlib default. 0 means no compression,\nand 1..9 are various speed/size tradeoffs, 9 being slowest.\nIf set, this provides a default to other compression variables,\nsuch as core.looseCompression and pack.compression ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.looseCompression"}, {"role": "assistant", "content": "An integer -1..9, indicating the compression level for objects that\nare not in a pack file. -1 is the zlib default. 0 means no\ncompression, and 1..9 are various speed/size tradeoffs, 9 being\nslowest.  If not set,  defaults to core.compression.  If that is\nnot set,  defaults to 1 (best speed)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedGitWindowSize"}, {"role": "assistant", "content": "Number of bytes of a pack file to map into memory in a\nsingle mapping operation.  Larger window sizes may allow\nyour system to process a smaller number of large pack files\nmore quickly.  Smaller window sizes will negatively affect\nperformance due to increased calls to the operating system’s\nmemory manager, but may improve performance when accessing\na large number of large pack files. Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32\nMiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should\nbe reasonable for all users/operating systems.  You probably do\nnot need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedGitLimit"}, {"role": "assistant", "content": "Maximum number of bytes to map simultaneously into memory\nfrom pack files.  If Git needs to access more than this many\nbytes at once to complete an operation it will unmap existing\nregions to reclaim virtual address space within the process. Default is 256 MiB on 32 bit platforms and 32 TiB (effectively\nunlimited) on 64 bit platforms.\nThis should be reasonable for all users/operating systems, except on\nthe largest projects.  You probably do not need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.deltaBaseCacheLimit"}, {"role": "assistant", "content": "Maximum number of bytes per thread to reserve for caching base objects\nthat may be referenced by multiple deltified objects.  By storing the\nentire decompressed base objects in a cache Git is able\nto avoid unpacking and decompressing frequently used base\nobjects multiple times. Default is 96 MiB on all platforms.  This should be reasonable\nfor all users/operating systems, except on the largest projects.\nYou probably do not need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bigFileThreshold"}, {"role": "assistant", "content": "The size of files considered \"big\", which as discussed below\nchanges the behavior of numerous git commands, as well as how\nsuch files are stored within the repository. The default is\n512 MiB. Common unit suffixes of k , m , or g are\nsupported. Files above the configured limit will be: Stored deflated in packfiles, without attempting delta compression. The default limit is primarily set with this use-case in mind. With it,\nmost projects will have their source code and other text files delta\ncompressed, but not larger binary media files. Storing large files without delta compression avoids excessive memory\nusage, at the slight expense of increased disk usage. Will be treated as if they were labeled \"binary\" (see gitattributes[5] ). e.g. git-log[1] and git-diff[1] will not compute diffs for files above this limit. Will generally be streamed when written, which avoids excessive\nmemory usage, at the cost of some fixed overhead. Commands that make\nuse of this include git-archive[1] , git-fast-import[1] , git-index-pack[1] , git-unpack-objects[1] and git-fsck[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.excludesFile"}, {"role": "assistant", "content": "Specifies the pathname to the file that contains patterns to\ndescribe paths that are not meant to be tracked, in addition\nto .gitignore (per-directory) and .git/info/exclude .\nDefaults to $XDG_CONFIG_HOME/git/ignore .\nIf $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.askPass"}, {"role": "assistant", "content": "Some commands (e.g. svn and http interfaces) that interactively\nask for a password can be told to use an external program given\nvia the value of this variable. Can be overridden by the GIT_ASKPASS environment variable. If not set, fall back to the value of the SSH_ASKPASS environment variable or, failing that, a simple password\nprompt. The external program shall be given a suitable prompt as\ncommand-line argument and write the password on its STDOUT."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.attributesFile"}, {"role": "assistant", "content": "In addition to .gitattributes (per-directory) and .git/info/attributes , Git looks into this file for attributes\n(see gitattributes[5] ). Path expansions are made the same\nway as for core.excludesFile . Its default value is $XDG_CONFIG_HOME/git/attributes . If $XDG_CONFIG_HOME is either not\nset or empty, $HOME/.config/git/attributes is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.hooksPath"}, {"role": "assistant", "content": "By default Git will look for your hooks in the $GIT_DIR/hooks directory. Set this to different path,\ne.g. /etc/git/hooks , and Git will try to find your hooks in\nthat directory, e.g. /etc/git/hooks/pre-receive instead of\nin $GIT_DIR/hooks/pre-receive . The path can be either absolute or relative. A relative path is\ntaken as relative to the directory where the hooks are run (see\nthe \"DESCRIPTION\" section of githooks[5] ). This configuration variable is useful in cases where you’d like to\ncentrally configure your Git hooks instead of configuring them on a\nper-repository basis, or as a more flexible and centralized\nalternative to having an init.templateDir where you’ve changed\ndefault hooks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.editor"}, {"role": "assistant", "content": "Commands such as commit and tag that let you edit\nmessages by launching an editor use the value of this\nvariable when it is set, and the environment variable GIT_EDITOR is not set.  See git-var[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.commentChar  core.commentString"}, {"role": "assistant", "content": "Commands such as commit and tag that let you edit\nmessages consider a line that begins with this character\ncommented, and removes them after the editor returns\n(default # ). If set to \"auto\", git-commit would select a character that is not\nthe beginning character of any line in existing commit messages. Note that these two variables are aliases of each other, and in modern\nversions of Git you are free to use a string (e.g., // or ⁑⁕⁑ ) with commentChar . Versions of Git prior to v2.45.0 will ignore commentString but will reject a value of commentChar that consists\nof more than a single ASCII byte. If you plan to use your config with\nolder and newer versions of Git, you may want to specify both: [core]\n# single character for older versions\ncommentChar = \"#\"\n# string for newer versions (which will override commentChar\n# because it comes later in the file)\ncommentString = \"//\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.filesRefLockTimeout"}, {"role": "assistant", "content": "The length of time, in milliseconds, to retry when trying to\nlock an individual reference. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 100 (i.e.,\nretry for 100ms)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedRefsTimeout"}, {"role": "assistant", "content": "The length of time, in milliseconds, to retry when trying to\nlock the packed-refs file. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e.,\nretry for 1 second)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.pager"}, {"role": "assistant", "content": "Text viewer for use by Git commands (e.g., less ).  The value\nis meant to be interpreted by the shell.  The order of preference\nis the $GIT_PAGER environment variable, then core.pager configuration, then $PAGER , and then the default chosen at\ncompile time (usually less ). When the LESS environment variable is unset, Git sets it to FRX (if LESS environment variable is set, Git does not change it at\nall).  If you want to selectively override Git’s default setting\nfor LESS , you can set core.pager to e.g. less -S .  This will\nbe passed to the shell by Git, which will translate the final\ncommand to LESS=FRX less -S . The environment does not set the S option but the command line does, instructing less to truncate\nlong lines. Similarly, setting core.pager to less -+F will\ndeactivate the F option specified by the environment from the\ncommand-line, deactivating the \"quit if one screen\" behavior of less .  One can specifically activate some flags for particular\ncommands: for example, setting pager.blame to less -S enables\nline truncation only for git blame . Likewise, when the LV environment variable is unset, Git sets it\nto -c .  You can override this setting by exporting LV with\nanother value or setting core.pager to lv +c ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.whitespace"}, {"role": "assistant", "content": "A comma separated list of common whitespace problems to\nnotice. git diff will use color.diff.whitespace to\nhighlight them, and git apply --whitespace=error will\nconsider them as errors.  You can prefix - to disable\nany of them (e.g. -trailing-space ): blank-at-eol treats trailing whitespaces at the end of the line\nas an error (enabled by default). space-before-tab treats a space character that appears immediately\nbefore a tab character in the initial indent part of the line as an\nerror (enabled by default). indent-with-non-tab treats a line that is indented with space\ncharacters instead of the equivalent tabs as an error (not enabled by\ndefault). tab-in-indent treats a tab character in the initial indent part of\nthe line as an error (not enabled by default). blank-at-eof treats blank lines added at the end of file as an error\n(enabled by default). trailing-space is a short-hand to cover both blank-at-eol and blank-at-eof . cr-at-eol treats a carriage-return at the end of line as\npart of the line terminator, i.e. with it, trailing-space does not trigger if the character before such a carriage-return\nis not a whitespace (not enabled by default). tabwidth=<n> tells how many character positions a tab occupies; this\nis relevant for indent-with-non-tab and when Git fixes tab-in-indent errors. The default tab width is 8. Allowed values are 1 to 63."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsync"}, {"role": "assistant", "content": "A comma-separated list of components of the repository that\nshould be hardened via the core.fsyncMethod when created or\nmodified.  You can disable hardening of any component by\nprefixing it with a - .  Items that are not hardened may be\nlost in the event of an unclean\tsystem shutdown. Unless you\nhave special requirements, it is recommended that you leave\nthis option empty or pick one of committed , added ,\nor all . When this configuration is encountered, the set of components starts with\nthe platform default value, disabled components are removed, and additional\ncomponents are added. none resets the state so that the platform default\nis ignored. The empty string resets the fsync configuration to the platform\ndefault. The default on most platforms is equivalent to core.fsync=committed,-loose-object , which has good performance,\nbut risks losing recent work in the event of an unclean system shutdown. none clears the set of fsynced components. loose-object hardens objects added to the repo in loose-object form. pack hardens objects added to the repo in packfile form. pack-metadata hardens packfile bitmaps and indexes. commit-graph hardens the commit-graph file. index hardens the index when it is modified. objects is an aggregate option that is equivalent to loose-object,pack . reference hardens references modified in the repo. derived-metadata is an aggregate option that is equivalent to pack-metadata,commit-graph . committed is an aggregate option that is currently equivalent to objects . This mode sacrifices some performance to ensure that work\nthat is committed to the repository with git commit or similar commands\nis hardened. added is an aggregate option that is currently equivalent to committed,index . This mode sacrifices additional performance to\nensure that the results of commands like git add and similar operations\nare hardened. all is an aggregate option that syncs all individual components above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsyncMethod"}, {"role": "assistant", "content": "A value indicating the strategy Git will use to harden repository data\nusing fsync and related primitives. fsync uses the fsync() system call or platform equivalents. writeout-only issues pagecache writeback requests, but depending on the\nfilesystem and storage hardware, data added to the repository may not be\ndurable in the event of a system crash. This is the default mode on macOS. batch enables a mode that uses writeout-only flushes to stage multiple\nupdates in the disk writeback cache and then does a single full fsync of\na dummy file to trigger the disk cache flush at the end of the operation. Currently batch mode only applies to loose-object files. Other repository\ndata is made durable as if fsync was specified. This mode is expected to\nbe as safe as fsync on macOS for repos stored on HFS+ or APFS filesystems\nand on Windows for repos stored on NTFS or ReFS filesystems."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsyncObjectFiles"}, {"role": "assistant", "content": "This boolean will enable fsync() when writing object files.\nThis setting is deprecated. Use core.fsync instead. This setting affects data added to the Git repository in loose-object\nform. When set to true, Git will issue an fsync or similar system call\nto flush caches so that loose-objects remain consistent in the face\nof a unclean system shutdown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.preloadIndex"}, {"role": "assistant", "content": "Enable parallel index preload for operations like git diff This can speed up operations like git diff and git status especially\non filesystems like NFS that have weak caching semantics and thus\nrelatively high IO latencies.  When enabled, Git will do the\nindex comparison to the filesystem data in parallel, allowing\noverlapping IO’s.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.unsetenvvars"}, {"role": "assistant", "content": "Windows-only: comma-separated list of environment variables'\nnames that need to be unset before spawning any other process.\nDefaults to PERL5LIB to account for the fact that Git for\nWindows insists on using its own Perl interpreter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.restrictinheritedhandles"}, {"role": "assistant", "content": "Windows-only: override whether spawned processes inherit only standard\nfile handles ( stdin , stdout and stderr ) or all handles. Can be auto , true or false . Defaults to auto , which means true on\nWindows 7 and later, and false on older Windows versions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.createObject"}, {"role": "assistant", "content": "You can set this to link , in which case a hardlink followed by\na delete of the source are used to make sure that object creation\nwill not overwrite existing objects. On some file system/operating system combinations, this is unreliable.\nSet this config setting to rename there; however, this will remove the\ncheck that makes sure that existing object files will not get overwritten."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.notesRef"}, {"role": "assistant", "content": "When showing commit messages, also show notes which are stored in\nthe given ref.  The ref must be fully qualified.  If the given\nref does not exist, it is not an error but means that no\nnotes should be printed. This setting defaults to \"refs/notes/commits\", and it can be overridden by\nthe GIT_NOTES_REF environment variable.  See git-notes[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.commitGraph"}, {"role": "assistant", "content": "If true, then git will read the commit-graph file (if it exists)\nto parse the graph structure of commits. Defaults to true. See git-commit-graph[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.useReplaceRefs"}, {"role": "assistant", "content": "If set to false , behave as if the --no-replace-objects option was given on the command line. See git[1] and git-replace[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.multiPackIndex"}, {"role": "assistant", "content": "Use the multi-pack-index file to track multiple packfiles using a\nsingle index. See git-multi-pack-index[1] for more\ninformation. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sparseCheckout"}, {"role": "assistant", "content": "Enable \"sparse checkout\" feature. See git-sparse-checkout[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sparseCheckoutCone"}, {"role": "assistant", "content": "Enables the \"cone mode\" of the sparse checkout feature. When the\nsparse-checkout file contains a limited set of patterns, this\nmode provides significant performance advantages. The \"non-cone\nmode\" can be requested to allow specifying more flexible\npatterns by setting this variable to false . See git-sparse-checkout[1] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.abbrev"}, {"role": "assistant", "content": "Set the length object names are abbreviated to.  If\nunspecified or set to \"auto\", an appropriate value is\ncomputed based on the approximate number of packed objects\nin your repository, which hopefully is enough for\nabbreviated object names to stay unique for some time.\nIf set to \"no\", no abbreviation is made and the object names\nare shown in their full length.\nThe minimum length is 4."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.maxTreeDepth"}, {"role": "assistant", "content": "The maximum depth Git is willing to recurse while traversing a\ntree (e.g., \"a/b/cde/f\" has a depth of 4). This is a fail-safe\nto allow Git to abort cleanly, and should not generally need to\nbe adjusted. The default is 4096."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.helper"}, {"role": "assistant", "content": "Specify an external helper to be called when a username or\npassword credential is needed; the helper may consult external\nstorage to avoid prompting the user for the credentials. This is\nnormally the name of a credential helper with possible\narguments, but may also be an absolute path with arguments or, if\npreceded by ! , shell commands. Note that multiple helpers may be defined. See gitcredentials[7] for details and examples."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.useHttpPath"}, {"role": "assistant", "content": "When acquiring credentials, consider the \"path\" component of an http\nor https URL to be important. Defaults to false. See gitcredentials[7] for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.username"}, {"role": "assistant", "content": "If no username is set for a network authentication, use this username\nby default. See credential.<context>.* below, and gitcredentials[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.<url>.*"}, {"role": "assistant", "content": "Any of the credential.* options above can be applied selectively to\nsome credentials. For example, \"credential.https://example.com.username\"\nwould set the default username only for https connections to\nexample.com. See gitcredentials[7] for details on how URLs are\nmatched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credentialCache.ignoreSIGHUP"}, {"role": "assistant", "content": "Tell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credentialStore.lockTimeoutMS"}, {"role": "assistant", "content": "The length of time, in milliseconds, for git-credential-store to retry\nwhen trying to lock the credentials file. A value of 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e., retry for\n1s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.autoRefreshIndex"}, {"role": "assistant", "content": "When using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff[1] and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.statGraphWidth"}, {"role": "assistant", "content": "Limit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git[1] .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes[5] instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.dstPrefix"}, {"role": "assistant", "content": "If set, git diff uses this destination prefix. Defaults to \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.relative"}, {"role": "assistant", "content": "If set to true , git diff does not show changes outside of the directory\nand show pathnames relative to the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.orderFile"}, {"role": "assistant", "content": "File indicating how to order files within a diff.\nSee the -O option to git-diff[1] for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\ncopy/rename detection; equivalent to the git diff option -l .  If not set, the default value is currently 1000.  This\nsetting has no effect if rename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff[1] and git-log[1] , and not lower level commands such as git-diff-files[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.submodule"}, {"role": "assistant", "content": "Specify the format in which differences in submodules are\nshown.  The \"short\" format just shows the names of the commits\nat the beginning and end of the range. The \"log\" format lists\nthe commits in the range like git-submodule[1] summary does. The \"diff\" format shows an inline diff of the changed\ncontents of the submodule. Defaults to \"short\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.wordRegex"}, {"role": "assistant", "content": "A POSIX Extended Regular Expression used to determine what is a \"word\"\nwhen performing word-by-word difference calculations.  Character\nsequences that match the regular expression are \"words\", all other\ncharacters are ignorable whitespace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.command"}, {"role": "assistant", "content": "The custom diff driver command.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.binary"}, {"role": "assistant", "content": "Set this option to true to make the diff driver treat files as\nbinary.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.wordRegex"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes[5] for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.cachetextconv"}, {"role": "assistant", "content": "Set this option to true to make the diff driver cache the text\nconversion outputs.  See gitattributes[5] for details. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 kompare meld nvimdiff opendiff p4merge smerge tkdiff vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.colorMoved"}, {"role": "assistant", "content": "If set to either a valid <mode> or a true value, moved lines\nin a diff are colored differently, for details of valid modes\nsee --color-moved in git-diff[1] . If simply set to\ntrue the default color mode will be used. When set to false,\nmoved lines are not colored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.colorMovedWS"}, {"role": "assistant", "content": "When moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.tool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool[1] .\nThis variable overrides the value configured in merge.tool .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom diff tool and requires\nthat a corresponding difftool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.guitool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool[1] when\nthe -g/--gui flag is specified. This variable overrides the value\nconfigured in merge.guitool . The list below shows the valid\nbuilt-in values. Any other value is treated as a custom diff tool\nand requires that a corresponding difftool.<guitool>.cmd variable\nis defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified diff tool.\nThe specified command is evaluated in shell with the following\nvariables available: LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and REMOTE is set to the name of the temporary file containing the contents\nof the diff post-image. See the --tool=<tool> option in git-difftool[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.trustExitCode"}, {"role": "assistant", "content": "Exit difftool if the invoked diff tool returns a non-zero exit status. See the --trust-exit-code option in git-difftool[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.guiDefault"}, {"role": "assistant", "content": "Set true to use the diff.guitool by default (equivalent to specifying\nthe --gui argument), or auto to select diff.guitool or diff.tool depending on the presence of a DISPLAY environment variable value. The\ndefault is false , where the --gui argument must be provided\nexplicitly for the diff.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.objectFormat"}, {"role": "assistant", "content": "Specify the hash algorithm to use.  The acceptable values are sha1 and sha256 .  If not specified, sha1 is assumed.  It is an error to specify\nthis key unless core.repositoryFormatVersion is 1. Note that this setting should only be set by git-init[1] or git-clone[1] .  Trying to change it after initialization will not\nwork and will produce hard-to-diagnose issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.compatObjectFormat"}, {"role": "assistant", "content": "Specify a compatitbility hash algorithm to use.  The acceptable values\nare sha1 and sha256 .  The value specified must be different from the\nvalue of extensions.objectFormat.  This allows client level\ninteroperability between git repositories whose objectFormat matches\nthis compatObjectFormat.  In particular when fully implemented the\npushes and pulls from a repository in whose objectFormat matches\ncompatObjectFormat.  As well as being able to use oids encoded in\ncompatObjectFormat in addition to oids encoded with objectFormat to\nlocally specify objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.refStorage"}, {"role": "assistant", "content": "Specify the ref storage format to use. The acceptable values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change. It is an error to specify this key unless core.repositoryFormatVersion is 1. +\nNote that this setting should only be set by git-init[1] or git-clone[1] . Trying to change it after initialization will not\nwork and will produce hard-to-diagnose issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.worktreeConfig"}, {"role": "assistant", "content": "If enabled, then worktrees will load config settings from the $GIT_DIR/config.worktree file in addition to the $GIT_COMMON_DIR/config file. Note that $GIT_COMMON_DIR and $GIT_DIR are the same for the main working tree, while other\nworking trees have $GIT_DIR equal to $GIT_COMMON_DIR/worktrees/<id>/ . The settings in the config.worktree file will override settings from any other\nconfig files. When enabling extensions.worktreeConfig , you must be careful to move\ncertain values from the common config file to the main working tree’s config.worktree file, if present: core.worktree must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . If core.bare is true, then it must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . It may also be beneficial to adjust the locations of core.sparseCheckout and core.sparseCheckoutCone depending on your desire for customizable\nsparse-checkout settings for each worktree. By default, the git\nsparse-checkout builtin enables extensions.worktreeConfig , assigns\nthese config values on a per-worktree basis, and uses the $GIT_DIR/info/sparse-checkout file to specify the sparsity for each\nworktree independently. See git-sparse-checkout[1] for more\ndetails. For historical reasons, extensions.worktreeConfig is respected\nregardless of the core.repositoryFormatVersion setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fastimport.unpackLimit"}, {"role": "assistant", "content": "If the number of objects imported by git-fast-import[1] is below this limit, then the objects will be unpacked into\nloose object files.  However, if the number of imported objects\nequals or exceeds this limit, then the pack will be stored as a\npack.  Storing the pack from a fast-import can make the import\noperation complete faster, especially on slow filesystems.  If\nnot set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.*"}, {"role": "assistant", "content": "The config settings that start with feature. modify the defaults of\na group of other config settings. These groups are created by the Git\ndeveloper community as recommended defaults and are subject to change.\nIn particular, new config options may be added with different defaults."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.experimental"}, {"role": "assistant", "content": "Enable config options that are new to Git, and are being considered for\nfuture defaults. Config settings included here may be added or removed\nwith each release, including minor version updates. These settings may\nhave unintended interactions since they are so new. Please enable this\nsetting if you are interested in providing feedback on experimental\nfeatures. The new default values are: fetch.negotiationAlgorithm=skipping may improve fetch negotiation times by\nskipping more commits at a time, reducing the number of round trips. pack.useBitmapBoundaryTraversal=true may improve bitmap traversal times by\nwalking fewer objects. pack.allowPackReuse=multi may improve the time it takes to create a pack by\nreusing objects from multiple packs instead of just one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.manyFiles"}, {"role": "assistant", "content": "Enable config options that optimize for repos with many files in the\nworking directory. With many files, commands such as git status and git checkout may be slow and these new defaults improve performance: index.skipHash=true speeds up index writes by not computing a trailing\nchecksum. Note that this will cause Git versions earlier than 2.13.0 to\nrefuse to parse the index and Git versions earlier than 2.40.0 will report\na corrupted index during git fsck . index.version=4 enables path-prefix compression in the index. core.untrackedCache=true enables the untracked cache. This setting assumes\nthat mtime is working on your machine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.recurseSubmodules"}, {"role": "assistant", "content": "This option controls whether git fetch (and the underlying fetch\nin git pull ) will recursively fetch into populated submodules.\nThis option can be set either to a boolean value or to on-demand .\nSetting it to a boolean changes the behavior of fetch and pull to\nrecurse unconditionally into submodules when set to true or to not\nrecurse at all when set to false. When set to on-demand , fetch and\npull will only recurse into a populated submodule when its\nsuperproject retrieves a commit that updates the submodule’s\nreference.\nDefaults to on-demand , or to the value of submodule.recurse if set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsckObjects"}, {"role": "assistant", "content": "If it is set to true, git-fetch-pack will check all fetched\nobjects. See transfer.fsckObjects for what’s\nchecked. Defaults to false. If not set, the value of transfer.fsckObjects is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-fetch-pack[1] instead of git-fsck[1] . See\nthe fsck.<msg-id> documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsck.skipList"}, {"role": "assistant", "content": "Acts like fsck.skipList , but is used by git-fetch-pack[1] instead of git-fsck[1] . See\nthe fsck.skipList documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.unpackLimit"}, {"role": "assistant", "content": "If the number of objects fetched over the Git native\ntransfer is below this\nlimit, then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.prune"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the --prune option was given on the command line.  See also remote.<name>.prune and the PRUNING section of git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.pruneTags"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the refs/tags/*:refs/tags/* refspec was provided when pruning,\nif not set already. This allows for setting both this option\nand fetch.prune to maintain a 1=1 mapping to upstream\nrefs. See also remote.<name>.pruneTags and the PRUNING\nsection of git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.all"}, {"role": "assistant", "content": "If true, fetch will attempt to update all available remotes.\nThis behavior can be overridden by passing --no-all or by\nexplicitly specifying one or more remote(s) to fetch from.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.output"}, {"role": "assistant", "content": "Control how ref update status is printed. Valid values are full and compact . Default value is full . See the\nOUTPUT section in git-fetch[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.negotiationAlgorithm"}, {"role": "assistant", "content": "Control how information about the commits in the local repository\nis sent when negotiating the contents of the packfile to be sent by\nthe server.  Set to \"consecutive\" to use an algorithm that walks\nover consecutive commits checking each one.  Set to \"skipping\" to\nuse an algorithm that skips commits in an effort to converge\nfaster, but may result in a larger-than-necessary packfile; or set\nto \"noop\" to not send any information at all, which will almost\ncertainly result in a larger-than-necessary packfile, but will skip\nthe negotiation step.  Set to \"default\" to override settings made\npreviously and use the default behaviour.  The default is normally\n\"consecutive\", but if feature.experimental is true, then the\ndefault is \"skipping\".  Unknown values will cause git fetch to\nerror out. See also the --negotiate-only and --negotiation-tip options to git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.showForcedUpdates"}, {"role": "assistant", "content": "Set to false to enable --no-show-forced-updates in git-fetch[1] and git-pull[1] commands.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.parallel"}, {"role": "assistant", "content": "Specifies the maximal number of fetch operations to be run in parallel\nat a time (submodules, or remotes when the --multiple option of git-fetch[1] is in effect). A value of 0 will give some reasonable default. If unset, it defaults to 1. For submodules, this setting can be overridden using the submodule.fetchJobs config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.writeCommitGraph"}, {"role": "assistant", "content": "Set to true to write a commit-graph after every git fetch command\nthat downloads a pack-file from a remote. Using the --split option,\nmost executions will create a very small commit-graph file on top of\nthe existing commit-graph file(s). Occasionally, these files will\nmerge and the write may take longer. Having an updated commit-graph\nfile helps performance of many Git commands, including git merge-base , git push -f , and git log --graph . Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.bundleURI"}, {"role": "assistant", "content": "This value stores a URI for downloading Git object data from a bundle\nURI before performing an incremental fetch from the origin Git server.\nThis is similar to how the --bundle-uri option behaves in git-clone[1] . git clone --bundle-uri will set the fetch.bundleURI value if the supplied bundle URI contains a bundle\nlist that is organized for incremental fetches. If you modify this value and your repository has a fetch.bundleCreationToken value, then remove that fetch.bundleCreationToken value before fetching from\nthe new bundle URI."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.bundleCreationToken"}, {"role": "assistant", "content": "When using fetch.bundleURI to fetch incrementally from a bundle\nlist that uses the \"creationToken\" heuristic, this config value\nstores the maximum creationToken value of the downloaded bundles.\nThis value is used to prevent downloading bundles in the future\nif the advertised creationToken is not strictly larger than this\nvalue. The creation token values are chosen by the provider serving the specific\nbundle URI. If you modify the URI at fetch.bundleURI , then be sure to\nremove the value for the fetch.bundleCreationToken value before fetching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filter.<driver>.clean"}, {"role": "assistant", "content": "The command which is used to convert the content of a worktree\nfile to a blob upon checkin.  See gitattributes[5] for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filter.<driver>.smudge"}, {"role": "assistant", "content": "The command which is used to convert the content of a blob\nobject to a worktree file upon checkout.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.attach"}, {"role": "assistant", "content": "Enable multipart/mixed attachments as the default for format-patch .  The value can also be a double quoted string\nwhich will enable attachments as the default and set the\nvalue as the boundary.  See the --attach option in git-format-patch[1] .  To countermand an earlier\nvalue, set it to an empty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.from"}, {"role": "assistant", "content": "Provides the default value for the --from option to format-patch.\nAccepts a boolean value, or a name and email address.  If false,\nformat-patch defaults to --no-from , using commit authors directly in\nthe \"From:\" field of patch mails.  If true, format-patch defaults to --from , using your committer identity in the \"From:\" field of patch\nmails and including a \"From:\" field in the body of the patch mail if\ndifferent.  If set to a non-boolean value, format-patch uses that\nvalue instead of your committer identity.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.forceInBodyFrom"}, {"role": "assistant", "content": "Provides the default value for the --[no-]force-in-body-from option to format-patch.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.numbered"}, {"role": "assistant", "content": "A boolean which can enable or disable sequence numbers in patch\nsubjects.  It defaults to \"auto\" which enables it only if there\nis more than one patch.  It can be enabled or disabled for all\nmessages by setting it to \"true\" or \"false\".  See --numbered\noption in git-format-patch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.headers"}, {"role": "assistant", "content": "Additional email headers to include in a patch to be submitted\nby mail.  See git-format-patch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.to  format.cc"}, {"role": "assistant", "content": "Additional recipients to include in a patch to be submitted\nby mail.  See the --to and --cc options in git-format-patch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.subjectPrefix"}, {"role": "assistant", "content": "The default for format-patch is to output files with the [PATCH] subject prefix. Use this variable to change that prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.coverFromDescription"}, {"role": "assistant", "content": "The default mode for format-patch to determine which parts of\nthe cover letter will be populated using the branch’s\ndescription. See the --cover-from-description option in git-format-patch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signature"}, {"role": "assistant", "content": "The default for format-patch is to output a signature containing\nthe Git version number. Use this variable to change that default.\nSet this variable to the empty string (\"\") to suppress\nsignature generation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signatureFile"}, {"role": "assistant", "content": "Works just like format.signature except the contents of the\nfile specified by this variable will be used as the signature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.suffix"}, {"role": "assistant", "content": "The default for format-patch is to output files with the suffix .patch . Use this variable to change that suffix (make sure to\ninclude the dot if you want it)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.encodeEmailHeaders"}, {"role": "assistant", "content": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047) for email transmission.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.pretty"}, {"role": "assistant", "content": "The default pretty format for log/show/whatchanged command.\nSee git-log[1] , git-show[1] , git-whatchanged[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.thread"}, {"role": "assistant", "content": "The default threading style for git format-patch .  Can be\na boolean value, or shallow or deep . shallow threading\nmakes every mail a reply to the head of the series,\nwhere the head is chosen from the cover letter, the --in-reply-to , and the first patch mail, in this order. deep threading makes every mail a reply to the previous one.\nA true boolean value is the same as shallow , and a false\nvalue disables threading."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signOff"}, {"role": "assistant", "content": "A boolean value which lets you enable the -s/--signoff option of\nformat-patch by default. Note: Adding the Signed-off-by trailer to a\npatch should be a conscious act and means that you certify you have\nthe rights to submit this work under the same open source license.\nPlease see the SubmittingPatches document for further discussion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.coverLetter"}, {"role": "assistant", "content": "A boolean that controls whether to generate a cover-letter when\nformat-patch is invoked, but in addition can be set to \"auto\", to\ngenerate a cover-letter only when there’s more than one patch.\nDefault is false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.outputDirectory"}, {"role": "assistant", "content": "Set a custom directory to store the resulting files instead of the\ncurrent working directory. All directory components will be created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.filenameMaxLength"}, {"role": "assistant", "content": "The maximum length of the output filenames generated by the format-patch command; defaults to 64.  Can be overridden\nby the --filename-max-length=<n> command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.useAutoBase"}, {"role": "assistant", "content": "A boolean value which lets you enable the --base=auto option of\nformat-patch by default. Can also be set to \"whenAble\" to allow\nenabling --base=auto if a suitable base is available, but to skip\nadding base info otherwise without the format dying."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.notes"}, {"role": "assistant", "content": "Provides the default value for the --notes option to\nformat-patch. Accepts a boolean value, or a ref which specifies\nwhere to get notes. If false, format-patch defaults to --no-notes . If true, format-patch defaults to --notes . If\nset to a non-boolean value, format-patch defaults to --notes=<ref> , where ref is the non-boolean value. Defaults\nto false. If one wishes to use the ref refs/notes/true , please use that literal\ninstead. This configuration can be specified multiple times in order to allow\nmultiple notes refs to be included. In that case, it will behave\nsimilarly to multiple --[no-]notes[=] options passed in. That is, a\nvalue of true will show the default notes, a value of <ref> will\nalso show notes from that notes ref and a value of false will negate\nprevious configurations and not show notes. For example, [format]\n\tnotes = true\n\tnotes = foo\n\tnotes = false\n\tnotes = bar will only show notes from refs/notes/bar ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.mboxrd"}, {"role": "assistant", "content": "A boolean value which enables the robust \"mboxrd\" format when --stdout is in use to escape \"^>+From \" lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.noprefix"}, {"role": "assistant", "content": "If set, do not show any source or destination prefix in patches.\nThis is equivalent to the diff.noprefix option used by git\ndiff (but which is not respected by format-patch ). Note that\nby setting this, the receiver of any patches you generate will\nhave to apply them using the -p0 option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsck.<msg-id>"}, {"role": "assistant", "content": "During fsck git may find issues with legacy data which\nwouldn’t be generated by current versions of git, and which\nwouldn’t be sent over the wire if transfer.fsckObjects was\nset. This feature is intended to support working with legacy\nrepositories containing such data. Setting fsck.<msg-id> will be picked up by git-fsck[1] , but\nto accept pushes of such data set receive.fsck.<msg-id> instead, or\nto clone or fetch it set fetch.fsck.<msg-id> . The rest of the documentation discusses fsck.* for brevity, but the\nsame applies for the corresponding receive.fsck.* and fetch.fsck.* . variables. Unlike variables like color.ui and core.editor , the receive.fsck.<msg-id> and fetch.fsck.<msg-id> variables will not\nfall back on the fsck.<msg-id> configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. When fsck.<msg-id> is set, errors can be switched to warnings and\nvice versa by configuring the fsck.<msg-id> setting where the <msg-id> is the fsck message ID and the value is one of error , warn or ignore . For convenience, fsck prefixes the error/warning\nwith the message ID, e.g. \"missingEmail: invalid author/committer\nline - missing email\" means that setting fsck.missingEmail = ignore will hide that issue. In general, it is better to enumerate existing objects with problems\nwith fsck.skipList , instead of listing the kind of breakages these\nproblematic objects share to be ignored, as doing the latter will\nallow new instances of the same breakages go unnoticed. Setting an unknown fsck.<msg-id> value will cause fsck to die, but\ndoing the same for receive.fsck.<msg-id> and fetch.fsck.<msg-id> will only cause git to warn. See the Fsck Messages section of git-fsck[1] for supported\nvalues of <msg-id> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsck.skipList"}, {"role": "assistant", "content": "The path to a list of object names (i.e. one unabbreviated SHA-1 per\nline) that are known to be broken in a non-fatal way and should\nbe ignored. On versions of Git 2.20 and later, comments ( # ), empty\nlines, and any leading and trailing whitespace are ignored. Everything\nbut a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted\ndespite early commits containing errors that can be safely ignored,\nsuch as invalid committer email addresses.  Note: corrupt objects\ncannot be skipped with this setting. Like fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants. Unlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not\nfall back on the fsck.skipList configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names\nlist should be sorted. This was never a requirement; the object names\ncould appear in any order, but when reading the list we tracked whether\nthe list was sorted for the purposes of an internal binary search\nimplementation, which could save itself some work with an already sorted\nlist. Unless you had a humongous list there was no reason to go out of\nyour way to pre-sort the list. After Git version 2.20 a hash implementation\nis used instead, so there’s now no reason to pre-sort the list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsmonitor.allowRemote"}, {"role": "assistant", "content": "By default, the fsmonitor daemon refuses to work with network-mounted\nrepositories. Setting fsmonitor.allowRemote to true overrides this\nbehavior.  Only respected when core.fsmonitor is set to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsmonitor.socketDir"}, {"role": "assistant", "content": "This Mac OS-specific option, if set, specifies the directory in\nwhich to create the Unix domain socket used for communication\nbetween the fsmonitor daemon and various Git commands. The directory must\nreside on a native Mac OS filesystem.  Only respected when core.fsmonitor is set to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.aggressiveDepth"}, {"role": "assistant", "content": "The depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn’t in use. See the documentation for the --depth option in git-repack[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.aggressiveWindow"}, {"role": "assistant", "content": "The window size parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 250, which is a much more aggressive window size than\nthe default --window of 10. See the documentation for the --window option in git-repack[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.auto"}, {"role": "assistant", "content": "When there are approximately more than this many loose\nobjects in the repository, git gc --auto will pack them.\nSome Porcelain commands use this command to perform a\nlight-weight garbage collection from time to time.  The\ndefault value is 6700. Setting this to 0 disables not only automatic packing based on the\nnumber of loose objects, but also any other heuristic git gc --auto will\notherwise use to determine if there’s work to do, such as gc.autoPackLimit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.autoPackLimit"}, {"role": "assistant", "content": "When there are more than this many packs that are not\nmarked with *.keep file in the repository, git gc\n--auto consolidates them into one larger pack.  The\ndefault value is 50.  Setting this to 0 disables it.\nSetting gc.auto to 0 will also disable this. See the gc.bigPackThreshold configuration variable below. When in\nuse, it’ll affect how the auto pack limit works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.autoDetach"}, {"role": "assistant", "content": "Make git gc --auto return immediately and run in the background\nif the system supports it. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.bigPackThreshold"}, {"role": "assistant", "content": "If non-zero, all non-cruft packs larger than this limit are kept\nwhen git gc is run. This is very similar to --keep-largest-pack except that all non-cruft packs that meet\nthe threshold are kept, not just the largest pack. Defaults to\nzero. Common unit suffixes of k , m , or g are supported. Note that if the number of kept packs is more than gc.autoPackLimit,\nthis configuration variable is ignored, all packs except the base pack\nwill be repacked. After this the number of packs should go below\ngc.autoPackLimit and gc.bigPackThreshold should be respected again. If the amount of memory estimated for git repack to run smoothly is\nnot available and gc.bigPackThreshold is not set, the largest pack\nwill also be excluded (this is the equivalent of running git gc with --keep-largest-pack )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.writeCommitGraph"}, {"role": "assistant", "content": "If true, then gc will rewrite the commit-graph file when git-gc[1] is run. When using git gc --auto the commit-graph will be updated if housekeeping is\nrequired. Default is true. See git-commit-graph[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.logExpiry"}, {"role": "assistant", "content": "If the file gc.log exists, then git gc --auto will print\nits content and exit with status zero instead of running\nunless that file is more than gc.logExpiry old.  Default is\n\"1.day\".  See gc.pruneExpire for more ways to specify its\nvalue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.packRefs"}, {"role": "assistant", "content": "Running git pack-refs in a repository renders it\nunclonable by Git versions prior to 1.5.1.2 over dumb\ntransports such as HTTP.  This variable determines whether git gc runs git pack-refs . This can be set to notbare to enable it within all non-bare repos or it can be set to a\nboolean value.  The default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.cruftPacks"}, {"role": "assistant", "content": "Store unreachable objects in a cruft pack (see git-repack[1] ) instead of as loose objects. The default\nis true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.maxCruftSize"}, {"role": "assistant", "content": "Limit the size of new cruft packs when repacking. When\nspecified in addition to --max-cruft-size , the command line\noption takes priority. See the --max-cruft-size option of git-repack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.pruneExpire"}, {"role": "assistant", "content": "When git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using\ncruft packs via gc.cruftPacks or --cruft ).  Override the\ngrace period with this config variable.  The value \"now\" may be\nused to disable this grace period and always prune unreachable\nobjects immediately, or \"never\" may be used to suppress pruning.\nThis feature helps prevent corruption when git gc runs\nconcurrently with another process writing to the repository; see\nthe \"NOTES\" section of git-gc[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.worktreePruneExpire"}, {"role": "assistant", "content": "When git gc is run, it calls git worktree prune --expire 3.months.ago .\nThis config variable can be used to set a different grace\nperiod. The value \"now\" may be used to disable the grace\nperiod and prune $GIT_DIR/worktrees immediately, or \"never\"\nmay be used to suppress pruning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.reflogExpire  gc.<pattern>.reflogExpire"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time; defaults to 90 days. The value \"now\" expires all\nentries immediately, and \"never\" suppresses expiration\naltogether. With \"<pattern>\" (e.g.\n\"refs/stash\") in the middle the setting applies only to\nthe refs that match the <pattern>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.reflogExpireUnreachable  gc.<pattern>.reflogExpireUnreachable"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time and are not reachable from the current tip;\ndefaults to 30 days. The value \"now\" expires all entries\nimmediately, and \"never\" suppresses expiration altogether.\nWith \"<pattern>\" (e.g. \"refs/stash\")\nin the middle, the setting applies only to the refs that\nmatch the <pattern>. These types of entries are generally created as a result of using git\ncommit --amend or git rebase and are the commits prior to the amend\nor rebase occurring.  Since these changes are not part of the current\nproject most users will want to expire them sooner, which is why the\ndefault is more aggressive than gc.reflogExpire ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.recentObjectsHook"}, {"role": "assistant", "content": "When considering whether or not to remove an object (either when\ngenerating a cruft pack or storing unreachable objects as\nloose), use the shell to execute the specified command(s).\nInterpret their output as object IDs which Git will consider as\n\"recent\", regardless of their age. By treating their mtimes as\n\"now\", any objects (and their descendants) mentioned in the\noutput will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing\nelse. Objects which cannot be found in the repository are ignored.\nMultiple hooks are supported, but all must exit successfully, else the\noperation (either generating a cruft pack or unpacking unreachable\nobjects) will be halted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.repackFilter"}, {"role": "assistant", "content": "When repacking, use the specified filter to move certain\nobjects into a separate packfile.  See the --filter=<filter-spec> option of git-repack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.repackFilterTo"}, {"role": "assistant", "content": "When repacking and using a filter, see gc.repackFilter , the\nspecified location will be used to create the packfile\ncontaining the filtered out objects. WARNING: The\nspecified location should be accessible, using for example the\nGit alternates mechanism, otherwise the repo could be\nconsidered corrupt by Git as it migh not be able to access the\nobjects in that packfile. See the --filter-to=<dir> option\nof git-repack[1] and the objects/info/alternates section of gitrepository-layout[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.rerereResolved"}, {"role": "assistant", "content": "Records of conflicted merge you resolved earlier are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 60 days.  See git-rerere[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.rerereUnresolved"}, {"role": "assistant", "content": "Records of conflicted merge you have not resolved are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 15 days.  See git-rerere[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.commitMsgAnnotation"}, {"role": "assistant", "content": "Append this string to each commit message. Set to empty string\nto disable this feature. Defaults to \"via git-CVS emulator\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.enabled"}, {"role": "assistant", "content": "Whether the CVS server interface is enabled for this repository.\nSee git-cvsserver[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.logFile"}, {"role": "assistant", "content": "Path to a log file where the CVS server interface well…​ logs\nvarious stuff. See git-cvsserver[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.usecrlfattr"}, {"role": "assistant", "content": "If true, the server will look up the end-of-line conversion\nattributes for files to determine the -k modes to use. If\nthe attributes force Git to treat a file as text,\nthe -k mode will be left blank so CVS clients will\ntreat it as text. If they suppress text conversion, the file\nwill be set with -kb mode, which suppresses any newline munging\nthe client might otherwise do. If the attributes do not allow\nthe file type to be determined, then gitcvs.allBinary is\nused. See gitattributes[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.allBinary"}, {"role": "assistant", "content": "This is used if gitcvs.usecrlfattr does not resolve\nthe correct -kb mode to use. If true, all\nunresolved files are sent to the client in\nmode -kb . This causes the client to treat them\nas binary files, which suppresses any newline munging it\notherwise might do. Alternatively, if it is set to \"guess\",\nthen the contents of the file are examined to decide if\nit is binary, similar to core.autocrlf ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbName"}, {"role": "assistant", "content": "Database used by git-cvsserver to cache revision information\nderived from the Git repository. The exact meaning depends on the\nused database driver, for SQLite (which is the default driver) this\nis a filename. Supports variable substitution (see git-cvsserver[1] for details). May not contain semicolons ( ; ).\nDefault: %Ggitcvs.%m.sqlite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbDriver"}, {"role": "assistant", "content": "Used Perl DBI driver. You can specify any available driver\nfor this here, but it might not work. git-cvsserver is tested\nwith DBD::SQLite , reported to work with DBD::Pg , and\nreported not to work with DBD::mysql . Experimental feature.\nMay not contain double colons ( : ). Default: SQLite .\nSee git-cvsserver[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbUser, gitcvs.dbPass"}, {"role": "assistant", "content": "Database user and password. Only useful if setting gitcvs.dbDriver ,\nsince SQLite has no concept of database users and/or passwords. gitcvs.dbUser supports variable substitution (see git-cvsserver[1] for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbTableNamePrefix"}, {"role": "assistant", "content": "Database table name prefix.  Prepended to the names of any\ndatabase tables used, allowing a single database to be used\nfor several repositories.  Supports variable substitution (see git-cvsserver[1] for details).  Any non-alphabetic\ncharacters will be replaced with underscores."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addEmbeddedRepo"}, {"role": "assistant", "content": "Shown when the user accidentally adds one\ngit repo inside of another."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addEmptyPathspec"}, {"role": "assistant", "content": "Shown when the user runs git add without providing\nthe pathspec parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addIgnoredFile"}, {"role": "assistant", "content": "Shown when the user attempts to add an ignored file to\nthe index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  amWorkDir"}, {"role": "assistant", "content": "Shown when git-am[1] fails to apply a patch\nfile, to tell the user the location of the file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ambiguousFetchRefspec"}, {"role": "assistant", "content": "Shown when a fetch refspec for multiple remotes maps to\nthe same remote-tracking branch namespace and causes branch\ntracking set-up to fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkoutAmbiguousRemoteBranchName"}, {"role": "assistant", "content": "Shown when the argument to git-checkout[1] and git-switch[1] ambiguously resolves to a\nremote tracking branch on more than one remote in\nsituations where an unambiguous argument would have\notherwise caused a remote-tracking branch to be\nchecked out. See the checkout.defaultRemote configuration variable for how to set a given remote\nto be used by default in some situations where this\nadvice would be printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitBeforeMerge"}, {"role": "assistant", "content": "Shown when git-merge[1] refuses to\nmerge to avoid overwriting local changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  detachedHead"}, {"role": "assistant", "content": "Shown when the user uses git-switch[1] or git-checkout[1] to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diverging"}, {"role": "assistant", "content": "Shown when a fast-forward is not possible."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetchShowForcedUpdates"}, {"role": "assistant", "content": "Shown when git-fetch[1] takes a long time\nto calculate forced updates after ref updates, or to warn\nthat the check is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  forceDeleteBranch"}, {"role": "assistant", "content": "Shown when the user tries to delete a not fully merged\nbranch without the force option set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ignoredHook"}, {"role": "assistant", "content": "Shown when a hook is ignored because the hook is not\nset as executable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  implicitIdentity"}, {"role": "assistant", "content": "Shown when the user’s information is guessed from the\nsystem username and domain name, to tell the user how to\nset their identity configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergeConflict"}, {"role": "assistant", "content": "Shown when various commands stop because of conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  nestedTag"}, {"role": "assistant", "content": "Shown when a user attempts to recursively tag a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushAlreadyExists"}, {"role": "assistant", "content": "Shown when git-push[1] rejects an update that\ndoes not qualify for fast-forwarding (e.g., a tag.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushFetchFirst"}, {"role": "assistant", "content": "Shown when git-push[1] rejects an update that\ntries to overwrite a remote ref that points at an\nobject we do not have."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNeedsForce"}, {"role": "assistant", "content": "Shown when git-push[1] rejects an update that\ntries to overwrite a remote ref that points at an\nobject that is not a commit-ish, or make the remote\nref point at an object that is not a commit-ish."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNonFFCurrent"}, {"role": "assistant", "content": "Shown when git-push[1] fails due to a\nnon-fast-forward update to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNonFFMatching"}, {"role": "assistant", "content": "Shown when the user ran git-push[1] and pushed\n\"matching refs\" explicitly (i.e. used : , or\nspecified a refspec that isn’t the current branch) and\nit resulted in a non-fast-forward error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushRefNeedsUpdate"}, {"role": "assistant", "content": "Shown when git-push[1] rejects a forced update of\na branch when its remote-tracking ref has updates that we\ndo not have locally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushUnqualifiedRefname"}, {"role": "assistant", "content": "Shown when git-push[1] gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushUpdateRejected"}, {"role": "assistant", "content": "Set this variable to false if you want to disable pushNonFFCurrent , pushNonFFMatching , pushAlreadyExists , pushFetchFirst , pushNeedsForce , and pushRefNeedsUpdate simultaneously."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  refSyntax"}, {"role": "assistant", "content": "Shown when the user provides an illegal ref name, to\ntell the user about the ref syntax documentation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  resetNoRefresh"}, {"role": "assistant", "content": "Shown when git-reset[1] takes more than 2\nseconds to refresh the index after reset, to tell the user\nthat they can use the --no-refresh option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  resolveConflict"}, {"role": "assistant", "content": "Shown by various commands when conflicts\nprevent the operation from being performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rmHints"}, {"role": "assistant", "content": "Shown on failure in the output of git-rm[1] , to\ngive directions on how to proceed from the current state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sequencerInUse"}, {"role": "assistant", "content": "Shown when a sequencer command is already in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  skippedCherryPicks"}, {"role": "assistant", "content": "Shown when git-rebase[1] skips a commit that has already\nbeen cherry-picked onto the upstream branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusAheadBehind"}, {"role": "assistant", "content": "Shown when git-status[1] computes the ahead/behind\ncounts for a local ref compared to its remote tracking ref,\nand that calculation takes longer than expected. Will not\nappear if status.aheadBehind is false or the option --no-ahead-behind is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusHints"}, {"role": "assistant", "content": "Show directions on how to proceed from the current\nstate in the output of git-status[1] , in\nthe template shown when writing commit messages in git-commit[1] , and in the help message shown\nby git-switch[1] or git-checkout[1] when switching branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusUoption"}, {"role": "assistant", "content": "Shown when git-status[1] takes more than 2\nseconds to enumerate untracked files, to tell the user that\nthey can use the -u option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submoduleAlternateErrorStrategyDie"}, {"role": "assistant", "content": "Shown when a submodule.alternateErrorStrategy option\nconfigured to \"die\" causes a fatal error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submoduleMergeConflict"}, {"role": "assistant", "content": "Advice shown when a non-trivial submodule merge conflict is\nencountered."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodulesNotUpdated"}, {"role": "assistant", "content": "Shown when a user runs a submodule command that fails\nbecause git submodule update --init was not run."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  suggestDetachingHead"}, {"role": "assistant", "content": "Shown when git-switch[1] refuses to detach HEAD\nwithout the explicit --detach option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  updateSparsePath"}, {"role": "assistant", "content": "Shown when either git-add[1] or git-rm[1] is asked to update index entries outside the current sparse\ncheckout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  waitingForEditor"}, {"role": "assistant", "content": "Shown when Git is waiting for editor input. Relevant\nwhen e.g. the editor is not launched inside the terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktreeAddOrphan"}, {"role": "assistant", "content": "Shown when the user tries to create a worktree from an\ninvalid reference, to tell the user how to create a new unborn\nbranch instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  context"}, {"role": "assistant", "content": "non-matching text in context lines (when using -A , -B , or -C )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filename"}, {"role": "assistant", "content": "filename prefix (when not using -h )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  function"}, {"role": "assistant", "content": "function name lines (when using -p )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lineNumber"}, {"role": "assistant", "content": "line number prefix (when using -n )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column"}, {"role": "assistant", "content": "column number prefix (when using --column )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  match"}, {"role": "assistant", "content": "matching text (same as setting matchContext and matchSelected )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  matchContext"}, {"role": "assistant", "content": "matching text in context lines"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  matchSelected"}, {"role": "assistant", "content": "matching text in selected lines. Also, used to customize the following git-log[1] subcommands: --grep , --author , and --committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  selected"}, {"role": "assistant", "content": "non-matching text in selected lines. Also, used to customize the\nfollowing git-log[1] subcommands: --grep , --author and --committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  separator"}, {"role": "assistant", "content": "separators between fields on a line ( : , - , and = )\nand between hunks ( -- )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  always"}, {"role": "assistant", "content": "always show in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  never"}, {"role": "assistant", "content": "never show in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  auto"}, {"role": "assistant", "content": "show in columns if the output is to the terminal"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column"}, {"role": "assistant", "content": "fill columns before rows"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  row"}, {"role": "assistant", "content": "fill rows before columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  plain"}, {"role": "assistant", "content": "show in one column"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  dense"}, {"role": "assistant", "content": "make unequal size columns to utilize more space"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  nodense"}, {"role": "assistant", "content": "make equal size columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff"}, {"role": "assistant", "content": "compares the (i)ndex and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff --cached"}, {"role": "assistant", "content": "compares a (c)ommit and the (i)ndex;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.category  gitweb.description  gitweb.owner  gitweb.url"}, {"role": "assistant", "content": "See gitweb[1] for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.avatar  gitweb.blame  gitweb.grep  gitweb.highlight  gitweb.patches  gitweb.pickaxe  gitweb.remote_heads  gitweb.showSizes  gitweb.snapshot"}, {"role": "assistant", "content": "See gitweb.conf[5] for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.program"}, {"role": "assistant", "content": "Use this custom program instead of \" gpg \" found on $PATH when\nmaking or verifying a PGP signature. The program must support the\nsame command-line interface as GPG, namely, to verify a detached\nsignature, \" gpg --verify $signature - <$file \" is run, and the\nprogram is expected to signal a good signature by exiting with\ncode 0.  To generate an ASCII-armored detached signature, the\nstandard input of \" gpg -bsau $key \" is fed with the contents to be\nsigned, and the program is expected to send the result to its\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.format"}, {"role": "assistant", "content": "Specifies which key format to use when signing with --gpg-sign .\nDefault is \"openpgp\". Other possible values are \"x509\", \"ssh\". See gitformat-signature[5] for the signature format, which differs\nbased on the selected gpg.format ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.<format>.program"}, {"role": "assistant", "content": "Use this to customize the program used for the signing format you\nchose. (see gpg.program and gpg.format ) gpg.program can still\nbe used as a legacy synonym for gpg.openpgp.program . The default\nvalue for gpg.x509.program is \"gpgsm\" and gpg.ssh.program is \"ssh-keygen\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.minTrustLevel"}, {"role": "assistant", "content": "Specifies a minimum trust level for signature verification.  If\nthis option is unset, then signature verification for merge\noperations requires a key with at least marginal trust.  Other\noperations that perform signature verification require a key\nwith at least undefined trust.  Setting this option overrides\nthe required trust-level for all operations.  Supported values,\nin increasing order of significance: undefined never marginal fully ultimate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.defaultKeyCommand"}, {"role": "assistant", "content": "This command will be run when user.signingkey is not set and a ssh\nsignature is requested. On successful exit a valid ssh public key\nprefixed with key:: is expected in the first line of its output.\nThis allows for a script doing a dynamic lookup of the correct public\nkey when it is impractical to statically configure user.signingKey .\nFor example when keys or SSH Certificates are rotated frequently or\nselection of the right key depends on external factors unknown to git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.allowedSignersFile"}, {"role": "assistant", "content": "A file containing ssh public keys which you are willing to trust.\nThe file consists of one or more lines of principals followed by an ssh\npublic key.\ne.g.: user1@example.com,user2@example.com ssh-rsa AAAAX1... See ssh-keygen(1) \"ALLOWED SIGNERS\" for details.\nThe principal is only used to identify the key and is available when\nverifying a signature. SSH has no concept of trust levels like gpg does. To be able to differentiate\nbetween valid signatures and trusted signatures the trust level of a signature\nverification is set to fully when the public key is present in the allowedSignersFile.\nOtherwise the trust level is undefined and git verify-commit/tag will fail. This file can be set to a location outside of the repository and every developer\nmaintains their own trust store. A central repository server could generate this\nfile automatically from ssh keys with push access to verify the code against.\nIn a corporate setting this file is probably generated at a global location\nfrom automation that already handles developer ssh keys. A repository that only allows signed commits can store the file\nin the repository itself using a path relative to the top-level of the working tree.\nThis way only committers with an already valid key can add or change keys in the keyring. Since OpensSSH 8.8 this file allows specifying a key lifetime using valid-after &\nvalid-before options. Git will mark signatures as valid if the signing key was\nvalid at the time of the signature’s creation. This allows users to change a\nsigning key without invalidating all previously made signatures. Using a SSH CA key with the cert-authority option\n(see ssh-keygen(1) \"CERTIFICATES\") is also valid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.revocationFile"}, {"role": "assistant", "content": "Either a SSH KRL or a list of revoked public keys (without the principal prefix).\nSee ssh-keygen(1) for details.\nIf a public key is found in this file then it will always be treated\nas having trust level \"never\" and signatures will show as invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.lineNumber"}, {"role": "assistant", "content": "If set to true, enable -n option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.column"}, {"role": "assistant", "content": "If set to true, enable the --column option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.patternType"}, {"role": "assistant", "content": "Set the default matching behavior. Using a value of basic , extended , fixed , or perl will enable the --basic-regexp , --extended-regexp , --fixed-strings , or --perl-regexp option accordingly, while the\nvalue default will use the grep.extendedRegexp option to choose\nbetween basic and extended ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.extendedRegexp"}, {"role": "assistant", "content": "If set to true, enable --extended-regexp option by default. This\noption is ignored when the grep.patternType option is set to a value\nother than default ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.threads"}, {"role": "assistant", "content": "Number of grep worker threads to use. If unset (or set to 0), Git will\nuse as many threads as the number of logical cores available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.fullName"}, {"role": "assistant", "content": "If set to true, enable --full-name option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.fallbackToNoIndex"}, {"role": "assistant", "content": "If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.commitMsgWidth"}, {"role": "assistant", "content": "Defines how wide the commit message window is in the git-gui[1] . \"75\" is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.diffContext"}, {"role": "assistant", "content": "Specifies how many context lines should be used in calls to diff\nmade by the git-gui[1] . The default is \"5\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.displayUntracked"}, {"role": "assistant", "content": "Determines if git-gui[1] shows untracked files\nin the file list. The default is \"true\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.encoding"}, {"role": "assistant", "content": "Specifies the default character encoding to use for displaying of\nfile contents in git-gui[1] and gitk[1] .\nIt can be overridden by setting the encoding attribute\nfor relevant files (see gitattributes[5] ).\nIf this option is not set, the tools default to the\nlocale encoding."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.matchTrackingBranch"}, {"role": "assistant", "content": "Determines if new branches created with git-gui[1] should\ndefault to tracking remote branches with matching names or\nnot. Default: \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.newBranchTemplate"}, {"role": "assistant", "content": "Is used as a suggested name when creating new branches using the git-gui[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.pruneDuringFetch"}, {"role": "assistant", "content": "\"true\" if git-gui[1] should prune remote-tracking branches when\nperforming a fetch. The default value is \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.trustmtime"}, {"role": "assistant", "content": "Determines if git-gui[1] should trust the file modification\ntimestamp or not. By default the timestamps are not trusted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.spellingDictionary"}, {"role": "assistant", "content": "Specifies the dictionary used for spell checking commit messages in\nthe git-gui[1] . When set to \"none\" spell checking is turned\noff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.fastCopyBlame"}, {"role": "assistant", "content": "If true, git gui blame uses -C instead of -C -C for original\nlocation detection. It makes blame significantly faster on huge\nrepositories at the expense of less thorough copy detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.copyBlameThreshold"}, {"role": "assistant", "content": "Specifies the threshold to use in git gui blame original location\ndetection, measured in alphanumeric characters. See the git-blame[1] manual for more information on copy detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.blamehistoryctx"}, {"role": "assistant", "content": "Specifies the radius of history context in days to show in gitk[1] for the selected commit, when the Show History\nContext menu item is invoked from git gui blame . If this\nvariable is set to zero, the whole history is shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.cmd"}, {"role": "assistant", "content": "Specifies the shell command line to execute when the corresponding item\nof the git-gui[1] Tools menu is invoked. This option is\nmandatory for every tool. The command is executed from the root of\nthe working directory, and in the environment it receives the name of\nthe tool as GIT_GUITOOL , the name of the currently selected file as FILENAME , and the name of the current branch as CUR_BRANCH (if\nthe head is detached, CUR_BRANCH is empty)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.needsFile"}, {"role": "assistant", "content": "Run the tool only if a diff is selected in the GUI. It guarantees\nthat FILENAME is not empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.noConsole"}, {"role": "assistant", "content": "Run the command silently, without creating a window to display its\noutput."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.noRescan"}, {"role": "assistant", "content": "Don’t rescan the working directory for changes after the tool\nfinishes execution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.confirm"}, {"role": "assistant", "content": "Show a confirmation dialog before actually running the tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.argPrompt"}, {"role": "assistant", "content": "Request a string argument from the user, and pass it to the tool\nthrough the ARGS environment variable. Since requesting an\nargument implies confirmation, the confirm option has no effect\nif this is enabled. If the option is set to true , yes , or 1 ,\nthe dialog uses a built-in generic prompt; otherwise the exact\nvalue of the variable is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.revPrompt"}, {"role": "assistant", "content": "Request a single valid revision from the user, and set the REVISION environment variable. In other aspects this option\nis similar to argPrompt , and can be used together with it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.revUnmerged"}, {"role": "assistant", "content": "Show only unmerged branches in the revPrompt subdialog.\nThis is useful for tools similar to merge or rebase, but not\nfor things like checkout or reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.title"}, {"role": "assistant", "content": "Specifies the title to use for the prompt dialog. The default\nis the tool name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.prompt"}, {"role": "assistant", "content": "Specifies the general prompt string to display at the top of\nthe dialog, before subsections for argPrompt and revPrompt .\nThe default value includes the actual command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.browser"}, {"role": "assistant", "content": "Specify the browser that will be used to display help in the web format. See git-help[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.format"}, {"role": "assistant", "content": "Override the default help format used by git-help[1] .\nValues man , info , web and html are supported. man is\nthe default. web and html are the same."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.autoCorrect"}, {"role": "assistant", "content": "If git detects typos and can identify exactly one valid command similar\nto the error, git will try to suggest the correct command or even\nrun the suggestion automatically. Possible config values are: 0 (default): show the suggested command. positive number: run the suggested command after specified\ndeciseconds (0.1 sec). \"immediate\": run the suggested command immediately. \"prompt\": show the suggestion and prompt for confirmation to run\nthe command. \"never\": don’t run or show any suggested command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.htmlPath"}, {"role": "assistant", "content": "Specify the path where the HTML documentation resides. File system paths\nand URLs are supported. HTML pages will be prefixed with this path when\nhelp is displayed in the web format. This defaults to the documentation\npath of your Git installation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxy"}, {"role": "assistant", "content": "Override the HTTP proxy, normally configured using the http_proxy , https_proxy , and all_proxy environment variables (see curl(1) ). In\naddition to the syntax understood by curl, it is possible to specify a\nproxy string with a user name but no password, in which case git will\nattempt to acquire one in the same way it does for other credentials. See gitcredentials[7] for more information. The syntax thus is [protocol://][user[:password]@]proxyhost[:port] . This can be overridden\non a per-remote basis; see remote.<name>.proxy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxyAuthMethod"}, {"role": "assistant", "content": "Set the method with which to authenticate against the HTTP proxy. This\nonly takes effect if the configured proxy string contains a user name part\n(i.e. is of the form user@host or user@host:port ). This can be\noverridden on a per-remote basis; see remote.<name>.proxyAuthMethod .\nBoth can be overridden by the GIT_HTTP_PROXY_AUTHMETHOD environment\nvariable.  Possible values are: anyauth - Automatically pick a suitable authentication method. It is\nassumed that the proxy answers an unauthenticated request with a 407\nstatus code and one or more Proxy-authenticate headers with supported\nauthentication methods. This is the default. basic - HTTP Basic authentication digest - HTTP Digest authentication; this prevents the password from being\ntransmitted to the proxy in clear text negotiate - GSS-Negotiate authentication (compare the --negotiate option\nof curl(1) ) ntlm - NTLM authentication (compare the --ntlm option of curl(1) )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCert"}, {"role": "assistant", "content": "The pathname of a file that stores a client certificate to use to authenticate\nwith an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CERT environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLKey"}, {"role": "assistant", "content": "The pathname of a file that stores a private key to use to authenticate with\nan HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_KEY environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git’s password prompt for the proxy SSL certificate.  Otherwise OpenSSL\nwill prompt the user, possibly many times, if the certificate or private key\nis encrypted. Can be overridden by the GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCAInfo"}, {"role": "assistant", "content": "Pathname to the file containing the certificate bundle that should be used to\nverify the proxy with when using an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CAINFO environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.emptyAuth"}, {"role": "assistant", "content": "Attempt authentication without seeking a username or password.  This\ncan be used to attempt GSS-Negotiate authentication without specifying\na username in the URL, as libcurl normally requires a username for\nauthentication."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.delegation"}, {"role": "assistant", "content": "Control GSSAPI credential delegation. The delegation is disabled\nby default in libcurl since version 7.21.7. Set parameter to tell\nthe server what it is allowed to delegate when it comes to user\ncredentials. Used with GSS/kerberos. Possible values are: none - Don’t allow any delegation. policy - Delegates if and only if the OK-AS-DELEGATE flag is set in the\nKerberos service ticket, which is a matter of realm policy. always - Unconditionally allow the server to delegate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.extraHeader"}, {"role": "assistant", "content": "Pass an additional HTTP header when communicating with a server.  If\nmore than one such entry exists, all of them are added as extra\nheaders.  To allow overriding the settings inherited from the system\nconfig, an empty value will reset the extra headers to the empty list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.cookieFile"}, {"role": "assistant", "content": "The pathname of a file containing previously stored cookie lines,\nwhich should be used\nin the Git http session, if they match the server. The file format\nof the file to read cookies from should be plain HTTP headers or\nthe Netscape/Mozilla cookie file format (see curl(1) ).\nNOTE that the file specified with http.cookieFile is used only as\ninput unless http.saveCookies is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.saveCookies"}, {"role": "assistant", "content": "If set, store cookies received during requests to the file specified by\nhttp.cookieFile. Has no effect if http.cookieFile is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.version"}, {"role": "assistant", "content": "Use the specified HTTP protocol version when communicating with a server.\nIf you want to force the default. The available and default version depend\non libcurl. Currently the possible values of\nthis option are: HTTP/2 HTTP/1.1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.curloptResolve"}, {"role": "assistant", "content": "Hostname resolution information that will be used first by\nlibcurl when sending HTTP requests.  This information should\nbe in one of the following formats: [+]HOST:PORT:ADDRESS[,ADDRESS] -HOST:PORT The first format redirects all requests to the given HOST:PORT to the provided ADDRESS (s). The second format clears all\nprevious config values for that HOST:PORT combination.  To\nallow easy overriding of all the settings inherited from the\nsystem config, an empty value will reset all resolution\ninformation to the empty list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslVersion"}, {"role": "assistant", "content": "The SSL version to use when negotiating an SSL connection, if you\nwant to force the default.  The available and default version\ndepend on whether libcurl was built against NSS or OpenSSL and the\nparticular configuration of the crypto library in use. Internally\nthis sets the CURLOPT_SSL_VERSION option; see the libcurl\ndocumentation for more details on the format of this option and\nfor the ssl version supported. Currently the possible values of\nthis option are: sslv2 sslv3 tlsv1 tlsv1.0 tlsv1.1 tlsv1.2 tlsv1.3 Can be overridden by the GIT_SSL_VERSION environment variable.\nTo force git to use libcurl’s default ssl version and ignore any\nexplicit http.sslversion option, set GIT_SSL_VERSION to the\nempty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCipherList"}, {"role": "assistant", "content": "A list of SSL ciphers to use when negotiating an SSL connection.\nThe available ciphers depend on whether libcurl was built against\nNSS or OpenSSL and the particular configuration of the crypto\nlibrary in use.  Internally this sets the CURLOPT_SSL_CIPHER_LIST option; see the libcurl documentation for more details on the format\nof this list. Can be overridden by the GIT_SSL_CIPHER_LIST environment variable.\nTo force git to use libcurl’s default cipher list and ignore any\nexplicit http.sslCipherList option, set GIT_SSL_CIPHER_LIST to the\nempty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslVerify"}, {"role": "assistant", "content": "Whether to verify the SSL certificate when fetching or pushing\nover HTTPS. Defaults to true. Can be overridden by the GIT_SSL_NO_VERIFY environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCert"}, {"role": "assistant", "content": "File containing the SSL certificate when fetching or pushing\nover HTTPS. Can be overridden by the GIT_SSL_CERT environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslKey"}, {"role": "assistant", "content": "File containing the SSL private key when fetching or pushing\nover HTTPS. Can be overridden by the GIT_SSL_KEY environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git’s password prompt for the SSL certificate.  Otherwise\nOpenSSL will prompt the user, possibly many times, if the\ncertificate or private key is encrypted.  Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAInfo"}, {"role": "assistant", "content": "File containing the certificates to verify the peer with when\nfetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAPath"}, {"role": "assistant", "content": "Path containing files with the CA certificates to verify the peer\nwith when fetching or pushing over HTTPS. Can be overridden\nby the GIT_SSL_CAPATH environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslBackend"}, {"role": "assistant", "content": "Name of the SSL backend to use (e.g. \"openssl\" or \"schannel\").\nThis option is ignored if cURL lacks support for choosing the SSL\nbackend at runtime."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.schannelCheckRevoke"}, {"role": "assistant", "content": "Used to enforce or disable certificate revocation checks in cURL\nwhen http.sslBackend is set to \"schannel\". Defaults to true if\nunset. Only necessary to disable this if Git consistently errors\nand the message is about checking the revocation status of a\ncertificate. This option is ignored if cURL lacks support for\nsetting the relevant SSL option at runtime."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.schannelUseSSLCAInfo"}, {"role": "assistant", "content": "As of cURL v7.60.0, the Secure Channel backend can use the\ncertificate bundle provided via http.sslCAInfo , but that would\noverride the Windows Certificate Store. Since this is not desirable\nby default, Git will tell cURL not to use that bundle by default\nwhen the schannel backend was configured via http.sslBackend ,\nunless http.schannelUseSSLCAInfo overrides this behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.pinnedPubkey"}, {"role": "assistant", "content": "Public key of the https service. It may either be the filename of\na PEM or DER encoded public key file or a string starting with sha256// followed by the base64 encoded sha256 hash of the\npublic key. See also libcurl CURLOPT_PINNEDPUBLICKEY . git will\nexit with an error if this option is set but not supported by\ncURL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslTry"}, {"role": "assistant", "content": "Attempt to use AUTH SSL/TLS and encrypted data transfers\nwhen connecting via regular FTP protocol. This might be needed\nif the FTP server requires it for security reasons or you wish\nto connect securely whenever remote FTP server supports it.\nDefault is false since it might trigger certificate verification\nerrors on misconfigured servers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.maxRequests"}, {"role": "assistant", "content": "How many HTTP requests to launch in parallel. Can be overridden\nby the GIT_HTTP_MAX_REQUESTS environment variable. Default is 5."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.minSessions"}, {"role": "assistant", "content": "The number of curl sessions (counted across slots) to be kept across\nrequests. They will not be ended with curl_easy_cleanup() until\nhttp_cleanup() is invoked. If USE_CURL_MULTI is not defined, this\nvalue will be capped at 1. Defaults to 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.postBuffer"}, {"role": "assistant", "content": "Maximum size in bytes of the buffer used by smart HTTP\ntransports when POSTing data to the remote system.\nFor requests larger than this buffer size, HTTP/1.1 and\nTransfer-Encoding: chunked is used to avoid creating a\nmassive pack file locally.  Default is 1 MiB, which is\nsufficient for most requests. Note that raising this limit is only effective for disabling chunked\ntransfer encoding and therefore should be used only where the remote\nserver or a proxy only supports HTTP/1.0 or is noncompliant with the\nHTTP standard.  Raising this is not, in general, an effective solution\nfor most push problems, but can increase memory consumption\nsignificantly since the entire buffer is allocated even for small\npushes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.lowSpeedLimit, http.lowSpeedTime"}, {"role": "assistant", "content": "If the HTTP transfer speed, in bytes per second, is less than http.lowSpeedLimit for longer than http.lowSpeedTime seconds,\nthe transfer is aborted.\nCan be overridden by the GIT_HTTP_LOW_SPEED_LIMIT and GIT_HTTP_LOW_SPEED_TIME environment variables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.noEPSV"}, {"role": "assistant", "content": "A boolean which disables using of EPSV ftp command by curl.\nThis can be helpful with some \"poor\" ftp servers which don’t\nsupport EPSV mode. Can be overridden by the GIT_CURL_FTP_NO_EPSV environment variable. Default is false (curl will use EPSV)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.userAgent"}, {"role": "assistant", "content": "The HTTP USER_AGENT string presented to an HTTP server.  The default\nvalue represents the version of the Git client such as git/1.7.1.\nThis option allows you to override this value to a more common value\nsuch as Mozilla/4.0.  This may be necessary, for instance, if\nconnecting through a firewall that restricts HTTP connections to a set\nof common USER_AGENT strings (but not including those like git/1.7.1).\nCan be overridden by the GIT_HTTP_USER_AGENT environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.followRedirects"}, {"role": "assistant", "content": "Whether git should follow HTTP redirects. If set to true , git\nwill transparently follow any redirect issued by a server it\nencounters. If set to false , git will treat all redirects as\nerrors. If set to initial , git will follow redirects only for\nthe initial request to a remote, but not for subsequent\nfollow-up HTTP requests. Since git uses the redirected URL as\nthe base for the follow-up requests, this is generally\nsufficient. The default is initial ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.<url>.*"}, {"role": "assistant", "content": "Any of the http.* options above can be applied selectively to some URLs.\nFor a config key to match a URL, each element of the config key is\ncompared to that of the URL, in the following order: Scheme (e.g., https in https://example.com/ ). This field\nmust match exactly between the config key and the URL. Host/domain name (e.g., example.com in https://example.com/ ).\nThis field must match between the config key and the URL. It is\npossible to specify a * as part of the host name to match all subdomains\nat this level. https://*.example.com/ for example would match https://foo.example.com/ , but not https://foo.bar.example.com/ . Port number (e.g., 8080 in http://example.com:8080/ ).\nThis field must match exactly between the config key and the URL.\nOmitted port numbers are automatically converted to the correct\ndefault for the scheme before matching. Path (e.g., repo.git in https://example.com/repo.git ). The\npath field of the config key must match the path field of the URL\neither exactly or as a prefix of slash-delimited path elements.  This means\na config key with path foo/ matches URL path foo/bar .  A prefix can only\nmatch on a slash ( / ) boundary.  Longer matches take precedence (so a config\nkey with path foo/bar is a better match to URL path foo/bar than a config\nkey with just path foo/ ). User name (e.g., user in https://user@example.com/repo.git ). If\nthe config key has a user name it must match the user name in the\nURL exactly. If the config key does not have a user name, that\nconfig key will match a URL with any user name (including none),\nbut at a lower precedence than a config key with a user name. The list above is ordered by decreasing precedence; a URL that matches\na config key’s path is preferred to one that matches its user name. For example,\nif the URL is https://user@example.com/foo/bar a config key match of https://example.com/foo will be preferred over a config key match of https://user@example.com . All URLs are normalized before attempting any matching (the password part,\nif embedded in the URL, is always ignored for matching purposes) so that\nequivalent URLs that are simply spelled differently will match properly.\nEnvironment variable settings always override any matches.  The URLs that are\nmatched against are those given directly to Git commands.  This means any URLs\nvisited as a result of a redirection do not participate in matching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  i18n.commitEncoding"}, {"role": "assistant", "content": "Character encoding the commit messages are stored in; Git itself\ndoes not care per se, but this information is necessary e.g. when\nimporting commits from emails or in the gitk graphical history\nbrowser (and possibly in other places in the future or in other\nporcelains). See e.g. git-mailinfo[1] . Defaults to utf-8 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  i18n.logOutputEncoding"}, {"role": "assistant", "content": "Character encoding the commit messages are converted to when\nrunning git log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.folder"}, {"role": "assistant", "content": "The folder to drop the mails into, which is typically the Drafts\nfolder. For example: \"INBOX.Drafts\", \"INBOX/Drafts\" or\n\"[Gmail]/Drafts\". Required."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.tunnel"}, {"role": "assistant", "content": "Command used to set up a tunnel to the IMAP server through which\ncommands will be piped instead of using a direct network connection\nto the server. Required when imap.host is not set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.host"}, {"role": "assistant", "content": "A URL identifying the server. Use an imap:// prefix for non-secure\nconnections and an imaps:// prefix for secure connections.\nIgnored when imap.tunnel is set, but required otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.user"}, {"role": "assistant", "content": "The username to use when logging in to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.pass"}, {"role": "assistant", "content": "The password to use when logging in to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.port"}, {"role": "assistant", "content": "An integer port number to connect to on the server.\nDefaults to 143 for imap:// hosts and 993 for imaps:// hosts.\nIgnored when imap.tunnel is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.sslverify"}, {"role": "assistant", "content": "A boolean to enable/disable verification of the server certificate\nused by the SSL/TLS connection. Default is true . Ignored when\nimap.tunnel is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.preformattedHTML"}, {"role": "assistant", "content": "A boolean to enable/disable the use of html encoding when sending\na patch.  An html encoded patch will be bracketed with <pre>\nand have a content type of text/html.  Ironically, enabling this\noption causes Thunderbird to send the patch as a plain/text,\nformat=fixed email.  Default is false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.authMethod"}, {"role": "assistant", "content": "Specify the authentication method for authenticating with the IMAP server.\nIf Git was built with the NO_CURL option, or if your curl version is older\nthan 7.34.0, or if you’re running git-imap-send with the --no-curl option, the only supported method is CRAM-MD5 . If this is not set\nthen git imap-send uses the basic IMAP plaintext LOGIN command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  include.path  includeIf.<condition>.path"}, {"role": "assistant", "content": "Special variables to include other configuration files. See\nthe \"CONFIGURATION FILE\" section in the main git-config[1] documentation,\nspecifically the \"Includes\" and \"Conditional Includes\" subsections."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.recordEndOfIndexEntries"}, {"role": "assistant", "content": "Specifies whether the index file should include an \"End Of Index\nEntry\" section. This reduces index load time on multiprocessor\nmachines but produces a message \"ignoring EOIE extension\" when\nreading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.recordOffsetTable"}, {"role": "assistant", "content": "Specifies whether the index file should include an \"Index Entry\nOffset Table\" section. This reduces index load time on\nmultiprocessor machines but produces a message \"ignoring IEOT\nextension\" when reading the index using Git versions before 2.20.\nDefaults to true if index.threads has been explicitly enabled, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.sparse"}, {"role": "assistant", "content": "When enabled, write the index using sparse-directory entries. This\nhas no effect unless core.sparseCheckout and core.sparseCheckoutCone are both enabled. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.threads"}, {"role": "assistant", "content": "Specifies the number of threads to spawn when loading the index.\nThis is meant to reduce index load time on multiprocessor machines.\nSpecifying 0 or true will cause Git to auto-detect the number of\nCPUs and set the number of threads accordingly. Specifying 1 or false will disable multithreading. Defaults to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.version"}, {"role": "assistant", "content": "Specify the version with which new index files should be\ninitialized.  This does not affect existing repositories.\nIf feature.manyFiles is enabled, then the default is 4."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.skipHash"}, {"role": "assistant", "content": "When enabled, do not compute the trailing hash for the index file.\nThis accelerates Git commands that manipulate the index, such as git add , git commit , or git status . Instead of storing the\nchecksum, write a trailing set of bytes with value zero, indicating\nthat the computation was skipped. If you enable index.skipHash , then Git clients older than 2.13.0 will\nrefuse to parse the index and Git clients older than 2.40.0 will report an\nerror during git fsck ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init[1] .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.browser"}, {"role": "assistant", "content": "Specify the program that will be used to browse your working\nrepository in gitweb. See git-instaweb[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.httpd"}, {"role": "assistant", "content": "The HTTP daemon command-line to start gitweb on your working\nrepository. See git-instaweb[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.local"}, {"role": "assistant", "content": "If true the web server started by git-instaweb[1] will\nbe bound to the local IP (127.0.0.1)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.modulePath"}, {"role": "assistant", "content": "The default module path for git-instaweb[1] to use\ninstead of /usr/lib/apache2/modules.  Only used if httpd\nis Apache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.port"}, {"role": "assistant", "content": "The port number to bind the gitweb httpd to. See git-instaweb[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.singleKey"}, {"role": "assistant", "content": "In interactive commands, allow the user to provide one-letter\ninput with a single key (i.e., without hitting enter).\nCurrently this is used by the --patch mode of git-add[1] , git-checkout[1] , git-restore[1] , git-commit[1] , git-reset[1] , and git-stash[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.diffFilter"}, {"role": "assistant", "content": "When an interactive command (such as git add --patch ) shows\na colorized diff, git will pipe the diff through the shell\ncommand defined by this configuration variable. The command may\nmark up the diff further for human consumption, provided that it\nretains a one-to-one correspondence with the lines in the\noriginal diff. Defaults to disabled (no filtering)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.abbrevCommit"}, {"role": "assistant", "content": "If true, makes git-log[1] , git-show[1] , and git-whatchanged[1] assume --abbrev-commit . You may\noverride this option with --no-abbrev-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.date"}, {"role": "assistant", "content": "Set the default date-time mode for the log command.\nSetting a value for log.date is similar to using git log 's --date option.  See git-log[1] for details. If the format is set to \"auto:foo\" and the pager is in use, format\n\"foo\" will be used for the date format. Otherwise, \"default\" will\nbe used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.initialDecorationSet"}, {"role": "assistant", "content": "By default, git log only shows decorations for certain known ref\nnamespaces. If all is specified, then show all refs as\ndecorations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.excludeDecoration"}, {"role": "assistant", "content": "Exclude the specified patterns from the log decorations. This is\nsimilar to the --decorate-refs-exclude command-line option, but\nthe config option can be overridden by the --decorate-refs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.diffMerges"}, {"role": "assistant", "content": "Set diff format to be used when --diff-merges=on is\nspecified, see --diff-merges in git-log[1] for\ndetails. Defaults to separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.follow"}, {"role": "assistant", "content": "If true , git log will act as if the --follow option was used when\na single <path> is given.  This has the same limitations as --follow ,\ni.e. it cannot be used to follow multiple files and does not work well\non non-linear history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log[1] or git-whatchanged[1] , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showSignature"}, {"role": "assistant", "content": "If true, makes git-log[1] , git-show[1] , and git-whatchanged[1] assume --show-signature ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.mailmap"}, {"role": "assistant", "content": "If true, makes git-log[1] , git-show[1] , and git-whatchanged[1] assume --use-mailmap , otherwise\nassume --no-use-mailmap . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lsrefs.unborn"}, {"role": "assistant", "content": "May be \"advertise\" (the default), \"allow\", or \"ignore\". If \"advertise\",\nthe server will respond to the client sending \"unborn\" (as described in gitprotocol-v2[5] ) and will advertise support for this feature during the\nprotocol v2 capability advertisement. \"allow\" is the same as\n\"advertise\" except that the server will not advertise support for this\nfeature; this is useful for load-balanced servers that cannot be\nupdated atomically (for example), since the administrator could\nconfigure \"allow\", then after a delay, configure \"advertise\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailinfo.scissors"}, {"role": "assistant", "content": "If true, makes git-mailinfo[1] (and therefore git-am[1] ) act by default as if the --scissors option\nwas provided on the command-line. When active, this feature\nremoves everything from the message body before a scissors\nline (i.e. consisting mainly of \">8\", \"8<\" and \"-\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailmap.file"}, {"role": "assistant", "content": "The location of an augmenting mailmap file. The default\nmailmap, located in the root of the repository, is loaded\nfirst, then the mailmap file pointed to by this variable.\nThe location of the mailmap file may be in a repository\nsubdirectory, or somewhere outside of the repository itself.\nSee git-shortlog[1] and git-blame[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailmap.blob"}, {"role": "assistant", "content": "Like mailmap.file , but consider the value as a reference to a\nblob in the repository. If both mailmap.file and mailmap.blob are given, both are parsed, with entries from mailmap.file taking precedence. In a bare repository, this\ndefaults to HEAD:.mailmap . In a non-bare repository, it\ndefaults to empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.auto"}, {"role": "assistant", "content": "This boolean config option controls whether some commands run git maintenance run --auto after doing their normal work. Defaults\nto true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.strategy"}, {"role": "assistant", "content": "This string config option provides a way to specify one of a few\nrecommended schedules for background maintenance. This only affects\nwhich tasks are run during git maintenance run --schedule=X commands, provided no --task=<task> arguments are provided.\nFurther, if a maintenance.<task>.schedule config value is set,\nthen that value is used instead of the one provided by maintenance.strategy . The possible strategy strings are: none : This default setting implies no tasks are run at any schedule. incremental : This setting optimizes for performing small maintenance\nactivities that do not delete any data. This does not schedule the gc task, but runs the prefetch and commit-graph tasks hourly, the loose-objects and incremental-repack tasks daily, and the pack-refs task weekly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.<task>.enabled"}, {"role": "assistant", "content": "This boolean config option controls whether the maintenance task\nwith name <task> is run when no --task option is specified to git maintenance run . These config values are ignored if a --task option exists. By default, only maintenance.gc.enabled is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.<task>.schedule"}, {"role": "assistant", "content": "This config option controls whether or not the given <task> runs\nduring a git maintenance run --schedule=<frequency> command. The\nvalue must be one of \"hourly\", \"daily\", or \"weekly\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.commit-graph.auto"}, {"role": "assistant", "content": "This integer config option controls how often the commit-graph task\nshould be run as part of git maintenance run --auto . If zero, then\nthe commit-graph task will not run with the --auto option. A\nnegative value will force the task to run every time. Otherwise, a\npositive value implies the command should run when the number of\nreachable commits that are not in the commit-graph file is at least\nthe value of maintenance.commit-graph.auto . The default value is\n100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.loose-objects.auto"}, {"role": "assistant", "content": "This integer config option controls how often the loose-objects task\nshould be run as part of git maintenance run --auto . If zero, then\nthe loose-objects task will not run with the --auto option. A\nnegative value will force the task to run every time. Otherwise, a\npositive value implies the command should run when the number of\nloose objects is at least the value of maintenance.loose-objects.auto .\nThe default value is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.incremental-repack.auto"}, {"role": "assistant", "content": "This integer config option controls how often the incremental-repack task should be run as part of git maintenance run --auto . If zero,\nthen the incremental-repack task will not run with the --auto option. A negative value will force the task to run every time.\nOtherwise, a positive value implies the command should run when the\nnumber of pack-files not in the multi-pack-index is at least the value\nof maintenance.incremental-repack.auto . The default value is 10."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.viewer"}, {"role": "assistant", "content": "Specify the programs that may be used to display help in the man format. See git-help[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified man viewer. The\nspecified command is evaluated in shell with the man page\npassed as an argument. (See git-help[1] .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool that may be used to\ndisplay help in the man format. See git-help[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.conflictStyle"}, {"role": "assistant", "content": "Specify the style in which conflicted hunks are written out to\nworking tree files upon merge.  The default is \"merge\", which\nshows a <<<<<<< conflict marker, changes made by one side,\na ======= marker, changes made by the other side, and then\na >>>>>>> marker.  An alternate style, \"diff3\", adds a ||||||| marker and the original text before the ======= marker.  The\n\"merge\" style tends to produce smaller conflict regions than diff3,\nboth because of the exclusion of the original text, and because\nwhen a subset of lines match on the two sides, they are just pulled\nout of the conflict region.  Another alternate style, \"zdiff3\", is\nsimilar to diff3 but removes matching lines on the two sides from\nthe conflict region when those matching lines appear near either\nthe beginning or end of a conflict region."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.defaultToUpstream"}, {"role": "assistant", "content": "If merge is called without any commit argument, merge the upstream\nbranches configured for the current branch by using their last\nobserved values stored in their remote-tracking branches.\nThe values of the branch.<current branch>.merge that name the\nbranches at the remote named by branch.<current branch>.remote are consulted, and then they are mapped via remote.<remote>.fetch to their corresponding remote-tracking branches, and the tips of\nthese tracking branches are merged. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.verifySignatures"}, {"role": "assistant", "content": "If true, this is equivalent to the --verify-signatures command\nline option. See git-merge[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.branchdesc"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with\nthe branch description text associated with them.  Defaults\nto false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged.  Defaults to false, and\ntrue is a synonym for 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.suppressDest"}, {"role": "assistant", "content": "By adding a glob that matches the names of integration\nbranches to this multi-valued configuration variable, the\ndefault merge message computed for merges into these\nintegration branches will omit \"into <branch name>\" from\nits title. An element with an empty value can be used to clear the list\nof globs accumulated from previous configuration entries.\nWhen there is no merge.suppressDest variable defined, the\ndefault value of master is used for backward compatibility."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\nrename detection during a merge.  If not specified, defaults\nto the value of diff.renameLimit.  If neither\nmerge.renameLimit nor diff.renameLimit are specified,\ncurrently defaults to 7000.  This setting has no effect if\nrename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renames"}, {"role": "assistant", "content": "Whether Git detects renames.  If set to \"false\", rename detection\nis disabled. If set to \"true\", basic rename detection is enabled.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.directoryRenames"}, {"role": "assistant", "content": "Whether Git detects directory renames, affecting what happens at\nmerge time to new files added to a directory on one side of\nhistory when that directory was renamed on the other side of\nhistory.  If merge.directoryRenames is set to \"false\", directory\nrename detection is disabled, meaning that such new files will be\nleft behind in the old directory.  If set to \"true\", directory\nrename detection is enabled, meaning that such new files will be\nmoved into the new directory.  If set to \"conflict\", a conflict\nwill be reported for such paths.  If merge.renames is false,\nmerge.directoryRenames is ignored and treated as false.  Defaults\nto \"conflict\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renormalize"}, {"role": "assistant", "content": "Tell Git that canonical representation of files in the\nrepository has changed over time (e.g. earlier commits record\ntext files with CRLF line endings, but recent ones use LF line\nendings).  In such a repository, Git can convert the data\nrecorded in commits to a canonical form before performing a\nmerge to reduce unnecessary conflicts.  For more information,\nsee section \"Merging branches with differing checkin/checkout\nattributes\" in gitattributes[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.stat"}, {"role": "assistant", "content": "Whether to print the diffstat between ORIG_HEAD and the merge result\nat the end of the merge.  True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run merge on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful merge might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-merge[1] .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.tool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool[1] .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires\nthat a corresponding mergetool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.guitool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool[1] when the\n-g/--gui flag is specified. The list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires that a\ncorresponding mergetool.<guitool>.cmd variable is defined. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 meld nvimdiff opendiff p4merge smerge tkdiff tortoisemerge vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.verbosity"}, {"role": "assistant", "content": "Controls the amount of output shown by the recursive merge\nstrategy.  Level 0 outputs nothing except a final error\nmessage if conflicts were detected. Level 1 outputs only\nconflicts, 2 outputs conflicts and file changes.  Level 5 and\nabove outputs debugging information.  The default is level 2.\nCan be overridden by the GIT_MERGE_VERBOSITY environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.name"}, {"role": "assistant", "content": "Defines a human-readable name for a custom low-level\nmerge driver.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.driver"}, {"role": "assistant", "content": "Defines the command that implements a custom low-level\nmerge driver.  See gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.recursive"}, {"role": "assistant", "content": "Names a low-level merge driver to be used when\nperforming an internal merge between common ancestors.\nSee gitattributes[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified merge tool.  The\nspecified command is evaluated in shell with the following\nvariables available: BASE is the name of a temporary file\ncontaining the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of\nthe file on the current branch; REMOTE is the name of a temporary\nfile containing the contents of the file from the branch being\nmerged; MERGED contains the name of the file to which the merge\ntool should write the results of a successful merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.hideResolved"}, {"role": "assistant", "content": "Allows the user to override the global mergetool.hideResolved value\nfor a specific tool. See mergetool.hideResolved for the full\ndescription."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.trustExitCode"}, {"role": "assistant", "content": "For a custom merge command, specify whether the exit code of\nthe merge command can be used to determine whether the merge was\nsuccessful.  If this is not set to true then the merge target file\ntimestamp is checked, and the merge is assumed to have been successful\nif the file has been updated; otherwise, the user is prompted to\nindicate the success of the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.meld.hasOutput"}, {"role": "assistant", "content": "Older versions of meld do not support the --output option.\nGit will attempt to detect whether meld supports --output by inspecting the output of meld --help .  Configuring mergetool.meld.hasOutput will make Git skip these checks and\nuse the configured value instead.  Setting mergetool.meld.hasOutput to true tells Git to unconditionally use the --output option,\nand false avoids using --output ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.meld.useAutoMerge"}, {"role": "assistant", "content": "When the --auto-merge is given, meld will merge all non-conflicting\nparts automatically, highlight the conflicting parts, and wait for\nuser decision.  Setting mergetool.meld.useAutoMerge to true tells\nGit to unconditionally use the --auto-merge option with meld .\nSetting this value to auto makes git detect whether --auto-merge is supported and will only use --auto-merge when available.  A\nvalue of false avoids using --auto-merge altogether, and is the\ndefault value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<vimdiff variant>.layout"}, {"role": "assistant", "content": "Configure the split window layout for vimdiff’s <variant> , which is any of vimdiff , nvimdiff , gvimdiff .\nUpon launching git mergetool with --tool=<variant> (or without --tool if merge.tool is configured as <variant> ), Git will consult mergetool.<variant>.layout to determine the tool’s layout. If the\nvariant-specific configuration is not available, vimdiff 's is used as\nfallback.  If that too is not available, a default layout with 4 windows\nwill be used.  To configure the layout, see the BACKEND SPECIFIC HINTS section in git-mergetool[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.hideResolved"}, {"role": "assistant", "content": "During a merge, Git will automatically resolve as many conflicts as\npossible and write the MERGED file containing conflict markers around\nany conflicts that it cannot resolve; LOCAL and REMOTE normally\nrepresent the versions of the file from before Git’s conflict\nresolution. This flag causes LOCAL and REMOTE to be overwritten so\nthat only the unresolved conflicts are presented to the merge tool. Can\nbe configured per-tool via the mergetool.<tool>.hideResolved configuration variable. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.keepBackup"}, {"role": "assistant", "content": "After performing a merge, the original file with conflict markers\ncan be saved as a file with a .orig extension.  If this variable\nis set to false then this file is not preserved.  Defaults to true (i.e. keep the backup files)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.keepTemporaries"}, {"role": "assistant", "content": "When invoking a custom merge tool, Git uses a set of temporary\nfiles to pass to the tool. If the tool returns an error and this\nvariable is set to true , then these temporary files will be\npreserved; otherwise, they will be removed after the tool has\nexited. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.writeToTemp"}, {"role": "assistant", "content": "Git writes temporary BASE , LOCAL , and REMOTE versions of\nconflicting files in the worktree by default.  Git will attempt\nto use a temporary directory for these files when set true .\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.guiDefault"}, {"role": "assistant", "content": "Set true to use the merge.guitool by default (equivalent to\nspecifying the --gui argument), or auto to select merge.guitool or merge.tool depending on the presence of a DISPLAY environment\nvariable value. The default is false , where the --gui argument\nmust be provided explicitly for the merge.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes[1] for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes[1] for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewriteRef"}, {"role": "assistant", "content": "When copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.window"}, {"role": "assistant", "content": "The size of the window used by git-pack-objects[1] when no\nwindow size is given on the command line. Defaults to 10."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.depth"}, {"role": "assistant", "content": "The maximum delta depth used by git-pack-objects[1] when no\nmaximum depth is given on the command line. Defaults to 50.\nMaximum value is 4095."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.windowMemory"}, {"role": "assistant", "content": "The maximum size of memory that is consumed by each thread\nin git-pack-objects[1] for pack window memory when\nno limit is given on the command line.  The value can be\nsuffixed with \"k\", \"m\", or \"g\".  When left unconfigured (or\nset explicitly to 0), there will be no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.compression"}, {"role": "assistant", "content": "An integer -1..9, indicating the compression level for objects\nin a pack file. -1 is the zlib default. 0 means no\ncompression, and 1..9 are various speed/size tradeoffs, 9 being\nslowest.  If not set,  defaults to core.compression.  If that is\nnot set,  defaults to -1, the zlib default, which is \"a default\ncompromise between speed and compression (currently equivalent\nto level 6).\" Note that changing the compression level will not automatically recompress\nall existing objects. You can force recompression by passing the -F option\nto git-repack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.allowPackReuse"}, {"role": "assistant", "content": "When true or \"single\", and when reachability bitmaps are\nenabled, pack-objects will try to send parts of the bitmapped\npackfile verbatim. When \"multi\", and when a multi-pack\nreachability bitmap is available, pack-objects will try to send\nparts of all packs in the MIDX. If only a single pack bitmap is available, and pack.allowPackReuse is set to \"multi\", reuse parts of just the bitmapped packfile. This\ncan reduce memory and CPU usage to serve fetches, but might result in\nsending a slightly larger pack. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.island"}, {"role": "assistant", "content": "An extended regular expression configuring a set of delta\nislands. See \"DELTA ISLANDS\" in git-pack-objects[1] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.islandCore"}, {"role": "assistant", "content": "Specify an island name which gets to have its objects be\npacked first. This creates a kind of pseudo-pack at the front\nof one pack, so that the objects from the specified island are\nhopefully faster to copy into any pack that should be served\nto a user requesting these objects. In practice this means\nthat the island specified should likely correspond to what is\nthe most commonly cloned in the repo. See also \"DELTA ISLANDS\"\nin git-pack-objects[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.deltaCacheSize"}, {"role": "assistant", "content": "The maximum memory in bytes used for caching deltas in git-pack-objects[1] before writing them out to a pack.\nThis cache is used to speed up the writing object phase by not\nhaving to recompute the final delta result once the best match\nfor all objects is found.  Repacking large repositories on machines\nwhich are tight with memory might be badly impacted by this though,\nespecially if this cache pushes the system into swapping.\nA value of 0 means no limit. The smallest size of 1 byte may be\nused to virtually disable this cache. Defaults to 256 MiB."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.deltaCacheLimit"}, {"role": "assistant", "content": "The maximum size of a delta, that is cached in git-pack-objects[1] . This cache is used to speed up the\nwriting object phase by not having to recompute the final delta\nresult once the best match for all objects is found.\nDefaults to 1000. Maximum value is 65535."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.threads"}, {"role": "assistant", "content": "Specifies the number of threads to spawn when searching for best\ndelta matches.  This requires that git-pack-objects[1] be compiled with pthreads otherwise this option is ignored with a\nwarning. This is meant to reduce packing time on multiprocessor\nmachines. The required amount of memory for the delta search window\nis however multiplied by the number of threads.\nSpecifying 0 will cause Git to auto-detect the number of CPUs\nand set the number of threads accordingly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.indexVersion"}, {"role": "assistant", "content": "Specify the default pack index version.  Valid values are 1 for\nlegacy pack index used by Git versions prior to 1.5.2, and 2 for\nthe new pack index with capabilities for packs larger than 4 GB\nas well as proper protection against the repacking of corrupted\npacks.  Version 2 is the default.  Note that version 2 is enforced\nand this config option is ignored whenever the corresponding pack is\nlarger than 2 GB. If you have an old Git that does not understand the version 2 *.idx file,\ncloning or fetching over a non-native protocol (e.g. \"http\")\nthat will copy both *.pack file and corresponding *.idx file from the\nother side may give you a repository that cannot be accessed with your\nolder version of Git. If the *.pack file is smaller than 2 GB, however,\nyou can use git-index-pack[1] on the *.pack file to regenerate\nthe *.idx file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.packSizeLimit"}, {"role": "assistant", "content": "The maximum size of a pack.  This setting only affects\npacking to a file when repacking, i.e. the git:// protocol\nis unaffected.  It can be overridden by the --max-pack-size option of git-repack[1] .  Reaching this limit results\nin the creation of multiple packfiles. Note that this option is rarely useful, and may result in a larger total\non-disk size (because Git will not store deltas between packs) and\nworse runtime performance (object lookup within multiple packs is\nslower than a single pack, and optimizations like reachability bitmaps\ncannot cope with multiple packs). If you need to actively run Git using smaller packfiles (e.g., because your\nfilesystem does not support large files), this option may help. But if\nyour goal is to transmit a packfile over a medium that supports limited\nsizes (e.g., removable media that cannot store the whole repository),\nyou are likely better off creating a single large packfile and splitting\nit using a generic multi-volume archive tool (e.g., Unix split ). The minimum size allowed is limited to 1 MiB. The default is unlimited.\nCommon unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useBitmaps"}, {"role": "assistant", "content": "When true, git will use pack bitmaps (if available) when packing\nto stdout (e.g., during the server side of a fetch). Defaults to\ntrue. You should not generally need to turn this off unless\nyou are debugging pack bitmaps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useBitmapBoundaryTraversal"}, {"role": "assistant", "content": "When true, Git will use an experimental algorithm for computing\nreachability queries with bitmaps. Instead of building up\ncomplete bitmaps for all of the negated tips and then OR-ing\nthem together, consider negated tips with existing bitmaps as\nadditive (i.e. OR-ing them into the result if they exist,\nignoring them otherwise), and build up a bitmap at the boundary\ninstead. When using this algorithm, Git may include too many objects as a result\nof not opening up trees belonging to certain UNINTERESTING commits. This\ninexactness matches the non-bitmap traversal algorithm. In many cases, this can provide a speed-up over the exact algorithm,\nparticularly when there is poor bitmap coverage of the negated side of\nthe query."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useSparse"}, {"role": "assistant", "content": "When true, git will default to using the --sparse option in git pack-objects when the --revs option is present. This\nalgorithm only walks trees that appear in paths that introduce new\nobjects. This can have significant performance benefits when\ncomputing a pack to send a small change. However, it is possible\nthat extra objects are added to the pack-file if the included\ncommits contain certain types of direct renames. Default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.preferBitmapTips"}, {"role": "assistant", "content": "When selecting which commits will receive bitmaps, prefer a\ncommit at the tip of any reference that is a suffix of any value\nof this configuration over any other commits in the \"selection\nwindow\". Note that setting this configuration to refs/foo does not mean that\nthe commits at the tips of refs/foo/bar and refs/foo/baz will\nnecessarily be selected. This is because commits are selected for\nbitmaps from within a series of windows of variable length. If a commit at the tip of any reference which is a suffix of any value\nof this configuration is seen in a window, it is immediately given\npreference over any other commit in that window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmaps (deprecated)"}, {"role": "assistant", "content": "This is a deprecated synonym for repack.writeBitmaps ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmapHashCache"}, {"role": "assistant", "content": "When true, git will include a \"hash cache\" section in the bitmap\nindex (if one is written). This cache can be used to feed git’s\ndelta heuristics, potentially leading to better deltas between\nbitmapped and non-bitmapped objects (e.g., when serving a fetch\nbetween an older, bitmapped pack and objects that have been\npushed since the last gc). The downside is that it consumes 4\nbytes per object of disk space. Defaults to true. When writing a multi-pack reachability bitmap, no new namehashes are\ncomputed; instead, any namehashes stored in an existing bitmap are\npermuted into their appropriate location when writing a new bitmap."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmapLookupTable"}, {"role": "assistant", "content": "When true, Git will include a \"lookup table\" section in the\nbitmap index (if one is written). This table is used to defer\nloading individual bitmaps as late as possible. This can be\nbeneficial in repositories that have relatively large bitmap\nindexes. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.readReverseIndex"}, {"role": "assistant", "content": "When true, git will read any .rev file(s) that may be available\n(see: gitformat-pack[5] ). When false, the reverse index\nwill be generated from scratch and stored in memory. Defaults to\ntrue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeReverseIndex"}, {"role": "assistant", "content": "When true, git will write a corresponding .rev file (see: gitformat-pack[5] )\nfor each new packfile that it writes in all places except for git-fast-import[1] and in the bulk checkin mechanism.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pager.<cmd>"}, {"role": "assistant", "content": "If the value is boolean, turns on or off pagination of the\noutput of a particular Git subcommand when writing to a tty.\nOtherwise, turns on pagination for the subcommand using the\npager specified by the value of pager.<cmd> .  If --paginate or --no-pager is specified on the command line, it takes\nprecedence over this option.  To disable pagination for all\ncommands, set core.pager or GIT_PAGER to cat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pretty.<name>"}, {"role": "assistant", "content": "Alias for a --pretty= format string, as specified in git-log[1] . Any aliases defined here can be used just\nas the built-in pretty formats could. For example,\nrunning git config pretty.changelog \"format:* %H %s\" would cause the invocation git log --pretty=changelog to be equivalent to running git log \"--pretty=format:* %H %s\" .\nNote that an alias with the same name as a built-in format\nwill be silently ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.allow"}, {"role": "assistant", "content": "If set, provide a user defined default policy for all protocols which\ndon’t explicitly have a policy ( protocol.<name>.allow ).  By default,\nif unset, known-safe protocols (http, https, git, ssh) have a\ndefault policy of always , known-dangerous protocols (ext) have a\ndefault policy of never , and all other protocols (including file)\nhave a default policy of user .  Supported policies: always - protocol is always able to be used. never - protocol is never able to be used. user - protocol is only able to be used when GIT_PROTOCOL_FROM_USER is\neither unset or has a value of 1.  This policy should be used when you want a\nprotocol to be directly usable by the user but don’t want it used by commands which\nexecute clone/fetch/push commands without user input, e.g. recursive\nsubmodule initialization."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.<name>.allow"}, {"role": "assistant", "content": "Set a policy to be used by protocol <name> with clone/fetch/push\ncommands. See protocol.allow above for the available policies. The protocol names currently used by git are: file : any local file-based path (including file:// URLs,\nor local paths) git : the anonymous git protocol over a direct TCP\nconnection (or proxy, if configured) ssh : git over ssh (including host:path syntax, ssh:// , etc). http : git over http, both \"smart http\" and \"dumb http\".\nNote that this does not include https ; if you want to configure\nboth, you must do so individually. any external helpers are named by their protocol (e.g., use hg to allow the git-remote-hg helper)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.version"}, {"role": "assistant", "content": "If set, clients will attempt to communicate with a server\nusing the specified protocol version.  If the server does\nnot support it, communication falls back to version 0.\nIf unset, the default is 2 .\nSupported versions: 0 - the original wire protocol. 1 - the original wire protocol with the addition of a version string\nin the initial response from the server. 2 - Wire protocol version 2, see gitprotocol-v2[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line). This setting overrides merge.ff when pulling."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.rebase"}, {"role": "assistant", "content": "When true, rebase branches on top of the fetched branch, instead\nof merging the default branch from the default remote when \"git\npull\" is run. See \"branch.<name>.rebase\" for setting this on a\nper-branch basis. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase[1] for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.octopus"}, {"role": "assistant", "content": "The default merge strategy to use when pulling multiple branches\nat once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.twohead"}, {"role": "assistant", "content": "The default merge strategy to use when pulling a single branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.autoSetupRemote"}, {"role": "assistant", "content": "If set to \"true\" assume --set-upstream on default push when no\nupstream tracking exists for the current branch; this option\ntakes effect with push.default options simple , upstream ,\nand current . It is useful if by default you want new branches\nto be pushed to the default remote (like the behavior of push.default=current ) and you also want the upstream tracking\nto be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to\nhave the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.default"}, {"role": "assistant", "content": "Defines the action git push should take if no refspec is\ngiven (whether from the command-line, config, or elsewhere).\nDifferent values are well-suited for\nspecific workflows; for instance, in a purely central workflow\n(i.e. the fetch source is equal to the push destination), upstream is probably what you want.  Possible values are: nothing - do not push anything (error out) unless a refspec is\ngiven. This is primarily meant for people who want to\navoid mistakes by always being explicit. current - push the current branch to update a branch with the same\nname on the receiving end.  Works in both central and non-central\nworkflows. upstream - push the current branch back to the branch whose\nchanges are usually integrated into the current branch (which is\ncalled @{upstream} ).  This mode only makes sense if you are\npushing to the same repository you would normally pull from\n(i.e. central workflow). tracking - This is a deprecated synonym for upstream . simple - push the current branch with the same name on the remote. If you are working on a centralized workflow (pushing to the same repository you\npull from, which is typically origin ), then you need to configure an upstream\nbranch with the same name. This mode is the default since Git 2.0, and is the safest option suited for\nbeginners. matching - push all branches having the same name on both ends.\nThis makes the repository you are pushing to remember the set of\nbranches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push\nto will have these two branches, and your local maint and master will be pushed there). To use this mode effectively, you have to make sure all the\nbranches you would push out are ready to be pushed out before\nrunning git push , as the whole point of this mode is to allow you\nto push all of the branches in one go.  If you usually finish work\non only one branch and push out the result, while other branches are\nunfinished, this mode is not for you.  Also this mode is not\nsuitable for pushing into a shared central repository, as other\npeople may add new branches there, or update the tip of existing\nbranches outside your control. This used to be the default, but not since Git 2.0 ( simple is the\nnew default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.followTags"}, {"role": "assistant", "content": "If set to true, enable --follow-tags option by default.  You\nmay override this configuration at time of push by specifying --no-follow-tags ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.gpgSign"}, {"role": "assistant", "content": "May be set to a boolean value, or the string if-asked . A true\nvalue causes all pushes to be GPG signed, as if --signed is\npassed to git-push[1] . The string if-asked causes\npushes to be signed if the server supports it, as if --signed=if-asked is passed to git push . A false value may\noverride a value from a lower-priority config file. An explicit\ncommand-line flag always overrides this config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.pushOption"}, {"role": "assistant", "content": "When no --push-option=<option> argument is given from the\ncommand line, git push behaves as if each <value> of\nthis variable is given as --push-option=<value> . This is a multi-valued variable, and an empty value can be used in a\nhigher priority configuration file (e.g. .git/config in a\nrepository) to clear the values inherited from a lower priority\nconfiguration files (e.g. $HOME/.gitconfig ). Example:\n\n/etc/gitconfig\n  push.pushoption = a\n  push.pushoption = b\n\n~/.gitconfig\n  push.pushoption = c\n\nrepo/.git/config\n  push.pushoption =\n  push.pushoption = b\n\nThis will result in only b (a and c are cleared)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.recurseSubmodules"}, {"role": "assistant", "content": "May be \"check\", \"on-demand\", \"only\", or \"no\", with the same behavior\nas that of \"push --recurse-submodules\".\nIf not set, no is used by default, unless submodule.recurse is\nset (in which case a true value means on-demand )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.useForceIfIncludes"}, {"role": "assistant", "content": "If set to \"true\", it is equivalent to specifying --force-if-includes as an option to git-push[1] in the command line. Adding --no-force-if-includes at the\ntime of push overrides this configuration setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.negotiate"}, {"role": "assistant", "content": "If set to \"true\", attempt to reduce the size of the packfile\nsent by rounds of negotiation in which the client and the\nserver attempt to find commits in common. If \"false\", Git will\nrely solely on the server’s ref advertisement to find commits\nin common."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.useBitmaps"}, {"role": "assistant", "content": "If set to \"false\", disable use of bitmaps for \"git push\" even if pack.useBitmaps is \"true\", without preventing other git operations\nfrom using bitmaps. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.backend"}, {"role": "assistant", "content": "Default backend to use for rebasing.  Possible choices are apply or merge .  In the future, if the merge backend gains\nall remaining capabilities of the apply backend, this setting\nmay become unused."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.stat"}, {"role": "assistant", "content": "Whether to show a diffstat of what changed upstream since the last\nrebase. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.autoSquash"}, {"role": "assistant", "content": "If set to true, enable the --autosquash option of git-rebase[1] by default for interactive mode.\nThis can be overridden with the --no-autosquash option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run rebase on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful rebase might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-rebase[1] .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.updateRefs"}, {"role": "assistant", "content": "If set to true enable --update-refs option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.missingCommitsCheck"}, {"role": "assistant", "content": "If set to \"warn\", git rebase -i will print a warning if some\ncommits are removed (e.g. a line was deleted), however the\nrebase will still proceed. If set to \"error\", it will print\nthe previous warning and stop the rebase, git rebase\n--edit-todo can then be used to correct the error. If set to\n\"ignore\", no checking is done.\nTo drop a commit without warning or error, use the drop command in the todo list.\nDefaults to \"ignore\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.instructionFormat"}, {"role": "assistant", "content": "A format string, as specified in git-log[1] , to be used for the\ntodo list during an interactive rebase.  The format will\nautomatically have the commit hash prepended to the format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.abbreviateCommands"}, {"role": "assistant", "content": "If set to true, git rebase will use abbreviated command names in the\ntodo list resulting in something like this: p deadbee The oneline of the commit\n\tp fa1afe1 The oneline of the next commit\n\t... instead of: pick deadbee The oneline of the commit\n\tpick fa1afe1 The oneline of the next commit\n\t... Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.rescheduleFailedExec"}, {"role": "assistant", "content": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\nThis is the same as specifying the --reschedule-failed-exec option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.forkPoint"}, {"role": "assistant", "content": "If set to false set --no-fork-point option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.rebaseMerges"}, {"role": "assistant", "content": "Whether and how to set the --rebase-merges option by default. Can\nbe rebase-cousins , no-rebase-cousins , or a boolean. Setting to\ntrue or to no-rebase-cousins is equivalent to --rebase-merges=no-rebase-cousins , setting to rebase-cousins is\nequivalent to --rebase-merges=rebase-cousins , and setting to false is\nequivalent to --no-rebase-merges . Passing --rebase-merges on the\ncommand line, with or without an argument, overrides any rebase.rebaseMerges configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.maxLabelLength"}, {"role": "assistant", "content": "When generating label names from commit subjects, truncate the names to\nthis length. By default, the names are truncated to a little less than NAME_MAX (to allow e.g. .lock files to be written for the\ncorresponding loose refs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.advertiseAtomic"}, {"role": "assistant", "content": "By default, git-receive-pack will advertise the atomic push\ncapability to its clients. If you don’t want to advertise this\ncapability, set this variable to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.advertisePushOptions"}, {"role": "assistant", "content": "When set to true, git-receive-pack will advertise the push options\ncapability to its clients. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.autogc"}, {"role": "assistant", "content": "By default, git-receive-pack will run \"git maintenance run --auto\" after\nreceiving data from git-push and updating refs.  You can stop\nit by setting this variable to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.certNonceSeed"}, {"role": "assistant", "content": "By setting this variable to a string, git receive-pack will accept a git push --signed and verify it by using\na \"nonce\" protected by HMAC using this string as a secret\nkey."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.certNonceSlop"}, {"role": "assistant", "content": "When a git push --signed sends a push certificate with a\n\"nonce\" that was issued by a receive-pack serving the same\nrepository within this many seconds, export the \"nonce\"\nfound in the certificate to GIT_PUSH_CERT_NONCE to the\nhooks (instead of what the receive-pack asked the sending\nside to include).  This may allow writing checks in pre-receive and post-receive a bit easier.  Instead of\nchecking GIT_PUSH_CERT_NONCE_SLOP environment variable\nthat records by how many seconds the nonce is stale to\ndecide if they want to accept the certificate, they only\ncan check GIT_PUSH_CERT_NONCE_STATUS is OK ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsckObjects"}, {"role": "assistant", "content": "If it is set to true, git-receive-pack will check all received\nobjects. See transfer.fsckObjects for what’s checked.\nDefaults to false. If not set, the value of transfer.fsckObjects is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-receive-pack[1] instead of git-fsck[1] . See the fsck.<msg-id> documentation for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsck.skipList"}, {"role": "assistant", "content": "Acts like fsck.skipList , but is used by git-receive-pack[1] instead of git-fsck[1] . See the fsck.skipList documentation for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.keepAlive"}, {"role": "assistant", "content": "After receiving the pack from the client, receive-pack may\nproduce no output (if --quiet was specified) while processing\nthe pack, causing some networks to drop the TCP connection.\nWith this option set, if receive-pack does not transmit\nany data in this phase for receive.keepAlive seconds, it will\nsend a short keepalive packet.  The default is 5 seconds; set\nto 0 to disable keepalives entirely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.unpackLimit"}, {"role": "assistant", "content": "If the number of objects received in a push is below this\nlimit then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.maxInputSize"}, {"role": "assistant", "content": "If the size of the incoming pack stream is larger than this\nlimit, then git-receive-pack will error out, instead of\naccepting the pack file. If not set or set to 0, then the size\nis unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyDeletes"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update that deletes\nthe ref. Use this to prevent such a ref deletion via a push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyDeleteCurrent"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update that\ndeletes the currently checked out branch of a non-bare repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyCurrentBranch"}, {"role": "assistant", "content": "If set to true or \"refuse\", git-receive-pack will deny a ref update\nto the currently checked out branch of a non-bare repository.\nSuch a push is potentially dangerous because it brings the HEAD\nout of sync with the index and working tree. If set to \"warn\",\nprint a warning of such a push to stderr, but allow the push to\nproceed. If set to false or \"ignore\", allow such pushes with no\nmessage. Defaults to \"refuse\". Another option is \"updateInstead\" which will update the working\ntree if pushing into the current branch.  This option is\nintended for synchronizing working directories when one side is not easily\naccessible via interactive ssh (e.g. a live web site, hence the requirement\nthat the working directory be clean). This mode also comes in handy when\ndeveloping inside a VM to test and fix code on different Operating Systems. By default, \"updateInstead\" will refuse the push if the working tree or\nthe index have any difference from the HEAD, but the push-to-checkout hook can be used to customize this.  See githooks[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyNonFastForwards"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update which is\nnot a fast-forward. Use this to prevent such an update via a push,\neven if that push is forced. This configuration variable is\nset when initializing a shared repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.hideRefs"}, {"role": "assistant", "content": "This variable is the same as transfer.hideRefs , but applies\nonly to receive-pack (and so affects pushes, but not fetches).\nAn attempt to update or delete a hidden ref by git push is\nrejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.procReceiveRefs"}, {"role": "assistant", "content": "This is a multi-valued variable that defines reference prefixes\nto match the commands in receive-pack .  Commands matching the\nprefixes will be executed by an external hook \"proc-receive\",\ninstead of the internal execute_commands function.  If this\nvariable is not defined, the \"proc-receive\" hook will never be\nused, and all commands will be executed by the internal execute_commands function. For example, if this variable is set to \"refs/for\", pushing to reference\nsuch as \"refs/for/master\" will not create or update a reference named\n\"refs/for/master\", but may create or update a pull request directly by\nrunning the hook \"proc-receive\". Optional modifiers can be provided in the beginning of the value to filter\ncommands for specific actions: create (a), modify (m), delete (d).\nA ! can be included in the modifiers to negate the reference prefix entry.\nE.g.: git config --system --add receive.procReceiveRefs ad:refs/heads\ngit config --system --add receive.procReceiveRefs !:refs/heads"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.updateServerInfo"}, {"role": "assistant", "content": "If set to true, git-receive-pack will run git-update-server-info\nafter receiving data from git-push and updating refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.shallowUpdate"}, {"role": "assistant", "content": "If set to true, .git/shallow can be updated when new refs\nrequire new shallow roots. Otherwise those refs are rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.pushDefault"}, {"role": "assistant", "content": "The remote to push to by default.  Overrides branch.<name>.remote for all branches, and is overridden by branch.<name>.pushRemote for specific branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.url"}, {"role": "assistant", "content": "The URL of a remote repository.  See git-fetch[1] or git-push[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.pushurl"}, {"role": "assistant", "content": "The push URL of a remote repository.  See git-push[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.proxy"}, {"role": "assistant", "content": "For remotes that require curl (http, https and ftp), the URL to\nthe proxy to use for that remote.  Set to the empty string to\ndisable proxying for that remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.proxyAuthMethod"}, {"role": "assistant", "content": "For remotes that require curl (http, https and ftp), the method to use for\nauthenticating against the proxy in use (probably set in remote.<name>.proxy ). See http.proxyAuthMethod ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.fetch"}, {"role": "assistant", "content": "The default set of \"refspec\" for git-fetch[1] . See git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.push"}, {"role": "assistant", "content": "The default set of \"refspec\" for git-push[1] . See git-push[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.mirror"}, {"role": "assistant", "content": "If true, pushing to this remote will automatically behave\nas if the --mirror option was given on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.skipDefaultUpdate"}, {"role": "assistant", "content": "If true, this remote will be skipped by default when updating\nusing git-fetch[1] or the update subcommand of git-remote[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.skipFetchAll"}, {"role": "assistant", "content": "If true, this remote will be skipped by default when updating\nusing git-fetch[1] or the update subcommand of git-remote[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.receivepack"}, {"role": "assistant", "content": "The default program to execute on the remote side when pushing.  See\noption --receive-pack of git-push[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.uploadpack"}, {"role": "assistant", "content": "The default program to execute on the remote side when fetching.  See\noption --upload-pack of git-fetch-pack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.tagOpt"}, {"role": "assistant", "content": "Setting this value to --no-tags disables automatic tag following when\nfetching from remote <name>. Setting it to --tags will fetch every\ntag from remote <name>, even if they are not reachable from remote\nbranch heads. Passing these flags directly to git-fetch[1] can\noverride this setting. See options --tags and --no-tags of git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.vcs"}, {"role": "assistant", "content": "Setting this to a value <vcs> will cause Git to interact with\nthe remote with the git-remote-<vcs> helper."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.prune"}, {"role": "assistant", "content": "When set to true, fetching from this remote by default will also\nremove any remote-tracking references that no longer exist on the\nremote (as if the --prune option was given on the command line).\nOverrides fetch.prune settings, if any."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.pruneTags"}, {"role": "assistant", "content": "When set to true, fetching from this remote by default will also\nremove any local tags that no longer exist on the remote if pruning\nis activated in general via remote.<name>.prune , fetch.prune or --prune . Overrides fetch.pruneTags settings, if any. See also remote.<name>.prune and the PRUNING section of git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.promisor"}, {"role": "assistant", "content": "When set to true, this remote will be used to fetch promisor\nobjects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.partialclonefilter"}, {"role": "assistant", "content": "The filter that will be applied when fetching from this\tpromisor remote.\nChanging or clearing this value will only affect fetches for new commits.\nTo fetch associated objects for commits already present in the local object\ndatabase, use the --refetch option of git-fetch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remotes.<group>"}, {"role": "assistant", "content": "The list of remotes which are fetched by \"git remote update\n<group>\".  See git-remote[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.useDeltaBaseOffset"}, {"role": "assistant", "content": "By default, git-repack[1] creates packs that use\ndelta-base offset. If you need to share your repository with\nGit older than version 1.4.4, either directly or via a dumb\nprotocol such as http, then you need to set this option to\n\"false\" and repack. Access from old Git versions over the\nnative protocol are unaffected by this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.packKeptObjects"}, {"role": "assistant", "content": "If set to true, makes git repack act as if --pack-kept-objects was passed. See git-repack[1] for\ndetails. Defaults to false normally, but true if a bitmap\nindex is being written (either via --write-bitmap-index or repack.writeBitmaps )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.useDeltaIslands"}, {"role": "assistant", "content": "If set to true, makes git repack act as if --delta-islands was passed. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.writeBitmaps"}, {"role": "assistant", "content": "When true, git will write a bitmap index when packing all\nobjects to disk (e.g., when git repack -a is run).  This\nindex can speed up the \"counting objects\" phase of subsequent\npacks created for clones and fetches, at the cost of some disk\nspace and extra time spent on the initial repack.  This has\nno effect if multiple packfiles are created.\nDefaults to true on bare repos, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.updateServerInfo"}, {"role": "assistant", "content": "If set to false, git-repack[1] will not run git-update-server-info[1] . Defaults to true. Can be overridden\nwhen true by the -n option of git-repack[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.cruftWindow  repack.cruftWindowMemory  repack.cruftDepth  repack.cruftThreads"}, {"role": "assistant", "content": "Parameters used by git-pack-objects[1] when generating\na cruft pack and the respective parameters are not given over\nthe command line. See similarly named pack.* configuration\nvariables for defaults and meaning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rerere.autoUpdate"}, {"role": "assistant", "content": "When set to true, git-rerere updates the index with the\nresulting contents after it cleanly resolves conflicts using\npreviously recorded resolutions.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rerere.enabled"}, {"role": "assistant", "content": "Activate recording of resolved conflicts, so that identical\nconflict hunks can be resolved automatically, should they be\nencountered again.  By default, git-rerere[1] is\nenabled if there is an rr-cache directory under the $GIT_DIR , e.g. if \"rerere\" was previously used in the\nrepository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  revert.reference"}, {"role": "assistant", "content": "Setting this variable to true makes git revert behave\nas if the --reference option is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  safe.bareRepository"}, {"role": "assistant", "content": "Specifies which bare repositories Git will work with. The currently\nsupported values are: all : Git works with all bare repositories. This is the default. explicit : Git only works with bare repositories specified via\nthe top-level --git-dir command-line option, or the GIT_DIR environment variable (see git[1] ). If you do not use bare repositories in your workflow, then it may be\nbeneficial to set safe.bareRepository to explicit in your global\nconfig. This will protect you from attacks that involve cloning a\nrepository that contains a bare repository and running a Git command\nwithin that directory. This config setting is only respected in protected configuration (see SCOPES ). This prevents untrusted repositories from tampering with\nthis value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  safe.directory"}, {"role": "assistant", "content": "These config entries specify Git-tracked directories that are\nconsidered safe even if they are owned by someone other than the\ncurrent user. By default, Git will refuse to even parse a Git\nconfig of a repository owned by someone else, let alone run its\nhooks, and this config setting allows users to specify exceptions,\ne.g. for intentionally shared repositories (see the --shared option in git-init[1] ). This is a multi-valued setting, i.e. you can add more than one directory\nvia git config --add . To reset the list of safe directories (e.g. to\noverride any such directories specified in the system config), add a safe.directory entry with an empty value. This config setting is only respected in protected configuration (see SCOPES ). This prevents untrusted repositories from tampering with this\nvalue. The value of this setting is interpolated, i.e. ~/<path> expands to a\npath relative to the home directory and %(prefix)/<path> expands to a\npath relative to Git’s (runtime) prefix. To completely opt-out of this security check, set safe.directory to the\nstring * . This will allow all repositories to be treated as if their\ndirectory was listed in the safe.directory list. If safe.directory=* is set in system config and you want to re-enable this protection, then\ninitialize your list with an empty value before listing the repositories\nthat you deem safe. As explained, Git only allows you to access repositories owned by\nyourself, i.e. the user who is running Git, by default.  When Git\nis running as root in a non Windows platform that provides sudo,\nhowever, git checks the SUDO_UID environment variable that sudo creates\nand will allow access to the uid recorded as its value in addition to\nthe id from root .\nThis is to make it easy to perform a common sequence during installation\n\"make && sudo make install\".  A git process running under sudo runs as root but the sudo command exports the environment variable to record\nwhich id the original user has.\nIf that is not what you would prefer and want git to only trust\nrepositories that are owned by root instead, then you can remove\nthe SUDO_UID variable from root’s environment before invoking git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.identity"}, {"role": "assistant", "content": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpEncryption"}, {"role": "assistant", "content": "See git-send-email[1] for description.  Note that this\nsetting is not subject to the identity mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpSSLCertPath"}, {"role": "assistant", "content": "Path to ca-certificates (either a directory or a single file).\nSet it to an empty string to disable certificate verification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.<identity>.*"}, {"role": "assistant", "content": "Identity-specific versions of the sendemail.* parameters\nfound below, taking precedence over those when this\nidentity is selected, through either the command-line or sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.multiEdit"}, {"role": "assistant", "content": "If true (default), a single editor instance will be spawned to edit\nfiles you have to edit (patches when --annotate is used, and the\nsummary when --compose is used). If false, files will be edited one\nafter the other, spawning a new editor each time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.confirm"}, {"role": "assistant", "content": "Sets the default for whether to confirm before sending. Must be\none of always , never , cc , compose , or auto . See --confirm in the git-send-email[1] documentation for the meaning of these\nvalues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.aliasesFile"}, {"role": "assistant", "content": "To avoid typing long email addresses, point this to one or more\nemail aliases files.  You must also supply sendemail.aliasFileType ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.aliasFileType"}, {"role": "assistant", "content": "Format of the file(s) specified in sendemail.aliasesFile. Must be\none of mutt , mailrc , pine , elm , gnus , or sendmail . What an alias file in each format looks like can be found in\nthe documentation of the email program of the same name. The\ndifferences and limitations from the standard formats are\ndescribed below: sendmail Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.annotate  sendemail.bcc  sendemail.cc  sendemail.ccCmd  sendemail.chainReplyTo  sendemail.envelopeSender  sendemail.from  sendemail.headerCmd  sendemail.signedOffByCc  sendemail.smtpPass  sendemail.suppressCc  sendemail.suppressFrom  sendemail.to  sendemail.toCmd  sendemail.smtpDomain  sendemail.smtpServer  sendemail.smtpServerPort  sendemail.smtpServerOption  sendemail.smtpUser  sendemail.thread  sendemail.transferEncoding  sendemail.validate  sendemail.xmailer"}, {"role": "assistant", "content": "These configuration variables all provide a default for git-send-email[1] command-line options. See its\ndocumentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.signedOffCc (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for sendemail.signedOffByCc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpBatchSize"}, {"role": "assistant", "content": "Number of messages to be sent per connection, after that a relogin\nwill happen.  If the value is 0 or undefined, send all messages in\none connection.\nSee also the --batch-size option of git-send-email[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpReloginDelay"}, {"role": "assistant", "content": "Seconds to wait before reconnecting to the smtp server.\nSee also the --relogin-delay option of git-send-email[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.forbidSendmailVariables"}, {"role": "assistant", "content": "To avoid common misconfiguration mistakes, git-send-email[1] will abort with a warning if any configuration options for \"sendmail\"\nexist. Set this variable to bypass the check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sequence.editor"}, {"role": "assistant", "content": "Text editor used by git rebase -i for editing the rebase instruction file.\nThe value is meant to be interpreted by the shell when it is used.\nIt can be overridden by the GIT_SEQUENCE_EDITOR environment variable.\nWhen not configured, the default commit message editor is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  showBranch.default"}, {"role": "assistant", "content": "The default set of branches for git-show-branch[1] .\nSee git-show-branch[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sparse.expectFilesOutsideOfPatterns"}, {"role": "assistant", "content": "Typically with sparse checkouts, files not matching any\nsparsity patterns are marked with a SKIP_WORKTREE bit in the\nindex and are missing from the working tree.  Accordingly, Git\nwill ordinarily check whether files with the SKIP_WORKTREE bit\nare in fact present in the working tree contrary to\nexpectations.  If Git finds any, it marks those paths as\npresent by clearing the relevant SKIP_WORKTREE bits.  This\noption can be used to tell Git that such\npresent-despite-skipped files are expected and to stop\nchecking for them. The default is false , which allows Git to automatically recover\nfrom the list of files in the index and working tree falling out of\nsync. Set this to true if you are in a setup where some external factor\nrelieves Git of the responsibility for maintaining the consistency\nbetween the presence of working tree files and sparsity patterns.  For\nexample, if you have a Git-aware virtual file system that has a robust\nmechanism for keeping the working tree and the sparsity patterns up to\ndate based on access patterns. Regardless of this setting, Git does not check for\npresent-despite-skipped files unless sparse checkout is enabled, so\nthis config option has no effect unless core.sparseCheckout is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  splitIndex.maxPercentChange"}, {"role": "assistant", "content": "When the split index feature is used, this specifies the\npercent of entries the split index can contain compared to the\ntotal number of entries in both the split index and the shared\nindex before a new shared index is written.\nThe value should be between 0 and 100. If the value is 0, then\na new shared index is always written; if it is 100, a new\nshared index is never written.\nBy default, the value is 20, so a new shared index is written\nif the number of entries in the split index would be greater\nthan 20 percent of the total number of entries.\nSee git-update-index[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  splitIndex.sharedIndexExpire"}, {"role": "assistant", "content": "When the split index feature is used, shared index files that\nwere not modified since the time this variable specifies will\nbe removed when a new shared index file is created. The value\n\"now\" expires all entries immediately, and \"never\" suppresses\nexpiration altogether.\nThe default value is \"2.weeks.ago\".\nNote that a shared index file is considered modified (for the\npurpose of expiration) each time a new split-index file is\neither created based on it or read from it.\nSee git-update-index[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ssh.variant"}, {"role": "assistant", "content": "By default, Git determines the command line arguments to use\nbased on the basename of the configured SSH command (configured\nusing the environment variable GIT_SSH or GIT_SSH_COMMAND or\nthe config setting core.sshCommand ). If the basename is\nunrecognized, Git will attempt to detect support of OpenSSH\noptions by first invoking the configured SSH command with the -G (print configuration) option and will subsequently use\nOpenSSH options (if that is successful) or no options besides\nthe host and remote command (if it fails). The config variable ssh.variant can be set to override this detection.\nValid values are ssh (to use OpenSSH options), plink , putty , tortoiseplink , simple (no options except the host and remote command).\nThe default auto-detection can be explicitly requested using the value auto .  Any other value is treated as ssh .  This setting can also be\noverridden via the environment variable GIT_SSH_VARIANT . The current command-line parameters used for each variant are as\nfollows: ssh - [-p port] [-4] [-6] [-o option] [username@]host command simple - [username@]host command plink or putty - [-P port] [-4] [-6] [username@]host command tortoiseplink - [-P port] [-4] [-6] -batch [username@]host command Except for the simple variant, command-line parameters are likely to\nchange as git gains new features."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showIncludeUntracked"}, {"role": "assistant", "content": "If this is set to true, the git stash show command will show\nthe untracked files of a stash entry.  Defaults to false. See\nthe description of the show command in git-stash[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showPatch"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show the stash entry in patch form.  Defaults to false.\nSee the description of the show command in git-stash[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showStat"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show a diffstat of the stash entry.  Defaults to true.\nSee the description of the show command in git-stash[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.relativePaths"}, {"role": "assistant", "content": "By default, git-status[1] shows paths relative to the\ncurrent directory. Setting this variable to false shows paths\nrelative to the repository root (this was the default for Git\nprior to v1.5.4)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.short"}, {"role": "assistant", "content": "Set to true to enable --short by default in git-status[1] .\nThe option --no-short takes precedence over this variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.branch"}, {"role": "assistant", "content": "Set to true to enable --branch by default in git-status[1] .\nThe option --no-branch takes precedence over this variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.aheadBehind"}, {"role": "assistant", "content": "Set to true to enable --ahead-behind and false to enable --no-ahead-behind by default in git-status[1] for\nnon-porcelain status formats.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.displayCommentPrefix"}, {"role": "assistant", "content": "If set to true, git-status[1] will insert a comment\nprefix before each output line (starting with core.commentChar , i.e. # by default). This was the\nbehavior of git-status[1] in Git 1.8.4 and previous.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.renameLimit"}, {"role": "assistant", "content": "The number of files to consider when performing rename detection\nin git-status[1] and git-commit[1] . Defaults to\nthe value of diff.renameLimit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames in git-status[1] and git-commit[1] .  If set to \"false\", rename detection is\ndisabled. If set to \"true\", basic rename detection is enabled.\nIf set to \"copies\" or \"copy\", Git will detect copies, as well.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.showStash"}, {"role": "assistant", "content": "If set to true, git-status[1] will display the number of\nentries currently stashed away.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.showUntrackedFiles"}, {"role": "assistant", "content": "By default, git-status[1] and git-commit[1] show\nfiles which are not currently tracked by Git. Directories which\ncontain only untracked files, are shown with the directory name\nonly. Showing untracked files means that Git needs to lstat() all\nthe files in the whole repository, which might be slow on some\nsystems. So, this variable controls how the commands display\nthe untracked files. Possible values are: no - Show no untracked files. normal - Show untracked files and directories. all - Show also individual files in untracked directories. If this variable is not specified, it defaults to normal .\nAll usual spellings for Boolean value true are taken as normal and false as no .\nThis variable can be overridden with the -u|--untracked-files option\nof git-status[1] and git-commit[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.submoduleSummary"}, {"role": "assistant", "content": "Defaults to false.\nIf this is set to a non-zero number or true (identical to -1 or an\nunlimited number), the submodule summary will be enabled and a\nsummary of commits for modified submodules will be shown (see\n--summary-limit option of git-submodule[1] ). Please note\nthat the summary output command will be suppressed for all\nsubmodules when diff.ignoreSubmodules is set to all or only\nfor those submodules where submodule.<name>.ignore=all . The only\nexception to that rule is that status and commit will show staged\nsubmodule changes. To\nalso view the summary for ignored submodules you can either use\nthe --ignore-submodules=dirty command-line option or the git\nsubmodule summary command, which shows a similar output but does\nnot honor these settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.url"}, {"role": "assistant", "content": "The URL for a submodule. This variable is copied from the .gitmodules\nfile to the git config via git submodule init . The user can change\nthe configured URL before obtaining the submodule via git submodule\nupdate . If neither submodule.<name>.active nor submodule.active are\nset, the presence of this variable is used as a fallback to indicate\nwhether the submodule is of interest to git commands.\nSee git-submodule[1] and gitmodules[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.update"}, {"role": "assistant", "content": "The method by which a submodule is updated by git submodule update ,\nwhich is the only affected command, others such as git checkout --recurse-submodules are unaffected. It exists for\nhistorical reasons, when git submodule was the only command to\ninteract with submodules; settings like submodule.active and pull.rebase are more specific. It is populated by git submodule init from the gitmodules[5] file.\nSee description of update command in git-submodule[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.branch"}, {"role": "assistant", "content": "The remote branch name for a submodule, used by git submodule\nupdate --remote .  Set this option to override the value found in\nthe .gitmodules file.  See git-submodule[1] and gitmodules[5] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.fetchRecurseSubmodules"}, {"role": "assistant", "content": "This option can be used to control recursive fetching of this\nsubmodule. It can be overridden by using the --[no-]recurse-submodules\ncommand-line option to \"git fetch\" and \"git pull\".\nThis setting will override that from in the gitmodules[5] file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.ignore"}, {"role": "assistant", "content": "Defines under what circumstances \"git status\" and the diff family show\na submodule as modified. When set to \"all\", it will never be considered\nmodified (but it will nonetheless show up in the output of status and\ncommit when it has been staged), \"dirty\" will ignore all changes\nto the submodule’s work tree and\ntakes only differences between the HEAD of the submodule and the commit\nrecorded in the superproject into account. \"untracked\" will additionally\nlet submodules with modified tracked files in their work tree show up.\nUsing \"none\" (the default when this option is not set) also shows\nsubmodules that have untracked files in their work tree as changed.\nThis setting overrides any setting made in .gitmodules for this submodule,\nboth settings can be overridden on the command line by using the\n\"--ignore-submodules\" option. The git submodule commands are not\naffected by this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.active"}, {"role": "assistant", "content": "Boolean value indicating if the submodule is of interest to git\ncommands.  This config option takes precedence over the\nsubmodule.active config option. See gitsubmodules[7] for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.active"}, {"role": "assistant", "content": "A repeated field which contains a pathspec used to match against a\nsubmodule’s path to determine if the submodule is of interest to git\ncommands. See gitsubmodules[7] for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.recurse"}, {"role": "assistant", "content": "A boolean indicating if commands should enable the --recurse-submodules option by default. Defaults to false. When set to true, it can be deactivated via the --no-recurse-submodules option. Note that some Git commands\nlacking this option may call some of the above commands affected by submodule.recurse ; for instance git remote update will call git fetch but does not have a --no-recurse-submodules option.\nFor these commands a workaround is to temporarily change the\nconfiguration value by using git -c submodule.recurse=0 . The following list shows the commands that accept --recurse-submodules and whether they are supported by this\nsetting. checkout , fetch , grep , pull , push , read-tree , reset , restore and switch are always supported. clone and ls-files are not supported. branch is supported only if submodule.propagateBranches is\nenabled"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.propagateBranches"}, {"role": "assistant", "content": "[EXPERIMENTAL] A boolean that enables branching support when\nusing --recurse-submodules or submodule.recurse=true .\nEnabling this will allow certain commands to accept --recurse-submodules and certain commands that already accept --recurse-submodules will now consider branches.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.fetchJobs"}, {"role": "assistant", "content": "Specifies how many submodules are fetched/cloned at the same time.\nA positive integer allows up to that number of submodules fetched\nin parallel. A value of 0 will give some reasonable default.\nIf unset, it defaults to 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.alternateLocation"}, {"role": "assistant", "content": "Specifies how the submodules obtain alternates when submodules are\ncloned. Possible values are no , superproject .\nBy default no is assumed, which doesn’t add references. When the\nvalue is set to superproject the submodule to be cloned computes\nits alternates location relative to the superprojects alternate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.alternateErrorStrategy"}, {"role": "assistant", "content": "Specifies how to treat errors with the alternates for a submodule\nas computed via submodule.alternateLocation . Possible values are ignore , info , die . Default is die . Note that if set to ignore or info , and if there is an error with the computed alternate, the\nclone proceeds as if no alternate was specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.forceSignAnnotated"}, {"role": "assistant", "content": "A boolean to specify whether annotated tags created should be GPG signed.\nIf --annotate is specified on the command line, it takes\nprecedence over this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.sort"}, {"role": "assistant", "content": "This variable controls the sort ordering of tags when displayed by git-tag[1] . Without the \"--sort=<value>\" option provided, the\nvalue of this variable will be used as the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.gpgSign"}, {"role": "assistant", "content": "A boolean to specify whether all tags should be GPG signed.\nUse of this option when running in an automated script can\nresult in a large number of tags being signed. It is therefore\nconvenient to use an agent to avoid typing your gpg passphrase\nseveral times. Note that this option doesn’t affect tag signing\nbehavior enabled by \"-u <keyid>\" or \"--local-user=<keyid>\" options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tar.umask"}, {"role": "assistant", "content": "This variable can be used to restrict the permission bits of\ntar archive entries.  The default is 0002, which turns off the\nworld write bit.  The special value \"user\" indicates that the\narchiving user’s umask will be used instead.  See umask(2) and git-archive[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendmail"}, {"role": "assistant", "content": "Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.normalTarget"}, {"role": "assistant", "content": "This variable controls the normal target destination.\nIt may be overridden by the GIT_TRACE2 environment variable.\nThe following table shows possible values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.perfTarget"}, {"role": "assistant", "content": "This variable controls the performance target destination.\nIt may be overridden by the GIT_TRACE2_PERF environment variable.\nThe following table shows possible values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventTarget"}, {"role": "assistant", "content": "This variable controls the event target destination.\nIt may be overridden by the GIT_TRACE2_EVENT environment variable.\nThe following table shows possible values. 0 or false - Disables the target. 1 or true - Writes to STDERR . [2-9] - Writes to the already opened file descriptor. <absolute-pathname> - Writes to the file in append mode. If the target\nalready exists and is a directory, the traces will be written to files (one\nper process) underneath the given directory. af_unix:[<socket-type>:]<absolute-pathname> - Write to a\nUnix DomainSocket (on platforms that support them).  Socket\ntype can be either stream or dgram ; if omitted Git will\ntry both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.normalBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from normal output.  May be overridden by the GIT_TRACE2_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.perfBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from PERF output.  May be overridden by the GIT_TRACE2_PERF_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from event output.  May be overridden by the GIT_TRACE2_EVENT_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventNesting"}, {"role": "assistant", "content": "Integer.  Specifies desired depth of nested regions in the\nevent output.  Regions deeper than this value will be\nomitted.  May be overridden by the GIT_TRACE2_EVENT_NESTING environment variable.  Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.configParams"}, {"role": "assistant", "content": "A comma-separated list of patterns of \"important\" config\nsettings that should be recorded in the trace2 output.\nFor example, core.*,remote.*.url would cause the trace2\noutput to contain events listing each configured remote.\nMay be overridden by the GIT_TRACE2_CONFIG_PARAMS environment\nvariable.  Unset by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.envVars"}, {"role": "assistant", "content": "A comma-separated list of \"important\" environment variables that should\nbe recorded in the trace2 output.  For example, GIT_HTTP_USER_AGENT,GIT_CONFIG would cause the trace2 output to\ncontain events listing the overrides for HTTP user agent and the\nlocation of the Git configuration file (assuming any are set).  May be\noverridden by the GIT_TRACE2_ENV_VARS environment variable.  Unset by\ndefault."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.destinationDebug"}, {"role": "assistant", "content": "Boolean.  When true Git will print error messages when a\ntrace target destination cannot be opened for writing.\nBy default, these errors are suppressed and tracing is\nsilently disabled.  May be overridden by the GIT_TRACE2_DST_DEBUG environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.maxFiles"}, {"role": "assistant", "content": "Integer.  When writing trace files to a target directory, do not\nwrite additional traces if doing so would exceed this many files. Instead,\nwrite a sentinel file that will block further tracing to this\ndirectory. Defaults to 0, which disables this check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.credentialsInUrl"}, {"role": "assistant", "content": "A configured URL can contain plaintext credentials in the form <protocol>://<user>:<password>@<domain>/<path> . You may want\nto warn or forbid the use of such configuration (in favor of\nusing git-credential[1] ). This will be used on git-clone[1] , git-fetch[1] , git-push[1] ,\nand any other direct use of the configured URL. Note that this is currently limited to detecting credentials in remote.<name>.url configuration; it won’t detect credentials in remote.<name>.pushurl configuration. You might want to enable this to prevent inadvertent credentials\nexposure, e.g. because: The OS or system where you’re running git may not provide a way or\notherwise allow you to configure the permissions of the\nconfiguration file where the username and/or password are stored. Even if it does, having such data stored \"at rest\" might expose you\nin other ways, e.g. a backup process might copy the data to another\nsystem. The git programs will pass the full URL to one another as arguments\non the command-line, meaning the credentials will be exposed to other\nunprivileged users on systems that allow them to see the full\nprocess list of other users. On linux the \"hidepid\" setting\ndocumented in procfs(5) allows for configuring this behavior. If such concerns don’t apply to you then you probably don’t need to be\nconcerned about credentials exposure due to storing sensitive\ndata in git’s configuration files. If you do want to use this, set transfer.credentialsInUrl to one of these values: allow (default): Git will proceed with its activity without warning. warn : Git will write a warning message to stderr when parsing a URL\nwith a plaintext credential. die : Git will write a failure message to stderr when parsing a URL\nwith a plaintext credential."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.fsckObjects"}, {"role": "assistant", "content": "When fetch.fsckObjects or receive.fsckObjects are\nnot set, the value of this variable is used instead.\nDefaults to false. When set, the fetch or receive will abort in the case of a malformed\nobject or a link to a nonexistent object. In addition, various other\nissues are checked for, including legacy issues (see fsck.<msg-id> ),\nand potential security issues like the existence of a .GIT directory\nor a malicious .gitmodules file (see the release notes for v2.2.1\nand v2.17.1 for details). Other sanity and security checks may be\nadded in future releases. On the receiving side, failing fsckObjects will make those objects\nunreachable, see \"QUARANTINE ENVIRONMENT\" in git-receive-pack[1] . On the fetch side, malformed objects will\ninstead be left unreferenced in the repository. Due to the non-quarantine nature of the fetch.fsckObjects implementation it cannot be relied upon to leave the object store\nclean like receive.fsckObjects can. As objects are unpacked they’re written to the object store, so there\ncan be cases where malicious objects get introduced even though the\n\"fetch\" failed, only to have a subsequent \"fetch\" succeed because only\nnew incoming objects are checked, not those that have already been\nwritten to the object store. That difference in behavior should not be\nrelied upon. In the future, such objects may be quarantined for\n\"fetch\" as well. For now, the paranoid need to find some way to emulate the quarantine\nenvironment if they’d like the same protection as \"push\". E.g. in the\ncase of an internal mirror do the mirroring in two steps, one to fetch\nthe untrusted objects, and then do a second \"push\" (which will use the\nquarantine) to another internal repo, and have internal clients\nconsume this pushed-to repository, or embargo internal fetches and\nonly allow them once a full \"fsck\" has run (and no new fetches have\nhappened in the meantime)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.hideRefs"}, {"role": "assistant", "content": "String(s) receive-pack and upload-pack use to decide which\nrefs to omit from their initial advertisements.  Use more than\none definition to specify multiple prefix strings. A ref that is\nunder the hierarchies listed in the value of this variable is\nexcluded, and is hidden when responding to git push or git\nfetch .  See receive.hideRefs and uploadpack.hideRefs for\nprogram-specific versions of this config. You may also include a ! in front of the ref name to negate the entry,\nexplicitly exposing it, even if an earlier entry marked it as hidden.\nIf you have multiple hideRefs values, later entries override earlier ones\n(and entries in more-specific config files override less-specific ones). If a namespace is in use, the namespace prefix is stripped from each\nreference before it is matched against transfer.hiderefs patterns. In\norder to match refs before stripping, add a ^ in front of the ref name. If\nyou combine ! and ^ , ! must be specified first. For example, if refs/heads/master is specified in transfer.hideRefs and\nthe current namespace is foo , then refs/namespaces/foo/refs/heads/master is omitted from the advertisements. If uploadpack.allowRefInWant is set, upload-pack will treat want-ref refs/heads/master in a protocol v2 fetch command as if refs/namespaces/foo/refs/heads/master did not exist. receive-pack , on the other hand, will still advertise the object id the\nref is pointing to without mentioning its name (a so-called \".have\" line). Even if you hide refs, a client may still be able to steal the target\nobjects via the techniques described in the \"SECURITY\" section of the gitnamespaces[7] man page; it’s best to keep private data in a\nseparate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.unpackLimit"}, {"role": "assistant", "content": "When fetch.unpackLimit or receive.unpackLimit are\nnot set, the value of this variable is used instead.\nThe default value is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseSID"}, {"role": "assistant", "content": "Boolean. When true, client and server processes will advertise their\nunique session IDs to their remote counterpart. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.bundleURI"}, {"role": "assistant", "content": "When true , local git clone commands will request bundle\ninformation from the remote server (if advertised) and download\nbundles before continuing the clone through the Git protocol.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseObjectInfo"}, {"role": "assistant", "content": "When true , the object-info capability is advertised by\nservers. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadarchive.allowUnreachable"}, {"role": "assistant", "content": "If true, allow clients to use git archive --remote to request\nany tree, whether reachable from the ref tips or not. See the\ndiscussion in the \"SECURITY\" section of git-upload-archive[1] for more details. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.hideRefs"}, {"role": "assistant", "content": "This variable is the same as transfer.hideRefs , but applies\nonly to upload-pack (and so affects only fetches, not pushes).\nAn attempt to fetch a hidden ref by git fetch will fail.  See\nalso uploadpack.allowTipSHA1InWant ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowTipSHA1InWant"}, {"role": "assistant", "content": "When uploadpack.hideRefs is in effect, allow upload-pack to accept a fetch request that asks for an object at the tip\nof a hidden ref (by default, such a request is rejected).\nSee also uploadpack.hideRefs .  Even if this is false, a client\nmay be able to steal objects via the techniques described in the\n\"SECURITY\" section of the gitnamespaces[7] man page; it’s\nbest to keep private data in a separate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowReachableSHA1InWant"}, {"role": "assistant", "content": "Allow upload-pack to accept a fetch request that asks for an\nobject that is reachable from any ref tip. However, note that\ncalculating object reachability is computationally expensive.\nDefaults to false .  Even if this is false, a client may be able\nto steal objects via the techniques described in the \"SECURITY\"\nsection of the gitnamespaces[7] man page; it’s best to\nkeep private data in a separate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowAnySHA1InWant"}, {"role": "assistant", "content": "Allow upload-pack to accept a fetch request that asks for any\nobject at all.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.keepAlive"}, {"role": "assistant", "content": "When upload-pack has started pack-objects , there may be a\nquiet period while pack-objects prepares the pack. Normally\nit would output progress information, but if --quiet was used\nfor the fetch, pack-objects will output nothing at all until\nthe pack data begins. Some clients and networks may consider\nthe server to be hung and give up. Setting this option instructs upload-pack to send an empty keepalive packet every uploadpack.keepAlive seconds. Setting this option to 0\ndisables keepalive packets entirely. The default is 5 seconds."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.packObjectsHook"}, {"role": "assistant", "content": "If this option is set, when upload-pack would run git pack-objects to create a packfile for a client, it will\nrun this shell command instead.  The pack-objects command and\narguments it would have run (including the git pack-objects at the beginning) are appended to the shell command. The stdin\nand stdout of the hook are treated as if pack-objects itself\nwas run. I.e., upload-pack will feed input intended for pack-objects to the hook, and expects a completed packfile on\nstdout. Note that this configuration variable is only respected when it is specified\nin protected configuration (see SCOPES ). This is a safety measure\nagainst fetching from untrusted repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowFilter"}, {"role": "assistant", "content": "If this option is set, upload-pack will support partial\nclone and partial fetch object filtering."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.allow"}, {"role": "assistant", "content": "Provides a default value for unspecified object filters (see: the\nbelow configuration variable). If set to true , this will also\nenable all filters which get added in the future.\nDefaults to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.<filter>.allow"}, {"role": "assistant", "content": "Explicitly allow or ban the object filter corresponding to <filter> , where <filter> may be one of: blob:none , blob:limit , object:type , tree , sparse:oid , or combine .\nIf using combined filters, both combine and all of the nested\nfilter kinds must be allowed. Defaults to uploadpackfilter.allow ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.tree.maxDepth"}, {"role": "assistant", "content": "Only allow --filter=tree:<n> when <n> is no more than the value of uploadpackfilter.tree.maxDepth . If set, this also implies uploadpackfilter.tree.allow=true , unless this configuration\nvariable had already been set. Has no effect if unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowRefInWant"}, {"role": "assistant", "content": "If this option is set, upload-pack will support the ref-in-want feature of the protocol version 2 fetch command.  This feature\nis intended for the benefit of load-balanced servers which may\nnot have the same view of what OIDs their refs point to due to\nreplication delay."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  url.<base>.insteadOf"}, {"role": "assistant", "content": "Any URL that starts with this value will be rewritten to\nstart, instead, with <base>. In cases where some site serves a\nlarge number of repositories, and serves them with multiple\naccess methods, and some users need to use different access\nmethods, this feature allows people to specify any of the\nequivalent URLs and have Git automatically rewrite the URL to\nthe best alternative for the particular user, even for a\nnever-before-seen repository on the site.  When more than one\ninsteadOf strings match a given URL, the longest match is used. Note that any protocol restrictions will be applied to the rewritten\nURL. If the rewrite changes the URL to use a custom protocol or remote\nhelper, you may need to adjust the protocol.*.allow config to permit\nthe request.  In particular, protocols you expect to use for submodules\nmust be set to always rather than the default of user . See the\ndescription of protocol.allow above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  url.<base>.pushInsteadOf"}, {"role": "assistant", "content": "Any URL that starts with this value will not be pushed to;\ninstead, it will be rewritten to start with <base>, and the\nresulting URL will be pushed to. In cases where some site serves\na large number of repositories, and serves them with multiple\naccess methods, some of which do not allow push, this feature\nallows people to specify a pull-only URL and have Git\nautomatically use an appropriate URL to push, even for a\nnever-before-seen repository on the site.  When more than one\npushInsteadOf strings match a given URL, the longest match is\nused.  If a remote has an explicit pushurl, Git will ignore this\nsetting for that remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.name  user.email  author.name  author.email  committer.name  committer.email"}, {"role": "assistant", "content": "The user.name and user.email variables determine what ends\nup in the author and committer fields of commit\nobjects.\nIf you need the author or committer to be different, the author.name , author.email , committer.name , or committer.email variables can be set.\nAll of these can be overridden by the GIT_AUTHOR_NAME , GIT_AUTHOR_EMAIL , GIT_COMMITTER_NAME , GIT_COMMITTER_EMAIL , and EMAIL environment variables. Note that the name forms of these variables conventionally refer to\nsome form of a personal name.  See git-commit[1] and the\nenvironment variables section of git[1] for more information on\nthese settings and the credential.username option if you’re looking\nfor authentication credentials instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.useConfigOnly"}, {"role": "assistant", "content": "Instruct Git to avoid trying to guess defaults for user.email and user.name , and instead retrieve the values only from the\nconfiguration. For example, if you have multiple email addresses\nand would like to use a different one for each repository, then\nwith this configuration option set to true in the global config\nalong with a name, Git will prompt you to set up an email before\nmaking new commits in a newly cloned repository.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.signingKey"}, {"role": "assistant", "content": "If git-tag[1] or git-commit[1] is not selecting the\nkey you want it to automatically when creating a signed tag or\ncommit, you can override the default selection with this variable.\nThis option is passed unchanged to gpg’s --local-user parameter,\nso you may specify a key using any method that gpg supports.\nIf gpg.format is set to ssh this can contain the path to either\nyour private ssh key or the public key when ssh-agent is used.\nAlternatively it can contain a public key prefixed with key:: directly (e.g.: \"key::ssh-rsa XXXXXX identifier\"). The private key\nneeds to be available via ssh-agent. If not set Git will call\ngpg.ssh.defaultKeyCommand (e.g.: \"ssh-add -L\") and try to use the\nfirst key available. For backward compatibility, a raw key which\nbegins with \"ssh-\", such as \"ssh-rsa XXXXXX identifier\", is treated\nas \"key::ssh-rsa XXXXXX identifier\", but this form is deprecated;\nuse the key:: form instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  versionsort.prereleaseSuffix (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for versionsort.suffix .  Ignored if versionsort.suffix is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  versionsort.suffix"}, {"role": "assistant", "content": "Even when version sort is used in git-tag[1] , tagnames\nwith the same base version but different suffixes are still sorted\nlexicographically, resulting e.g. in prerelease tags appearing\nafter the main release (e.g. \"1.0-rc1\" after \"1.0\").  This\nvariable can be specified to determine the sorting order of tags\nwith different suffixes. By specifying a single suffix in this variable, any tagname containing\nthat suffix will appear before the corresponding main release.  E.g. if\nthe variable is set to \"-rc\", then all \"1.0-rcX\" tags will appear before\n\"1.0\".  If specified multiple times, once per suffix, then the order of\nsuffixes in the configuration will determine the sorting order of tagnames\nwith those suffixes.  E.g. if \"-pre\" appears before \"-rc\" in the\nconfiguration, then all \"1.0-preX\" tags will be listed before any\n\"1.0-rcX\" tags.  The placement of the main release tag relative to tags\nwith various suffixes can be determined by specifying the empty suffix\namong those other suffixes.  E.g. if the suffixes \"-rc\", \"\", \"-ck\", and\n\"-bfs\" appear in the configuration in this order, then all \"v4.8-rcX\" tags\nare listed first, followed by \"v4.8\", then \"v4.8-ckX\" and finally\n\"v4.8-bfsX\". If more than one suffix matches the same tagname, then that tagname will\nbe sorted according to the suffix which starts at the earliest position in\nthe tagname.  If more than one different matching suffix starts at\nthat earliest position, then that tagname will be sorted according to the\nlongest of those suffixes.\nThe sorting order between different suffixes is undefined if they are\nin multiple config files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  web.browser"}, {"role": "assistant", "content": "Specify a web browser that may be used by some commands.\nCurrently only git-instaweb[1] and git-help[1] may use it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktree.guessRemote"}, {"role": "assistant", "content": "If no branch is specified and neither -b nor -B nor --detach is used, then git worktree add defaults to\ncreating a new branch from HEAD.  If worktree.guessRemote is\nset to true, worktree add tries to find a remote-tracking\nbranch whose name uniquely matches the new branch name.  If\nsuch a branch exists, it is checked out and set as \"upstream\"\nfor the new branch.  If no such match can be found, it falls\nback to creating a new branch from the current HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "BUGS When using the deprecated [section.subsection] syntax, changing a value\nwill result in adding a multi-line key instead of a change, if the subsection\nis given with at least one uppercase character. For example when the config\nlooks like [section.subsection]\n    key = value1 and running git config section.Subsection.key value2 will result in [section.subsection]\n    key = value1\n    key = value2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "NAME git-help - Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "SYNOPSIS git help [-a|--all] [--[no-]verbose] [--[no-]external-commands] [--[no-]aliases] git help [[-i|--info] [-m|--man] [-w|--web]] [<command>|<doc>] git help [-g|--guides] git help [-c|--config] git help [--user-interfaces] git help [--developer-interfaces]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "DESCRIPTION With no options and no <command> or <doc> given, the synopsis of the git command and a list of the most commonly used Git commands are printed\non the standard output. If the option --all or -a is given, all available commands are\nprinted on the standard output. If the option --guides or -g is given, a list of the\nGit concept guides is also printed on the standard output. If a command or other documentation is given, the relevant manual page\nwill be brought up. The man program is used by default for this\npurpose, but this can be overridden by other options or configuration\nvariables. If an alias is given, git shows the definition of the alias on\nstandard output. To get the manual page for the aliased command, use git <command> --help . Note that git --help ... is identical to git help ... because the\nformer is internally converted into the latter. To display the git[1] man page, use git help git . This page can be displayed with git help help or git help --help ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -a  --all"}, {"role": "assistant", "content": "Print all the available commands on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --no-external-commands"}, {"role": "assistant", "content": "When used with --all , exclude the listing of external \"git-*\"\ncommands found in the $PATH ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --no-aliases"}, {"role": "assistant", "content": "When used with --all , exclude the listing of configured\naliases."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --verbose"}, {"role": "assistant", "content": "When used with --all , print description for all recognized\ncommands. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -c  --config"}, {"role": "assistant", "content": "List all available configuration variables. This is a short\nsummary of the list in git-config[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -g  --guides"}, {"role": "assistant", "content": "Print a list of the Git concept guides on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --user-interfaces"}, {"role": "assistant", "content": "Print a list of the repository, command and file interfaces\ndocumentation on the standard output. In-repository file interfaces such as .git/info/exclude are\ndocumented here (see gitrepository-layout[5] ), as well as\nin-tree configuration such as .mailmap (see gitmailmap[5] ). This section of the documentation also covers general or widespread\nuser-interface conventions (e.g. gitcli[7] ), and\npseudo-configuration such as the file-based .git/hooks/* interface\ndescribed in githooks[5] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --developer-interfaces"}, {"role": "assistant", "content": "Print a list of file formats, protocols and other developer\ninterfaces documentation on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -i  --info"}, {"role": "assistant", "content": "Display manual page for the command in the info format. The info program will be used for that purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -m  --man"}, {"role": "assistant", "content": "Display manual page for the command in the man format. This\noption may be used to override a value set in the help.format configuration variable. By default the man program will be used to display the manual page,\nbut the man.viewer configuration variable may be used to choose\nother display programs (see below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -w  --web"}, {"role": "assistant", "content": "Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose. The web browser can be specified using the configuration variable help.browser , or web.browser if the former is not set. If neither of\nthese config variables is set, the git web--browse helper script\n(called by git help ) will pick a suitable default. See git-web--browse[1] for more information about this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "CONFIGURATION VARIABLES help.format If no command-line option is passed, the help.format configuration\nvariable will be checked. The following values are supported for this\nvariable; they make git help behave as their corresponding command-\nline option: \"man\" corresponds to -m|--man , \"info\" corresponds to -i|--info , \"web\" or \"html\" correspond to -w|--web . help.browser, web.browser, and browser.<tool>.path The help.browser , web.browser and browser.<tool>.path will also\nbe checked if the web format is chosen (either by command-line\noption or configuration variable). See -w|--web in the OPTIONS\nsection above and git-web--browse[1] . man.viewer The man.viewer configuration variable will be checked if the man format is chosen. The following values are currently supported: \"man\": use the man program as usual, \"woman\": use emacsclient to launch the \"woman\" mode in emacs\n(this only works starting with emacsclient versions 22), \"konqueror\": use kfmclient to open the man page in a new konqueror\ntab (see Note about konqueror below). Values for other tools can be used if there is a corresponding man.<tool>.cmd configuration entry (see below). Multiple values may be given to the man.viewer configuration\nvariable. Their corresponding programs will be tried in the order\nlisted in the configuration file. For example, this configuration: [man]\n\t\tviewer = konqueror\n\t\tviewer = woman will try to use konqueror first. But this may fail (for example, if\nDISPLAY is not set) and in that case emacs' woman mode will be tried. If everything fails, or if no viewer is configured, the viewer specified\nin the GIT_MAN_VIEWER environment variable will be tried.  If that\nfails too, the man program will be tried anyway. man.<tool>.path You can explicitly provide a full path to your preferred man viewer by\nsetting the configuration variable man.<tool>.path . For example, you\ncan configure the absolute path to konqueror by setting man.konqueror.path . Otherwise, git help assumes the tool is\navailable in PATH. man.<tool>.cmd When the man viewer, specified by the man.viewer configuration\nvariables, is not among the supported ones, then the corresponding man.<tool>.cmd configuration variable will be looked up. If this\nvariable exists then the specified tool will be treated as a custom\ncommand and a shell eval will be used to run the command with the man\npage passed as arguments. Note about konqueror When konqueror is specified in the man.viewer configuration\nvariable, we launch kfmclient to try to open the man page on an\nalready opened konqueror in a new tab if possible. For consistency, we also try such a trick if man.konqueror.path is\nset to something like A_PATH_TO/konqueror . That means we will try to\nlaunch A_PATH_TO/kfmclient instead. If you really want to use konqueror , then you can use something like\nthe following: [man]\n\t\tviewer = konq\n\n\t[man \"konq\"]\n\t\tcmd = A_PATH_TO/konqueror Note about git config --global Note that all these configuration variables should probably be set\nusing the --global flag, for example like this: $ git config --global help.format web\n$ git config --global web.browser firefox as they are probably more user specific than repository specific.\nSee git-config[1] for more information about this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "NAME git-bugreport - Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "SYNOPSIS git bugreport [(-o | --output-directory) <path>]\n\t\t[(-s | --suffix) <format> | --no-suffix]\n\t\t[--diagnose[=<mode>]]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "DESCRIPTION Collects information about the user’s machine, Git client, and repository\nstate, in addition to a form requesting information about the behavior the\nuser observed, and stores it in a single text file which the user can then\nshare, for example to the Git mailing list, in order to report an observed\nbug. The following information is requested from the user: Reproduction steps Expected behavior Actual behavior The following information is captured automatically: git version --build-options uname sysname, release, version, and machine strings Compiler-specific info string A list of enabled hooks $SHELL Additional information may be gathered into a separate zip archive using the --diagnose option, and can be attached alongside the bugreport document to\nprovide additional context to readers. This tool is invoked via the typical Git setup process, which means that in some\ncases, it might not be able to launch - for example, if a relevant config file\nis unreadable. In this kind of scenario, it may be helpful to manually gather\nthe kind of information listed above when manually asking for help."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  -o <path>  --output-directory <path>"}, {"role": "assistant", "content": "Place the resulting bug report file in <path> instead of the current\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  -s <format>  --suffix <format>  --no-suffix"}, {"role": "assistant", "content": "Specify an alternate suffix for the bugreport name, to create a file\nnamed git-bugreport-<formatted-suffix> . This should take the form of a\nstrftime(3) format string; the current local time will be used. --no-suffix disables the suffix and the file is just named git-bugreport without any disambiguation measure."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  --no-diagnose  --diagnose[=<mode>]"}, {"role": "assistant", "content": "Create a zip archive of supplemental information about the user’s\nmachine, Git client, and repository state. The archive is written to the\nsame output directory as the bug report and is named git-diagnostics-<formatted-suffix> . Without mode specified, the diagnostic archive will contain the default set of\nstatistics reported by git diagnose . An optional mode value may be specified\nto change which information is included in the archive. See git-diagnose[1] for the list of valid values for mode and details\nabout their usage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "NAME git-init - Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "SYNOPSIS git init [ -q | --quiet ] [ --bare ] [ --template= <template-directory> ]\n\t  [ --separate-git-dir <git-dir> ] [ --object-format= <format> ]\n\t  [ --ref-format= <format> ]\n\t  [ -b <branch-name> | --initial-branch= <branch-name> ]\n\t  [ --shared [ = <permissions> ]] [ <directory> ]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "DESCRIPTION This command creates an empty Git repository - basically a .git directory with subdirectories for objects , refs/heads , refs/tags , and template files.  An initial branch without any\ncommits will be created (see the --initial-branch option below\nfor its name). If the $GIT_DIR environment variable is set then it specifies a path\nto use instead of ./.git for the base of the repository. If the object storage directory is specified via the $GIT_OBJECT_DIRECTORY environment variable then the sha1 directories\nare created underneath; otherwise, the default $GIT_DIR/objects directory is used. Running git init in an existing repository is safe. It will not\noverwrite things that are already there. The primary reason for\nrerunning git init is to pick up newly added templates (or to move\nthe repository to another place if --separate-git-dir is given)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  -q  --quiet"}, {"role": "assistant", "content": "Only print error and warning messages; all other output will be suppressed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --bare"}, {"role": "assistant", "content": "Create a bare repository. If GIT_DIR environment is not set, it is set to the\ncurrent working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --object-format= <format>"}, {"role": "assistant", "content": "Specify the given object <format> (hash algorithm) for the repository.  The valid\nvalues are sha1 and (if enabled) sha256 . sha1 is the default. Note: At present, there is no interoperability between SHA-256\nrepositories and SHA-1 repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --ref-format= <format>"}, {"role": "assistant", "content": "Specify the given ref storage <format> for the repository. The valid values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --template= <template-directory>"}, {"role": "assistant", "content": "Specify the directory from which templates will be used.  (See the \"TEMPLATE\nDIRECTORY\" section below.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --separate-git-dir= <git-dir>"}, {"role": "assistant", "content": "Instead of initializing the repository as a directory to either $GIT_DIR or ./.git/ , create a text file there containing the path to the actual\nrepository.  This file acts as a filesystem-agnostic Git symbolic link to the\nrepository. If this is a reinitialization, the repository will be moved to the specified path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  -b <branch-name>  --initial-branch= <branch-name>"}, {"role": "assistant", "content": "Use <branch-name> for the initial branch in the newly created\nrepository.  If not specified, fall back to the default name (currently master , but this is subject to change in the future; the name can be\ncustomized via the init.defaultBranch configuration variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --shared [ = ( false | true | umask | group | all | world | everybody | <perm> )]"}, {"role": "assistant", "content": "Specify that the Git repository is to be shared amongst several users.  This\nallows users belonging to the same group to push into that\nrepository.  When specified, the config variable core.sharedRepository is\nset so that files and directories under $GIT_DIR are created with the\nrequested permissions.  When not specified, Git will use permissions reported\nby umask (2). The option can have the following values, defaulting to group if no value\nis given: umask false Use permissions reported by umask (2). The default, when --shared is not\nspecified. group true Make the repository group-writable, (and g+sx , since the git group may not be\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask (2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022 , using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions. all world everybody Same as group , but make the repository readable by all users. <perm> <perm> is a 3-digit octal number prefixed with 0 and each file\nwill have mode <perm> . <perm> will override users' umask (2)\nvalue (and not only loosen permissions as group and all do). 0640 will create a repository which is group-readable, but\nnot group-writable or accessible to others. 0660 will create a repo\nthat is readable and writable to the current user and group, but\ninaccessible to others (directories and executable files get their x bit from the r bit for corresponding classes of users)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  umask  false"}, {"role": "assistant", "content": "Use permissions reported by umask (2). The default, when --shared is not\nspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  group  true"}, {"role": "assistant", "content": "Make the repository group-writable, (and g+sx , since the git group may not be\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask (2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022 , using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  all  world  everybody"}, {"role": "assistant", "content": "Same as group , but make the repository readable by all users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  <perm>"}, {"role": "assistant", "content": "<perm> is a 3-digit octal number prefixed with 0 and each file\nwill have mode <perm> . <perm> will override users' umask (2)\nvalue (and not only loosen permissions as group and all do). 0640 will create a repository which is group-readable, but\nnot group-writable or accessible to others. 0660 will create a repo\nthat is readable and writable to the current user and group, but\ninaccessible to others (directories and executable files get their x bit from the r bit for corresponding classes of users)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "TEMPLATE DIRECTORY Files and directories in the template directory whose name do not start with a\ndot will be copied to the $GIT_DIR after it is created. The template directory will be one of the following (in order): the argument given with the --template option; the contents of the $GIT_TEMPLATE_DIR environment variable; the init.templateDir configuration variable; or the default template directory: /usr/share/git-core/templates . The default template directory includes some directory structure, suggested\n\"exclude patterns\" (see gitignore[5] ), and sample hook files. The sample hooks are all disabled by default. To enable one of the\nsample hooks rename it by removing its .sample suffix. See githooks[5] for more general info on hook execution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  Start a new Git repository for an existing code base"}, {"role": "assistant", "content": "$ cd /path/to/my/codebase\n$ git init (1) $ git add . (2) $ git commit (3) Create a /path/to/my/codebase/.git directory. Add all existing files to the index. Record the pristine state as the first commit in the history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "NAME git-clone - Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "SYNOPSIS git clone [ --template= <template-directory> ]\n\t  [ -l ] [ -s ] [ --no-hardlinks ] [ -q ] [ -n ] [ --bare ] [ --mirror ]\n\t  [ -o <name> ] [ -b <name> ] [ -u <upload-pack> ] [ --reference <repository> ]\n\t  [ --dissociate ] [ --separate-git-dir <git-dir> ]\n\t  [ --depth <depth> ] single-branch ] [ --no-tags ]\n\t  [ --recurse-submodules [ = <pathspec> ]] shallow-submodules ] remote-submodules ] [ --jobs <n> ] [ --sparse ] reject-shallow ]\n\t  [ --filter= <filter-spec> ] [ --also-filter-submodules ]] [ -- ] <repository> [ <directory> ]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "DESCRIPTION Clones a repository into a newly created directory, creates\nremote-tracking branches for each branch in the cloned repository\n(visible using git branch --remotes ), and creates and checks out an\ninitial branch that is forked from the cloned repository’s\ncurrently active branch. After the clone, a plain git fetch without arguments will update\nall the remote-tracking branches, and a git pull without\narguments will in addition merge the remote master branch into the\ncurrent master branch, if any (this is untrue when --single-branch is given; see below). This default configuration is achieved by creating references to\nthe remote branch heads under refs/remotes/origin and\nby initializing remote.origin.url and remote.origin.fetch configuration variables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -l  --local"}, {"role": "assistant", "content": "When the repository to clone from is on a local machine,\nthis flag bypasses the normal \"Git aware\" transport\nmechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible. If the repository is specified as a local path (e.g., /path/to/repo ),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying --no-local will\noverride the default when /path/to/repo is given, using the regular\nGit transport instead. If the repository’s $GIT_DIR/objects has symbolic links or is a\nsymbolic link, the clone will fail. This is a security measure to\nprevent the unintentional copying of files by dereferencing the symbolic\nlinks. NOTE : this operation can race with concurrent modification to the\nsource repository, similar to running cp -r src dst while modifying src ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --no-hardlinks"}, {"role": "assistant", "content": "Force the cloning process from a repository on a local\nfilesystem to copy the files under the .git/objects directory instead of using hardlinks. This may be desirable\nif you are trying to make a back-up of your repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -s  --shared"}, {"role": "assistant", "content": "When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup .git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as git commit )\nwhich automatically call git maintenance run --auto . (See git-maintenance[1] .) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt. Note that running git repack without the --local option in a repository\ncloned with --shared will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of clone --shared .\nIt is safe, however, to run git gc , which uses the --local option by\ndefault. If you want to break the dependency of a repository cloned with --shared on\nits source repository, you can simply run git repack -a to copy all\nobjects from the source repository into a pack in the cloned repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --reference [ -if-able ] <repository>"}, {"role": "assistant", "content": "If the reference <repository> is on the local machine,\nautomatically setup .git/objects/info/alternates to\nobtain objects from the reference <repository> .  Using\nan already existing repository as an alternate will\nrequire fewer objects to be copied from the repository\nbeing cloned, reducing network and local storage costs.\nWhen using the --reference-if-able , a non existing\ndirectory is skipped with a warning instead of aborting\nthe clone. NOTE : see the NOTE for the --shared option, and also the --dissociate option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --dissociate"}, {"role": "assistant", "content": "Borrow the objects from reference repositories specified\nwith the --reference options only to reduce network\ntransfer, and stop borrowing from them after a clone is made\nby making necessary local copies of borrowed objects.  This\noption can also be used when cloning locally from a\nrepository that already borrows objects from another\nrepository—​the new repository will borrow objects from the\nsame repository, and this option can be used to stop the\nborrowing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -q  --quiet"}, {"role": "assistant", "content": "Operate quietly.  Progress is not reported to the standard\nerror stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -v  --verbose"}, {"role": "assistant", "content": "Run verbosely. Does not affect the reporting of progress status\nto the standard error stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --server-option= <option>"}, {"role": "assistant", "content": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option= <option> are given, they are all\nsent to the other side in the order listed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -n  --no-checkout"}, {"role": "assistant", "content": "No checkout of HEAD is performed after the clone is complete."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] reject-shallow"}, {"role": "assistant", "content": "Fail if the source repository is a shallow repository.\nThe clone.rejectShallow configuration variable can be used to\nspecify the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --bare"}, {"role": "assistant", "content": "Make a bare Git repository.  That is, instead of\ncreating <directory> and placing the administrative\nfiles in <directory> `/.git`, make the <directory> itself the $GIT_DIR . This obviously implies the --no-checkout because there is nowhere to check out the working tree.\nAlso the branch heads at the remote are copied directly\nto corresponding local branch heads, without mapping\nthem to refs/remotes/origin/ .  When this option is\nused, neither remote-tracking branches nor the related\nconfiguration variables are created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --sparse"}, {"role": "assistant", "content": "Employ a sparse-checkout, with only files in the toplevel\ndirectory initially being present.  The git-sparse-checkout[1] command can be used to grow the\nworking directory as needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --filter= <filter-spec>"}, {"role": "assistant", "content": "Use the partial clone feature and request that the server sends\na subset of reachable objects according to a given object filter.\nWhen using --filter , the supplied <filter-spec> is used for\nthe partial clone filter. For example, --filter=blob:none will\nfilter out all blobs (file contents) until needed by Git. Also, --filter=blob:limit= <size> will filter out all blobs of size\nat least <size> . For more details on filter specifications, see\nthe --filter option in git-rev-list[1] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --also-filter-submodules"}, {"role": "assistant", "content": "Also apply the partial clone filter to any submodules in the repository.\nRequires --filter and --recurse-submodules . This can be turned on by\ndefault by setting the clone.filterSubmodules config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --mirror"}, {"role": "assistant", "content": "Set up a mirror of the source repository.  This implies --bare .\nCompared to --bare , --mirror not only maps local branches of the\nsource to local branches of the target, it maps all refs (including\nremote-tracking branches, notes etc.) and sets up a refspec configuration such\nthat all these refs are overwritten by a git remote update in the\ntarget repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -o <name>  --origin <name>"}, {"role": "assistant", "content": "Instead of using the remote name origin to keep track of the upstream\nrepository, use <name> .  Overrides clone.defaultRemoteName from the\nconfig."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -b <name>  --branch <name>"}, {"role": "assistant", "content": "Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out. --branch can also take tags and detaches the HEAD at that commit\nin the resulting repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -u <upload-pack>  --upload-pack <upload-pack>"}, {"role": "assistant", "content": "When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --template= <template-directory>"}, {"role": "assistant", "content": "Specify the directory from which templates will be used;\n(See the \"TEMPLATE DIRECTORY\" section of git-init[1] .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -c <key> = <value>  --config <key> = <value>"}, {"role": "assistant", "content": "Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The <key> is in the same format as expected by git-config[1] (e.g., core.eol=true ). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote. Due to limitations of the current implementation, some configuration\nvariables do not take effect until after the initial fetch and checkout.\nConfiguration variables known to not take effect are: remote. <name> .mirror and remote. <name> .tagOpt .  Use the\ncorresponding --mirror and --no-tags options instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --depth <depth>"}, {"role": "assistant", "content": "Create a shallow clone with a history truncated to the\nspecified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the\ntips of all branches. If you want to clone submodules shallowly,\nalso pass --shallow-submodules ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --shallow-since= <date>"}, {"role": "assistant", "content": "Create a shallow clone with a history after the specified time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --shallow-exclude= <revision>"}, {"role": "assistant", "content": "Create a shallow clone with a history, excluding commits\nreachable from a specified remote branch or tag.  This option\ncan be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] single-branch"}, {"role": "assistant", "content": "Clone only the history leading to the tip of a single branch,\neither specified by the --branch option or the primary\nbranch remote’s HEAD points at.\nFurther fetches into the resulting repository will only update the\nremote-tracking branch for the branch this option was used for the\ninitial cloning.  If the HEAD at the remote did not point at any\nbranch when --single-branch clone was made, no remote-tracking\nbranch is created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --no-tags"}, {"role": "assistant", "content": "Don’t clone any tags, and set remote.<remote>.tagOpt=--no-tags in the config, ensuring\nthat future git pull and git fetch operations won’t follow\nany tags. Subsequent explicit tag fetches will still work,\n(see git-fetch[1] ). Can be used in conjunction with --single-branch to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --recurse-submodules [ = <pathspec> ]"}, {"role": "assistant", "content": "After the clone is created, initialize and clone submodules\nwithin based on the provided <pathspec> .  If no =<pathspec> is\nprovided, all submodules are initialized and cloned.\nThis option can be given multiple times for pathspecs consisting\nof multiple entries.  The resulting clone has submodule.active set to\nthe provided pathspec, or \".\" (meaning all submodules) if no\npathspec is provided. Submodules are initialized and cloned using their default settings. This is\nequivalent to running git submodule update --init --recursive <pathspec> immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of --no-checkout / -n , --bare ,\nor --mirror is given)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] shallow-submodules"}, {"role": "assistant", "content": "All submodules which are cloned will be shallow with a depth of 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] remote-submodules"}, {"role": "assistant", "content": "All submodules which are cloned will use the status of the submodule’s\nremote-tracking branch to update the submodule, rather than the\nsuperproject’s recorded SHA-1. Equivalent to passing --remote to git submodule update ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --separate-git-dir= <git-dir>"}, {"role": "assistant", "content": "Instead of placing the cloned repository where it is supposed\nto be, place the cloned repository at the specified directory,\nthen make a filesystem-agnostic Git symbolic link to there.\nThe result is Git repository can be separated from working\ntree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --ref-format= <ref-format>"}, {"role": "assistant", "content": "Specify the given ref storage format for the repository. The valid values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -j <n>  --jobs <n>"}, {"role": "assistant", "content": "The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  <repository>"}, {"role": "assistant", "content": "The (possibly remote) <repository> to clone from.  See the GIT URLS section below for more information on specifying\nrepositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  <directory>"}, {"role": "assistant", "content": "The name of a new directory to clone into.  The \"humanish\"\npart of the source repository is used if no <directory> is\nexplicitly given ( repo for /path/to/repo.git and foo for host.xz:foo/.git ).  Cloning into an existing directory\nis only allowed if the directory is empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --bundle-uri= <uri>"}, {"role": "assistant", "content": "Before fetching from the remote, fetch a bundle from the given <uri> and unbundle the data into the local repository. The refs\nin the bundle will be stored under the hidden refs/bundle/* namespace. This option is incompatible with --depth , --shallow-since , and --shallow-exclude ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except the former implies --local option. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle[1] . When Git doesn’t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers[7] for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "EXAMPLES Clone from upstream: $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n$ cd my-linux\n$ make Make a local clone that borrows from the current directory, without checking things out: $ git clone -l -s -n . ../copy\n$ cd ../copy\n$ git show-branch Clone from upstream while borrowing from an existing local directory: $ git clone --reference /git/linux.git \\\n\tgit://git.kernel.org/pub/scm/.../linux.git \\\n\tmy-linux\n$ cd my-linux Create a bare repository to publish your changes to the public: $ git clone --bare -l /home/proj/.git /pub/scm/proj.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init[1] .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.defaultRemoteName"}, {"role": "assistant", "content": "The name of the remote to create when cloning a repository.  Defaults to origin .\nIt can be overridden by passing the --origin command-line\noption."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.rejectShallow"}, {"role": "assistant", "content": "Reject cloning a repository if it is a shallow one; this can be overridden by\npassing the --reject-shallow option on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.filterSubmodules"}, {"role": "assistant", "content": "If a partial clone filter is provided (see --filter in git-rev-list[1] ) and --recurse-submodules is used, also apply\nthe filter to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "NAME git-add - Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "SYNOPSIS git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | -A | --[no-]ignore-removal | [--update | -u]] [--sparse]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n\t  [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "DESCRIPTION This command updates the index using the current content found in\nthe working tree, to prepare the content staged for the next commit.\nIt typically adds the current content of existing paths as a whole,\nbut with some options it can also be used to add content with\nonly part of the changes made to the working tree files applied, or\nremove paths that do not exist in the working tree anymore. The \"index\" holds a snapshot of the content of the working tree, and it\nis this snapshot that is taken as the contents of the next commit.  Thus\nafter making any changes to the working tree, and before running\nthe commit command, you must use the add command to add any new or\nmodified files to the index. This command can be performed multiple times before a commit.  It only\nadds the content of the specified file(s) at the time the add command is\nrun; if you want subsequent changes included in the next commit, then\nyou must run git add again to add the new content to the index. The git status command can be used to obtain a summary of which\nfiles have changes that are staged for the next commit. The git add command will not add ignored files by default.  If any\nignored files were explicitly specified on the command line, git add will fail with a list of ignored files.  Ignored files reached by\ndirectory recursion or filename globbing performed by Git (quote your\nglobs before the shell) will be silently ignored.  The git add command can\nbe used to add ignored files with the -f (force) option. Please see git-commit[1] for alternative ways to add content to a\ncommit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  <pathspec>…​"}, {"role": "assistant", "content": "Files to add content from.  Fileglobs (e.g. *.c ) can\nbe given to add all matching files.  Also a\nleading directory name (e.g. dir to add dir/file1 and dir/file2 ) can be given to update the index to\nmatch the current state of the directory as a whole (e.g.\nspecifying dir will record not just a file dir/file1 modified in the working tree, a file dir/file2 added to\nthe working tree, but also a file dir/file3 removed from\nthe working tree). Note that older versions of Git used\nto ignore removed files; use --no-all option if you want\nto add modified or new files but ignore removed ones. For more details about the <pathspec> syntax, see the pathspec entry\nin gitglossary[7] ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -n  --dry-run"}, {"role": "assistant", "content": "Don’t actually add the file(s), just show if they exist and/or will\nbe ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -v  --verbose"}, {"role": "assistant", "content": "Be verbose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -f  --force"}, {"role": "assistant", "content": "Allow adding otherwise ignored files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --sparse"}, {"role": "assistant", "content": "Allow updating index entries outside of the sparse-checkout cone.\nNormally, git add refuses to update index entries whose paths do\nnot fit within the sparse-checkout cone, since those files might\nbe removed from the working tree without warning. See git-sparse-checkout[1] for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -i  --interactive"}, {"role": "assistant", "content": "Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -p  --patch"}, {"role": "assistant", "content": "Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex. This effectively runs add --interactive , but bypasses the\ninitial command menu and directly jumps to the patch subcommand.\nSee “Interactive mode” for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -e  --edit"}, {"role": "assistant", "content": "Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index. The intent of this option is to pick and choose lines of the patch to\napply, or even to modify the contents of lines to be staged. This can be\nquicker and more flexible than using the interactive hunk selector.\nHowever, it is easy to confuse oneself and create a patch that does not\napply to the index. See EDITING PATCHES below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -u  --update"}, {"role": "assistant", "content": "Update the index just where it already has an entry matching <pathspec> .  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files. If no <pathspec> is given when -u option is used, all\ntracked files in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -A  --all  --no-ignore-removal"}, {"role": "assistant", "content": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree. If no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --no-all  --ignore-removal"}, {"role": "assistant", "content": "Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used. This option is primarily to help users who are used to older\nversions of Git, whose \"git add <pathspec> …​\" was a synonym\nfor \"git add --no-all <pathspec> …​\", i.e. ignored removed files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -N  --intent-to-add"}, {"role": "assistant", "content": "Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --refresh"}, {"role": "assistant", "content": "Don’t add the file(s), but only refresh their stat()\ninformation in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --ignore-errors"}, {"role": "assistant", "content": "If some files could not be added because of errors indexing\nthem, do not abort the operation, but continue adding the\nothers. The command shall still exit with non-zero status.\nThe configuration variable add.ignoreErrors can be set to\ntrue to make this the default behaviour."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --ignore-missing"}, {"role": "assistant", "content": "This option can only be used together with --dry-run. By using\nthis option the user can check if any of the given files would\nbe ignored, no matter if they are already present in the work\ntree or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --no-warn-embedded-repo"}, {"role": "assistant", "content": "By default, git add will warn when adding an embedded\nrepository to the index without using git submodule add to\ncreate an entry in .gitmodules . This option will suppress the\nwarning (e.g., if you are manually performing operations on\nsubmodules)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --renormalize"}, {"role": "assistant", "content": "Apply the \"clean\" process freshly to all tracked files to\nforcibly add them again to the index.  This is useful after\nchanging core.autocrlf configuration or the text attribute\nin order to correct files added with wrong CRLF/LF line endings.\nThis option implies -u . Lone CR characters are untouched, thus\nwhile a CRLF cleans to LF, a CRCRLF sequence is only partially\ncleaned to CRLF."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --chmod=(+|-)x"}, {"role": "assistant", "content": "Override the executable bit of the added files.  The executable\nbit is only changed in the index, the files on disk are left\nunchanged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config[1] ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --"}, {"role": "assistant", "content": "This option can be used to separate command-line options from\nthe list of files, (useful when filenames might be mistaken\nfor command-line options)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "EXAMPLES Adds content from all *.txt files under Documentation directory\nand its subdirectories: $ git add Documentation/\\*.txt Note that the asterisk * is quoted from the shell in this\nexample; this lets the command include the files from\nsubdirectories of Documentation/ directory. Considers adding content from all git-*.sh scripts: $ git add git-*.sh Because this example lets the shell expand the asterisk (i.e. you are\nlisting the files explicitly), it does not consider subdir/git-foo.sh ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  status"}, {"role": "assistant", "content": "This shows the change between HEAD and index (i.e. what will be\ncommitted if you say git commit ), and between index and\nworking tree files (i.e. what you could stage further before git commit using git add ) for each path.  A sample output\nlooks like this: staged     unstaged path\n     1:       binary      nothing foo.png\n     2:     +403/-35        +1/-1 add-interactive.c It shows that foo.png has differences from HEAD (but that is\nbinary so line count cannot be shown) and there is no\ndifference between indexed copy and the working tree\nversion (if the working tree version were also different, binary would have been shown in place of nothing ).  The\nother file, add-interactive.c, has 403 lines added\nand 35 lines deleted if you commit what is in the index, but\nworking tree file has further modifications (one addition and\none deletion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  update"}, {"role": "assistant", "content": "This shows the status information and issues an \"Update>>\"\nprompt.  When the prompt ends with double >> , you can\nmake more than one selection, concatenated with whitespace or\ncomma.  Also you can say ranges.  E.g. \"2-5 7,9\" to choose\n2,3,4,5,7,9 from the list.  If the second number in a range is\nomitted, all remaining patches are taken.  E.g. \"7-\" to choose\n7,8,9 from the list.  You can say * to choose everything. What you chose are then highlighted with * ,\nlike this: staged     unstaged path\n  1:       binary      nothing foo.png\n* 2:     +403/-35        +1/-1 add-interactive.c To remove selection, prefix the input with - like this: Update>> -2 After making the selection, answer with an empty line to stage the\ncontents of working tree files for selected paths in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  revert"}, {"role": "assistant", "content": "This has a very similar UI to update , and the staged\ninformation for selected paths are reverted to that of the\nHEAD version.  Reverting new paths makes them untracked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add untracked"}, {"role": "assistant", "content": "This has a very similar UI to update and revert , and lets you add untracked paths to the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  patch"}, {"role": "assistant", "content": "This lets you choose one path out of a status like selection.\nAfter choosing the path, it presents the diff between the index\nand the working tree file and asks you if you want to stage\nthe change of each hunk.  You can select one of the following\noptions and type return: y - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk or any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk or any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\np - print the current hunk\n? - print help After deciding the fate for all hunks, if there is any hunk\nthat was chosen, the index is updated with the selected hunks. You can omit having to type return here, by setting the configuration\nvariable interactive.singleKey to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  diff"}, {"role": "assistant", "content": "This lets you review what will be committed (i.e. between\nHEAD and index)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  added content"}, {"role": "assistant", "content": "Added content is represented by lines beginning with \"+\". You can\nprevent staging any addition lines by deleting them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  removed content"}, {"role": "assistant", "content": "Removed content is represented by lines beginning with \"-\". You can\nprevent staging their removal by converting the \"-\" to a \" \" (space)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  modified content"}, {"role": "assistant", "content": "Modified content is represented by \"-\" lines (removing the old content)\nfollowed by \"+\" lines (adding the replacement content). You can\nprevent staging the modification by converting \"-\" lines to \" \", and\nremoving \"+\" lines. Beware that modifying only half of the pair is\nlikely to introduce confusing changes to the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  removing untouched content"}, {"role": "assistant", "content": "Content which does not differ between the index and working tree may be\nshown on context lines, beginning with a \" \" (space).  You can stage\ncontext lines for removal by converting the space to a \"-\". The\nresulting working tree file will appear to re-add the content."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  modifying existing content"}, {"role": "assistant", "content": "One can also modify context lines by staging them for removal (by\nconverting \" \" to \"-\") and adding a \"+\" line with the new content.\nSimilarly, one can modify \"+\" lines for existing additions or\nmodifications. In all cases, the new modification will appear reverted\nin the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  new content"}, {"role": "assistant", "content": "You may also add new content that does not exist in the patch; simply\nadd new lines, each starting with \"+\". The addition will appear\nreverted in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add.ignoreErrors  add.ignore-errors (deprecated)"}, {"role": "assistant", "content": "Tells git add to continue adding files when some files cannot be\nadded due to indexing errors. Equivalent to the --ignore-errors option of git-add[1] . add.ignore-errors is deprecated,\nas it does not follow the usual naming convention for configuration\nvariables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add.interactive.useBuiltin"}, {"role": "assistant", "content": "Unused configuration variable. Used in Git versions v2.25.0 to\nv2.36.0 to enable the built-in version of git-add[1] 's\ninteractive mode, which then became the default in Git\nversions v2.37.0 to v2.39.0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "SEE ALSO git-status[1] git-rm[1] git-reset[1] git-mv[1] git-commit[1] git-update-index[1]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "GIT Part of the git[1] suite"}]}

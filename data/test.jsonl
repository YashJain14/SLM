{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-daemon - A really simple server for Git repositories  --user=<user>  --group=<group><|im_end|>\n<|im_start|>assistant\nChange daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group , the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3) and numeric IDs are not supported. Giving these options is an error when used with --inetd ; use\nthe facility of inet daemon to achieve the same before spawning git daemon if needed. Like many programs that switch user id, the daemon does not reset\nenvironment variables such as $HOME when it runs git programs,\ne.g. upload-pack and receive-pack . When using this option, you\nmay also want to set and export HOME to point at the home\ndirectory of <user> before starting the daemon, and make sure any\nGit configuration files in that directory are readable by <user> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -z<|im_end|>\n<|im_start|>assistant\nSeparate the commits with NULs instead of newlines. Also, when --raw or --numstat has been given, do not munge\npathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file  blame.blankBoundary<|im_end|>\n<|im_start|>assistant\nShow blank commit object name for boundary commits in git-blame . This option defaults to false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --numstat<|im_end|>\n<|im_start|>assistant\nSimilar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers<|im_end|>\n<|im_start|>assistant\nPERFORMANCE The design of fast-import allows it to import large projects in a minimum\namount of memory usage and processing time.  Assuming the frontend\nis able to keep up with fast-import and feed it a constant stream of data,\nimport times for projects holding 10+ years of history and containing\n100,000+ individual commits are generally completed in just 1-2\nhours on quite modest (~$2,000 USD) hardware. Most bottlenecks appear to be in foreign source data access (the\nsource just cannot extract revisions fast enough) or disk IO (fast-import\nwrites as fast as the disk will take the data).  Imports will run\nfaster if the source data is stored on a different drive than the\ndestination Git repository (due to less IO contention).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git-diff-index <tree-ish><|im_end|>\n<|im_start|>assistant\ncompares the <tree-ish> and the files on the filesystem.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  -t  --tag<|im_end|>\n<|im_start|>assistant\nCreate a tag by using the tags_subdir instead of the branches_subdir\nspecified during git svn init.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>...<commit> [--] [<path>…​]<|im_end|>\n<|im_start|>assistant\nThis form is to view the changes on the branch containing\nand up to the second <commit>, starting at a common ancestor\nof both <commit>. git diff A...B is equivalent to git diff $(git merge-base A B) B .  You can omit any one\nof <commit>, which has the same effect as using HEAD instead.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-check-mailmap<|im_end|>\n<|im_start|>assistant\nShow canonical names and email addresses of contacts<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-update-index - Register file contents in the working tree to the index  --add<|im_end|>\n<|im_start|>assistant\nIf a specified file isn’t in the index already then it’s\nadded.\nDefault behaviour is to ignore new files.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-daemon - A really simple server for Git repositories<|im_end|>\n<|im_start|>assistant\nDESCRIPTION A really simple TCP Git daemon that normally listens on port \"DEFAULT_GIT_PORT\"\naka 9418.  It waits for a connection asking for a service, and will serve\nthat service if it is enabled. It verifies that the directory has the magic file \"git-daemon-export-ok\", and\nit will refuse to export any Git directory that hasn’t explicitly been marked\nfor export this way (unless the --export-all parameter is specified). If you\npass some directory paths as git daemon arguments, the offers are limited to\nrepositories within those directories. By default, only upload-pack service is enabled, which serves git fetch-pack and git ls-remote clients, which are invoked\nfrom git fetch , git pull , and git clone . This is ideally suited for read-only updates, i.e., pulling from\nGit repositories. An upload-archive also exists to serve git archive .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit-tree - Create a new commit object  -m <message><|im_end|>\n<|im_start|>assistant\nA paragraph in the commit log message. This can be given more than\nonce and each <message> becomes its own paragraph.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-status - Show the working tree status  --ignore-submodules[=<when>]<|im_end|>\n<|im_start|>assistant\nIgnore changes to submodules when looking for changes. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior before 1.7.0). Using \"all\" hides all changes to submodules\n(and suppresses the output of submodule summaries when the config option status.submoduleSummary is set).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  <repository><|im_end|>\n<|im_start|>assistant\nThe \"remote\" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitrepository-layout<|im_end|>\n<|im_start|>assistant\nGit Repository Layout<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  gc.aggressiveDepth<|im_end|>\n<|im_start|>assistant\nThe depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn’t in use. See the documentation for the --depth option in git-repack for more details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  boolean<|im_end|>\n<|im_start|>assistant\nWhen a variable is said to take a boolean value, many\nsynonyms are accepted for true and false ; these are all\ncase-insensitive. true Boolean true literals are yes , on , true ,\nand 1 .  Also, a variable defined without = <value> is taken as true. false Boolean false literals are no , off , false , 0 and the empty string. When converting a value to its canonical form using the --type=bool type\nspecifier, git config will ensure that the output is \"true\" or\n\"false\" (spelled in lowercase).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %as<|im_end|>\n<|im_start|>assistant\nauthor date, short format ( YYYY-MM-DD )<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngiteveryday - A useful minimum set of commands for Everyday Git  Clone the upstream and work on it.  Feed changes to upstream.<|im_end|>\n<|im_start|>assistant\n$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n$ cd my2.6\n$ git switch -c mine master (1) $ edit/compile/test; git commit -a -s (2) $ git format-patch master (3) $ git send-email --to=\"person <email@example.com>\" 00*.patch (4) $ git switch master (5) $ git pull (6) $ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) $ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) $ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) $ git reset --hard ORIG_HEAD (10) $ git gc (11) checkout a new branch mine from master. repeat as needed. extract patches from your branch, relative to master, and email them. return to master , ready to see what’s new git pull fetches from origin by default and merges into the\ncurrent branch. immediately after pulling, look at the changes done upstream\nsince last time we checked, only in the\narea we are interested in. check the branch names in an external repository (if not known). fetch from a specific branch ALL from a specific repository\nand merge it. revert the pull. garbage collect leftover objects from reverted pull.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  tree object<|im_end|>\n<|im_start|>assistant\nAn object containing a list of file names and modes along\nwith refs to the associated blob and/or tree objects. A tree is equivalent to a directory .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  <repository><|im_end|>\n<|im_start|>assistant\nThe \"remote\" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  receive.fsck.skipList<|im_end|>\n<|im_start|>assistant\nActs like fsck.skipList , but is used by git-receive-pack instead of git-fsck . See the fsck.skipList documentation for\ndetails.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  --multiple<|im_end|>\n<|im_start|>assistant\nAllow several <repository> and <group> arguments to be\nspecified. No <refspec>s may be specified.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngithooks - Hooks used by Git  GIT_SENDEMAIL_FILE_TOTAL<|im_end|>\n<|im_start|>assistant\nThe total number of files that will be sent (excluding any FIFOs). This\ncounter does not follow the patch series counter scheme. It will always\nbe equal to the number of files being sent, whether there is a cover\nletter or not.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --bare<|im_end|>\n<|im_start|>assistant\nTreat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rm - Remove files from the working tree and from the index<|im_end|>\n<|im_start|>assistant\nNAME git-rm - Remove files from the working tree and from the index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --icase-pathspecs<|im_end|>\n<|im_start|>assistant\nAdd \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-am - Apply a series of patches from a mailbox  -k  --keep<|im_end|>\n<|im_start|>assistant\nPass -k flag to git mailinfo (see git-mailinfo ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %al<|im_end|>\n<|im_start|>assistant\nauthor email local-part (the part before the @ sign)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  remote.<name>.proxy<|im_end|>\n<|im_start|>assistant\nFor remotes that require curl (http, https and ftp), the URL to\nthe proxy to use for that remote.  Set to the empty string to\ndisable proxying for that remote.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --stat[=<width>[,<name-width>[,<count>]]]<|im_end|>\n<|im_start|>assistant\nGenerate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-mktree<|im_end|>\n<|im_start|>assistant\nBuild a tree-object from ls-tree formatted text<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitattributes - Defining attributes per path  Set to string value \"auto\"<|im_end|>\n<|im_start|>assistant\nWhen text is set to \"auto\", Git decides by itself whether the file\nis text or binary.  If it is text and the file was not already in\nGit with CRLF endings, line endings are converted on checkin and\ncheckout as described above.  Otherwise, no conversion is done on\ncheckin or checkout.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  --format <format><|im_end|>\n<|im_start|>assistant\nA string that interpolates %(fieldname) from a branch ref being shown\nand the object it points at.  The format is the same as\nthat of git-for-each-ref .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file  -e  --show-email<|im_end|>\n<|im_start|>assistant\nShow the author email instead of the author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  --skip-to=<file>  --rotate-to=<file><|im_end|>\n<|im_start|>assistant\nDiscard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  --break<|im_end|>\n<|im_start|>assistant\nPrint an empty line between matches from different files.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers  Delimited format<|im_end|>\n<|im_start|>assistant\nA delimiter string is used to mark the end of the data.\nfast-import will compute the length by searching for the delimiter.\nThis format is primarily useful for testing and is not\nrecommended for real data. 'data' SP '<<' <delim> LF\n\t<raw> LF\n\t<delim> LF\n\tLF? where <delim> is the chosen delimiter string.  The string <delim> must not appear on a line by itself within <raw> , as otherwise\nfast-import will think the data ends earlier than it really does.  The LF immediately trailing <raw> is part of <raw> .  This is one of\nthe limitations of the delimited format, it is impossible to supply\na data chunk which does not have an LF as its last byte. The LF after <delim> LF is optional (it used to be required).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers  rfc2822<|im_end|>\n<|im_start|>assistant\nThis is the standard date format as described by RFC 2822. An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git\nparser is accurate, but a little on the lenient side.  It is the\nsame parser used by git am when applying patches\nreceived from email. Some malformed strings may be accepted as valid dates.  In some of\nthese cases Git will still be able to obtain the correct date from\nthe malformed string.  There are also some types of malformed\nstrings which Git will parse wrong, and yet consider valid.\nSeriously malformed strings will be rejected. Unlike the raw format above, the time zone/UTC offset information\ncontained in an RFC 2822 date string is used to adjust the date\nvalue to UTC prior to storage.  Therefore it is important that\nthis information be as accurate as possible. If the source material uses RFC 2822 style dates,\nthe frontend should let fast-import handle the parsing and conversion\n(rather than attempting to do it itself) as the Git parser has\nbeen well tested in the wild. Frontends should prefer the raw format if the source material\nalready uses UNIX-epoch format, can be coaxed to give dates in that\nformat, or its format is easily convertible to it, as there is no\nambiguity in parsing.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %GK<|im_end|>\n<|im_start|>assistant\nshow the key used to sign a signed commit<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-reflog<|im_end|>\n<|im_start|>assistant\nManage reflog information<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitrevisions - Specifying revisions and ranges for Git  <rev>~[<n>] , e.g. HEAD~, master~3<|im_end|>\n<|im_start|>assistant\nA suffix ~ to a revision parameter means the first parent of\nthat commit object.\nA suffix ~<n> to a revision parameter means the commit\nobject that is the <n>th generation ancestor of the named\ncommit object, following only the first parents.  I.e. <rev>~3 is\nequivalent to <rev>^^^ which is equivalent to <rev>^1^1^1 .  See below for an illustration of\nthe usage of this form.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-merge-index<|im_end|>\n<|im_start|>assistant\nRun a merge for files needing merging<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_DEFAULT_REF_FORMAT<|im_end|>\n<|im_start|>assistant\nIf this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_CEILING_DIRECTORIES<|im_end|>\n<|im_start|>assistant\nThis should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-tag - Create, list, delete or verify a tag object signed with GPG  <commit>  <object><|im_end|>\n<|im_start|>assistant\nThe object that the new tag will refer to, usually a commit.\nDefaults to HEAD.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.checkStat<|im_end|>\n<|im_start|>assistant\nWhen missing or is set to default , many fields in the stat\nstructure are checked to detect if a file has been modified\nsince Git looked at it.  When this configuration variable is\nset to minimal , sub-second part of mtime and ctime, the\nuid and gid of the owner of the file, the inode number (and\nthe device number, if Git was compiled to use it), are\nexcluded from the check among these fields, leaving only the\nwhole-second part of mtime (and ctime, if core.trustCtime is set) and the filesize to be checked. There are implementations of Git that do not leave usable values in\nsome fields (e.g. JGit); by excluding these fields from the\ncomparison, the minimal mode may help interoperability when the\nsame repository is used by these other systems at the same time.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  mergetool.<tool>.cmd<|im_end|>\n<|im_start|>assistant\nSpecify the command to invoke the specified merge tool.  The\nspecified command is evaluated in shell with the following\nvariables available: BASE is the name of a temporary file\ncontaining the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of\nthe file on the current branch; REMOTE is the name of a temporary\nfile containing the contents of the file from the branch being\nmerged; MERGED contains the name of the file to which the merge\ntool should write the results of a successful merge.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --indent-heuristic<|im_end|>\n<|im_start|>assistant\nEnable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  notes.rewrite.<command><|im_end|>\n<|im_start|>assistant\nWhen rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-var<|im_end|>\n<|im_start|>assistant\nShow a Git logical variable<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-shortlog - Summarize git log output  --all<|im_end|>\n<|im_start|>assistant\nPretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  --is-inside-git-dir<|im_end|>\n<|im_start|>assistant\nWhen the current working directory is below the repository\ndirectory print \"true\", otherwise \"false\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-count-objects - Count unpacked number of objects and their disk consumption<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Counts the number of unpacked object files and disk space consumed by\nthem, to help you decide when it is a good time to repack.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  gc.packRefs<|im_end|>\n<|im_start|>assistant\nRunning git pack-refs in a repository renders it\nunclonable by Git versions prior to 1.5.1.2 over dumb\ntransports such as HTTP.  This variable determines whether git gc runs git pack-refs . This can be set to notbare to enable it within all non-bare repos or it can be set to a\nboolean value.  The default is true .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --author=<pattern>  --committer=<pattern><|im_end|>\n<|im_start|>assistant\nLimit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern> ,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern> ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-tree - List the contents of a tree object<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git ls-tree [-d] [-r] [-t] [-l] [-z]\n\t    [--name-only] [--name-status] [--object-only] [--full-name] [--full-tree] [--abbrev[=<n>]] [--format=<format>]\n\t    <tree-ish> [<path>…​]<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  row<|im_end|>\n<|im_start|>assistant\nfill rows before columns<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  cumulative<|im_end|>\n<|im_start|>assistant\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-status - Show the working tree status<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Displays paths that have differences between the index file and the\ncurrent HEAD commit, paths that have differences between the working\ntree and the index file, and paths in the working tree that are not\ntracked by Git (and are not ignored by gitignore ). The first\nare what you would commit by running git commit ; the second and\nthird are what you could commit by running git add before running git commit .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cat-file - Provide contents or details of repository objects  --textconv<|im_end|>\n<|im_start|>assistant\nShow the content as transformed by a textconv filter. In this case, <object> has to be of the form <tree-ish>:<path> , or :<path> in\norder to apply the filter to the content recorded in the index at <path> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes  copy<|im_end|>\n<|im_start|>assistant\nCopy the notes for the first object onto the second object (defaults to\nHEAD). Abort if the second object already has notes, or if the first\nobject has none (use -f to overwrite existing notes to the\nsecond object). This subcommand is equivalent to: git notes add [-f] -C $(git notes list <from-object>) <to-object> In --stdin mode, take lines in the format <from-object> SP <to-object> [ SP <rest> ] LF on standard input, and copy the notes from each <from-object> to its\ncorresponding <to-object>.  (The optional <rest> is ignored so that\nthe command can read the input given to the post-rewrite hook.)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  --no-tags<|im_end|>\n<|im_start|>assistant\nDon’t clone any tags, and set remote.<remote>.tagOpt=--no-tags in the config, ensuring\nthat future git pull and git fetch operations won’t follow\nany tags. Subsequent explicit tag fetches will still work,\n(see git-fetch ). Can be used in conjunction with --single-branch to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %ci<|im_end|>\n<|im_start|>assistant\ncommitter date, ISO 8601-like format<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-tag<|im_end|>\n<|im_start|>assistant\nCreate, list, delete or verify a tag object signed with GPG<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  --reject<|im_end|>\n<|im_start|>assistant\nFor atomicity, git apply by default fails the whole patch and\ndoes not touch the working tree when some of the hunks\ndo not apply.  This option makes it apply\nthe parts of the patch that are applicable, and leave the\nrejected hunks in corresponding *.rej files.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --line-prefix=<prefix><|im_end|>\n<|im_start|>assistant\nPrepend an additional prefix to every line of output.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  -b <name>  --branch <name><|im_end|>\n<|im_start|>assistant\nInstead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out. --branch can also take tags and detaches the HEAD at that commit\nin the resulting repository.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %ad<|im_end|>\n<|im_start|>assistant\nauthor date (format respects --date= option)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-bugreport - Collect information for user to file a bug report  --no-diagnose  --diagnose[=<mode>]<|im_end|>\n<|im_start|>assistant\nCreate a zip archive of supplemental information about the user’s\nmachine, Git client, and repository state. The archive is written to the\nsame output directory as the bug report and is named git-diagnostics-<formatted-suffix> . Without mode specified, the diagnostic archive will contain the default set of\nstatistics reported by git diagnose . An optional mode value may be specified\nto change which information is included in the archive. See git-diagnose for the list of valid values for mode and details\nabout their usage.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes  remove<|im_end|>\n<|im_start|>assistant\nRemove the notes for given objects (defaults to HEAD). When\ngiving zero or one object from the command line, this is\nequivalent to specifying an empty note message to\nthe edit subcommand.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_SSL_NO_VERIFY<|im_end|>\n<|im_start|>assistant\nSetting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-checkout-index - Copy files from the index to the working tree  --prefix=<string><|im_end|>\n<|im_start|>assistant\nWhen creating files, prepend <string> (usually a directory\nincluding a trailing /)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file<|im_end|>\n<|im_start|>assistant\nTHE PORCELAIN FORMAT In this format, each line is output after a header; the\nheader at the minimum has the first line which has: 40-byte SHA-1 of the commit the line is attributed to; the line number of the line in the original file; the line number of the line in the final file; on a line that starts a group of lines from a different\ncommit than the previous one, the number of lines in this\ngroup.  On subsequent lines this field is absent. This header line is followed by the following information\nat least once for each commit: the author name (\"author\"), email (\"author-mail\"), time\n(\"author-time\"), and time zone (\"author-tz\"); similarly\nfor committer. the filename in the commit that the line is attributed to. the first line of the commit log message (\"summary\"). The contents of the actual line are output after the above\nheader, prefixed by a TAB. This is to allow adding more\nheader elements later. The porcelain format generally suppresses commit information that has\nalready been seen. For example, two lines that are blamed to the same\ncommit will both be shown, but the details for that commit will be shown\nonly once. This is more efficient, but may require more state be kept by\nthe reader. The --line-porcelain option can be used to output full\ncommit information for each line, allowing simpler (but less efficient)\nusage like: # count the number of lines attributed to each author\ngit blame --line-porcelain file |\nsed -n 's/^author //p' |\nsort | uniq -c | sort -rn<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --git-dir=<path><|im_end|>\n<|im_start|>assistant\nSet the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  submodule.<name>.update<|im_end|>\n<|im_start|>assistant\nThe method by which a submodule is updated by git submodule update ,\nwhich is the only affected command, others such as git checkout --recurse-submodules are unaffected. It exists for\nhistorical reasons, when git submodule was the only command to\ninteract with submodules; settings like submodule.active and pull.rebase are more specific. It is populated by git submodule init from the gitmodules file.\nSee description of update command in git-submodule .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-daemon - A really simple server for Git repositories  stderr<|im_end|>\n<|im_start|>assistant\nWrite to standard error.\nNote that if --detach is specified,\nthe process disconnects from the real standard error,\nmaking this destination effectively equivalent to none .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-unpack-file<|im_end|>\n<|im_start|>assistant\nCreates a temporary file with a blob’s contents<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-tree - List the contents of a tree object  objectmode<|im_end|>\n<|im_start|>assistant\nThe mode of the object.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]<|im_end|>\n<|im_start|>assistant\nThis form is to view the changes you staged for the next\ncommit relative to the named <commit>.  Typically you\nwould want comparison with the latest commit, so if you\ndo not give <commit>, it defaults to HEAD.\nIf HEAD does not exist (e.g. unborn branches) and\n<commit> is not given, it shows all staged changes.\n--staged is a synonym of --cached. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --cached --merge-base A is equivalent to git diff --cached $(git merge-base A HEAD) .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules  -n  --summary-limit<|im_end|>\n<|im_start|>assistant\nThis option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  patience<|im_end|>\n<|im_start|>assistant\nUse \"patience diff\" algorithm when generating patches.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  column<|im_end|>\n<|im_start|>assistant\nfill columns before rows<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-add - Add file contents to the index  --refresh<|im_end|>\n<|im_start|>assistant\nDon’t add the file(s), but only refresh their stat()\ninformation in the index.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-bundle - Move objects and refs by archive  -q  --quiet<|im_end|>\n<|im_start|>assistant\nThis flag makes the command not to report its progress\non the standard error stream.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  <tree>…​<|im_end|>\n<|im_start|>assistant\nInstead of searching tracked files in the working tree, search\nblobs in the given trees.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-for-each-repo<|im_end|>\n<|im_start|>assistant\nRun a Git command on a list of repositories<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]<|im_end|>\n<|im_start|>assistant\nBreak complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  --incremental<|im_end|>\n<|im_start|>assistant\nsupported<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  git log -3<|im_end|>\n<|im_start|>assistant\nLimits the number of commits to show to 3.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-am - Apply a series of patches from a mailbox<|im_end|>\n<|im_start|>assistant\nHOOKS This command can run applypatch-msg , pre-applypatch ,\nand post-applypatch hooks.  See githooks for more\ninformation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  recursive<|im_end|>\n<|im_start|>assistant\nThis can only resolve two heads using a 3-way merge\nalgorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as\nthe reference tree for the 3-way merge.  This has been\nreported to result in fewer merge conflicts without\ncausing mismerges by tests done on actual merge commits\ntaken from Linux 2.6 kernel development history.\nAdditionally this can detect and handle merges involving\nrenames.  It does not make use of detected copies.  This was\nthe default strategy for resolving two heads from Git v0.99.9k\nuntil v2.33.0. The recursive strategy takes the same options as ort .  However,\nthere are three additional options that ort ignores (not documented\nabove) that are potentially useful with the recursive strategy: patience Deprecated synonym for diff-algorithm=patience . diff-algorithm=[patience|minimal|histogram|myers] Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting. no-renames Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-filter-branch - Rewrite branches  --prune-empty<|im_end|>\n<|im_start|>assistant\nSome filters will generate empty commits that leave the tree untouched.\nThis option instructs git-filter-branch to remove such commits if they\nhave exactly one or zero non-pruned parents; merge commits will\ntherefore remain intact.  This option cannot be used together with --commit-filter , though the same effect can be achieved by using the\nprovided git_commit_non_empty_tree function in a commit filter.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-diff<|im_end|>\n<|im_start|>assistant\nShow changes between commits, commit and working tree, etc<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_OPTIONAL_LOCKS<|im_end|>\n<|im_start|>assistant\nIf this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  detachedHead<|im_end|>\n<|im_start|>assistant\nShown when the user uses git-switch or git-checkout to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  fetch.writeCommitGraph<|im_end|>\n<|im_start|>assistant\nSet to true to write a commit-graph after every git fetch command\nthat downloads a pack-file from a remote. Using the --split option,\nmost executions will create a very small commit-graph file on top of\nthe existing commit-graph file(s). Occasionally, these files will\nmerge and the write may take longer. Having an updated commit-graph\nfile helps performance of many Git commands, including git merge-base , git push -f , and git log --graph . Defaults to false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  sequencerInUse<|im_end|>\n<|im_start|>assistant\nShown when a sequencer command is already in progress.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  plain<|im_end|>\n<|im_start|>assistant\nShow words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gittutorial-2<|im_end|>\n<|im_start|>assistant\nA tutorial introduction to Git: part two<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  git log -L '/int main/',/^}/:main.c<|im_end|>\n<|im_start|>assistant\nShows how the function main() in the file main.c evolved\nover time.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails  --compose<|im_end|>\n<|im_start|>assistant\nInvoke a text editor (see GIT_EDITOR in git-var )\nto edit an introductory message for the patch series. When --compose is used, git send-email will use the From, To, Cc, Bcc,\nSubject, Reply-To, and In-Reply-To headers specified in the message. If\nthe body of the message (what you type after the headers and a blank\nline) only contains blank (or Git: prefixed) lines, the summary won’t be\nsent, but the headers mentioned above will be used unless they are\nremoved. Missing From or In-Reply-To headers will be prompted for. See the CONFIGURATION section for sendemail.multiEdit .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  --notes[=<ref>]  --no-notes<|im_end|>\n<|im_start|>assistant\nAppend the notes (see git-notes ) for the commit\nafter the three-dash line. The expected use case of this is to write supporting explanation for\nthe commit that does not belong to the commit log message proper,\nand include it with the patch submission. While one can simply write\nthese explanations after format-patch has run but before sending,\nkeeping them as Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the notes.rewrite configuration options in git-notes to use this workflow). The default is --no-notes , unless the format.notes configuration is\nset.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]<|im_end|>\n<|im_start|>assistant\nOutput the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  changes<|im_end|>\n<|im_start|>assistant\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  renormalize<|im_end|>\n<|im_start|>assistant\nThis runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -P  --perl-regexp<|im_end|>\n<|im_start|>assistant\nConsider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  log<|im_end|>\n<|im_start|>assistant\nThis should make it easy to look up svn log messages when svn\nusers refer to -r/--revision numbers. The following features from ‘svn log’ are supported: -r <n>[:<n>] --revision=<n>[:<n>] is supported, non-numeric args are not:\nHEAD, NEXT, BASE, PREV, etc …​ -v --verbose it’s not completely compatible with the --verbose\noutput in svn log, but reasonably close. --limit=<n> is NOT the same as --max-count, doesn’t count\nmerged/excluded commits --incremental supported New features: --show-commit shows the Git commit sha1, as well --oneline our version of --pretty=oneline Note SVN itself only stores times in UTC and nothing else. The regular svn\nclient converts the UTC time to the local time (or based on the TZ=\nenvironment). This command has the same behaviour. Any other arguments are passed directly to git log<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  mergetool.writeToTemp<|im_end|>\n<|im_start|>assistant\nGit writes temporary BASE , LOCAL , and REMOTE versions of\nconflicting files in the worktree by default.  Git will attempt\nto use a temporary directory for these files when set true .\nDefaults to false .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  color.transport<|im_end|>\n<|im_start|>assistant\nA boolean to enable/disable color when pushes are rejected. May be\nset to always , false (or never ) or auto (or true ), in which\ncase colors are used only when the error output goes to a terminal.\nIf unset, then the value of color.ui is used ( auto by default).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-clone<|im_end|>\n<|im_start|>assistant\nClone a repository into a new directory<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  <repository><|im_end|>\n<|im_start|>assistant\nThe (possibly remote) <repository> to clone from.  See the GIT URLS section below for more information on specifying\nrepositories.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  objectsize[:padded]<|im_end|>\n<|im_start|>assistant\nThe object size of the file which is recorded in the index\n(\"-\" if the object is a commit or tree ).\nIt also supports a padded format of size with \"%(objectsize:padded)\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.colorMovedWS<|im_end|>\n<|im_start|>assistant\nWhen moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  svn.useSvnsyncProps  svn-remote.<name>.useSvnsyncprops<|im_end|>\n<|im_start|>assistant\nSimilar to the useSvmProps option; this is for users\nof the svnsync(1) command distributed with SVN 1.4.x and\nlater.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]<|im_end|>\n<|im_start|>assistant\nSelect only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-merge - Join two or more development histories together  --quit<|im_end|>\n<|im_start|>assistant\nForget about the current merge in progress. Leave the index\nand the working tree as-is. If MERGE_AUTOSTASH is present, the\nstash entry will be saved to the stash list.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  --mirror<|im_end|>\n<|im_start|>assistant\nInstead of naming each ref to push, specifies that all\nrefs under refs/ (which includes but is not\nlimited to refs/heads/ , refs/remotes/ , and refs/tags/ )\nbe mirrored to the remote repository.  Newly created local\nrefs will be pushed to the remote end, locally updated refs\nwill be force updated on the remote end, and deleted refs\nwill be removed from the remote end.  This is the default\nif the configuration option remote.<remote>.mirror is\nset.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-check-ignore - Debug gitignore / exclude files  1<|im_end|>\n<|im_start|>assistant\nNone of the provided paths are ignored.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  <commit-ish><|im_end|>\n<|im_start|>assistant\nIndicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --raw<|im_end|>\n<|im_start|>assistant\nGenerate the diff in raw format.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc<|im_end|>\n<|im_start|>assistant\nCombined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\").<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.statGraphWidth<|im_end|>\n<|im_start|>assistant\nLimit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -O<orderfile><|im_end|>\n<|im_start|>assistant\nControl the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-apply<|im_end|>\n<|im_start|>assistant\nApply a patch to files and/or to the index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  --stat[=<width>[,<name-width>[,<count>]]]<|im_end|>\n<|im_start|>assistant\nGenerate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  <limit><|im_end|>\n<|im_start|>assistant\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_CEILING_DIRECTORIES<|im_end|>\n<|im_start|>assistant\nThis should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --find-copies-harder<|im_end|>\n<|im_start|>assistant\nFor performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-filter-branch - Rewrite branches  --msg-filter <command><|im_end|>\n<|im_start|>assistant\nThis is the filter for rewriting the commit messages.\nThe argument is evaluated in the shell with the original\ncommit message on standard input; its standard output is\nused as the new commit message.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %(decorate[:<options>])<|im_end|>\n<|im_start|>assistant\nref names with custom decorations. The decorate string may be followed by a\ncolon and zero or more comma-separated options. Option values may contain\nliteral formatting codes. These must be used for commas ( %x2C ) and closing\nparentheses ( %x29 ), due to their role in the option syntax. prefix=<value> : Shown before the list of ref names.  Defaults to \" ( \". suffix=<value> : Shown after the list of ref names.  Defaults to \" ) \". separator=<value> : Shown between ref names.  Defaults to \" , \". pointer=<value> : Shown between HEAD and the branch it points to, if any.\nDefaults to \" -> \". tag=<value> : Shown before tag names. Defaults to \" tag: \".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  files<|im_end|>\n<|im_start|>assistant\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %ce<|im_end|>\n<|im_start|>assistant\ncommitter email<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  --exclude=<path-pattern><|im_end|>\n<|im_start|>assistant\nDon’t apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to exclude certain\nfiles or directories.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-sh-i18n<|im_end|>\n<|im_start|>assistant\nGit’s i18n setup code for shell scripts<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-credential<|im_end|>\n<|im_start|>assistant\nRetrieve and store user credentials<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rm - Remove files from the working tree and from the index  --pathspec-from-file=<file><|im_end|>\n<|im_start|>assistant\nPathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-difftool - Show changes using common diff tools  git-mergetool<|im_end|>\n<|im_start|>assistant\nRun merge conflict resolution tools to resolve merge conflicts<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --ignore-space-at-eol<|im_end|>\n<|im_start|>assistant\nIgnore changes in whitespace at EOL.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-checkout - Switch branches or restore working tree files  <pathspec>…​<|im_end|>\n<|im_start|>assistant\nLimits the paths affected by the operation. For more details, see the pathspec entry in gitglossary .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-show-index<|im_end|>\n<|im_start|>assistant\nShow packed archive index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --color-words[=<regex>]<|im_end|>\n<|im_start|>assistant\nEquivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.alternateRefsCommand<|im_end|>\n<|im_start|>assistant\nWhen advertising tips of available history from an alternate, use the shell to\nexecute the specified command instead of git-for-each-ref . The\nfirst argument is the absolute path of the alternate. Output must contain one\nhex object id per line (i.e., the same as produced by git for-each-ref\n--format='%(objectname)' ). Note that you cannot generally put git for-each-ref directly into the config\nvalue, as it does not take a repository path as an argument (but you can wrap\nthe command above in a shell script).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_ALLOW_PROTOCOL<|im_end|>\n<|im_start|>assistant\nIf set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config for more details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-switch<|im_end|>\n<|im_start|>assistant\nSwitch branches<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial to get started, then see giteveryday for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff<|im_end|>\n<|im_start|>assistant\ncompares the (i)ndex and the (w)ork tree;<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-apply<|im_end|>\n<|im_start|>assistant\nApply a patch to files and/or to the index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  --description-file=<file><|im_end|>\n<|im_start|>assistant\nUse the contents of <file> instead of the branch’s description\nfor generating the cover letter.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.alternateRefsPrefixes<|im_end|>\n<|im_start|>assistant\nWhen listing references from an alternate, list only references that begin\nwith the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref . To list multiple prefixes, separate them with\nwhitespace. If core.alternateRefsCommand is set, setting core.alternateRefsPrefixes has no effect.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  --commit-url<|im_end|>\n<|im_start|>assistant\nUse the specified URL to connect to the destination Subversion\nrepository.  This is useful in cases where the source SVN\nrepository is read-only.  This option overrides configuration\nproperty commiturl . git config --get-all svn-remote.<name>.commiturl<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitweb<|im_end|>\n<|im_start|>assistant\nGit web interface (web frontend to Git repositories)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  color.decorate.<slot><|im_end|>\n<|im_start|>assistant\nUse customized color for git log --decorate output. <slot> is one\nof branch , remoteBranch , tag , stash or HEAD for local\nbranches, remote-tracking branches, tags, stash and HEAD, respectively\nand grafted for grafted commits.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  gui.pruneDuringFetch<|im_end|>\n<|im_start|>assistant\n\"true\" if git-gui should prune remote-tracking branches when\nperforming a fetch. The default value is \"false\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --left-only<|im_end|>\n<|im_start|>assistant\nSuppress commits that are missing from the first specified range\n(or the \"left range\" when using the <rev1>...<rev2> format).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-credential-cache<|im_end|>\n<|im_start|>assistant\nHelper to temporarily store passwords in memory<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  -U<n>  --unified=<n><|im_end|>\n<|im_start|>assistant\nGenerate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  files<|im_end|>\n<|im_start|>assistant\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitignore<|im_end|>\n<|im_start|>assistant\nSpecifies intentionally untracked files to ignore<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.hideDotFiles<|im_end|>\n<|im_start|>assistant\n(Windows-only) If true, mark newly-created directories and files whose\nname starts with a dot as hidden.  If dotGitOnly , only the .git/ directory is hidden, but no other files starting with a dot.  The\ndefault mode is dotGitOnly .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  rebase.autoStash<|im_end|>\n<|im_start|>assistant\nWhen set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run rebase on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful rebase might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-rebase .\nDefaults to false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  -b  --ignore-space-change<|im_end|>\n<|im_start|>assistant\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth<|im_end|>\n<|im_start|>assistant\nLimit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-update-index - Register file contents in the working tree to the index  --[no-]skip-worktree<|im_end|>\n<|im_start|>assistant\nWhen one of these flags is specified, the object names recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"skip-worktree\" bit for the paths. See\nsection \"Skip-worktree bit\" below for more information.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  --compact-summary<|im_end|>\n<|im_start|>assistant\nOutput a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --ignore-space-at-eol<|im_end|>\n<|im_start|>assistant\nIgnore changes in whitespace at EOL.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  color.grep<|im_end|>\n<|im_start|>assistant\nWhen set to always , always highlight matches.  When false (or never ), never.  When set to true or auto , use color only\nwhen the output is written to the terminal.  If unset, then the\nvalue of color.ui is used ( auto by default).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database  fsck.skipList<|im_end|>\n<|im_start|>assistant\nThe path to a list of object names (i.e. one unabbreviated SHA-1 per\nline) that are known to be broken in a non-fatal way and should\nbe ignored. On versions of Git 2.20 and later, comments ( # ), empty\nlines, and any leading and trailing whitespace are ignored. Everything\nbut a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted\ndespite early commits containing errors that can be safely ignored,\nsuch as invalid committer email addresses.  Note: corrupt objects\ncannot be skipped with this setting. Like fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants. Unlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not\nfall back on the fsck.skipList configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names\nlist should be sorted. This was never a requirement; the object names\ncould appear in any order, but when reading the list we tracked whether\nthe list was sorted for the purposes of an internal binary search\nimplementation, which could save itself some work with an already sorted\nlist. Unless you had a humongous list there was no reason to go out of\nyour way to pre-sort the list. After Git version 2.20 a hash implementation\nis used instead, so there’s now no reason to pre-sort the list.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --cached<|im_end|>\n<|im_start|>assistant\nDo not consider the on-disk file at all.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-quiltimport<|im_end|>\n<|im_start|>assistant\nApplies a quilt patchset onto the current branch<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-http-push<|im_end|>\n<|im_start|>assistant\nPush objects over HTTP/DAV to another repository<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -I<regex>  --ignore-matching-lines=<regex><|im_end|>\n<|im_start|>assistant\nIgnore changes whose all lines match <regex>.  This option may\nbe specified more than once.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  diff.statGraphWidth<|im_end|>\n<|im_start|>assistant\nLimit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rm - Remove files from the working tree and from the index  --sparse<|im_end|>\n<|im_start|>assistant\nAllow updating index entries outside of the sparse-checkout cone.\nNormally, git rm refuses to update index entries whose paths do\nnot fit within the sparse-checkout cone. See git-sparse-checkout for more.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-update-index - Register file contents in the working tree to the index  --test-untracked-cache<|im_end|>\n<|im_start|>assistant\nOnly perform tests on the working directory to make sure\nuntracked cache can be used. You have to manually enable\nuntracked cache using --untracked-cache or --force-untracked-cache or the core.untrackedCache configuration variable afterwards if you really want to use\nit. If a test fails the exit code is 1 and a message\nexplains what is not working as needed, otherwise the exit\ncode is 0 and OK is printed.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --left-right<|im_end|>\n<|im_start|>assistant\nMark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  --no-color-moved<|im_end|>\n<|im_start|>assistant\nTurn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  Skip \"branches\" and \"tags\" of first level directories<|im_end|>\n<|im_start|>assistant\n--ignore-paths=\"^[^/]+/(?:branches|tags)\"<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gittutorial<|im_end|>\n<|im_start|>assistant\nA tutorial introduction to Git<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  @{<n>} , e.g. @{1}<|im_end|>\n<|im_start|>assistant\nYou can use the @ construct with an empty ref part to get at a\nreflog entry of the current branch. For example, if you are on\nbranch blabla then @{1} means the same as blabla@{1} .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  --ignore-whitespace<|im_end|>\n<|im_start|>assistant\nIgnore whitespace differences when trying to reconcile\ndifferences. Currently, each backend implements an approximation of\nthis behavior: apply backend When applying a patch, ignore changes in whitespace in context\nlines. Unfortunately, this means that if the \"old\" lines being\nreplaced by the patch differ only in whitespace from the existing\nfile, you will get a merge conflict instead of a successful patch\napplication. merge backend Treat lines with only whitespace changes as unchanged when merging.\nUnfortunately, this means that any patch hunks that were intended\nto modify whitespace and nothing else will be dropped, even if the\nother side had no changes that conflicted.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  receive.denyDeleteCurrent<|im_end|>\n<|im_start|>assistant\nIf set to true, git-receive-pack will deny a ref update that\ndeletes the currently checked out branch of a non-bare repository.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-tag - Create, list, delete or verify a tag object signed with GPG  <tagname><|im_end|>\n<|im_start|>assistant\nThe name of the tag to create, delete, or describe.\nThe new tag name must pass all checks defined by git-check-ref-format .  Some of these checks\nmay restrict the characters allowed in a tag name.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  no<|im_end|>\n<|im_start|>assistant\nDo not ignore whitespace when performing move detection.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  <paths><|im_end|>\n<|im_start|>assistant\nCommits modifying the given <paths> are selected.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers  now<|im_end|>\n<|im_start|>assistant\nAlways use the current time and time zone.  The literal now must always be supplied for <when> . This is a toy format.  The current time and time zone of this system\nis always copied into the identity string at the time it is being\ncreated by fast-import.  There is no way to specify a different time or\ntime zone. This particular format is supplied as it’s short to implement and\nmay be useful to a process that wants to create a new commit\nright now, without needing to use a working directory or git update-index . If separate author and committer commands are used in a commit the timestamps may not match, as the system clock will be polled\ntwice (once for each command).  The only way to ensure that both\nauthor and committer identity information has the same timestamp\nis to omit author (thus copying from committer ) or to use a\ndate format other than now .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %cs<|im_end|>\n<|im_start|>assistant\ncommitter date, short format ( YYYY-MM-DD )<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-for-each-ref<|im_end|>\n<|im_start|>assistant\nOutput information on each ref<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-worktree - Manage multiple working trees  --lock<|im_end|>\n<|im_start|>assistant\nKeep the worktree locked after creation. This is the\nequivalent of git worktree lock after git worktree add ,\nbut without a race condition.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  -v  --verbose<|im_end|>\n<|im_start|>assistant\nRun verbosely. Does not affect the reporting of progress status\nto the standard error stream.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  mergetool.<vimdiff variant>.layout<|im_end|>\n<|im_start|>assistant\nConfigure the split window layout for vimdiff’s <variant> , which is any of vimdiff , nvimdiff , gvimdiff .\nUpon launching git mergetool with --tool=<variant> (or without --tool if merge.tool is configured as <variant> ), Git will consult mergetool.<variant>.layout to determine the tool’s layout. If the\nvariant-specific configuration is not available, vimdiff 's is used as\nfallback.  If that too is not available, a default layout with 4 windows\nwill be used.  To configure the layout, see the BACKEND SPECIFIC HINTS section in git-mergetool .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-fetch-pack<|im_end|>\n<|im_start|>assistant\nReceive missing objects from another repository<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  ignore-space-at-eol<|im_end|>\n<|im_start|>assistant\nIgnore changes in whitespace at EOL.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-shortlog - Summarize git log output  --exclude-first-parent-only<|im_end|>\n<|im_start|>assistant\nWhen finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitworkflows - An overview of recommended workflows with Git<|im_end|>\n<|im_start|>assistant\nMANAGING BRANCHES There are two main tools that can be used to include changes from one\nbranch on another: git-merge and git-cherry-pick . Merges have many advantages, so we try to solve as many problems as\npossible with merges alone.  Cherry-picking is still occasionally\nuseful; see \"Merging upwards\" below for an example. Most importantly, merging works at the branch level, while\ncherry-picking works at the commit level.  This means that a merge can\ncarry over the changes from 1, 10, or 1000 commits with equal ease,\nwhich in turn means the workflow scales much better to a large number\nof contributors (and contributions).  Merges are also easier to\nunderstand because a merge commit is a \"promise\" that all changes from\nall its parents are now included. There is a tradeoff of course: merges require a more careful branch\nmanagement.  The following subsections discuss the important points. Graduation As a given feature goes from experimental to stable, it also\n\"graduates\" between the corresponding branches of the software. git.git uses the following integration branches : maint tracks the commits that should go into the next \"maintenance\nrelease\", i.e., update of the last released stable version; master tracks the commits that should go into the next release; next is intended as a testing branch for topics being tested for\nstability for master. There is a fourth official branch that is used slightly differently: seen (patches seen by the maintainer) is an integration branch for\nthings that are not quite ready for inclusion yet (see \"Integration\nBranches\" below). Each of the four branches is usually a direct descendant of the one\nabove it. Conceptually, the feature enters at an unstable branch (usually next or seen ), and \"graduates\" to master for the next release once it is\nconsidered stable enough. Merging upwards The \"downwards graduation\" discussed above cannot be done by actually\nmerging downwards, however, since that would merge all changes on\nthe unstable branch into the stable one.  Hence the following: Rule: Merge upwards Always commit your fixes to the oldest supported branch that requires\nthem.  Then (periodically) merge the integration branches upwards into each\nother. This gives a very controlled flow of fixes.  If you notice that you\nhave applied a fix to e.g. master that is also required in maint ,\nyou will need to cherry-pick it (using git-cherry-pick )\ndownwards.  This will happen a few times and is nothing to worry about\nunless you do it very frequently. Topic branches Any nontrivial feature will require several patches to implement, and\nmay get extra bugfixes or improvements during its lifetime. Committing everything directly on the integration branches leads to many\nproblems: Bad commits cannot be undone, so they must be reverted one\nby one, which creates confusing histories and further error potential\nwhen you forget to revert part of a group of changes.  Working in\nparallel mixes up the changes, creating further confusion. Use of \"topic branches\" solves these problems.  The name is pretty\nself explanatory, with a caveat that comes from the \"merge upwards\"\nrule above: Rule: Topic branches Make a side branch for every topic (feature, bugfix, …​). Fork it off\nat the oldest integration branch that you will eventually want to merge it\ninto. Many things can then be done very naturally: To get the feature/bugfix into an integration branch, simply merge\nit.  If the topic has evolved further in the meantime, merge again.\n(Note that you do not necessarily have to merge it to the oldest\nintegration branch first.  For example, you can first merge a bugfix\nto next , give it some testing time, and merge to maint when you\nknow it is stable.) If you find you need new features from the branch other to continue\nworking on your topic, merge other to topic .  (However, do not\ndo this \"just habitually\", see below.) If you find you forked off the wrong branch and want to move it\n\"back in time\", use git-rebase . Note that the last point clashes with the other two: a topic that has\nbeen merged elsewhere should not be rebased.  See the section on\nRECOVERING FROM UPSTREAM REBASE in git-rebase . We should point out that \"habitually\" (regularly for no real reason)\nmerging an integration branch into your topics — and by extension,\nmerging anything upstream into anything downstream on a regular basis — is frowned upon: Rule: Merge to downstream only at well-defined points Do not merge to downstream except with a good reason: upstream API\nchanges affect your branch; your branch no longer merges to upstream\ncleanly; etc. Otherwise, the topic that was merged to suddenly contains more than a\nsingle (well-separated) change.  The many resulting small merges will\ngreatly clutter up history.  Anyone who later investigates the history\nof a file will have to find out whether that merge affected the topic\nin development.  An upstream might even inadvertently be merged into a\n\"more stable\" branch.  And so on. Throw-away integration If you followed the last paragraph, you will now have many small topic\nbranches, and occasionally wonder how they interact.  Perhaps the\nresult of merging them does not even work?  But on the other hand, we\nwant to avoid merging them anywhere \"stable\" because such merges\ncannot easily be undone. The solution, of course, is to make a merge that we can undo: merge\ninto a throw-away branch. Rule: Throw-away integration branches To test the interaction of several topics, merge them into a\nthrow-away branch.  You must never base any work on such a branch! If you make it (very) clear that this branch is going to be deleted\nright after the testing, you can even publish this branch, for example\nto give the testers a chance to work with it, or other developers a\nchance to see if their in-progress work will be compatible. git.git has such an official throw-away integration branch called seen . Branch management for a release Assuming you are using the merge approach discussed above, when you\nare releasing your project you will need to do some additional branch\nmanagement work. A feature release is created from the master branch, since master tracks the commits that should go into the next feature release. The master branch is supposed to be a superset of maint . If this\ncondition does not hold, then maint contains some commits that\nare not included on master . The fixes represented by those commits\nwill therefore not be included in your feature release. To verify that master is indeed a superset of maint , use git log: Recipe: Verify master is a superset of maint git log master..maint This command should not list any commits.  Otherwise, check out master and merge maint into it. Now you can proceed with the creation of the feature release. Apply a\ntag to the tip of master indicating the release version: Recipe: Release tagging git tag -s -m \"Git X.Y.Z\" vX.Y.Z master You need to push the new tag to a public Git server (see\n\"DISTRIBUTED WORKFLOWS\" below). This makes the tag available to\nothers tracking your project. The push could also trigger a\npost-update hook to perform release-related items such as building\nrelease tarballs and preformatted documentation pages. Similarly, for a maintenance release, maint is tracking the commits\nto be released. Therefore, in the steps above simply tag and push maint rather than master . Maintenance branch management after a feature release After a feature release, you need to manage your maintenance branches. First, if you wish to continue to release maintenance fixes for the\nfeature release made before the recent one, then you must create\nanother branch to track commits for that previous release. To do this, the current maintenance branch is copied to another branch\nnamed with the previous release version number (e.g. maint-X.Y.(Z-1)\nwhere X.Y.Z is the current release). Recipe: Copy maint git branch maint-X.Y.(Z-1) maint The maint branch should now be fast-forwarded to the newly released\ncode so that maintenance fixes can be tracked for the current release: Recipe: Update maint to new release git checkout maint git merge --ff-only master If the merge fails because it is not a fast-forward, then it is\npossible some fixes on maint were missed in the feature release.\nThis will not happen if the content of the branches was verified as\ndescribed in the previous section. Branch management for next and seen after a feature release After a feature release, the integration branch next may optionally be\nrewound and rebuilt from the tip of master using the surviving\ntopics on next : Recipe: Rewind and rebuild next git switch -C next master git merge ai/topic_in_next1 git merge ai/topic_in_next2 …​ The advantage of doing this is that the history of next will be\nclean. For example, some topics merged into next may have initially\nlooked promising, but were later found to be undesirable or premature.\nIn such a case, the topic is reverted out of next but the fact\nremains in the history that it was once merged and reverted. By\nrecreating next , you give another incarnation of such topics a clean\nslate to retry, and a feature release is a good point in history to do\nso. If you do this, then you should make a public announcement indicating\nthat next was rewound and rebuilt. The same rewind and rebuild process may be followed for seen . A public\nannouncement is not necessary since seen is a throw-away branch, as\ndescribed above.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-switch - Switch branches<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git switch [<options>] [--no-guess] <branch> git switch [<options>] --detach [<start-point>] git switch [<options>] (-c|-C) <new-branch> [<start-point>] git switch [<options>] --orphan <new-branch><|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_GLOB_PATHSPECS<|im_end|>\n<|im_start|>assistant\nSetting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --no-replace-objects<|im_end|>\n<|im_start|>assistant\nDo not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace for more information.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  HEAD<|im_end|>\n<|im_start|>assistant\nindicates the head of the current branch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  transfer.fsckObjects<|im_end|>\n<|im_start|>assistant\nWhen fetch.fsckObjects or receive.fsckObjects are\nnot set, the value of this variable is used instead.\nDefaults to false. When set, the fetch or receive will abort in the case of a malformed\nobject or a link to a nonexistent object. In addition, various other\nissues are checked for, including legacy issues (see fsck.<msg-id> ),\nand potential security issues like the existence of a .GIT directory\nor a malicious .gitmodules file (see the release notes for v2.2.1\nand v2.17.1 for details). Other sanity and security checks may be\nadded in future releases. On the receiving side, failing fsckObjects will make those objects\nunreachable, see \"QUARANTINE ENVIRONMENT\" in git-receive-pack . On the fetch side, malformed objects will\ninstead be left unreferenced in the repository. Due to the non-quarantine nature of the fetch.fsckObjects implementation it cannot be relied upon to leave the object store\nclean like receive.fsckObjects can. As objects are unpacked they’re written to the object store, so there\ncan be cases where malicious objects get introduced even though the\n\"fetch\" failed, only to have a subsequent \"fetch\" succeed because only\nnew incoming objects are checked, not those that have already been\nwritten to the object store. That difference in behavior should not be\nrelied upon. In the future, such objects may be quarantined for\n\"fetch\" as well. For now, the paranoid need to find some way to emulate the quarantine\nenvironment if they’d like the same protection as \"push\". E.g. in the\ncase of an internal mirror do the mirroring in two steps, one to fetch\nthe untrusted objects, and then do a second \"push\" (which will use the\nquarantine) to another internal repo, and have internal clients\nconsume this pushed-to repository, or embargo internal fetches and\nonly allow them once a full \"fsck\" has run (and no new fetches have\nhappened in the meantime).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-clean<|im_end|>\n<|im_start|>assistant\nRemove untracked files from the working tree<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --no-lazy-fetch<|im_end|>\n<|im_start|>assistant\nDo not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  git log -p -m --first-parent<|im_end|>\n<|im_start|>assistant\nShows the history including change diffs, but only from the\n“main branch” perspective, skipping commits that come from merged\nbranches, and showing full diffs of changes introduced by the merges.\nThis makes sense only when following a strict policy of merging all\ntopic branches when staying on a single integration branch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.context<|im_end|>\n<|im_start|>assistant\nGenerate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clean - Remove untracked files from the working tree  -d<|im_end|>\n<|im_start|>assistant\nNormally, when no <pathspec> is specified, git clean will not\nrecurse into untracked directories to avoid removing too much.\nSpecify -d to have it recurse into such directories as well.\nIf a <pathspec> is specified, -d is irrelevant; all untracked\nfiles matching the specified paths (with exceptions for nested\ngit directories mentioned under --force ) will be removed.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --dirstat-by-file[=<param1,param2>…​]<|im_end|>\n<|im_start|>assistant\nSynonym for --dirstat=files,<param1>,<param2>…​<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]<|im_end|>\n<|im_start|>assistant\nOutput the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  hash<|im_end|>\n<|im_start|>assistant\nIn Git’s context, synonym for object name .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n\t    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n\t    [--ignore-rev <rev>] [--ignore-revs-file <file>]\n\t    [--color-lines] [--color-by-age] [--progress] [--abbrev=<n>]\n\t    [ --contents <file> ] [<rev> | --reverse <rev>..<rev>] [--] <file><|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %GG<|im_end|>\n<|im_start|>assistant\nraw verification message from GPG for a signed commit<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Clones a repository into a newly created directory, creates\nremote-tracking branches for each branch in the cloned repository\n(visible using git branch --remotes ), and creates and checks out an\ninitial branch that is forked from the cloned repository’s\ncurrently active branch. After the clone, a plain git fetch without arguments will update\nall the remote-tracking branches, and a git pull without\narguments will in addition merge the remote master branch into the\ncurrent master branch, if any (this is untrue when --single-branch is given; see below). This default configuration is achieved by creating references to\nthe remote branch heads under refs/remotes/origin and\nby initializing remote.origin.url and remote.origin.fetch configuration variables.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --remove-empty<|im_end|>\n<|im_start|>assistant\nStop when a given path disappears from the tree.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pack.useBitmaps<|im_end|>\n<|im_start|>assistant\nWhen true, git will use pack bitmaps (if available) when packing\nto stdout (e.g., during the server side of a fetch). Defaults to\ntrue. You should not generally need to turn this off unless\nyou are debugging pack bitmaps.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitfaq - Frequently asked questions about using Git  What should I put in user.name ?<|im_end|>\n<|im_start|>assistant\nYou should put your personal name, generally a form using a given name\nand family name.  For example, the current maintainer of Git uses \"Junio\nC Hamano\".  This will be the name portion that is stored in every commit\nyou make. This configuration doesn’t have any effect on authenticating to remote services;\nfor that, see credential.username in git-config .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-worktree - Manage multiple working trees<|im_end|>\n<|im_start|>assistant\nBUGS Multiple checkout in general is still experimental, and the support\nfor submodules is incomplete. It is NOT recommended to make multiple\ncheckouts of a superproject.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  -v  --verbose<|im_end|>\n<|im_start|>assistant\nBe verbose. Implies --stat .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_ATTR_SOURCE<|im_end|>\n<|im_start|>assistant\nSets the treeish that gitattributes will be read from.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  blob object<|im_end|>\n<|im_start|>assistant\nUntyped object , e.g. the contents of a file.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.wsErrorHighlight<|im_end|>\n<|im_start|>assistant\nHighlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  --no-verify<|im_end|>\n<|im_start|>assistant\nThis option bypasses the pre-rebase hook.  See also githooks .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %(trailers[:<options>])<|im_end|>\n<|im_start|>assistant\ndisplay the trailers of the body as interpreted by git-interpret-trailers . The trailers string may be followed by\na colon and zero or more comma-separated options. If any option is provided\nmultiple times, the last occurrence wins. key=<key> : only show trailers with specified <key>. Matching is done\ncase-insensitively and trailing colon is optional. If option is\ngiven multiple times trailer lines matching any of the keys are\nshown. This option automatically enables the only option so that\nnon-trailer lines in the trailer block are hidden. If that is not\ndesired it can be disabled with only=false .  E.g., %(trailers:key=Reviewed-by) shows trailer lines with key Reviewed-by . only[=<bool>] : select whether non-trailer lines from the trailer\nblock should be included. separator=<sep> : specify the separator inserted between trailer\nlines. Defaults to a line feed character. The string <sep> may contain\nthe literal formatting codes described above. To use comma as\nseparator one must use %x2C as it would otherwise be parsed as\nnext option. E.g., %(trailers:key=Ticket,separator=%x2C ) shows all trailer lines whose key is \"Ticket\" separated by a comma\nand a space. unfold[=<bool>] : make it behave as if interpret-trailer’s --unfold option was given. E.g., %(trailers:only,unfold=true) unfolds and shows all trailer lines. keyonly[=<bool>] : only show the key part of the trailer. valueonly[=<bool>] : only show the value part of the trailer. key_value_separator=<sep> : specify the separator inserted between\nthe key and value of each trailer. Defaults to \": \". Otherwise it\nshares the same semantics as separator=<sep> above.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-for-each-ref - Output information on each ref  --count=<count><|im_end|>\n<|im_start|>assistant\nBy default the command shows all refs that match <pattern> .  This option makes it stop after showing\nthat many refs.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %Cgreen<|im_end|>\n<|im_start|>assistant\nswitch color to green<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rm - Remove files from the working tree and from the index<|im_end|>\n<|im_start|>assistant\nREMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM There is no option for git rm to remove from the index only\nthe paths that have disappeared from the filesystem. However,\ndepending on the use case, there are several ways that can be\ndone. Using “git commit -a” If you intend that your next commit should record all modifications\nof tracked files in the working tree and record all removals of\nfiles that have been removed from the working tree with rm (as opposed to git rm ), use git commit -a , as it will\nautomatically notice and record all removals.  You can also have a\nsimilar effect without committing by using git add -u . Using “git add -A” When accepting a new code drop for a vendor branch, you probably\nwant to record both the removal of paths and additions of new paths\nas well as modifications of existing paths. Typically you would first remove all tracked files from the working\ntree using this command: git ls-files -z | xargs -0 rm -f and then untar the new code in the working tree. Alternately\nyou could rsync the changes into the working tree. After that, the easiest way to record all removals, additions, and\nmodifications in the working tree is: git add -A See git-add . Other ways If all you really want to do is to remove from the index the files\nthat are no longer present in the working tree (perhaps because\nyour working tree is dirty so that you cannot use git commit -a ),\nuse the following command: git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %<|( <M> )<|im_end|>\n<|im_start|>assistant\nmake the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --inter-hunk-context=<lines><|im_end|>\n<|im_start|>assistant\nShow the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -G<regex><|im_end|>\n<|im_start|>assistant\nLook for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  user.useConfigOnly<|im_end|>\n<|im_start|>assistant\nInstruct Git to avoid trying to guess defaults for user.email and user.name , and instead retrieve the values only from the\nconfiguration. For example, if you have multiple email addresses\nand would like to use a different one for each repository, then\nwith this configuration option set to true in the global config\nalong with a name, Git will prompt you to set up an email before\nmaking new commits in a newly cloned repository.\nDefaults to false .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  --[no-]atomic<|im_end|>\n<|im_start|>assistant\nUse an atomic transaction on the remote side if available.\nEither all refs are updated, or on error, no refs are updated.\nIf the server does not support atomic pushes the push will fail.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  grep.patternType<|im_end|>\n<|im_start|>assistant\nSet the default matching behavior. Using a value of basic , extended , fixed , or perl will enable the --basic-regexp , --extended-regexp , --fixed-strings , or --perl-regexp option accordingly, while the\nvalue default will use the grep.extendedRegexp option to choose\nbetween basic and extended .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff --cached<|im_end|>\n<|im_start|>assistant\ncompares a (c)ommit and the (i)ndex;<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --numstat<|im_end|>\n<|im_start|>assistant\nSimilar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --raw<|im_end|>\n<|im_start|>assistant\nFor each commit, show a summary of changes using the raw diff\nformat. See the \"RAW OUTPUT FORMAT\" section of git-diff . This is different from showing the log\nitself in raw format, which you can achieve with --format=raw .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-pack-objects<|im_end|>\n<|im_start|>assistant\nCreate a packed archive of objects<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %cl<|im_end|>\n<|im_start|>assistant\ncommitter email local-part (the part before the @ sign)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  <old|new>-hex<|im_end|>\n<|im_start|>assistant\nare the 40-hexdigit SHA-1 hashes,<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  --revs-only<|im_end|>\n<|im_start|>assistant\nDo not output flags and parameters not meant for git rev-list command.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pack.indexVersion<|im_end|>\n<|im_start|>assistant\nSpecify the default pack index version.  Valid values are 1 for\nlegacy pack index used by Git versions prior to 1.5.2, and 2 for\nthe new pack index with capabilities for packs larger than 4 GB\nas well as proper protection against the repacking of corrupted\npacks.  Version 2 is the default.  Note that version 2 is enforced\nand this config option is ignored whenever the corresponding pack is\nlarger than 2 GB. If you have an old Git that does not understand the version 2 *.idx file,\ncloning or fetching over a non-native protocol (e.g. \"http\")\nthat will copy both *.pack file and corresponding *.idx file from the\nother side may give you a repository that cannot be accessed with your\nolder version of Git. If the *.pack file is smaller than 2 GB, however,\nyou can use git-index-pack on the *.pack file to regenerate\nthe *.idx file.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  Delete an unneeded branch<|im_end|>\n<|im_start|>assistant\n$ git clone git://git.kernel.org/.../git.git my.git\n$ cd my.git\n$ git branch -d -r origin/todo origin/html origin/man (1) $ git branch -D test (2) Delete the remote-tracking branches \"todo\", \"html\" and \"man\". The next fetch or pull will create them again unless you configure them not to.\nSee git-fetch . Delete the \"test\" branch even if the \"master\" branch (or whichever branch\nis currently checked out) does not have all commits from the test branch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  --reference [ -if-able ] <repository><|im_end|>\n<|im_start|>assistant\nIf the reference <repository> is on the local machine,\nautomatically setup .git/objects/info/alternates to\nobtain objects from the reference <repository> .  Using\nan already existing repository as an alternate will\nrequire fewer objects to be copied from the repository\nbeing cloned, reducing network and local storage costs.\nWhen using the --reference-if-able , a non existing\ndirectory is skipped with a warning instead of aborting\nthe clone. NOTE : see the NOTE for the --shared option, and also the --dissociate option.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --parents<|im_end|>\n<|im_start|>assistant\nPrint also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-describe - Give an object a human readable name based on an available ref  --long<|im_end|>\n<|im_start|>assistant\nAlways output the long format (the tag, the number of commits\nand the abbreviated commit name) even when it matches a tag.\nThis is useful when you want to see parts of the commit object name\nin \"describe\" output, even when the commit in question happens to be\na tagged version.  Instead of just emitting the tag name, it will\ndescribe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2\nthat points at object deadbee…​.).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules  set-url [--] <path> <newurl><|im_end|>\n<|im_start|>assistant\nSets the URL of the specified submodule to <newurl>. Then, it will\nautomatically synchronize the submodule’s new remote URL\nconfiguration.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-reset<|im_end|>\n<|im_start|>assistant\nReset current HEAD to the specified state<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitattributes - Defining attributes per path  Unspecified<|im_end|>\n<|im_start|>assistant\nIf the text attribute is unspecified, Git uses the core.autocrlf configuration variable to determine if the\nfile should be converted.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  stage<|im_end|>\n<|im_start|>assistant\nThe stage of the file which is recorded in the index.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-hash-object - Compute object ID and optionally create an object from a file<|im_end|>\n<|im_start|>assistant\nNAME git-hash-object - Compute object ID and optionally create an object from a file<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  imap.folder<|im_end|>\n<|im_start|>assistant\nThe folder to drop the mails into, which is typically the Drafts\nfolder. For example: \"INBOX.Drafts\", \"INBOX/Drafts\" or\n\"[Gmail]/Drafts\". Required.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitrevisions - Specifying revisions and ranges for Git  <rev1>...<rev2><|im_end|>\n<|im_start|>assistant\nInclude commits that are reachable from either <rev1> or\n<rev2> but exclude those that are reachable from both.  When\neither <rev1> or <rev2> is omitted, it defaults to HEAD .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %cl<|im_end|>\n<|im_start|>assistant\ncommitter email local-part (the part before the @ sign)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  submodule.<name>.fetchRecurseSubmodules<|im_end|>\n<|im_start|>assistant\nThis option can be used to control recursive fetching of this\nsubmodule. It can be overridden by using the --[no-]recurse-submodules\ncommand-line option to \"git fetch\" and \"git pull\".\nThis setting will override that from in the gitmodules file.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-for-each-ref - Output information on each ref  --no-contains[=<object>]<|im_end|>\n<|im_start|>assistant\nOnly list refs which don’t contain the specified commit (HEAD\nif not specified).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --ignore-space-at-eol<|im_end|>\n<|im_start|>assistant\nIgnore changes in whitespace at EOL.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngiteveryday - A useful minimum set of commands for Everyday Git  Branch off of a specific tag.<|im_end|>\n<|im_start|>assistant\n$ git switch -c private2.6.14 v2.6.14 (1) $ edit/compile/test; git commit -a\n$ git checkout master\n$ git cherry-pick v2.6.14..private2.6.14 (2) create a private branch based on a well known (but somewhat behind)\ntag. forward port all changes in private2.6.14 branch to master branch\nwithout a formal \"merging\". Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 |\n  git am -3 -k<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc<|im_end|>\n<|im_start|>assistant\nCombined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\").<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  git log -p -m --first-parent<|im_end|>\n<|im_start|>assistant\nShows the history including change diffs, but only from the\n“main branch” perspective, skipping commits that come from merged\nbranches, and showing full diffs of changes introduced by the merges.\nThis makes sense only when following a strict policy of merging all\ntopic branches when staying on a single integration branch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Incorporates changes from a remote repository into the current branch.\nIf the current branch is behind the remote, then by default it will\nfast-forward the current branch to match the remote.  If the current\nbranch and the remote have diverged, the user needs to specify how to\nreconcile the divergent branches with --rebase or --no-rebase (or\nthe corresponding configuration option in pull.rebase ). More precisely, git pull runs git fetch with the given parameters\nand then depending on configuration options or command line flags,\nwill call either git rebase or git merge to reconcile diverging\nbranches. <repository> should be the name of a remote repository as\npassed to git-fetch .  <refspec> can name an\narbitrary remote ref (for example, the name of a tag) or even\na collection of refs with corresponding remote-tracking branches\n(e.g., refs/heads/*:refs/remotes/origin/*),\nbut usually it is the name of a branch in the remote repository. Default values for <repository> and <branch> are read from the\n\"remote\" and \"merge\" configuration for the current branch\nas set by git-branch --track . Assume the following history exists and the current branch is\n\" master \": A---B---C master on origin\n\t /\n    D---E---F---G master\n\t^\n\torigin/master in your repository Then \" git pull \" will fetch and replay the changes from the remote master branch since it diverged from the local master (i.e., E )\nuntil its current commit ( C ) on top of master and record the\nresult in a new commit along with the names of the two parent commits\nand a log message from the user describing the changes. A---B---C origin/master\n\t /         \\\n    D---E---F---G---H master See git-merge for details, including how conflicts\nare presented and handled. In Git 1.7.0 or later, to cancel a conflicting merge, use git reset --merge . Warning : In older versions of Git, running git pull with uncommitted changes is discouraged: while possible, it leaves you\nin a state that may be hard to back out of in the case of a conflict. If any of the remote changes overlap with local uncommitted changes,\nthe merge will be automatically canceled and the work tree untouched.\nIt is generally best to get any local changes in working order before\npulling or stash them away with git-stash .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %b<|im_end|>\n<|im_start|>assistant\nbody<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]<|im_end|>\n<|im_start|>assistant\nSelect only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_NO_LAZY_FETCH<|im_end|>\n<|im_start|>assistant\nSetting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --skip=<number><|im_end|>\n<|im_start|>assistant\nSkip number commits before starting to show the commit output.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --ext-diff<|im_end|>\n<|im_start|>assistant\nAllow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-instaweb - Instantly browse your working repository in gitweb  -b  --browser<|im_end|>\n<|im_start|>assistant\nThe web browser that should be used to view the gitweb\npage. This will be passed to the git web--browse helper\nscript along with the URL of the gitweb instance. See git-web--browse for more information about this. If\nthe script fails, the URL will be printed to stdout.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --pickaxe-regex<|im_end|>\n<|im_start|>assistant\nTreat the <string> given to -S as an extended POSIX regular\nexpression to match.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes<|im_end|>\n<|im_start|>assistant\nEXAMPLES You can use notes to add annotations with information that was not\navailable at the time a commit was written. $ git notes add -m 'Tested-by: Johannes Sixt <j6t@kdbg.org>' 72a144e2\n$ git show -s 72a144e\n[...]\n    Signed-off-by: Junio C Hamano <gitster@pobox.com>\n\nNotes:\n    Tested-by: Johannes Sixt <j6t@kdbg.org> In principle, a note is a regular Git blob, and any kind of\n(non-)format is accepted.  You can binary-safely create notes from\narbitrary files using git hash-object : $ cc *.c\n$ blob=$(git hash-object -w a.out)\n$ git notes --ref=built add --allow-empty -C \"$blob\" HEAD (You cannot simply use git notes --ref=built add -F a.out HEAD because that is not binary-safe.)\nOf course, it doesn’t make much sense to display non-text-format notes\nwith git log , so if you use such notes, you’ll probably need to write\nsome special-purpose tools to do something useful with them.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cat-file - Provide contents or details of repository objects<|im_end|>\n<|im_start|>assistant\nNAME git-cat-file - Provide contents or details of repository objects<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show-ref - List references in a local repository  --exists<|im_end|>\n<|im_start|>assistant\nCheck whether the given reference exists. Returns an exit code of 0 if\nit does, 2 if it is missing, and 1 in case looking up the reference\nfailed with an error other than the reference being missing.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  plain<|im_end|>\n<|im_start|>assistant\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --binary<|im_end|>\n<|im_start|>assistant\nIn addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cat-file - Provide contents or details of repository objects  --path=<path><|im_end|>\n<|im_start|>assistant\nFor use with --textconv or --filters , to allow specifying an object\nname and a path separately, e.g. when it is difficult to figure out\nthe revision from which the blob came.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  guitool.<name>.title<|im_end|>\n<|im_start|>assistant\nSpecifies the title to use for the prompt dialog. The default\nis the tool name.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-bundle<|im_end|>\n<|im_start|>assistant\nMove objects and refs by archive<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitprotocol-common<|im_end|>\n<|im_start|>assistant\nThings common to various protocols<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_SEQUENCE_EDITOR<|im_end|>\n<|im_start|>assistant\nThis environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase and the sequence.editor option in git-config .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-revert - Revert some existing commits  --cleanup=<mode><|im_end|>\n<|im_start|>assistant\nThis option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit for more\ndetails. In particular, if the <mode> is given a value of scissors ,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --creation-factor=<percent><|im_end|>\n<|im_start|>assistant\nSet the creation/deletion cost fudge factor to <percent> .\nDefaults to 60. Try a larger value if git range-diff erroneously\nconsiders a large change a total rewrite (deletion of one commit\nand addition of another), and a smaller one in the reverse case.\nSee the ``Algorithm`` section below for an explanation of why this is\nneeded.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign<|im_end|>\n<|im_start|>assistant\nGPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Takes the patches given on the command line and emails them out.\nPatches can be specified as files, directories (which will send all\nfiles in the directory), or directly as a revision list.  In the\nlast case, any format accepted by git-format-patch can\nbe passed to git send-email, as well as options understood by git-format-patch . The header of the email is configurable via command-line options.  If not\nspecified on the command line, the user will be prompted with a ReadLine\nenabled interface to provide the necessary information. There are two formats accepted for patch files: mbox format files This is what git-format-patch generates.  Most headers and MIME\nformatting are ignored. The original format used by Greg Kroah-Hartman’s send_lots_of_email.pl script This format expects the first line of the file to contain the \"Cc:\" value\nand the \"Subject:\" of the message as the second line.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines<|im_end|>\n<|im_start|>assistant\nIgnore changes whose lines are all blank.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -s  --no-patch<|im_end|>\n<|im_start|>assistant\nSuppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  branch.<name>.merge<|im_end|>\n<|im_start|>assistant\nDefines, together with branch.<name>.remote, the upstream branch\nfor the given branch. It tells git fetch / git pull / git rebase which\nbranch to merge and can also affect git push (see push.default).\nWhen in branch <name>, it tells git fetch the default\nrefspec to be marked for merging in FETCH_HEAD. The value is\nhandled like the remote part of a refspec, and must match a\nref which is fetched from the remote given by\n\"branch.<name>.remote\".\nThe merge information is used by git pull (which first calls git fetch ) to lookup the default branch for merging. Without\nthis option, git pull defaults to merge the first refspec fetched.\nSpecify multiple values to get an octopus merge.\nIf you wish to setup git pull so that it merges into <name> from\nanother branch in the local repository, you can point\nbranch.<name>.merge to the desired branch, and use the relative path\nsetting . (a period) for branch.<name>.remote.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  Munging the diff output<|im_end|>\n<|im_start|>assistant\n$ git diff --find-copies-harder -B -C (1) $ git diff -R (2) Spend extra cycles to find renames, copies and complete\nrewrites (very expensive). Output diff in reverse.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-stash - Stash the changes in a dirty working directory away  -a  --all<|im_end|>\n<|im_start|>assistant\nThis option is only valid for push and save commands. All ignored and untracked files are also stashed and then cleaned\nup with git clean .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --filter-print-omitted<|im_end|>\n<|im_start|>assistant\nOnly useful with --filter= ; prints a list of the objects omitted\nby the filter.  Object IDs are prefixed with a “~” character.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-tree - List the contents of a tree object  --full-name<|im_end|>\n<|im_start|>assistant\nInstead of showing the path names relative to the current working\ndirectory, show the full path names.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %<( <N> [,trunc|ltrunc|mtrunc])<|im_end|>\n<|im_start|>assistant\nmake the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit - Record changes to the repository  commit.status<|im_end|>\n<|im_start|>assistant\nA boolean to enable/disable inclusion of status information in the\ncommit message template when using an editor to prepare the commit\nmessage.  Defaults to true.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-restore - Restore working tree files  --ignore-skip-worktree-bits<|im_end|>\n<|im_start|>assistant\nIn sparse checkout mode, the default is to only update entries\nmatched by <pathspec> and sparse patterns in\n$GIT_DIR/info/sparse-checkout. This option ignores the sparse\npatterns and unconditionally restores any files in <pathspec> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_ALLOW_PROTOCOL<|im_end|>\n<|im_start|>assistant\nIf set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config for more details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_TRACE_CURL_NO_DATA<|im_end|>\n<|im_start|>assistant\nWhen a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %T<|im_end|>\n<|im_start|>assistant\ntree hash<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --no-indent-heuristic<|im_end|>\n<|im_start|>assistant\nDisable the indent heuristic.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.algorithm<|im_end|>\n<|im_start|>assistant\nChoose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-replay<|im_end|>\n<|im_start|>assistant\nEXPERIMENTAL: Replay commits on a new base, works with bare repos too<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database  mailmapSymlink<|im_end|>\n<|im_start|>assistant\n(INFO) .mailmap is a symlink.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers  Reading from a named tree<|im_end|>\n<|im_start|>assistant\nThe <dataref> can be a mark reference ( :<idnum> ) or the\nfull 40-byte SHA-1 of a Git tag, commit, or tree object,\npreexisting or waiting to be written.\nThe path is relative to the top level of the tree\nnamed by <dataref> . 'ls' SP <dataref> SP <path> LF<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository<|im_end|>\n<|im_start|>assistant\nSECURITY The fetch and push protocols are not designed to prevent one side from\nstealing data from the other repository that was not intended to be\nshared. If you have private data that you need to protect from a malicious\npeer, your best option is to store it in another repository. This applies\nto both clients and servers. In particular, namespaces on a server are not\neffective for read access control; you should only grant read access to a\nnamespace to clients that you would trust with read access to the entire\nrepository. The known attack vectors are as follows: The victim sends \"have\" lines advertising the IDs of objects it has that\nare not explicitly intended to be shared but can be used to optimize the\ntransfer if the peer also has them. The attacker chooses an object ID X\nto steal and sends a ref to X, but isn’t required to send the content of\nX because the victim already has it. Now the victim believes that the\nattacker has X, and it sends the content of X back to the attacker\nlater. (This attack is most straightforward for a client to perform on a\nserver, by creating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to perform it\non a client is to \"merge\" X into a public branch and hope that the user\ndoes additional work on this branch and pushes it back to the server\nwithout noticing the merge.) As in #1, the attacker chooses an object ID X to steal. The victim sends\nan object Y that the attacker already has, and the attacker falsely\nclaims to have X and not Y, so the victim sends Y as a delta against X.\nThe delta reveals regions of X that are similar to Y to the attacker.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database  badType<|im_end|>\n<|im_start|>assistant\n(ERROR) Found an invalid object type.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitmodules - Defining submodule properties  submodule.<name>.update<|im_end|>\n<|im_start|>assistant\nDefines the default update procedure for the named submodule,\ni.e. how the submodule is updated by the git submodule update command in the superproject. This is only used by git\nsubmodule init to initialize the configuration variable of\nthe same name. Allowed values here are checkout , rebase , merge or none , but not !command (for security reasons).\nSee the description of the update command in git-submodule for more details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  -l  --local<|im_end|>\n<|im_start|>assistant\nDo not fetch remotely; only run git rebase against the\nlast fetched commit from the upstream SVN.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --git-dir=<path><|im_end|>\n<|im_start|>assistant\nSet the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  fetch.bundleCreationToken<|im_end|>\n<|im_start|>assistant\nWhen using fetch.bundleURI to fetch incrementally from a bundle\nlist that uses the \"creationToken\" heuristic, this config value\nstores the maximum creationToken value of the downloaded bundles.\nThis value is used to prevent downloading bundles in the future\nif the advertised creationToken is not strictly larger than this\nvalue. The creation token values are chosen by the provider serving the specific\nbundle URI. If you modify the URI at fetch.bundleURI , then be sure to\nremove the value for the fetch.bundleCreationToken value before fetching.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_DIFF_PATH_TOTAL<|im_end|>\n<|im_start|>assistant\nThe total number of paths.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-cvsimport<|im_end|>\n<|im_start|>assistant\nSalvage your data out of another SCM people love to hate<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  The ... (three-dot) Symmetric Difference Notation<|im_end|>\n<|im_start|>assistant\nA similar notation r1...r2 is called symmetric difference\nof r1 and r2 and is defined as r1 r2 --not $(git merge-base --all r1 r2) .\nIt is the set of commits that are reachable from either one of r1 (left side) or r2 (right side) but not from both.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-format-patch<|im_end|>\n<|im_start|>assistant\nPrepare patches for e-mail submission<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  -v  --verbose<|im_end|>\n<|im_start|>assistant\nReport progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs<|im_end|>\n<|im_start|>assistant\nDISCUSSION Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %e<|im_end|>\n<|im_start|>assistant\nencoding<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %(describe[:<options>])<|im_end|>\n<|im_start|>assistant\nhuman-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-merge-base - Find as good common ancestors as possible for a merge<|im_end|>\n<|im_start|>assistant\nSee also git-rev-list , git-show-branch , git-merge<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_OBJECT_DIRECTORY<|im_end|>\n<|im_start|>assistant\nIf the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  color<|im_end|>\n<|im_start|>assistant\nHighlight changed words using only colors.  Implies --color .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %gE<|im_end|>\n<|im_start|>assistant\nreflog identity email (respecting .mailmap, see git-shortlog or git-blame )<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file  --encoding=<encoding><|im_end|>\n<|im_start|>assistant\nSpecifies the encoding used to output author names\nand commit summaries. Setting it to none makes blame\noutput unconverted data. For more information see the\ndiscussion about encoding in the git-log manual page.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-worktree<|im_end|>\n<|im_start|>assistant\nManage multiple working trees<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  trace2.perfBrief<|im_end|>\n<|im_start|>assistant\nBoolean.  When true time , filename , and line fields are\nomitted from PERF output.  May be overridden by the GIT_TRACE2_PERF_BRIEF environment variable.  Defaults to false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_TRACE_CURL<|im_end|>\n<|im_start|>assistant\nEnables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-revert - Revert some existing commits  --abort<|im_end|>\n<|im_start|>assistant\nCancel the operation and return to the pre-sequence state.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --no-color<|im_end|>\n<|im_start|>assistant\nTurn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.wordRegex<|im_end|>\n<|im_start|>assistant\nThe regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes for\ndetails.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitrevisions<|im_end|>\n<|im_start|>assistant\nSpecifying revisions and ranges for Git<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  -z<|im_end|>\n<|im_start|>assistant\nWhen --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-reflog - Manage reflog information  --all<|im_end|>\n<|im_start|>assistant\nProcess the reflogs of all references.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_TRACE_PACKET<|im_end|>\n<|im_start|>assistant\nEnables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-switch - Switch branches  -q  --quiet<|im_end|>\n<|im_start|>assistant\nQuiet, suppress feedback messages.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --indent-heuristic<|im_end|>\n<|im_start|>assistant\nEnable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-archimport<|im_end|>\n<|im_start|>assistant\nImport a GNU Arch repository into Git<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes  get-ref<|im_end|>\n<|im_start|>assistant\nPrint the current notes ref. This provides an easy way to\nretrieve the current notes ref (e.g. from scripts).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]<|im_end|>\n<|im_start|>assistant\nOutput the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  repack.useDeltaIslands<|im_end|>\n<|im_start|>assistant\nIf set to true, makes git repack act as if --delta-islands was passed. Defaults to false .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --remotes[=<pattern>]<|im_end|>\n<|im_start|>assistant\nPretend as if all the refs in refs/remotes are listed\non the command line as <commit> . If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ? , * , or [ , /* at the end is implied.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_INDEX_VERSION<|im_end|>\n<|im_start|>assistant\nThis environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_TRACE2_PERF<|im_end|>\n<|im_start|>assistant\nIn addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  plain<|im_end|>\n<|im_start|>assistant\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_COMMON_DIR<|im_end|>\n<|im_start|>assistant\nIf this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout and git-worktree for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-fmt-merge-msg<|im_end|>\n<|im_start|>assistant\nProduce a merge commit message<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-status - Show the working tree status<|im_end|>\n<|im_start|>assistant\nUNTRACKED FILES AND PERFORMANCE git status can be very slow in large worktrees if/when it\nneeds to search for untracked files and directories. There are\nmany configuration options available to speed this up by either\navoiding the work or making use of cached results from previous\nGit commands. There is no single optimum set of settings right\nfor everyone. We’ll list a summary of the relevant options to help\nyou, but before going into the list, you may want to run git status again, because your configuration may already be caching git status results, so it could be faster on subsequent runs. The --untracked-files=no flag or the status.showUntrackedFiles=no config (see above for both):\nindicate that git status should not report untracked\nfiles. This is the fastest option. git status will not list\nthe untracked files, so you need to be careful to remember if\nyou create any new files and manually git add them. advice.statusUoption=false (see git-config ):\nsetting this variable to false disables the warning message\ngiven when enumerating untracked files takes more than 2\nseconds.  In a large project, it may take longer and the user\nmay have already accepted the trade off (e.g. using \"-uno\" may\nnot be an acceptable option for the user), in which case, there\nis no point issuing the warning message, and in such a case,\ndisabling the warning may be the best. core.untrackedCache=true (see git-update-index ):\nenable the untracked cache feature and only search directories\nthat have been modified since the previous git status command.\nGit remembers the set of untracked files within each directory\nand assumes that if a directory has not been modified, then\nthe set of untracked files within has not changed.  This is much\nfaster than enumerating the contents of every directory, but still\nnot without cost, because Git still has to search for the set of\nmodified directories. The untracked cache is stored in the .git/index file. The reduced cost of searching for untracked\nfiles is offset slightly by the increased size of the index and\nthe cost of keeping it up-to-date. That reduced search time is\nusually worth the additional size. core.untrackedCache=true and core.fsmonitor=true or core.fsmonitor=<hook-command-pathname> (see git-update-index ): enable both the untracked cache\nand FSMonitor features and only search directories that have\nbeen modified since the previous git status command.  This\nis faster than using just the untracked cache alone because\nGit can also avoid searching for modified directories.  Git\nonly has to enumerate the exact set of directories that have\nchanged recently. While the FSMonitor feature can be enabled\nwithout the untracked cache, the benefits are greatly reduced\nin that case. Note that after you turn on the untracked cache and/or FSMonitor\nfeatures it may take a few git status commands for the various\ncaches to warm up before you see improved command times.  This is\nnormal.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_REF_PARANOIA<|im_end|>\n<|im_start|>assistant\nIf this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  -l<num><|im_end|>\n<|im_start|>assistant\nThe -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  clone.defaultRemoteName<|im_end|>\n<|im_start|>assistant\nThe name of the remote to create when cloning a repository.  Defaults to origin .\nIt can be overridden by passing the --origin command-line\noption.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --color-words[=<regex>]<|im_end|>\n<|im_start|>assistant\nEquivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  commit object<|im_end|>\n<|im_start|>assistant\nAn object which contains the information about a\nparticular revision , such as parents , committer,\nauthor, date and the tree object which corresponds\nto the top directory of the stored\nrevision.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  rebase.maxLabelLength<|im_end|>\n<|im_start|>assistant\nWhen generating label names from commit subjects, truncate the names to\nthis length. By default, the names are truncated to a little less than NAME_MAX (to allow e.g. .lock files to be written for the\ncorresponding loose refs).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %N<|im_end|>\n<|im_start|>assistant\ncommit notes<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  transfer.credentialsInUrl<|im_end|>\n<|im_start|>assistant\nA configured URL can contain plaintext credentials in the form <protocol>://<user>:<password>@<domain>/<path> . You may want\nto warn or forbid the use of such configuration (in favor of\nusing git-credential ). This will be used on git-clone , git-fetch , git-push ,\nand any other direct use of the configured URL. Note that this is currently limited to detecting credentials in remote.<name>.url configuration; it won’t detect credentials in remote.<name>.pushurl configuration. You might want to enable this to prevent inadvertent credentials\nexposure, e.g. because: The OS or system where you’re running git may not provide a way or\notherwise allow you to configure the permissions of the\nconfiguration file where the username and/or password are stored. Even if it does, having such data stored \"at rest\" might expose you\nin other ways, e.g. a backup process might copy the data to another\nsystem. The git programs will pass the full URL to one another as arguments\non the command-line, meaning the credentials will be exposed to other\nunprivileged users on systems that allow them to see the full\nprocess list of other users. On linux the \"hidepid\" setting\ndocumented in procfs(5) allows for configuring this behavior. If such concerns don’t apply to you then you probably don’t need to be\nconcerned about credentials exposure due to storing sensitive\ndata in git’s configuration files. If you do want to use this, set transfer.credentialsInUrl to one of these values: allow (default): Git will proceed with its activity without warning. warn : Git will write a warning message to stderr when parsing a URL\nwith a plaintext credential. die : Git will write a failure message to stderr when parsing a URL\nwith a plaintext credential.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --config-env=<name>=<envvar><|im_end|>\n<|im_start|>assistant\nLike -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_REFLOG_ACTION<|im_end|>\n<|im_start|>assistant\nWhen a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-daemon - A really simple server for Git repositories  --timeout=<n><|im_end|>\n<|im_start|>assistant\nTimeout (in seconds) for specific client sub-requests. This includes\nthe time it takes for the server to process the sub-request and the\ntime spent waiting for the next client’s request.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %aI<|im_end|>\n<|im_start|>assistant\nauthor date, strict ISO 8601 format<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  --rmdir<|im_end|>\n<|im_start|>assistant\nOnly used with the dcommit , set-tree and commit-diff commands. Remove directories from the SVN tree if there are no files left\nbehind.  SVN can version empty directories, and they are not\nremoved by default if there are no files left in them.  Git\ncannot version empty directories.  Enabling this flag will make\nthe commit to SVN act like Git. config key: svn.rmdir<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --author-date-order<|im_end|>\n<|im_start|>assistant\nShow no parents before all of its children are shown, but\notherwise show commits in the author timestamp order.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  git grep --all-match -e NODE -e Unexpected<|im_end|>\n<|im_start|>assistant\nLooks for a line that has NODE or Unexpected in\nfiles that have lines that match both.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  --sq-quote<|im_end|>\n<|im_start|>assistant\nUse git rev-parse in shell quoting mode (see SQ-QUOTE\nsection below). In contrast to the --sq option below, this\nmode only does quoting. Nothing else is done to command input.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  gc.cruftPacks<|im_end|>\n<|im_start|>assistant\nStore unreachable objects in a cruft pack (see git-repack ) instead of as loose objects. The default\nis true .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git submodule [--quiet] [--cached] git submodule [--quiet] add [<options>] [--] <repository> [<path>] git submodule [--quiet] status [--cached] [--recursive] [--] [<path>…​] git submodule [--quiet] init [--] [<path>…​] git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…​) git submodule [--quiet] update [<options>] [--] [<path>…​] git submodule [--quiet] set-branch [<options>] [--] <path> git submodule [--quiet] set-url [--] <path> <newurl> git submodule [--quiet] summary [<options>] [--] [<path>…​] git submodule [--quiet] foreach [--recursive] <command> git submodule [--quiet] sync [--recursive] [--] [<path>…​] git submodule [--quiet] absorbgitdirs [--] [<path>…​]<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  merge.<driver>.recursive<|im_end|>\n<|im_start|>assistant\nNames a low-level merge driver to be used when\nperforming an internal merge between common ancestors.\nSee gitattributes for details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-request-pull - Generates a summary of pending changes  <URL><|im_end|>\n<|im_start|>assistant\nThe repository URL to be pulled from.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA<|im_end|>\n<|im_start|>assistant\nWhen loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --literal-pathspecs<|im_end|>\n<|im_start|>assistant\nTreat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fast-import - Backend for fast Git data importers  done<|im_end|>\n<|im_start|>assistant\nError out if the stream ends without a done command.\nWithout this feature, errors causing the frontend to end\nabruptly at a convenient point in the stream can go\nundetected.  This may occur, for example, if an import\nfront end dies in mid-operation without emitting SIGTERM\nor SIGKILL at its subordinate git fast-import instance.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  --replace-all<|im_end|>\n<|im_start|>assistant\nDefault behavior is to replace at most one line. This replaces\nall lines matching the key (and optionally the value-pattern ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  --get-urlmatch <name> <URL><|im_end|>\n<|im_start|>assistant\nWhen given a two-part <name> as <section>.<key>, the value for\n<section>.<URL>.<key> whose <URL> part matches the best to the\ngiven URL is returned (if no such key exists, the value for\n<section>.<key> is used as a fallback).  When given just the\n<section> as name, do so for all the keys in the section and\nlist them.  Returns error code 1 if no value is found.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules<|im_end|>\n<|im_start|>assistant\nNAME git-submodule - Initialize, update or inspect submodules<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %p<|im_end|>\n<|im_start|>assistant\nabbreviated parent hashes<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-name-rev<|im_end|>\n<|im_start|>assistant\nFind symbolic names for given revs<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails  --bcc=<address>,…​<|im_end|>\n<|im_start|>assistant\nSpecify a \"Bcc:\" value for each email. Default is the value of sendemail.bcc . This option may be specified multiple times.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  fsck.skipList<|im_end|>\n<|im_start|>assistant\nThe path to a list of object names (i.e. one unabbreviated SHA-1 per\nline) that are known to be broken in a non-fatal way and should\nbe ignored. On versions of Git 2.20 and later, comments ( # ), empty\nlines, and any leading and trailing whitespace are ignored. Everything\nbut a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted\ndespite early commits containing errors that can be safely ignored,\nsuch as invalid committer email addresses.  Note: corrupt objects\ncannot be skipped with this setting. Like fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants. Unlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not\nfall back on the fsck.skipList configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names\nlist should be sorted. This was never a requirement; the object names\ncould appear in any order, but when reading the list we tracked whether\nthe list was sorted for the purposes of an internal binary search\nimplementation, which could save itself some work with an already sorted\nlist. Unless you had a humongous list there was no reason to go out of\nyour way to pre-sort the list. After Git version 2.20 a hash implementation\nis used instead, so there’s now no reason to pre-sort the list.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-hash-object - Compute object ID and optionally create an object from a file  --path<|im_end|>\n<|im_start|>assistant\nHash object as if it were located at the given path. The location of\nthe file does not directly influence the hash value, but the path is\nused to determine which Git filters should be applied to the object\nbefore it can be placed in the object database.  As a result of\napplying filters, the actual blob put into the object database may\ndiffer from the given file. This option is mainly useful for hashing\ntemporary files located outside of the working directory or files\nread from stdin.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  -P  --no-pager<|im_end|>\n<|im_start|>assistant\nDo not pipe Git output into a pager.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -1 --base  -2 --ours  -3 --theirs<|im_end|>\n<|im_start|>assistant\nCompare the working tree with the \"base\" version (stage #1),\n\"our branch\" (stage #2) or \"their branch\" (stage #3).  The\nindex contains these stages only for unmerged entries i.e.\nwhile resolving conflicts.  See git-read-tree section \"3-Way Merge\" for detailed information.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-checkout-index - Copy files from the index to the working tree  -f  --force<|im_end|>\n<|im_start|>assistant\nforces overwrite of existing files<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_CONFIG_NOSYSTEM<|im_end|>\n<|im_start|>assistant\nWhether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-daemon<|im_end|>\n<|im_start|>assistant\nA really simple server for Git repositories<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-cherry<|im_end|>\n<|im_start|>assistant\nFind commits yet to be applied to upstream<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-gc<|im_end|>\n<|im_start|>assistant\nCleanup unnecessary files and optimize the local repository<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-show<|im_end|>\n<|im_start|>assistant\nShow various types of objects<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --icase-pathspecs<|im_end|>\n<|im_start|>assistant\nAdd \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-stash - Stash the changes in a dirty working directory away  branch <branchname> [<stash>]<|im_end|>\n<|im_start|>assistant\nCreates and checks out a new branch named <branchname> starting from\nthe commit at which the <stash> was originally created, applies the\nchanges recorded in <stash> to the new working tree and index.\nIf that succeeds, and <stash> is a reference of the form stash@{<revision>} , it then drops the <stash> . This is useful if the branch on which you ran git stash push has\nchanged enough that git stash apply fails due to conflicts. Since\nthe stash entry is applied on top of the commit that was HEAD at the\ntime git stash was run, it restores the originally stashed state\nwith no conflicts.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository<|im_end|>\n<|im_start|>assistant\nEXAMPLES Update the remote-tracking branches: $ git fetch origin The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace,\nunless the remote.<repository>.fetch option is used to specify a\nnon-default refspec. Using refspecs explicitly: $ git fetch origin +seen:seen maint:tmp This updates (or creates, as necessary) branches seen and tmp in\nthe local repository by fetching from the branches (respectively) seen and maint from the remote repository. The seen branch will be updated even if it does not fast-forward,\nbecause it is prefixed with a plus sign; tmp will not be. Peek at a remote’s branch, without configuring the remote in your local\nrepository: $ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n$ git log FETCH_HEAD The first command fetches the maint branch from the repository at git://git.kernel.org/pub/scm/git/git.git and the second command uses FETCH_HEAD to examine the branch with git-log .  The fetched\nobjects will eventually be removed by git’s built-in housekeeping (see git-gc ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-filter-branch - Rewrite branches  --tag-name-filter <command><|im_end|>\n<|im_start|>assistant\nThis is the filter for rewriting tag names. When passed,\nit will be called for every tag ref that points to a rewritten\nobject (or to a tag object which points to a rewritten object).\nThe original tag name is passed via standard input, and the new\ntag name is expected on standard output. The original tags are not deleted, but can be overwritten;\nuse \"--tag-name-filter cat\" to simply update the tags.  In this\ncase, be very careful and make sure you have the old tags\nbacked up in case the conversion has run afoul. Nearly proper rewriting of tag objects is supported. If the tag has\na message attached, a new tag object will be created with the same message,\nauthor, and timestamp. If the tag has a signature attached, the\nsignature will be stripped. It is by definition impossible to preserve\nsignatures. The reason this is \"nearly\" proper, is because ideally if\nthe tag did not change (points to the same object, has the same name, etc.)\nit should retain any signature. That is not the case, signatures will always\nbe removed, buyer beware. There is also no support for changing the\nauthor or timestamp (or the tag message for that matter). Tags which point\nto other tags will be rewritten to point to the underlying commit.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit - Record changes to the repository  --allow-empty<|im_end|>\n<|im_start|>assistant\nUsually recording a commit that has the exact same tree as its\nsole parent commit is a mistake, and the command prevents you\nfrom making such a commit.  This option bypasses the safety, and\nis primarily for use by foreign SCM interface scripts.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  reflog<|im_end|>\n<|im_start|>assistant\nA reflog shows the local \"history\" of a ref.  In other words,\nit can tell you what the 3rd last revision in this repository\nwas, and what was the current state in this repository,\nyesterday 9:14pm.  See git-reflog for details.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -E  --extended-regexp<|im_end|>\n<|im_start|>assistant\nConsider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --word-diff-regex=<regex><|im_end|>\n<|im_start|>assistant\nUse <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-checkout - Switch branches or restore working tree files  git checkout --detach [<branch>]  git checkout [--detach] <commit><|im_end|>\n<|im_start|>assistant\nPrepare to work on top of <commit> , by detaching HEAD at it\n(see \"DETACHED HEAD\" section), and updating the index and the\nfiles in the working tree.  Local modifications to the files\nin the working tree are kept, so that the resulting working\ntree will be the state recorded in the commit plus the local\nmodifications. When the <commit> argument is a branch name, the --detach option can\nbe used to detach HEAD at the tip of the branch ( git checkout\n<branch> would check out that branch without detaching HEAD ). Omitting <branch> detaches HEAD at the tip of the current branch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-bundle - Move objects and refs by archive  --version=<version><|im_end|>\n<|im_start|>assistant\nSpecify the bundle version.  Version 2 is the older format and can only be\nused with SHA-1 repositories; the newer version 3 contains capabilities that\npermit extensions. The default is the oldest supported format, based on the\nhash algorithm in use.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -D  --irreversible-delete<|im_end|>\n<|im_start|>assistant\nOmit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitrevisions - Specifying revisions and ranges for Git  <rev>^! , e.g. HEAD^!<|im_end|>\n<|im_start|>assistant\nA suffix ^ followed by an exclamation mark is the same\nas giving commit <rev> and all its parents prefixed with ^ to exclude them (and their ancestors).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker<|im_end|>\n<|im_start|>assistant\nTerminology Please see gitglossary .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-for-each-ref - Output information on each ref  --ignore-case<|im_end|>\n<|im_start|>assistant\nSorting and filtering refs are case insensitive.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --histogram<|im_end|>\n<|im_start|>assistant\nGenerate a diff using the \"histogram diff\" algorithm.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-sh-i18n<|im_end|>\n<|im_start|>assistant\nGit’s i18n setup code for shell scripts<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails  sendemail.smtpReloginDelay<|im_end|>\n<|im_start|>assistant\nSeconds to wait before reconnecting to the smtp server.\nSee also the --relogin-delay option of git-send-email .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  zebra<|im_end|>\n<|im_start|>assistant\nBlocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -s  --no-patch<|im_end|>\n<|im_start|>assistant\nSuppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  -C[<n>]  --find-copies[=<n>]<|im_end|>\n<|im_start|>assistant\nDetect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  -b  --ignore-space-change<|im_end|>\n<|im_start|>assistant\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --no-color<|im_end|>\n<|im_start|>assistant\nTurn off colored diff.\nIt is the same as --color=never .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --dense<|im_end|>\n<|im_start|>assistant\nOnly the selected commits are shown, plus some to have a\nmeaningful history.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  color.diff.<slot><|im_end|>\n<|im_start|>assistant\nUse customized color for diff colorization. <slot> specifies\nwhich part of the patch to use the specified color, and is one\nof context (context text - plain is a historical synonym), meta (metainformation), frag (hunk header), func (function in hunk header), old (removed lines), new (added lines), commit (commit headers), whitespace (highlighting whitespace errors), oldMoved (deleted lines), newMoved (added lines), oldMovedDimmed , oldMovedAlternative , oldMovedAlternativeDimmed , newMovedDimmed , newMovedAlternative newMovedAlternativeDimmed (See the <mode> setting of --color-moved in git-diff for details), contextDimmed , oldDimmed , newDimmed , contextBold , oldBold , and newBold (see git-range-diff for details).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cherry-pick - Apply the changes introduced by some existing commits  --allow-empty-message<|im_end|>\n<|im_start|>assistant\nBy default, cherry-picking a commit with an empty message will fail.\nThis option overrides that behavior, allowing commits with empty\nmessages to be cherry picked.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.filesRefLockTimeout<|im_end|>\n<|im_start|>assistant\nThe length of time, in milliseconds, to retry when trying to\nlock an individual reference. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 100 (i.e.,\nretry for 100ms).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission  files<|im_end|>\n<|im_start|>assistant\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-read-tree - Reads tree information into the index<|im_end|>\n<|im_start|>assistant\nDESCRIPTION Reads the tree information given by <tree-ish> into the index,\nbut does not actually update any of the files it \"caches\". (see: git-checkout-index ) Optionally, it can merge a tree into the index, perform a\nfast-forward (i.e. 2-way) merge, or a 3-way merge, with the -m flag.  When used with -m , the -u flag causes it to also update\nthe files in the work tree with the result of the merge. Only trivial merges are done by git read-tree itself.  Only conflicting paths\nwill be in an unmerged state when git read-tree returns.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  git show master:Makefile master:t/Makefile<|im_end|>\n<|im_start|>assistant\nConcatenates the contents of said Makefiles in the head\nof the branch master .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-shortlog - Summarize git log output  --ancestry-path[=<commit>]<|im_end|>\n<|im_start|>assistant\nWhen given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-credential<|im_end|>\n<|im_start|>assistant\nRetrieve and store user credentials<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  remote.<name>.receivepack<|im_end|>\n<|im_start|>assistant\nThe default program to execute on the remote side when pushing.  See\noption --receive-pack of git-push .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-commit-tree<|im_end|>\n<|im_start|>assistant\nCreate a new commit object<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-revert - Revert some existing commits  --no-edit<|im_end|>\n<|im_start|>assistant\nWith this option, git revert will not start the commit\nmessage editor.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --tags[=<pattern>]<|im_end|>\n<|im_start|>assistant\nPretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  --unidiff-zero<|im_end|>\n<|im_start|>assistant\nBy default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0 . To bypass these\nchecks use --unidiff-zero . Note, for the reasons stated above, the usage of context-free patches is\ndiscouraged.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  ignore-all-space<|im_end|>\n<|im_start|>assistant\nIgnore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  first-parent, 1<|im_end|>\n<|im_start|>assistant\nShow full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitattributes - Defining attributes per path<|im_end|>\n<|im_start|>assistant\nEXAMPLES If you have these three gitattributes file: (in $GIT_DIR/info/attributes)\n\na*\tfoo !bar -baz\n\n(in .gitattributes)\nabc\tfoo bar baz\n\n(in t/.gitattributes)\nab*\tmerge=filfre\nabc\t-foo -bar\n*.c\tfrotz the attributes given to path t/abc are computed as follows: By examining t/.gitattributes (which is in the same\ndirectory as the path in question), Git finds that the first\nline matches. merge attribute is set.  It also finds that\nthe second line matches, and attributes foo and bar are unset. Then it examines .gitattributes (which is in the parent\ndirectory), and finds that the first line matches, but t/.gitattributes file already decided how merge , foo and bar attributes should be given to this path, so it\nleaves foo and bar unset.  Attribute baz is set. Finally it examines $GIT_DIR/info/attributes .  This file\nis used to override the in-tree settings.  The first line is\na match, and foo is set, bar is reverted to unspecified\nstate, and baz is unset. As the result, the attributes assignment to t/abc becomes: foo\tset to true\nbar\tunspecified\nbaz\tset to false\nmerge\tset to string value \"filfre\"\nfrotz\tunspecified<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-request-pull<|im_end|>\n<|im_start|>assistant\nGenerates a summary of pending changes<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  --omit-empty<|im_end|>\n<|im_start|>assistant\nDo not print a newline after formatted refs where the format expands\nto the empty string.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-update-index - Register file contents in the working tree to the index  --unmerged<|im_end|>\n<|im_start|>assistant\nIf --refresh finds unmerged changes in the index, the default\nbehavior is to error out.  This option makes git update-index continue anyway.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  gc.pruneExpire<|im_end|>\n<|im_start|>assistant\nWhen git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using\ncruft packs via gc.cruftPacks or --cruft ).  Override the\ngrace period with this config variable.  The value \"now\" may be\nused to disable this grace period and always prune unreachable\nobjects immediately, or \"never\" may be used to suppress pruning.\nThis feature helps prevent corruption when git gc runs\nconcurrently with another process writing to the repository; see\nthe \"NOTES\" section of git-gc .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --compact-summary<|im_end|>\n<|im_start|>assistant\nOutput a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  context<|im_end|>\n<|im_start|>assistant\nnon-matching text in context lines (when using -A , -B , or -C )<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-symbolic-ref<|im_end|>\n<|im_start|>assistant\nRead, modify and delete symbolic refs<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch<|im_end|>\n<|im_start|>assistant\nEXAMPLES Update the remote-tracking branches for the repository\nyou cloned from, then merge one of them into your\ncurrent branch: $ git pull\n$ git pull origin Normally the branch merged in is the HEAD of the remote repository,\nbut the choice is determined by the branch.<name>.remote and\nbranch.<name>.merge options; see git-config for details. Merge into the current branch the remote branch next : $ git pull origin next This leaves a copy of next temporarily in FETCH_HEAD, and\nupdates the remote-tracking branch origin/next .\nThe same can be done by invoking fetch and merge: $ git fetch origin\n$ git merge origin/next If you tried a pull which resulted in complex conflicts and\nwould want to start over, you can recover with git reset .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  checkout.guess<|im_end|>\n<|im_start|>assistant\nProvides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch and git-checkout .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  --pickaxe-all<|im_end|>\n<|im_start|>assistant\nWhen -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-bisect - Use binary search to find the commit that introduced a bug<|im_end|>\n<|im_start|>assistant\nDESCRIPTION The command takes various subcommands, and different options depending\non the subcommand: git bisect start [--term-(bad|new)=<term-new> --term-(good|old)=<term-old>]\n\t  [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<pathspec>...]\ngit bisect (bad|new|<term-new>) [<rev>]\ngit bisect (good|old|<term-old>) [<rev>...]\ngit bisect terms [--term-(good|old) | --term-(bad|new)]\ngit bisect skip [(<rev>|<range>)...]\ngit bisect reset [<commit>]\ngit bisect (visualize|view)\ngit bisect replay <logfile>\ngit bisect log\ngit bisect run <cmd> [<arg>...]\ngit bisect help This command uses a binary search algorithm to find which commit in\nyour project’s history introduced a bug. You use it by first telling\nit a \"bad\" commit that is known to contain the bug, and a \"good\"\ncommit that is known to be before the bug was introduced. Then git\nbisect picks a commit between those two endpoints and asks you\nwhether the selected commit is \"good\" or \"bad\". It continues narrowing\ndown the range until it finds the exact commit that introduced the\nchange. In fact, git bisect can be used to find the commit that changed any property of your project; e.g., the commit that fixed a bug, or\nthe commit that caused a benchmark’s performance to improve. To\nsupport this more general usage, the terms \"old\" and \"new\" can be used\nin place of \"good\" and \"bad\", or you can choose your own terms. See\nsection \"Alternate terms\" below for more information. Basic bisect commands: start, bad, good As an example, suppose you are trying to find the commit that broke a\nfeature that was known to work in version v2.6.13-rc2 of your\nproject. You start a bisect session as follows: $ git bisect start\n$ git bisect bad                 # Current version is bad\n$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good Once you have specified at least one bad and one good commit, git\nbisect selects a commit in the middle of that range of history,\nchecks it out, and outputs something similar to the following: Bisecting: 675 revisions left to test after this (roughly 10 steps) You should now compile the checked-out version and test it. If that\nversion works correctly, type $ git bisect good If that version is broken, type $ git bisect bad Then git bisect will respond with something like Bisecting: 337 revisions left to test after this (roughly 9 steps) Keep repeating the process: compile the tree, test it, and depending\non whether it is good or bad run git bisect good or git bisect bad to ask for the next commit that needs testing. Eventually there will be no more revisions left to inspect, and the\ncommand will print out a description of the first bad commit. The\nreference refs/bisect/bad will be left pointing at that commit. Bisect reset After a bisect session, to clean up the bisection state and return to\nthe original HEAD, issue the following command: $ git bisect reset By default, this will return your tree to the commit that was checked\nout before git bisect start .  (A new git bisect start will also do\nthat, as it cleans up the old bisection state.) With an optional argument, you can return to a different commit\ninstead: $ git bisect reset <commit> For example, git bisect reset bisect/bad will check out the first\nbad revision, while git bisect reset HEAD will leave you on the\ncurrent bisection commit and avoid switching commits at all. Alternate terms Sometimes you are not looking for the commit that introduced a\nbreakage, but rather for a commit that caused a change between some\nother \"old\" state and \"new\" state. For example, you might be looking\nfor the commit that introduced a particular fix. Or you might be\nlooking for the first commit in which the source-code filenames were\nfinally all converted to your company’s naming standard. Or whatever. In such cases it can be very confusing to use the terms \"good\" and\n\"bad\" to refer to \"the state before the change\" and \"the state after\nthe change\". So instead, you can use the terms \"old\" and \"new\",\nrespectively, in place of \"good\" and \"bad\". (But note that you cannot\nmix \"good\" and \"bad\" with \"old\" and \"new\" in a single session.) In this more general usage, you provide git bisect with a \"new\"\ncommit that has some property and an \"old\" commit that doesn’t have that\nproperty. Each time git bisect checks out a commit, you test if that\ncommit has the property. If it does, mark the commit as \"new\";\notherwise, mark it as \"old\". When the bisection is done, git bisect will report which commit introduced the property. To use \"old\" and \"new\" instead of \"good\" and bad, you must run git\nbisect start without commits as argument and then run the following\ncommands to add the commits: git bisect old [<rev>] to indicate that a commit was before the sought change, or git bisect new [<rev>...] to indicate that it was after. To get a reminder of the currently used terms, use git bisect terms You can get just the old term with git bisect terms --term-old or git bisect terms --term-good ; git bisect terms --term-new and git bisect terms --term-bad can be used to learn how to call\nthe commits more recent than the sought change. If you would like to use your own terms instead of \"bad\"/\"good\" or\n\"new\"/\"old\", you can choose any names you like (except existing bisect\nsubcommands like reset , start , …​) by starting the\nbisection using git bisect start --term-old <term-old> --term-new <term-new> For example, if you are looking for a commit that introduced a\nperformance regression, you might use git bisect start --term-old fast --term-new slow Or if you are looking for the commit that fixed a bug, you might use git bisect start --term-new fixed --term-old broken Then, use git bisect <term-old> and git bisect <term-new> instead\nof git bisect good and git bisect bad to mark commits. Bisect visualize/view To see the currently remaining suspects in gitk , issue the following\ncommand during the bisection process (the subcommand view can be used\nas an alternative to visualize ): $ git bisect visualize Git detects a graphical environment through various environment variables: DISPLAY , which is set in X Window System environments on Unix systems. SESSIONNAME , which is set under Cygwin in interactive desktop sessions. MSYSTEM , which is set under Msys2 and Git for Windows. SECURITYSESSIONID , which may be set on macOS in interactive desktop sessions. If none of these environment variables is set, git log is used instead.\nYou can also give command-line options such as -p and --stat . $ git bisect visualize --stat Bisect log and bisect replay After having marked revisions as good or bad, issue the following\ncommand to show what has been done so far: $ git bisect log If you discover that you made a mistake in specifying the status of a\nrevision, you can save the output of this command to a file, edit it to\nremove the incorrect entries, and then issue the following commands to\nreturn to a corrected state: $ git bisect reset\n$ git bisect replay that-file Avoiding testing a commit If, in the middle of a bisect session, you know that the suggested\nrevision is not a good one to test (e.g. it fails to build and you\nknow that the failure does not have anything to do with the bug you\nare chasing), you can manually select a nearby commit and test that\none instead. For example: $ git bisect good/bad\t\t\t# previous round was good or bad.\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n$ git bisect visualize\t\t\t# oops, that is uninteresting.\n$ git reset --hard HEAD~3\t\t# try 3 revisions before what\n\t\t\t\t\t# was suggested Then compile and test the chosen revision, and afterwards mark\nthe revision as good or bad in the usual manner. Bisect skip Instead of choosing a nearby commit by yourself, you can ask Git to do\nit for you by issuing the command: $ git bisect skip                 # Current version cannot be tested However, if you skip a commit adjacent to the one you are looking for,\nGit will be unable to tell exactly which of those commits was the\nfirst bad one. You can also skip a range of commits, instead of just one commit,\nusing range notation. For example: $ git bisect skip v2.5..v2.6 This tells the bisect process that no commit after v2.5 , up to and\nincluding v2.6 , should be tested. Note that if you also want to skip the first commit of the range you\nwould issue the command: $ git bisect skip v2.5 v2.5..v2.6 This tells the bisect process that the commits between v2.5 and v2.6 (inclusive) should be skipped. Cutting down bisection by giving more parameters to bisect start You can further cut down the number of trials, if you know what part of\nthe tree is involved in the problem you are tracking down, by specifying\npathspec parameters when issuing the bisect start command: $ git bisect start -- arch/i386 include/asm-i386 If you know beforehand more than one good commit, you can narrow the\nbisect space down by specifying all of the good commits immediately after\nthe bad commit when issuing the bisect start command: $ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n                   # v2.6.20-rc6 is bad\n                   # v2.6.20-rc4 and v2.6.20-rc1 are good Bisect run If you have a script that can tell if the current source code is good\nor bad, you can bisect by issuing the command: $ git bisect run my_script arguments Note that the script ( my_script in the above example) should exit\nwith code 0 if the current source code is good/old, and exit with a\ncode between 1 and 127 (inclusive), except 125, if the current source\ncode is bad/new. Any other exit code will abort the bisect process. It should be noted\nthat a program that terminates via exit(-1) leaves $? = 255, (see the\nexit(3) manual page), as the value is chopped with & 0377 . The special exit code 125 should be used when the current source code\ncannot be tested. If the script exits with this code, the current\nrevision will be skipped (see git bisect skip above). 125 was chosen\nas the highest sensible value to use for this purpose, because 126 and 127\nare used by POSIX shells to signal specific error status (127 is for\ncommand not found, 126 is for command found but not executable—​these\ndetails do not matter, as they are normal errors in the script, as far as bisect run is concerned). You may often find that during a bisect session you want to have\ntemporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a\nheader file, or \"revision that does not have this commit needs this\npatch applied to work around another problem this bisection is not\ninterested in\") applied to the revision being tested. To cope with such a situation, after the inner git bisect finds the\nnext revision to test, the script can apply the patch\nbefore compiling, run the real test, and afterwards decide if the\nrevision (possibly with the needed patch) passed the test and then\nrewind the tree to the pristine state.  Finally the script should exit\nwith the status of the real test to let the git bisect run command loop\ndetermine the eventual outcome of the bisect session.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  --[no-]write-commit-graph<|im_end|>\n<|im_start|>assistant\nWrite a commit-graph after fetching. This overrides the config\nsetting fetch.writeCommitGraph .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  %aE<|im_end|>\n<|im_start|>assistant\nauthor email (respecting .mailmap, see git-shortlog or git-blame )<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --no-renames<|im_end|>\n<|im_start|>assistant\nTurn off rename detection, even when the configuration\nfile gives the default to do so.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  -F  --fixed-strings<|im_end|>\n<|im_start|>assistant\nConsider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-reflog<|im_end|>\n<|im_start|>assistant\nManage reflog information<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.notesRef<|im_end|>\n<|im_start|>assistant\nWhen showing commit messages, also show notes which are stored in\nthe given ref.  The ref must be fully qualified.  If the given\nref does not exist, it is not an error but means that no\nnotes should be printed. This setting defaults to \"refs/notes/commits\", and it can be overridden by\nthe GIT_NOTES_REF environment variable.  See git-notes .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  <tree-ish><|im_end|>\n<|im_start|>assistant\nIndicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  ignore-space-change<|im_end|>\n<|im_start|>assistant\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.untrackedCache<|im_end|>\n<|im_start|>assistant\nDetermines what to do about the untracked cache feature of the\nindex. It will be kept, if this variable is unset or set to keep . It will automatically be added if set to true . And\nit will automatically be removed, if set to false . Before\nsetting it to true , you should check that mtime is working\nproperly on your system.\nSee git-update-index . keep by default, unless feature.manyFiles is enabled which sets this setting to true by default.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pack.depth<|im_end|>\n<|im_start|>assistant\nThe maximum delta depth used by git-pack-objects when no\nmaximum depth is given on the command line. Defaults to 50.\nMaximum value is 4095.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  --negotiate-only<|im_end|>\n<|im_start|>assistant\nDo not fetch anything from the server, and instead print the\nancestors of the provided --negotiation-tip=* arguments,\nwhich we have in common with the server. This is incompatible with --recurse-submodules=[yes|on-demand] .\nInternally this is used to implement the push.negotiate option, see git-config .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  color<|im_end|>\n<|im_start|>assistant\nHighlight changed words using only colors.  Implies --color .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  diff.statNameWidth<|im_end|>\n<|im_start|>assistant\nLimit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --exclude-first-parent-only<|im_end|>\n<|im_start|>assistant\nWhen finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --dst-prefix=<prefix><|im_end|>\n<|im_start|>assistant\nShow the given destination prefix instead of \"b/\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  push.gpgSign<|im_end|>\n<|im_start|>assistant\nMay be set to a boolean value, or the string if-asked . A true\nvalue causes all pushes to be GPG signed, as if --signed is\npassed to git-push . The string if-asked causes\npushes to be signed if the server supports it, as if --signed=if-asked is passed to git push . A false value may\noverride a value from a lower-priority config file. An explicit\ncommand-line flag always overrides this config option.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --expand-tabs=<n>  --expand-tabs  --no-expand-tabs<|im_end|>\n<|im_start|>assistant\nPerform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is a multiple of <n> )\nin the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8 , and --no-expand-tabs is a short-hand for --expand-tabs=0 ,\nwhich disables tab expansion. By default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. medium , which is the default, full ,\nand fuller ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  receive.autogc<|im_end|>\n<|im_start|>assistant\nBy default, git-receive-pack will run \"git maintenance run --auto\" after\nreceiving data from git-push and updating refs.  You can stop\nit by setting this variable to false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker<|im_end|>\n<|im_start|>assistant\nSECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  gui.copyBlameThreshold<|im_end|>\n<|im_start|>assistant\nSpecifies the threshold to use in git gui blame original location\ndetection, measured in alphanumeric characters. See the git-blame manual for more information on copy detection.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  gpg.ssh.defaultKeyCommand<|im_end|>\n<|im_start|>assistant\nThis command will be run when user.signingkey is not set and a ssh\nsignature is requested. On successful exit a valid ssh public key\nprefixed with key:: is expected in the first line of its output.\nThis allows for a script doing a dynamic lookup of the correct public\nkey when it is impractical to statically configure user.signingKey .\nFor example when keys or SSH Certificates are rotated frequently or\nselection of the right key depends on external factors unknown to git.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-instaweb - Instantly browse your working repository in gitweb<|im_end|>\n<|im_start|>assistant\nCONFIGURATION You may specify configuration in your .git/config [instaweb]\n\tlocal = true\n\thttpd = apache2 -f\n\tport = 4321\n\tbrowser = konqueror\n\tmodulePath = /usr/lib/apache2/modules If the configuration variable instaweb.browser is not set, web.browser will be used instead if it is defined. See git-web--browse for more information about this.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-merge-base - Find as good common ancestors as possible for a merge  --independent<|im_end|>\n<|im_start|>assistant\nInstead of printing merge bases, print a minimal subset of\nthe supplied commits with the same ancestors.  In other words,\namong the commits given, list those which cannot be reached\nfrom any other.  This mimics the behavior of git show-branch\n--independent .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  -m  --modified<|im_end|>\n<|im_start|>assistant\nShow files with an unstaged modification (note that an unstaged\ndeletion also counts as an unstaged modification)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-rerere<|im_end|>\n<|im_start|>assistant\nReuse recorded resolution of conflicted merges<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  ?<|im_end|>\n<|im_start|>assistant\nuntracked file<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --src-prefix=<prefix><|im_end|>\n<|im_start|>assistant\nShow the given source prefix instead of \"a/\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  protocol.<name>.allow<|im_end|>\n<|im_start|>assistant\nSet a policy to be used by protocol <name> with clone/fetch/push\ncommands. See protocol.allow above for the available policies. The protocol names currently used by git are: file : any local file-based path (including file:// URLs,\nor local paths) git : the anonymous git protocol over a direct TCP\nconnection (or proxy, if configured) ssh : git over ssh (including host:path syntax, ssh:// , etc). http : git over http, both \"smart http\" and \"dumb http\".\nNote that this does not include https ; if you want to configure\nboth, you must do so individually. any external helpers are named by their protocol (e.g., use hg to allow the git-remote-hg helper)<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_COMMITTER_DATE<|im_end|>\n<|im_start|>assistant\nThe date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  --summary<|im_end|>\n<|im_start|>assistant\nOutput a condensed summary of extended header information\nsuch as creations, renames and mode changes.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-range-diff - Compare two commit ranges (e.g. two versions of a branch)  <base> <rev1> <rev2><|im_end|>\n<|im_start|>assistant\nEquivalent to passing <base>..<rev1> and <base>..<rev2> .\nNote that <base> does not need to be the exact branch point\nof the branches. Example: after rebasing a branch my-topic , git range-diff my-topic@{u} my-topic@{1} my-topic would\nshow the differences introduced by the rebase.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes  --stdin<|im_end|>\n<|im_start|>assistant\nAlso read the object names to remove notes from the standard\ninput (there is no reason you cannot combine this with object\nnames from the command line).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  <rev>^[<n>] , e.g. HEAD^, v1.5.1^0<|im_end|>\n<|im_start|>assistant\nA suffix ^ to a revision parameter means the first parent of\nthat commit object. ^<n> means the <n>th parent (i.e. <rev>^ is equivalent to <rev>^1 ).  As a special rule, <rev>^0 means the commit itself and is used when <rev> is the\nobject name of a tag object that refers to a commit object.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  -o  --only-matching<|im_end|>\n<|im_start|>assistant\nPrint only the matched (non-empty) parts of a matching line, with each such\npart on a separate output line.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  gc.logExpiry<|im_end|>\n<|im_start|>assistant\nIf the file gc.log exists, then git gc --auto will print\nits content and exit with status zero instead of running\nunless that file is more than gc.logExpiry old.  Default is\n\"1.day\".  See gc.pruneExpire for more ways to specify its\nvalue.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  clone.rejectShallow<|im_end|>\n<|im_start|>assistant\nReject cloning a repository if it is a shallow one; this can be overridden by\npassing the --reject-shallow option on the command line.\nSee git-clone .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-blame - Show what revision and author last modified each line of a file  --color-by-age<|im_end|>\n<|im_start|>assistant\nColor line annotations depending on the age of the line in the default format.\nThe color.blame.highlightRecent config option controls what color is used for\neach range of age.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  -u  --set-upstream<|im_end|>\n<|im_start|>assistant\nFor every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less git-pull and other commands. For more information,\nsee branch.<name>.merge in git-config .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --patch-with-raw<|im_end|>\n<|im_start|>assistant\nSynonym for -p --raw .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  plain<|im_end|>\n<|im_start|>assistant\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitglossary - A Git Glossary  gitfile<|im_end|>\n<|im_start|>assistant\nA plain file .git at the root of a working tree that\npoints at the directory that is the real repository.\nFor proper use see git-worktree or git-submodule .\nFor syntax see gitrepository-layout .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-show-index<|im_end|>\n<|im_start|>assistant\nShow packed archive index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit - Record changes to the repository  commit.cleanup<|im_end|>\n<|im_start|>assistant\nThis setting overrides the default of the --cleanup option in git commit . See git-commit for details. Changing the\ndefault can be useful when you always want to keep lines that begin\nwith the comment character # in your log message, in which case you\nwould do git config commit.cleanup whitespace (note that you will\nhave to remove the help lines that begin with # in the commit log\ntemplate yourself, if you do this).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --binary<|im_end|>\n<|im_start|>assistant\nIn addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitrevisions - Specifying revisions and ranges for Git  <describeOutput> , e.g. v1.7.4.2-679-g3bee7fb<|im_end|>\n<|im_start|>assistant\nOutput from git describe ; i.e. a closest tag, optionally\nfollowed by a dash and a number of commits, followed by a dash, a g , and an abbreviated object name.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  fetch.unpackLimit<|im_end|>\n<|im_start|>assistant\nIf the number of objects fetched over the Git native\ntransfer is below this\nlimit, then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitformat-index<|im_end|>\n<|im_start|>assistant\nGit index format<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails  --batch-size=<num><|im_end|>\n<|im_start|>assistant\nSome email servers (e.g. smtp.163.com) limit the number emails to be\nsent per session (connection) and this will lead to a failure when\nsending many messages.  With this option, send-email will disconnect after\nsending $<num> messages and wait for a few seconds (see --relogin-delay)\nand reconnect, to work around such a limit.  You may want to\nuse some form of credential helper to avoid having to retype\nyour password every time this happens.  Defaults to the sendemail.smtpBatchSize configuration variable.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n\t   [-v | --invert-match] [-h|-H] [--full-name]\n\t   [-E | --extended-regexp] [-G | --basic-regexp]\n\t   [-P | --perl-regexp]\n\t   [-F | --fixed-strings] [-n | --line-number] [--column]\n\t   [-l | --files-with-matches] [-L | --files-without-match]\n\t   [(-O | --open-files-in-pager) [<pager>]]\n\t   [-z | --null]\n\t   [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]\n\t   [--max-depth <depth>] [--[no-]recursive]\n\t   [--color[=<when>] | --no-color]\n\t   [--break] [--heading] [-p | --show-function]\n\t   [-A <post-context>] [-B <pre-context>] [-C <context>]\n\t   [-W | --function-context]\n\t   [(-m | --max-count) <num>]\n\t   [--threads <num>]\n\t   [-f <file>] [-e] <pattern>\n\t   [--and|--or|--not|(|)|-e <pattern>…​]\n\t   [--recurse-submodules] [--parent-basename <basename>]\n\t   [ [--[no-]exclude-standard] [--cached | --untracked | --no-index] | <tree>…​]\n\t   [--] [<pathspec>…​]<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %cD<|im_end|>\n<|im_start|>assistant\ncommitter date, RFC2822 style<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-merge-tree<|im_end|>\n<|im_start|>assistant\nPerform merge without touching index or working tree<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  --patch-with-raw<|im_end|>\n<|im_start|>assistant\nSynonym for -p --raw .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index<|im_end|>\n<|im_start|>assistant\nother diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  sendemail.smtpEncryption<|im_end|>\n<|im_start|>assistant\nSee git-send-email for description.  Note that this\nsetting is not subject to the identity mechanism.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  sendmail<|im_end|>\n<|im_start|>assistant\nQuoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --shortstat<|im_end|>\n<|im_start|>assistant\nOutput only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n\t [--[no-]full] [--strict] [--verbose] [--lost-found]\n\t [--[no-]dangling] [--[no-]progress] [--connectivity-only]\n\t [--[no-]name-objects] [<object>…​]<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --abbrev[=<n>]<|im_end|>\n<|im_start|>assistant\nInstead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  <refname>@{<n>} , e.g. master@{1}<|im_end|>\n<|im_start|>assistant\nA ref followed by the suffix @ with an ordinal specification\nenclosed in a brace pair (e.g. {1} , {15} ) specifies\nthe n-th prior value of that ref.  For example master@{1} is the immediate prior value of master while master@{5} is the 5th prior value of master . This suffix may only be used\nimmediately following a ref name and the ref must have an existing\nlog ( $GIT_DIR/logs/<refname> ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-merge<|im_end|>\n<|im_start|>assistant\nJoin two or more development histories together<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  --merged [<commit>]<|im_end|>\n<|im_start|>assistant\nOnly list branches whose tips are reachable from the\nspecified commit (HEAD if not specified). Implies --list .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-reflog - Manage reflog information  -n  --dry-run<|im_end|>\n<|im_start|>assistant\nDo not actually prune any entries; just show what would have\nbeen pruned.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesUpdate<|im_end|>\n<|im_start|>assistant\n(ERROR) Found an invalid submodule update setting.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-checkout - Switch branches or restore working tree files  -t  --track[=(direct|inherit)]<|im_end|>\n<|im_start|>assistant\nWhen creating a new branch, set up \"upstream\" configuration. See\n\"--track\" in git-branch for details. If no -b option is given, the name of the new branch will be\nderived from the remote-tracking branch, by looking at the local part of\nthe refspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".\nThis would tell us to use hack as the local branch when branching\noff of origin/hack (or remotes/origin/hack , or even refs/remotes/origin/hack ).  If the given name has no slash, or the above\nguessing results in an empty name, the guessing is aborted.  You can\nexplicitly give a name with -b in such a case.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-tag - Create, list, delete or verify a tag object signed with GPG  -u <key-id>  --local-user=<key-id><|im_end|>\n<|im_start|>assistant\nMake a GPG-signed tag, using the given key.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-notes - Add or inspect object notes  notes.rewrite.<command><|im_end|>\n<|im_start|>assistant\nWhen rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  git push mothership master:satellite/master dev:satellite/dev<|im_end|>\n<|im_start|>assistant\nUse the source ref that matches master (e.g. refs/heads/master )\nto update the ref that matches satellite/master (most probably refs/remotes/satellite/master ) in the mothership repository;\ndo the same for dev and satellite/dev . See the section describing <refspec>... above for a discussion of\nthe matching semantics. This is to emulate git fetch run on the mothership using git\npush that is run in the opposite direction in order to integrate\nthe work done on satellite , and is often necessary when you can\nonly make connection in one way (i.e. satellite can ssh into\nmothership but mothership cannot initiate connection to satellite\nbecause the latter is behind a firewall or does not run sshd). After running this git push on the satellite machine, you would\nssh into the mothership and run git merge there to complete the\nemulation of git pull that were run on mothership to pull changes\nmade on satellite .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-tag - Create, list, delete or verify a tag object signed with GPG  --column[=<options>]  --no-column<|im_end|>\n<|im_start|>assistant\nDisplay tag listing in columns. See configuration variable column.tag for option syntax. --column and --no-column without options are equivalent to always and never respectively. This option is only applicable when listing tags without annotation lines.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-help - Display help information about Git  --verbose<|im_end|>\n<|im_start|>assistant\nWhen used with --all , print description for all recognized\ncommands. This is the default.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  core.abbrev<|im_end|>\n<|im_start|>assistant\nSet the length object names are abbreviated to.  If\nunspecified or set to \"auto\", an appropriate value is\ncomputed based on the approximate number of packed objects\nin your repository, which hopefully is enough for\nabbreviated object names to stay unique for some time.\nIf set to \"no\", no abbreviation is made and the object names\nare shown in their full length.\nThe minimum length is 4.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --no-color-moved<|im_end|>\n<|im_start|>assistant\nTurn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cat-file - Provide contents or details of repository objects  --[no-]mailmap  --[no-]use-mailmap<|im_end|>\n<|im_start|>assistant\nUse mailmap file to map author, committer and tagger names\nand email addresses to canonical real names and email addresses.\nSee git-shortlog .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-maintenance<|im_end|>\n<|im_start|>assistant\nRun tasks to optimize Git repository data<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --textconv  --no-textconv<|im_end|>\n<|im_start|>assistant\nAllow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  -j  --jobs=<n><|im_end|>\n<|im_start|>assistant\nNumber of parallel children to be used for all forms of fetching. If the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config ). Typically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-help - Display help information about Git  -a  --all<|im_end|>\n<|im_start|>assistant\nPrint all the available commands on the standard output.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules  --files<|im_end|>\n<|im_start|>assistant\nThis option is only valid for the summary command. This command\ncompares the commit in the index with that in the submodule HEAD\nwhen this option is used.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-apply - Apply a patch to files and/or to the index  --intent-to-add<|im_end|>\n<|im_start|>assistant\nWhen applying the patch only to the working tree, mark new\nfiles to be added to the index later (see --intent-to-add option in git-add ). This option is ignored unless\nrunning in a Git repository and --index is not specified.\nNote that --index could be implied by other options such\nas --cached or --3way .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  index.sparse<|im_end|>\n<|im_start|>assistant\nWhen enabled, write the index using sparse-directory entries. This\nhas no effect unless core.sparseCheckout and core.sparseCheckoutCone are both enabled. Defaults to false .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  blame.markUnblamableLines<|im_end|>\n<|im_start|>assistant\nMark lines that were changed by an ignored revision that we could not\nattribute to another commit with a * in the output of git-blame .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  merge.branchdesc<|im_end|>\n<|im_start|>assistant\nIn addition to branch names, populate the log message with\nthe branch description text associated with them.  Defaults\nto false.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  branch.<name>.rebase<|im_end|>\n<|im_start|>assistant\nWhen true, rebase the branch <name> on top of the fetched branch,\ninstead of merging the default branch from the default remote when\n\"git pull\" is run. See \"pull.rebase\" for doing this in a non\nbranch-specific manner. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase for details).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --left-only  --right-only<|im_end|>\n<|im_start|>assistant\nList only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by --left-right . For example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in A . In other words, this lists the + commits from git cherry A B .\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  diff.autoRefreshIndex<|im_end|>\n<|im_start|>assistant\nWhen using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-branch - List, create, or delete branches  --show-current<|im_end|>\n<|im_start|>assistant\nPrint the name of the current branch. In detached HEAD state,\nnothing is printed.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-grep - Print lines matching a pattern  --recurse-submodules<|im_end|>\n<|im_start|>assistant\nRecursively search in each submodule that is active and\nchecked out in the repository.  When used in combination with the <tree> option the prefix of all submodule output will be the name of\nthe parent project’s <tree> object.  This option cannot be used together\nwith --untracked , and it has no effect if --no-index is specified.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --pickaxe-all<|im_end|>\n<|im_start|>assistant\nWhen -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  log.diffMerges<|im_end|>\n<|im_start|>assistant\nSet diff format to be used when --diff-merges=on is\nspecified, see --diff-merges in git-log for\ndetails. Defaults to separate .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-difftool - Show changes using common diff tools  --tool-help<|im_end|>\n<|im_start|>assistant\nPrint a list of diff tools that may be used with --tool .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  [<branchname>]@{upstream} , e.g. master@{upstream} , @{u}<|im_end|>\n<|im_start|>assistant\nA branch B may be set up to build on top of a branch X (configured with branch.<name>.merge ) at a remote R (configured with branch.<name>.remote ). B@{u} refers to the remote-tracking branch for\nthe branch X taken from remote R, typically found at refs/remotes/R/X .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth<|im_end|>\n<|im_start|>assistant\nLimit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-restore - Restore working tree files  -s <tree>  --source=<tree><|im_end|>\n<|im_start|>assistant\nRestore the working tree files with the content from the given\ntree. It is common to specify the source tree by naming a\ncommit, branch or tag associated with it. If not specified, the contents are restored from HEAD if --staged is\ngiven, otherwise from the index. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM<|im_end|>\n<|im_start|>assistant\nTake the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  --show-signature<|im_end|>\n<|im_start|>assistant\nCheck the validity of a signed commit object by passing the signature\nto gpg --verify and show the output.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %GT<|im_end|>\n<|im_start|>assistant\nshow the trust level for the key used to sign a signed commit<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitattributes - Defining attributes per path  Unspecified<|im_end|>\n<|im_start|>assistant\nA path to which the diff attribute is unspecified\nfirst gets its contents inspected, and if it looks like\ntext and is smaller than core.bigFileThreshold, it is treated\nas text. Otherwise it would generate Binary files differ .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  --stdin<|im_end|>\n<|im_start|>assistant\nRead refspecs, one per line, from stdin in addition to those provided\nas arguments. The \"tag <name>\" format is not supported.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-am - Apply a series of patches from a mailbox  --no-scissors<|im_end|>\n<|im_start|>assistant\nIgnore scissors lines (see git-mailinfo ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fsck - Verifies the connectivity and validity of the objects in the database  badDateOverflow<|im_end|>\n<|im_start|>assistant\n(ERROR) Invalid date value in an author/committer line.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pack.deltaCacheLimit<|im_end|>\n<|im_start|>assistant\nThe maximum size of a delta, that is cached in git-pack-objects . This cache is used to speed up the\nwriting object phase by not having to recompute the final delta\nresult once the best match for all objects is found.\nDefaults to 1000. Maximum value is 65535.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  cumulative<|im_end|>\n<|im_start|>assistant\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-submodule - Initialize, update or inspect submodules  checkout<|im_end|>\n<|im_start|>assistant\nthe commit recorded in the superproject will be\nchecked out in the submodule on a detached HEAD. If --force is specified, the submodule will be checked out (using git checkout --force ), even if the commit specified\nin the index of the containing repository already matches the commit\nchecked out in the submodule.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  notes.rewriteRef<|im_end|>\n<|im_start|>assistant\nWhen copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-gc - Cleanup unnecessary files and optimize the local repository  --keep-largest-pack<|im_end|>\n<|im_start|>assistant\nAll packs except the largest non-cruft pack, any packs marked\nwith a .keep file, and any cruft pack(s) are consolidated into\na single pack. When this option is used, gc.bigPackThreshold is ignored.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-mktree<|im_end|>\n<|im_start|>assistant\nBuild a tree-object from ls-tree formatted text<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %gd<|im_end|>\n<|im_start|>assistant\nshortened reflog selector; same as %gD , but the refname\nportion is shortened for human readability (so refs/heads/master becomes just master ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --no-optional-locks<|im_end|>\n<|im_start|>assistant\nDo not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-fetch - Download objects and refs from another repository  --set-upstream<|im_end|>\n<|im_start|>assistant\nIf the remote is fetched successfully, add upstream\n(tracking) reference, used by argument-less git-pull and other commands. For more information,\nsee branch.<name>.merge and branch.<name>.remote in git-config .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-revert - Revert some existing commits  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign<|im_end|>\n<|im_start|>assistant\nGPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-status - Show the working tree status  -v  --verbose<|im_end|>\n<|im_start|>assistant\nIn addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached ). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  --max-age=<timestamp>  --min-age=<timestamp><|im_end|>\n<|im_start|>assistant\nLimit the commits output to specified time range.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  -P  --perl-regexp<|im_end|>\n<|im_start|>assistant\nConsider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  blocks<|im_end|>\n<|im_start|>assistant\nBlocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clean - Remove untracked files from the working tree<|im_end|>\n<|im_start|>assistant\nSYNOPSIS git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] [<pathspec>…​]<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  no-renormalize<|im_end|>\n<|im_start|>assistant\nDisables the renormalize option.  This overrides the merge.renormalize configuration variable.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-parse - Pick out and massage parameters  --is-inside-work-tree<|im_end|>\n<|im_start|>assistant\nWhen the current working directory is inside the work tree of the\nrepository print \"true\", otherwise \"false\".<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  index.recordEndOfIndexEntries<|im_end|>\n<|im_start|>assistant\nSpecifies whether the index file should include an \"End Of Index\nEntry\" section. This reduces index load time on multiprocessor\nmachines but produces a message \"ignoring EOIE extension\" when\nreading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --all-match<|im_end|>\n<|im_start|>assistant\nLimit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-am - Apply a series of patches from a mailbox  --ignore-date<|im_end|>\n<|im_start|>assistant\nBy default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the author date by using the same\nvalue as the committer date.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-merge - Join two or more development histories together  ours<|im_end|>\n<|im_start|>assistant\nThis resolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches.  It is meant to\nbe used to supersede old development history of side\nbranches.  Note that this is different from the -Xours option to\nthe recursive merge strategy.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  --ff-only<|im_end|>\n<|im_start|>assistant\nOnly update to the new history if there is no divergent local\nhistory.  This is the default when no method for reconciling\ndivergent histories is provided (via the --rebase=* flags).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --date-order<|im_end|>\n<|im_start|>assistant\nShow no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit> <commit>…​ <commit> [--] [<path>…​]<|im_end|>\n<|im_start|>assistant\nThis form is to view the results of a merge commit.  The first\nlisted <commit> must be the merge itself; the remaining two or\nmore commits should be its parents.  Convenient ways to produce\nthe desired set of revisions are to use the suffixes ^@ and ^! .  If A is a merge commit, then git diff A A^@ , git diff A^! and git show A all give the same combined diff.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  -W  --function-context<|im_end|>\n<|im_start|>assistant\nShow whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes ).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines<|im_end|>\n<|im_start|>assistant\nIgnore changes whose lines are all blank.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-send-email - Send a collection of patches as emails  --[no-]thread<|im_end|>\n<|im_start|>assistant\nIf this is set, the In-Reply-To and References headers will be\nadded to each email sent.  Whether each mail refers to the\nprevious email ( deep threading per git format-patch wording) or to the first email ( shallow threading) is\ngoverned by \"--[no-]chain-reply-to\". If disabled with \"--no-thread\", those headers will not be added\n(unless specified with --in-reply-to).  Default is the value of the sendemail.thread configuration value; if that is unspecified,\ndefault to --thread. It is up to the user to ensure that no In-Reply-To header already\nexists when git send-email is asked to add it (especially note that git format-patch can be configured to do the threading itself).\nFailure to do so may not produce the expected result in the\nrecipient’s MUA.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-rev-list<|im_end|>\n<|im_start|>assistant\nLists commit objects in reverse chronological order<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-shortlog - Summarize git log output  -e  --email<|im_end|>\n<|im_start|>assistant\nShow the email address of each author.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  --exec-path[=<path>]<|im_end|>\n<|im_start|>assistant\nPath to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit - Record changes to the repository  $GIT_DIR/COMMIT_EDITMSG<|im_end|>\n<|im_start|>assistant\nThis file contains the commit message of a commit in progress.\nIf git commit exits due to an error before creating a commit,\nany commit message that has been provided by the user (e.g., in\nan editor session) will be available in this file, but will be\noverwritten by the next invocation of git commit .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  rebase.rescheduleFailedExec<|im_end|>\n<|im_start|>assistant\nAutomatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\nThis is the same as specifying the --reschedule-failed-exec option.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-difftool<|im_end|>\n<|im_start|>assistant\nShow changes using common diff tools<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  diff.orderFile<|im_end|>\n<|im_start|>assistant\nFile indicating how to order files within a diff.\nSee the -O option to git-diff for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  gitrepository-layout<|im_end|>\n<|im_start|>assistant\nGit Repository Layout<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-tree - List the contents of a tree object<|im_end|>\n<|im_start|>assistant\nNAME git-ls-tree - List the contents of a tree object<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-pull - Fetch from and integrate with another repository or a local branch  ignore-space-change  ignore-all-space  ignore-space-at-eol  ignore-cr-at-eol<|im_end|>\n<|im_start|>assistant\nTreats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --no-abbrev-commit<|im_end|>\n<|im_start|>assistant\nShow the full 40-byte hexadecimal commit object name. This negates --abbrev-commit , either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-diff-files<|im_end|>\n<|im_start|>assistant\nCompares files in the working tree and the index<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  guitool.<name>.cmd<|im_end|>\n<|im_start|>assistant\nSpecifies the shell command line to execute when the corresponding item\nof the git-gui Tools menu is invoked. This option is\nmandatory for every tool. The command is executed from the root of\nthe working directory, and in the environment it receives the name of\nthe tool as GIT_GUITOOL , the name of the currently selected file as FILENAME , and the name of the current branch as CUR_BRANCH (if\nthe head is detached, CUR_BRANCH is empty).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff --cached<|im_end|>\n<|im_start|>assistant\ncompares a (c)ommit and the (i)ndex;<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob><|im_end|>\n<|im_start|>assistant\nThis form is to view the differences between the raw\ncontents of two blob objects.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-index-pack<|im_end|>\n<|im_start|>assistant\nBuild pack index file for an existing packed archive<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit - Record changes to the repository  --porcelain<|im_end|>\n<|im_start|>assistant\nWhen doing a dry-run, give the output in a porcelain-ready\nformat. See git-status for details. Implies --dry-run .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  git-svn<|im_end|>\n<|im_start|>assistant\nBidirectional operation between a Subversion repository and Git<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-filter-branch - Rewrite branches<|im_end|>\n<|im_start|>assistant\nCHECKLIST FOR SHRINKING A REPOSITORY git-filter-branch can be used to get rid of a subset of files,\nusually with some combination of --index-filter and --subdirectory-filter .  People expect the resulting repository to\nbe smaller than the original, but you need a few more steps to\nactually make it smaller, because Git tries hard not to lose your\nobjects until you tell it to.  First make sure that: You really removed all variants of a filename, if a blob was moved\nover its lifetime. git log --name-only --follow --all -- filename can help you find renames. You really filtered all refs: use --tag-name-filter cat -- --all when calling git-filter-branch. Then there are two ways to get a smaller repository.  A safer way is\nto clone, that keeps your original intact. Clone it with git clone file:///path/to/repo .  The clone\nwill not have the removed objects.  See git-clone .  (Note\nthat cloning with a plain path just hardlinks everything!) If you really don’t want to clone it, for whatever reasons, check the\nfollowing points instead (in this order).  This is a very destructive\napproach, so make a backup or go back to cloning it.  You have been\nwarned. Remove the original refs backed up by git-filter-branch: say git\nfor-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git\nupdate-ref -d . Expire all reflogs with git reflog expire --expire=now --all . Garbage collect all unreferenced objects with git gc --prune=now (or if your git-gc is not new enough to support arguments to --prune , use git repack -ad; git prune instead).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pack.useBitmapBoundaryTraversal<|im_end|>\n<|im_start|>assistant\nWhen true, Git will use an experimental algorithm for computing\nreachability queries with bitmaps. Instead of building up\ncomplete bitmaps for all of the negated tips and then OR-ing\nthem together, consider negated tips with existing bitmaps as\nadditive (i.e. OR-ing them into the result if they exist,\nignoring them otherwise), and build up a bitmap at the boundary\ninstead. When using this algorithm, Git may include too many objects as a result\nof not opening up trees belonging to certain UNINTERESTING commits. This\ninexactness matches the non-bitmap traversal algorithm. In many cases, this can provide a speed-up over the exact algorithm,\nparticularly when there is poor bitmap coverage of the negated side of\nthe query.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  <file><|im_end|>\n<|im_start|>assistant\nFiles to show. If no files are given all files which match the other\nspecified criteria are shown.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  gc.recentObjectsHook<|im_end|>\n<|im_start|>assistant\nWhen considering whether or not to remove an object (either when\ngenerating a cruft pack or storing unreachable objects as\nloose), use the shell to execute the specified command(s).\nInterpret their output as object IDs which Git will consider as\n\"recent\", regardless of their age. By treating their mtimes as\n\"now\", any objects (and their descendants) mentioned in the\noutput will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing\nelse. Objects which cannot be found in the repository are ignored.\nMultiple hooks are supported, but all must exit successfully, else the\noperation (either generating a cruft pack or unpacking unreachable\nobjects) will be halted.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-format-patch - Prepare patches for e-mail submission<|im_end|>\n<|im_start|>assistant\nEXAMPLES Extract commits between revisions R1 and R2, and apply them on top of\nthe current branch using git am to cherry-pick them: $ git format-patch -k --stdout R1..R2 | git am -3 -k Extract all commits which are in the current branch but not in the\norigin branch: $ git format-patch origin For each commit a separate file is created in the current directory. Extract all commits that lead to origin since the inception of the\nproject: $ git format-patch --root origin The same as the previous one: $ git format-patch -M -B origin Additionally, it detects and handles renames and complete rewrites\nintelligently to produce a renaming patch.  A renaming patch reduces\nthe amount of text output, and generally makes it easier to review.\nNote that non-Git \"patch\" programs won’t understand renaming patches, so\nuse it only when you know the recipient uses Git to apply your patch. Extract three topmost commits from the current branch and format them\nas e-mailable patches: $ git format-patch -3<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  --textconv  --no-textconv<|im_end|>\n<|im_start|>assistant\nAllow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker<|im_end|>\n<|im_start|>assistant\nNAME git - the stupid content tracker<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  pager.<cmd><|im_end|>\n<|im_start|>assistant\nIf the value is boolean, turns on or off pagination of the\noutput of a particular Git subcommand when writing to a tty.\nOtherwise, turns on pagination for the subcommand using the\npager specified by the value of pager.<cmd> .  If --paginate or --no-pager is specified on the command line, it takes\nprecedence over this option.  To disable pagination for all\ncommands, set core.pager or GIT_PAGER to cat .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --glob=<glob-pattern><|im_end|>\n<|im_start|>assistant\nPretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_NOGLOB_PATHSPECS<|im_end|>\n<|im_start|>assistant\nSetting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-clone - Clone a repository into a new directory  --filter= <filter-spec><|im_end|>\n<|im_start|>assistant\nUse the partial clone feature and request that the server sends\na subset of reachable objects according to a given object filter.\nWhen using --filter , the supplied <filter-spec> is used for\nthe partial clone filter. For example, --filter=blob:none will\nfilter out all blobs (file contents) until needed by Git. Also, --filter=blob:limit= <size> will filter out all blobs of size\nat least <size> . For more details on filter specifications, see\nthe --filter option in git-rev-list .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --all<|im_end|>\n<|im_start|>assistant\nPretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-filter-branch - Rewrite branches<|im_end|>\n<|im_start|>assistant\nEXAMPLES Suppose you want to remove a file (containing confidential information\nor copyright violation) from all commits: git filter-branch --tree-filter 'rm filename' HEAD However, if the file is absent from the tree of some commit,\na simple rm filename will fail for that tree and commit.\nThus you may instead want to use rm -f filename as the script. Using --index-filter with git rm yields a significantly faster\nversion.  Like with using rm filename , git rm --cached filename will fail if the file is absent from the tree of a commit.  If you\nwant to \"completely forget\" a file, it does not matter when it entered\nhistory, so we also add --ignore-unmatch : git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD Now, you will get the rewritten history saved in HEAD. To rewrite the repository to look as if foodir/ had been its project\nroot, and discard all other history: git filter-branch --subdirectory-filter foodir -- --all Thus you can, e.g., turn a library subdirectory into a repository of\nits own.  Note the -- that separates filter-branch options from\nrevision options, and the --all to rewrite all branches and tags. To set a commit (which typically is at the tip of another\nhistory) to be the parent of the current initial commit, in\norder to paste the other history behind the current history: git filter-branch --parent-filter 'sed \"s/^\\$/-p <graft-id>/\"' HEAD (if the parent string is empty - which happens when we are dealing with\nthe initial commit - add graftcommit as a parent).  Note that this assumes\nhistory with a single root (that is, no merge without common ancestors\nhappened).  If this is not the case, use: git filter-branch --parent-filter \\\n\t'test $GIT_COMMIT = <commit-id> && echo \"-p <graft-id>\" || cat' HEAD or even simpler: git replace --graft $commit-id $graft-id\ngit filter-branch $graft-id..HEAD To remove commits authored by \"Darl McBribe\" from the history: git filter-branch --commit-filter '\n\tif [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n\tthen\n\t\tskip_commit \"$@\";\n\telse\n\t\tgit commit-tree \"$@\";\n\tfi' HEAD The function skip_commit is defined as follows: skip_commit()\n{\n\tshift;\n\twhile [ -n \"$1\" ];\n\tdo\n\t\tshift;\n\t\tmap \"$1\";\n\t\tshift;\n\tdone;\n} The shift magic first throws away the tree id and then the -p\nparameters.  Note that this handles merges properly! In case Darl\ncommitted a merge between P1 and P2, it will be propagated properly\nand all children of the merge will become merge commits with P1,P2\nas their parents instead of the merge commit. NOTE the changes introduced by the commits, and which are not reverted\nby subsequent commits, will still be in the rewritten branch. If you want\nto throw out changes together with the commits, you should use the\ninteractive mode of git rebase . You can rewrite the commit log messages using --msg-filter .  For\nexample, git svn-id strings in a repository created by git svn can\nbe removed this way: git filter-branch --msg-filter '\n\tsed -e \"/^git-svn-id:/d\"\n' If you need to add Acked-by lines to, say, the last 10 commits (none\nof which is a merge), use this command: git filter-branch --msg-filter '\n\tcat &&\n\techo \"Acked-by: Bugs Bunny <bunny@bugzilla.org>\"\n' HEAD~10..HEAD The --env-filter option can be used to modify committer and/or author\nidentity.  For example, if you found out that your commits have the wrong\nidentity due to a misconfigured user.email, you can make a correction,\nbefore publishing the project, like this: git filter-branch --env-filter '\n\tif test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_AUTHOR_EMAIL=john@example.com\n\tfi\n\tif test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_COMMITTER_EMAIL=john@example.com\n\tfi\n' -- --all To restrict rewriting to only part of the history, specify a revision\nrange in addition to the new branch name.  The new branch name will\npoint to the top-most revision that a git rev-list of this range\nwill print. Consider this history: D--E--F--G--H\n    /     /\nA--B-----C To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use: git filter-branch ... C..H To rewrite commits E,F,G,H, use one of these: git filter-branch ... C..H --not D\ngit filter-branch ... D..H --not C To move the whole tree into a subdirectory, or remove it from there: git filter-branch --index-filter \\\n\t'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n\t\tGIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n\t\t\tgit update-index --index-info &&\n\t mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  --merges<|im_end|>\n<|im_start|>assistant\nPrint only merge commits. This is exactly the same as --min-parents=2 .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  push.followTags<|im_end|>\n<|im_start|>assistant\nIf set to true, enable --follow-tags option by default.  You\nmay override this configuration at time of push by specifying --no-follow-tags .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-stash - Stash the changes in a dirty working directory away  drop [-q|--quiet] [<stash>]<|im_end|>\n<|im_start|>assistant\nRemove a single stash entry from the list of stash entries.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_PROGRESS_DELAY<|im_end|>\n<|im_start|>assistant\nA number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-svn - Bidirectional operation between a Subversion repository and Git  --log-window-size=<n><|im_end|>\n<|im_start|>assistant\nFetch <n> log entries per request when scanning Subversion history.\nThe default is 100. For very large Subversion repositories, larger\nvalues may be needed for clone / fetch to complete in reasonable\ntime. But overly large values may lead to higher memory usage and\nrequest timeouts.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-stash - Stash the changes in a dirty working directory away  --pathspec-file-nul<|im_end|>\n<|im_start|>assistant\nThis option is only valid for push command. Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes).<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  --progress<|im_end|>\n<|im_start|>assistant\nProgress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  dimmed-zebra<|im_end|>\n<|im_start|>assistant\nSimilar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-hash-object - Compute object ID and optionally create an object from a file  --stdin<|im_end|>\n<|im_start|>assistant\nRead the object from standard input instead of from a file.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options<|im_end|>\n<|im_start|>assistant\nDESCRIPTION You can query/set/replace/unset options with this command. The name is\nactually the section and the key separated by a dot, and the value will be\nescaped. Multiple lines can be added to an option by using the --add option.\nIf you want to update or unset an option which can occur on multiple\nlines, a value-pattern (which is an extended regular expression,\nunless the --fixed-value option is given) needs to be given.  Only the\nexisting values that match the pattern are updated or unset.  If\nyou want to handle the lines that do not match the pattern, just\nprepend a single exclamation mark in front (see also EXAMPLES ),\nbut note that this only works when the --fixed-value option is not\nin use. The --type=<type> option instructs git config to ensure that incoming and\noutgoing values are canonicalize-able under the given <type>.  If no --type=<type> is given, no canonicalization will be performed. Callers may\nunset an existing --type specifier with --no-type . When reading, the values are read from the system, global and\nrepository local configuration files by default, and options --system , --global , --local , --worktree and --file <filename> can be used to tell the command to read from only\nthat location (see FILES ). When writing, the new value is written to the repository local\nconfiguration file by default, and options --system , --global , --worktree , --file <filename> can be used to tell the command to\nwrite to that location (you can say --local but that is the\ndefault). This command will fail with non-zero status upon error.  Some exit\ncodes are: The section or key is invalid (ret=1), no section or name was provided (ret=2), the config file is invalid (ret=3), the config file cannot be written (ret=4), you try to unset an option which does not exist (ret=5), you try to unset/set an option for which multiple lines match (ret=5), or you try to use an invalid regexp (ret=6). On success, the command returns the exit code 0. A list of all available configuration variables can be obtained using the git help --config command.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngitignore - Specifies intentionally untracked files to ignore<|im_end|>\n<|im_start|>assistant\nNAME gitignore - Specifies intentionally untracked files to ignore<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-commit-tree - Create a new commit object<|im_end|>\n<|im_start|>assistant\nDESCRIPTION This is usually not what an end user wants to run directly.  See git-commit instead. Creates a new commit object based on the provided tree object and\nemits the new commit object id on stdout. The log message is read\nfrom the standard input, unless -m or -F options are given. The -m and -F options can be given any number of times, in any\norder. The commit log message will be composed in the order in which\nthe options are given. A commit object may have any number of parents. With exactly one\nparent, it is an ordinary commit. Having more than one parent makes\nthe commit a merge between several lines of history. Initial (root)\ncommits have no parents. While a tree represents a particular directory state of a working\ndirectory, a commit represents that state in \"time\", and explains how\nto get there. Normally a commit would identify a new \"HEAD\" state, and while Git\ndoesn’t care where you save the note about that state, in practice we\ntend to just write the result to the file that is pointed at by .git/HEAD , so that we can always see what the last committed\nstate was.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngittutorial - A tutorial introduction to Git<|im_end|>\n<|im_start|>assistant\nMaking changes Modify some files, then add their updated contents to the index: $ git add file1 file2 file3 You are now ready to commit.  You can see what is about to be committed\nusing git diff with the --cached option: $ git diff --cached (Without --cached , git diff will show you any changes that\nyou’ve made but not yet added to the index.)  You can also get a brief\nsummary of the situation with git status : $ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\n\tmodified:   file1\n\tmodified:   file2\n\tmodified:   file3 If you need to make any further adjustments, do so now, and then add any\nnewly modified content to the index.  Finally, commit your changes with: $ git commit This will again prompt you for a message describing the change, and then\nrecord a new version of the project. Alternatively, instead of running git add beforehand, you can use $ git commit -a which will automatically notice any modified (but not new) files, add\nthem to the index, and commit, all in one step. A note on commit messages: Though not required, it’s a good idea to\nbegin the commit message with a single short (no more than 50\ncharacters) line summarizing the change, followed by a blank line and\nthen a more thorough description. The text up to the first blank line in\na commit message is treated as the commit title, and that title is used\nthroughout Git.  For example, git-format-patch turns a\ncommit into email, and it uses the title on the Subject line and the\nrest of the commit in the body.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  instaweb.browser<|im_end|>\n<|im_start|>assistant\nSpecify the program that will be used to browse your working\nrepository in gitweb. See git-instaweb .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  format.signatureFile<|im_end|>\n<|im_start|>assistant\nWorks just like format.signature except the contents of the\nfile specified by this variable will be used as the signature.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  diff.context<|im_end|>\n<|im_start|>assistant\nGenerate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rebase - Reapply commits on top of another base tip  --no-keep-empty  --keep-empty<|im_end|>\n<|im_start|>assistant\nDo not keep commits that start empty before the rebase\n(i.e. that do not change anything from its parent) in the\nresult.  The default is to keep commits which start empty,\nsince creating such commits requires passing the --allow-empty override flag to git commit , signifying that a user is very\nintentionally creating such a commit and thus wants to keep\nit. Usage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don’t want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed. For commits which do not start empty but become empty after rebasing,\nsee the --empty flag. See also INCOMPATIBLE OPTIONS below.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-push - Update remote refs along with associated objects  push.useBitmaps<|im_end|>\n<|im_start|>assistant\nIf set to \"false\", disable use of bitmaps for \"git push\" even if pack.useBitmaps is \"true\", without preventing other git operations\nfrom using bitmaps. Default is true.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-config - Get and set repository or global options  http.proxySSLCertPasswordProtected<|im_end|>\n<|im_start|>assistant\nEnable Git’s password prompt for the proxy SSL certificate.  Otherwise OpenSSL\nwill prompt the user, possibly many times, if the certificate or private key\nis encrypted. Can be overridden by the GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED environment variable.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff - Show changes between commits, commit and working tree, etc  patience<|im_end|>\n<|im_start|>assistant\nUse \"patience diff\" algorithm when generating patches.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-ls-files - Show information about files in the index and the working tree  C<|im_end|>\n<|im_start|>assistant\ntracked file with unstaged modification/change<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs  %(describe[:<options>])<|im_end|>\n<|im_start|>assistant\nhuman-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-diff-index - Compare a tree to the working tree or index  --stat[=<width>[,<name-width>[,<count>]]]<|im_end|>\n<|im_start|>assistant\nGenerate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> .<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-rev-list - Lists commit objects in reverse chronological order  -i  --regexp-ignore-case<|im_end|>\n<|im_start|>assistant\nMatch the regular expression limiting patterns without regard to letter\ncase.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_DIR<|im_end|>\n<|im_start|>assistant\nIf the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-read-tree - Reads tree information into the index  --reset<|im_end|>\n<|im_start|>assistant\nSame as -m, except that unmerged entries are discarded instead\nof failing.  When used with -u , updates leading to loss of\nworking tree changes or untracked files or directories will not\nabort the operation.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-cat-file - Provide contents or details of repository objects  deltabase<|im_end|>\n<|im_start|>assistant\nIf the object is stored as a delta on-disk, this expands to the\nfull hex representation of the delta base object name.\nOtherwise, expands to the null OID (all zeroes). See CAVEATS below.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-log - Show commit logs<|im_end|>\n<|im_start|>assistant\nGenerating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages.<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit-show - Show various types of objects  %aI<|im_end|>\n<|im_start|>assistant\nauthor date, strict ISO 8601 format<|im_end|>"}
{"text": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\ngit - the stupid content tracker  GIT_AUTHOR_EMAIL<|im_end|>\n<|im_start|>assistant\nThe email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings.<|im_end|>"}

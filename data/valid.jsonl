{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  branch.<name>.mergeOptions"}, {"role": "assistant", "content": "Sets default options for merging into branch <name>. The syntax and\nsupported options are the same as those of git merge , but option\nvalues containing whitespace characters are currently not supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "DISCUSSION While git creates a basic commit message automatically, it is strongly recommended to explain why the original commit is being\nreverted.\nIn addition, repeatedly reverting reverts will result in increasingly\nunwieldy subject lines, for example Reapply \"Reapply \"<original-subject>\"\" .\nPlease consider rewording these to be shorter and more unique."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.category  gitweb.description  gitweb.owner  gitweb.url"}, {"role": "assistant", "content": "See gitweb for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --filter-provided-objects"}, {"role": "assistant", "content": "Filter the list of explicitly provided objects, which would otherwise\nalways be printed even if they did not match any of the filters. Only\nuseful with --filter= ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -l  --list"}, {"role": "assistant", "content": "List branches.  With optional <pattern>... , e.g. git\nbranch --list 'maint-*' , list only the branches that match\nthe pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --recurse-submodules [ = <pathspec> ]"}, {"role": "assistant", "content": "After the clone is created, initialize and clone submodules\nwithin based on the provided <pathspec> .  If no =<pathspec> is\nprovided, all submodules are initialized and cloned.\nThis option can be given multiple times for pathspecs consisting\nof multiple entries.  The resulting clone has submodule.active set to\nthe provided pathspec, or \".\" (meaning all submodules) if no\npathspec is provided. Submodules are initialized and cloned using their default settings. This is\nequivalent to running git submodule update --init --recursive <pathspec> immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of --no-checkout / -n , --bare ,\nor --mirror is given)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "EXAMPLES When recording your own work, the contents of modified files in\nyour working tree are temporarily stored to a staging area\ncalled the \"index\" with git add .  A file can be\nreverted back, only in the index but not in the working tree,\nto that of the last commit with git restore --staged <file> ,\nwhich effectively reverts git add and prevents the changes to\nthis file from participating in the next commit.  After building\nthe state to be committed incrementally with these commands, git commit (without any pathname parameter) is used to record what\nhas been staged so far.  This is the most basic form of the\ncommand.  An example: $ edit hello.c\n$ git rm goodbye.c\n$ git add hello.c\n$ git commit Instead of staging files after each individual change, you can\ntell git commit to notice the changes to the files whose\ncontents are tracked in\nyour working tree and do corresponding git add and git rm for you.  That is, this example does the same as the earlier\nexample if there is no other change in your working tree: $ edit hello.c\n$ rm goodbye.c\n$ git commit -a The command git commit -a first looks at your working tree,\nnotices that you have modified hello.c and removed goodbye.c,\nand performs necessary git add and git rm for you. After staging changes to many files, you can alter the order the\nchanges are recorded in, by giving pathnames to git commit .\nWhen pathnames are given, the command makes a commit that\nonly records the changes made to the named paths: $ edit hello.c hello.h\n$ git add hello.c hello.h\n$ edit Makefile\n$ git commit Makefile This makes a commit that records the modification to Makefile .\nThe changes staged for hello.c and hello.h are not included\nin the resulting commit.  However, their changes are not lost — they are still staged and merely held back.  After the above\nsequence, if you do: $ git commit this second commit would record the changes to hello.c and hello.h as expected. After a merge (initiated by git merge or git pull ) stops\nbecause of conflicts, cleanly merged\npaths are already staged to be committed for you, and paths that\nconflicted are left in unmerged state.  You would have to first\ncheck which paths are conflicting with git status and after fixing them manually in your working tree, you would\nstage the result as usual with git add : $ git status | grep unmerged\nunmerged: hello.c\n$ edit hello.c\n$ git add hello.c After resolving conflicts and staging the result, git ls-files -u would stop mentioning the conflicted path.  When you are done,\nrun git commit to finally record the merge: $ git commit As with the case to record your own changes, you can use -a option to save typing.  One difference is that during a merge\nresolution, you cannot use git commit with pathnames to\nalter the order the changes are committed, because the merge\nshould be recorded as a single commit.  In fact, the command\nrefuses to run when given pathnames (but see -i option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectNTFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\ncause problems with the NTFS filesystem, e.g. conflict with\n8.3 \"short\" names.\nDefaults to true on Windows, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  clean"}, {"role": "assistant", "content": "A working tree is clean, if it\ncorresponds to the revision referenced by the current head . Also see \" dirty \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --debug"}, {"role": "assistant", "content": "After each line that describes a file, add more data about its\ncache entry.  This is intended to show as much information as\npossible for manual inspection; the exact format may change at\nany time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --force"}, {"role": "assistant", "content": "Force git gc to run even if there may be another git gc instance running on this repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "If the eol attribute is unspecified for a file, its line endings\nin the working directory are determined by the core.autocrlf or core.eol configuration variable (see the definitions of those\noptions in git-config ).  If text is set but neither of\nthose variables is, the default is eol=crlf on Windows and eol=lf on all other platforms."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "ACTIVE SUBMODULES A submodule is considered active, if submodule.<name>.active is set to true or if the submodule’s path matches the pathspec in submodule.active or if submodule.<name>.url is set. and these are evaluated in this order. For example: [submodule \"foo\"]\n  active = false\n  url = https://example.org/foo\n[submodule \"bar\"]\n  active = true\n  url = https://example.org/bar\n[submodule \"baz\"]\n  url = https://example.org/baz In the above config only the submodules bar and baz are active, bar due to (1) and baz due to (3). foo is inactive because\n(1) takes precedence over (3) Note that (3) is a historical artefact and will be ignored if the\n(1) and (2) specify that the submodule is not active. In other words,\nif we have a submodule.<name>.active set to false or if the\nsubmodule’s path is excluded in the pathspec in submodule.active , the\nurl doesn’t matter whether it is present or not. This is illustrated in\nthe example that follows. [submodule \"foo\"]\n  active = true\n  url = https://example.org/foo\n[submodule \"bar\"]\n  url = https://example.org/bar\n[submodule \"baz\"]\n  url = https://example.org/baz\n[submodule \"bob\"]\n  ignore = true\n[submodule]\n  active = b*\n  active = :(exclude) baz In here all submodules except baz (foo, bar, bob) are active. foo due to its own active flag and all the others due to the\nsubmodule active pathspec, which specifies that any submodule\nstarting with b except baz are also active, regardless of the\npresence of the .url field."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --source"}, {"role": "assistant", "content": "Print out the ref name given on the command line by which each\ncommit was reached."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.generationVersion"}, {"role": "assistant", "content": "Specifies the type of generation number version to use when writing\nor reading the commit-graph file. If version 1 is specified, then\nthe corrected commit dates will not be written or read. Defaults to\n2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.emptyAuth"}, {"role": "assistant", "content": "Attempt authentication without seeking a username or password.  This\ncan be used to attempt GSS-Negotiate authentication without specifying\na username in the URL, as libcurl normally requires a username for\nauthentication."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --syslog"}, {"role": "assistant", "content": "Short for --log-destination=syslog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --cc"}, {"role": "assistant", "content": "Produce dense combined diff output for merge commits.\nShortcut for --diff-merges=dense-combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --no-type"}, {"role": "assistant", "content": "Un-sets the previously set type specifier (if one was previously set). This\noption requests that git config not canonicalize the retrieved variable. --no-type has no effect without --type=<type> or --<type> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --import-marks=<file>"}, {"role": "assistant", "content": "Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks.\nMultiple options may be supplied to import more than one\nset of marks.  If a mark is defined to different values,\nthe last file wins."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.encodeEmailHeaders"}, {"role": "assistant", "content": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047) for email transmission.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-abbrev"}, {"role": "assistant", "content": "Display the full sha1s in the output listing rather than abbreviating them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show next~10:Documentation/README"}, {"role": "assistant", "content": "Shows the contents of the file Documentation/README as\nthey were current in the 10th last commit of the branch next ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto .\nIt can be changed by the color.ui and color.diff configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.signingKey"}, {"role": "assistant", "content": "If git-tag or git-commit is not selecting the\nkey you want it to automatically when creating a signed tag or\ncommit, you can override the default selection with this variable.\nThis option is passed unchanged to gpg’s --local-user parameter,\nso you may specify a key using any method that gpg supports.\nIf gpg.format is set to ssh this can contain the path to either\nyour private ssh key or the public key when ssh-agent is used.\nAlternatively it can contain a public key prefixed with key:: directly (e.g.: \"key::ssh-rsa XXXXXX identifier\"). The private key\nneeds to be available via ssh-agent. If not set Git will call\ngpg.ssh.defaultKeyCommand (e.g.: \"ssh-add -L\") and try to use the\nfirst key available. For backward compatibility, a raw key which\nbegins with \"ssh-\", such as \"ssh-rsa XXXXXX identifier\", is treated\nas \"key::ssh-rsa XXXXXX identifier\", but this form is deprecated;\nuse the key:: form instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.tunnel"}, {"role": "assistant", "content": "Command used to set up a tunnel to the IMAP server through which\ncommands will be piped instead of using a direct network connection\nto the server. Required when imap.host is not set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <newbranch>"}, {"role": "assistant", "content": "The new name for an existing branch. The same restrictions as for\n<branchname> apply."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  HEAD"}, {"role": "assistant", "content": "names the commit on which you based the changes in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.output"}, {"role": "assistant", "content": "Control how ref update status is printed. Valid values are full and compact . Default value is full . See the\nOUTPUT section in git-fetch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^@ , e.g. HEAD^@"}, {"role": "assistant", "content": "A suffix ^ followed by an at sign is the same as listing\nall parents of <rev> (meaning, include anything reachable from\nits parents, but not the commit itself)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.branch"}, {"role": "assistant", "content": "A remote branch name for tracking updates in the upstream submodule.\nIf the option is not specified, it defaults to the remote HEAD .\nA special value of . is used to indicate that the name of the branch\nin the submodule should be the same name as the current branch in the\ncurrent repository.  See the --remote documentation in git-submodule for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.lineNumber"}, {"role": "assistant", "content": "If set to true, enable -n option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  umask  false"}, {"role": "assistant", "content": "Use permissions reported by umask (2). The default, when --shared is not\nspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  objectname"}, {"role": "assistant", "content": "The object name (aka SHA-1).\nFor a non-ambiguous abbreviation of the object name append :short .\nFor an abbreviation of the object name with desired length append :short=<length> , where the minimum length is MINIMUM_ABBREV. The\nlength may be exceeded to ensure unique object names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  lock"}, {"role": "assistant", "content": "If a worktree is on a portable device or network share which is not always\nmounted, lock it to prevent its administrative files from being pruned\nautomatically. This also prevents it from being moved or deleted.\nOptionally, specify a reason for the lock with --reason ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Managing branches A single Git repository can maintain multiple branches of\ndevelopment.  To create a new branch named experimental , use $ git branch experimental If you now run $ git branch you’ll get a list of all existing branches: experimental\n* master The experimental branch is the one you just created, and the master branch is a default branch that was created for you\nautomatically.  The asterisk marks the branch you are currently on;\ntype $ git switch experimental to switch to the experimental branch.  Now edit a file, commit the\nchange, and switch back to the master branch: (edit file)\n$ git commit -a\n$ git switch master Check that the change you made is no longer visible, since it was\nmade on the experimental branch and you’re back on the master branch. You can make a different change on the master branch: (edit file)\n$ git commit -a at this point the two branches have diverged, with different changes\nmade in each.  To merge the changes made in experimental into master , run $ git merge experimental If the changes don’t conflict, you’re done.  If there are conflicts,\nmarkers will be left in the problematic files showing the conflict; $ git diff will show this.  Once you’ve edited the files to resolve the\nconflicts, $ git commit -a will commit the result of the merge. Finally, $ gitk will show a nice graphical representation of the resulting history. At this point you could delete the experimental branch with $ git branch -d experimental This command ensures that the changes in the experimental branch are\nalready in the current branch. If you develop on a branch crazy-idea , then regret it, you can always\ndelete the branch with $ git branch -D crazy-idea Branches are cheap and easy, so this is a good way to try something\nout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <paths>"}, {"role": "assistant", "content": "Commits modifying the given <paths> are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bare"}, {"role": "assistant", "content": "If true this repository is assumed to be bare and has no\nworking directory associated with it.  If this is the case a\nnumber of commands that require a working directory will be\ndisabled, such as git-add or git-merge . This setting is automatically guessed by git-clone or git-init when the repository was created.  By default a\nrepository that ends in \"/.git\" is assumed to be not bare (bare =\nfalse), while all other repositories are assumed to be bare (bare\n= true)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --tags"}, {"role": "assistant", "content": "All refs under refs/tags are pushed, in\naddition to refspecs explicitly listed on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.cookieFile"}, {"role": "assistant", "content": "The pathname of a file containing previously stored cookie lines,\nwhich should be used\nin the Git http session, if they match the server. The file format\nof the file to read cookies from should be plain HTTP headers or\nthe Netscape/Mozilla cookie file format (see curl(1) ).\nNOTE that the file specified with http.cookieFile is used only as\ninput unless http.saveCookies is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] shallow-submodules"}, {"role": "assistant", "content": "All submodules which are cloned will be shallow with a depth of 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rename-threshold=<n>"}, {"role": "assistant", "content": "Deprecated synonym for find-renames=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.hideRefs"}, {"role": "assistant", "content": "This variable is the same as transfer.hideRefs , but applies\nonly to upload-pack (and so affects only fetches, not pushes).\nAn attempt to fetch a hidden ref by git fetch will fail.  See\nalso uploadpack.allowTipSHA1InWant ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.noRescan"}, {"role": "assistant", "content": "Don’t rescan the working directory for changes after the tool\nfinishes execution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<tool>.hideResolved"}, {"role": "assistant", "content": "Allows the user to override the global mergetool.hideResolved value\nfor a specific tool. See mergetool.hideResolved for the full\ndescription."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --porcelain"}, {"role": "assistant", "content": "Print the output to standard output in an easy-to-parse format for\nscripts. See section OUTPUT in git-fetch for details. This is incompatible with --recurse-submodules=[yes|on-demand] and takes\nprecedence over the fetch.output config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.remote"}, {"role": "assistant", "content": "When on branch <name>, it tells git fetch and git push which remote to fetch from or push to.  The remote to push to\nmay be overridden with remote.pushDefault (for all branches).\nThe remote to push to, for the current branch, may be further\noverridden by branch.<name>.pushRemote .  If no remote is\nconfigured, or if you are not on any branch and there is more than\none remote defined in the repository, it defaults to origin for\nfetching and remote.pushDefault for pushing.\nAdditionally, . (a period) is the current local repository\n(a dot-repository), see branch.<name>.merge 's final note below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "DESCRIPTION Creates a tree object using the current index. The name of the new\ntree object is printed to standard output. The index must be in a fully merged state. Conceptually, git write-tree sync()s the current index contents\ninto a set of tree files.\nIn order to have that match what is actually in your directory right\nnow, you need to have done a git update-index phase before you did the git write-tree ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --bisect-vars"}, {"role": "assistant", "content": "This calculates the same as --bisect , except that refs in refs/bisect/ are not used, and except that this outputs\ntext ready to be eval’ed by the shell. These lines will assign the\nname of the midpoint revision to the variable bisect_rev , and the\nexpected number of commits to be tested after bisect_rev is tested\nto bisect_nr , the expected number of commits to be tested if bisect_rev turns out to be good to bisect_good , the expected\nnumber of commits to be tested if bisect_rev turns out to be bad to bisect_bad , and the number of commits we are bisecting right now to bisect_all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo commits permanently"}, {"role": "assistant", "content": "$ git commit ...\n$ git reset --hard HEAD~3 (1) The last three commits ( HEAD , HEAD^ , and HEAD~2 ) were bad\nand you do not want to ever see them again.  Do not do this if\nyou have already given these commits to somebody else.  (See the\n\"RECOVERING FROM UPSTREAM REBASE\" section in git-rebase for the implications of doing so.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  [<path>…​]"}, {"role": "assistant", "content": "When paths are given, show them (note that this isn’t really raw\npathnames, but rather a list of patterns to match).  Otherwise\nimplicitly uses the root level of the tree as the sole path argument."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --filters"}, {"role": "assistant", "content": "Show the content as converted by the filters configured in\nthe current working tree for the given <path> (i.e. smudge filters,\nend-of-line conversion, etc). In this case, <object> has to be of\nthe form <tree-ish>:<path> , or :<path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  worktreepath"}, {"role": "assistant", "content": "The absolute path to the worktree in which the ref is checked\nout, if it is checked out in any linked worktree. Empty string\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "OUTPUT FORMAT When specifying the -v option the format used is: SHA-1 type size size-in-packfile offset-in-packfile for objects that are not deltified in the pack, and SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1 for objects that are deltified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --column[=<options>]  --no-column"}, {"role": "assistant", "content": "Display untracked files in columns. See configuration variable column.status for option syntax. --column and --no-column without options are equivalent to always and never respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.excludeDecoration"}, {"role": "assistant", "content": "Exclude the specified patterns from the log decorations. This is\nsimilar to the --decorate-refs-exclude command-line option, but\nthe config option can be overridden by the --decorate-refs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  literal"}, {"role": "assistant", "content": "Wildcards in the pattern such as * or ? are treated\nas literal characters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  move"}, {"role": "assistant", "content": "Move a worktree to a new location. Note that the main worktree or linked\nworktrees containing submodules cannot be moved with this command. (The git worktree repair command, however, can reestablish the connection\nwith linked worktrees if you move the main worktree manually.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ar"}, {"role": "assistant", "content": "author date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %B"}, {"role": "assistant", "content": "raw body (unwrapped subject and body)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev1>...<rev2>"}, {"role": "assistant", "content": "Include commits that are reachable from either <rev1> or\n<rev2> but exclude those that are reachable from both.  When\neither <rev1> or <rev2> is omitted, it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.tagOpt"}, {"role": "assistant", "content": "Setting this value to --no-tags disables automatic tag following when\nfetching from remote <name>. Setting it to --tags will fetch every\ntag from remote <name>, even if they are not reachable from remote\nbranch heads. Passing these flags directly to git-fetch can\noverride this setting. See options --tags and --no-tags of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  -s <format>  --suffix <format>  --no-suffix"}, {"role": "assistant", "content": "Specify an alternate suffix for the bugreport name, to create a file\nnamed git-bugreport-<formatted-suffix> . This should take the form of a\nstrftime(3) format string; the current local time will be used. --no-suffix disables the suffix and the file is just named git-bugreport without any disambiguation measure."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.highlightRecent"}, {"role": "assistant", "content": "Specify the line annotation color for git blame --color-by-age depending upon the age of the line. This setting should be set to a comma-separated list of color and\ndate settings, starting and ending with a color, the dates should be\nset from oldest to newest. The metadata will be colored with the\nspecified colors if the line was introduced before the given\ntimestamp, overwriting older timestamped colors. Instead of an absolute timestamp relative timestamps work as well,\ne.g. 2.weeks.ago is valid to address anything older than 2 weeks. It defaults to blue,12 month ago,white,1 month ago,red , which\ncolors everything older than one year blue, recent changes between\none month and one year old are kept white, and lines introduced\nwithin the last month are colored red."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial both provide\nintroductions to the underlying Git architecture. See gitworkflows for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --stat"}, {"role": "assistant", "content": "Show a diffstat of what changed upstream since the last rebase. The\ndiffstat is also controlled by the configuration option rebase.stat."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credentialStore.lockTimeoutMS"}, {"role": "assistant", "content": "The length of time, in milliseconds, for git-credential-store to retry\nwhen trying to lock the credentials file. A value of 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e., retry for\n1s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseObjectInfo"}, {"role": "assistant", "content": "When true , the object-info capability is advertised by\nservers. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  summary"}, {"role": "assistant", "content": "For a successfully pushed ref, the summary shows the old and new\nvalues of the ref in a form suitable for using as an argument to git log (this is <old>..<new> in most cases, and <old>...<new> for forced non-fast-forward updates). For a failed update, more details are given: rejected Git did not try to send the ref at all, typically because it\nis not a fast-forward and you did not force the update. remote rejected The remote end refused the update.  Usually caused by a hook\non the remote side, or because the remote repository has one\nof the following safety options in effect: receive.denyCurrentBranch (for pushes to the checked out\nbranch), receive.denyNonFastForwards (for forced\nnon-fast-forward updates), receive.denyDeletes or receive.denyDeleteCurrent .  See git-config . remote failure The remote end did not report the successful update of the ref,\nperhaps because of a temporary error on the remote side, a\nbreak in the network connection, or other transient error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "SPARSE CHECKOUT Note: The skip-worktree capabilities in git-update-index and read-tree predated the introduction of git-sparse-checkout .  Users are encouraged to use the sparse-checkout command in preference to these plumbing commands for\nsparse-checkout/skip-worktree related needs.  However, the information\nbelow might be useful to users trying to understand the pattern style\nused in non-cone mode of the sparse-checkout command. \"Sparse checkout\" allows populating the working directory sparsely.\nIt uses the skip-worktree bit (see git-update-index ) to\ntell Git whether a file in the working directory is worth looking at. git read-tree and other merge-based commands ( git merge , git\ncheckout …​) can help maintaining the skip-worktree bitmap and working\ndirectory update. $GIT_DIR/info/sparse-checkout is used to\ndefine the skip-worktree reference bitmap. When git read-tree needs\nto update the working directory, it resets the skip-worktree bit in the index\nbased on this file, which uses the same syntax as .gitignore files.\nIf an entry matches a pattern in this file, or the entry corresponds to\na file present in the working tree, then skip-worktree will not be\nset on that entry. Otherwise, skip-worktree will be set. Then it compares the new skip-worktree value with the previous one. If\nskip-worktree turns from set to unset, it will add the corresponding\nfile back. If it turns from unset to set, that file will be removed. While $GIT_DIR/info/sparse-checkout is usually used to specify what\nfiles are in, you can also specify what files are not in, using\nnegate patterns. For example, to remove the file unwanted : /*\n!unwanted Another tricky thing is fully repopulating the working directory when you\nno longer want sparse checkout. You cannot just disable \"sparse\ncheckout\" because skip-worktree bits are still in the index and your working\ndirectory is still sparsely populated. You should re-populate the working\ndirectory with the $GIT_DIR/info/sparse-checkout file content as\nfollows: /* Then you can disable sparse checkout. Sparse checkout support in git\nread-tree and similar commands is disabled by default. You need to\nturn core.sparseCheckout on in order to have sparse checkout\nsupport."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --orphan <new-branch>"}, {"role": "assistant", "content": "Create a new unborn branch, named <new-branch> , started from <start-point> and switch to it.  The first commit made on this\nnew branch will have no parents and it will be the root of a new\nhistory totally disconnected from all the other branches and\ncommits. The index and the working tree are adjusted as if you had previously run git checkout <start-point> .  This allows you to start a new history\nthat records a set of paths similar to <start-point> by easily running git commit -a to make the root commit. This can be useful when you want to publish the tree from a commit\nwithout exposing its full history. You might want to do this to publish\nan open source branch of a project whose current tree is \"clean\", but\nwhose full history contains proprietary or otherwise encumbered bits of\ncode. If you want to start a disconnected history that records a set of paths\nthat is totally different from the one of <start-point> , then you should\nclear the index and the working tree right after creating the orphan\nbranch by running git rm -rf . from the top level of the working tree.\nAfterwards you will be ready to prepare your new files, repopulating the\nworking tree, by copying them from elsewhere, extracting a tarball, etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --range-diff=<previous>"}, {"role": "assistant", "content": "As a reviewer aid, insert a range-diff (see git-range-diff )\ninto the cover letter, or as commentary of the lone patch of a\n1-patch series, showing the differences between the previous\nversion of the patch series and the series currently being formatted. previous can be a single revision naming the tip of the previous\nseries if it shares a common base with the series being formatted (for\nexample git format-patch --cover-letter --range-diff=feature/v1 -3\nfeature/v2 ), or a revision range if the two versions of the series are\ndisjoint (for example git format-patch --cover-letter\n--range-diff=feature/v1~3..feature/v1 -3 feature/v2 ). Note that diff options passed to the command affect how the primary\nproduct of format-patch is generated, and they are not passed to\nthe underlying range-diff machinery used to generate the cover-letter\nmaterial (this may change in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "BUGS Using --recurse-submodules can only fetch new commits in submodules that are\npresent locally e.g. in $GIT_DIR/modules/ . If the upstream adds a new\nsubmodule, that submodule cannot be fetched until it is cloned e.g. by git\nsubmodule update . This is expected to be fixed in a future Git version."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --discard-changes"}, {"role": "assistant", "content": "Proceed even if the index or the working tree differs from HEAD . Both the index and working tree are restored to match\nthe switching target. If --recurse-submodules is specified,\nsubmodule content is also restored to match the switching\ntarget. This is used to throw away local changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --is-ancestor"}, {"role": "assistant", "content": "Check if the first <commit> is an ancestor of the second <commit>,\nand exit with status 0 if true, or with status 1 if not.\nErrors are signaled by a non-zero status that is not 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.repeatedLines"}, {"role": "assistant", "content": "Use the specified color to colorize line annotations for git blame --color-lines , if they come from the same commit as the\npreceding line. Defaults to cyan."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %p"}, {"role": "assistant", "content": "abbreviated parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --[no-]keep-cr"}, {"role": "assistant", "content": "With --keep-cr , call git mailsplit (see git-mailsplit )\nwith the same option, to prevent it from stripping CR at the end of\nlines. am.keepcr configuration variable can be used to specify the\ndefault behaviour. --no-keep-cr is useful to override am.keepcr ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -r  --rebase-merges[=(rebase-cousins|no-rebase-cousins)]  --no-rebase-merges"}, {"role": "assistant", "content": "By default, a rebase will simply drop merge commits from the todo\nlist, and put the rebased commits into a single, linear branch.\nWith --rebase-merges , the rebase will instead try to preserve\nthe branching structure within the commits that are to be rebased,\nby recreating the merge commits. Any resolved merge conflicts or\nmanual amendments in these merge commits will have to be\nresolved/re-applied manually. --no-rebase-merges can be used to\ncountermand both the rebase.rebaseMerges config option and a previous --rebase-merges . When rebasing merges, there are two modes: rebase-cousins and no-rebase-cousins . If the mode is not specified, it defaults to no-rebase-cousins . In no-rebase-cousins mode, commits which do not have <upstream> as direct ancestor will keep their original branch point, i.e.\ncommits that would be excluded by git-log 's --ancestry-path option will keep their original ancestry by default. In rebase-cousins mode,\nsuch commits are instead rebased onto <upstream> (or <onto> , if\nspecified). It is currently only possible to recreate the merge commits using the ort merge strategy; different merge strategies can be used only via\nexplicit exec git merge -s <strategy> [...] commands. See also REBASING MERGES and INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <n>[:<n>]  --revision=<n>[:<n>]"}, {"role": "assistant", "content": "is supported, non-numeric args are not:\nHEAD, NEXT, BASE, PREV, etc …​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --simplify-merges"}, {"role": "assistant", "content": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -b <new-branch>"}, {"role": "assistant", "content": "Create a new branch named <new-branch> , start it at <start-point> , and check the resulting branch out;\nsee git-branch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -A  --after"}, {"role": "assistant", "content": "Don’t require an exact match if given an SVN revision; if there is\nnot an exact match return the closest match searching forward in the\nhistory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --line-porcelain"}, {"role": "assistant", "content": "Show the porcelain format, but output commit information for\neach line, not just the first time a commit is referenced.\nImplies --porcelain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "NOTES Git does not follow symbolic links when accessing a .gitattributes file in the working tree. This keeps behavior consistent when the file\nis accessed from the index or a tree versus from the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "DESCRIPTION Manage multiple working trees attached to the same repository. A git repository can support multiple working trees, allowing you to check\nout more than one branch at a time.  With git worktree add a new working\ntree is associated with the repository, along with additional metadata\nthat differentiates that working tree from others in the same repository.\nThe working tree, along with this metadata, is called a \"worktree\". This new worktree is called a \"linked worktree\" as opposed to the \"main\nworktree\" prepared by git-init or git-clone .\nA repository has one main worktree (if it’s not a bare repository) and\nzero or more linked worktrees. When you are done with a linked worktree,\nremove it with git worktree remove . In its simplest form, git worktree add <path> automatically creates a\nnew branch whose name is the final component of <path> , which is\nconvenient if you plan to work on a new topic. For instance, git\nworktree add ../hotfix creates new branch hotfix and checks it out at\npath ../hotfix . To instead work on an existing branch in a new worktree,\nuse git worktree add <path> <branch> . On the other hand, if you just\nplan to make some experimental changes or do testing without disturbing\nexisting development, it is often convenient to create a throwaway worktree not associated with any branch. For instance, git worktree add -d <path> creates a new worktree with a detached HEAD at the same commit as the current branch. If a working tree is deleted without using git worktree remove , then\nits associated administrative files, which reside in the repository\n(see \"DETAILS\" below), will eventually be removed automatically (see gc.worktreePruneExpire in git-config ), or you can run git worktree prune in the main or any linked worktree to clean up any\nstale administrative files. If the working tree for a linked worktree is stored on a portable device\nor network share which is not always mounted, you can prevent its\nadministrative files from being pruned by issuing the git worktree lock command, optionally specifying --reason to explain why the worktree is\nlocked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "SYNOPSIS git log [<options>] [<revision-range>] [[--] <path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  Easy case: The changes are literally the same."}, {"role": "assistant", "content": "This happens if the subsystem rebase was a simple rebase and\nhad no conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.aggressiveDepth"}, {"role": "assistant", "content": "The depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn’t in use. See the documentation for the --depth option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  <group>"}, {"role": "assistant", "content": "A name referring to a list of repositories as the value\nof remotes.<group> in the configuration file.\n(See git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --directory=<root>"}, {"role": "assistant", "content": "Prepend <root> to all filenames.  If a \"-p\" argument was also passed,\nit is applied before prepending the new root. For example, a patch that talks about updating a/git-gui.sh to b/git-gui.sh can be applied to the file in the working tree modules/git-gui/git-gui.sh by\nrunning git apply --directory=modules/git-gui ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  apply [--index] [-q|--quiet] [<stash>]"}, {"role": "assistant", "content": "Like pop , but do not remove the state from the stash list. Unlike pop , <stash> may be any commit that looks like a commit created by stash push or stash create ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-signature"}, {"role": "assistant", "content": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -L<start>,<end>:<file>  -L:<funcname>:<file>"}, {"role": "assistant", "content": "Trace the evolution of the line range given by <start>,<end> ,\nor by the function name regex <funcname> , within the <file> . You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments, and <start> and <end> (or <funcname> ) must exist in the starting revision.\nYou can specify this option more than once. Implies --patch .\nPatch output can be suppressed using --no-patch , but other diff formats\n(namely --raw , --numstat , --shortstat , --dirstat , --summary , --name-only , --name-status , --check ) are not currently implemented. <start> and <end> can take one of these forms: number If <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1). /regex/ This form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/ , it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start> . +offset or -offset This is only valid for <end> and will specify a number\nof lines before or after the line given by <start> . If :<funcname> is given in place of <start> and <end> , it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname> , up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %s"}, {"role": "assistant", "content": "subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to string value \"lf\""}, {"role": "assistant", "content": "This setting uses the same line endings in the working directory as\nin the index when the file is checked out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --quiet"}, {"role": "assistant", "content": "Disable all output of the program. Implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.keepAlive"}, {"role": "assistant", "content": "After receiving the pack from the client, receive-pack may\nproduce no output (if --quiet was specified) while processing\nthe pack, causing some networks to drop the TCP connection.\nWith this option set, if receive-pack does not transmit\nany data in this phase for receive.keepAlive seconds, it will\nsend a short keepalive packet.  The default is 5 seconds; set\nto 0 to disable keepalives entirely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --mixed"}, {"role": "assistant", "content": "Resets the index but not the working tree (i.e., the changed files\nare preserved but not marked for commit) and reports what has not\nbeen updated. This is the default action. If -N is specified, removed paths are marked as intent-to-add (see git-add )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch-command  --batch-command=<format>"}, {"role": "assistant", "content": "Enter a command mode that reads commands and arguments from stdin. May\nonly be combined with --buffer , --textconv , --use-mailmap or --filters . When used with --textconv or --filters , the input lines must\nspecify the path, separated by whitespace. See the section BATCH OUTPUT below for details. When used with --use-mailmap , for commit and tag objects, the contents command shows the identities replaced using the\nmailmap mechanism, while the info command shows the size\nof the object as if it actually recorded the replacement\nidentities. --batch-command recognizes the following commands: contents <object> Print object contents for object reference <object> . This corresponds to\nthe output of --batch . info <object> Print object info for object reference <object> . This corresponds to the\noutput of --batch-check . flush Used with --buffer to execute all preceding commands that were issued\nsince the beginning or since the last flush was issued. When --buffer is used, no output will come until a flush is issued. When --buffer is not used, commands are flushed each time without issuing flush ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -m  --merge"}, {"role": "assistant", "content": "When restoring files on the working tree from the index,\nrecreate the conflicted merge in the unmerged paths.\nThis option cannot be used when checking out paths from a\ntree-ish (i.e. with the --source option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -e  --edit"}, {"role": "assistant", "content": "The message taken from file with -F and command line with -m are usually used as the tag message unmodified.\nThis option lets you further edit the message taken from these sources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  suggestDetachingHead"}, {"role": "assistant", "content": "Shown when git-switch refuses to detach HEAD\nwithout the explicit --detach option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  directory"}, {"role": "assistant", "content": "The list you get with \"ls\" :-)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  sequence.editor"}, {"role": "assistant", "content": "Text editor used by git rebase -i for editing the rebase instruction file.\nThe value is meant to be interpreted by the shell when it is used.\nIt can be overridden by the GIT_SEQUENCE_EDITOR environment variable.\nWhen not configured, the default commit message editor is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %m"}, {"role": "assistant", "content": "left ( < ), right ( > ) or boundary ( - ) mark"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  reachable"}, {"role": "assistant", "content": "All of the ancestors of a given commit are said to be\n\"reachable\" from that commit. More\ngenerally, one object is reachable from\nanother if we can reach the one from the other by a chain that follows tags to whatever they tag, commits to their parents or trees, and trees to the trees or blobs that they contain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useSparse"}, {"role": "assistant", "content": "When true, git will default to using the --sparse option in git pack-objects when the --revs option is present. This\nalgorithm only walks trees that appear in paths that introduce new\nobjects. This can have significant performance benefits when\ncomputing a pack to send a small change. However, it is possible\nthat extra objects are added to the pack-file if the included\ncommits contain certain types of direct renames. Default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --encode-email-headers  --no-encode-email-headers"}, {"role": "assistant", "content": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047), instead of outputting the\nheaders verbatim. Defaults to the value of the format.encodeEmailHeaders configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --ours  --theirs"}, {"role": "assistant", "content": "When checking out paths from the index, check out stage #2\n( ours ) or #3 ( theirs ) for unmerged paths. Note that during git rebase and git pull --rebase , ours and theirs may appear swapped; --ours gives the version from the\nbranch the changes are rebased onto, while --theirs gives the\nversion from the branch that holds your work that is being rebased. This is because rebase is used in a workflow that treats the\nhistory at the remote as the shared canonical one, and treats the\nwork done on the branch you are rebasing as the third-party work to\nbe integrated, and you are temporarily assuming the role of the\nkeeper of the canonical history during the rebase.  As the keeper of\nthe canonical history, you need to view the history from the remote\nas ours (i.e. \"our shared canonical history\"), while what you did\non your side branch as theirs (i.e. \"one contributor’s work on top\nof it\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "NAME gitsubmodules - Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --show-index-version"}, {"role": "assistant", "content": "Report the index format version used by the on-disk index file.\nSee --index-version above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "SYNOPSIS git show-ref [--head] [-d | --dereference]\n\t     [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags]\n\t     [--heads] [--] [<pattern>…​] git show-ref --verify [-q | --quiet] [-d | --dereference]\n\t     [-s | --hash[=<n>]] [--abbrev[=<n>]]\n\t     [--] [<ref>…​] git show-ref --exclude-existing[=<pattern>] git show-ref --exists <ref>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…​]"}, {"role": "assistant", "content": "compares the trees named by the two arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  $GIT_DIR/svn/**/.rev_map.*"}, {"role": "assistant", "content": "Mapping between Subversion revision numbers and Git commit\nnames.  In a repository where the noMetadata option is not set,\nthis can be rebuilt from the git-svn-id: lines that are at the\nend of every commit (see the svn.noMetadata section above for\ndetails). git svn fetch and git svn rebase automatically update the rev_map\nif it is missing or not up to date. git svn reset automatically\nrewinds it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "DESCRIPTION Incorporates changes from the named commits (since the time their\nhistories diverged from the current branch) into the current\nbranch.  This command is used by git pull to incorporate changes\nfrom another repository and can be used by hand to merge changes\nfrom one branch into another. Assume the following history exists and the current branch is master : A---B---C topic\n\t /\n    D---E---F---G master Then git merge topic will replay the changes made on the topic branch since it diverged from master (i.e., E ) until\nits current commit ( C ) on top of master , and record the result\nin a new commit along with the names of the two parent commits and\na log message from the user describing the changes. Before the operation, ORIG_HEAD is set to the tip of the current branch ( C ). A---B---C topic\n\t /         \\\n    D---E---F---G---H master A merge stops if there’s a conflict that cannot be resolved\nautomatically or if --no-commit was provided when initiating the\nmerge. At that point you can run git merge --abort or git merge\n--continue . git merge --abort will abort the merge process and try to reconstruct\nthe pre-merge state. However, if there were uncommitted changes when the\nmerge started (and especially if those changes were further modified\nafter the merge was started), git merge --abort will in some cases be\nunable to reconstruct the original (pre-merge) changes. Therefore: Warning : Running git merge with non-trivial uncommitted changes is\ndiscouraged: while possible, it may leave you in a state that is hard to\nback out of in the case of a conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  apply.ignoreWhitespace"}, {"role": "assistant", "content": "When set to change , tells git apply to ignore changes in\nwhitespace, in the same way as the --ignore-space-change option.\nWhen set to one of: no, none, never, false, it tells git apply to\nrespect all whitespace differences.\nSee git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.<url>.*"}, {"role": "assistant", "content": "Any of the credential.* options above can be applied selectively to\nsome credentials. For example, \"credential.https://example.com.username\"\nwould set the default username only for https connections to\nexample.com. See gitcredentials for details on how URLs are\nmatched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ai"}, {"role": "assistant", "content": "author date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --edit-description"}, {"role": "assistant", "content": "Open an editor and edit the text to explain what the branch is\nfor, to be used by various other commands (e.g. format-patch , request-pull , and merge (if enabled)). Multi-line explanations\nmay be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  resolve"}, {"role": "assistant", "content": "This can only resolve two heads (i.e. the current branch\nand another branch you pulled from) using a 3-way merge\nalgorithm.  It tries to carefully detect criss-cross\nmerge ambiguities.  It does not handle renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --object-only"}, {"role": "assistant", "content": "List only names of the objects, one per line. Cannot be combined\nwith --name-only or --name-status .\nThis is equivalent to specifying --format='%(objectname)' , but\nfor both this option and that exact format the command takes a\nhand-optimized codepath instead of going through the generic\nformatting mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ch"}, {"role": "assistant", "content": "committer date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  :[<n>:]<path> , e.g. :0:README , :README"}, {"role": "assistant", "content": "A colon, optionally followed by a stage number (0 to 3) and a\ncolon, followed by a path, names a blob object in the\nindex at the given path. A missing stage number (and the colon\nthat follows it) names a stage 0 entry. During a merge, stage\n1 is the common ancestor, stage 2 is the target branch’s version\n(typically the current branch), and stage 3 is the version from\nthe branch which is being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --active-branches=<n>"}, {"role": "assistant", "content": "Maximum number of branches to maintain active at once.\nSee “Memory Utilization” below for details.  Default is 5."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --unpacked"}, {"role": "assistant", "content": "Only useful with --objects ; print the object IDs that are not\nin packs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --user-path  --user-path=<path>"}, {"role": "assistant", "content": "Allow ~user notation to be used in requests.  When\nspecified with no parameter, a request to\ngit://host/~alice/foo is taken as a request to access foo repository in the home directory of user alice .\nIf --user-path=<path> is specified, the same request is\ntaken as a request to access <path>/foo repository in\nthe home directory of user alice ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --contains"}, {"role": "assistant", "content": "Instead of finding the tag that predates the commit, find\nthe tag that comes after the commit, and thus contains it.\nAutomatically implies --tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.packObjectsHook"}, {"role": "assistant", "content": "If this option is set, when upload-pack would run git pack-objects to create a packfile for a client, it will\nrun this shell command instead.  The pack-objects command and\narguments it would have run (including the git pack-objects at the beginning) are appended to the shell command. The stdin\nand stdout of the hook are treated as if pack-objects itself\nwas run. I.e., upload-pack will feed input intended for pack-objects to the hook, and expects a completed packfile on\nstdout. Note that this configuration variable is only respected when it is specified\nin protected configuration (see SCOPES ). This is a safety measure\nagainst fetching from untrusted repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.extraHeader"}, {"role": "assistant", "content": "Pass an additional HTTP header when communicating with a server.  If\nmore than one such entry exists, all of them are added as extra\nheaders.  To allow overriding the settings inherited from the system\nconfig, an empty value will reset the extra headers to the empty list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption"}, {"role": "assistant", "content": "NAME git-count-objects - Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]suppress-from"}, {"role": "assistant", "content": "If this is set, do not add the From: address to the cc: list.\nDefault is the value of sendemail.suppressFrom configuration\nvalue; if that is unspecified, default to --no-suppress-from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -c  --copy"}, {"role": "assistant", "content": "Copy a branch, together with its config and reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.template"}, {"role": "assistant", "content": "Specify the pathname of a file to use as the template for\nnew commit messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --empty=(drop|keep|stop)"}, {"role": "assistant", "content": "How to handle commits that are not empty to start and are not\nclean cherry-picks of any upstream commit, but which become\nempty after rebasing (because they contain a subset of already\nupstream changes): drop The commit will be dropped. This is the default behavior. keep The commit will be kept. This option is implied when --exec is\nspecified unless -i / --interactive is also specified. stop ask The rebase will halt when the commit is applied, allowing you to\nchoose whether to drop it, edit files more, or just commit the empty\nchanges. This option is implied when -i / --interactive is\nspecified. ask is a deprecated synonym of stop . Note that commits which start empty are kept (unless --no-keep-empty is specified), and commits which are clean cherry-picks (as determined\nby git log --cherry-mark ... ) are detected and dropped as a\npreliminary step (unless --reapply-cherry-picks or --keep-base is\npassed). See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --"}, {"role": "assistant", "content": "Signals the end of options; the rest of the parameters\nare <pathspec> limiters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -f  --force"}, {"role": "assistant", "content": "When git fetch is used with <src>:<dst> refspec, it may\nrefuse to update the local branch as discussed\nin the <refspec> part below.\nThis option overrides that check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "DEFINING MACRO ATTRIBUTES Custom macro attributes can be defined only in top-level gitattributes\nfiles ( $GIT_DIR/info/attributes , the .gitattributes file at the\ntop level of the working tree, or the global or system-wide\ngitattributes files), not in .gitattributes files in working tree\nsubdirectories.  The built-in macro attribute \"binary\" is equivalent\nto: [attr]binary -diff -merge -text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-receive-pack instead of git-fsck . See the fsck.<msg-id> documentation for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %an"}, {"role": "assistant", "content": "author name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -i  --ignore-case"}, {"role": "assistant", "content": "Ignore case differences between the patterns and the\nfiles."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --cover-from-description=<mode>"}, {"role": "assistant", "content": "Controls which parts of the cover letter will be automatically\npopulated using the branch’s description. If <mode> is message or default , the cover letter subject will be\npopulated with placeholder text. The body of the cover letter will be\npopulated with the branch’s description. This is the default mode when\nno configuration nor command line option is specified. If <mode> is subject , the first paragraph of the branch description will\npopulate the cover letter subject. The remainder of the description will\npopulate the body of the cover letter. If <mode> is auto , if the first paragraph of the branch description\nis greater than 100 bytes, then the mode will be message , otherwise subject will be used. If <mode> is none , both the cover letter subject and body will be\npopulated with placeholder text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %f"}, {"role": "assistant", "content": "sanitized subject line, suitable for a filename"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  path"}, {"role": "assistant", "content": "The pathname of the object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --type <type>"}, {"role": "assistant", "content": "git config will ensure that any input or output is valid under the given\ntype constraint(s), and will canonicalize outgoing values in <type> 's\ncanonical form. Valid <type> 's include: bool : canonicalize values as either \"true\" or \"false\". int : canonicalize values as simple decimal numbers. An optional suffix of k , m , or g will cause the value to be multiplied by 1024, 1048576, or\n1073741824 upon input. bool-or-int : canonicalize according to either bool or int , as described\nabove. path : canonicalize by expanding a leading ~ to the value of $HOME and ~user to the home directory for the specified user. This specifier has no\neffect when setting the value (but you can use git config section.variable\n~/ from the command line to let your shell do the expansion.) expiry-date : canonicalize by converting from a fixed or relative date-string\nto a timestamp. This specifier has no effect when setting the value. color : When getting a value, canonicalize by converting to an ANSI color\nescape sequence. When setting a value, a sanity-check is performed to ensure\nthat the given value is canonicalize-able as an ANSI color, but it is written\nas-is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "DISCUSSION The commit author name is taken from the \"From: \" line of the\nmessage, and commit author date is taken from the \"Date: \" line\nof the message.  The \"Subject: \" line is used as the title of\nthe commit, after stripping common prefix \"[PATCH <anything>]\".\nThe \"Subject: \" line is supposed to concisely describe what the\ncommit is about in one line of text. \"From: \", \"Date: \", and \"Subject: \" lines starting the body override the\nrespective commit author name and title values taken from the headers. The commit message is formed by the title taken from the\n\"Subject: \", a blank line and the body of the message up to\nwhere the patch begins.  Excess whitespace at the end of each\nline is automatically stripped. The patch is expected to be inline, directly following the\nmessage.  Any line that is of the form: three-dashes and end-of-line, or a line that begins with \"diff -\", or a line that begins with \"Index: \" is taken as the beginning of a patch, and the commit log message\nis terminated before the first occurrence of such a line. When initially invoking git am , you give it the names of the mailboxes\nto process.  Upon seeing the first patch that does not apply, it\naborts in the middle.  You can recover from this in one of two ways: skip the current patch by re-running the command with the --skip option. hand resolve the conflict in the working directory, and update\nthe index file to bring it into a state that the patch should\nhave produced.  Then run the command with the --continue option. The command refuses to process new mailboxes until the current\noperation is finished, so if you decide to start over from scratch,\nrun git am --abort before running the command with mailbox\nnames. Before any patches are applied, ORIG_HEAD is set to the tip of the\ncurrent branch.  This is useful if you have problems with multiple\ncommits, like running git am on the wrong branch or an error in the\ncommits that is more easily fixed by changing the mailbox (e.g.\nerrors in the \"From:\" lines)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAInfo"}, {"role": "assistant", "content": "File containing the certificates to verify the peer with when\nfetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-notes-by-default"}, {"role": "assistant", "content": "Show the default notes unless options for displaying specific\nnotes are given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial to get started, then see giteveryday for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -x"}, {"role": "assistant", "content": "Don’t use the standard ignore rules (see gitignore ), but\nstill use the ignore rules given with -e options from the command\nline.  This allows removing all untracked\nfiles, including build products.  This can be used (possibly in\nconjunction with git restore or git reset ) to create a pristine\nworking directory to test a clean build."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.negotiate"}, {"role": "assistant", "content": "If set to \"true\", attempt to reduce the size of the packfile\nsent by rounds of negotiation in which the client and the\nserver attempt to find commits in common. If \"false\", Git will\nrely solely on the server’s ref advertisement to find commits\nin common."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  untracked"}, {"role": "assistant", "content": "Only untracked files in submodules will be ignored.\nCommitted differences and modifications to tracked files will show\nup."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you have in your\nworking tree relative to the named <commit>.  You can\nuse HEAD to compare it with the latest commit, or a\nbranch name to compare with the tip of a different\nbranch. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --merge-base A is equivalent to git diff $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  hasconfig:remote.*.url:"}, {"role": "assistant", "content": "The data that follows this keyword is taken to\nbe a pattern with standard globbing wildcards and two\nadditional ones, **/ and /** , that can match multiple\ncomponents. The first time this keyword is seen, the rest of\nthe config files will be scanned for remote URLs (without\napplying any values). If there exists at least one remote URL\nthat matches this pattern, the include condition is met. Files included by this option (directly or indirectly) are not allowed\nto contain remote URLs. Note that unlike other includeIf conditions, resolving this condition\nrelies on information that is not yet known at the point of reading the\ncondition. A typical use case is this option being present as a\nsystem-level or global-level config, and the remote URL being in a\nlocal-level config; hence the need to scan ahead when resolving this\ncondition. In order to avoid the chicken-and-egg problem in which\npotentially-included files can affect whether such files are potentially\nincluded, Git breaks the cycle by prohibiting these files from affecting\nthe resolution of these conditions (thus, prohibiting them from\ndeclaring remote URLs). As for the naming of this keyword, it is for forwards compatibility with\na naming scheme that supports more variable-based include conditions,\nbut currently Git only supports the exact keyword described above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object name"}, {"role": "assistant", "content": "The unique identifier of an object .  The\nobject name is usually represented by a 40 character\nhexadecimal string.  Also colloquially called SHA-1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -n  --[no-]verify"}, {"role": "assistant", "content": "By default, the pre-commit and commit-msg hooks are run.\nWhen any of --no-verify or -n is given, these are bypassed.\nSee also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -p  --patch"}, {"role": "assistant", "content": "This option is only valid for push and save commands. Interactively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the “Interactive Mode” section of git-add to learn how to operate the --patch mode. The --patch option implies --keep-index .  You can use --no-keep-index to override this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --until=<datestring>  --before=<datestring>"}, {"role": "assistant", "content": "Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  modifying existing content"}, {"role": "assistant", "content": "One can also modify context lines by staging them for removal (by\nconverting \" \" to \"-\") and adding a \"+\" line with the new content.\nSimilarly, one can modify \"+\" lines for existing additions or\nmodifications. In all cases, the new modification will appear reverted\nin the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --since=\"2 weeks ago\" -- gitk"}, {"role": "assistant", "content": "Show the changes during the last two weeks to the file gitk .\nThe -- is necessary to avoid confusion with the branch named gitk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --basic-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.maxFiles"}, {"role": "assistant", "content": "Integer.  When writing trace files to a target directory, do not\nwrite additional traces if doing so would exceed this many files. Instead,\nwrite a sentinel file that will block further tracing to this\ndirectory. Defaults to 0, which disables this check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing with arbitrary commits"}, {"role": "assistant", "content": "$ git diff test (1) $ git diff HEAD -- ./test (2) $ git diff HEAD^ HEAD (3) Instead of using the tip of the current branch, compare with the\ntip of \"test\" branch. Instead of comparing with the tip of \"test\" branch, compare with\nthe tip of the current branch, but limit the comparison to the\nfile \"test\". Compare the version before the last commit and the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  first-parent, 1"}, {"role": "assistant", "content": "Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --color[=<when>]"}, {"role": "assistant", "content": "Show colored matches.\nThe value must be always (the default), never, or auto."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "SYNOPSIS git diff [<options>] [<commit>] [--] [<path>…​] git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​] git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​] git diff [<options>] <commit>…​<commit> [--] [<path>…​] git diff [<options>] <blob> <blob> git diff [<options>] --no-index [--] <path> <path>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --left-right"}, {"role": "assistant", "content": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree"}, {"role": "assistant", "content": "DESCRIPTION Cleans the working tree by recursively removing files that are not\nunder version control, starting from the current directory. Normally, only files unknown to Git are removed, but if the -x option is specified, ignored files are also removed. This can, for\nexample, be useful to remove all build products. If any optional <pathspec>... arguments are given, only those paths\nthat match the pathspec are affected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index  --missing-ok"}, {"role": "assistant", "content": "Normally git write-tree ensures that the objects referenced by the\ndirectory exist in the object database.  This option disables this\ncheck."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --no-track"}, {"role": "assistant", "content": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --sparse"}, {"role": "assistant", "content": "Employ a sparse-checkout, with only files in the toplevel\ndirectory initially being present.  The git-sparse-checkout command can be used to grow the\nworking directory as needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  info"}, {"role": "assistant", "content": "Shows information about a file or directory similar to what\n‘svn info’ provides.  Does not currently support a -r/--revision\nargument.  Use the --url option to output only the value of the URL: field."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dense"}, {"role": "assistant", "content": "Commits that are walked are included if they are not TREESAME\nto any parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --create-reflog"}, {"role": "assistant", "content": "Create the branch’s reflog.  This activates recording of\nall changes made to the branch ref, enabling use of date\nbased sha1 expressions such as \"<branchname>@{yesterday}\".\nNote that in non-bare repositories, reflogs are usually\nenabled by default by the core.logAllRefUpdates config option.\nThe negated form --no-create-reflog only overrides an earlier --create-reflog , but currently does not negate the setting of core.logAllRefUpdates ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  emptyName"}, {"role": "assistant", "content": "(WARN) A path contains an empty name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --sort=<key>"}, {"role": "assistant", "content": "Sort based on the key given. Prefix - to sort in descending\norder of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. The keys supported are the same as those in git\nfor-each-ref . Sort order defaults to the value configured for the branch.sort variable if it exists, or to sorting based on the\nfull refname (including refs/... prefix). This lists\ndetached HEAD (if present) first, then local branches and\nfinally remote-tracking branches. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "EXAMPLES When a rebase required merge conflicts to be resolved, compare the changes\nintroduced by the rebase directly afterwards using: $ git range-diff @{u} @{1} @ A typical output of git range-diff would look like this: -:  ------- > 1:  0ddba11 Prepare for the inevitable!\n1:  c0debee = 2:  cab005e Add a helpful message at the start\n2:  f00dbal ! 3:  decafe1 Describe a bug\n    @@ -1,3 +1,3 @@\n     Author: A U Thor <author@example.com>\n\n    -TODO: Describe a bug\n    +Describe a bug\n    @@ -324,5 +324,6\n      This is expected.\n\n    -+What is unexpected is that it will also crash.\n    ++Unexpectedly, it also crashes. This is a bug, and the jury is\n    ++still out there how to fix it best. See ticket #314 for details.\n\n      Contact\n3:  bedead < -:  ------- TO-UNDO In this example, there are 3 old and 3 new commits, where the developer\nremoved the 3rd, added a new one before the first two, and modified the\ncommit message of the 2nd commit as well as its diff. When the output goes to a terminal, it is color-coded by default, just\nlike regular git diff 's output. In addition, the first line (adding a\ncommit) is green, the last line (deleting a commit) is red, the second\nline (with a perfect match) is yellow like the commit header of git\nshow 's output, and the third line colors the old commit red, the new\none green and the rest like git show 's commit header. A naive color-coded diff of diffs is actually a bit hard to read,\nthough, as it colors the entire lines red or green. The line that added\n\"What is unexpected\" in the old commit, for example, is completely red,\neven if the intent of the old commit was to add something. To help with that, range uses the --dual-color mode by default. In\nthis mode, the diff of diffs will retain the original diff colors, and\nprefix the lines with -/+ markers that have their background red or\ngreen, to make it more obvious that they describe how the diff itself\nchanged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  show"}, {"role": "assistant", "content": "Show the notes for a given object (defaults to HEAD)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  from"}, {"role": "assistant", "content": "The name of the remote ref being fetched from, minus its refs/<type>/ prefix. In the case of deletion, the name of\nthe remote ref is \"(none)\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --sparse"}, {"role": "assistant", "content": "All commits in the simplified history are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  off, none"}, {"role": "assistant", "content": "Disable output of diffs for merge commits. Useful to override\nimplied value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.loose-objects.auto"}, {"role": "assistant", "content": "This integer config option controls how often the loose-objects task\nshould be run as part of git maintenance run --auto . If zero, then\nthe loose-objects task will not run with the --auto option. A\nnegative value will force the task to run every time. Otherwise, a\npositive value implies the command should run when the number of\nloose objects is at least the value of maintenance.loose-objects.auto .\nThe default value is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --object-names"}, {"role": "assistant", "content": "Only useful with --objects ; print the names of the object IDs\nthat are found. This is the default behavior. Note that the\n\"name\" of each object is ambiguous, and mostly intended as a\nhint for packing objects. In particular: no distinction is made between\nthe names of tags, trees, and blobs; path names may be modified\nto remove newlines; and if an object would appear multiple times\nwith different names, only one name is shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "REFS When using multiple worktrees, some refs are shared between all worktrees,\nbut others are specific to an individual worktree. One example is HEAD ,\nwhich is different for each worktree. This section is about the sharing\nrules and how to access refs of one worktree from another. In general, all pseudo refs are per-worktree and all refs starting with refs/ are shared. Pseudo refs are ones like HEAD which are directly\nunder $GIT_DIR instead of inside $GIT_DIR/refs . There are exceptions,\nhowever: refs inside refs/bisect , refs/worktree and refs/rewritten are\nnot shared. Refs that are per-worktree can still be accessed from another worktree via\ntwo special paths, main-worktree and worktrees . The former gives\naccess to per-worktree refs of the main worktree, while the latter to all\nlinked worktrees. For example, main-worktree/HEAD or main-worktree/refs/bisect/good resolve to the same value as the main worktree’s HEAD and refs/bisect/good respectively. Similarly, worktrees/foo/HEAD or worktrees/bar/refs/bisect/bad are the same as $GIT_COMMON_DIR/worktrees/foo/HEAD and $GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad . To access refs, it’s best not to look inside $GIT_DIR directly. Instead\nuse commands such as git-rev-parse or git-update-ref which will handle refs correctly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  start"}, {"role": "assistant", "content": "Start a transaction. In contrast to a non-transactional session, a\ntransaction will automatically abort if the session ends without an\nexplicit commit. This command may create a new empty transaction when\nthe current one has been committed or aborted already."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  safe.directory"}, {"role": "assistant", "content": "These config entries specify Git-tracked directories that are\nconsidered safe even if they are owned by someone other than the\ncurrent user. By default, Git will refuse to even parse a Git\nconfig of a repository owned by someone else, let alone run its\nhooks, and this config setting allows users to specify exceptions,\ne.g. for intentionally shared repositories (see the --shared option in git-init ). This is a multi-valued setting, i.e. you can add more than one directory\nvia git config --add . To reset the list of safe directories (e.g. to\noverride any such directories specified in the system config), add a safe.directory entry with an empty value. This config setting is only respected in protected configuration (see SCOPES ). This prevents untrusted repositories from tampering with this\nvalue. The value of this setting is interpolated, i.e. ~/<path> expands to a\npath relative to the home directory and %(prefix)/<path> expands to a\npath relative to Git’s (runtime) prefix. To completely opt-out of this security check, set safe.directory to the\nstring * . This will allow all repositories to be treated as if their\ndirectory was listed in the safe.directory list. If safe.directory=* is set in system config and you want to re-enable this protection, then\ninitialize your list with an empty value before listing the repositories\nthat you deem safe. As explained, Git only allows you to access repositories owned by\nyourself, i.e. the user who is running Git, by default.  When Git\nis running as root in a non Windows platform that provides sudo,\nhowever, git checks the SUDO_UID environment variable that sudo creates\nand will allow access to the uid recorded as its value in addition to\nthe id from root .\nThis is to make it easy to perform a common sequence during installation\n\"make && sudo make install\".  A git process running under sudo runs as root but the sudo command exports the environment variable to record\nwhich id the original user has.\nIf that is not what you would prefer and want git to only trust\nrepositories that are owned by root instead, then you can remove\nthe SUDO_UID variable from root’s environment before invoking git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-decorate  --decorate[=short|full|auto|no]"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The option --decorate is short-hand for --decorate=short .\nDefault to configuration value of log.decorate if configured,\notherwise, auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --ignore-refs=<regex>"}, {"role": "assistant", "content": "Ignore refs for branches or tags matching the Perl regular\nexpression. A \"negative look-ahead assertion\" like ^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$ can be used to allow only certain refs. config key: svn-remote.<name>.ignore-refs If the ignore-refs configuration key is set, and the command-line\noption is also given, both regular expressions will be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]"}, {"role": "assistant", "content": "Show the changes recorded in the stash entry as a diff between the\nstashed contents and the commit back when the stash entry was first\ncreated.\nBy default, the command shows the diffstat, but it will accept any\nformat known to git diff (e.g., git stash show -p stash@{1} to view the second most recent entry in patch form).\nIf no <diff-option> is provided, the default behavior will be given\nby the stash.showStat , and stash.showPatch config variables. You\ncan also use stash.showIncludeUntracked to set whether --include-untracked is enabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  flag"}, {"role": "assistant", "content": "A single character indicating the status of the ref: (space) for a successfully pushed fast-forward; + for a successful forced update; - for a successfully deleted ref; * for a successfully pushed new ref; ! for a ref that was rejected or failed to push; and = for a ref that was up to date and did not need pushing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -s"}, {"role": "assistant", "content": "Suppress the author name and timestamp from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --git-format"}, {"role": "assistant", "content": "Produce output in the same format as git blame , but with\nSVN revision numbers instead of Git commit hashes. In this mode,\nchanges that haven’t been committed to SVN (including local\nworking-copy edits) are shown as revision 0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  Default mode"}, {"role": "assistant", "content": "Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents. This results in: .-A---N---O\n\t /     /   /\n\tI---------D Note how the rule to only follow the TREESAME parent, if one is\navailable, removed B from consideration entirely. C was\nconsidered via N , but is TREESAME.  Root commits are compared to an\nempty tree, so I is !TREESAME. Parent/child relations are only visible with --parents , but that does\nnot affect the commits selected in default mode, so we have shown the\nparent lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %C(…​)"}, {"role": "assistant", "content": "color specification, as described under Values in the\n\"CONFIGURATION FILE\" section of git-config .  By\ndefault, colors are shown only when enabled for log output\n(by color.diff , color.ui , or --color , and respecting\nthe auto settings of the former if we are going to a\nterminal). %C(auto,...) is accepted as a historical\nsynonym for the default (e.g., %C(auto,red) ). Specifying %C(always,...) will show the colors even when color is\nnot otherwise enabled (though consider just using --color=always to enable color for the whole output,\nincluding this format and anything else git might color). auto alone (i.e. %C(auto) ) will turn on auto coloring\non the next placeholders until the color is switched\nagain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files  -s  --stat-only"}, {"role": "assistant", "content": "Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose , the list of objects is also shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  propset"}, {"role": "assistant", "content": "Sets the Subversion property given as the first argument, to the\nvalue given as the second argument for the file given as the\nthird argument. Example: git svn propset svn:keywords \"FreeBSD=%H\" devel/py-tipper/Makefile This will set the property svn:keywords to FreeBSD=%H for the file devel/py-tipper/Makefile ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --[no-]verify"}, {"role": "assistant", "content": "By default, the pre-merge and commit-msg hooks are run.\nWhen --no-verify is given, these are bypassed.\nSee also githooks .\nOnly useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git’s password prompt for the SSL certificate.  Otherwise\nOpenSSL will prompt the user, possibly many times, if the\ncertificate or private key is encrypted.  Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -C[<num>]"}, {"role": "assistant", "content": "In addition to -M , detect lines moved or copied from other\nfiles that were modified in the same commit.  This is\nuseful when you reorganize your program and move code\naround across files.  When this option is given twice,\nthe command additionally looks for copies from other\nfiles in the commit that creates the file. When this\noption is given three times, the command additionally\nlooks for copies from other files in any commit. <num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nbetween files for it to associate those lines with the parent\ncommit. And the default value is 40. If there are more than one -C options given, the <num> argument of the last -C will\ntake effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  eolattr"}, {"role": "assistant", "content": "The <eolattr> (see the description of the --eol option)\nthat applies to the path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -t  --track [direct|inherit]"}, {"role": "assistant", "content": "When creating a new branch, set up \"upstream\" configuration. -c is implied. See --track in git-branch for\ndetails. If no -c option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use hack as\nthe local branch when branching off of origin/hack (or remotes/origin/hack , or even refs/remotes/origin/hack ).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with -c in such a case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob>"}, {"role": "assistant", "content": "This form is to view the differences between the raw\ncontents of two blob objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --placeholder-filename=<filename>"}, {"role": "assistant", "content": "Set the name of placeholder files created by --preserve-empty-dirs.\nDefault: \".gitignore\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -R  --reverse"}, {"role": "assistant", "content": "Apply the patch in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxyAuthMethod"}, {"role": "assistant", "content": "Set the method with which to authenticate against the HTTP proxy. This\nonly takes effect if the configured proxy string contains a user name part\n(i.e. is of the form user@host or user@host:port ). This can be\noverridden on a per-remote basis; see remote.<name>.proxyAuthMethod .\nBoth can be overridden by the GIT_HTTP_PROXY_AUTHMETHOD environment\nvariable.  Possible values are: anyauth - Automatically pick a suitable authentication method. It is\nassumed that the proxy answers an unauthenticated request with a 407\nstatus code and one or more Proxy-authenticate headers with supported\nauthentication methods. This is the default. basic - HTTP Basic authentication digest - HTTP Digest authentication; this prevents the password from being\ntransmitted to the proxy in clear text negotiate - GSS-Negotiate authentication (compare the --negotiate option\nof curl(1) ) ntlm - NTLM authentication (compare the --ntlm option of curl(1) )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date=<format>"}, {"role": "assistant", "content": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty . log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g., iso-local ), the user’s local time zone is used instead. --date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for --date=relative . --date=local is an alias for --date=default-local . --date=iso (or --date=iso8601 ) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are: a space instead of the T date/time delimiter a space between time and time zone no colon between hours and minutes of the time zone --date=iso-strict (or --date=iso8601-strict ) shows timestamps in strict\nISO 8601 format. --date=rfc (or --date=rfc2822 ) shows timestamps in RFC 2822\nformat, often found in email messages. --date=short shows only the date, but not the time, in YYYY-MM-DD format. --date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\") ).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value. --date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted. --date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw , this is always in UTC and therefore -local has no effect. --date=format:... feeds the format ... to your system strftime ,\nexcept for %s, %z, and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local , the correct syntax is --date=format-local:... . --date=default is the default format, and is based on ctime(3)\noutput.  It shows a single line with three-letter day of the week,\nthree-letter month, day-of-month, hour-minute-seconds in \"HH:MM:SS\"\nformat, followed by 4-digit year, plus timezone information, unless\nthe local time zone is used, e.g. Thu Jan 1 00:00:00 1970 +0000 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --rebase"}, {"role": "assistant", "content": "This option is only valid for the update command.\nRebase the current branch onto the commit recorded in the\nsuperproject. If this option is given, the submodule’s HEAD will not\nbe detached. If a merge failure prevents this process, you will have\nto resolve these failures with git-rebase .\nIf the key submodule.$name.update is set to rebase , this option is\nimplicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug  --no-checkout"}, {"role": "assistant", "content": "Do not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update the reference named BISECT_HEAD to make\nit point to the commit that should be tested. This option may be useful when the test you would perform in each step\ndoes not require a checked out tree. If the repository is bare, --no-checkout is assumed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitor"}, {"role": "assistant", "content": "If set to true, enable the built-in file system monitor\ndaemon for this working directory ( git-fsmonitor--daemon ). Like hook-based file system monitors, the built-in file system monitor\ncan speed up Git commands that need to refresh the Git index\n(e.g. git status ) in a working directory with many files.  The\nbuilt-in monitor eliminates the need to install and maintain an\nexternal third-party tool. The built-in file system monitor is currently available only on a\nlimited set of supported platforms.  Currently, this includes Windows\nand MacOS. Otherwise, this variable contains the pathname of the \"fsmonitor\"\nhook command. This hook command is used to identify all files that may have changed\nsince the requested date/time. This information is used to speed up\ngit by avoiding unnecessary scanning of files that have not changed. See the \"fsmonitor-watchman\" section of githooks . Note that if you concurrently use multiple versions of Git, such\nas one version on the command line and another version in an IDE\ntool, that the definition of core.fsmonitor was extended to\nallow boolean values in addition to hook pathnames.  Git versions\n2.35.1 and prior will not understand the boolean values and will\nconsider the \"true\" or \"false\" values as hook pathnames to be\ninvoked.  Git versions 2.26 thru 2.35.1 default to hook protocol\nV2 and will fall back to no fsmonitor (full scan).  Git versions\nprior to 2.26 default to hook protocol V1 and will silently\nassume there were no changes to report (no scan), so status\ncommands may report incomplete results.  For this reason, it is\nbest to upgrade all of your Git versions before using the built-in\nfile system monitor."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.showBranch"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-show-branch . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.pruneExpire"}, {"role": "assistant", "content": "When git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using\ncruft packs via gc.cruftPacks or --cruft ).  Override the\ngrace period with this config variable.  The value \"now\" may be\nused to disable this grace period and always prune unreachable\nobjects immediately, or \"never\" may be used to suppress pruning.\nThis feature helps prevent corruption when git gc runs\nconcurrently with another process writing to the repository; see\nthe \"NOTES\" section of git-gc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "DESCRIPTION Reads given idx file for packed Git archive created with the git pack-objects command and verifies the idx file and the\ncorresponding pack file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTimezone"}, {"role": "assistant", "content": "(ERROR) Found an invalid time zone in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addEmptyPathspec"}, {"role": "assistant", "content": "Shown when the user runs git add without providing\nthe pathspec parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --do-walk"}, {"role": "assistant", "content": "Overrides a previous --no-walk ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to a value"}, {"role": "assistant", "content": "The path has the attribute with specified string value;\nthis is specified by listing the name of the attribute\nfollowed by an equal sign = and its value in the\nattribute list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --git-dir"}, {"role": "assistant", "content": "Show $GIT_DIR if defined. Otherwise show the path to\nthe .git directory. The path shown, when relative, is\nrelative to the current working directory. If $GIT_DIR is not defined and the current directory\nis not detected to lie in a Git repository or work tree\nprint a message to stderr and exit with nonzero status."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "FILE SYSTEM MONITOR This feature is intended to speed up git operations for repos that have\nlarge working directories. It enables git to work together with a file system monitor (see git-fsmonitor--daemon and the\n\"fsmonitor-watchman\" section of githooks ) that can\ninform it as to what files have been modified. This enables git to avoid\nhaving to lstat() every file to find modified files. When used in conjunction with the untracked cache, it can further improve\nperformance by avoiding the cost of scanning the entire working directory\nlooking for new files. If you want to enable (or disable) this feature, it is easier to use\nthe core.fsmonitor configuration variable (see git-config ) than using the --fsmonitor option to git\nupdate-index in each repository, especially if you want to do so\nacross all repositories you use, because you can set the configuration\nvariable in your $HOME/.gitconfig just once and have it affect all\nrepositories you touch. When the core.fsmonitor configuration variable is changed, the\nfile system monitor is added to or removed from the index the next time\na command reads the index. When --[no-]fsmonitor are used, the file\nsystem monitor is immediately added to or removed from the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.prune"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the --prune option was given on the command line.  See also remote.<name>.prune and the PRUNING section of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --log-size"}, {"role": "assistant", "content": "Include a line “log size <number>” in the output for each commit,\nwhere <number> is the length of that commit’s message in bytes.\nIntended to speed up tools that read log messages from git log output by allowing them to allocate space in advance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  Why do I have a file that’s always modified?"}, {"role": "assistant", "content": "Internally, Git always stores file names as sequences of bytes and doesn’t\nperform any encoding or case folding.  However, Windows and macOS by default\nboth perform case folding on file names.  As a result, it’s possible to end up\nwith multiple files or directories whose names differ only in case.  Git can\nhandle this just fine, but the file system can store only one of these files,\nso when Git reads the other file to see its contents, it looks modified. It’s best to remove one of the files such that you only have one file.  You can\ndo this with commands like the following (assuming two files AFile.txt and afile.txt ) on an otherwise clean working tree: $ git rm --cached AFile.txt\n$ git commit -m 'Remove files conflicting in case'\n$ git checkout . This avoids touching the disk, but removes the additional file.  Your project\nmay prefer to adopt a naming convention, such as all-lowercase names, to avoid\nthis problem from occurring again; such a convention can be checked using a pre-receive hook or as part of a continuous integration (CI) system. It is also possible for perpetually modified files to occur on any platform if a\nsmudge or clean filter is in use on your system but a file was previously\ncommitted without running the smudge or clean filter.  To fix this, run the\nfollowing on an otherwise clean working tree: $ git add --renormalize ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree"}, {"role": "assistant", "content": "SYNOPSIS git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]\n\t      [-o <file> | --output=<file>] [--worktree-attributes]\n\t      [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>\n\t      [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.modulePath"}, {"role": "assistant", "content": "The default module path for git-instaweb to use\ninstead of /usr/lib/apache2/modules.  Only used if httpd\nis Apache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -d  --dir-diff"}, {"role": "assistant", "content": "Copy the modified files to a temporary location and perform\na directory diff on them. This mode never prompts before\nlaunching the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  raw"}, {"role": "assistant", "content": "This is the Git native format and is <time> SP <offutc> .\nIt is also fast-import’s default format, if --date-format was\nnot specified. The time of the event is specified by <time> as the number of\nseconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is\nwritten as an ASCII decimal integer. The local offset is specified by <offutc> as a positive or negative\noffset from UTC.  For example EST (which is 5 hours behind UTC)\nwould be expressed in <tz> by “-0500” while UTC is “+0000”.\nThe local offset does not affect <time> ; it is used only as an\nadvisement to help formatting routines display the timestamp. If the local offset is not available in the source material, use\n“+0000”, or the most common local offset.  For example many\norganizations have a CVS repository which has only ever been accessed\nby users who are located in the same location and time zone.  In this\ncase a reasonable offset from UTC could be assumed. Unlike the rfc2822 format, this format is very strict.  Any\nvariation in formatting will cause fast-import to reject the value,\nand some sanity checks on the numeric values may also be performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --dirty[=<mark>]  --broken[=<mark>]"}, {"role": "assistant", "content": "Describe the state of the working tree.  When the working\ntree matches HEAD, the output is the same as \"git describe\nHEAD\".  If the working tree has local modification \"-dirty\"\nis appended to it.  If a repository is corrupt and Git\ncannot determine if there is local modification, Git will\nerror out, unless ‘--broken’ is given, which appends\nthe suffix \"-broken\" instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  clone"}, {"role": "assistant", "content": "Runs init and fetch .  It will automatically create a\ndirectory based on the basename of the URL passed to it;\nor if a second argument is passed; it will create a directory\nand work within that.  It accepts all arguments that the init and fetch commands accept; with the exception of --fetch-all and --parent .  After a repository is cloned,\nthe fetch command will be able to update revisions without\naffecting the working tree; and the rebase command will be\nable to update the working tree with the latest changes. --preserve-empty-dirs Create a placeholder file in the local Git repository for each\nempty directory fetched from Subversion.  This includes directories\nthat become empty by removing all entries in the Subversion\nrepository (but not the directory itself).  The placeholder files\nare also tracked and removed when no longer necessary. --placeholder-filename=<filename> Set the name of placeholder files created by --preserve-empty-dirs.\nDefault: \".gitignore\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  exclude=<pattern>"}, {"role": "assistant", "content": "Do not consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --[no-]relative-marks"}, {"role": "assistant", "content": "After specifying --relative-marks the paths specified\nwith --import-marks= and --export-marks= are relative\nto an internal directory in the current repository.\nIn git-fast-import this means that the paths are relative\nto the .git/info/fast-import directory. However, other\nimporters may use a different location. Relative and non-relative marks may be combined by interweaving\n--(no-)-relative-marks with the --(import|export)-marks= options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -u <upstream>  --set-upstream-to=<upstream>"}, {"role": "assistant", "content": "Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  ^<rev> (caret) Notation"}, {"role": "assistant", "content": "To exclude commits reachable from a commit, a prefix ^ notation is used.  E.g. ^r1 r2 means commits reachable\nfrom r2 but exclude the ones reachable from r1 (i.e. r1 and\nits ancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "NAME git-commit - Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -m <msg>  --message=<msg>"}, {"role": "assistant", "content": "Use the given note message (instead of prompting).\nIf multiple -m options are given, their values\nare concatenated as separate paragraphs.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out.\nIf you wish to keep them verbatim, use --no-stripspace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --bool  --int  --bool-or-int  --path  --expiry-date"}, {"role": "assistant", "content": "Historical options for selecting a type specifier. Prefer instead --type (see above)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --absolute-git-dir"}, {"role": "assistant", "content": "Like --git-dir , but its output is always the canonicalized\nabsolute path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  [--] <path>…​"}, {"role": "assistant", "content": "Consider only commits that are enough to explain how the files\nthat match the specified paths came to be. Paths may need to be prefixed with -- to separate them from\noptions or the revision range, when confusion arises."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.needsFile"}, {"role": "assistant", "content": "Run the tool only if a diff is selected in the GUI. It guarantees\nthat FILENAME is not empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "AGGRESSIVE When the --aggressive option is supplied, git-repack will\nbe invoked with the -f flag, which in turn will pass --no-reuse-delta to git-pack-objects . This will throw\naway any existing deltas and re-compute them, at the expense of\nspending much more time on the repacking. The effects of this are mostly persistent, e.g. when packs and loose\nobjects are coalesced into one another pack the existing deltas in\nthat pack might get re-used, but there are also various cases where we\nmight pick a sub-optimal delta from a newer pack instead. Furthermore, supplying --aggressive will tweak the --depth and --window options passed to git-repack . See the gc.aggressiveDepth and gc.aggressiveWindow settings below. By\nusing a larger window size we’re more likely to find more optimal\ndeltas. It’s probably not worth it to use this option on a given repository\nwithout running tailored performance benchmarks on it. It takes a lot\nmore time, and the resulting space/delta optimization may or may not\nbe worth it. Not using this at all is the right trade-off for most\nusers and their repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.recurseSubmodules"}, {"role": "assistant", "content": "May be \"check\", \"on-demand\", \"only\", or \"no\", with the same behavior\nas that of \"push --recurse-submodules\".\nIf not set, no is used by default, unless submodule.recurse is\nset (in which case a true value means on-demand )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --abort"}, {"role": "assistant", "content": "Abort/reset an in-progress git notes merge , i.e. a notes merge\nwith conflicts. This simply removes all files related to the\nnotes merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingNameBeforeEmail"}, {"role": "assistant", "content": "(ERROR) Missing name before an email in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --combined-all-paths"}, {"role": "assistant", "content": "This flag causes combined diffs (used for merge commits) to\nlist the name of the file from all parents.  It thus only has\neffect when --diff-merges=[dense-]combined is in use, and\nis likely only useful if filename changes are detected (i.e.\nwhen either rename or copy detection have been requested)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  <tree-ish>"}, {"role": "assistant", "content": "The tree or commit to produce an archive for."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>"}, {"role": "assistant", "content": "Include commits that are reachable from <rev> (i.e. <rev> and its\nancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --date <format>"}, {"role": "assistant", "content": "Specifies the format used to output dates. If --date is not\nprovided, the value of the blame.date config variable is\nused. If the blame.date config variable is also not set, the\niso format is used. For supported values, see the discussion\nof the --date option at git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  exclude"}, {"role": "assistant", "content": "After a path matches any non-exclude pathspec, it will be run\nthrough all exclude pathspecs (magic signature: ! or its\nsynonym ^ ). If it matches, the path is ignored.  When there\nis no non-exclude pathspec, the exclusion is applied to the\nresult set as if invoked without any pathspec."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesLarge"}, {"role": "assistant", "content": "(ERROR) The .gitattributes blob is too large."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -A  --all  --no-ignore-removal"}, {"role": "assistant", "content": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree. If no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.coverFromDescription"}, {"role": "assistant", "content": "The default mode for format-patch to determine which parts of\nthe cover letter will be populated using the branch’s\ndescription. See the --cover-from-description option in git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing with arbitrary commits"}, {"role": "assistant", "content": "$ git diff test (1) $ git diff HEAD -- ./test (2) $ git diff HEAD^ HEAD (3) Instead of using the tip of the current branch, compare with the\ntip of \"test\" branch. Instead of comparing with the tip of \"test\" branch, compare with\nthe tip of the current branch, but limit the comparison to the\nfile \"test\". Compare the version before the last commit and the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  match"}, {"role": "assistant", "content": "matching text (same as setting matchContext and matchSelected )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %b"}, {"role": "assistant", "content": "body"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --username=<user>"}, {"role": "assistant", "content": "For transports that SVN handles authentication for (http,\nhttps, and plain svn), specify the username.  For other\ntransports (e.g. svn+ssh:// ), you must include the username in\nthe URL, e.g. svn+ssh://foo@svn.bar.com/project"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "NAME git-revert - Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --allow-unrelated-histories"}, {"role": "assistant", "content": "By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added. Only useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  status [--cached] [--recursive] [--] [<path>…​]"}, {"role": "assistant", "content": "Show the status of the submodules. This will print the SHA-1 of the\ncurrently checked out commit for each submodule, along with the\nsubmodule path and the output of git describe for the\nSHA-1. Each SHA-1 will possibly be prefixed with - if the submodule is\nnot initialized, + if the currently checked out submodule commit\ndoes not match the SHA-1 found in the index of the containing\nrepository and U if the submodule has merge conflicts. If --cached is specified, this command will instead print the SHA-1\nrecorded in the superproject for each submodule. If --recursive is specified, this command will recurse into nested\nsubmodules, and show their status as well. If you are only interested in changes of the currently initialized\nsubmodules with respect to the commit recorded in the index or the HEAD, git-status and git-diff will provide that information\ntoo (and can also report changes to a submodule’s work tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -l  --list"}, {"role": "assistant", "content": "List all variables set in config file, along with their values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  @"}, {"role": "assistant", "content": "@ alone is a shortcut for HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output"}, {"role": "assistant", "content": "DESCRIPTION Summarizes git log output in a format suitable for inclusion\nin release announcements. Each commit will be grouped by author and title. Additionally, \"[PATCH]\" will be stripped from the commit description. If no revisions are passed on the command line and either standard input\nis not a terminal or there is no current branch, git shortlog will\noutput a summary of the log read from standard input, without\nreference to the current repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line). This setting overrides merge.ff when pulling."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.lineNumber"}, {"role": "assistant", "content": "If set to true, enable -n option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  Git archive"}, {"role": "assistant", "content": "Synonym for repository (for arch people)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -k  --killed"}, {"role": "assistant", "content": "Show untracked files on the filesystem that need to be removed\ndue to file/directory conflicts for tracked files to be able to\nbe written to the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  On an inefficient filesystem with core.ignorestat set"}, {"role": "assistant", "content": "$ git update-index --really-refresh (1) $ git update-index --no-assume-unchanged foo.c (2) $ git diff --name-only (3) $ edit foo.c\n$ git diff --name-only (4) M foo.c\n$ git update-index foo.c (5) $ git diff --name-only (6) $ edit foo.c\n$ git diff --name-only (7) $ git update-index --no-assume-unchanged foo.c (8) $ git diff --name-only (9) M foo.c forces lstat(2) to set \"assume unchanged\" bits for paths that match index. mark the path to be edited. this does lstat(2) and finds index matches the path. this does lstat(2) and finds index does not match the path. registering the new version to index sets \"assume unchanged\" bit. and it is assumed unchanged. even after you edit it. you can tell about the change after the fact. now it checks with lstat(2) and finds it has been changed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -f  --force"}, {"role": "assistant", "content": "Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected. This flag disables these checks, and can cause the remote repository\nto lose commits; use it with care. Note that --force applies to all the refs that are pushed, hence\nusing it with push.default set to matching or with multiple push\ndestinations configured with remote.*.push may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart).  To force a push to only\none branch, use a + in front of the refspec to push (e.g git push\norigin +master to force a push to the master branch). See the <refspec>... section above for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Reading from the active commit"}, {"role": "assistant", "content": "This form can only be used in the middle of a commit .\nThe path names a directory entry within fast-import’s\nactive commit.  The path must be quoted in this case. 'ls' SP <path> LF"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.verbose"}, {"role": "assistant", "content": "A boolean or int to specify the level of verbosity with git commit .\nSee git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.rerereUnresolved"}, {"role": "assistant", "content": "Records of conflicted merge you have not resolved are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 15 days.  See git-rerere ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --ignore-skip-worktree-bits"}, {"role": "assistant", "content": "Check out all files, including those with the skip-worktree bit\nset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  repository"}, {"role": "assistant", "content": "A collection of refs together with an object database containing all objects\nwhich are reachable from the refs, possibly\naccompanied by meta data from one or more porcelains . A\nrepository can share an object database with other repositories\nvia alternates mechanism ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  date-format  export-marks  relative-marks  no-relative-marks  force"}, {"role": "assistant", "content": "Act as though the corresponding command-line option with\na leading -- was passed on the command line\n(see OPTIONS, above)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  checkout.guess"}, {"role": "assistant", "content": "Provides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch and git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --system"}, {"role": "assistant", "content": "For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config . For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --all  --branches"}, {"role": "assistant", "content": "Push all branches (i.e. refs under refs/heads/ ); cannot be\nused with other <refspec>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.safecrlf"}, {"role": "assistant", "content": "If true, makes Git check if converting CRLF is reversible when\nend-of-line conversion is active.  Git will verify if a command\nmodifies a file in the work tree either directly or indirectly.\nFor example, committing a file followed by checking out the\nsame file should yield the original file in the work tree.  If\nthis is not the case for the current setting of core.autocrlf , Git will reject the file.  The variable can\nbe set to \"warn\", in which case Git will only warn about an\nirreversible conversion but continue the operation. CRLF conversion bears a slight chance of corrupting data.\nWhen it is enabled, Git will convert CRLF to LF during commit and LF to\nCRLF during checkout.  A file that contains a mixture of LF and\nCRLF before the commit cannot be recreated by Git.  For text\nfiles this is the right thing to do: it corrects line endings\nsuch that we have only LF line endings in the repository.\nBut for binary files that are accidentally classified as text the\nconversion can corrupt data. If you recognize such corruption early you can easily fix it by\nsetting the conversion type explicitly in .gitattributes.  Right\nafter committing you still have the original file in your work\ntree and this file is not yet corrupted.  You can explicitly tell\nGit that this file is binary and Git will handle the file\nappropriately. Unfortunately, the desired effect of cleaning up text files with\nmixed line endings and the undesired effect of corrupting binary\nfiles cannot be distinguished.  In both cases CRLFs are removed\nin an irreversible way.  For text files this is the right thing\nto do because CRLFs are line endings, while for binary files\nconverting CRLFs corrupts data. Note, this safety check does not mean that a checkout will generate a\nfile identical to the original file for a different setting of core.eol and core.autocrlf , but only for the current one.  For\nexample, a text file with LF would be accepted with core.eol=lf and could later be checked out with core.eol=crlf , in which case the\nresulting file would contain CRLF , although the original file\ncontained LF .  However, in both work trees the line endings would be\nconsistent, that is either all LF or all CRLF , but never mixed.  A\nfile with mixed line endings would be reported by the core.safecrlf mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %>( <N> ) , %>|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively,\nbut padding spaces on the left"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.readReverseIndex"}, {"role": "assistant", "content": "When true, git will read any .rev file(s) that may be available\n(see: gitformat-pack ). When false, the reverse index\nwill be generated from scratch and stored in memory. Defaults to\ntrue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -u  --unmerged"}, {"role": "assistant", "content": "Show information about unmerged files in the output, but do\nnot show any other tracked files (forces --stage, overrides\n--cached)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  proplist"}, {"role": "assistant", "content": "Lists the properties stored in the Subversion repository about a\ngiven file or directory.  Use -r/--revision to refer to a specific\nSubversion revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.status"}, {"role": "assistant", "content": "Specify whether to output untracked files in git status in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --sort=<key>"}, {"role": "assistant", "content": "A field name to sort on.  Prefix - to sort in\ndescending order of the value.  When unspecified, refname is used.  You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.trustExitCode"}, {"role": "assistant", "content": "Exit difftool if the invoked diff tool returns a non-zero exit status. See the --trust-exit-code option in git-difftool for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxy"}, {"role": "assistant", "content": "Override the HTTP proxy, normally configured using the http_proxy , https_proxy , and all_proxy environment variables (see curl(1) ). In\naddition to the syntax understood by curl, it is possible to specify a\nproxy string with a user name but no password, in which case git will\nattempt to acquire one in the same way it does for other credentials. See gitcredentials for more information. The syntax thus is [protocol://][user[:password]@]proxyhost[:port] . This can be overridden\non a per-remote basis; see remote.<name>.proxy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "CAVEATS Note that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack. Note also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy’s size or delta base\nwill be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %w([<w>[,<i1>[,<i2>]]])"}, {"role": "assistant", "content": "switch line wrapping, like the -w option of git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "NAME git-worktree - Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)"}, {"role": "assistant", "content": "Specify the transfer encoding to be used to send the message over SMTP.\n7bit will fail upon encountering a non-ASCII message.  quoted-printable\ncan be useful when the repository contains files that contain carriage\nreturns, but makes the raw patch email file (as saved from a MUA) much\nharder to inspect manually.  base64 is even more fool proof, but also\neven more opaque.  auto will use 8bit when possible, and quoted-printable\notherwise. Default is the value of the sendemail.transferEncoding configuration\nvalue; if that is unspecified, default to auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --listen=<host-or-ipaddr>"}, {"role": "assistant", "content": "Listen on a specific IP address or hostname.  IP addresses can\nbe either an IPv4 address or an IPv6 address if supported.  If IPv6\nis not supported, then --listen=<hostname> is also not supported and\n--listen must be given an IPv4 address.\nCan be given more than once.\nIncompatible with --inetd option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --info-only"}, {"role": "assistant", "content": "Do not create objects in the object database for all\n<file> arguments that follow this flag; just insert\ntheir object IDs into the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Various ways to check your working tree"}, {"role": "assistant", "content": "$ git diff (1) $ git diff --cached (2) $ git diff HEAD (3) $ git diff AUTO_MERGE (4) Changes in the working tree not yet staged for the next commit. Changes between the index and your last commit; what you\nwould be committing if you run git commit without -a option. Changes in the working tree since your last commit; what you\nwould be committing if you run git commit -a Changes in the working tree you’ve made to resolve textual\nconflicts so far."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  theirs"}, {"role": "assistant", "content": "This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "SUBMODULES Only submodules using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will be removed from the work\ntree, as their repository lives inside the .git directory of the\nsuperproject. If a submodule (or one of those nested inside it)\nstill uses a .git directory, git rm will move the submodules\ngit directory into the superprojects git directory to protect\nthe submodule’s history. If it exists the submodule.<name> section\nin the gitmodules file will also be removed and that file\nwill be staged (unless --cached or -n are used). A submodule is considered up to date when the HEAD is the same as\nrecorded in the index, no tracked files are modified and no untracked\nfiles that aren’t ignored are present in the submodule’s work tree.\nIgnored files are deemed expendable and won’t stop a submodule’s work\ntree from being removed. If you only want to remove the local checkout of a submodule from your\nwork tree without committing the removal, use git-submodule deinit instead. Also see gitsubmodules for details on submodule removal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.default"}, {"role": "assistant", "content": "Defines the action git push should take if no refspec is\ngiven (whether from the command-line, config, or elsewhere).\nDifferent values are well-suited for\nspecific workflows; for instance, in a purely central workflow\n(i.e. the fetch source is equal to the push destination), upstream is probably what you want.  Possible values are: nothing - do not push anything (error out) unless a refspec is\ngiven. This is primarily meant for people who want to\navoid mistakes by always being explicit. current - push the current branch to update a branch with the same\nname on the receiving end.  Works in both central and non-central\nworkflows. upstream - push the current branch back to the branch whose\nchanges are usually integrated into the current branch (which is\ncalled @{upstream} ).  This mode only makes sense if you are\npushing to the same repository you would normally pull from\n(i.e. central workflow). tracking - This is a deprecated synonym for upstream . simple - push the current branch with the same name on the remote. If you are working on a centralized workflow (pushing to the same repository you\npull from, which is typically origin ), then you need to configure an upstream\nbranch with the same name. This mode is the default since Git 2.0, and is the safest option suited for\nbeginners. matching - push all branches having the same name on both ends.\nThis makes the repository you are pushing to remember the set of\nbranches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push\nto will have these two branches, and your local maint and master will be pushed there). To use this mode effectively, you have to make sure all the\nbranches you would push out are ready to be pushed out before\nrunning git push , as the whole point of this mode is to allow you\nto push all of the branches in one go.  If you usually finish work\non only one branch and push out the result, while other branches are\nunfinished, this mode is not for you.  Also this mode is not\nsuitable for pushing into a shared central repository, as other\npeople may add new branches there, or update the tip of existing\nbranches outside your control. This used to be the default, but not since Git 2.0 ( simple is the\nnew default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -m  --merge"}, {"role": "assistant", "content": "Using merging strategies to rebase (default). Note that a rebase merge works by replaying each commit from the working\nbranch on top of the <upstream> branch.  Because of this, when a merge\nconflict happens, the side reported as ours is the so-far rebased\nseries, starting with <upstream> , and theirs is the working branch.\nIn other words, the sides are swapped. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --color[=<when>]"}, {"role": "assistant", "content": "Color branches to highlight current, local, and\nremote-tracking branches.\nThe value must be always (the default), never, or auto."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showSignature"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --show-signature ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -z"}, {"role": "assistant", "content": "Terminate entries with NUL, instead of LF.  This implies\nthe --porcelain=v1 output format if no other format is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  set-branches"}, {"role": "assistant", "content": "Changes the list of branches tracked by the named remote.\nThis can be used to track a subset of the available remote branches\nafter the initial setup for a remote. The named branches will be interpreted as if specified with the -t option on the git remote add command line. With --add , instead of replacing the list of currently tracked\nbranches, adds to that list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged.  Defaults to false, and\ntrue is a synonym for 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.version"}, {"role": "assistant", "content": "Use the specified HTTP protocol version when communicating with a server.\nIf you want to force the default. The available and default version depend\non libcurl. Currently the possible values of\nthis option are: HTTP/2 HTTP/1.1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --user-interfaces"}, {"role": "assistant", "content": "Print a list of the repository, command and file interfaces\ndocumentation on the standard output. In-repository file interfaces such as .git/info/exclude are\ndocumented here (see gitrepository-layout ), as well as\nin-tree configuration such as .mailmap (see gitmailmap ). This section of the documentation also covers general or widespread\nuser-interface conventions (e.g. gitcli ), and\npseudo-configuration such as the file-based .git/hooks/* interface\ndescribed in githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  octopus"}, {"role": "assistant", "content": "To merge more than two branches ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-by-decoration"}, {"role": "assistant", "content": "Commits that are referred by some branch or tag are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --root"}, {"role": "assistant", "content": "Report root nodes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -a  --text"}, {"role": "assistant", "content": "Process binary files as if they were text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.propagateBranches"}, {"role": "assistant", "content": "[EXPERIMENTAL] A boolean that enables branching support when\nusing --recurse-submodules or submodule.recurse=true .\nEnabling this will allow certain commands to accept --recurse-submodules and certain commands that already accept --recurse-submodules will now consider branches.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --skip=<number>"}, {"role": "assistant", "content": "Skip number commits before starting to show the commit output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  restart  --restart"}, {"role": "assistant", "content": "Restart the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away"}, {"role": "assistant", "content": "SYNOPSIS git stash list [<log-options>] git stash show [-u | --include-untracked | --only-untracked] [<diff-options>] [<stash>] git stash drop [-q | --quiet] [<stash>] git stash pop [--index] [-q | --quiet] [<stash>] git stash apply [--index] [-q | --quiet] [<stash>] git stash branch <branchname> [<stash>] git stash [push [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]\n\t     [-u | --include-untracked] [-a | --all] [(-m | --message) <message>]\n\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t     [--] [<pathspec>…​]] git stash save [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]\n\t     [-u | --include-untracked] [-a | --all] [<message>] git stash clear git stash create [<message>] git stash store [(-m | --message) <message>] [-q | --quiet] <commit>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpBatchSize"}, {"role": "assistant", "content": "Number of messages to be sent per connection, after that a relogin\nwill happen.  If the value is 0 or undefined, send all messages in\none connection.\nSee also the --batch-size option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -w[<width>[,<indent1>[,<indent2>]]]"}, {"role": "assistant", "content": "Linewrap the output by wrapping each line at width .  The first\nline of each entry is indented by indent1 spaces, and the second\nand subsequent lines are indented by indent2 spaces. width , indent1 , and indent2 default to 76, 6 and 9 respectively. If width is 0 (zero) then indent the lines of the output without wrapping\nthem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --summary"}, {"role": "assistant", "content": "Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames, and mode changes.\nTurns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.multiEdit"}, {"role": "assistant", "content": "If true (default), a single editor instance will be spawned to edit\nfiles you have to edit (patches when --annotate is used, and the\nsummary when --compose is used). If false, files will be edited one\nafter the other, spawning a new editor each time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive -o latest.tar --prefix=build/ --add-file=configure --prefix= HEAD"}, {"role": "assistant", "content": "Creates a tar archive that contains the contents of the latest\ncommit on the current branch with no prefix and the untracked\nfile configure with the prefix build/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  git grep -e '#define' --and \\( -e MAX_PATH -e PATH_MAX \\)"}, {"role": "assistant", "content": "Looks for a line that has #define and either MAX_PATH or PATH_MAX ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesBlob"}, {"role": "assistant", "content": "(ERROR) A non-blob found at .gitattributes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --reverse"}, {"role": "assistant", "content": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with --walk-reflogs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GK"}, {"role": "assistant", "content": "show the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -3  --3way"}, {"role": "assistant", "content": "Attempt 3-way merge if the patch records the identity of blobs it is supposed\nto apply to and we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option unless the --cached option is used, and is incompatible with the --reject option.\nWhen used with the --cached option, any conflicts are left at higher stages\nin the cache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Limiting the diff output"}, {"role": "assistant", "content": "$ git diff --diff-filter=MRC (1) $ git diff --name-status (2) $ git diff arch/i386 include/asm-i386 (3) Show only modification, rename, and copy, but not addition\nor deletion. Show only names and the nature of change, but not actual\ndiff output. Limit diff output to named subtrees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aL"}, {"role": "assistant", "content": "author local-part (see %al ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GG"}, {"role": "assistant", "content": "raw verification message from GPG for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --identity=<identity>"}, {"role": "assistant", "content": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.prompt"}, {"role": "assistant", "content": "Specifies the general prompt string to display at the top of\nthe dialog, before subsections for argPrompt and revPrompt .\nThe default value includes the actual command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --follow builtin/rev-list.c"}, {"role": "assistant", "content": "Shows the commits that changed builtin/rev-list.c , including\nthose commits that occurred before the file was given its\npresent name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive -o latest.zip HEAD"}, {"role": "assistant", "content": "Create a Zip archive that contains the contents of the latest\ncommit on the current branch. Note that the output format is\ninferred by the extension of the output file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "MERGE TRACKING While git svn can track\ncopy history (including branches and tags) for repositories adopting a\nstandard layout, it cannot yet represent merge history that happened\ninside git back upstream to SVN users.  Therefore it is advised that\nusers keep history as linear as possible inside Git to ease\ncompatibility with SVN (see the CAVEATS section below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "SYNOPSIS git diff [<options>] [<commit>] [--] [<path>…​] git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​] git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​] git diff [<options>] <commit>…​<commit> [--] [<path>…​] git diff [<options>] <blob> <blob> git diff [<options>] --no-index [--] <path> <path>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -r"}, {"role": "assistant", "content": "Allow recursive removal when a leading directory name is\ngiven."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]force-with-lease  --force-with-lease=<refname>  --force-with-lease=<refname>:<expect>"}, {"role": "assistant", "content": "Usually, \"git push\" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it. This option overrides this restriction if the current value of the\nremote ref is the expected value.  \"git push\" fails otherwise. Imagine that you have to rebase what you have already published.\nYou will have to bypass the \"must fast-forward\" rule in order to\nreplace the history you originally published with the rebased history.\nIf somebody else built on top of your original history while you are\nrebasing, the tip of the branch at the remote may advance with their\ncommit, and blindly pushing with --force will lose their work. This option allows you to say that you expect the history you are\nupdating is what you rebased and want to replace. If the remote ref\nstill points at the commit you specified, you can be sure that no\nother people did anything to the ref. It is like taking a \"lease\" on\nthe ref without explicitly locking it, and the remote ref is updated\nonly if the \"lease\" is still valid. --force-with-lease alone, without specifying the details, will protect\nall remote refs that are going to be updated by requiring their\ncurrent value to be the same as the remote-tracking branch we have\nfor them. --force-with-lease=<refname> , without specifying the expected value, will\nprotect the named ref (alone), if it is going to be updated, by\nrequiring its current value to be the same as the remote-tracking\nbranch we have for it. --force-with-lease=<refname>:<expect> will protect the named ref (alone),\nif it is going to be updated, by requiring its current value to be\nthe same as the specified value <expect> (which is allowed to be\ndifferent from the remote-tracking branch we have for the refname,\nor we do not even have to have such a remote-tracking branch when\nthis form is used).  If <expect> is the empty string, then the named ref\nmust not already exist. Note that all forms other than --force-with-lease=<refname>:<expect> that specifies the expected current value of the ref explicitly are\nstill experimental and their semantics may change as we gain experience\nwith this feature. \"--no-force-with-lease\" will cancel all the previous --force-with-lease on the\ncommand line. A general note on safety: supplying this option without an expected\nvalue, i.e. as --force-with-lease or --force-with-lease=<refname> interacts very badly with anything that implicitly runs git fetch on\nthe remote to be pushed to in the background, e.g. git fetch origin on your repository in a cronjob. The protection it offers over --force is ensuring that subsequent\nchanges your work wasn’t based on aren’t clobbered, but this is\ntrivially defeated if some background process is updating refs in the\nbackground. We don’t have anything except the remote tracking info to\ngo by as a heuristic for refs you’re expected to have seen & are\nwilling to clobber. If your editor or some other system is running git fetch in the\nbackground for you a way to mitigate this is to simply set up another\nremote: git remote add origin-push $(git config remote.origin.url)\ngit fetch origin-push Now when the background process runs git fetch origin the references\non origin-push won’t be updated, and thus commands like: git push --force-with-lease origin-push Will fail unless you manually run git fetch origin-push . This method\nis of course entirely defeated by something that runs git fetch\n--all , in that case you’d need to either disable it or do something\nmore tedious like: git fetch              # update 'master' from remote\ngit tag base master    # mark our base point\ngit rebase -i master   # rewrite some commits\ngit push --force-with-lease=master:base master:master I.e. create a base tag for versions of the upstream code that you’ve\nseen and are willing to overwrite, then rewrite history, and finally\nforce push changes to master if the remote version is still at base , regardless of what your local remotes/origin/master has been\nupdated to in the background. Alternatively, specifying --force-if-includes as an ancillary option\nalong with --force-with-lease[=<refname>] (i.e., without saying what\nexact commit the ref on the remote side must be pointing at, or which\nrefs on the remote side are being protected) at the time of \"push\" will\nverify if updates from the remote-tracking refs that may have been\nimplicitly updated in the background are integrated locally before\nallowing a forced update."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --summary  --no-summary"}, {"role": "assistant", "content": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I use hooks to prevent users from making certain changes?"}, {"role": "assistant", "content": "The only safe place to make these changes is on the remote repository\n(i.e., the Git server), usually in the pre-receive hook or in a\ncontinuous integration (CI) system.  These are the locations in which\npolicy can be enforced effectively. It’s common to try to use pre-commit hooks (or, for commit messages, commit-msg hooks) to check these things, which is great if you’re working as a\nsolo developer and want the tooling to help you.  However, using hooks on a\ndeveloper machine is not effective as a policy control because a user can bypass\nthese hooks with --no-verify without being noticed (among various other ways).\nGit assumes that the user is in control of their local repositories and doesn’t\ntry to prevent this or tattle on the user. In addition, some advanced users find pre-commit hooks to be an impediment to\nworkflows that use temporary commits to stage work in progress or that create\nfixup commits, so it’s better to push these kinds of checks to the server\nanyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "DESCRIPTION Modifies the index. Each file mentioned is updated into the index and\nany unmerged or needs updating state is cleared. See also git-add for a more user-friendly way to do some of\nthe most common operations on the index. The way git update-index handles files it is told about can be modified\nusing the various options:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.mode"}, {"role": "assistant", "content": "This string value should be either all or any . This value describes\nwhether all of the advertised bundles are required to unbundle a\ncomplete understanding of the bundled information ( all ) or if any one\nof the listed bundle URIs is sufficient ( any )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  contents <object>"}, {"role": "assistant", "content": "Print object contents for object reference <object> . This corresponds to\nthe output of --batch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitorHookVersion"}, {"role": "assistant", "content": "Sets the protocol version to be used when invoking the\n\"fsmonitor\" hook. There are currently versions 1 and 2. When this is not set,\nversion 2 will be tried first and if it fails then version 1\nwill be tried. Version 1 uses a timestamp as input to determine\nwhich files have changes since that time but some monitors\nlike Watchman have race conditions when used with a timestamp.\nVersion 2 uses an opaque string so that the monitor can return\nsomething that can be used to determine what files have changed\nwithout race conditions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --stuck-long"}, {"role": "assistant", "content": "Only meaningful in --parseopt mode. Output the options in their\nlong form if available, and with their arguments stuck."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order"}, {"role": "assistant", "content": "EXAMPLES Print the list of commits reachable from the current branch. git rev-list HEAD Print the list of commits on this branch, but not present in the\nupstream branch. git rev-list @{upstream}..HEAD Format commits with their author and commit message (see also the\nporcelain git-log ). git rev-list --format=medium HEAD Format commits along with their diffs (see also the porcelain git-log , which can do this in a single process). git rev-list HEAD |\ngit diff-tree --stdin --format=medium -p Print the list of commits on the current branch that touched any\nfile in the Documentation directory. git rev-list HEAD -- Documentation/ Print the list of commits authored by you in the past year, on\nany branch, tag, or other ref. git rev-list --author=you@example.com --since=1.year.ago --all Print the list of objects reachable from the current branch (i.e., all\ncommits and the blobs and trees they contain). git rev-list --objects HEAD Compare the disk size of all reachable objects, versus those\nreachable from reflogs, versus the total packed size. This can tell\nyou whether running git repack -ad might reduce the repository size\n(by dropping unreachable objects), and whether expiring reflogs might\nhelp. # reachable objects\ngit rev-list --disk-usage --objects --all\n# plus reflogs\ngit rev-list --disk-usage --objects --all --reflog\n# total disk size used\ndu -c .git/objects/pack/*.pack .git/objects/??/*\n# alternative to du: add up \"size\" and \"size-pack\" fields\ngit count-objects -v Report the disk size of each branch, not including objects used by the\ncurrent branch. This can find outliers that are contributing to a\nbloated repository size (e.g., because somebody accidentally committed\nlarge build artifacts). git for-each-ref --format='%(refname)' |\nwhile read branch\ndo\n\tsize=$(git rev-list --disk-usage --objects HEAD..$branch)\n\techo \"$size $branch\"\ndone |\nsort -n Compare the on-disk size of branches in one group of refs, excluding\nanother. If you co-mingle objects from multiple remotes in a single\nrepository, this can show which remotes are contributing to the\nrepository size (taking the size of origin as a baseline). git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  <refspec>…​"}, {"role": "assistant", "content": "Specify what destination ref to update with what source object.\nThe format of a <refspec> parameter is an optional plus + , followed by the source object <src>, followed\nby a colon : , followed by the destination ref <dst>. The <src> is often the name of the branch you would want to push, but\nit can be any arbitrary \"SHA-1 expression\", such as master~4 or HEAD (see gitrevisions ). The <dst> tells which ref on the remote side is updated with this\npush. Arbitrary expressions cannot be used here, an actual ref must\nbe named.\nIf git push [<repository>] without any <refspec> argument is set to\nupdate some ref at the destination with <src> with remote.<repository>.push configuration variable, :<dst> part can\nbe omitted—​such a push will update a ref that <src> normally updates\nwithout any <refspec> on the command line.  Otherwise, missing :<dst> means to update the same ref as the <src> . If <dst> doesn’t start with refs/ (e.g. refs/heads/master ) we will\ntry to infer where in refs/* on the destination <repository> it\nbelongs based on the type of <src> being pushed and whether <dst>\nis ambiguous. If <dst> unambiguously refers to a ref on the <repository> remote,\nthen push to that ref. If <src> resolves to a ref starting with refs/heads/ or refs/tags/,\nthen prepend that to <dst>. Other ambiguity resolutions might be added in the future, but for\nnow any other cases will error out with an error indicating what we\ntried, and depending on the advice.pushUnqualifiedRefname configuration (see git-config ) suggest what refs/\nnamespace you may have wanted to push to. The object referenced by <src> is used to update the <dst> reference\non the remote side. Whether this is allowed depends on where in refs/* the <dst> reference lives as described in detail below, in\nthose sections \"update\" means any modifications except deletes, which\nas noted after the next few sections are treated differently. The refs/heads/* namespace will only accept commit objects, and\nupdates only if they can be fast-forwarded. The refs/tags/* namespace will accept any kind of object (as\ncommits, trees and blobs can be tagged), and any updates to them will\nbe rejected. It’s possible to push any type of object to any namespace outside of refs/{tags,heads}/* . In the case of tags and commits, these will be\ntreated as if they were the commits inside refs/heads/* for the\npurposes of whether the update is allowed. I.e. a fast-forward of commits and tags outside refs/{tags,heads}/* is allowed, even in cases where what’s being fast-forwarded is not a\ncommit, but a tag object which happens to point to a new commit which\nis a fast-forward of the commit the last tag (or commit) it’s\nreplacing. Replacing a tag with an entirely different tag is also\nallowed, if it points to the same commit, as well as pushing a peeled\ntag, i.e. pushing the commit that existing tag object points to, or a\nnew tag object which an existing commit points to. Tree and blob objects outside of refs/{tags,heads}/* will be treated\nthe same way as if they were inside refs/tags/* , any update of them\nwill be rejected. All of the rules described above about what’s not allowed as an update\ncan be overridden by adding an the optional leading + to a refspec\n(or using --force command line option). The only exception to this\nis that no amount of forcing will make the refs/heads/* namespace\naccept a non-commit object. Hooks and configuration can also override\nor amend these rules, see e.g. receive.denyNonFastForwards in git-config and pre-receive and update in githooks . Pushing an empty <src> allows you to delete the <dst> ref from the\nremote repository. Deletions are always accepted without a leading + in the refspec (or --force ), except when forbidden by configuration\nor hooks. See receive.denyDeletes in git-config and pre-receive and update in githooks . The special refspec : (or +: to allow non-fast-forward updates)\ndirects Git to push \"matching\" branches: for every branch that exists on\nthe local side, the remote side is updated if a branch of the same name\nalready exists on the remote side. tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --abort"}, {"role": "assistant", "content": "Cancel the operation and return to the pre-sequence state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --unordered"}, {"role": "assistant", "content": "When --batch-all-objects is in use, visit objects in an\norder which may be more efficient for accessing the object\ncontents than hash order. The exact details of the order are\nunspecified, but if you do not require a specific order, this\nshould generally result in faster output, especially with --batch .  Note that cat-file will still show each object\nonly once, even if it is stored multiple times in the\nrepository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-commit-header"}, {"role": "assistant", "content": "Suppress the header line containing \"commit\" and the object ID printed before\nthe specified format.  This has no effect on the built-in formats; only custom\nformats are affected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log or git-whatchanged , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  create"}, {"role": "assistant", "content": "Create a stash entry (which is a regular commit object) and\nreturn its object name, without storing it anywhere in the ref\nnamespace.\nThis is intended to be useful for scripts.  It is probably not\nthe command you want to use; see \"push\" above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --whitespace=<action>"}, {"role": "assistant", "content": "When applying a patch, detect a new or modified line that has\nwhitespace errors.  What are considered whitespace errors is\ncontrolled by core.whitespace configuration.  By default,\ntrailing whitespaces (including lines that solely consist of\nwhitespaces) and a space character that is immediately followed\nby a tab character inside the initial indent of the line are\nconsidered whitespace errors. By default, the command outputs warning messages but applies the patch.\nWhen git-apply is used for statistics and not applying a\npatch, it defaults to nowarn . You can use different <action> values to control this\nbehavior: nowarn turns off the trailing whitespace warning. warn outputs warnings for a few such errors, but applies the\npatch as-is (default). fix outputs warnings for a few such errors, and applies the\npatch after fixing them ( strip is a synonym — the tool\nused to consider only trailing whitespace characters as errors, and the\nfix involved stripping them, but modern Gits do more). error outputs warnings for a few such errors, and refuses\nto apply the patch. error-all is similar to error but shows all errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %N"}, {"role": "assistant", "content": "commit notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.notes"}, {"role": "assistant", "content": "Provides the default value for the --notes option to\nformat-patch. Accepts a boolean value, or a ref which specifies\nwhere to get notes. If false, format-patch defaults to --no-notes . If true, format-patch defaults to --notes . If\nset to a non-boolean value, format-patch defaults to --notes=<ref> , where ref is the non-boolean value. Defaults\nto false. If one wishes to use the ref refs/notes/true , please use that literal\ninstead. This configuration can be specified multiple times in order to allow\nmultiple notes refs to be included. In that case, it will behave\nsimilarly to multiple --[no-]notes[=] options passed in. That is, a\nvalue of true will show the default notes, a value of <ref> will\nalso show notes from that notes ref and a value of false will negate\nprevious configurations and not show notes. For example, [format]\n\tnotes = true\n\tnotes = foo\n\tnotes = false\n\tnotes = bar will only show notes from refs/notes/bar ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --root"}, {"role": "assistant", "content": "Do not treat root commits as boundaries.  This can also be\ncontrolled via the blame.showRoot config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  i18n.logOutputEncoding"}, {"role": "assistant", "content": "Character encoding the commit messages are converted to when\nrunning git log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -r  --remotes"}, {"role": "assistant", "content": "List or delete (if used with -d) the remote-tracking branches.\nCombine with --list to match the optional pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --no-index [--] <path> <path>"}, {"role": "assistant", "content": "This form is to compare the given two paths on the\nfilesystem.  You can omit the --no-index option when\nrunning the command in a working tree controlled by Git and\nat least one of the paths points outside the working tree,\nor when running the command outside a working tree\ncontrolled by Git. This form implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "BUGS When using the deprecated [section.subsection] syntax, changing a value\nwill result in adding a multi-line key instead of a change, if the subsection\nis given with at least one uppercase character. For example when the config\nlooks like [section.subsection]\n    key = value1 and running git config section.Subsection.key value2 will result in [section.subsection]\n    key = value1\n    key = value2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --stdin"}, {"role": "assistant", "content": "In addition to getting arguments from the command line, read\nthem from standard input as well. This accepts commits and\npseudo-options like --all and --glob= . When a -- separator\nis seen, the following input is treated as paths and used to\nlimit the result. Flags like --not which are read via standard input\nare only respected for arguments passed in the same way and will not\ninfluence any subsequent command line arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --[no-]recurse-submodules"}, {"role": "assistant", "content": "When the working tree is updated, using --recurse-submodules will\nalso recursively reset the working tree of all active submodules\naccording to the commit recorded in the superproject, also setting\nthe submodules' HEAD to be detached at that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --alternate-refs"}, {"role": "assistant", "content": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates .  The set of included objects may\nbe modified by core.alternateRefsCommand , etc. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <branchname>"}, {"role": "assistant", "content": "The name of the branch to create or delete.\nThe new branch name must pass all checks defined by git-check-ref-format .  Some of these checks\nmay restrict the characters allowed in a branch name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.maxInputSize"}, {"role": "assistant", "content": "If the size of the incoming pack stream is larger than this\nlimit, then git-receive-pack will error out, instead of\naccepting the pack file. If not set or set to 0, then the size\nis unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --export-marks=<file>"}, {"role": "assistant", "content": "Dumps the internal marks table to <file> when complete.\nMarks are written one per line as :markid SHA-1 .\nFrontends can use this file to validate imports after they\nhave been completed, or to save the marks table across\nincremental runs.  As <file> is only opened and truncated\nat checkpoint (or completion) the same path can also be\nsafely given to --import-marks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --[no-]informative-errors"}, {"role": "assistant", "content": "When informative errors are turned on, git-daemon will report\nmore verbose errors to the client, differentiating conditions\nlike \"no such repository\" from \"repository not exported\". This\nis more convenient for clients, but may leak information about\nthe existence of unexported repositories.  When informative\nerrors are not enabled, all errors report \"access denied\" to the\nclient. The default is --no-informative-errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-merges"}, {"role": "assistant", "content": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -d  --detach"}, {"role": "assistant", "content": "With add , detach HEAD in the new worktree. See \"DETACHED HEAD\"\nin git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.autoSetupRemote"}, {"role": "assistant", "content": "If set to \"true\" assume --set-upstream on default push when no\nupstream tracking exists for the current branch; this option\ntakes effect with push.default options simple , upstream ,\nand current . It is useful if by default you want new branches\nto be pushed to the default remote (like the behavior of push.default=current ) and you also want the upstream tracking\nto be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to\nhave the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.spellingDictionary"}, {"role": "assistant", "content": "Specifies the dictionary used for spell checking commit messages in\nthe git-gui . When set to \"none\" spell checking is turned\noff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -q  --quiet"}, {"role": "assistant", "content": "Be more quiet when creating or deleting a branch, suppressing\nnon-error messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --exclude-standard"}, {"role": "assistant", "content": "Add the standard Git exclusions: .git/info/exclude, .gitignore\nin each directory, and the user’s global exclusion file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]mailmap  --[no-]use-mailmap"}, {"role": "assistant", "content": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -i  --info"}, {"role": "assistant", "content": "Display manual page for the command in the info format. The info program will be used for that purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.singleKey"}, {"role": "assistant", "content": "In interactive commands, allow the user to provide one-letter\ninput with a single key (i.e., without hitting enter).\nCurrently this is used by the --patch mode of git-add , git-checkout , git-restore , git-commit , git-reset , and git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "SYNOPSIS git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8] [--no-verify]\n\t [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n\t [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n\t [--whitespace=<action>] [-C<n>] [-p<n>] [--directory=<dir>]\n\t [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]\n\t [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]\n\t [--quoted-cr=<action>]\n\t [--empty=(stop|drop|keep)]\n\t [(<mbox> | <Maildir>)…​] git am (--continue | --skip | --abort | --quit | --show-current-patch[=(diff|raw)] | --allow-empty)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  no-renormalize"}, {"role": "assistant", "content": "Disables the renormalize option.  This overrides the merge.renormalize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --no-flags"}, {"role": "assistant", "content": "Do not output flag parameters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  checkpoint"}, {"role": "assistant", "content": "Forces fast-import to close the current packfile, generate its\nunique SHA-1 checksum and index, and start a new packfile.\nThis command is optional and is not needed to perform\nan import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  -q  --quiet"}, {"role": "assistant", "content": "Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --apply"}, {"role": "assistant", "content": "If you use any of the options marked \"Turns off apply \" above, git apply reads and outputs the\nrequested information without actually applying the\npatch.  Give this flag after those flags to also apply\nthe patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --dry-run"}, {"role": "assistant", "content": "Show what would be done, without making any changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  prune"}, {"role": "assistant", "content": "Remove all notes for non-existing/unreachable objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "NAME git-push - Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]force-in-body-from"}, {"role": "assistant", "content": "With the e-mail sender specified via the --from option, by\ndefault, an in-body \"From:\" to identify the real author of\nthe commit is added at the top of the commit log message if\nthe sender is different from the author.  With this option,\nthe in-body \"From:\" is added even when the sender and the\nauthor have the same name and address, which may help if the\nmailing list software mangles the sender’s identity.\nDefaults to the value of the format.forceInBodyFrom configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --decorate-refs=<pattern>  --decorate-refs-exclude=<pattern>"}, {"role": "assistant", "content": "For each candidate reference, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn’t match any of the patterns given to --decorate-refs . The log.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration . If none of these options or config settings are given, then references are\nused as decoration if they match HEAD , refs/heads/ , refs/remotes/ , refs/stash/ , or refs/tags/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --no-add"}, {"role": "assistant", "content": "When applying a patch, ignore additions made by the\npatch.  This can be used to extract the common part between\ntwo files by first running diff on them and applying\nthe result with this option, which would apply the\ndeletion part but not the addition part."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.date"}, {"role": "assistant", "content": "Specifies the format used to output dates in git-blame .\nIf unset the iso format is used. For supported values,\nsee the discussion of the --date option at git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --no-edit"}, {"role": "assistant", "content": "Use the selected commit message without launching an editor.\nFor example, git commit --amend --no-edit amends a commit\nwithout changing its commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsync"}, {"role": "assistant", "content": "A comma-separated list of components of the repository that\nshould be hardened via the core.fsyncMethod when created or\nmodified.  You can disable hardening of any component by\nprefixing it with a - .  Items that are not hardened may be\nlost in the event of an unclean\tsystem shutdown. Unless you\nhave special requirements, it is recommended that you leave\nthis option empty or pick one of committed , added ,\nor all . When this configuration is encountered, the set of components starts with\nthe platform default value, disabled components are removed, and additional\ncomponents are added. none resets the state so that the platform default\nis ignored. The empty string resets the fsync configuration to the platform\ndefault. The default on most platforms is equivalent to core.fsync=committed,-loose-object , which has good performance,\nbut risks losing recent work in the event of an unclean system shutdown. none clears the set of fsynced components. loose-object hardens objects added to the repo in loose-object form. pack hardens objects added to the repo in packfile form. pack-metadata hardens packfile bitmaps and indexes. commit-graph hardens the commit-graph file. index hardens the index when it is modified. objects is an aggregate option that is equivalent to loose-object,pack . reference hardens references modified in the repo. derived-metadata is an aggregate option that is equivalent to pack-metadata,commit-graph . committed is an aggregate option that is currently equivalent to objects . This mode sacrifices some performance to ensure that work\nthat is committed to the repository with git commit or similar commands\nis hardened. added is an aggregate option that is currently equivalent to committed,index . This mode sacrifices additional performance to\nensure that the results of commands like git add and similar operations\nare hardened. all is an aggregate option that syncs all individual components above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --ignore-unmerged"}, {"role": "assistant", "content": "When restoring files on the working tree from the index, do\nnot abort the operation if there are unmerged entries and\nneither --ours , --theirs , --merge or --conflict is\nspecified. Unmerged paths on the working tree are left alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  remote repository"}, {"role": "assistant", "content": "A repository which is used to track the same\nproject but resides somewhere else. To communicate with remotes,\nsee fetch or push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --replace"}, {"role": "assistant", "content": "By default, when a file path exists in the index, git update-index refuses an attempt to add path/file .\nSimilarly if a file path/file exists, a file path cannot be added.  With --replace flag, existing entries\nthat conflict with the entry being added are\nautomatically removed with warning messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --abbrev-commit"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}

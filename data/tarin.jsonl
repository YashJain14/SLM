{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "NAME git - the stupid content tracker"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SYNOPSIS git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--config-env=<name>=<envvar>] <command> [<args>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial to get started, then see giteveryday for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -v  --version"}, {"role": "assistant", "content": "Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts\nthe same options as the git-version command. If --help is\nalso given, it takes precedence over --version ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -C <path>"}, {"role": "assistant", "content": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path> .  If <path> is present but empty, e.g. -C \"\" , then the\ncurrent working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --html-path"}, {"role": "assistant", "content": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --info-path"}, {"role": "assistant", "content": "Print the path where the Info files documenting this\nversion of Git are installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -p  --paginate"}, {"role": "assistant", "content": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section\nbelow)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -P  --no-pager"}, {"role": "assistant", "content": "Do not pipe Git output into a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --git-dir=<path>"}, {"role": "assistant", "content": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-replace-objects"}, {"role": "assistant", "content": "Do not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-lazy-fetch"}, {"role": "assistant", "content": "Do not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --literal-pathspecs"}, {"role": "assistant", "content": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-optional-locks"}, {"role": "assistant", "content": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --list-cmds=<group>[,<group>…​]"}, {"role": "assistant", "content": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --attr-source=<tree-ish>"}, {"role": "assistant", "content": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes . This is equivalent to setting the GIT_ATTR_SOURCE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-add"}, {"role": "assistant", "content": "Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archive"}, {"role": "assistant", "content": "Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout"}, {"role": "assistant", "content": "Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit"}, {"role": "assistant", "content": "Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch"}, {"role": "assistant", "content": "Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gui"}, {"role": "assistant", "content": "A portable graphical interface to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-maintenance"}, {"role": "assistant", "content": "Run tasks to optimize Git repository data"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-notes"}, {"role": "assistant", "content": "Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-range-diff"}, {"role": "assistant", "content": "Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rebase"}, {"role": "assistant", "content": "Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rm"}, {"role": "assistant", "content": "Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show"}, {"role": "assistant", "content": "Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-tag"}, {"role": "assistant", "content": "Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-export"}, {"role": "assistant", "content": "Git data exporter"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-filter-branch"}, {"role": "assistant", "content": "Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-refs"}, {"role": "assistant", "content": "Pack heads and tags for efficient repository access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-repack"}, {"role": "assistant", "content": "Pack unpacked objects in a repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replace"}, {"role": "assistant", "content": "Create, list, delete refs to replace objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-count-objects"}, {"role": "assistant", "content": "Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diagnose"}, {"role": "assistant", "content": "Generate a zip archive of diagnostic information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-difftool"}, {"role": "assistant", "content": "Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fsck"}, {"role": "assistant", "content": "Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-instaweb"}, {"role": "assistant", "content": "Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-tree"}, {"role": "assistant", "content": "Perform merge without touching index or working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-commit"}, {"role": "assistant", "content": "Check the GPG signature of commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-tag"}, {"role": "assistant", "content": "Check the GPG signature of tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-version"}, {"role": "assistant", "content": "Display version information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-whatchanged"}, {"role": "assistant", "content": "Show logs with differences each commit introduces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitweb"}, {"role": "assistant", "content": "Git web interface (web frontend to Git repositories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archimport"}, {"role": "assistant", "content": "Import a GNU Arch repository into Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsimport"}, {"role": "assistant", "content": "Salvage your data out of another SCM people love to hate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-p4"}, {"role": "assistant", "content": "Import from and submit to Perforce repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-quiltimport"}, {"role": "assistant", "content": "Applies a quilt patchset onto the current branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-email"}, {"role": "assistant", "content": "Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-svn"}, {"role": "assistant", "content": "Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-apply"}, {"role": "assistant", "content": "Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout-index"}, {"role": "assistant", "content": "Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-graph"}, {"role": "assistant", "content": "Write and verify Git commit-graph files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-tree"}, {"role": "assistant", "content": "Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-file"}, {"role": "assistant", "content": "Run a three-way file merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-index"}, {"role": "assistant", "content": "Run a merge for files needing merging"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktag"}, {"role": "assistant", "content": "Creates a tag object with extra validation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktree"}, {"role": "assistant", "content": "Build a tree-object from ls-tree formatted text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-multi-pack-index"}, {"role": "assistant", "content": "Write and verify multi-pack-indexes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune-packed"}, {"role": "assistant", "content": "Remove extra objects that are already in pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-read-tree"}, {"role": "assistant", "content": "Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-objects"}, {"role": "assistant", "content": "Unpack objects from a packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-ref"}, {"role": "assistant", "content": "Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-files"}, {"role": "assistant", "content": "Compares files in the working tree and the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-tree"}, {"role": "assistant", "content": "Compares the content and mode of blobs found via two tree objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-ref"}, {"role": "assistant", "content": "Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-repo"}, {"role": "assistant", "content": "Run a Git command on a list of repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-remote"}, {"role": "assistant", "content": "List references in a remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-base"}, {"role": "assistant", "content": "Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-parse"}, {"role": "assistant", "content": "Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-index"}, {"role": "assistant", "content": "Show packed archive index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-ref"}, {"role": "assistant", "content": "List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-file"}, {"role": "assistant", "content": "Creates a temporary file with a blob’s contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-var"}, {"role": "assistant", "content": "Show a Git logical variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-pack"}, {"role": "assistant", "content": "Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-daemon"}, {"role": "assistant", "content": "A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch-pack"}, {"role": "assistant", "content": "Receive missing objects from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-backend"}, {"role": "assistant", "content": "Server side implementation of Git over HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-pack"}, {"role": "assistant", "content": "Push objects over Git protocol to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-server-info"}, {"role": "assistant", "content": "Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-pack"}, {"role": "assistant", "content": "Send objects packed back to git-fetch-pack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-attr"}, {"role": "assistant", "content": "Display gitattributes information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-mailmap"}, {"role": "assistant", "content": "Show canonical names and email addresses of contacts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ref-format"}, {"role": "assistant", "content": "Ensures that a reference name is well formed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-column"}, {"role": "assistant", "content": "Display data in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-store"}, {"role": "assistant", "content": "Helper to store credentials on disk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fmt-merge-msg"}, {"role": "assistant", "content": "Produce a merge commit message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailinfo"}, {"role": "assistant", "content": "Extracts patch and authorship from a single e-mail message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailsplit"}, {"role": "assistant", "content": "Simple UNIX mbox splitter program"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-patch-id"}, {"role": "assistant", "content": "Compute unique ID for a patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcore-tutorial"}, {"role": "assistant", "content": "A Git core tutorial for developers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  giteveryday"}, {"role": "assistant", "content": "A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitglossary"}, {"role": "assistant", "content": "A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitnamespaces"}, {"role": "assistant", "content": "Git namespaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitsubmodules"}, {"role": "assistant", "content": "Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial"}, {"role": "assistant", "content": "A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitattributes"}, {"role": "assistant", "content": "Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  githooks"}, {"role": "assistant", "content": "Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrevisions"}, {"role": "assistant", "content": "Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-chunk"}, {"role": "assistant", "content": "Chunk-based file formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-index"}, {"role": "assistant", "content": "Git index format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-common"}, {"role": "assistant", "content": "Things common to various protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-http"}, {"role": "assistant", "content": "Git HTTP-based protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-pack"}, {"role": "assistant", "content": "How packs are transferred over-the-wire"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-v2"}, {"role": "assistant", "content": "Git Wire Protocol, Version 2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <object>"}, {"role": "assistant", "content": "Indicates the object name for any type of object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <blob>"}, {"role": "assistant", "content": "Indicates a blob object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree>"}, {"role": "assistant", "content": "Indicates a tree object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit>"}, {"role": "assistant", "content": "Indicates a commit object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit-ish>"}, {"role": "assistant", "content": "Indicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <file>"}, {"role": "assistant", "content": "Indicates a filename - almost always relative to the\nroot of the tree structure GIT_INDEX_FILE describes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  HEAD"}, {"role": "assistant", "content": "indicates the head of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tag>"}, {"role": "assistant", "content": "a valid tag name (i.e. a refs/tags/<tag> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <head>"}, {"role": "assistant", "content": "a valid head name (i.e. a refs/heads/<head> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "File/Directory Structure Please see the gitrepository-layout document. Read githooks for more details about each hook. Higher level SCMs may provide and manage additional information in the $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Terminology Please see gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIR"}, {"role": "assistant", "content": "If the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_WORK_TREE"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nThis can also be controlled by the --work-tree command-line\noption and the core.worktree configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NAMESPACE"}, {"role": "assistant", "content": "Set the Git namespace; see gitnamespaces for details.\nThe --namespace command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CEILING_DIRECTORIES"}, {"role": "assistant", "content": "This should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMON_DIR"}, {"role": "assistant", "content": "If this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout and git-worktree for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_REF_FORMAT"}, {"role": "assistant", "content": "If this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_NAME"}, {"role": "assistant", "content": "The human-readable name used in the committer identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_DATE"}, {"role": "assistant", "content": "The date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EXTERNAL_DIFF"}, {"role": "assistant", "content": "When the environment variable GIT_EXTERNAL_DIFF is set, the\nprogram named by it is called to generate diffs, and Git\ndoes not use its builtin diff machinery.\nFor a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters: path old-file old-hex old-mode new-file new-hex new-mode where:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-mode"}, {"role": "assistant", "content": "are the octal representation of the file modes. The file parameters can point at the user’s working file\n(e.g. new-file in \"git-diff-files\"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the\nindex). GIT_EXTERNAL_DIFF should not worry about unlinking the\ntemporary file — it is removed when GIT_EXTERNAL_DIFF exits. For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\nparameter, <path>. For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_TOTAL"}, {"role": "assistant", "content": "The total number of paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides $EDITOR and $VISUAL .\nIt is used by several Git commands when, on interactive mode,\nan editor is to be launched. See also git-var and the core.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SEQUENCE_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase and the sequence.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH  GIT_SSH_COMMAND"}, {"role": "assistant", "content": "If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\nThe command-line parameters passed to the configured command are\ndetermined by the ssh variant.  See ssh.variant option in git-config for details. $GIT_SSH_COMMAND takes precedence over $GIT_SSH , and is interpreted\nby the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded). Usually it is easier to configure any desired options through your\npersonal .ssh/config file.  Please consult your ssh documentation\nfor further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git’s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ATTR_SOURCE"}, {"role": "assistant", "content": "Sets the treeish that gitattributes will be read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ASKPASS"}, {"role": "assistant", "content": "If this environment variable is set, then Git commands which need to\nacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\nwill call this program with a suitable prompt as command-line argument\nand read the password from its STDOUT. See also the core.askPass option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TERMINAL_PROMPT"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, git will not prompt\non the terminal (e.g., when asking for HTTP authentication)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_FLUSH"}, {"role": "assistant", "content": "If this Boolean environment variable is set to true, then commands such\nas git blame (in incremental mode), git rev-list , git log , git check-attr and git check-ignore will\nforce a flush of the output stream after each record have been\nflushed. If this\nvariable is set to false, the output of these commands will be done\nusing completely buffered I/O.   If this environment variable is\nnot set, Git will choose buffered or record-oriented flushing\nbased on whether stdout appears to be redirected to a file or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_FSMONITOR"}, {"role": "assistant", "content": "Enables trace messages for the filesystem monitor extension.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACK_ACCESS"}, {"role": "assistant", "content": "Enables trace messages for all accesses to any packs. For each\naccess, the pack file name and an offset in the pack is\nrecorded. This may be helpful for troubleshooting some\npack-related performance problems.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKET"}, {"role": "assistant", "content": "Enables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKFILE"}, {"role": "assistant", "content": "Enables tracing of packfiles sent or received by a\ngiven program. Unlike other trace output, this trace is\nverbatim: no headers, and no quoting of binary data. You almost\ncertainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack ) rather than displaying it on\nthe terminal or mixing it with other trace output. Note that this is currently only implemented for the client side\nof clones and fetches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PERFORMANCE"}, {"role": "assistant", "content": "Enables performance related trace messages, e.g. total execution\ntime of each Git command.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SETUP"}, {"role": "assistant", "content": "Enables trace messages printing the .git, working tree and current\nworking directory after Git has completed its setup phase.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SHALLOW"}, {"role": "assistant", "content": "Enables trace messages that can help debugging fetching /\ncloning of shallow repositories.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2"}, {"role": "assistant", "content": "Enables more detailed trace messages from the \"trace2\" library.\nOutput from GIT_TRACE2 is a simple text-based format for human\nreadability. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions). In addition, if the variable is set to af_unix:[<socket-type>:]<absolute-pathname> , Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either stream or dgram . Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages. See Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_PERF"}, {"role": "assistant", "content": "In addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REDACT"}, {"role": "assistant", "content": "By default, when tracing is activated, Git redacts the values of\ncookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\nheader and packfile URIs. Set this Boolean environment variable to false to prevent this\nredaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_REPLACE_OBJECTS"}, {"role": "assistant", "content": "Setting and exporting this environment variable tells Git to\nignore replacement refs and do not replace Git objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_LITERAL_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs literally, rather than as glob patterns. For example,\nrunning GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search\nfor commits that touch the path *.c , not any paths that the\nglob *.c matches. You might want this if you are feeding\nliteral paths to Git (e.g., paths previously given to you by git ls-tree , --raw diff output, etc)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REFLOG_ACTION"}, {"role": "assistant", "content": "When a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REF_PARANOIA"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA"}, {"role": "assistant", "content": "When loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALLOW_PROTOCOL"}, {"role": "assistant", "content": "If set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL_FROM_USER"}, {"role": "assistant", "content": "Set this Boolean environment variable to false to prevent protocols used by fetch/push/clone which are\nconfigured to the user state.  This is useful to restrict recursive\nsubmodule initialization from an untrusted repository or for programs\nwhich feed potentially-untrusted URLS to git commands.  See git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OPTIONAL_LOCKS"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REDIRECT_STDIN  GIT_REDIRECT_STDOUT  GIT_REDIRECT_STDERR"}, {"role": "assistant", "content": "Windows-only: allow redirecting the standard input/output/error\nhandles to paths specified by the environment variables. This is\nparticularly useful in multi-threaded applications where the\ncanonical way to pass standard handles via CreateProcess() is\nnot an option because it would require the handles to be marked\ninheritable (and consequently every spawned process would\ninherit them, possibly blocking regular Git operations). The\nprimary intended use case is to use named pipes for communication\n(e.g. \\\\.\\pipe\\my-git-stdin-123 ). Two special values are supported: off will simply close the\ncorresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1 , standard error will be redirected to the same handle as\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout ) and the raw\ndiff output ( git-diff ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial both provide\nintroductions to the underlying Git architecture. See gitworkflows for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Authors Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n< git@vger.kernel.org >. https://openhub.net/p/git/contributors/summary gives you a more complete list of contributors. If you have a clone of git.git itself, the\noutput of git-shortlog and git-blame can show you\nthe authors for specific parts of the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Reporting Bugs Report bugs to the Git mailing list < git@vger.kernel.org > where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions. Issues which are security relevant should be disclosed privately to\nthe Git Security mailing list < git-security@googlegroups.com >."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "NAME git - the stupid content tracker"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SYNOPSIS git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--config-env=<name>=<envvar>] <command> [<args>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial to get started, then see giteveryday for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -v  --version"}, {"role": "assistant", "content": "Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts\nthe same options as the git-version command. If --help is\nalso given, it takes precedence over --version ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -C <path>"}, {"role": "assistant", "content": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path> .  If <path> is present but empty, e.g. -C \"\" , then the\ncurrent working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --html-path"}, {"role": "assistant", "content": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --info-path"}, {"role": "assistant", "content": "Print the path where the Info files documenting this\nversion of Git are installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -p  --paginate"}, {"role": "assistant", "content": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section\nbelow)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -P  --no-pager"}, {"role": "assistant", "content": "Do not pipe Git output into a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --git-dir=<path>"}, {"role": "assistant", "content": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-replace-objects"}, {"role": "assistant", "content": "Do not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-lazy-fetch"}, {"role": "assistant", "content": "Do not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --literal-pathspecs"}, {"role": "assistant", "content": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-optional-locks"}, {"role": "assistant", "content": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --list-cmds=<group>[,<group>…​]"}, {"role": "assistant", "content": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --attr-source=<tree-ish>"}, {"role": "assistant", "content": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes . This is equivalent to setting the GIT_ATTR_SOURCE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-add"}, {"role": "assistant", "content": "Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archive"}, {"role": "assistant", "content": "Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout"}, {"role": "assistant", "content": "Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit"}, {"role": "assistant", "content": "Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch"}, {"role": "assistant", "content": "Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gui"}, {"role": "assistant", "content": "A portable graphical interface to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-maintenance"}, {"role": "assistant", "content": "Run tasks to optimize Git repository data"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-notes"}, {"role": "assistant", "content": "Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-range-diff"}, {"role": "assistant", "content": "Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rebase"}, {"role": "assistant", "content": "Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rm"}, {"role": "assistant", "content": "Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show"}, {"role": "assistant", "content": "Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-tag"}, {"role": "assistant", "content": "Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-export"}, {"role": "assistant", "content": "Git data exporter"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-filter-branch"}, {"role": "assistant", "content": "Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-refs"}, {"role": "assistant", "content": "Pack heads and tags for efficient repository access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-repack"}, {"role": "assistant", "content": "Pack unpacked objects in a repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replace"}, {"role": "assistant", "content": "Create, list, delete refs to replace objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-count-objects"}, {"role": "assistant", "content": "Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diagnose"}, {"role": "assistant", "content": "Generate a zip archive of diagnostic information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-difftool"}, {"role": "assistant", "content": "Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fsck"}, {"role": "assistant", "content": "Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-instaweb"}, {"role": "assistant", "content": "Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-tree"}, {"role": "assistant", "content": "Perform merge without touching index or working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-commit"}, {"role": "assistant", "content": "Check the GPG signature of commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-tag"}, {"role": "assistant", "content": "Check the GPG signature of tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-version"}, {"role": "assistant", "content": "Display version information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-whatchanged"}, {"role": "assistant", "content": "Show logs with differences each commit introduces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitweb"}, {"role": "assistant", "content": "Git web interface (web frontend to Git repositories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archimport"}, {"role": "assistant", "content": "Import a GNU Arch repository into Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsimport"}, {"role": "assistant", "content": "Salvage your data out of another SCM people love to hate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-p4"}, {"role": "assistant", "content": "Import from and submit to Perforce repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-quiltimport"}, {"role": "assistant", "content": "Applies a quilt patchset onto the current branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-email"}, {"role": "assistant", "content": "Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-svn"}, {"role": "assistant", "content": "Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-apply"}, {"role": "assistant", "content": "Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout-index"}, {"role": "assistant", "content": "Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-graph"}, {"role": "assistant", "content": "Write and verify Git commit-graph files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-tree"}, {"role": "assistant", "content": "Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-file"}, {"role": "assistant", "content": "Run a three-way file merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-index"}, {"role": "assistant", "content": "Run a merge for files needing merging"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktag"}, {"role": "assistant", "content": "Creates a tag object with extra validation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktree"}, {"role": "assistant", "content": "Build a tree-object from ls-tree formatted text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-multi-pack-index"}, {"role": "assistant", "content": "Write and verify multi-pack-indexes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune-packed"}, {"role": "assistant", "content": "Remove extra objects that are already in pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-read-tree"}, {"role": "assistant", "content": "Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-objects"}, {"role": "assistant", "content": "Unpack objects from a packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-ref"}, {"role": "assistant", "content": "Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-files"}, {"role": "assistant", "content": "Compares files in the working tree and the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-tree"}, {"role": "assistant", "content": "Compares the content and mode of blobs found via two tree objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-ref"}, {"role": "assistant", "content": "Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-repo"}, {"role": "assistant", "content": "Run a Git command on a list of repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-remote"}, {"role": "assistant", "content": "List references in a remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-base"}, {"role": "assistant", "content": "Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-parse"}, {"role": "assistant", "content": "Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-index"}, {"role": "assistant", "content": "Show packed archive index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-ref"}, {"role": "assistant", "content": "List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-file"}, {"role": "assistant", "content": "Creates a temporary file with a blob’s contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-var"}, {"role": "assistant", "content": "Show a Git logical variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-pack"}, {"role": "assistant", "content": "Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-daemon"}, {"role": "assistant", "content": "A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch-pack"}, {"role": "assistant", "content": "Receive missing objects from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-backend"}, {"role": "assistant", "content": "Server side implementation of Git over HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-pack"}, {"role": "assistant", "content": "Push objects over Git protocol to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-server-info"}, {"role": "assistant", "content": "Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-pack"}, {"role": "assistant", "content": "Send objects packed back to git-fetch-pack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-attr"}, {"role": "assistant", "content": "Display gitattributes information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-mailmap"}, {"role": "assistant", "content": "Show canonical names and email addresses of contacts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ref-format"}, {"role": "assistant", "content": "Ensures that a reference name is well formed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-column"}, {"role": "assistant", "content": "Display data in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-store"}, {"role": "assistant", "content": "Helper to store credentials on disk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fmt-merge-msg"}, {"role": "assistant", "content": "Produce a merge commit message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailinfo"}, {"role": "assistant", "content": "Extracts patch and authorship from a single e-mail message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailsplit"}, {"role": "assistant", "content": "Simple UNIX mbox splitter program"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-patch-id"}, {"role": "assistant", "content": "Compute unique ID for a patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcore-tutorial"}, {"role": "assistant", "content": "A Git core tutorial for developers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  giteveryday"}, {"role": "assistant", "content": "A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitglossary"}, {"role": "assistant", "content": "A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitnamespaces"}, {"role": "assistant", "content": "Git namespaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitsubmodules"}, {"role": "assistant", "content": "Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial"}, {"role": "assistant", "content": "A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitattributes"}, {"role": "assistant", "content": "Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  githooks"}, {"role": "assistant", "content": "Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrevisions"}, {"role": "assistant", "content": "Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-chunk"}, {"role": "assistant", "content": "Chunk-based file formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-index"}, {"role": "assistant", "content": "Git index format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-common"}, {"role": "assistant", "content": "Things common to various protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-http"}, {"role": "assistant", "content": "Git HTTP-based protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-pack"}, {"role": "assistant", "content": "How packs are transferred over-the-wire"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-v2"}, {"role": "assistant", "content": "Git Wire Protocol, Version 2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <object>"}, {"role": "assistant", "content": "Indicates the object name for any type of object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <blob>"}, {"role": "assistant", "content": "Indicates a blob object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree>"}, {"role": "assistant", "content": "Indicates a tree object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit>"}, {"role": "assistant", "content": "Indicates a commit object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit-ish>"}, {"role": "assistant", "content": "Indicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <file>"}, {"role": "assistant", "content": "Indicates a filename - almost always relative to the\nroot of the tree structure GIT_INDEX_FILE describes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  HEAD"}, {"role": "assistant", "content": "indicates the head of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tag>"}, {"role": "assistant", "content": "a valid tag name (i.e. a refs/tags/<tag> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <head>"}, {"role": "assistant", "content": "a valid head name (i.e. a refs/heads/<head> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "File/Directory Structure Please see the gitrepository-layout document. Read githooks for more details about each hook. Higher level SCMs may provide and manage additional information in the $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Terminology Please see gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIR"}, {"role": "assistant", "content": "If the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_WORK_TREE"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nThis can also be controlled by the --work-tree command-line\noption and the core.worktree configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NAMESPACE"}, {"role": "assistant", "content": "Set the Git namespace; see gitnamespaces for details.\nThe --namespace command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CEILING_DIRECTORIES"}, {"role": "assistant", "content": "This should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMON_DIR"}, {"role": "assistant", "content": "If this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout and git-worktree for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_REF_FORMAT"}, {"role": "assistant", "content": "If this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_NAME"}, {"role": "assistant", "content": "The human-readable name used in the committer identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_DATE"}, {"role": "assistant", "content": "The date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EXTERNAL_DIFF"}, {"role": "assistant", "content": "When the environment variable GIT_EXTERNAL_DIFF is set, the\nprogram named by it is called to generate diffs, and Git\ndoes not use its builtin diff machinery.\nFor a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters: path old-file old-hex old-mode new-file new-hex new-mode where:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-mode"}, {"role": "assistant", "content": "are the octal representation of the file modes. The file parameters can point at the user’s working file\n(e.g. new-file in \"git-diff-files\"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the\nindex). GIT_EXTERNAL_DIFF should not worry about unlinking the\ntemporary file — it is removed when GIT_EXTERNAL_DIFF exits. For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\nparameter, <path>. For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_TOTAL"}, {"role": "assistant", "content": "The total number of paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides $EDITOR and $VISUAL .\nIt is used by several Git commands when, on interactive mode,\nan editor is to be launched. See also git-var and the core.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SEQUENCE_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase and the sequence.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH  GIT_SSH_COMMAND"}, {"role": "assistant", "content": "If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\nThe command-line parameters passed to the configured command are\ndetermined by the ssh variant.  See ssh.variant option in git-config for details. $GIT_SSH_COMMAND takes precedence over $GIT_SSH , and is interpreted\nby the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded). Usually it is easier to configure any desired options through your\npersonal .ssh/config file.  Please consult your ssh documentation\nfor further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git’s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ATTR_SOURCE"}, {"role": "assistant", "content": "Sets the treeish that gitattributes will be read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ASKPASS"}, {"role": "assistant", "content": "If this environment variable is set, then Git commands which need to\nacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\nwill call this program with a suitable prompt as command-line argument\nand read the password from its STDOUT. See also the core.askPass option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TERMINAL_PROMPT"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, git will not prompt\non the terminal (e.g., when asking for HTTP authentication)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_FLUSH"}, {"role": "assistant", "content": "If this Boolean environment variable is set to true, then commands such\nas git blame (in incremental mode), git rev-list , git log , git check-attr and git check-ignore will\nforce a flush of the output stream after each record have been\nflushed. If this\nvariable is set to false, the output of these commands will be done\nusing completely buffered I/O.   If this environment variable is\nnot set, Git will choose buffered or record-oriented flushing\nbased on whether stdout appears to be redirected to a file or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_FSMONITOR"}, {"role": "assistant", "content": "Enables trace messages for the filesystem monitor extension.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACK_ACCESS"}, {"role": "assistant", "content": "Enables trace messages for all accesses to any packs. For each\naccess, the pack file name and an offset in the pack is\nrecorded. This may be helpful for troubleshooting some\npack-related performance problems.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKET"}, {"role": "assistant", "content": "Enables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKFILE"}, {"role": "assistant", "content": "Enables tracing of packfiles sent or received by a\ngiven program. Unlike other trace output, this trace is\nverbatim: no headers, and no quoting of binary data. You almost\ncertainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack ) rather than displaying it on\nthe terminal or mixing it with other trace output. Note that this is currently only implemented for the client side\nof clones and fetches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PERFORMANCE"}, {"role": "assistant", "content": "Enables performance related trace messages, e.g. total execution\ntime of each Git command.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SETUP"}, {"role": "assistant", "content": "Enables trace messages printing the .git, working tree and current\nworking directory after Git has completed its setup phase.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SHALLOW"}, {"role": "assistant", "content": "Enables trace messages that can help debugging fetching /\ncloning of shallow repositories.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2"}, {"role": "assistant", "content": "Enables more detailed trace messages from the \"trace2\" library.\nOutput from GIT_TRACE2 is a simple text-based format for human\nreadability. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions). In addition, if the variable is set to af_unix:[<socket-type>:]<absolute-pathname> , Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either stream or dgram . Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages. See Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_PERF"}, {"role": "assistant", "content": "In addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REDACT"}, {"role": "assistant", "content": "By default, when tracing is activated, Git redacts the values of\ncookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\nheader and packfile URIs. Set this Boolean environment variable to false to prevent this\nredaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_REPLACE_OBJECTS"}, {"role": "assistant", "content": "Setting and exporting this environment variable tells Git to\nignore replacement refs and do not replace Git objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_LITERAL_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs literally, rather than as glob patterns. For example,\nrunning GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search\nfor commits that touch the path *.c , not any paths that the\nglob *.c matches. You might want this if you are feeding\nliteral paths to Git (e.g., paths previously given to you by git ls-tree , --raw diff output, etc)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REFLOG_ACTION"}, {"role": "assistant", "content": "When a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REF_PARANOIA"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA"}, {"role": "assistant", "content": "When loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALLOW_PROTOCOL"}, {"role": "assistant", "content": "If set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL_FROM_USER"}, {"role": "assistant", "content": "Set this Boolean environment variable to false to prevent protocols used by fetch/push/clone which are\nconfigured to the user state.  This is useful to restrict recursive\nsubmodule initialization from an untrusted repository or for programs\nwhich feed potentially-untrusted URLS to git commands.  See git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OPTIONAL_LOCKS"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REDIRECT_STDIN  GIT_REDIRECT_STDOUT  GIT_REDIRECT_STDERR"}, {"role": "assistant", "content": "Windows-only: allow redirecting the standard input/output/error\nhandles to paths specified by the environment variables. This is\nparticularly useful in multi-threaded applications where the\ncanonical way to pass standard handles via CreateProcess() is\nnot an option because it would require the handles to be marked\ninheritable (and consequently every spawned process would\ninherit them, possibly blocking regular Git operations). The\nprimary intended use case is to use named pipes for communication\n(e.g. \\\\.\\pipe\\my-git-stdin-123 ). Two special values are supported: off will simply close the\ncorresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1 , standard error will be redirected to the same handle as\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout ) and the raw\ndiff output ( git-diff ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial both provide\nintroductions to the underlying Git architecture. See gitworkflows for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Authors Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n< git@vger.kernel.org >. https://openhub.net/p/git/contributors/summary gives you a more complete list of contributors. If you have a clone of git.git itself, the\noutput of git-shortlog and git-blame can show you\nthe authors for specific parts of the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Reporting Bugs Report bugs to the Git mailing list < git@vger.kernel.org > where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions. Issues which are security relevant should be disclosed privately to\nthe Git Security mailing list < git-security@googlegroups.com >."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "NAME git-config - Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "SYNOPSIS git config [<file-option>] [--type=<type>] [--comment=<message>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] <name> [<value> [<value-pattern>]] git config [<file-option>] [--type=<type>] [--comment=<message>] --add <name> <value> git config [<file-option>] [--type=<type>] [--comment=<message>] [--fixed-value] --replace-all <name> <value> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get <name> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all <name> [<value-pattern>] git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp <name-regex> [<value-pattern>] git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch <name> <URL> git config [<file-option>] [--fixed-value] --unset <name> [<value-pattern>] git config [<file-option>] [--fixed-value] --unset-all <name> [<value-pattern>] git config [<file-option>] --rename-section <old-name> <new-name> git config [<file-option>] --remove-section <name> git config [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list git config [<file-option>] --get-color <name> [<default>] git config [<file-option>] --get-colorbool <name> [<stdout-is-tty>] git config [<file-option>] -e | --edit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "DESCRIPTION You can query/set/replace/unset options with this command. The name is\nactually the section and the key separated by a dot, and the value will be\nescaped. Multiple lines can be added to an option by using the --add option.\nIf you want to update or unset an option which can occur on multiple\nlines, a value-pattern (which is an extended regular expression,\nunless the --fixed-value option is given) needs to be given.  Only the\nexisting values that match the pattern are updated or unset.  If\nyou want to handle the lines that do not match the pattern, just\nprepend a single exclamation mark in front (see also EXAMPLES ),\nbut note that this only works when the --fixed-value option is not\nin use. The --type=<type> option instructs git config to ensure that incoming and\noutgoing values are canonicalize-able under the given <type>.  If no --type=<type> is given, no canonicalization will be performed. Callers may\nunset an existing --type specifier with --no-type . When reading, the values are read from the system, global and\nrepository local configuration files by default, and options --system , --global , --local , --worktree and --file <filename> can be used to tell the command to read from only\nthat location (see FILES ). When writing, the new value is written to the repository local\nconfiguration file by default, and options --system , --global , --worktree , --file <filename> can be used to tell the command to\nwrite to that location (you can say --local but that is the\ndefault). This command will fail with non-zero status upon error.  Some exit\ncodes are: The section or key is invalid (ret=1), no section or name was provided (ret=2), the config file is invalid (ret=3), the config file cannot be written (ret=4), you try to unset an option which does not exist (ret=5), you try to unset/set an option for which multiple lines match (ret=5), or you try to use an invalid regexp (ret=6). On success, the command returns the exit code 0. A list of all available configuration variables can be obtained using the git help --config command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --replace-all"}, {"role": "assistant", "content": "Default behavior is to replace at most one line. This replaces\nall lines matching the key (and optionally the value-pattern )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --add"}, {"role": "assistant", "content": "Adds a new line to the option without altering any existing\nvalues.  This is the same as providing ^$ as the value-pattern in --replace-all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --comment <message>"}, {"role": "assistant", "content": "Append a comment at the end of new or modified lines. If _<message>_ begins with one or more whitespaces followed\nby \"#\", it is used as-is.  If it begins with \"#\", a space is\nprepended before it is used.  Otherwise, a string \" # \" (a\nspace followed by a hash followed by a space) is prepended\nto it.  And the resulting string is placed immediately after\nthe value defined for the variable.  The _<message>_ must\nnot contain linefeed characters (no multi-line comments are\npermitted)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get"}, {"role": "assistant", "content": "Get the value for a given key (optionally filtered by a regex\nmatching the value). Returns error code 1 if the key was not\nfound and the last value if multiple key values were found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-all"}, {"role": "assistant", "content": "Like get, but returns all values for a multi-valued key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-regexp"}, {"role": "assistant", "content": "Like --get-all, but interprets the name as a regular expression and\nwrites out the key names.  Regular expression matching is currently\ncase-sensitive and done against a canonicalized version of the key\nin which section and variable names are lowercased, but subsection\nnames are not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-urlmatch <name> <URL>"}, {"role": "assistant", "content": "When given a two-part <name> as <section>.<key>, the value for\n<section>.<URL>.<key> whose <URL> part matches the best to the\ngiven URL is returned (if no such key exists, the value for\n<section>.<key> is used as a fallback).  When given just the\n<section> as name, do so for all the keys in the section and\nlist them.  Returns error code 1 if no value is found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --global"}, {"role": "assistant", "content": "For writing options: write to global ~/.gitconfig file\nrather than the repository .git/config , write to $XDG_CONFIG_HOME/git/config file if this file exists and the ~/.gitconfig file doesn’t. For reading options: read only from global ~/.gitconfig and from $XDG_CONFIG_HOME/git/config rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --system"}, {"role": "assistant", "content": "For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config . For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --local"}, {"role": "assistant", "content": "For writing options: write to the repository .git/config file.\nThis is the default behavior. For reading options: read only from the repository .git/config rather than\nfrom all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --worktree"}, {"role": "assistant", "content": "Similar to --local except that $GIT_DIR/config.worktree is\nread from or written to if extensions.worktreeConfig is\nenabled. If not it’s the same as --local . Note that $GIT_DIR is equal to $GIT_COMMON_DIR for the main working tree, but is of\nthe form $GIT_DIR/worktrees/<id>/ for other working trees. See git-worktree to learn how to enable extensions.worktreeConfig ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -f <config-file>  --file <config-file>"}, {"role": "assistant", "content": "For writing options: write to the specified file rather than the\nrepository .git/config . For reading options: read only from the specified file rather than from all\navailable files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --blob <blob>"}, {"role": "assistant", "content": "Similar to --file but use the given blob instead of a file. E.g.\nyou can use master:.gitmodules to read values from the file .gitmodules in the master branch. See \"SPECIFYING REVISIONS\"\nsection in gitrevisions for a more complete list of\nways to spell blob names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --remove-section"}, {"role": "assistant", "content": "Remove the given section from the configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --rename-section"}, {"role": "assistant", "content": "Rename the given section to a new name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --unset"}, {"role": "assistant", "content": "Remove the line matching the key from config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --unset-all"}, {"role": "assistant", "content": "Remove all lines matching the key from config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -l  --list"}, {"role": "assistant", "content": "List all variables set in config file, along with their values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --fixed-value"}, {"role": "assistant", "content": "When used with the value-pattern argument, treat value-pattern as\nan exact string instead of a regular expression. This will restrict\nthe name/value pairs that are matched to only those where the value\nis exactly equal to the value-pattern ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --type <type>"}, {"role": "assistant", "content": "git config will ensure that any input or output is valid under the given\ntype constraint(s), and will canonicalize outgoing values in <type> 's\ncanonical form. Valid <type> 's include: bool : canonicalize values as either \"true\" or \"false\". int : canonicalize values as simple decimal numbers. An optional suffix of k , m , or g will cause the value to be multiplied by 1024, 1048576, or\n1073741824 upon input. bool-or-int : canonicalize according to either bool or int , as described\nabove. path : canonicalize by expanding a leading ~ to the value of $HOME and ~user to the home directory for the specified user. This specifier has no\neffect when setting the value (but you can use git config section.variable\n~/ from the command line to let your shell do the expansion.) expiry-date : canonicalize by converting from a fixed or relative date-string\nto a timestamp. This specifier has no effect when setting the value. color : When getting a value, canonicalize by converting to an ANSI color\nescape sequence. When setting a value, a sanity-check is performed to ensure\nthat the given value is canonicalize-able as an ANSI color, but it is written\nas-is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --bool  --int  --bool-or-int  --path  --expiry-date"}, {"role": "assistant", "content": "Historical options for selecting a type specifier. Prefer instead --type (see above)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --no-type"}, {"role": "assistant", "content": "Un-sets the previously set type specifier (if one was previously set). This\noption requests that git config not canonicalize the retrieved variable. --no-type has no effect without --type=<type> or --<type> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -z  --null"}, {"role": "assistant", "content": "For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --name-only"}, {"role": "assistant", "content": "Output only the names of config variables for --list or --get-regexp ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --show-origin"}, {"role": "assistant", "content": "Augment the output of all queried config options with the\norigin type (file, standard input, blob, command line) and\nthe actual origin (config file path, ref, or blob id if\napplicable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --show-scope"}, {"role": "assistant", "content": "Similar to --show-origin in that it augments the output of\nall queried config options with the scope of that value\n(worktree, local, global, system, command)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-colorbool <name> [<stdout-is-tty>]"}, {"role": "assistant", "content": "Find the color setting for <name> (e.g. color.diff ) and output\n\"true\" or \"false\". <stdout-is-tty> should be either \"true\" or\n\"false\", and is taken into account when configuration says\n\"auto\".  If <stdout-is-tty> is missing, then checks the standard\noutput of the command itself, and exits with status 0 if color\nis to be used, or exits with status 1 otherwise.\nWhen the color setting for name is undefined, the command uses color.ui as fallback."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --get-color <name> [<default>]"}, {"role": "assistant", "content": "Find the color configured for name (e.g. color.diff.new ) and\noutput it as the ANSI color escape sequence to the standard\noutput.  The optional default parameter is used instead, if\nthere is no color configured for name . --type=color [--default=<default>] is preferred over --get-color (but note that --get-color will omit the trailing newline printed by --type=color )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  -e  --edit"}, {"role": "assistant", "content": "Opens an editor to modify the specified config file; either --system , --global , --local (default), --worktree , or --file <config-file> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --[no-]includes"}, {"role": "assistant", "content": "Respect include.* directives in config files when looking up\nvalues. Defaults to off when a specific file is given (e.g.,\nusing --file , --global , etc) and on when searching all\nconfig files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --default <value>"}, {"role": "assistant", "content": "When using --get , and the requested variable is not found, behave as if\n<value> were the value assigned to that variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "CONFIGURATION pager.config is only respected when listing configuration, i.e., when\nusing --list or any of the --get-* which may return multiple results.\nThe default is to use a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $(prefix)/etc/gitconfig"}, {"role": "assistant", "content": "System-wide configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $XDG_CONFIG_HOME/git/config  ~/.gitconfig"}, {"role": "assistant", "content": "User-specific configuration files. When the XDG_CONFIG_HOME environment\nvariable is not set or empty, $HOME/.config/ is used as\n$XDG_CONFIG_HOME. These are also called \"global\" configuration files. If both files exist, both\nfiles are read in the order given above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $GIT_DIR/config"}, {"role": "assistant", "content": "Repository specific configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $GIT_DIR/config.worktree"}, {"role": "assistant", "content": "This is optional and is only searched when extensions.worktreeConfig is present in $GIT_DIR/config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  system"}, {"role": "assistant", "content": "$(prefix)/etc/gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  global"}, {"role": "assistant", "content": "$XDG_CONFIG_HOME/git/config ~/.gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  local"}, {"role": "assistant", "content": "$GIT_DIR/config"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktree"}, {"role": "assistant", "content": "$GIT_DIR/config.worktree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  command"}, {"role": "assistant", "content": "GIT_CONFIG_{COUNT,KEY,VALUE} environment variables (see ENVIRONMENT below) the -c option"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration. See git for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide\n$(prefix)/etc/gitconfig file. See git for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_COUNT  GIT_CONFIG_KEY_<n>  GIT_CONFIG_VALUE_<n>"}, {"role": "assistant", "content": "If GIT_CONFIG_COUNT is set to a positive number, all environment pairs\nGIT_CONFIG_KEY_<n> and GIT_CONFIG_VALUE_<n> up to that number will be\nadded to the process’s runtime configuration. The config pairs are\nzero-indexed. Any missing key or value is treated as an error. An empty\nGIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no\npairs are processed. These environment variables will override values\nin configuration files, but will be overridden by any explicit options\npassed via git -c . This is useful for cases where you want to spawn multiple git commands\nwith a common configuration but cannot depend on a configuration file,\nfor example when writing scripts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG"}, {"role": "assistant", "content": "If no --file option is provided to git config , use the file\ngiven by GIT_CONFIG as if it were provided via --file . This\nvariable has no effect on other Git commands, and is mostly for\nhistorical compatibility; there is generally no reason to use it\ninstead of the --file option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "EXAMPLES Given a .git/config like this: #\n# This is the config file, and\n# a '#' or ';' character indicates\n# a comment\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; Our diff algorithm\n[diff]\n\texternal = /usr/local/bin/diff-wrapper\n\trenames = true\n\n; Proxy settings\n[core]\n\tgitproxy=proxy-command for kernel.org\n\tgitproxy=default-proxy ; for all the rest\n\n; HTTP\n[http]\n\tsslVerify\n[http \"https://weak.example.com\"]\n\tsslVerify = false\n\tcookieFile = /tmp/cookie.txt you can set the filemode to true with % git config core.filemode true The hypothetical proxy command entries actually have a postfix to discern\nwhat URL they apply to. Here is how to change the entry for kernel.org\nto \"ssh\". % git config core.gitproxy '\"ssh\" for kernel.org' 'for kernel.org$' This makes sure that only the key/value pair for kernel.org is replaced. To delete the entry for renames, do % git config --unset diff.renames If you want to delete an entry for a multivar (like core.gitproxy above),\nyou have to provide a regex matching the value of exactly one line. To query the value for a given key, do % git config --get core.filemode or % git config core.filemode or, to query a multivar: % git config --get core.gitproxy \"for kernel.org$\" If you want to know all the values for a multivar, do: % git config --get-all core.gitproxy If you like to live dangerously, you can replace all core.gitproxy by a\nnew one with % git config --replace-all core.gitproxy ssh However, if you really only want to replace the line for the default proxy,\ni.e. the one without a \"for …​\" postfix, do something like this: % git config core.gitproxy ssh '! for ' To actually match only values with an exclamation mark, you have to % git config section.key value '[!]' To add a new proxy, without altering any of the existing ones, use % git config --add core.gitproxy '\"proxy-command\" for example.com' An example to use customized color from the configuration in your\nscript: #!/bin/sh\nWS=$(git config --get-color color.diff.whitespace \"blue reverse\")\nRESET=$(git config --get-color \"\" \"reset\")\necho \"${WS}your whitespace color or blue reverse${RESET}\" For URLs in https://weak.example.com , http.sslVerify is set to\nfalse, while it is set to true for all others: % git config --type=bool --get-urlmatch http.sslverify https://good.example.com\ntrue\n% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com\nfalse\n% git config --get-urlmatch http https://weak.example.com\nhttp.cookieFile /tmp/cookie.txt\nhttp.sslverify false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitdir"}, {"role": "assistant", "content": "The data that follows the keyword gitdir: is used as a glob\npattern. If the location of the .git directory matches the\npattern, the include condition is met. The .git location may be auto-discovered, or come from $GIT_DIR environment variable. If the repository is auto-discovered via a .git\nfile (e.g. from submodules, or a linked worktree), the .git location\nwould be the final location where the .git directory is, not where the\n.git file is. The pattern can contain standard globbing wildcards and two additional\nones, **/ and /** , that can match multiple path components. Please\nrefer to gitignore for details. For convenience: If the pattern starts with ~/ , ~ will be substituted with the\ncontent of the environment variable HOME . If the pattern starts with ./ , it is replaced with the directory\ncontaining the current config file. If the pattern does not start with either ~/ , ./ or / , **/ will be automatically prepended. For example, the pattern foo/bar becomes **/foo/bar and would match /any/path/to/foo/bar . If the pattern ends with / , ** will be automatically added. For\nexample, the pattern foo/ becomes foo/** . In other words, it\nmatches \"foo\" and everything inside, recursively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitdir/i"}, {"role": "assistant", "content": "This is the same as gitdir except that matching is done\ncase-insensitively (e.g. on case-insensitive file systems)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  onbranch"}, {"role": "assistant", "content": "The data that follows the keyword onbranch: is taken to be a\npattern with standard globbing wildcards and two additional\nones, **/ and /** , that can match multiple path components.\nIf we are in a worktree where the name of the branch that is\ncurrently checked out matches the pattern, the include condition\nis met. If the pattern ends with / , ** will be automatically added. For\nexample, the pattern foo/ becomes foo/** . In other words, it matches\nall branches that begin with foo/ . This is useful if your branches are\norganized hierarchically and you would like to apply a configuration to\nall the branches in that hierarchy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  hasconfig:remote.*.url:"}, {"role": "assistant", "content": "The data that follows this keyword is taken to\nbe a pattern with standard globbing wildcards and two\nadditional ones, **/ and /** , that can match multiple\ncomponents. The first time this keyword is seen, the rest of\nthe config files will be scanned for remote URLs (without\napplying any values). If there exists at least one remote URL\nthat matches this pattern, the include condition is met. Files included by this option (directly or indirectly) are not allowed\nto contain remote URLs. Note that unlike other includeIf conditions, resolving this condition\nrelies on information that is not yet known at the point of reading the\ncondition. A typical use case is this option being present as a\nsystem-level or global-level config, and the remote URL being in a\nlocal-level config; hence the need to scan ahead when resolving this\ncondition. In order to avoid the chicken-and-egg problem in which\npotentially-included files can affect whether such files are potentially\nincluded, Git breaks the cycle by prohibiting these files from affecting\nthe resolution of these conditions (thus, prohibiting them from\ndeclaring remote URLs). As for the naming of this keyword, it is for forwards compatibility with\na naming scheme that supports more variable-based include conditions,\nbut currently Git only supports the exact keyword described above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  boolean"}, {"role": "assistant", "content": "When a variable is said to take a boolean value, many\nsynonyms are accepted for true and false ; these are all\ncase-insensitive. true Boolean true literals are yes , on , true ,\nand 1 .  Also, a variable defined without = <value> is taken as true. false Boolean false literals are no , off , false , 0 and the empty string. When converting a value to its canonical form using the --type=bool type\nspecifier, git config will ensure that the output is \"true\" or\n\"false\" (spelled in lowercase)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  integer"}, {"role": "assistant", "content": "The value for many variables that specify various sizes can\nbe suffixed with k , M ,…​ to mean \"scale the number by\n1024\", \"by 1024x1024\", etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color"}, {"role": "assistant", "content": "The value for a variable that takes a color is a list of\ncolors (at most two, one for foreground and one for background)\nand attributes (as many as you want), separated by spaces. The basic colors accepted are normal , black , red , green , yellow , blue , magenta , cyan , white and default .  The first\ncolor given is the foreground; the second is the background.  All the\nbasic colors except normal and default have a bright variant that can\nbe specified by prefixing the color with bright , like brightred . The color normal makes no change to the color. It is the same as an\nempty string, but can be used as the foreground color when specifying a\nbackground color alone (for example, \"normal red\"). The color default explicitly resets the color to the terminal default,\nfor example to specify a cleared background. Although it varies between\nterminals, this is usually not the same as setting to \"white black\". Colors may also be given as numbers between 0 and 255; these use ANSI\n256-color mode (but note that not all terminals may support this).  If\nyour terminal supports it, you may also specify 24-bit RGB values as\nhex, like #ff0ab3 . The accepted attributes are bold , dim , ul , blink , reverse , italic , and strike (for crossed-out or \"strikethrough\" letters).\nThe position of any attributes with respect to the colors\n(before, after, or in between), doesn’t matter. Specific attributes may\nbe turned off by prefixing them with no or no- (e.g., noreverse , no-ul , etc). The pseudo-attribute reset resets all colors and attributes before\napplying the specified coloring. For example, reset green will result\nin a green foreground and default background without any active\nattributes. An empty color string produces no color effect at all. This can be used\nto avoid coloring specific elements without disabling color entirely. For git’s pre-defined color slots, the attributes are meant to be reset\nat the beginning of each item in the colored output. So setting color.decorate.branch to black will paint that branch name in a\nplain black , even if the previous thing on the same output line (e.g.\nopening parenthesis before the list of branch names in log --decorate output) is set to be painted with bold or some other attribute.\nHowever, custom log formats may do more complicated and layered\ncoloring, and the negated forms may be useful there."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pathname"}, {"role": "assistant", "content": "A variable that takes a pathname value can be given a\nstring that begins with \" ~/ \" or \" ~user/ \", and the usual\ntilde expansion happens to such a string: ~/ is expanded to the value of $HOME , and ~user/ to the\nspecified user’s home directory. If a path starts with %(prefix)/ , the remainder is interpreted as a\npath relative to Git’s \"runtime prefix\", i.e. relative to the location\nwhere Git itself was installed. For example, %(prefix)/bin/ refers to\nthe directory in which the Git executable itself lives. If Git was\ncompiled without runtime prefix support, the compiled-in prefix will be\nsubstituted instead. In the unlikely event that a literal path needs to\nbe specified that should not be expanded, it needs to be prefixed by ./ , like so: ./%(prefix)/bin ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  true"}, {"role": "assistant", "content": "Boolean true literals are yes , on , true ,\nand 1 .  Also, a variable defined without = <value> is taken as true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  false"}, {"role": "assistant", "content": "Boolean false literals are no , off , false , 0 and the empty string. When converting a value to its canonical form using the --type=bool type\nspecifier, git config will ensure that the output is \"true\" or\n\"false\" (spelled in lowercase)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  add.ignoreErrors  add.ignore-errors (deprecated)"}, {"role": "assistant", "content": "Tells git add to continue adding files when some files cannot be\nadded due to indexing errors. Equivalent to the --ignore-errors option of git-add . add.ignore-errors is deprecated,\nas it does not follow the usual naming convention for configuration\nvariables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  add.interactive.useBuiltin"}, {"role": "assistant", "content": "Unused configuration variable. Used in Git versions v2.25.0 to\nv2.36.0 to enable the built-in version of git-add 's\ninteractive mode, which then became the default in Git\nversions v2.37.0 to v2.39.0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  advice.*"}, {"role": "assistant", "content": "These variables control various optional help messages designed to\naid new users.  When left unconfigured, Git will give the message\nalongside instructions on how to squelch it.  You can tell Git\nthat you do not need the help message by setting these to false : addEmbeddedRepo Shown when the user accidentally adds one\ngit repo inside of another. addEmptyPathspec Shown when the user runs git add without providing\nthe pathspec parameter. addIgnoredFile Shown when the user attempts to add an ignored file to\nthe index. amWorkDir Shown when git-am fails to apply a patch\nfile, to tell the user the location of the file. ambiguousFetchRefspec Shown when a fetch refspec for multiple remotes maps to\nthe same remote-tracking branch namespace and causes branch\ntracking set-up to fail. checkoutAmbiguousRemoteBranchName Shown when the argument to git-checkout and git-switch ambiguously resolves to a\nremote tracking branch on more than one remote in\nsituations where an unambiguous argument would have\notherwise caused a remote-tracking branch to be\nchecked out. See the checkout.defaultRemote configuration variable for how to set a given remote\nto be used by default in some situations where this\nadvice would be printed. commitBeforeMerge Shown when git-merge refuses to\nmerge to avoid overwriting local changes. detachedHead Shown when the user uses git-switch or git-checkout to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact. diverging Shown when a fast-forward is not possible. fetchShowForcedUpdates Shown when git-fetch takes a long time\nto calculate forced updates after ref updates, or to warn\nthat the check is disabled. forceDeleteBranch Shown when the user tries to delete a not fully merged\nbranch without the force option set. ignoredHook Shown when a hook is ignored because the hook is not\nset as executable. implicitIdentity Shown when the user’s information is guessed from the\nsystem username and domain name, to tell the user how to\nset their identity configuration. mergeConflict Shown when various commands stop because of conflicts. nestedTag Shown when a user attempts to recursively tag a tag object. pushAlreadyExists Shown when git-push rejects an update that\ndoes not qualify for fast-forwarding (e.g., a tag.) pushFetchFirst Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject we do not have. pushNeedsForce Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject that is not a commit-ish, or make the remote\nref point at an object that is not a commit-ish. pushNonFFCurrent Shown when git-push fails due to a\nnon-fast-forward update to the current branch. pushNonFFMatching Shown when the user ran git-push and pushed\n\"matching refs\" explicitly (i.e. used : , or\nspecified a refspec that isn’t the current branch) and\nit resulted in a non-fast-forward error. pushRefNeedsUpdate Shown when git-push rejects a forced update of\na branch when its remote-tracking ref has updates that we\ndo not have locally. pushUnqualifiedRefname Shown when git-push gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object. pushUpdateRejected Set this variable to false if you want to disable pushNonFFCurrent , pushNonFFMatching , pushAlreadyExists , pushFetchFirst , pushNeedsForce , and pushRefNeedsUpdate simultaneously. refSyntax Shown when the user provides an illegal ref name, to\ntell the user about the ref syntax documentation. resetNoRefresh Shown when git-reset takes more than 2\nseconds to refresh the index after reset, to tell the user\nthat they can use the --no-refresh option. resolveConflict Shown by various commands when conflicts\nprevent the operation from being performed. rmHints Shown on failure in the output of git-rm , to\ngive directions on how to proceed from the current state. sequencerInUse Shown when a sequencer command is already in progress. skippedCherryPicks Shown when git-rebase skips a commit that has already\nbeen cherry-picked onto the upstream branch. statusAheadBehind Shown when git-status computes the ahead/behind\ncounts for a local ref compared to its remote tracking ref,\nand that calculation takes longer than expected. Will not\nappear if status.aheadBehind is false or the option --no-ahead-behind is given. statusHints Show directions on how to proceed from the current\nstate in the output of git-status , in\nthe template shown when writing commit messages in git-commit , and in the help message shown\nby git-switch or git-checkout when switching branches. statusUoption Shown when git-status takes more than 2\nseconds to enumerate untracked files, to tell the user that\nthey can use the -u option. submoduleAlternateErrorStrategyDie Shown when a submodule.alternateErrorStrategy option\nconfigured to \"die\" causes a fatal error. submoduleMergeConflict Advice shown when a non-trivial submodule merge conflict is\nencountered. submodulesNotUpdated Shown when a user runs a submodule command that fails\nbecause git submodule update --init was not run. suggestDetachingHead Shown when git-switch refuses to detach HEAD\nwithout the explicit --detach option. updateSparsePath Shown when either git-add or git-rm is asked to update index entries outside the current sparse\ncheckout. waitingForEditor Shown when Git is waiting for editor input. Relevant\nwhen e.g. the editor is not launched inside the terminal. worktreeAddOrphan Shown when the user tries to create a worktree from an\ninvalid reference, to tell the user how to create a new unborn\nbranch instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  alias.*"}, {"role": "assistant", "content": "Command aliases for the git command wrapper - e.g.\nafter defining alias.last = cat-file commit HEAD , the invocation git last is equivalent to git cat-file commit HEAD . To avoid\nconfusion and troubles with script usage, aliases that\nhide existing Git commands are ignored. Arguments are split by\nspaces, the usual shell quoting and escaping are supported.\nA quote pair or a backslash can be used to quote them. Note that the first word of an alias does not necessarily have to be a\ncommand. It can be a command-line option that will be passed into the\ninvocation of git . In particular, this is useful when used with -c to pass in one-time configurations or -p to force pagination. For example, loud-rebase = -c commit.verbose=true rebase can be defined such that\nrunning git loud-rebase would be equivalent to git -c commit.verbose=true rebase . Also, ps = -p status would be a\nhelpful alias since git ps would paginate the output of git status where the original command does not. If the alias expansion is prefixed with an exclamation point,\nit will be treated as a shell command.  For example, defining alias.new = !gitk --all --not ORIG_HEAD , the invocation git new is equivalent to running the shell command gitk --all --not ORIG_HEAD .  Note that shell commands will be\nexecuted from the top-level directory of a repository, which may\nnot necessarily be the current directory. GIT_PREFIX is set as returned by running git rev-parse --show-prefix from the original current directory. See git-rev-parse ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  am.keepcr"}, {"role": "assistant", "content": "If true, git-am will call git-mailsplit for patches in mbox format\nwith parameter --keep-cr . In this case git-mailsplit will\nnot remove \\r from lines ending with \\r\\n . Can be overridden\nby giving --no-keep-cr from the command line.\nSee git-am , git-mailsplit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  am.threeWay"}, {"role": "assistant", "content": "By default, git am will fail if the patch does not apply cleanly. When\nset to true, this setting tells git am to fall back on 3-way merge if\nthe patch records the identity of blobs it is supposed to apply to and\nwe have those blobs available locally (equivalent to giving the --3way option from the command line). Defaults to false .\nSee git-am ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  apply.ignoreWhitespace"}, {"role": "assistant", "content": "When set to change , tells git apply to ignore changes in\nwhitespace, in the same way as the --ignore-space-change option.\nWhen set to one of: no, none, never, false, it tells git apply to\nrespect all whitespace differences.\nSee git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  apply.whitespace"}, {"role": "assistant", "content": "Tells git apply how to handle whitespace, in the same way\nas the --whitespace option. See git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  attr.tree"}, {"role": "assistant", "content": "A reference to a tree in the repository from which to read attributes,\ninstead of the .gitattributes file in the working tree. In a bare\nrepository, this defaults to HEAD:.gitattributes . If the value does\nnot resolve to a valid tree object, an empty tree is used instead.\nWhen the GIT_ATTR_SOURCE environment variable or --attr-source command line option are used, this configuration variable has no effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.blankBoundary"}, {"role": "assistant", "content": "Show blank commit object name for boundary commits in git-blame . This option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.coloring"}, {"role": "assistant", "content": "This determines the coloring scheme to be applied to blame\noutput. It can be repeatedLines , highlightRecent ,\nor none which is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.date"}, {"role": "assistant", "content": "Specifies the format used to output dates in git-blame .\nIf unset the iso format is used. For supported values,\nsee the discussion of the --date option at git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.showEmail"}, {"role": "assistant", "content": "Show the author email instead of author name in git-blame .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.showRoot"}, {"role": "assistant", "content": "Do not treat root commits as boundaries in git-blame .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.ignoreRevsFile"}, {"role": "assistant", "content": "Ignore revisions listed in the file, one unabbreviated object name per\nline, in git-blame .  Whitespace and comments beginning with # are ignored.  This option may be repeated multiple times.  Empty\nfile names will reset the list of ignored revisions.  This option will\nbe handled before the command line option --ignore-revs-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.markUnblamableLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we could not\nattribute to another commit with a * in the output of git-blame ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  blame.markIgnoredLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we attributed to\nanother commit with a ? in the output of git-blame ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.autoSetupMerge"}, {"role": "assistant", "content": "Tells git branch , git switch and git checkout to set up new branches\nso that git-pull will appropriately merge from the\nstarting point branch. Note that even if this option is not set,\nthis behavior can be chosen per-branch using the --track and --no-track options. The valid settings are: false — no\nautomatic setup is done; true — automatic setup is done when the\nstarting point is a remote-tracking branch; always — automatic setup is done when the starting point is either a\nlocal branch or remote-tracking branch; inherit — if the starting point\nhas a tracking configuration, it is copied to the new\nbranch; simple — automatic setup is done only when the starting point\nis a remote-tracking branch and the new branch has the same name as the\nremote branch. This option defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.autoSetupRebase"}, {"role": "assistant", "content": "When a new branch is created with git branch , git switch or git checkout that tracks another branch, this variable tells Git to set\nup pull to rebase instead of merge (see \"branch.<name>.rebase\").\nWhen never , rebase is never automatically set to true.\nWhen local , rebase is set to true for tracked branches of\nother local branches.\nWhen remote , rebase is set to true for tracked branches of\nremote-tracking branches.\nWhen always , rebase will be set to true for all tracking\nbranches.\nSee \"branch.autoSetupMerge\" for details on how to set up a\nbranch to track another branch.\nThis option defaults to never."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.sort"}, {"role": "assistant", "content": "This variable controls the sort ordering of branches when displayed by git-branch . Without the \"--sort=<value>\" option provided, the\nvalue of this variable will be used as the default.\nSee git-for-each-ref field names for valid values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.remote"}, {"role": "assistant", "content": "When on branch <name>, it tells git fetch and git push which remote to fetch from or push to.  The remote to push to\nmay be overridden with remote.pushDefault (for all branches).\nThe remote to push to, for the current branch, may be further\noverridden by branch.<name>.pushRemote .  If no remote is\nconfigured, or if you are not on any branch and there is more than\none remote defined in the repository, it defaults to origin for\nfetching and remote.pushDefault for pushing.\nAdditionally, . (a period) is the current local repository\n(a dot-repository), see branch.<name>.merge 's final note below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.pushRemote"}, {"role": "assistant", "content": "When on branch <name>, it overrides branch.<name>.remote for\npushing.  It also overrides remote.pushDefault for pushing\nfrom branch <name>.  When you pull from one place (e.g. your\nupstream) and push to another place (e.g. your own publishing\nrepository), you would want to set remote.pushDefault to\nspecify the remote to push to for all branches, and use this\noption to override it for a specific branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.merge"}, {"role": "assistant", "content": "Defines, together with branch.<name>.remote, the upstream branch\nfor the given branch. It tells git fetch / git pull / git rebase which\nbranch to merge and can also affect git push (see push.default).\nWhen in branch <name>, it tells git fetch the default\nrefspec to be marked for merging in FETCH_HEAD. The value is\nhandled like the remote part of a refspec, and must match a\nref which is fetched from the remote given by\n\"branch.<name>.remote\".\nThe merge information is used by git pull (which first calls git fetch ) to lookup the default branch for merging. Without\nthis option, git pull defaults to merge the first refspec fetched.\nSpecify multiple values to get an octopus merge.\nIf you wish to setup git pull so that it merges into <name> from\nanother branch in the local repository, you can point\nbranch.<name>.merge to the desired branch, and use the relative path\nsetting . (a period) for branch.<name>.remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.mergeOptions"}, {"role": "assistant", "content": "Sets default options for merging into branch <name>. The syntax and\nsupported options are the same as those of git-merge , but\noption values containing whitespace characters are currently not\nsupported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.rebase"}, {"role": "assistant", "content": "When true, rebase the branch <name> on top of the fetched branch,\ninstead of merging the default branch from the default remote when\n\"git pull\" is run. See \"pull.rebase\" for doing this in a non\nbranch-specific manner. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.description"}, {"role": "assistant", "content": "Branch description, can be edited with git branch --edit-description . Branch description is\nautomatically added to the format-patch cover letter or\nrequest-pull summary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  browser.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified browser. The\nspecified command is evaluated in shell with the URLs passed\nas arguments. (See git-web--browse .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  browser.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool that may be used to\nbrowse HTML help (see -w option in git-help ) or a\nworking repository in gitweb (see git-instaweb )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.*"}, {"role": "assistant", "content": "The bundle.* keys may appear in a bundle list file found via the git clone --bundle-uri option. These keys currently have no effect\nif placed in a repository config file, though this will change in the\nfuture. See the bundle URI design\ndocument for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.version"}, {"role": "assistant", "content": "This integer value advertises the version of the bundle list format\nused by the bundle list. Currently, the only accepted value is 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.mode"}, {"role": "assistant", "content": "This string value should be either all or any . This value describes\nwhether all of the advertised bundles are required to unbundle a\ncomplete understanding of the bundled information ( all ) or if any one\nof the listed bundle URIs is sufficient ( any )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.heuristic"}, {"role": "assistant", "content": "If this string-valued key exists, then the bundle list is designed to\nwork well with incremental git fetch commands. The heuristic signals\nthat there are additional keys available for each bundle that help\ndetermine which subset of bundles the client should download. The\nonly value currently understood is creationToken ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.<id>.*"}, {"role": "assistant", "content": "The bundle.<id>.* keys are used to describe a single item in the\nbundle list, grouped under <id> for identification purposes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  bundle.<id>.uri"}, {"role": "assistant", "content": "This string value defines the URI by which Git can reach the contents\nof this <id> . This URI may be a bundle file or another bundle list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.defaultRemote"}, {"role": "assistant", "content": "When you run git checkout <something> or git switch <something> and only have one\nremote, it may implicitly fall back on checking out and\ntracking e.g. origin/<something> . This stops working as soon\nas you have more than one remote with a <something> reference. This setting allows for setting the name of a\npreferred remote that should always win when it comes to\ndisambiguation. The typical use-case is to set this to origin . Currently this is used by git-switch and git-checkout when git checkout <something> or git switch <something> will checkout the <something> branch on another remote,\nand by git-worktree when git worktree add refers to a\nremote branch. This setting might be used for other checkout-like\ncommands or functionality in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.guess"}, {"role": "assistant", "content": "Provides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch and git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.workers"}, {"role": "assistant", "content": "The number of parallel workers to use when updating the working tree.\nThe default is one, i.e. sequential execution. If set to a value less\nthan one, Git will use as many workers as the number of logical cores\navailable. This setting and checkout.thresholdForParallelism affect\nall commands that perform checkout. E.g. checkout, clone, reset,\nsparse-checkout, etc. Note: Parallel checkout usually delivers better performance for repositories\nlocated on SSDs or over NFS. For repositories on spinning disks and/or machines\nwith a small number of cores, the default sequential checkout often performs\nbetter. The size and compression level of a repository might also influence how\nwell the parallel version performs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkout.thresholdForParallelism"}, {"role": "assistant", "content": "When running parallel checkout with a small number of files, the cost\nof subprocess spawning and inter-process communication might outweigh\nthe parallelization gains. This setting allows you to define the minimum\nnumber of files for which parallel checkout should be attempted. The\ndefault is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clean.requireForce"}, {"role": "assistant", "content": "A boolean to make git-clean refuse to delete files unless -f\nis given. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.defaultRemoteName"}, {"role": "assistant", "content": "The name of the remote to create when cloning a repository.  Defaults to origin .\nIt can be overridden by passing the --origin command-line\noption to git-clone ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.rejectShallow"}, {"role": "assistant", "content": "Reject cloning a repository if it is a shallow one; this can be overridden by\npassing the --reject-shallow option on the command line.\nSee git-clone ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  clone.filterSubmodules"}, {"role": "assistant", "content": "If a partial clone filter is provided (see --filter in git-rev-list ) and --recurse-submodules is used, also apply\nthe filter to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.advice"}, {"role": "assistant", "content": "A boolean to enable/disable color in hints (e.g. when a push\nfailed, see advice.* for a list).  May be set to always , false (or never ) or auto (or true ), in which case colors\nare used only when the error output goes to a terminal. If\nunset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.advice.hint"}, {"role": "assistant", "content": "Use customized color for hints."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.highlightRecent"}, {"role": "assistant", "content": "Specify the line annotation color for git blame --color-by-age depending upon the age of the line. This setting should be set to a comma-separated list of color and\ndate settings, starting and ending with a color, the dates should be\nset from oldest to newest. The metadata will be colored with the\nspecified colors if the line was introduced before the given\ntimestamp, overwriting older timestamped colors. Instead of an absolute timestamp relative timestamps work as well,\ne.g. 2.weeks.ago is valid to address anything older than 2 weeks. It defaults to blue,12 month ago,white,1 month ago,red , which\ncolors everything older than one year blue, recent changes between\none month and one year old are kept white, and lines introduced\nwithin the last month are colored red."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.repeatedLines"}, {"role": "assistant", "content": "Use the specified color to colorize line annotations for git blame --color-lines , if they come from the same commit as the\npreceding line. Defaults to cyan."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.branch"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-branch . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.branch.<slot>"}, {"role": "assistant", "content": "Use customized color for branch coloration. <slot> is one of current (the current branch), local (a local branch), remote (a remote-tracking branch in refs/remotes/), upstream (upstream tracking branch), plain (other\nrefs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.diff"}, {"role": "assistant", "content": "Whether to use ANSI escape sequences to add color to patches.\nIf this is set to always , git-diff , git-log , and git-show will use color\nfor all patches.  If it is set to true or auto , those\ncommands will only use color when output is to the terminal.\nIf unset, then the value of color.ui is used ( auto by\ndefault). This does not affect git-format-patch or the git-diff-* plumbing commands.  Can be overridden on the\ncommand line with the --color[=<when>] option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.diff.<slot>"}, {"role": "assistant", "content": "Use customized color for diff colorization. <slot> specifies\nwhich part of the patch to use the specified color, and is one\nof context (context text - plain is a historical synonym), meta (metainformation), frag (hunk header), func (function in hunk header), old (removed lines), new (added lines), commit (commit headers), whitespace (highlighting whitespace errors), oldMoved (deleted lines), newMoved (added lines), oldMovedDimmed , oldMovedAlternative , oldMovedAlternativeDimmed , newMovedDimmed , newMovedAlternative newMovedAlternativeDimmed (See the <mode> setting of --color-moved in git-diff for details), contextDimmed , oldDimmed , newDimmed , contextBold , oldBold , and newBold (see git-range-diff for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.decorate.<slot>"}, {"role": "assistant", "content": "Use customized color for git log --decorate output. <slot> is one\nof branch , remoteBranch , tag , stash or HEAD for local\nbranches, remote-tracking branches, tags, stash and HEAD, respectively\nand grafted for grafted commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.grep"}, {"role": "assistant", "content": "When set to always , always highlight matches.  When false (or never ), never.  When set to true or auto , use color only\nwhen the output is written to the terminal.  If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.grep.<slot>"}, {"role": "assistant", "content": "Use customized color for grep colorization. <slot> specifies which\npart of the line to use the specified color, and is one of context non-matching text in context lines (when using -A , -B , or -C ) filename filename prefix (when not using -h ) function function name lines (when using -p ) lineNumber line number prefix (when using -n ) column column number prefix (when using --column ) match matching text (same as setting matchContext and matchSelected ) matchContext matching text in context lines matchSelected matching text in selected lines. Also, used to customize the following git-log subcommands: --grep , --author , and --committer . selected non-matching text in selected lines. Also, used to customize the\nfollowing git-log subcommands: --grep , --author and --committer . separator separators between fields on a line ( : , - , and = )\nand between hunks ( -- )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.interactive"}, {"role": "assistant", "content": "When set to always , always use colors for interactive prompts\nand displays (such as those used by \"git-add --interactive\" and\n\"git-clean --interactive\"). When false (or never ), never.\nWhen set to true or auto , use colors only when the output is\nto the terminal. If unset, then the value of color.ui is\nused ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.interactive.<slot>"}, {"role": "assistant", "content": "Use customized color for git add --interactive and git clean\n--interactive output. <slot> may be prompt , header , help or error , for four distinct types of normal output from\ninteractive commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.pager"}, {"role": "assistant", "content": "A boolean to specify whether auto color modes should colorize\noutput going to the pager. Defaults to true; set this to false\nif your pager does not understand ANSI color codes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.push"}, {"role": "assistant", "content": "A boolean to enable/disable color in push errors. May be set to always , false (or never ) or auto (or true ), in which\ncase colors are used only when the error output goes to a terminal.\nIf unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.push.error"}, {"role": "assistant", "content": "Use customized color for push errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.remote"}, {"role": "assistant", "content": "If set, keywords at the start of the line are highlighted. The\nkeywords are \"error\", \"warning\", \"hint\" and \"success\", and are\nmatched case-insensitively. May be set to always , false (or never ) or auto (or true ). If unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.remote.<slot>"}, {"role": "assistant", "content": "Use customized color for each remote keyword. <slot> may be hint , warning , success or error which match the\ncorresponding keyword."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.showBranch"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-show-branch . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.status"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-status . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.status.<slot>"}, {"role": "assistant", "content": "Use customized color for status colorization. <slot> is\none of header (the header text of the status message), added or updated (files which are added but not committed), changed (files which are changed but not added in the index), untracked (files which are not tracked by Git), branch (the current branch), nobranch (the color the no branch warning is shown in, defaulting\nto red), localBranch or remoteBranch (the local and remote branch names,\nrespectively, when branch and tracking information is displayed in the\nstatus short-format), or unmerged (files which have unmerged changes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.transport"}, {"role": "assistant", "content": "A boolean to enable/disable color when pushes are rejected. May be\nset to always , false (or never ) or auto (or true ), in which\ncase colors are used only when the error output goes to a terminal.\nIf unset, then the value of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.transport.rejected"}, {"role": "assistant", "content": "Use customized color when a push was rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.ui"}, {"role": "assistant", "content": "This variable determines the default value for variables such\nas color.diff and color.grep that control the use of color\nper command family. Its scope will expand as more commands learn\nconfiguration to set a default for the --color option.  Set it\nto false or never if you prefer Git commands not to use\ncolor unless enabled explicitly with some other configuration\nor the --color option. Set it to always if you want all\noutput not intended for machine consumption to use color, to true or auto (this is the default since Git 1.8.4) if you\nwant such output to use color when written to the terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.ui"}, {"role": "assistant", "content": "Specify whether supported commands should output in columns.\nThis variable consists of a list of tokens separated by spaces\nor commas: These options control when the feature should be enabled\n(defaults to never ): always always show in columns never never show in columns auto show in columns if the output is to the terminal These options control layout (defaults to column ).  Setting any\nof these implies always if none of always , never , or auto are\nspecified. column fill columns before rows row fill rows before columns plain show in one column Finally, these options can be combined with a layout option (defaults\nto nodense ): dense make unequal size columns to utilize more space nodense make equal size columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.branch"}, {"role": "assistant", "content": "Specify whether to output branch listing in git branch in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.clean"}, {"role": "assistant", "content": "Specify the layout when listing items in git clean -i , which always\nshows files and directories in columns. See column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.status"}, {"role": "assistant", "content": "Specify whether to output untracked files in git status in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column.tag"}, {"role": "assistant", "content": "Specify whether to output tag listings in git tag in columns.\nSee column.ui for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.cleanup"}, {"role": "assistant", "content": "This setting overrides the default of the --cleanup option in git commit . See git-commit for details. Changing the\ndefault can be useful when you always want to keep lines that begin\nwith the comment character # in your log message, in which case you\nwould do git config commit.cleanup whitespace (note that you will\nhave to remove the help lines that begin with # in the commit log\ntemplate yourself, if you do this)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.gpgSign"}, {"role": "assistant", "content": "A boolean to specify whether all commits should be GPG signed.\nUse of this option when doing operations such as rebase can\nresult in a large number of commits being signed. It may be\nconvenient to use an agent to avoid typing your GPG passphrase\nseveral times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.status"}, {"role": "assistant", "content": "A boolean to enable/disable inclusion of status information in the\ncommit message template when using an editor to prepare the commit\nmessage.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.template"}, {"role": "assistant", "content": "Specify the pathname of a file to use as the template for\nnew commit messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.verbose"}, {"role": "assistant", "content": "A boolean or int to specify the level of verbosity with git commit .\nSee git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.generationVersion"}, {"role": "assistant", "content": "Specifies the type of generation number version to use when writing\nor reading the commit-graph file. If version 1 is specified, then\nthe corrected commit dates will not be written or read. Defaults to\n2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.maxNewFilters"}, {"role": "assistant", "content": "Specifies the default value for the --max-new-filters option of git\ncommit-graph write (c.f., git-commit-graph )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitGraph.readChangedPaths"}, {"role": "assistant", "content": "If true, then git will use the changed-path Bloom filters in the\ncommit-graph file (if it exists, and they are present). Defaults to\ntrue. See git-commit-graph for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  completion.commands"}, {"role": "assistant", "content": "This is only used by git-completion.bash to add or remove\ncommands from the list of completed commands. Normally only\nporcelain commands and a few select others are completed. You\ncan add more commands, separated by space, in this\nvariable. Prefixing the command with - will remove it from\nthe existing list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fileMode"}, {"role": "assistant", "content": "Tells Git if the executable bit of files in the working tree\nis to be honored. Some filesystems lose the executable bit when a file that is\nmarked as executable is checked out, or checks out a\nnon-executable file with executable bit on. git-clone or git-init probe the filesystem\nto see if it handles the executable bit correctly\nand this variable is automatically set as necessary. A repository, however, may be on a filesystem that handles\nthe filemode correctly, and this variable is set to true when created, but later may be made accessible from another\nenvironment that loses the filemode (e.g. exporting ext4 via\nCIFS mount, visiting a Cygwin created repository with\nGit for Windows or Eclipse).\nIn such a case it may be necessary to set this variable to false .\nSee git-update-index . The default is true (when core.filemode is not specified in the config file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.hideDotFiles"}, {"role": "assistant", "content": "(Windows-only) If true, mark newly-created directories and files whose\nname starts with a dot as hidden.  If dotGitOnly , only the .git/ directory is hidden, but no other files starting with a dot.  The\ndefault mode is dotGitOnly ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.ignoreCase"}, {"role": "assistant", "content": "Internal variable which enables various workarounds to enable\nGit to work better on filesystems that are not case sensitive,\nlike APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing\nfinds \"makefile\" when Git expects \"Makefile\", Git will assume\nit is really the same file, and continue to remember it as\n\"Makefile\". The default is false, except git-clone or git-init will probe and set core.ignoreCase true if appropriate when the repository\nis created. Git relies on the proper configuration of this variable for your operating\nand file system. Modifying this value may result in unexpected behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.precomposeUnicode"}, {"role": "assistant", "content": "This option is only used by Mac OS implementation of Git.\nWhen core.precomposeUnicode=true, Git reverts the unicode decomposition\nof filenames done by Mac OS. This is useful when sharing a repository\nbetween Mac OS and Linux or Windows.\n(Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).\nWhen false, file names are handled fully transparent by Git,\nwhich is backward compatible with older versions of Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectHFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\nbe considered equivalent to .git on an HFS+ filesystem.\nDefaults to true on Mac OS, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectNTFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\ncause problems with the NTFS filesystem, e.g. conflict with\n8.3 \"short\" names.\nDefaults to true on Windows, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitor"}, {"role": "assistant", "content": "If set to true, enable the built-in file system monitor\ndaemon for this working directory ( git-fsmonitor--daemon ). Like hook-based file system monitors, the built-in file system monitor\ncan speed up Git commands that need to refresh the Git index\n(e.g. git status ) in a working directory with many files.  The\nbuilt-in monitor eliminates the need to install and maintain an\nexternal third-party tool. The built-in file system monitor is currently available only on a\nlimited set of supported platforms.  Currently, this includes Windows\nand MacOS. Otherwise, this variable contains the pathname of the \"fsmonitor\"\nhook command. This hook command is used to identify all files that may have changed\nsince the requested date/time. This information is used to speed up\ngit by avoiding unnecessary scanning of files that have not changed. See the \"fsmonitor-watchman\" section of githooks . Note that if you concurrently use multiple versions of Git, such\nas one version on the command line and another version in an IDE\ntool, that the definition of core.fsmonitor was extended to\nallow boolean values in addition to hook pathnames.  Git versions\n2.35.1 and prior will not understand the boolean values and will\nconsider the \"true\" or \"false\" values as hook pathnames to be\ninvoked.  Git versions 2.26 thru 2.35.1 default to hook protocol\nV2 and will fall back to no fsmonitor (full scan).  Git versions\nprior to 2.26 default to hook protocol V1 and will silently\nassume there were no changes to report (no scan), so status\ncommands may report incomplete results.  For this reason, it is\nbest to upgrade all of your Git versions before using the built-in\nfile system monitor."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsmonitorHookVersion"}, {"role": "assistant", "content": "Sets the protocol version to be used when invoking the\n\"fsmonitor\" hook. There are currently versions 1 and 2. When this is not set,\nversion 2 will be tried first and if it fails then version 1\nwill be tried. Version 1 uses a timestamp as input to determine\nwhich files have changes since that time but some monitors\nlike Watchman have race conditions when used with a timestamp.\nVersion 2 uses an opaque string so that the monitor can return\nsomething that can be used to determine what files have changed\nwithout race conditions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.trustctime"}, {"role": "assistant", "content": "If false, the ctime differences between the index and the\nworking tree are ignored; useful when the inode change time\nis regularly modified by something outside Git (file system\ncrawlers and some backup systems).\nSee git-update-index . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.splitIndex"}, {"role": "assistant", "content": "If true, the split-index feature of the index will be used.\nSee git-update-index . False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.untrackedCache"}, {"role": "assistant", "content": "Determines what to do about the untracked cache feature of the\nindex. It will be kept, if this variable is unset or set to keep . It will automatically be added if set to true . And\nit will automatically be removed, if set to false . Before\nsetting it to true , you should check that mtime is working\nproperly on your system.\nSee git-update-index . keep by default, unless feature.manyFiles is enabled which sets this setting to true by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.checkStat"}, {"role": "assistant", "content": "When missing or is set to default , many fields in the stat\nstructure are checked to detect if a file has been modified\nsince Git looked at it.  When this configuration variable is\nset to minimal , sub-second part of mtime and ctime, the\nuid and gid of the owner of the file, the inode number (and\nthe device number, if Git was compiled to use it), are\nexcluded from the check among these fields, leaving only the\nwhole-second part of mtime (and ctime, if core.trustCtime is set) and the filesize to be checked. There are implementations of Git that do not leave usable values in\nsome fields (e.g. JGit); by excluding these fields from the\ncomparison, the minimal mode may help interoperability when the\nsame repository is used by these other systems at the same time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.quotePath"}, {"role": "assistant", "content": "Commands that output paths (e.g. ls-files , diff ), will\nquote \"unusual\" characters in the pathname by enclosing the\npathname in double-quotes and escaping those characters with\nbackslashes in the same way C escapes control characters (e.g. \\t for TAB, \\n for LF, \\\\ for backslash) or bytes with\nvalues larger than 0x80 (e.g. octal \\302\\265 for \"micro\" in\nUTF-8).  If this variable is set to false, bytes higher than\n0x80 are not considered \"unusual\" any more. Double-quotes,\nbackslash and control characters are always escaped regardless\nof the setting of this variable.  A simple space character is\nnot considered \"unusual\".  Many commands can output pathnames\ncompletely verbatim using the -z option. The default value\nis true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.eol"}, {"role": "assistant", "content": "Sets the line ending type to use in the working directory for\nfiles that are marked as text (either by having the text attribute set, or by having text=auto and Git auto-detecting\nthe contents as text).\nAlternatives are lf , crlf and native , which uses the platform’s\nnative line ending.  The default value is native .  See gitattributes for more information on end-of-line\nconversion. Note that this value is ignored if core.autocrlf is set to true or input ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.safecrlf"}, {"role": "assistant", "content": "If true, makes Git check if converting CRLF is reversible when\nend-of-line conversion is active.  Git will verify if a command\nmodifies a file in the work tree either directly or indirectly.\nFor example, committing a file followed by checking out the\nsame file should yield the original file in the work tree.  If\nthis is not the case for the current setting of core.autocrlf , Git will reject the file.  The variable can\nbe set to \"warn\", in which case Git will only warn about an\nirreversible conversion but continue the operation. CRLF conversion bears a slight chance of corrupting data.\nWhen it is enabled, Git will convert CRLF to LF during commit and LF to\nCRLF during checkout.  A file that contains a mixture of LF and\nCRLF before the commit cannot be recreated by Git.  For text\nfiles this is the right thing to do: it corrects line endings\nsuch that we have only LF line endings in the repository.\nBut for binary files that are accidentally classified as text the\nconversion can corrupt data. If you recognize such corruption early you can easily fix it by\nsetting the conversion type explicitly in .gitattributes.  Right\nafter committing you still have the original file in your work\ntree and this file is not yet corrupted.  You can explicitly tell\nGit that this file is binary and Git will handle the file\nappropriately. Unfortunately, the desired effect of cleaning up text files with\nmixed line endings and the undesired effect of corrupting binary\nfiles cannot be distinguished.  In both cases CRLFs are removed\nin an irreversible way.  For text files this is the right thing\nto do because CRLFs are line endings, while for binary files\nconverting CRLFs corrupts data. Note, this safety check does not mean that a checkout will generate a\nfile identical to the original file for a different setting of core.eol and core.autocrlf , but only for the current one.  For\nexample, a text file with LF would be accepted with core.eol=lf and could later be checked out with core.eol=crlf , in which case the\nresulting file would contain CRLF , although the original file\ncontained LF .  However, in both work trees the line endings would be\nconsistent, that is either all LF or all CRLF , but never mixed.  A\nfile with mixed line endings would be reported by the core.safecrlf mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.autocrlf"}, {"role": "assistant", "content": "Setting this variable to \"true\" is the same as setting\nthe text attribute to \"auto\" on all files and core.eol to \"crlf\".\nSet to true if you want to have CRLF line endings in your\nworking directory and the repository has LF line endings.\nThis variable can be set to input ,\nin which case no output conversion is performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.checkRoundtripEncoding"}, {"role": "assistant", "content": "A comma and/or whitespace separated list of encodings that Git\nperforms UTF-8 round trip checks on if they are used in an working-tree-encoding attribute (see gitattributes ).\nThe default value is SHIFT-JIS ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.symlinks"}, {"role": "assistant", "content": "If false, symbolic links are checked out as small plain files that\ncontain the link text. git-update-index and git-add will not change the recorded type to regular\nfile. Useful on filesystems like FAT that do not support\nsymbolic links. The default is true, except git-clone or git-init will probe and set core.symlinks false if appropriate when the repository\nis created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.gitProxy"}, {"role": "assistant", "content": "A \"proxy command\" to execute (as command host port ) instead\nof establishing direct connection to the remote server when\nusing the Git protocol for fetching. If the variable value is\nin the \"COMMAND for DOMAIN\" format, the command is applied only\non hostnames ending with the specified domain string. This variable\nmay be set multiple times and is matched in the given order;\nthe first match wins. Can be overridden by the GIT_PROXY_COMMAND environment variable\n(which always applies universally, without the special \"for\"\nhandling). The special string none can be used as the proxy command to\nspecify that no proxy be used for a given domain pattern.\nThis is useful for excluding servers inside a firewall from\nproxy use, while defaulting to a common proxy for external domains."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sshCommand"}, {"role": "assistant", "content": "If this variable is set, git fetch and git push will\nuse the specified command instead of ssh when they need to\nconnect to a remote system. The command is in the same form as\nthe GIT_SSH_COMMAND environment variable and is overridden\nwhen the environment variable is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.ignoreStat"}, {"role": "assistant", "content": "If true, Git will avoid using lstat() calls to detect if files have\nchanged by setting the \"assume-unchanged\" bit for those tracked files\nwhich it has updated identically in both the index and working tree. When files are modified outside of Git, the user will need to stage\nthe modified files explicitly (e.g. see Examples section in git-update-index ).\nGit will not normally detect changes to those files. This is useful on systems where lstat() calls are very slow, such as\nCIFS/Microsoft Windows. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.preferSymlinkRefs"}, {"role": "assistant", "content": "Instead of the default \"symref\" format for HEAD\nand other symbolic reference files, use symbolic links.\nThis is sometimes needed to work with old scripts that\nexpect HEAD to be a symbolic link."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.alternateRefsCommand"}, {"role": "assistant", "content": "When advertising tips of available history from an alternate, use the shell to\nexecute the specified command instead of git-for-each-ref . The\nfirst argument is the absolute path of the alternate. Output must contain one\nhex object id per line (i.e., the same as produced by git for-each-ref\n--format='%(objectname)' ). Note that you cannot generally put git for-each-ref directly into the config\nvalue, as it does not take a repository path as an argument (but you can wrap\nthe command above in a shell script)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.alternateRefsPrefixes"}, {"role": "assistant", "content": "When listing references from an alternate, list only references that begin\nwith the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref . To list multiple prefixes, separate them with\nwhitespace. If core.alternateRefsCommand is set, setting core.alternateRefsPrefixes has no effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bare"}, {"role": "assistant", "content": "If true this repository is assumed to be bare and has no\nworking directory associated with it.  If this is the case a\nnumber of commands that require a working directory will be\ndisabled, such as git-add or git-merge . This setting is automatically guessed by git-clone or git-init when the repository was created.  By default a\nrepository that ends in \"/.git\" is assumed to be not bare (bare =\nfalse), while all other repositories are assumed to be bare (bare\n= true)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.worktree"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nIf GIT_COMMON_DIR environment variable is set, core.worktree\nis ignored and not used for determining the root of working tree.\nThis can be overridden by the GIT_WORK_TREE environment\nvariable and the --work-tree command-line option.\nThe value can be an absolute path or relative to the path to\nthe .git directory, which is either specified by --git-dir\nor GIT_DIR, or automatically discovered.\nIf --git-dir or GIT_DIR is specified but none of\n--work-tree, GIT_WORK_TREE and core.worktree is specified,\nthe current working directory is regarded as the top level\nof your working tree. Note that this variable is honored even when set in a configuration\nfile in a \".git\" subdirectory of a directory and its value differs\nfrom the latter directory (e.g. \"/path/to/.git/config\" has\ncore.worktree set to \"/different/path\"), which is most likely a\nmisconfiguration.  Running Git commands in the \"/path/to\" directory will\nstill use \"/different/path\" as the root of the work tree and can cause\nconfusion unless you know what you are doing (e.g. you are creating a\nread-only snapshot of the same index to a location different from the\nrepository’s usual working tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.logAllRefUpdates"}, {"role": "assistant", "content": "Enable the reflog. Updates to a ref <ref> is logged to the file\n\" $GIT_DIR/logs/<ref> \", by appending the new and old\nSHA-1, the date/time and the reason of the update, but\nonly when the file exists.  If this configuration\nvariable is set to true , missing \" $GIT_DIR/logs/<ref> \"\nfile is automatically created for branch heads (i.e. under refs/heads/ ), remote refs (i.e. under refs/remotes/ ),\nnote refs (i.e. under refs/notes/ ), and the symbolic ref HEAD .\nIf it is set to always , then a missing reflog is automatically\ncreated for any ref under refs/ . This information can be used to determine what commit\nwas the tip of a branch \"2 days ago\". This value is true by default in a repository that has\na working directory associated with it, and false by\ndefault in a bare repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.repositoryFormatVersion"}, {"role": "assistant", "content": "Internal variable identifying the repository format and layout\nversion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sharedRepository"}, {"role": "assistant", "content": "When group (or true ), the repository is made shareable between\nseveral users in a group (making sure all the files and objects are\ngroup-writable). When all (or world or everybody ), the\nrepository will be readable by all users, additionally to being\ngroup-shareable. When umask (or false ), Git will use permissions\nreported by umask(2). When 0xxx , where 0xxx is an octal number,\nfiles in the repository will have this mode value. 0xxx will override\nuser’s umask value (whereas the other options will only override\nrequested parts of the user’s umask value). Examples: 0660 will make\nthe repo read/write-able for the owner and group, but inaccessible to\nothers (equivalent to group unless umask is e.g. 0022 ). 0640 is a\nrepository that is group-readable but not group-writable.\nSee git-init . False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.warnAmbiguousRefs"}, {"role": "assistant", "content": "If true, Git will warn you if the ref name you passed it is ambiguous\nand might match multiple refs in the repository. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.compression"}, {"role": "assistant", "content": "An integer -1..9, indicating a default compression level.\n-1 is the zlib default. 0 means no compression,\nand 1..9 are various speed/size tradeoffs, 9 being slowest.\nIf set, this provides a default to other compression variables,\nsuch as core.looseCompression and pack.compression ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.looseCompression"}, {"role": "assistant", "content": "An integer -1..9, indicating the compression level for objects that\nare not in a pack file. -1 is the zlib default. 0 means no\ncompression, and 1..9 are various speed/size tradeoffs, 9 being\nslowest.  If not set,  defaults to core.compression.  If that is\nnot set,  defaults to 1 (best speed)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedGitWindowSize"}, {"role": "assistant", "content": "Number of bytes of a pack file to map into memory in a\nsingle mapping operation.  Larger window sizes may allow\nyour system to process a smaller number of large pack files\nmore quickly.  Smaller window sizes will negatively affect\nperformance due to increased calls to the operating system’s\nmemory manager, but may improve performance when accessing\na large number of large pack files. Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32\nMiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should\nbe reasonable for all users/operating systems.  You probably do\nnot need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedGitLimit"}, {"role": "assistant", "content": "Maximum number of bytes to map simultaneously into memory\nfrom pack files.  If Git needs to access more than this many\nbytes at once to complete an operation it will unmap existing\nregions to reclaim virtual address space within the process. Default is 256 MiB on 32 bit platforms and 32 TiB (effectively\nunlimited) on 64 bit platforms.\nThis should be reasonable for all users/operating systems, except on\nthe largest projects.  You probably do not need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.deltaBaseCacheLimit"}, {"role": "assistant", "content": "Maximum number of bytes per thread to reserve for caching base objects\nthat may be referenced by multiple deltified objects.  By storing the\nentire decompressed base objects in a cache Git is able\nto avoid unpacking and decompressing frequently used base\nobjects multiple times. Default is 96 MiB on all platforms.  This should be reasonable\nfor all users/operating systems, except on the largest projects.\nYou probably do not need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bigFileThreshold"}, {"role": "assistant", "content": "The size of files considered \"big\", which as discussed below\nchanges the behavior of numerous git commands, as well as how\nsuch files are stored within the repository. The default is\n512 MiB. Common unit suffixes of k , m , or g are\nsupported. Files above the configured limit will be: Stored deflated in packfiles, without attempting delta compression. The default limit is primarily set with this use-case in mind. With it,\nmost projects will have their source code and other text files delta\ncompressed, but not larger binary media files. Storing large files without delta compression avoids excessive memory\nusage, at the slight expense of increased disk usage. Will be treated as if they were labeled \"binary\" (see gitattributes ). e.g. git-log and git-diff will not compute diffs for files above this limit. Will generally be streamed when written, which avoids excessive\nmemory usage, at the cost of some fixed overhead. Commands that make\nuse of this include git-archive , git-fast-import , git-index-pack , git-unpack-objects and git-fsck ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.excludesFile"}, {"role": "assistant", "content": "Specifies the pathname to the file that contains patterns to\ndescribe paths that are not meant to be tracked, in addition\nto .gitignore (per-directory) and .git/info/exclude .\nDefaults to $XDG_CONFIG_HOME/git/ignore .\nIf $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.askPass"}, {"role": "assistant", "content": "Some commands (e.g. svn and http interfaces) that interactively\nask for a password can be told to use an external program given\nvia the value of this variable. Can be overridden by the GIT_ASKPASS environment variable. If not set, fall back to the value of the SSH_ASKPASS environment variable or, failing that, a simple password\nprompt. The external program shall be given a suitable prompt as\ncommand-line argument and write the password on its STDOUT."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.attributesFile"}, {"role": "assistant", "content": "In addition to .gitattributes (per-directory) and .git/info/attributes , Git looks into this file for attributes\n(see gitattributes ). Path expansions are made the same\nway as for core.excludesFile . Its default value is $XDG_CONFIG_HOME/git/attributes . If $XDG_CONFIG_HOME is either not\nset or empty, $HOME/.config/git/attributes is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.hooksPath"}, {"role": "assistant", "content": "By default Git will look for your hooks in the $GIT_DIR/hooks directory. Set this to different path,\ne.g. /etc/git/hooks , and Git will try to find your hooks in\nthat directory, e.g. /etc/git/hooks/pre-receive instead of\nin $GIT_DIR/hooks/pre-receive . The path can be either absolute or relative. A relative path is\ntaken as relative to the directory where the hooks are run (see\nthe \"DESCRIPTION\" section of githooks ). This configuration variable is useful in cases where you’d like to\ncentrally configure your Git hooks instead of configuring them on a\nper-repository basis, or as a more flexible and centralized\nalternative to having an init.templateDir where you’ve changed\ndefault hooks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.editor"}, {"role": "assistant", "content": "Commands such as commit and tag that let you edit\nmessages by launching an editor use the value of this\nvariable when it is set, and the environment variable GIT_EDITOR is not set.  See git-var ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.commentChar  core.commentString"}, {"role": "assistant", "content": "Commands such as commit and tag that let you edit\nmessages consider a line that begins with this character\ncommented, and removes them after the editor returns\n(default # ). If set to \"auto\", git-commit would select a character that is not\nthe beginning character of any line in existing commit messages. Note that these two variables are aliases of each other, and in modern\nversions of Git you are free to use a string (e.g., // or ⁑⁕⁑ ) with commentChar . Versions of Git prior to v2.45.0 will ignore commentString but will reject a value of commentChar that consists\nof more than a single ASCII byte. If you plan to use your config with\nolder and newer versions of Git, you may want to specify both: [core]\n# single character for older versions\ncommentChar = \"#\"\n# string for newer versions (which will override commentChar\n# because it comes later in the file)\ncommentString = \"//\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.filesRefLockTimeout"}, {"role": "assistant", "content": "The length of time, in milliseconds, to retry when trying to\nlock an individual reference. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 100 (i.e.,\nretry for 100ms)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedRefsTimeout"}, {"role": "assistant", "content": "The length of time, in milliseconds, to retry when trying to\nlock the packed-refs file. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e.,\nretry for 1 second)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.pager"}, {"role": "assistant", "content": "Text viewer for use by Git commands (e.g., less ).  The value\nis meant to be interpreted by the shell.  The order of preference\nis the $GIT_PAGER environment variable, then core.pager configuration, then $PAGER , and then the default chosen at\ncompile time (usually less ). When the LESS environment variable is unset, Git sets it to FRX (if LESS environment variable is set, Git does not change it at\nall).  If you want to selectively override Git’s default setting\nfor LESS , you can set core.pager to e.g. less -S .  This will\nbe passed to the shell by Git, which will translate the final\ncommand to LESS=FRX less -S . The environment does not set the S option but the command line does, instructing less to truncate\nlong lines. Similarly, setting core.pager to less -+F will\ndeactivate the F option specified by the environment from the\ncommand-line, deactivating the \"quit if one screen\" behavior of less .  One can specifically activate some flags for particular\ncommands: for example, setting pager.blame to less -S enables\nline truncation only for git blame . Likewise, when the LV environment variable is unset, Git sets it\nto -c .  You can override this setting by exporting LV with\nanother value or setting core.pager to lv +c ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.whitespace"}, {"role": "assistant", "content": "A comma separated list of common whitespace problems to\nnotice. git diff will use color.diff.whitespace to\nhighlight them, and git apply --whitespace=error will\nconsider them as errors.  You can prefix - to disable\nany of them (e.g. -trailing-space ): blank-at-eol treats trailing whitespaces at the end of the line\nas an error (enabled by default). space-before-tab treats a space character that appears immediately\nbefore a tab character in the initial indent part of the line as an\nerror (enabled by default). indent-with-non-tab treats a line that is indented with space\ncharacters instead of the equivalent tabs as an error (not enabled by\ndefault). tab-in-indent treats a tab character in the initial indent part of\nthe line as an error (not enabled by default). blank-at-eof treats blank lines added at the end of file as an error\n(enabled by default). trailing-space is a short-hand to cover both blank-at-eol and blank-at-eof . cr-at-eol treats a carriage-return at the end of line as\npart of the line terminator, i.e. with it, trailing-space does not trigger if the character before such a carriage-return\nis not a whitespace (not enabled by default). tabwidth=<n> tells how many character positions a tab occupies; this\nis relevant for indent-with-non-tab and when Git fixes tab-in-indent errors. The default tab width is 8. Allowed values are 1 to 63."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsync"}, {"role": "assistant", "content": "A comma-separated list of components of the repository that\nshould be hardened via the core.fsyncMethod when created or\nmodified.  You can disable hardening of any component by\nprefixing it with a - .  Items that are not hardened may be\nlost in the event of an unclean\tsystem shutdown. Unless you\nhave special requirements, it is recommended that you leave\nthis option empty or pick one of committed , added ,\nor all . When this configuration is encountered, the set of components starts with\nthe platform default value, disabled components are removed, and additional\ncomponents are added. none resets the state so that the platform default\nis ignored. The empty string resets the fsync configuration to the platform\ndefault. The default on most platforms is equivalent to core.fsync=committed,-loose-object , which has good performance,\nbut risks losing recent work in the event of an unclean system shutdown. none clears the set of fsynced components. loose-object hardens objects added to the repo in loose-object form. pack hardens objects added to the repo in packfile form. pack-metadata hardens packfile bitmaps and indexes. commit-graph hardens the commit-graph file. index hardens the index when it is modified. objects is an aggregate option that is equivalent to loose-object,pack . reference hardens references modified in the repo. derived-metadata is an aggregate option that is equivalent to pack-metadata,commit-graph . committed is an aggregate option that is currently equivalent to objects . This mode sacrifices some performance to ensure that work\nthat is committed to the repository with git commit or similar commands\nis hardened. added is an aggregate option that is currently equivalent to committed,index . This mode sacrifices additional performance to\nensure that the results of commands like git add and similar operations\nare hardened. all is an aggregate option that syncs all individual components above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsyncMethod"}, {"role": "assistant", "content": "A value indicating the strategy Git will use to harden repository data\nusing fsync and related primitives. fsync uses the fsync() system call or platform equivalents. writeout-only issues pagecache writeback requests, but depending on the\nfilesystem and storage hardware, data added to the repository may not be\ndurable in the event of a system crash. This is the default mode on macOS. batch enables a mode that uses writeout-only flushes to stage multiple\nupdates in the disk writeback cache and then does a single full fsync of\na dummy file to trigger the disk cache flush at the end of the operation. Currently batch mode only applies to loose-object files. Other repository\ndata is made durable as if fsync was specified. This mode is expected to\nbe as safe as fsync on macOS for repos stored on HFS+ or APFS filesystems\nand on Windows for repos stored on NTFS or ReFS filesystems."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsyncObjectFiles"}, {"role": "assistant", "content": "This boolean will enable fsync() when writing object files.\nThis setting is deprecated. Use core.fsync instead. This setting affects data added to the Git repository in loose-object\nform. When set to true, Git will issue an fsync or similar system call\nto flush caches so that loose-objects remain consistent in the face\nof a unclean system shutdown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.preloadIndex"}, {"role": "assistant", "content": "Enable parallel index preload for operations like git diff This can speed up operations like git diff and git status especially\non filesystems like NFS that have weak caching semantics and thus\nrelatively high IO latencies.  When enabled, Git will do the\nindex comparison to the filesystem data in parallel, allowing\noverlapping IO’s.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.unsetenvvars"}, {"role": "assistant", "content": "Windows-only: comma-separated list of environment variables'\nnames that need to be unset before spawning any other process.\nDefaults to PERL5LIB to account for the fact that Git for\nWindows insists on using its own Perl interpreter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.restrictinheritedhandles"}, {"role": "assistant", "content": "Windows-only: override whether spawned processes inherit only standard\nfile handles ( stdin , stdout and stderr ) or all handles. Can be auto , true or false . Defaults to auto , which means true on\nWindows 7 and later, and false on older Windows versions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.createObject"}, {"role": "assistant", "content": "You can set this to link , in which case a hardlink followed by\na delete of the source are used to make sure that object creation\nwill not overwrite existing objects. On some file system/operating system combinations, this is unreliable.\nSet this config setting to rename there; however, this will remove the\ncheck that makes sure that existing object files will not get overwritten."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.notesRef"}, {"role": "assistant", "content": "When showing commit messages, also show notes which are stored in\nthe given ref.  The ref must be fully qualified.  If the given\nref does not exist, it is not an error but means that no\nnotes should be printed. This setting defaults to \"refs/notes/commits\", and it can be overridden by\nthe GIT_NOTES_REF environment variable.  See git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.commitGraph"}, {"role": "assistant", "content": "If true, then git will read the commit-graph file (if it exists)\nto parse the graph structure of commits. Defaults to true. See git-commit-graph for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.useReplaceRefs"}, {"role": "assistant", "content": "If set to false , behave as if the --no-replace-objects option was given on the command line. See git and git-replace for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.multiPackIndex"}, {"role": "assistant", "content": "Use the multi-pack-index file to track multiple packfiles using a\nsingle index. See git-multi-pack-index for more\ninformation. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sparseCheckout"}, {"role": "assistant", "content": "Enable \"sparse checkout\" feature. See git-sparse-checkout for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.sparseCheckoutCone"}, {"role": "assistant", "content": "Enables the \"cone mode\" of the sparse checkout feature. When the\nsparse-checkout file contains a limited set of patterns, this\nmode provides significant performance advantages. The \"non-cone\nmode\" can be requested to allow specifying more flexible\npatterns by setting this variable to false . See git-sparse-checkout for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.abbrev"}, {"role": "assistant", "content": "Set the length object names are abbreviated to.  If\nunspecified or set to \"auto\", an appropriate value is\ncomputed based on the approximate number of packed objects\nin your repository, which hopefully is enough for\nabbreviated object names to stay unique for some time.\nIf set to \"no\", no abbreviation is made and the object names\nare shown in their full length.\nThe minimum length is 4."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.maxTreeDepth"}, {"role": "assistant", "content": "The maximum depth Git is willing to recurse while traversing a\ntree (e.g., \"a/b/cde/f\" has a depth of 4). This is a fail-safe\nto allow Git to abort cleanly, and should not generally need to\nbe adjusted. The default is 4096."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.helper"}, {"role": "assistant", "content": "Specify an external helper to be called when a username or\npassword credential is needed; the helper may consult external\nstorage to avoid prompting the user for the credentials. This is\nnormally the name of a credential helper with possible\narguments, but may also be an absolute path with arguments or, if\npreceded by ! , shell commands. Note that multiple helpers may be defined. See gitcredentials for details and examples."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.useHttpPath"}, {"role": "assistant", "content": "When acquiring credentials, consider the \"path\" component of an http\nor https URL to be important. Defaults to false. See gitcredentials for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.username"}, {"role": "assistant", "content": "If no username is set for a network authentication, use this username\nby default. See credential.<context>.* below, and gitcredentials ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credential.<url>.*"}, {"role": "assistant", "content": "Any of the credential.* options above can be applied selectively to\nsome credentials. For example, \"credential.https://example.com.username\"\nwould set the default username only for https connections to\nexample.com. See gitcredentials for details on how URLs are\nmatched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credentialCache.ignoreSIGHUP"}, {"role": "assistant", "content": "Tell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  credentialStore.lockTimeoutMS"}, {"role": "assistant", "content": "The length of time, in milliseconds, for git-credential-store to retry\nwhen trying to lock the credentials file. A value of 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e., retry for\n1s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.autoRefreshIndex"}, {"role": "assistant", "content": "When using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.statGraphWidth"}, {"role": "assistant", "content": "Limit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.dstPrefix"}, {"role": "assistant", "content": "If set, git diff uses this destination prefix. Defaults to \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.relative"}, {"role": "assistant", "content": "If set to true , git diff does not show changes outside of the directory\nand show pathnames relative to the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.orderFile"}, {"role": "assistant", "content": "File indicating how to order files within a diff.\nSee the -O option to git-diff for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\ncopy/rename detection; equivalent to the git diff option -l .  If not set, the default value is currently 1000.  This\nsetting has no effect if rename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.submodule"}, {"role": "assistant", "content": "Specify the format in which differences in submodules are\nshown.  The \"short\" format just shows the names of the commits\nat the beginning and end of the range. The \"log\" format lists\nthe commits in the range like git-submodule summary does. The \"diff\" format shows an inline diff of the changed\ncontents of the submodule. Defaults to \"short\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.wordRegex"}, {"role": "assistant", "content": "A POSIX Extended Regular Expression used to determine what is a \"word\"\nwhen performing word-by-word difference calculations.  Character\nsequences that match the regular expression are \"words\", all other\ncharacters are ignorable whitespace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.command"}, {"role": "assistant", "content": "The custom diff driver command.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.binary"}, {"role": "assistant", "content": "Set this option to true to make the diff driver treat files as\nbinary.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.wordRegex"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.cachetextconv"}, {"role": "assistant", "content": "Set this option to true to make the diff driver cache the text\nconversion outputs.  See gitattributes for details. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 kompare meld nvimdiff opendiff p4merge smerge tkdiff vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.colorMoved"}, {"role": "assistant", "content": "If set to either a valid <mode> or a true value, moved lines\nin a diff are colored differently, for details of valid modes\nsee --color-moved in git-diff . If simply set to\ntrue the default color mode will be used. When set to false,\nmoved lines are not colored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.colorMovedWS"}, {"role": "assistant", "content": "When moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.tool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool .\nThis variable overrides the value configured in merge.tool .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom diff tool and requires\nthat a corresponding difftool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.guitool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool when\nthe -g/--gui flag is specified. This variable overrides the value\nconfigured in merge.guitool . The list below shows the valid\nbuilt-in values. Any other value is treated as a custom diff tool\nand requires that a corresponding difftool.<guitool>.cmd variable\nis defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified diff tool.\nThe specified command is evaluated in shell with the following\nvariables available: LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and REMOTE is set to the name of the temporary file containing the contents\nof the diff post-image. See the --tool=<tool> option in git-difftool for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.trustExitCode"}, {"role": "assistant", "content": "Exit difftool if the invoked diff tool returns a non-zero exit status. See the --trust-exit-code option in git-difftool for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  difftool.guiDefault"}, {"role": "assistant", "content": "Set true to use the diff.guitool by default (equivalent to specifying\nthe --gui argument), or auto to select diff.guitool or diff.tool depending on the presence of a DISPLAY environment variable value. The\ndefault is false , where the --gui argument must be provided\nexplicitly for the diff.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.objectFormat"}, {"role": "assistant", "content": "Specify the hash algorithm to use.  The acceptable values are sha1 and sha256 .  If not specified, sha1 is assumed.  It is an error to specify\nthis key unless core.repositoryFormatVersion is 1. Note that this setting should only be set by git-init or git-clone .  Trying to change it after initialization will not\nwork and will produce hard-to-diagnose issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.compatObjectFormat"}, {"role": "assistant", "content": "Specify a compatitbility hash algorithm to use.  The acceptable values\nare sha1 and sha256 .  The value specified must be different from the\nvalue of extensions.objectFormat.  This allows client level\ninteroperability between git repositories whose objectFormat matches\nthis compatObjectFormat.  In particular when fully implemented the\npushes and pulls from a repository in whose objectFormat matches\ncompatObjectFormat.  As well as being able to use oids encoded in\ncompatObjectFormat in addition to oids encoded with objectFormat to\nlocally specify objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.refStorage"}, {"role": "assistant", "content": "Specify the ref storage format to use. The acceptable values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change. It is an error to specify this key unless core.repositoryFormatVersion is 1. +\nNote that this setting should only be set by git-init or git-clone . Trying to change it after initialization will not\nwork and will produce hard-to-diagnose issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.worktreeConfig"}, {"role": "assistant", "content": "If enabled, then worktrees will load config settings from the $GIT_DIR/config.worktree file in addition to the $GIT_COMMON_DIR/config file. Note that $GIT_COMMON_DIR and $GIT_DIR are the same for the main working tree, while other\nworking trees have $GIT_DIR equal to $GIT_COMMON_DIR/worktrees/<id>/ . The settings in the config.worktree file will override settings from any other\nconfig files. When enabling extensions.worktreeConfig , you must be careful to move\ncertain values from the common config file to the main working tree’s config.worktree file, if present: core.worktree must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . If core.bare is true, then it must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . It may also be beneficial to adjust the locations of core.sparseCheckout and core.sparseCheckoutCone depending on your desire for customizable\nsparse-checkout settings for each worktree. By default, the git\nsparse-checkout builtin enables extensions.worktreeConfig , assigns\nthese config values on a per-worktree basis, and uses the $GIT_DIR/info/sparse-checkout file to specify the sparsity for each\nworktree independently. See git-sparse-checkout for more\ndetails. For historical reasons, extensions.worktreeConfig is respected\nregardless of the core.repositoryFormatVersion setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fastimport.unpackLimit"}, {"role": "assistant", "content": "If the number of objects imported by git-fast-import is below this limit, then the objects will be unpacked into\nloose object files.  However, if the number of imported objects\nequals or exceeds this limit, then the pack will be stored as a\npack.  Storing the pack from a fast-import can make the import\noperation complete faster, especially on slow filesystems.  If\nnot set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.*"}, {"role": "assistant", "content": "The config settings that start with feature. modify the defaults of\na group of other config settings. These groups are created by the Git\ndeveloper community as recommended defaults and are subject to change.\nIn particular, new config options may be added with different defaults."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.experimental"}, {"role": "assistant", "content": "Enable config options that are new to Git, and are being considered for\nfuture defaults. Config settings included here may be added or removed\nwith each release, including minor version updates. These settings may\nhave unintended interactions since they are so new. Please enable this\nsetting if you are interested in providing feedback on experimental\nfeatures. The new default values are: fetch.negotiationAlgorithm=skipping may improve fetch negotiation times by\nskipping more commits at a time, reducing the number of round trips. pack.useBitmapBoundaryTraversal=true may improve bitmap traversal times by\nwalking fewer objects. pack.allowPackReuse=multi may improve the time it takes to create a pack by\nreusing objects from multiple packs instead of just one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  feature.manyFiles"}, {"role": "assistant", "content": "Enable config options that optimize for repos with many files in the\nworking directory. With many files, commands such as git status and git checkout may be slow and these new defaults improve performance: index.skipHash=true speeds up index writes by not computing a trailing\nchecksum. Note that this will cause Git versions earlier than 2.13.0 to\nrefuse to parse the index and Git versions earlier than 2.40.0 will report\na corrupted index during git fsck . index.version=4 enables path-prefix compression in the index. core.untrackedCache=true enables the untracked cache. This setting assumes\nthat mtime is working on your machine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.recurseSubmodules"}, {"role": "assistant", "content": "This option controls whether git fetch (and the underlying fetch\nin git pull ) will recursively fetch into populated submodules.\nThis option can be set either to a boolean value or to on-demand .\nSetting it to a boolean changes the behavior of fetch and pull to\nrecurse unconditionally into submodules when set to true or to not\nrecurse at all when set to false. When set to on-demand , fetch and\npull will only recurse into a populated submodule when its\nsuperproject retrieves a commit that updates the submodule’s\nreference.\nDefaults to on-demand , or to the value of submodule.recurse if set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsckObjects"}, {"role": "assistant", "content": "If it is set to true, git-fetch-pack will check all fetched\nobjects. See transfer.fsckObjects for what’s\nchecked. Defaults to false. If not set, the value of transfer.fsckObjects is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-fetch-pack instead of git-fsck . See\nthe fsck.<msg-id> documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.fsck.skipList"}, {"role": "assistant", "content": "Acts like fsck.skipList , but is used by git-fetch-pack instead of git-fsck . See\nthe fsck.skipList documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.unpackLimit"}, {"role": "assistant", "content": "If the number of objects fetched over the Git native\ntransfer is below this\nlimit, then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.prune"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the --prune option was given on the command line.  See also remote.<name>.prune and the PRUNING section of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.pruneTags"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the refs/tags/*:refs/tags/* refspec was provided when pruning,\nif not set already. This allows for setting both this option\nand fetch.prune to maintain a 1=1 mapping to upstream\nrefs. See also remote.<name>.pruneTags and the PRUNING\nsection of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.all"}, {"role": "assistant", "content": "If true, fetch will attempt to update all available remotes.\nThis behavior can be overridden by passing --no-all or by\nexplicitly specifying one or more remote(s) to fetch from.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.output"}, {"role": "assistant", "content": "Control how ref update status is printed. Valid values are full and compact . Default value is full . See the\nOUTPUT section in git-fetch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.negotiationAlgorithm"}, {"role": "assistant", "content": "Control how information about the commits in the local repository\nis sent when negotiating the contents of the packfile to be sent by\nthe server.  Set to \"consecutive\" to use an algorithm that walks\nover consecutive commits checking each one.  Set to \"skipping\" to\nuse an algorithm that skips commits in an effort to converge\nfaster, but may result in a larger-than-necessary packfile; or set\nto \"noop\" to not send any information at all, which will almost\ncertainly result in a larger-than-necessary packfile, but will skip\nthe negotiation step.  Set to \"default\" to override settings made\npreviously and use the default behaviour.  The default is normally\n\"consecutive\", but if feature.experimental is true, then the\ndefault is \"skipping\".  Unknown values will cause git fetch to\nerror out. See also the --negotiate-only and --negotiation-tip options to git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.showForcedUpdates"}, {"role": "assistant", "content": "Set to false to enable --no-show-forced-updates in git-fetch and git-pull commands.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.parallel"}, {"role": "assistant", "content": "Specifies the maximal number of fetch operations to be run in parallel\nat a time (submodules, or remotes when the --multiple option of git-fetch is in effect). A value of 0 will give some reasonable default. If unset, it defaults to 1. For submodules, this setting can be overridden using the submodule.fetchJobs config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.writeCommitGraph"}, {"role": "assistant", "content": "Set to true to write a commit-graph after every git fetch command\nthat downloads a pack-file from a remote. Using the --split option,\nmost executions will create a very small commit-graph file on top of\nthe existing commit-graph file(s). Occasionally, these files will\nmerge and the write may take longer. Having an updated commit-graph\nfile helps performance of many Git commands, including git merge-base , git push -f , and git log --graph . Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.bundleURI"}, {"role": "assistant", "content": "This value stores a URI for downloading Git object data from a bundle\nURI before performing an incremental fetch from the origin Git server.\nThis is similar to how the --bundle-uri option behaves in git-clone . git clone --bundle-uri will set the fetch.bundleURI value if the supplied bundle URI contains a bundle\nlist that is organized for incremental fetches. If you modify this value and your repository has a fetch.bundleCreationToken value, then remove that fetch.bundleCreationToken value before fetching from\nthe new bundle URI."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetch.bundleCreationToken"}, {"role": "assistant", "content": "When using fetch.bundleURI to fetch incrementally from a bundle\nlist that uses the \"creationToken\" heuristic, this config value\nstores the maximum creationToken value of the downloaded bundles.\nThis value is used to prevent downloading bundles in the future\nif the advertised creationToken is not strictly larger than this\nvalue. The creation token values are chosen by the provider serving the specific\nbundle URI. If you modify the URI at fetch.bundleURI , then be sure to\nremove the value for the fetch.bundleCreationToken value before fetching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filter.<driver>.clean"}, {"role": "assistant", "content": "The command which is used to convert the content of a worktree\nfile to a blob upon checkin.  See gitattributes for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filter.<driver>.smudge"}, {"role": "assistant", "content": "The command which is used to convert the content of a blob\nobject to a worktree file upon checkout.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.attach"}, {"role": "assistant", "content": "Enable multipart/mixed attachments as the default for format-patch .  The value can also be a double quoted string\nwhich will enable attachments as the default and set the\nvalue as the boundary.  See the --attach option in git-format-patch .  To countermand an earlier\nvalue, set it to an empty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.from"}, {"role": "assistant", "content": "Provides the default value for the --from option to format-patch.\nAccepts a boolean value, or a name and email address.  If false,\nformat-patch defaults to --no-from , using commit authors directly in\nthe \"From:\" field of patch mails.  If true, format-patch defaults to --from , using your committer identity in the \"From:\" field of patch\nmails and including a \"From:\" field in the body of the patch mail if\ndifferent.  If set to a non-boolean value, format-patch uses that\nvalue instead of your committer identity.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.forceInBodyFrom"}, {"role": "assistant", "content": "Provides the default value for the --[no-]force-in-body-from option to format-patch.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.numbered"}, {"role": "assistant", "content": "A boolean which can enable or disable sequence numbers in patch\nsubjects.  It defaults to \"auto\" which enables it only if there\nis more than one patch.  It can be enabled or disabled for all\nmessages by setting it to \"true\" or \"false\".  See --numbered\noption in git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.headers"}, {"role": "assistant", "content": "Additional email headers to include in a patch to be submitted\nby mail.  See git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.to  format.cc"}, {"role": "assistant", "content": "Additional recipients to include in a patch to be submitted\nby mail.  See the --to and --cc options in git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.subjectPrefix"}, {"role": "assistant", "content": "The default for format-patch is to output files with the [PATCH] subject prefix. Use this variable to change that prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.coverFromDescription"}, {"role": "assistant", "content": "The default mode for format-patch to determine which parts of\nthe cover letter will be populated using the branch’s\ndescription. See the --cover-from-description option in git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signature"}, {"role": "assistant", "content": "The default for format-patch is to output a signature containing\nthe Git version number. Use this variable to change that default.\nSet this variable to the empty string (\"\") to suppress\nsignature generation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signatureFile"}, {"role": "assistant", "content": "Works just like format.signature except the contents of the\nfile specified by this variable will be used as the signature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.suffix"}, {"role": "assistant", "content": "The default for format-patch is to output files with the suffix .patch . Use this variable to change that suffix (make sure to\ninclude the dot if you want it)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.encodeEmailHeaders"}, {"role": "assistant", "content": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047) for email transmission.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.pretty"}, {"role": "assistant", "content": "The default pretty format for log/show/whatchanged command.\nSee git-log , git-show , git-whatchanged ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.thread"}, {"role": "assistant", "content": "The default threading style for git format-patch .  Can be\na boolean value, or shallow or deep . shallow threading\nmakes every mail a reply to the head of the series,\nwhere the head is chosen from the cover letter, the --in-reply-to , and the first patch mail, in this order. deep threading makes every mail a reply to the previous one.\nA true boolean value is the same as shallow , and a false\nvalue disables threading."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.signOff"}, {"role": "assistant", "content": "A boolean value which lets you enable the -s/--signoff option of\nformat-patch by default. Note: Adding the Signed-off-by trailer to a\npatch should be a conscious act and means that you certify you have\nthe rights to submit this work under the same open source license.\nPlease see the SubmittingPatches document for further discussion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.coverLetter"}, {"role": "assistant", "content": "A boolean that controls whether to generate a cover-letter when\nformat-patch is invoked, but in addition can be set to \"auto\", to\ngenerate a cover-letter only when there’s more than one patch.\nDefault is false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.outputDirectory"}, {"role": "assistant", "content": "Set a custom directory to store the resulting files instead of the\ncurrent working directory. All directory components will be created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.filenameMaxLength"}, {"role": "assistant", "content": "The maximum length of the output filenames generated by the format-patch command; defaults to 64.  Can be overridden\nby the --filename-max-length=<n> command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.useAutoBase"}, {"role": "assistant", "content": "A boolean value which lets you enable the --base=auto option of\nformat-patch by default. Can also be set to \"whenAble\" to allow\nenabling --base=auto if a suitable base is available, but to skip\nadding base info otherwise without the format dying."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.notes"}, {"role": "assistant", "content": "Provides the default value for the --notes option to\nformat-patch. Accepts a boolean value, or a ref which specifies\nwhere to get notes. If false, format-patch defaults to --no-notes . If true, format-patch defaults to --notes . If\nset to a non-boolean value, format-patch defaults to --notes=<ref> , where ref is the non-boolean value. Defaults\nto false. If one wishes to use the ref refs/notes/true , please use that literal\ninstead. This configuration can be specified multiple times in order to allow\nmultiple notes refs to be included. In that case, it will behave\nsimilarly to multiple --[no-]notes[=] options passed in. That is, a\nvalue of true will show the default notes, a value of <ref> will\nalso show notes from that notes ref and a value of false will negate\nprevious configurations and not show notes. For example, [format]\n\tnotes = true\n\tnotes = foo\n\tnotes = false\n\tnotes = bar will only show notes from refs/notes/bar ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.mboxrd"}, {"role": "assistant", "content": "A boolean value which enables the robust \"mboxrd\" format when --stdout is in use to escape \"^>+From \" lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.noprefix"}, {"role": "assistant", "content": "If set, do not show any source or destination prefix in patches.\nThis is equivalent to the diff.noprefix option used by git\ndiff (but which is not respected by format-patch ). Note that\nby setting this, the receiver of any patches you generate will\nhave to apply them using the -p0 option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsck.<msg-id>"}, {"role": "assistant", "content": "During fsck git may find issues with legacy data which\nwouldn’t be generated by current versions of git, and which\nwouldn’t be sent over the wire if transfer.fsckObjects was\nset. This feature is intended to support working with legacy\nrepositories containing such data. Setting fsck.<msg-id> will be picked up by git-fsck , but\nto accept pushes of such data set receive.fsck.<msg-id> instead, or\nto clone or fetch it set fetch.fsck.<msg-id> . The rest of the documentation discusses fsck.* for brevity, but the\nsame applies for the corresponding receive.fsck.* and fetch.fsck.* . variables. Unlike variables like color.ui and core.editor , the receive.fsck.<msg-id> and fetch.fsck.<msg-id> variables will not\nfall back on the fsck.<msg-id> configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. When fsck.<msg-id> is set, errors can be switched to warnings and\nvice versa by configuring the fsck.<msg-id> setting where the <msg-id> is the fsck message ID and the value is one of error , warn or ignore . For convenience, fsck prefixes the error/warning\nwith the message ID, e.g. \"missingEmail: invalid author/committer\nline - missing email\" means that setting fsck.missingEmail = ignore will hide that issue. In general, it is better to enumerate existing objects with problems\nwith fsck.skipList , instead of listing the kind of breakages these\nproblematic objects share to be ignored, as doing the latter will\nallow new instances of the same breakages go unnoticed. Setting an unknown fsck.<msg-id> value will cause fsck to die, but\ndoing the same for receive.fsck.<msg-id> and fetch.fsck.<msg-id> will only cause git to warn. See the Fsck Messages section of git-fsck for supported\nvalues of <msg-id> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsck.skipList"}, {"role": "assistant", "content": "The path to a list of object names (i.e. one unabbreviated SHA-1 per\nline) that are known to be broken in a non-fatal way and should\nbe ignored. On versions of Git 2.20 and later, comments ( # ), empty\nlines, and any leading and trailing whitespace are ignored. Everything\nbut a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted\ndespite early commits containing errors that can be safely ignored,\nsuch as invalid committer email addresses.  Note: corrupt objects\ncannot be skipped with this setting. Like fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants. Unlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not\nfall back on the fsck.skipList configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names\nlist should be sorted. This was never a requirement; the object names\ncould appear in any order, but when reading the list we tracked whether\nthe list was sorted for the purposes of an internal binary search\nimplementation, which could save itself some work with an already sorted\nlist. Unless you had a humongous list there was no reason to go out of\nyour way to pre-sort the list. After Git version 2.20 a hash implementation\nis used instead, so there’s now no reason to pre-sort the list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsmonitor.allowRemote"}, {"role": "assistant", "content": "By default, the fsmonitor daemon refuses to work with network-mounted\nrepositories. Setting fsmonitor.allowRemote to true overrides this\nbehavior.  Only respected when core.fsmonitor is set to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsmonitor.socketDir"}, {"role": "assistant", "content": "This Mac OS-specific option, if set, specifies the directory in\nwhich to create the Unix domain socket used for communication\nbetween the fsmonitor daemon and various Git commands. The directory must\nreside on a native Mac OS filesystem.  Only respected when core.fsmonitor is set to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.aggressiveDepth"}, {"role": "assistant", "content": "The depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn’t in use. See the documentation for the --depth option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.aggressiveWindow"}, {"role": "assistant", "content": "The window size parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 250, which is a much more aggressive window size than\nthe default --window of 10. See the documentation for the --window option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.auto"}, {"role": "assistant", "content": "When there are approximately more than this many loose\nobjects in the repository, git gc --auto will pack them.\nSome Porcelain commands use this command to perform a\nlight-weight garbage collection from time to time.  The\ndefault value is 6700. Setting this to 0 disables not only automatic packing based on the\nnumber of loose objects, but also any other heuristic git gc --auto will\notherwise use to determine if there’s work to do, such as gc.autoPackLimit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.autoPackLimit"}, {"role": "assistant", "content": "When there are more than this many packs that are not\nmarked with *.keep file in the repository, git gc\n--auto consolidates them into one larger pack.  The\ndefault value is 50.  Setting this to 0 disables it.\nSetting gc.auto to 0 will also disable this. See the gc.bigPackThreshold configuration variable below. When in\nuse, it’ll affect how the auto pack limit works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.autoDetach"}, {"role": "assistant", "content": "Make git gc --auto return immediately and run in the background\nif the system supports it. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.bigPackThreshold"}, {"role": "assistant", "content": "If non-zero, all non-cruft packs larger than this limit are kept\nwhen git gc is run. This is very similar to --keep-largest-pack except that all non-cruft packs that meet\nthe threshold are kept, not just the largest pack. Defaults to\nzero. Common unit suffixes of k , m , or g are supported. Note that if the number of kept packs is more than gc.autoPackLimit,\nthis configuration variable is ignored, all packs except the base pack\nwill be repacked. After this the number of packs should go below\ngc.autoPackLimit and gc.bigPackThreshold should be respected again. If the amount of memory estimated for git repack to run smoothly is\nnot available and gc.bigPackThreshold is not set, the largest pack\nwill also be excluded (this is the equivalent of running git gc with --keep-largest-pack )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.writeCommitGraph"}, {"role": "assistant", "content": "If true, then gc will rewrite the commit-graph file when git-gc is run. When using git gc --auto the commit-graph will be updated if housekeeping is\nrequired. Default is true. See git-commit-graph for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.logExpiry"}, {"role": "assistant", "content": "If the file gc.log exists, then git gc --auto will print\nits content and exit with status zero instead of running\nunless that file is more than gc.logExpiry old.  Default is\n\"1.day\".  See gc.pruneExpire for more ways to specify its\nvalue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.packRefs"}, {"role": "assistant", "content": "Running git pack-refs in a repository renders it\nunclonable by Git versions prior to 1.5.1.2 over dumb\ntransports such as HTTP.  This variable determines whether git gc runs git pack-refs . This can be set to notbare to enable it within all non-bare repos or it can be set to a\nboolean value.  The default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.cruftPacks"}, {"role": "assistant", "content": "Store unreachable objects in a cruft pack (see git-repack ) instead of as loose objects. The default\nis true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.maxCruftSize"}, {"role": "assistant", "content": "Limit the size of new cruft packs when repacking. When\nspecified in addition to --max-cruft-size , the command line\noption takes priority. See the --max-cruft-size option of git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.pruneExpire"}, {"role": "assistant", "content": "When git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using\ncruft packs via gc.cruftPacks or --cruft ).  Override the\ngrace period with this config variable.  The value \"now\" may be\nused to disable this grace period and always prune unreachable\nobjects immediately, or \"never\" may be used to suppress pruning.\nThis feature helps prevent corruption when git gc runs\nconcurrently with another process writing to the repository; see\nthe \"NOTES\" section of git-gc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.worktreePruneExpire"}, {"role": "assistant", "content": "When git gc is run, it calls git worktree prune --expire 3.months.ago .\nThis config variable can be used to set a different grace\nperiod. The value \"now\" may be used to disable the grace\nperiod and prune $GIT_DIR/worktrees immediately, or \"never\"\nmay be used to suppress pruning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.reflogExpire  gc.<pattern>.reflogExpire"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time; defaults to 90 days. The value \"now\" expires all\nentries immediately, and \"never\" suppresses expiration\naltogether. With \"<pattern>\" (e.g.\n\"refs/stash\") in the middle the setting applies only to\nthe refs that match the <pattern>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.reflogExpireUnreachable  gc.<pattern>.reflogExpireUnreachable"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time and are not reachable from the current tip;\ndefaults to 30 days. The value \"now\" expires all entries\nimmediately, and \"never\" suppresses expiration altogether.\nWith \"<pattern>\" (e.g. \"refs/stash\")\nin the middle, the setting applies only to the refs that\nmatch the <pattern>. These types of entries are generally created as a result of using git\ncommit --amend or git rebase and are the commits prior to the amend\nor rebase occurring.  Since these changes are not part of the current\nproject most users will want to expire them sooner, which is why the\ndefault is more aggressive than gc.reflogExpire ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.recentObjectsHook"}, {"role": "assistant", "content": "When considering whether or not to remove an object (either when\ngenerating a cruft pack or storing unreachable objects as\nloose), use the shell to execute the specified command(s).\nInterpret their output as object IDs which Git will consider as\n\"recent\", regardless of their age. By treating their mtimes as\n\"now\", any objects (and their descendants) mentioned in the\noutput will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing\nelse. Objects which cannot be found in the repository are ignored.\nMultiple hooks are supported, but all must exit successfully, else the\noperation (either generating a cruft pack or unpacking unreachable\nobjects) will be halted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.repackFilter"}, {"role": "assistant", "content": "When repacking, use the specified filter to move certain\nobjects into a separate packfile.  See the --filter=<filter-spec> option of git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.repackFilterTo"}, {"role": "assistant", "content": "When repacking and using a filter, see gc.repackFilter , the\nspecified location will be used to create the packfile\ncontaining the filtered out objects. WARNING: The\nspecified location should be accessible, using for example the\nGit alternates mechanism, otherwise the repo could be\nconsidered corrupt by Git as it migh not be able to access the\nobjects in that packfile. See the --filter-to=<dir> option\nof git-repack and the objects/info/alternates section of gitrepository-layout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.rerereResolved"}, {"role": "assistant", "content": "Records of conflicted merge you resolved earlier are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 60 days.  See git-rerere ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.rerereUnresolved"}, {"role": "assistant", "content": "Records of conflicted merge you have not resolved are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 15 days.  See git-rerere ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.commitMsgAnnotation"}, {"role": "assistant", "content": "Append this string to each commit message. Set to empty string\nto disable this feature. Defaults to \"via git-CVS emulator\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.enabled"}, {"role": "assistant", "content": "Whether the CVS server interface is enabled for this repository.\nSee git-cvsserver ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.logFile"}, {"role": "assistant", "content": "Path to a log file where the CVS server interface well…​ logs\nvarious stuff. See git-cvsserver ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.usecrlfattr"}, {"role": "assistant", "content": "If true, the server will look up the end-of-line conversion\nattributes for files to determine the -k modes to use. If\nthe attributes force Git to treat a file as text,\nthe -k mode will be left blank so CVS clients will\ntreat it as text. If they suppress text conversion, the file\nwill be set with -kb mode, which suppresses any newline munging\nthe client might otherwise do. If the attributes do not allow\nthe file type to be determined, then gitcvs.allBinary is\nused. See gitattributes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.allBinary"}, {"role": "assistant", "content": "This is used if gitcvs.usecrlfattr does not resolve\nthe correct -kb mode to use. If true, all\nunresolved files are sent to the client in\nmode -kb . This causes the client to treat them\nas binary files, which suppresses any newline munging it\notherwise might do. Alternatively, if it is set to \"guess\",\nthen the contents of the file are examined to decide if\nit is binary, similar to core.autocrlf ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbName"}, {"role": "assistant", "content": "Database used by git-cvsserver to cache revision information\nderived from the Git repository. The exact meaning depends on the\nused database driver, for SQLite (which is the default driver) this\nis a filename. Supports variable substitution (see git-cvsserver for details). May not contain semicolons ( ; ).\nDefault: %Ggitcvs.%m.sqlite"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbDriver"}, {"role": "assistant", "content": "Used Perl DBI driver. You can specify any available driver\nfor this here, but it might not work. git-cvsserver is tested\nwith DBD::SQLite , reported to work with DBD::Pg , and\nreported not to work with DBD::mysql . Experimental feature.\nMay not contain double colons ( : ). Default: SQLite .\nSee git-cvsserver ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbUser, gitcvs.dbPass"}, {"role": "assistant", "content": "Database user and password. Only useful if setting gitcvs.dbDriver ,\nsince SQLite has no concept of database users and/or passwords. gitcvs.dbUser supports variable substitution (see git-cvsserver for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbTableNamePrefix"}, {"role": "assistant", "content": "Database table name prefix.  Prepended to the names of any\ndatabase tables used, allowing a single database to be used\nfor several repositories.  Supports variable substitution (see git-cvsserver for details).  Any non-alphabetic\ncharacters will be replaced with underscores."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addEmbeddedRepo"}, {"role": "assistant", "content": "Shown when the user accidentally adds one\ngit repo inside of another."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addEmptyPathspec"}, {"role": "assistant", "content": "Shown when the user runs git add without providing\nthe pathspec parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  addIgnoredFile"}, {"role": "assistant", "content": "Shown when the user attempts to add an ignored file to\nthe index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  amWorkDir"}, {"role": "assistant", "content": "Shown when git-am fails to apply a patch\nfile, to tell the user the location of the file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ambiguousFetchRefspec"}, {"role": "assistant", "content": "Shown when a fetch refspec for multiple remotes maps to\nthe same remote-tracking branch namespace and causes branch\ntracking set-up to fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  checkoutAmbiguousRemoteBranchName"}, {"role": "assistant", "content": "Shown when the argument to git-checkout and git-switch ambiguously resolves to a\nremote tracking branch on more than one remote in\nsituations where an unambiguous argument would have\notherwise caused a remote-tracking branch to be\nchecked out. See the checkout.defaultRemote configuration variable for how to set a given remote\nto be used by default in some situations where this\nadvice would be printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commitBeforeMerge"}, {"role": "assistant", "content": "Shown when git-merge refuses to\nmerge to avoid overwriting local changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  detachedHead"}, {"role": "assistant", "content": "Shown when the user uses git-switch or git-checkout to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diverging"}, {"role": "assistant", "content": "Shown when a fast-forward is not possible."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fetchShowForcedUpdates"}, {"role": "assistant", "content": "Shown when git-fetch takes a long time\nto calculate forced updates after ref updates, or to warn\nthat the check is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  forceDeleteBranch"}, {"role": "assistant", "content": "Shown when the user tries to delete a not fully merged\nbranch without the force option set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ignoredHook"}, {"role": "assistant", "content": "Shown when a hook is ignored because the hook is not\nset as executable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  implicitIdentity"}, {"role": "assistant", "content": "Shown when the user’s information is guessed from the\nsystem username and domain name, to tell the user how to\nset their identity configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergeConflict"}, {"role": "assistant", "content": "Shown when various commands stop because of conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  nestedTag"}, {"role": "assistant", "content": "Shown when a user attempts to recursively tag a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushAlreadyExists"}, {"role": "assistant", "content": "Shown when git-push rejects an update that\ndoes not qualify for fast-forwarding (e.g., a tag.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushFetchFirst"}, {"role": "assistant", "content": "Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject we do not have."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNeedsForce"}, {"role": "assistant", "content": "Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject that is not a commit-ish, or make the remote\nref point at an object that is not a commit-ish."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNonFFCurrent"}, {"role": "assistant", "content": "Shown when git-push fails due to a\nnon-fast-forward update to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushNonFFMatching"}, {"role": "assistant", "content": "Shown when the user ran git-push and pushed\n\"matching refs\" explicitly (i.e. used : , or\nspecified a refspec that isn’t the current branch) and\nit resulted in a non-fast-forward error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushRefNeedsUpdate"}, {"role": "assistant", "content": "Shown when git-push rejects a forced update of\na branch when its remote-tracking ref has updates that we\ndo not have locally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushUnqualifiedRefname"}, {"role": "assistant", "content": "Shown when git-push gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushUpdateRejected"}, {"role": "assistant", "content": "Set this variable to false if you want to disable pushNonFFCurrent , pushNonFFMatching , pushAlreadyExists , pushFetchFirst , pushNeedsForce , and pushRefNeedsUpdate simultaneously."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  refSyntax"}, {"role": "assistant", "content": "Shown when the user provides an illegal ref name, to\ntell the user about the ref syntax documentation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  resetNoRefresh"}, {"role": "assistant", "content": "Shown when git-reset takes more than 2\nseconds to refresh the index after reset, to tell the user\nthat they can use the --no-refresh option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  resolveConflict"}, {"role": "assistant", "content": "Shown by various commands when conflicts\nprevent the operation from being performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rmHints"}, {"role": "assistant", "content": "Shown on failure in the output of git-rm , to\ngive directions on how to proceed from the current state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sequencerInUse"}, {"role": "assistant", "content": "Shown when a sequencer command is already in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  skippedCherryPicks"}, {"role": "assistant", "content": "Shown when git-rebase skips a commit that has already\nbeen cherry-picked onto the upstream branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusAheadBehind"}, {"role": "assistant", "content": "Shown when git-status computes the ahead/behind\ncounts for a local ref compared to its remote tracking ref,\nand that calculation takes longer than expected. Will not\nappear if status.aheadBehind is false or the option --no-ahead-behind is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusHints"}, {"role": "assistant", "content": "Show directions on how to proceed from the current\nstate in the output of git-status , in\nthe template shown when writing commit messages in git-commit , and in the help message shown\nby git-switch or git-checkout when switching branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  statusUoption"}, {"role": "assistant", "content": "Shown when git-status takes more than 2\nseconds to enumerate untracked files, to tell the user that\nthey can use the -u option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submoduleAlternateErrorStrategyDie"}, {"role": "assistant", "content": "Shown when a submodule.alternateErrorStrategy option\nconfigured to \"die\" causes a fatal error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submoduleMergeConflict"}, {"role": "assistant", "content": "Advice shown when a non-trivial submodule merge conflict is\nencountered."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodulesNotUpdated"}, {"role": "assistant", "content": "Shown when a user runs a submodule command that fails\nbecause git submodule update --init was not run."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  suggestDetachingHead"}, {"role": "assistant", "content": "Shown when git-switch refuses to detach HEAD\nwithout the explicit --detach option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  updateSparsePath"}, {"role": "assistant", "content": "Shown when either git-add or git-rm is asked to update index entries outside the current sparse\ncheckout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  waitingForEditor"}, {"role": "assistant", "content": "Shown when Git is waiting for editor input. Relevant\nwhen e.g. the editor is not launched inside the terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktreeAddOrphan"}, {"role": "assistant", "content": "Shown when the user tries to create a worktree from an\ninvalid reference, to tell the user how to create a new unborn\nbranch instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  context"}, {"role": "assistant", "content": "non-matching text in context lines (when using -A , -B , or -C )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filename"}, {"role": "assistant", "content": "filename prefix (when not using -h )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  function"}, {"role": "assistant", "content": "function name lines (when using -p )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lineNumber"}, {"role": "assistant", "content": "line number prefix (when using -n )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column"}, {"role": "assistant", "content": "column number prefix (when using --column )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  match"}, {"role": "assistant", "content": "matching text (same as setting matchContext and matchSelected )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  matchContext"}, {"role": "assistant", "content": "matching text in context lines"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  matchSelected"}, {"role": "assistant", "content": "matching text in selected lines. Also, used to customize the following git-log subcommands: --grep , --author , and --committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  selected"}, {"role": "assistant", "content": "non-matching text in selected lines. Also, used to customize the\nfollowing git-log subcommands: --grep , --author and --committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  separator"}, {"role": "assistant", "content": "separators between fields on a line ( : , - , and = )\nand between hunks ( -- )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  always"}, {"role": "assistant", "content": "always show in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  never"}, {"role": "assistant", "content": "never show in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  auto"}, {"role": "assistant", "content": "show in columns if the output is to the terminal"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  column"}, {"role": "assistant", "content": "fill columns before rows"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  row"}, {"role": "assistant", "content": "fill rows before columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  plain"}, {"role": "assistant", "content": "show in one column"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  dense"}, {"role": "assistant", "content": "make unequal size columns to utilize more space"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  nodense"}, {"role": "assistant", "content": "make equal size columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff"}, {"role": "assistant", "content": "compares the (i)ndex and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff --cached"}, {"role": "assistant", "content": "compares a (c)ommit and the (i)ndex;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.category  gitweb.description  gitweb.owner  gitweb.url"}, {"role": "assistant", "content": "See gitweb for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.avatar  gitweb.blame  gitweb.grep  gitweb.highlight  gitweb.patches  gitweb.pickaxe  gitweb.remote_heads  gitweb.showSizes  gitweb.snapshot"}, {"role": "assistant", "content": "See gitweb.conf for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.program"}, {"role": "assistant", "content": "Use this custom program instead of \" gpg \" found on $PATH when\nmaking or verifying a PGP signature. The program must support the\nsame command-line interface as GPG, namely, to verify a detached\nsignature, \" gpg --verify $signature - <$file \" is run, and the\nprogram is expected to signal a good signature by exiting with\ncode 0.  To generate an ASCII-armored detached signature, the\nstandard input of \" gpg -bsau $key \" is fed with the contents to be\nsigned, and the program is expected to send the result to its\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.format"}, {"role": "assistant", "content": "Specifies which key format to use when signing with --gpg-sign .\nDefault is \"openpgp\". Other possible values are \"x509\", \"ssh\". See gitformat-signature for the signature format, which differs\nbased on the selected gpg.format ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.<format>.program"}, {"role": "assistant", "content": "Use this to customize the program used for the signing format you\nchose. (see gpg.program and gpg.format ) gpg.program can still\nbe used as a legacy synonym for gpg.openpgp.program . The default\nvalue for gpg.x509.program is \"gpgsm\" and gpg.ssh.program is \"ssh-keygen\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.minTrustLevel"}, {"role": "assistant", "content": "Specifies a minimum trust level for signature verification.  If\nthis option is unset, then signature verification for merge\noperations requires a key with at least marginal trust.  Other\noperations that perform signature verification require a key\nwith at least undefined trust.  Setting this option overrides\nthe required trust-level for all operations.  Supported values,\nin increasing order of significance: undefined never marginal fully ultimate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.defaultKeyCommand"}, {"role": "assistant", "content": "This command will be run when user.signingkey is not set and a ssh\nsignature is requested. On successful exit a valid ssh public key\nprefixed with key:: is expected in the first line of its output.\nThis allows for a script doing a dynamic lookup of the correct public\nkey when it is impractical to statically configure user.signingKey .\nFor example when keys or SSH Certificates are rotated frequently or\nselection of the right key depends on external factors unknown to git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.allowedSignersFile"}, {"role": "assistant", "content": "A file containing ssh public keys which you are willing to trust.\nThe file consists of one or more lines of principals followed by an ssh\npublic key.\ne.g.: user1@example.com,user2@example.com ssh-rsa AAAAX1... See ssh-keygen(1) \"ALLOWED SIGNERS\" for details.\nThe principal is only used to identify the key and is available when\nverifying a signature. SSH has no concept of trust levels like gpg does. To be able to differentiate\nbetween valid signatures and trusted signatures the trust level of a signature\nverification is set to fully when the public key is present in the allowedSignersFile.\nOtherwise the trust level is undefined and git verify-commit/tag will fail. This file can be set to a location outside of the repository and every developer\nmaintains their own trust store. A central repository server could generate this\nfile automatically from ssh keys with push access to verify the code against.\nIn a corporate setting this file is probably generated at a global location\nfrom automation that already handles developer ssh keys. A repository that only allows signed commits can store the file\nin the repository itself using a path relative to the top-level of the working tree.\nThis way only committers with an already valid key can add or change keys in the keyring. Since OpensSSH 8.8 this file allows specifying a key lifetime using valid-after &\nvalid-before options. Git will mark signatures as valid if the signing key was\nvalid at the time of the signature’s creation. This allows users to change a\nsigning key without invalidating all previously made signatures. Using a SSH CA key with the cert-authority option\n(see ssh-keygen(1) \"CERTIFICATES\") is also valid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.revocationFile"}, {"role": "assistant", "content": "Either a SSH KRL or a list of revoked public keys (without the principal prefix).\nSee ssh-keygen(1) for details.\nIf a public key is found in this file then it will always be treated\nas having trust level \"never\" and signatures will show as invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.lineNumber"}, {"role": "assistant", "content": "If set to true, enable -n option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.column"}, {"role": "assistant", "content": "If set to true, enable the --column option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.patternType"}, {"role": "assistant", "content": "Set the default matching behavior. Using a value of basic , extended , fixed , or perl will enable the --basic-regexp , --extended-regexp , --fixed-strings , or --perl-regexp option accordingly, while the\nvalue default will use the grep.extendedRegexp option to choose\nbetween basic and extended ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.extendedRegexp"}, {"role": "assistant", "content": "If set to true, enable --extended-regexp option by default. This\noption is ignored when the grep.patternType option is set to a value\nother than default ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.threads"}, {"role": "assistant", "content": "Number of grep worker threads to use. If unset (or set to 0), Git will\nuse as many threads as the number of logical cores available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.fullName"}, {"role": "assistant", "content": "If set to true, enable --full-name option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.fallbackToNoIndex"}, {"role": "assistant", "content": "If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.commitMsgWidth"}, {"role": "assistant", "content": "Defines how wide the commit message window is in the git-gui . \"75\" is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.diffContext"}, {"role": "assistant", "content": "Specifies how many context lines should be used in calls to diff\nmade by the git-gui . The default is \"5\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.displayUntracked"}, {"role": "assistant", "content": "Determines if git-gui shows untracked files\nin the file list. The default is \"true\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.encoding"}, {"role": "assistant", "content": "Specifies the default character encoding to use for displaying of\nfile contents in git-gui and gitk .\nIt can be overridden by setting the encoding attribute\nfor relevant files (see gitattributes ).\nIf this option is not set, the tools default to the\nlocale encoding."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.matchTrackingBranch"}, {"role": "assistant", "content": "Determines if new branches created with git-gui should\ndefault to tracking remote branches with matching names or\nnot. Default: \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.newBranchTemplate"}, {"role": "assistant", "content": "Is used as a suggested name when creating new branches using the git-gui ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.pruneDuringFetch"}, {"role": "assistant", "content": "\"true\" if git-gui should prune remote-tracking branches when\nperforming a fetch. The default value is \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.trustmtime"}, {"role": "assistant", "content": "Determines if git-gui should trust the file modification\ntimestamp or not. By default the timestamps are not trusted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.spellingDictionary"}, {"role": "assistant", "content": "Specifies the dictionary used for spell checking commit messages in\nthe git-gui . When set to \"none\" spell checking is turned\noff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.fastCopyBlame"}, {"role": "assistant", "content": "If true, git gui blame uses -C instead of -C -C for original\nlocation detection. It makes blame significantly faster on huge\nrepositories at the expense of less thorough copy detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.copyBlameThreshold"}, {"role": "assistant", "content": "Specifies the threshold to use in git gui blame original location\ndetection, measured in alphanumeric characters. See the git-blame manual for more information on copy detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.blamehistoryctx"}, {"role": "assistant", "content": "Specifies the radius of history context in days to show in gitk for the selected commit, when the Show History\nContext menu item is invoked from git gui blame . If this\nvariable is set to zero, the whole history is shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.cmd"}, {"role": "assistant", "content": "Specifies the shell command line to execute when the corresponding item\nof the git-gui Tools menu is invoked. This option is\nmandatory for every tool. The command is executed from the root of\nthe working directory, and in the environment it receives the name of\nthe tool as GIT_GUITOOL , the name of the currently selected file as FILENAME , and the name of the current branch as CUR_BRANCH (if\nthe head is detached, CUR_BRANCH is empty)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.needsFile"}, {"role": "assistant", "content": "Run the tool only if a diff is selected in the GUI. It guarantees\nthat FILENAME is not empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.noConsole"}, {"role": "assistant", "content": "Run the command silently, without creating a window to display its\noutput."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.noRescan"}, {"role": "assistant", "content": "Don’t rescan the working directory for changes after the tool\nfinishes execution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.confirm"}, {"role": "assistant", "content": "Show a confirmation dialog before actually running the tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.argPrompt"}, {"role": "assistant", "content": "Request a string argument from the user, and pass it to the tool\nthrough the ARGS environment variable. Since requesting an\nargument implies confirmation, the confirm option has no effect\nif this is enabled. If the option is set to true , yes , or 1 ,\nthe dialog uses a built-in generic prompt; otherwise the exact\nvalue of the variable is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.revPrompt"}, {"role": "assistant", "content": "Request a single valid revision from the user, and set the REVISION environment variable. In other aspects this option\nis similar to argPrompt , and can be used together with it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.revUnmerged"}, {"role": "assistant", "content": "Show only unmerged branches in the revPrompt subdialog.\nThis is useful for tools similar to merge or rebase, but not\nfor things like checkout or reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.title"}, {"role": "assistant", "content": "Specifies the title to use for the prompt dialog. The default\nis the tool name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.prompt"}, {"role": "assistant", "content": "Specifies the general prompt string to display at the top of\nthe dialog, before subsections for argPrompt and revPrompt .\nThe default value includes the actual command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.browser"}, {"role": "assistant", "content": "Specify the browser that will be used to display help in the web format. See git-help ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.format"}, {"role": "assistant", "content": "Override the default help format used by git-help .\nValues man , info , web and html are supported. man is\nthe default. web and html are the same."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.autoCorrect"}, {"role": "assistant", "content": "If git detects typos and can identify exactly one valid command similar\nto the error, git will try to suggest the correct command or even\nrun the suggestion automatically. Possible config values are: 0 (default): show the suggested command. positive number: run the suggested command after specified\ndeciseconds (0.1 sec). \"immediate\": run the suggested command immediately. \"prompt\": show the suggestion and prompt for confirmation to run\nthe command. \"never\": don’t run or show any suggested command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  help.htmlPath"}, {"role": "assistant", "content": "Specify the path where the HTML documentation resides. File system paths\nand URLs are supported. HTML pages will be prefixed with this path when\nhelp is displayed in the web format. This defaults to the documentation\npath of your Git installation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxy"}, {"role": "assistant", "content": "Override the HTTP proxy, normally configured using the http_proxy , https_proxy , and all_proxy environment variables (see curl(1) ). In\naddition to the syntax understood by curl, it is possible to specify a\nproxy string with a user name but no password, in which case git will\nattempt to acquire one in the same way it does for other credentials. See gitcredentials for more information. The syntax thus is [protocol://][user[:password]@]proxyhost[:port] . This can be overridden\non a per-remote basis; see remote.<name>.proxy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxyAuthMethod"}, {"role": "assistant", "content": "Set the method with which to authenticate against the HTTP proxy. This\nonly takes effect if the configured proxy string contains a user name part\n(i.e. is of the form user@host or user@host:port ). This can be\noverridden on a per-remote basis; see remote.<name>.proxyAuthMethod .\nBoth can be overridden by the GIT_HTTP_PROXY_AUTHMETHOD environment\nvariable.  Possible values are: anyauth - Automatically pick a suitable authentication method. It is\nassumed that the proxy answers an unauthenticated request with a 407\nstatus code and one or more Proxy-authenticate headers with supported\nauthentication methods. This is the default. basic - HTTP Basic authentication digest - HTTP Digest authentication; this prevents the password from being\ntransmitted to the proxy in clear text negotiate - GSS-Negotiate authentication (compare the --negotiate option\nof curl(1) ) ntlm - NTLM authentication (compare the --ntlm option of curl(1) )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCert"}, {"role": "assistant", "content": "The pathname of a file that stores a client certificate to use to authenticate\nwith an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CERT environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLKey"}, {"role": "assistant", "content": "The pathname of a file that stores a private key to use to authenticate with\nan HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_KEY environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git’s password prompt for the proxy SSL certificate.  Otherwise OpenSSL\nwill prompt the user, possibly many times, if the certificate or private key\nis encrypted. Can be overridden by the GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCAInfo"}, {"role": "assistant", "content": "Pathname to the file containing the certificate bundle that should be used to\nverify the proxy with when using an HTTPS proxy. Can be overridden by the GIT_PROXY_SSL_CAINFO environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.emptyAuth"}, {"role": "assistant", "content": "Attempt authentication without seeking a username or password.  This\ncan be used to attempt GSS-Negotiate authentication without specifying\na username in the URL, as libcurl normally requires a username for\nauthentication."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.delegation"}, {"role": "assistant", "content": "Control GSSAPI credential delegation. The delegation is disabled\nby default in libcurl since version 7.21.7. Set parameter to tell\nthe server what it is allowed to delegate when it comes to user\ncredentials. Used with GSS/kerberos. Possible values are: none - Don’t allow any delegation. policy - Delegates if and only if the OK-AS-DELEGATE flag is set in the\nKerberos service ticket, which is a matter of realm policy. always - Unconditionally allow the server to delegate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.extraHeader"}, {"role": "assistant", "content": "Pass an additional HTTP header when communicating with a server.  If\nmore than one such entry exists, all of them are added as extra\nheaders.  To allow overriding the settings inherited from the system\nconfig, an empty value will reset the extra headers to the empty list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.cookieFile"}, {"role": "assistant", "content": "The pathname of a file containing previously stored cookie lines,\nwhich should be used\nin the Git http session, if they match the server. The file format\nof the file to read cookies from should be plain HTTP headers or\nthe Netscape/Mozilla cookie file format (see curl(1) ).\nNOTE that the file specified with http.cookieFile is used only as\ninput unless http.saveCookies is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.saveCookies"}, {"role": "assistant", "content": "If set, store cookies received during requests to the file specified by\nhttp.cookieFile. Has no effect if http.cookieFile is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.version"}, {"role": "assistant", "content": "Use the specified HTTP protocol version when communicating with a server.\nIf you want to force the default. The available and default version depend\non libcurl. Currently the possible values of\nthis option are: HTTP/2 HTTP/1.1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.curloptResolve"}, {"role": "assistant", "content": "Hostname resolution information that will be used first by\nlibcurl when sending HTTP requests.  This information should\nbe in one of the following formats: [+]HOST:PORT:ADDRESS[,ADDRESS] -HOST:PORT The first format redirects all requests to the given HOST:PORT to the provided ADDRESS (s). The second format clears all\nprevious config values for that HOST:PORT combination.  To\nallow easy overriding of all the settings inherited from the\nsystem config, an empty value will reset all resolution\ninformation to the empty list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslVersion"}, {"role": "assistant", "content": "The SSL version to use when negotiating an SSL connection, if you\nwant to force the default.  The available and default version\ndepend on whether libcurl was built against NSS or OpenSSL and the\nparticular configuration of the crypto library in use. Internally\nthis sets the CURLOPT_SSL_VERSION option; see the libcurl\ndocumentation for more details on the format of this option and\nfor the ssl version supported. Currently the possible values of\nthis option are: sslv2 sslv3 tlsv1 tlsv1.0 tlsv1.1 tlsv1.2 tlsv1.3 Can be overridden by the GIT_SSL_VERSION environment variable.\nTo force git to use libcurl’s default ssl version and ignore any\nexplicit http.sslversion option, set GIT_SSL_VERSION to the\nempty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCipherList"}, {"role": "assistant", "content": "A list of SSL ciphers to use when negotiating an SSL connection.\nThe available ciphers depend on whether libcurl was built against\nNSS or OpenSSL and the particular configuration of the crypto\nlibrary in use.  Internally this sets the CURLOPT_SSL_CIPHER_LIST option; see the libcurl documentation for more details on the format\nof this list. Can be overridden by the GIT_SSL_CIPHER_LIST environment variable.\nTo force git to use libcurl’s default cipher list and ignore any\nexplicit http.sslCipherList option, set GIT_SSL_CIPHER_LIST to the\nempty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslVerify"}, {"role": "assistant", "content": "Whether to verify the SSL certificate when fetching or pushing\nover HTTPS. Defaults to true. Can be overridden by the GIT_SSL_NO_VERIFY environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCert"}, {"role": "assistant", "content": "File containing the SSL certificate when fetching or pushing\nover HTTPS. Can be overridden by the GIT_SSL_CERT environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslKey"}, {"role": "assistant", "content": "File containing the SSL private key when fetching or pushing\nover HTTPS. Can be overridden by the GIT_SSL_KEY environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git’s password prompt for the SSL certificate.  Otherwise\nOpenSSL will prompt the user, possibly many times, if the\ncertificate or private key is encrypted.  Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAInfo"}, {"role": "assistant", "content": "File containing the certificates to verify the peer with when\nfetching or pushing over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAPath"}, {"role": "assistant", "content": "Path containing files with the CA certificates to verify the peer\nwith when fetching or pushing over HTTPS. Can be overridden\nby the GIT_SSL_CAPATH environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslBackend"}, {"role": "assistant", "content": "Name of the SSL backend to use (e.g. \"openssl\" or \"schannel\").\nThis option is ignored if cURL lacks support for choosing the SSL\nbackend at runtime."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.schannelCheckRevoke"}, {"role": "assistant", "content": "Used to enforce or disable certificate revocation checks in cURL\nwhen http.sslBackend is set to \"schannel\". Defaults to true if\nunset. Only necessary to disable this if Git consistently errors\nand the message is about checking the revocation status of a\ncertificate. This option is ignored if cURL lacks support for\nsetting the relevant SSL option at runtime."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.schannelUseSSLCAInfo"}, {"role": "assistant", "content": "As of cURL v7.60.0, the Secure Channel backend can use the\ncertificate bundle provided via http.sslCAInfo , but that would\noverride the Windows Certificate Store. Since this is not desirable\nby default, Git will tell cURL not to use that bundle by default\nwhen the schannel backend was configured via http.sslBackend ,\nunless http.schannelUseSSLCAInfo overrides this behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.pinnedPubkey"}, {"role": "assistant", "content": "Public key of the https service. It may either be the filename of\na PEM or DER encoded public key file or a string starting with sha256// followed by the base64 encoded sha256 hash of the\npublic key. See also libcurl CURLOPT_PINNEDPUBLICKEY . git will\nexit with an error if this option is set but not supported by\ncURL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslTry"}, {"role": "assistant", "content": "Attempt to use AUTH SSL/TLS and encrypted data transfers\nwhen connecting via regular FTP protocol. This might be needed\nif the FTP server requires it for security reasons or you wish\nto connect securely whenever remote FTP server supports it.\nDefault is false since it might trigger certificate verification\nerrors on misconfigured servers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.maxRequests"}, {"role": "assistant", "content": "How many HTTP requests to launch in parallel. Can be overridden\nby the GIT_HTTP_MAX_REQUESTS environment variable. Default is 5."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.minSessions"}, {"role": "assistant", "content": "The number of curl sessions (counted across slots) to be kept across\nrequests. They will not be ended with curl_easy_cleanup() until\nhttp_cleanup() is invoked. If USE_CURL_MULTI is not defined, this\nvalue will be capped at 1. Defaults to 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.postBuffer"}, {"role": "assistant", "content": "Maximum size in bytes of the buffer used by smart HTTP\ntransports when POSTing data to the remote system.\nFor requests larger than this buffer size, HTTP/1.1 and\nTransfer-Encoding: chunked is used to avoid creating a\nmassive pack file locally.  Default is 1 MiB, which is\nsufficient for most requests. Note that raising this limit is only effective for disabling chunked\ntransfer encoding and therefore should be used only where the remote\nserver or a proxy only supports HTTP/1.0 or is noncompliant with the\nHTTP standard.  Raising this is not, in general, an effective solution\nfor most push problems, but can increase memory consumption\nsignificantly since the entire buffer is allocated even for small\npushes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.lowSpeedLimit, http.lowSpeedTime"}, {"role": "assistant", "content": "If the HTTP transfer speed, in bytes per second, is less than http.lowSpeedLimit for longer than http.lowSpeedTime seconds,\nthe transfer is aborted.\nCan be overridden by the GIT_HTTP_LOW_SPEED_LIMIT and GIT_HTTP_LOW_SPEED_TIME environment variables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.noEPSV"}, {"role": "assistant", "content": "A boolean which disables using of EPSV ftp command by curl.\nThis can be helpful with some \"poor\" ftp servers which don’t\nsupport EPSV mode. Can be overridden by the GIT_CURL_FTP_NO_EPSV environment variable. Default is false (curl will use EPSV)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.userAgent"}, {"role": "assistant", "content": "The HTTP USER_AGENT string presented to an HTTP server.  The default\nvalue represents the version of the Git client such as git/1.7.1.\nThis option allows you to override this value to a more common value\nsuch as Mozilla/4.0.  This may be necessary, for instance, if\nconnecting through a firewall that restricts HTTP connections to a set\nof common USER_AGENT strings (but not including those like git/1.7.1).\nCan be overridden by the GIT_HTTP_USER_AGENT environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.followRedirects"}, {"role": "assistant", "content": "Whether git should follow HTTP redirects. If set to true , git\nwill transparently follow any redirect issued by a server it\nencounters. If set to false , git will treat all redirects as\nerrors. If set to initial , git will follow redirects only for\nthe initial request to a remote, but not for subsequent\nfollow-up HTTP requests. Since git uses the redirected URL as\nthe base for the follow-up requests, this is generally\nsufficient. The default is initial ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.<url>.*"}, {"role": "assistant", "content": "Any of the http.* options above can be applied selectively to some URLs.\nFor a config key to match a URL, each element of the config key is\ncompared to that of the URL, in the following order: Scheme (e.g., https in https://example.com/ ). This field\nmust match exactly between the config key and the URL. Host/domain name (e.g., example.com in https://example.com/ ).\nThis field must match between the config key and the URL. It is\npossible to specify a * as part of the host name to match all subdomains\nat this level. https://*.example.com/ for example would match https://foo.example.com/ , but not https://foo.bar.example.com/ . Port number (e.g., 8080 in http://example.com:8080/ ).\nThis field must match exactly between the config key and the URL.\nOmitted port numbers are automatically converted to the correct\ndefault for the scheme before matching. Path (e.g., repo.git in https://example.com/repo.git ). The\npath field of the config key must match the path field of the URL\neither exactly or as a prefix of slash-delimited path elements.  This means\na config key with path foo/ matches URL path foo/bar .  A prefix can only\nmatch on a slash ( / ) boundary.  Longer matches take precedence (so a config\nkey with path foo/bar is a better match to URL path foo/bar than a config\nkey with just path foo/ ). User name (e.g., user in https://user@example.com/repo.git ). If\nthe config key has a user name it must match the user name in the\nURL exactly. If the config key does not have a user name, that\nconfig key will match a URL with any user name (including none),\nbut at a lower precedence than a config key with a user name. The list above is ordered by decreasing precedence; a URL that matches\na config key’s path is preferred to one that matches its user name. For example,\nif the URL is https://user@example.com/foo/bar a config key match of https://example.com/foo will be preferred over a config key match of https://user@example.com . All URLs are normalized before attempting any matching (the password part,\nif embedded in the URL, is always ignored for matching purposes) so that\nequivalent URLs that are simply spelled differently will match properly.\nEnvironment variable settings always override any matches.  The URLs that are\nmatched against are those given directly to Git commands.  This means any URLs\nvisited as a result of a redirection do not participate in matching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  i18n.commitEncoding"}, {"role": "assistant", "content": "Character encoding the commit messages are stored in; Git itself\ndoes not care per se, but this information is necessary e.g. when\nimporting commits from emails or in the gitk graphical history\nbrowser (and possibly in other places in the future or in other\nporcelains). See e.g. git-mailinfo . Defaults to utf-8 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  i18n.logOutputEncoding"}, {"role": "assistant", "content": "Character encoding the commit messages are converted to when\nrunning git log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.folder"}, {"role": "assistant", "content": "The folder to drop the mails into, which is typically the Drafts\nfolder. For example: \"INBOX.Drafts\", \"INBOX/Drafts\" or\n\"[Gmail]/Drafts\". Required."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.tunnel"}, {"role": "assistant", "content": "Command used to set up a tunnel to the IMAP server through which\ncommands will be piped instead of using a direct network connection\nto the server. Required when imap.host is not set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.host"}, {"role": "assistant", "content": "A URL identifying the server. Use an imap:// prefix for non-secure\nconnections and an imaps:// prefix for secure connections.\nIgnored when imap.tunnel is set, but required otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.user"}, {"role": "assistant", "content": "The username to use when logging in to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.pass"}, {"role": "assistant", "content": "The password to use when logging in to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.port"}, {"role": "assistant", "content": "An integer port number to connect to on the server.\nDefaults to 143 for imap:// hosts and 993 for imaps:// hosts.\nIgnored when imap.tunnel is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.sslverify"}, {"role": "assistant", "content": "A boolean to enable/disable verification of the server certificate\nused by the SSL/TLS connection. Default is true . Ignored when\nimap.tunnel is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.preformattedHTML"}, {"role": "assistant", "content": "A boolean to enable/disable the use of html encoding when sending\na patch.  An html encoded patch will be bracketed with <pre>\nand have a content type of text/html.  Ironically, enabling this\noption causes Thunderbird to send the patch as a plain/text,\nformat=fixed email.  Default is false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.authMethod"}, {"role": "assistant", "content": "Specify the authentication method for authenticating with the IMAP server.\nIf Git was built with the NO_CURL option, or if your curl version is older\nthan 7.34.0, or if you’re running git-imap-send with the --no-curl option, the only supported method is CRAM-MD5 . If this is not set\nthen git imap-send uses the basic IMAP plaintext LOGIN command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  include.path  includeIf.<condition>.path"}, {"role": "assistant", "content": "Special variables to include other configuration files. See\nthe \"CONFIGURATION FILE\" section in the main git-config documentation,\nspecifically the \"Includes\" and \"Conditional Includes\" subsections."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.recordEndOfIndexEntries"}, {"role": "assistant", "content": "Specifies whether the index file should include an \"End Of Index\nEntry\" section. This reduces index load time on multiprocessor\nmachines but produces a message \"ignoring EOIE extension\" when\nreading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.recordOffsetTable"}, {"role": "assistant", "content": "Specifies whether the index file should include an \"Index Entry\nOffset Table\" section. This reduces index load time on\nmultiprocessor machines but produces a message \"ignoring IEOT\nextension\" when reading the index using Git versions before 2.20.\nDefaults to true if index.threads has been explicitly enabled, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.sparse"}, {"role": "assistant", "content": "When enabled, write the index using sparse-directory entries. This\nhas no effect unless core.sparseCheckout and core.sparseCheckoutCone are both enabled. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.threads"}, {"role": "assistant", "content": "Specifies the number of threads to spawn when loading the index.\nThis is meant to reduce index load time on multiprocessor machines.\nSpecifying 0 or true will cause Git to auto-detect the number of\nCPUs and set the number of threads accordingly. Specifying 1 or false will disable multithreading. Defaults to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.version"}, {"role": "assistant", "content": "Specify the version with which new index files should be\ninitialized.  This does not affect existing repositories.\nIf feature.manyFiles is enabled, then the default is 4."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.skipHash"}, {"role": "assistant", "content": "When enabled, do not compute the trailing hash for the index file.\nThis accelerates Git commands that manipulate the index, such as git add , git commit , or git status . Instead of storing the\nchecksum, write a trailing set of bytes with value zero, indicating\nthat the computation was skipped. If you enable index.skipHash , then Git clients older than 2.13.0 will\nrefuse to parse the index and Git clients older than 2.40.0 will report an\nerror during git fsck ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.browser"}, {"role": "assistant", "content": "Specify the program that will be used to browse your working\nrepository in gitweb. See git-instaweb ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.httpd"}, {"role": "assistant", "content": "The HTTP daemon command-line to start gitweb on your working\nrepository. See git-instaweb ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.local"}, {"role": "assistant", "content": "If true the web server started by git-instaweb will\nbe bound to the local IP (127.0.0.1)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.modulePath"}, {"role": "assistant", "content": "The default module path for git-instaweb to use\ninstead of /usr/lib/apache2/modules.  Only used if httpd\nis Apache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  instaweb.port"}, {"role": "assistant", "content": "The port number to bind the gitweb httpd to. See git-instaweb ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.singleKey"}, {"role": "assistant", "content": "In interactive commands, allow the user to provide one-letter\ninput with a single key (i.e., without hitting enter).\nCurrently this is used by the --patch mode of git-add , git-checkout , git-restore , git-commit , git-reset , and git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.diffFilter"}, {"role": "assistant", "content": "When an interactive command (such as git add --patch ) shows\na colorized diff, git will pipe the diff through the shell\ncommand defined by this configuration variable. The command may\nmark up the diff further for human consumption, provided that it\nretains a one-to-one correspondence with the lines in the\noriginal diff. Defaults to disabled (no filtering)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.abbrevCommit"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --abbrev-commit . You may\noverride this option with --no-abbrev-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.date"}, {"role": "assistant", "content": "Set the default date-time mode for the log command.\nSetting a value for log.date is similar to using git log 's --date option.  See git-log for details. If the format is set to \"auto:foo\" and the pager is in use, format\n\"foo\" will be used for the date format. Otherwise, \"default\" will\nbe used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.initialDecorationSet"}, {"role": "assistant", "content": "By default, git log only shows decorations for certain known ref\nnamespaces. If all is specified, then show all refs as\ndecorations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.excludeDecoration"}, {"role": "assistant", "content": "Exclude the specified patterns from the log decorations. This is\nsimilar to the --decorate-refs-exclude command-line option, but\nthe config option can be overridden by the --decorate-refs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.diffMerges"}, {"role": "assistant", "content": "Set diff format to be used when --diff-merges=on is\nspecified, see --diff-merges in git-log for\ndetails. Defaults to separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.follow"}, {"role": "assistant", "content": "If true , git log will act as if the --follow option was used when\na single <path> is given.  This has the same limitations as --follow ,\ni.e. it cannot be used to follow multiple files and does not work well\non non-linear history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log or git-whatchanged , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showSignature"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --show-signature ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.mailmap"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --use-mailmap , otherwise\nassume --no-use-mailmap . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lsrefs.unborn"}, {"role": "assistant", "content": "May be \"advertise\" (the default), \"allow\", or \"ignore\". If \"advertise\",\nthe server will respond to the client sending \"unborn\" (as described in gitprotocol-v2 ) and will advertise support for this feature during the\nprotocol v2 capability advertisement. \"allow\" is the same as\n\"advertise\" except that the server will not advertise support for this\nfeature; this is useful for load-balanced servers that cannot be\nupdated atomically (for example), since the administrator could\nconfigure \"allow\", then after a delay, configure \"advertise\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailinfo.scissors"}, {"role": "assistant", "content": "If true, makes git-mailinfo (and therefore git-am ) act by default as if the --scissors option\nwas provided on the command-line. When active, this feature\nremoves everything from the message body before a scissors\nline (i.e. consisting mainly of \">8\", \"8<\" and \"-\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailmap.file"}, {"role": "assistant", "content": "The location of an augmenting mailmap file. The default\nmailmap, located in the root of the repository, is loaded\nfirst, then the mailmap file pointed to by this variable.\nThe location of the mailmap file may be in a repository\nsubdirectory, or somewhere outside of the repository itself.\nSee git-shortlog and git-blame ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mailmap.blob"}, {"role": "assistant", "content": "Like mailmap.file , but consider the value as a reference to a\nblob in the repository. If both mailmap.file and mailmap.blob are given, both are parsed, with entries from mailmap.file taking precedence. In a bare repository, this\ndefaults to HEAD:.mailmap . In a non-bare repository, it\ndefaults to empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.auto"}, {"role": "assistant", "content": "This boolean config option controls whether some commands run git maintenance run --auto after doing their normal work. Defaults\nto true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.strategy"}, {"role": "assistant", "content": "This string config option provides a way to specify one of a few\nrecommended schedules for background maintenance. This only affects\nwhich tasks are run during git maintenance run --schedule=X commands, provided no --task=<task> arguments are provided.\nFurther, if a maintenance.<task>.schedule config value is set,\nthen that value is used instead of the one provided by maintenance.strategy . The possible strategy strings are: none : This default setting implies no tasks are run at any schedule. incremental : This setting optimizes for performing small maintenance\nactivities that do not delete any data. This does not schedule the gc task, but runs the prefetch and commit-graph tasks hourly, the loose-objects and incremental-repack tasks daily, and the pack-refs task weekly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.<task>.enabled"}, {"role": "assistant", "content": "This boolean config option controls whether the maintenance task\nwith name <task> is run when no --task option is specified to git maintenance run . These config values are ignored if a --task option exists. By default, only maintenance.gc.enabled is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.<task>.schedule"}, {"role": "assistant", "content": "This config option controls whether or not the given <task> runs\nduring a git maintenance run --schedule=<frequency> command. The\nvalue must be one of \"hourly\", \"daily\", or \"weekly\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.commit-graph.auto"}, {"role": "assistant", "content": "This integer config option controls how often the commit-graph task\nshould be run as part of git maintenance run --auto . If zero, then\nthe commit-graph task will not run with the --auto option. A\nnegative value will force the task to run every time. Otherwise, a\npositive value implies the command should run when the number of\nreachable commits that are not in the commit-graph file is at least\nthe value of maintenance.commit-graph.auto . The default value is\n100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.loose-objects.auto"}, {"role": "assistant", "content": "This integer config option controls how often the loose-objects task\nshould be run as part of git maintenance run --auto . If zero, then\nthe loose-objects task will not run with the --auto option. A\nnegative value will force the task to run every time. Otherwise, a\npositive value implies the command should run when the number of\nloose objects is at least the value of maintenance.loose-objects.auto .\nThe default value is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.incremental-repack.auto"}, {"role": "assistant", "content": "This integer config option controls how often the incremental-repack task should be run as part of git maintenance run --auto . If zero,\nthen the incremental-repack task will not run with the --auto option. A negative value will force the task to run every time.\nOtherwise, a positive value implies the command should run when the\nnumber of pack-files not in the multi-pack-index is at least the value\nof maintenance.incremental-repack.auto . The default value is 10."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.viewer"}, {"role": "assistant", "content": "Specify the programs that may be used to display help in the man format. See git-help ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified man viewer. The\nspecified command is evaluated in shell with the man page\npassed as an argument. (See git-help .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  man.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool that may be used to\ndisplay help in the man format. See git-help ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.conflictStyle"}, {"role": "assistant", "content": "Specify the style in which conflicted hunks are written out to\nworking tree files upon merge.  The default is \"merge\", which\nshows a <<<<<<< conflict marker, changes made by one side,\na ======= marker, changes made by the other side, and then\na >>>>>>> marker.  An alternate style, \"diff3\", adds a ||||||| marker and the original text before the ======= marker.  The\n\"merge\" style tends to produce smaller conflict regions than diff3,\nboth because of the exclusion of the original text, and because\nwhen a subset of lines match on the two sides, they are just pulled\nout of the conflict region.  Another alternate style, \"zdiff3\", is\nsimilar to diff3 but removes matching lines on the two sides from\nthe conflict region when those matching lines appear near either\nthe beginning or end of a conflict region."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.defaultToUpstream"}, {"role": "assistant", "content": "If merge is called without any commit argument, merge the upstream\nbranches configured for the current branch by using their last\nobserved values stored in their remote-tracking branches.\nThe values of the branch.<current branch>.merge that name the\nbranches at the remote named by branch.<current branch>.remote are consulted, and then they are mapped via remote.<remote>.fetch to their corresponding remote-tracking branches, and the tips of\nthese tracking branches are merged. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.verifySignatures"}, {"role": "assistant", "content": "If true, this is equivalent to the --verify-signatures command\nline option. See git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.branchdesc"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with\nthe branch description text associated with them.  Defaults\nto false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged.  Defaults to false, and\ntrue is a synonym for 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.suppressDest"}, {"role": "assistant", "content": "By adding a glob that matches the names of integration\nbranches to this multi-valued configuration variable, the\ndefault merge message computed for merges into these\nintegration branches will omit \"into <branch name>\" from\nits title. An element with an empty value can be used to clear the list\nof globs accumulated from previous configuration entries.\nWhen there is no merge.suppressDest variable defined, the\ndefault value of master is used for backward compatibility."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\nrename detection during a merge.  If not specified, defaults\nto the value of diff.renameLimit.  If neither\nmerge.renameLimit nor diff.renameLimit are specified,\ncurrently defaults to 7000.  This setting has no effect if\nrename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renames"}, {"role": "assistant", "content": "Whether Git detects renames.  If set to \"false\", rename detection\nis disabled. If set to \"true\", basic rename detection is enabled.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.directoryRenames"}, {"role": "assistant", "content": "Whether Git detects directory renames, affecting what happens at\nmerge time to new files added to a directory on one side of\nhistory when that directory was renamed on the other side of\nhistory.  If merge.directoryRenames is set to \"false\", directory\nrename detection is disabled, meaning that such new files will be\nleft behind in the old directory.  If set to \"true\", directory\nrename detection is enabled, meaning that such new files will be\nmoved into the new directory.  If set to \"conflict\", a conflict\nwill be reported for such paths.  If merge.renames is false,\nmerge.directoryRenames is ignored and treated as false.  Defaults\nto \"conflict\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.renormalize"}, {"role": "assistant", "content": "Tell Git that canonical representation of files in the\nrepository has changed over time (e.g. earlier commits record\ntext files with CRLF line endings, but recent ones use LF line\nendings).  In such a repository, Git can convert the data\nrecorded in commits to a canonical form before performing a\nmerge to reduce unnecessary conflicts.  For more information,\nsee section \"Merging branches with differing checkin/checkout\nattributes\" in gitattributes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.stat"}, {"role": "assistant", "content": "Whether to print the diffstat between ORIG_HEAD and the merge result\nat the end of the merge.  True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run merge on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful merge might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-merge .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.tool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires\nthat a corresponding mergetool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.guitool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool when the\n-g/--gui flag is specified. The list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires that a\ncorresponding mergetool.<guitool>.cmd variable is defined. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 meld nvimdiff opendiff p4merge smerge tkdiff tortoisemerge vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.verbosity"}, {"role": "assistant", "content": "Controls the amount of output shown by the recursive merge\nstrategy.  Level 0 outputs nothing except a final error\nmessage if conflicts were detected. Level 1 outputs only\nconflicts, 2 outputs conflicts and file changes.  Level 5 and\nabove outputs debugging information.  The default is level 2.\nCan be overridden by the GIT_MERGE_VERBOSITY environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.name"}, {"role": "assistant", "content": "Defines a human-readable name for a custom low-level\nmerge driver.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.driver"}, {"role": "assistant", "content": "Defines the command that implements a custom low-level\nmerge driver.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.<driver>.recursive"}, {"role": "assistant", "content": "Names a low-level merge driver to be used when\nperforming an internal merge between common ancestors.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified merge tool.  The\nspecified command is evaluated in shell with the following\nvariables available: BASE is the name of a temporary file\ncontaining the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of\nthe file on the current branch; REMOTE is the name of a temporary\nfile containing the contents of the file from the branch being\nmerged; MERGED contains the name of the file to which the merge\ntool should write the results of a successful merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.hideResolved"}, {"role": "assistant", "content": "Allows the user to override the global mergetool.hideResolved value\nfor a specific tool. See mergetool.hideResolved for the full\ndescription."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.trustExitCode"}, {"role": "assistant", "content": "For a custom merge command, specify whether the exit code of\nthe merge command can be used to determine whether the merge was\nsuccessful.  If this is not set to true then the merge target file\ntimestamp is checked, and the merge is assumed to have been successful\nif the file has been updated; otherwise, the user is prompted to\nindicate the success of the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.meld.hasOutput"}, {"role": "assistant", "content": "Older versions of meld do not support the --output option.\nGit will attempt to detect whether meld supports --output by inspecting the output of meld --help .  Configuring mergetool.meld.hasOutput will make Git skip these checks and\nuse the configured value instead.  Setting mergetool.meld.hasOutput to true tells Git to unconditionally use the --output option,\nand false avoids using --output ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.meld.useAutoMerge"}, {"role": "assistant", "content": "When the --auto-merge is given, meld will merge all non-conflicting\nparts automatically, highlight the conflicting parts, and wait for\nuser decision.  Setting mergetool.meld.useAutoMerge to true tells\nGit to unconditionally use the --auto-merge option with meld .\nSetting this value to auto makes git detect whether --auto-merge is supported and will only use --auto-merge when available.  A\nvalue of false avoids using --auto-merge altogether, and is the\ndefault value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<vimdiff variant>.layout"}, {"role": "assistant", "content": "Configure the split window layout for vimdiff’s <variant> , which is any of vimdiff , nvimdiff , gvimdiff .\nUpon launching git mergetool with --tool=<variant> (or without --tool if merge.tool is configured as <variant> ), Git will consult mergetool.<variant>.layout to determine the tool’s layout. If the\nvariant-specific configuration is not available, vimdiff 's is used as\nfallback.  If that too is not available, a default layout with 4 windows\nwill be used.  To configure the layout, see the BACKEND SPECIFIC HINTS section in git-mergetool ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.hideResolved"}, {"role": "assistant", "content": "During a merge, Git will automatically resolve as many conflicts as\npossible and write the MERGED file containing conflict markers around\nany conflicts that it cannot resolve; LOCAL and REMOTE normally\nrepresent the versions of the file from before Git’s conflict\nresolution. This flag causes LOCAL and REMOTE to be overwritten so\nthat only the unresolved conflicts are presented to the merge tool. Can\nbe configured per-tool via the mergetool.<tool>.hideResolved configuration variable. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.keepBackup"}, {"role": "assistant", "content": "After performing a merge, the original file with conflict markers\ncan be saved as a file with a .orig extension.  If this variable\nis set to false then this file is not preserved.  Defaults to true (i.e. keep the backup files)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.keepTemporaries"}, {"role": "assistant", "content": "When invoking a custom merge tool, Git uses a set of temporary\nfiles to pass to the tool. If the tool returns an error and this\nvariable is set to true , then these temporary files will be\npreserved; otherwise, they will be removed after the tool has\nexited. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.writeToTemp"}, {"role": "assistant", "content": "Git writes temporary BASE , LOCAL , and REMOTE versions of\nconflicting files in the worktree by default.  Git will attempt\nto use a temporary directory for these files when set true .\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.guiDefault"}, {"role": "assistant", "content": "Set true to use the merge.guitool by default (equivalent to\nspecifying the --gui argument), or auto to select merge.guitool or merge.tool depending on the presence of a DISPLAY environment\nvariable value. The default is false , where the --gui argument\nmust be provided explicitly for the merge.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.rewriteRef"}, {"role": "assistant", "content": "When copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.window"}, {"role": "assistant", "content": "The size of the window used by git-pack-objects when no\nwindow size is given on the command line. Defaults to 10."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.depth"}, {"role": "assistant", "content": "The maximum delta depth used by git-pack-objects when no\nmaximum depth is given on the command line. Defaults to 50.\nMaximum value is 4095."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.windowMemory"}, {"role": "assistant", "content": "The maximum size of memory that is consumed by each thread\nin git-pack-objects for pack window memory when\nno limit is given on the command line.  The value can be\nsuffixed with \"k\", \"m\", or \"g\".  When left unconfigured (or\nset explicitly to 0), there will be no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.compression"}, {"role": "assistant", "content": "An integer -1..9, indicating the compression level for objects\nin a pack file. -1 is the zlib default. 0 means no\ncompression, and 1..9 are various speed/size tradeoffs, 9 being\nslowest.  If not set,  defaults to core.compression.  If that is\nnot set,  defaults to -1, the zlib default, which is \"a default\ncompromise between speed and compression (currently equivalent\nto level 6).\" Note that changing the compression level will not automatically recompress\nall existing objects. You can force recompression by passing the -F option\nto git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.allowPackReuse"}, {"role": "assistant", "content": "When true or \"single\", and when reachability bitmaps are\nenabled, pack-objects will try to send parts of the bitmapped\npackfile verbatim. When \"multi\", and when a multi-pack\nreachability bitmap is available, pack-objects will try to send\nparts of all packs in the MIDX. If only a single pack bitmap is available, and pack.allowPackReuse is set to \"multi\", reuse parts of just the bitmapped packfile. This\ncan reduce memory and CPU usage to serve fetches, but might result in\nsending a slightly larger pack. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.island"}, {"role": "assistant", "content": "An extended regular expression configuring a set of delta\nislands. See \"DELTA ISLANDS\" in git-pack-objects for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.islandCore"}, {"role": "assistant", "content": "Specify an island name which gets to have its objects be\npacked first. This creates a kind of pseudo-pack at the front\nof one pack, so that the objects from the specified island are\nhopefully faster to copy into any pack that should be served\nto a user requesting these objects. In practice this means\nthat the island specified should likely correspond to what is\nthe most commonly cloned in the repo. See also \"DELTA ISLANDS\"\nin git-pack-objects ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.deltaCacheSize"}, {"role": "assistant", "content": "The maximum memory in bytes used for caching deltas in git-pack-objects before writing them out to a pack.\nThis cache is used to speed up the writing object phase by not\nhaving to recompute the final delta result once the best match\nfor all objects is found.  Repacking large repositories on machines\nwhich are tight with memory might be badly impacted by this though,\nespecially if this cache pushes the system into swapping.\nA value of 0 means no limit. The smallest size of 1 byte may be\nused to virtually disable this cache. Defaults to 256 MiB."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.deltaCacheLimit"}, {"role": "assistant", "content": "The maximum size of a delta, that is cached in git-pack-objects . This cache is used to speed up the\nwriting object phase by not having to recompute the final delta\nresult once the best match for all objects is found.\nDefaults to 1000. Maximum value is 65535."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.threads"}, {"role": "assistant", "content": "Specifies the number of threads to spawn when searching for best\ndelta matches.  This requires that git-pack-objects be compiled with pthreads otherwise this option is ignored with a\nwarning. This is meant to reduce packing time on multiprocessor\nmachines. The required amount of memory for the delta search window\nis however multiplied by the number of threads.\nSpecifying 0 will cause Git to auto-detect the number of CPUs\nand set the number of threads accordingly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.indexVersion"}, {"role": "assistant", "content": "Specify the default pack index version.  Valid values are 1 for\nlegacy pack index used by Git versions prior to 1.5.2, and 2 for\nthe new pack index with capabilities for packs larger than 4 GB\nas well as proper protection against the repacking of corrupted\npacks.  Version 2 is the default.  Note that version 2 is enforced\nand this config option is ignored whenever the corresponding pack is\nlarger than 2 GB. If you have an old Git that does not understand the version 2 *.idx file,\ncloning or fetching over a non-native protocol (e.g. \"http\")\nthat will copy both *.pack file and corresponding *.idx file from the\nother side may give you a repository that cannot be accessed with your\nolder version of Git. If the *.pack file is smaller than 2 GB, however,\nyou can use git-index-pack on the *.pack file to regenerate\nthe *.idx file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.packSizeLimit"}, {"role": "assistant", "content": "The maximum size of a pack.  This setting only affects\npacking to a file when repacking, i.e. the git:// protocol\nis unaffected.  It can be overridden by the --max-pack-size option of git-repack .  Reaching this limit results\nin the creation of multiple packfiles. Note that this option is rarely useful, and may result in a larger total\non-disk size (because Git will not store deltas between packs) and\nworse runtime performance (object lookup within multiple packs is\nslower than a single pack, and optimizations like reachability bitmaps\ncannot cope with multiple packs). If you need to actively run Git using smaller packfiles (e.g., because your\nfilesystem does not support large files), this option may help. But if\nyour goal is to transmit a packfile over a medium that supports limited\nsizes (e.g., removable media that cannot store the whole repository),\nyou are likely better off creating a single large packfile and splitting\nit using a generic multi-volume archive tool (e.g., Unix split ). The minimum size allowed is limited to 1 MiB. The default is unlimited.\nCommon unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useBitmaps"}, {"role": "assistant", "content": "When true, git will use pack bitmaps (if available) when packing\nto stdout (e.g., during the server side of a fetch). Defaults to\ntrue. You should not generally need to turn this off unless\nyou are debugging pack bitmaps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useBitmapBoundaryTraversal"}, {"role": "assistant", "content": "When true, Git will use an experimental algorithm for computing\nreachability queries with bitmaps. Instead of building up\ncomplete bitmaps for all of the negated tips and then OR-ing\nthem together, consider negated tips with existing bitmaps as\nadditive (i.e. OR-ing them into the result if they exist,\nignoring them otherwise), and build up a bitmap at the boundary\ninstead. When using this algorithm, Git may include too many objects as a result\nof not opening up trees belonging to certain UNINTERESTING commits. This\ninexactness matches the non-bitmap traversal algorithm. In many cases, this can provide a speed-up over the exact algorithm,\nparticularly when there is poor bitmap coverage of the negated side of\nthe query."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.useSparse"}, {"role": "assistant", "content": "When true, git will default to using the --sparse option in git pack-objects when the --revs option is present. This\nalgorithm only walks trees that appear in paths that introduce new\nobjects. This can have significant performance benefits when\ncomputing a pack to send a small change. However, it is possible\nthat extra objects are added to the pack-file if the included\ncommits contain certain types of direct renames. Default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.preferBitmapTips"}, {"role": "assistant", "content": "When selecting which commits will receive bitmaps, prefer a\ncommit at the tip of any reference that is a suffix of any value\nof this configuration over any other commits in the \"selection\nwindow\". Note that setting this configuration to refs/foo does not mean that\nthe commits at the tips of refs/foo/bar and refs/foo/baz will\nnecessarily be selected. This is because commits are selected for\nbitmaps from within a series of windows of variable length. If a commit at the tip of any reference which is a suffix of any value\nof this configuration is seen in a window, it is immediately given\npreference over any other commit in that window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmaps (deprecated)"}, {"role": "assistant", "content": "This is a deprecated synonym for repack.writeBitmaps ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmapHashCache"}, {"role": "assistant", "content": "When true, git will include a \"hash cache\" section in the bitmap\nindex (if one is written). This cache can be used to feed git’s\ndelta heuristics, potentially leading to better deltas between\nbitmapped and non-bitmapped objects (e.g., when serving a fetch\nbetween an older, bitmapped pack and objects that have been\npushed since the last gc). The downside is that it consumes 4\nbytes per object of disk space. Defaults to true. When writing a multi-pack reachability bitmap, no new namehashes are\ncomputed; instead, any namehashes stored in an existing bitmap are\npermuted into their appropriate location when writing a new bitmap."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeBitmapLookupTable"}, {"role": "assistant", "content": "When true, Git will include a \"lookup table\" section in the\nbitmap index (if one is written). This table is used to defer\nloading individual bitmaps as late as possible. This can be\nbeneficial in repositories that have relatively large bitmap\nindexes. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.readReverseIndex"}, {"role": "assistant", "content": "When true, git will read any .rev file(s) that may be available\n(see: gitformat-pack ). When false, the reverse index\nwill be generated from scratch and stored in memory. Defaults to\ntrue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.writeReverseIndex"}, {"role": "assistant", "content": "When true, git will write a corresponding .rev file (see: gitformat-pack )\nfor each new packfile that it writes in all places except for git-fast-import and in the bulk checkin mechanism.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pager.<cmd>"}, {"role": "assistant", "content": "If the value is boolean, turns on or off pagination of the\noutput of a particular Git subcommand when writing to a tty.\nOtherwise, turns on pagination for the subcommand using the\npager specified by the value of pager.<cmd> .  If --paginate or --no-pager is specified on the command line, it takes\nprecedence over this option.  To disable pagination for all\ncommands, set core.pager or GIT_PAGER to cat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pretty.<name>"}, {"role": "assistant", "content": "Alias for a --pretty= format string, as specified in git-log . Any aliases defined here can be used just\nas the built-in pretty formats could. For example,\nrunning git config pretty.changelog \"format:* %H %s\" would cause the invocation git log --pretty=changelog to be equivalent to running git log \"--pretty=format:* %H %s\" .\nNote that an alias with the same name as a built-in format\nwill be silently ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.allow"}, {"role": "assistant", "content": "If set, provide a user defined default policy for all protocols which\ndon’t explicitly have a policy ( protocol.<name>.allow ).  By default,\nif unset, known-safe protocols (http, https, git, ssh) have a\ndefault policy of always , known-dangerous protocols (ext) have a\ndefault policy of never , and all other protocols (including file)\nhave a default policy of user .  Supported policies: always - protocol is always able to be used. never - protocol is never able to be used. user - protocol is only able to be used when GIT_PROTOCOL_FROM_USER is\neither unset or has a value of 1.  This policy should be used when you want a\nprotocol to be directly usable by the user but don’t want it used by commands which\nexecute clone/fetch/push commands without user input, e.g. recursive\nsubmodule initialization."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.<name>.allow"}, {"role": "assistant", "content": "Set a policy to be used by protocol <name> with clone/fetch/push\ncommands. See protocol.allow above for the available policies. The protocol names currently used by git are: file : any local file-based path (including file:// URLs,\nor local paths) git : the anonymous git protocol over a direct TCP\nconnection (or proxy, if configured) ssh : git over ssh (including host:path syntax, ssh:// , etc). http : git over http, both \"smart http\" and \"dumb http\".\nNote that this does not include https ; if you want to configure\nboth, you must do so individually. any external helpers are named by their protocol (e.g., use hg to allow the git-remote-hg helper)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  protocol.version"}, {"role": "assistant", "content": "If set, clients will attempt to communicate with a server\nusing the specified protocol version.  If the server does\nnot support it, communication falls back to version 0.\nIf unset, the default is 2 .\nSupported versions: 0 - the original wire protocol. 1 - the original wire protocol with the addition of a version string\nin the initial response from the server. 2 - Wire protocol version 2, see gitprotocol-v2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line). This setting overrides merge.ff when pulling."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.rebase"}, {"role": "assistant", "content": "When true, rebase branches on top of the fetched branch, instead\nof merging the default branch from the default remote when \"git\npull\" is run. See \"branch.<name>.rebase\" for setting this on a\nper-branch basis. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.octopus"}, {"role": "assistant", "content": "The default merge strategy to use when pulling multiple branches\nat once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pull.twohead"}, {"role": "assistant", "content": "The default merge strategy to use when pulling a single branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.autoSetupRemote"}, {"role": "assistant", "content": "If set to \"true\" assume --set-upstream on default push when no\nupstream tracking exists for the current branch; this option\ntakes effect with push.default options simple , upstream ,\nand current . It is useful if by default you want new branches\nto be pushed to the default remote (like the behavior of push.default=current ) and you also want the upstream tracking\nto be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to\nhave the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.default"}, {"role": "assistant", "content": "Defines the action git push should take if no refspec is\ngiven (whether from the command-line, config, or elsewhere).\nDifferent values are well-suited for\nspecific workflows; for instance, in a purely central workflow\n(i.e. the fetch source is equal to the push destination), upstream is probably what you want.  Possible values are: nothing - do not push anything (error out) unless a refspec is\ngiven. This is primarily meant for people who want to\navoid mistakes by always being explicit. current - push the current branch to update a branch with the same\nname on the receiving end.  Works in both central and non-central\nworkflows. upstream - push the current branch back to the branch whose\nchanges are usually integrated into the current branch (which is\ncalled @{upstream} ).  This mode only makes sense if you are\npushing to the same repository you would normally pull from\n(i.e. central workflow). tracking - This is a deprecated synonym for upstream . simple - push the current branch with the same name on the remote. If you are working on a centralized workflow (pushing to the same repository you\npull from, which is typically origin ), then you need to configure an upstream\nbranch with the same name. This mode is the default since Git 2.0, and is the safest option suited for\nbeginners. matching - push all branches having the same name on both ends.\nThis makes the repository you are pushing to remember the set of\nbranches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push\nto will have these two branches, and your local maint and master will be pushed there). To use this mode effectively, you have to make sure all the\nbranches you would push out are ready to be pushed out before\nrunning git push , as the whole point of this mode is to allow you\nto push all of the branches in one go.  If you usually finish work\non only one branch and push out the result, while other branches are\nunfinished, this mode is not for you.  Also this mode is not\nsuitable for pushing into a shared central repository, as other\npeople may add new branches there, or update the tip of existing\nbranches outside your control. This used to be the default, but not since Git 2.0 ( simple is the\nnew default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.followTags"}, {"role": "assistant", "content": "If set to true, enable --follow-tags option by default.  You\nmay override this configuration at time of push by specifying --no-follow-tags ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.gpgSign"}, {"role": "assistant", "content": "May be set to a boolean value, or the string if-asked . A true\nvalue causes all pushes to be GPG signed, as if --signed is\npassed to git-push . The string if-asked causes\npushes to be signed if the server supports it, as if --signed=if-asked is passed to git push . A false value may\noverride a value from a lower-priority config file. An explicit\ncommand-line flag always overrides this config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.pushOption"}, {"role": "assistant", "content": "When no --push-option=<option> argument is given from the\ncommand line, git push behaves as if each <value> of\nthis variable is given as --push-option=<value> . This is a multi-valued variable, and an empty value can be used in a\nhigher priority configuration file (e.g. .git/config in a\nrepository) to clear the values inherited from a lower priority\nconfiguration files (e.g. $HOME/.gitconfig ). Example:\n\n/etc/gitconfig\n  push.pushoption = a\n  push.pushoption = b\n\n~/.gitconfig\n  push.pushoption = c\n\nrepo/.git/config\n  push.pushoption =\n  push.pushoption = b\n\nThis will result in only b (a and c are cleared)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.recurseSubmodules"}, {"role": "assistant", "content": "May be \"check\", \"on-demand\", \"only\", or \"no\", with the same behavior\nas that of \"push --recurse-submodules\".\nIf not set, no is used by default, unless submodule.recurse is\nset (in which case a true value means on-demand )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.useForceIfIncludes"}, {"role": "assistant", "content": "If set to \"true\", it is equivalent to specifying --force-if-includes as an option to git-push in the command line. Adding --no-force-if-includes at the\ntime of push overrides this configuration setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.negotiate"}, {"role": "assistant", "content": "If set to \"true\", attempt to reduce the size of the packfile\nsent by rounds of negotiation in which the client and the\nserver attempt to find commits in common. If \"false\", Git will\nrely solely on the server’s ref advertisement to find commits\nin common."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  push.useBitmaps"}, {"role": "assistant", "content": "If set to \"false\", disable use of bitmaps for \"git push\" even if pack.useBitmaps is \"true\", without preventing other git operations\nfrom using bitmaps. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.backend"}, {"role": "assistant", "content": "Default backend to use for rebasing.  Possible choices are apply or merge .  In the future, if the merge backend gains\nall remaining capabilities of the apply backend, this setting\nmay become unused."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.stat"}, {"role": "assistant", "content": "Whether to show a diffstat of what changed upstream since the last\nrebase. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.autoSquash"}, {"role": "assistant", "content": "If set to true, enable the --autosquash option of git-rebase by default for interactive mode.\nThis can be overridden with the --no-autosquash option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run rebase on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful rebase might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-rebase .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.updateRefs"}, {"role": "assistant", "content": "If set to true enable --update-refs option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.missingCommitsCheck"}, {"role": "assistant", "content": "If set to \"warn\", git rebase -i will print a warning if some\ncommits are removed (e.g. a line was deleted), however the\nrebase will still proceed. If set to \"error\", it will print\nthe previous warning and stop the rebase, git rebase\n--edit-todo can then be used to correct the error. If set to\n\"ignore\", no checking is done.\nTo drop a commit without warning or error, use the drop command in the todo list.\nDefaults to \"ignore\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.instructionFormat"}, {"role": "assistant", "content": "A format string, as specified in git-log , to be used for the\ntodo list during an interactive rebase.  The format will\nautomatically have the commit hash prepended to the format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.abbreviateCommands"}, {"role": "assistant", "content": "If set to true, git rebase will use abbreviated command names in the\ntodo list resulting in something like this: p deadbee The oneline of the commit\n\tp fa1afe1 The oneline of the next commit\n\t... instead of: pick deadbee The oneline of the commit\n\tpick fa1afe1 The oneline of the next commit\n\t... Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.rescheduleFailedExec"}, {"role": "assistant", "content": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\nThis is the same as specifying the --reschedule-failed-exec option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.forkPoint"}, {"role": "assistant", "content": "If set to false set --no-fork-point option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.rebaseMerges"}, {"role": "assistant", "content": "Whether and how to set the --rebase-merges option by default. Can\nbe rebase-cousins , no-rebase-cousins , or a boolean. Setting to\ntrue or to no-rebase-cousins is equivalent to --rebase-merges=no-rebase-cousins , setting to rebase-cousins is\nequivalent to --rebase-merges=rebase-cousins , and setting to false is\nequivalent to --no-rebase-merges . Passing --rebase-merges on the\ncommand line, with or without an argument, overrides any rebase.rebaseMerges configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.maxLabelLength"}, {"role": "assistant", "content": "When generating label names from commit subjects, truncate the names to\nthis length. By default, the names are truncated to a little less than NAME_MAX (to allow e.g. .lock files to be written for the\ncorresponding loose refs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.advertiseAtomic"}, {"role": "assistant", "content": "By default, git-receive-pack will advertise the atomic push\ncapability to its clients. If you don’t want to advertise this\ncapability, set this variable to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.advertisePushOptions"}, {"role": "assistant", "content": "When set to true, git-receive-pack will advertise the push options\ncapability to its clients. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.autogc"}, {"role": "assistant", "content": "By default, git-receive-pack will run \"git maintenance run --auto\" after\nreceiving data from git-push and updating refs.  You can stop\nit by setting this variable to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.certNonceSeed"}, {"role": "assistant", "content": "By setting this variable to a string, git receive-pack will accept a git push --signed and verify it by using\na \"nonce\" protected by HMAC using this string as a secret\nkey."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.certNonceSlop"}, {"role": "assistant", "content": "When a git push --signed sends a push certificate with a\n\"nonce\" that was issued by a receive-pack serving the same\nrepository within this many seconds, export the \"nonce\"\nfound in the certificate to GIT_PUSH_CERT_NONCE to the\nhooks (instead of what the receive-pack asked the sending\nside to include).  This may allow writing checks in pre-receive and post-receive a bit easier.  Instead of\nchecking GIT_PUSH_CERT_NONCE_SLOP environment variable\nthat records by how many seconds the nonce is stale to\ndecide if they want to accept the certificate, they only\ncan check GIT_PUSH_CERT_NONCE_STATUS is OK ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsckObjects"}, {"role": "assistant", "content": "If it is set to true, git-receive-pack will check all received\nobjects. See transfer.fsckObjects for what’s checked.\nDefaults to false. If not set, the value of transfer.fsckObjects is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-receive-pack instead of git-fsck . See the fsck.<msg-id> documentation for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.fsck.skipList"}, {"role": "assistant", "content": "Acts like fsck.skipList , but is used by git-receive-pack instead of git-fsck . See the fsck.skipList documentation for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.keepAlive"}, {"role": "assistant", "content": "After receiving the pack from the client, receive-pack may\nproduce no output (if --quiet was specified) while processing\nthe pack, causing some networks to drop the TCP connection.\nWith this option set, if receive-pack does not transmit\nany data in this phase for receive.keepAlive seconds, it will\nsend a short keepalive packet.  The default is 5 seconds; set\nto 0 to disable keepalives entirely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.unpackLimit"}, {"role": "assistant", "content": "If the number of objects received in a push is below this\nlimit then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.maxInputSize"}, {"role": "assistant", "content": "If the size of the incoming pack stream is larger than this\nlimit, then git-receive-pack will error out, instead of\naccepting the pack file. If not set or set to 0, then the size\nis unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyDeletes"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update that deletes\nthe ref. Use this to prevent such a ref deletion via a push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyDeleteCurrent"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update that\ndeletes the currently checked out branch of a non-bare repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyCurrentBranch"}, {"role": "assistant", "content": "If set to true or \"refuse\", git-receive-pack will deny a ref update\nto the currently checked out branch of a non-bare repository.\nSuch a push is potentially dangerous because it brings the HEAD\nout of sync with the index and working tree. If set to \"warn\",\nprint a warning of such a push to stderr, but allow the push to\nproceed. If set to false or \"ignore\", allow such pushes with no\nmessage. Defaults to \"refuse\". Another option is \"updateInstead\" which will update the working\ntree if pushing into the current branch.  This option is\nintended for synchronizing working directories when one side is not easily\naccessible via interactive ssh (e.g. a live web site, hence the requirement\nthat the working directory be clean). This mode also comes in handy when\ndeveloping inside a VM to test and fix code on different Operating Systems. By default, \"updateInstead\" will refuse the push if the working tree or\nthe index have any difference from the HEAD, but the push-to-checkout hook can be used to customize this.  See githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyNonFastForwards"}, {"role": "assistant", "content": "If set to true, git-receive-pack will deny a ref update which is\nnot a fast-forward. Use this to prevent such an update via a push,\neven if that push is forced. This configuration variable is\nset when initializing a shared repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.hideRefs"}, {"role": "assistant", "content": "This variable is the same as transfer.hideRefs , but applies\nonly to receive-pack (and so affects pushes, but not fetches).\nAn attempt to update or delete a hidden ref by git push is\nrejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.procReceiveRefs"}, {"role": "assistant", "content": "This is a multi-valued variable that defines reference prefixes\nto match the commands in receive-pack .  Commands matching the\nprefixes will be executed by an external hook \"proc-receive\",\ninstead of the internal execute_commands function.  If this\nvariable is not defined, the \"proc-receive\" hook will never be\nused, and all commands will be executed by the internal execute_commands function. For example, if this variable is set to \"refs/for\", pushing to reference\nsuch as \"refs/for/master\" will not create or update a reference named\n\"refs/for/master\", but may create or update a pull request directly by\nrunning the hook \"proc-receive\". Optional modifiers can be provided in the beginning of the value to filter\ncommands for specific actions: create (a), modify (m), delete (d).\nA ! can be included in the modifiers to negate the reference prefix entry.\nE.g.: git config --system --add receive.procReceiveRefs ad:refs/heads\ngit config --system --add receive.procReceiveRefs !:refs/heads"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.updateServerInfo"}, {"role": "assistant", "content": "If set to true, git-receive-pack will run git-update-server-info\nafter receiving data from git-push and updating refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.shallowUpdate"}, {"role": "assistant", "content": "If set to true, .git/shallow can be updated when new refs\nrequire new shallow roots. Otherwise those refs are rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.pushDefault"}, {"role": "assistant", "content": "The remote to push to by default.  Overrides branch.<name>.remote for all branches, and is overridden by branch.<name>.pushRemote for specific branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.url"}, {"role": "assistant", "content": "The URL of a remote repository.  See git-fetch or git-push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.pushurl"}, {"role": "assistant", "content": "The push URL of a remote repository.  See git-push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.proxy"}, {"role": "assistant", "content": "For remotes that require curl (http, https and ftp), the URL to\nthe proxy to use for that remote.  Set to the empty string to\ndisable proxying for that remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.proxyAuthMethod"}, {"role": "assistant", "content": "For remotes that require curl (http, https and ftp), the method to use for\nauthenticating against the proxy in use (probably set in remote.<name>.proxy ). See http.proxyAuthMethod ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.fetch"}, {"role": "assistant", "content": "The default set of \"refspec\" for git-fetch . See git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.push"}, {"role": "assistant", "content": "The default set of \"refspec\" for git-push . See git-push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.mirror"}, {"role": "assistant", "content": "If true, pushing to this remote will automatically behave\nas if the --mirror option was given on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.skipDefaultUpdate"}, {"role": "assistant", "content": "If true, this remote will be skipped by default when updating\nusing git-fetch or the update subcommand of git-remote ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.skipFetchAll"}, {"role": "assistant", "content": "If true, this remote will be skipped by default when updating\nusing git-fetch or the update subcommand of git-remote ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.receivepack"}, {"role": "assistant", "content": "The default program to execute on the remote side when pushing.  See\noption --receive-pack of git-push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.uploadpack"}, {"role": "assistant", "content": "The default program to execute on the remote side when fetching.  See\noption --upload-pack of git-fetch-pack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.tagOpt"}, {"role": "assistant", "content": "Setting this value to --no-tags disables automatic tag following when\nfetching from remote <name>. Setting it to --tags will fetch every\ntag from remote <name>, even if they are not reachable from remote\nbranch heads. Passing these flags directly to git-fetch can\noverride this setting. See options --tags and --no-tags of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.vcs"}, {"role": "assistant", "content": "Setting this to a value <vcs> will cause Git to interact with\nthe remote with the git-remote-<vcs> helper."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.prune"}, {"role": "assistant", "content": "When set to true, fetching from this remote by default will also\nremove any remote-tracking references that no longer exist on the\nremote (as if the --prune option was given on the command line).\nOverrides fetch.prune settings, if any."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.pruneTags"}, {"role": "assistant", "content": "When set to true, fetching from this remote by default will also\nremove any local tags that no longer exist on the remote if pruning\nis activated in general via remote.<name>.prune , fetch.prune or --prune . Overrides fetch.pruneTags settings, if any. See also remote.<name>.prune and the PRUNING section of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.promisor"}, {"role": "assistant", "content": "When set to true, this remote will be used to fetch promisor\nobjects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.partialclonefilter"}, {"role": "assistant", "content": "The filter that will be applied when fetching from this\tpromisor remote.\nChanging or clearing this value will only affect fetches for new commits.\nTo fetch associated objects for commits already present in the local object\ndatabase, use the --refetch option of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remotes.<group>"}, {"role": "assistant", "content": "The list of remotes which are fetched by \"git remote update\n<group>\".  See git-remote ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.useDeltaBaseOffset"}, {"role": "assistant", "content": "By default, git-repack creates packs that use\ndelta-base offset. If you need to share your repository with\nGit older than version 1.4.4, either directly or via a dumb\nprotocol such as http, then you need to set this option to\n\"false\" and repack. Access from old Git versions over the\nnative protocol are unaffected by this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.packKeptObjects"}, {"role": "assistant", "content": "If set to true, makes git repack act as if --pack-kept-objects was passed. See git-repack for\ndetails. Defaults to false normally, but true if a bitmap\nindex is being written (either via --write-bitmap-index or repack.writeBitmaps )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.useDeltaIslands"}, {"role": "assistant", "content": "If set to true, makes git repack act as if --delta-islands was passed. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.writeBitmaps"}, {"role": "assistant", "content": "When true, git will write a bitmap index when packing all\nobjects to disk (e.g., when git repack -a is run).  This\nindex can speed up the \"counting objects\" phase of subsequent\npacks created for clones and fetches, at the cost of some disk\nspace and extra time spent on the initial repack.  This has\nno effect if multiple packfiles are created.\nDefaults to true on bare repos, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.updateServerInfo"}, {"role": "assistant", "content": "If set to false, git-repack will not run git-update-server-info . Defaults to true. Can be overridden\nwhen true by the -n option of git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  repack.cruftWindow  repack.cruftWindowMemory  repack.cruftDepth  repack.cruftThreads"}, {"role": "assistant", "content": "Parameters used by git-pack-objects when generating\na cruft pack and the respective parameters are not given over\nthe command line. See similarly named pack.* configuration\nvariables for defaults and meaning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rerere.autoUpdate"}, {"role": "assistant", "content": "When set to true, git-rerere updates the index with the\nresulting contents after it cleanly resolves conflicts using\npreviously recorded resolutions.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rerere.enabled"}, {"role": "assistant", "content": "Activate recording of resolved conflicts, so that identical\nconflict hunks can be resolved automatically, should they be\nencountered again.  By default, git-rerere is\nenabled if there is an rr-cache directory under the $GIT_DIR , e.g. if \"rerere\" was previously used in the\nrepository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  revert.reference"}, {"role": "assistant", "content": "Setting this variable to true makes git revert behave\nas if the --reference option is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  safe.bareRepository"}, {"role": "assistant", "content": "Specifies which bare repositories Git will work with. The currently\nsupported values are: all : Git works with all bare repositories. This is the default. explicit : Git only works with bare repositories specified via\nthe top-level --git-dir command-line option, or the GIT_DIR environment variable (see git ). If you do not use bare repositories in your workflow, then it may be\nbeneficial to set safe.bareRepository to explicit in your global\nconfig. This will protect you from attacks that involve cloning a\nrepository that contains a bare repository and running a Git command\nwithin that directory. This config setting is only respected in protected configuration (see SCOPES ). This prevents untrusted repositories from tampering with\nthis value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  safe.directory"}, {"role": "assistant", "content": "These config entries specify Git-tracked directories that are\nconsidered safe even if they are owned by someone other than the\ncurrent user. By default, Git will refuse to even parse a Git\nconfig of a repository owned by someone else, let alone run its\nhooks, and this config setting allows users to specify exceptions,\ne.g. for intentionally shared repositories (see the --shared option in git-init ). This is a multi-valued setting, i.e. you can add more than one directory\nvia git config --add . To reset the list of safe directories (e.g. to\noverride any such directories specified in the system config), add a safe.directory entry with an empty value. This config setting is only respected in protected configuration (see SCOPES ). This prevents untrusted repositories from tampering with this\nvalue. The value of this setting is interpolated, i.e. ~/<path> expands to a\npath relative to the home directory and %(prefix)/<path> expands to a\npath relative to Git’s (runtime) prefix. To completely opt-out of this security check, set safe.directory to the\nstring * . This will allow all repositories to be treated as if their\ndirectory was listed in the safe.directory list. If safe.directory=* is set in system config and you want to re-enable this protection, then\ninitialize your list with an empty value before listing the repositories\nthat you deem safe. As explained, Git only allows you to access repositories owned by\nyourself, i.e. the user who is running Git, by default.  When Git\nis running as root in a non Windows platform that provides sudo,\nhowever, git checks the SUDO_UID environment variable that sudo creates\nand will allow access to the uid recorded as its value in addition to\nthe id from root .\nThis is to make it easy to perform a common sequence during installation\n\"make && sudo make install\".  A git process running under sudo runs as root but the sudo command exports the environment variable to record\nwhich id the original user has.\nIf that is not what you would prefer and want git to only trust\nrepositories that are owned by root instead, then you can remove\nthe SUDO_UID variable from root’s environment before invoking git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.identity"}, {"role": "assistant", "content": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpEncryption"}, {"role": "assistant", "content": "See git-send-email for description.  Note that this\nsetting is not subject to the identity mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpSSLCertPath"}, {"role": "assistant", "content": "Path to ca-certificates (either a directory or a single file).\nSet it to an empty string to disable certificate verification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.<identity>.*"}, {"role": "assistant", "content": "Identity-specific versions of the sendemail.* parameters\nfound below, taking precedence over those when this\nidentity is selected, through either the command-line or sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.multiEdit"}, {"role": "assistant", "content": "If true (default), a single editor instance will be spawned to edit\nfiles you have to edit (patches when --annotate is used, and the\nsummary when --compose is used). If false, files will be edited one\nafter the other, spawning a new editor each time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.confirm"}, {"role": "assistant", "content": "Sets the default for whether to confirm before sending. Must be\none of always , never , cc , compose , or auto . See --confirm in the git-send-email documentation for the meaning of these\nvalues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.aliasesFile"}, {"role": "assistant", "content": "To avoid typing long email addresses, point this to one or more\nemail aliases files.  You must also supply sendemail.aliasFileType ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.aliasFileType"}, {"role": "assistant", "content": "Format of the file(s) specified in sendemail.aliasesFile. Must be\none of mutt , mailrc , pine , elm , gnus , or sendmail . What an alias file in each format looks like can be found in\nthe documentation of the email program of the same name. The\ndifferences and limitations from the standard formats are\ndescribed below: sendmail Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.annotate  sendemail.bcc  sendemail.cc  sendemail.ccCmd  sendemail.chainReplyTo  sendemail.envelopeSender  sendemail.from  sendemail.headerCmd  sendemail.signedOffByCc  sendemail.smtpPass  sendemail.suppressCc  sendemail.suppressFrom  sendemail.to  sendemail.toCmd  sendemail.smtpDomain  sendemail.smtpServer  sendemail.smtpServerPort  sendemail.smtpServerOption  sendemail.smtpUser  sendemail.thread  sendemail.transferEncoding  sendemail.validate  sendemail.xmailer"}, {"role": "assistant", "content": "These configuration variables all provide a default for git-send-email command-line options. See its\ndocumentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.signedOffCc (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for sendemail.signedOffByCc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpBatchSize"}, {"role": "assistant", "content": "Number of messages to be sent per connection, after that a relogin\nwill happen.  If the value is 0 or undefined, send all messages in\none connection.\nSee also the --batch-size option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.smtpReloginDelay"}, {"role": "assistant", "content": "Seconds to wait before reconnecting to the smtp server.\nSee also the --relogin-delay option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendemail.forbidSendmailVariables"}, {"role": "assistant", "content": "To avoid common misconfiguration mistakes, git-send-email will abort with a warning if any configuration options for \"sendmail\"\nexist. Set this variable to bypass the check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sequence.editor"}, {"role": "assistant", "content": "Text editor used by git rebase -i for editing the rebase instruction file.\nThe value is meant to be interpreted by the shell when it is used.\nIt can be overridden by the GIT_SEQUENCE_EDITOR environment variable.\nWhen not configured, the default commit message editor is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  showBranch.default"}, {"role": "assistant", "content": "The default set of branches for git-show-branch .\nSee git-show-branch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sparse.expectFilesOutsideOfPatterns"}, {"role": "assistant", "content": "Typically with sparse checkouts, files not matching any\nsparsity patterns are marked with a SKIP_WORKTREE bit in the\nindex and are missing from the working tree.  Accordingly, Git\nwill ordinarily check whether files with the SKIP_WORKTREE bit\nare in fact present in the working tree contrary to\nexpectations.  If Git finds any, it marks those paths as\npresent by clearing the relevant SKIP_WORKTREE bits.  This\noption can be used to tell Git that such\npresent-despite-skipped files are expected and to stop\nchecking for them. The default is false , which allows Git to automatically recover\nfrom the list of files in the index and working tree falling out of\nsync. Set this to true if you are in a setup where some external factor\nrelieves Git of the responsibility for maintaining the consistency\nbetween the presence of working tree files and sparsity patterns.  For\nexample, if you have a Git-aware virtual file system that has a robust\nmechanism for keeping the working tree and the sparsity patterns up to\ndate based on access patterns. Regardless of this setting, Git does not check for\npresent-despite-skipped files unless sparse checkout is enabled, so\nthis config option has no effect unless core.sparseCheckout is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  splitIndex.maxPercentChange"}, {"role": "assistant", "content": "When the split index feature is used, this specifies the\npercent of entries the split index can contain compared to the\ntotal number of entries in both the split index and the shared\nindex before a new shared index is written.\nThe value should be between 0 and 100. If the value is 0, then\na new shared index is always written; if it is 100, a new\nshared index is never written.\nBy default, the value is 20, so a new shared index is written\nif the number of entries in the split index would be greater\nthan 20 percent of the total number of entries.\nSee git-update-index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  splitIndex.sharedIndexExpire"}, {"role": "assistant", "content": "When the split index feature is used, shared index files that\nwere not modified since the time this variable specifies will\nbe removed when a new shared index file is created. The value\n\"now\" expires all entries immediately, and \"never\" suppresses\nexpiration altogether.\nThe default value is \"2.weeks.ago\".\nNote that a shared index file is considered modified (for the\npurpose of expiration) each time a new split-index file is\neither created based on it or read from it.\nSee git-update-index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  ssh.variant"}, {"role": "assistant", "content": "By default, Git determines the command line arguments to use\nbased on the basename of the configured SSH command (configured\nusing the environment variable GIT_SSH or GIT_SSH_COMMAND or\nthe config setting core.sshCommand ). If the basename is\nunrecognized, Git will attempt to detect support of OpenSSH\noptions by first invoking the configured SSH command with the -G (print configuration) option and will subsequently use\nOpenSSH options (if that is successful) or no options besides\nthe host and remote command (if it fails). The config variable ssh.variant can be set to override this detection.\nValid values are ssh (to use OpenSSH options), plink , putty , tortoiseplink , simple (no options except the host and remote command).\nThe default auto-detection can be explicitly requested using the value auto .  Any other value is treated as ssh .  This setting can also be\noverridden via the environment variable GIT_SSH_VARIANT . The current command-line parameters used for each variant are as\nfollows: ssh - [-p port] [-4] [-6] [-o option] [username@]host command simple - [username@]host command plink or putty - [-P port] [-4] [-6] [username@]host command tortoiseplink - [-P port] [-4] [-6] -batch [username@]host command Except for the simple variant, command-line parameters are likely to\nchange as git gains new features."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showIncludeUntracked"}, {"role": "assistant", "content": "If this is set to true, the git stash show command will show\nthe untracked files of a stash entry.  Defaults to false. See\nthe description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showPatch"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show the stash entry in patch form.  Defaults to false.\nSee the description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showStat"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show a diffstat of the stash entry.  Defaults to true.\nSee the description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.relativePaths"}, {"role": "assistant", "content": "By default, git-status shows paths relative to the\ncurrent directory. Setting this variable to false shows paths\nrelative to the repository root (this was the default for Git\nprior to v1.5.4)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.short"}, {"role": "assistant", "content": "Set to true to enable --short by default in git-status .\nThe option --no-short takes precedence over this variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.branch"}, {"role": "assistant", "content": "Set to true to enable --branch by default in git-status .\nThe option --no-branch takes precedence over this variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.aheadBehind"}, {"role": "assistant", "content": "Set to true to enable --ahead-behind and false to enable --no-ahead-behind by default in git-status for\nnon-porcelain status formats.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.displayCommentPrefix"}, {"role": "assistant", "content": "If set to true, git-status will insert a comment\nprefix before each output line (starting with core.commentChar , i.e. # by default). This was the\nbehavior of git-status in Git 1.8.4 and previous.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.renameLimit"}, {"role": "assistant", "content": "The number of files to consider when performing rename detection\nin git-status and git-commit . Defaults to\nthe value of diff.renameLimit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames in git-status and git-commit .  If set to \"false\", rename detection is\ndisabled. If set to \"true\", basic rename detection is enabled.\nIf set to \"copies\" or \"copy\", Git will detect copies, as well.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.showStash"}, {"role": "assistant", "content": "If set to true, git-status will display the number of\nentries currently stashed away.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.showUntrackedFiles"}, {"role": "assistant", "content": "By default, git-status and git-commit show\nfiles which are not currently tracked by Git. Directories which\ncontain only untracked files, are shown with the directory name\nonly. Showing untracked files means that Git needs to lstat() all\nthe files in the whole repository, which might be slow on some\nsystems. So, this variable controls how the commands display\nthe untracked files. Possible values are: no - Show no untracked files. normal - Show untracked files and directories. all - Show also individual files in untracked directories. If this variable is not specified, it defaults to normal .\nAll usual spellings for Boolean value true are taken as normal and false as no .\nThis variable can be overridden with the -u|--untracked-files option\nof git-status and git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.submoduleSummary"}, {"role": "assistant", "content": "Defaults to false.\nIf this is set to a non-zero number or true (identical to -1 or an\nunlimited number), the submodule summary will be enabled and a\nsummary of commits for modified submodules will be shown (see\n--summary-limit option of git-submodule ). Please note\nthat the summary output command will be suppressed for all\nsubmodules when diff.ignoreSubmodules is set to all or only\nfor those submodules where submodule.<name>.ignore=all . The only\nexception to that rule is that status and commit will show staged\nsubmodule changes. To\nalso view the summary for ignored submodules you can either use\nthe --ignore-submodules=dirty command-line option or the git\nsubmodule summary command, which shows a similar output but does\nnot honor these settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.url"}, {"role": "assistant", "content": "The URL for a submodule. This variable is copied from the .gitmodules\nfile to the git config via git submodule init . The user can change\nthe configured URL before obtaining the submodule via git submodule\nupdate . If neither submodule.<name>.active nor submodule.active are\nset, the presence of this variable is used as a fallback to indicate\nwhether the submodule is of interest to git commands.\nSee git-submodule and gitmodules for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.update"}, {"role": "assistant", "content": "The method by which a submodule is updated by git submodule update ,\nwhich is the only affected command, others such as git checkout --recurse-submodules are unaffected. It exists for\nhistorical reasons, when git submodule was the only command to\ninteract with submodules; settings like submodule.active and pull.rebase are more specific. It is populated by git submodule init from the gitmodules file.\nSee description of update command in git-submodule ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.branch"}, {"role": "assistant", "content": "The remote branch name for a submodule, used by git submodule\nupdate --remote .  Set this option to override the value found in\nthe .gitmodules file.  See git-submodule and gitmodules for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.fetchRecurseSubmodules"}, {"role": "assistant", "content": "This option can be used to control recursive fetching of this\nsubmodule. It can be overridden by using the --[no-]recurse-submodules\ncommand-line option to \"git fetch\" and \"git pull\".\nThis setting will override that from in the gitmodules file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.ignore"}, {"role": "assistant", "content": "Defines under what circumstances \"git status\" and the diff family show\na submodule as modified. When set to \"all\", it will never be considered\nmodified (but it will nonetheless show up in the output of status and\ncommit when it has been staged), \"dirty\" will ignore all changes\nto the submodule’s work tree and\ntakes only differences between the HEAD of the submodule and the commit\nrecorded in the superproject into account. \"untracked\" will additionally\nlet submodules with modified tracked files in their work tree show up.\nUsing \"none\" (the default when this option is not set) also shows\nsubmodules that have untracked files in their work tree as changed.\nThis setting overrides any setting made in .gitmodules for this submodule,\nboth settings can be overridden on the command line by using the\n\"--ignore-submodules\" option. The git submodule commands are not\naffected by this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.<name>.active"}, {"role": "assistant", "content": "Boolean value indicating if the submodule is of interest to git\ncommands.  This config option takes precedence over the\nsubmodule.active config option. See gitsubmodules for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.active"}, {"role": "assistant", "content": "A repeated field which contains a pathspec used to match against a\nsubmodule’s path to determine if the submodule is of interest to git\ncommands. See gitsubmodules for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.recurse"}, {"role": "assistant", "content": "A boolean indicating if commands should enable the --recurse-submodules option by default. Defaults to false. When set to true, it can be deactivated via the --no-recurse-submodules option. Note that some Git commands\nlacking this option may call some of the above commands affected by submodule.recurse ; for instance git remote update will call git fetch but does not have a --no-recurse-submodules option.\nFor these commands a workaround is to temporarily change the\nconfiguration value by using git -c submodule.recurse=0 . The following list shows the commands that accept --recurse-submodules and whether they are supported by this\nsetting. checkout , fetch , grep , pull , push , read-tree , reset , restore and switch are always supported. clone and ls-files are not supported. branch is supported only if submodule.propagateBranches is\nenabled"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.propagateBranches"}, {"role": "assistant", "content": "[EXPERIMENTAL] A boolean that enables branching support when\nusing --recurse-submodules or submodule.recurse=true .\nEnabling this will allow certain commands to accept --recurse-submodules and certain commands that already accept --recurse-submodules will now consider branches.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.fetchJobs"}, {"role": "assistant", "content": "Specifies how many submodules are fetched/cloned at the same time.\nA positive integer allows up to that number of submodules fetched\nin parallel. A value of 0 will give some reasonable default.\nIf unset, it defaults to 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.alternateLocation"}, {"role": "assistant", "content": "Specifies how the submodules obtain alternates when submodules are\ncloned. Possible values are no , superproject .\nBy default no is assumed, which doesn’t add references. When the\nvalue is set to superproject the submodule to be cloned computes\nits alternates location relative to the superprojects alternate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  submodule.alternateErrorStrategy"}, {"role": "assistant", "content": "Specifies how to treat errors with the alternates for a submodule\nas computed via submodule.alternateLocation . Possible values are ignore , info , die . Default is die . Note that if set to ignore or info , and if there is an error with the computed alternate, the\nclone proceeds as if no alternate was specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.forceSignAnnotated"}, {"role": "assistant", "content": "A boolean to specify whether annotated tags created should be GPG signed.\nIf --annotate is specified on the command line, it takes\nprecedence over this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.sort"}, {"role": "assistant", "content": "This variable controls the sort ordering of tags when displayed by git-tag . Without the \"--sort=<value>\" option provided, the\nvalue of this variable will be used as the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tag.gpgSign"}, {"role": "assistant", "content": "A boolean to specify whether all tags should be GPG signed.\nUse of this option when running in an automated script can\nresult in a large number of tags being signed. It is therefore\nconvenient to use an agent to avoid typing your gpg passphrase\nseveral times. Note that this option doesn’t affect tag signing\nbehavior enabled by \"-u <keyid>\" or \"--local-user=<keyid>\" options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  tar.umask"}, {"role": "assistant", "content": "This variable can be used to restrict the permission bits of\ntar archive entries.  The default is 0002, which turns off the\nworld write bit.  The special value \"user\" indicates that the\narchiving user’s umask will be used instead.  See umask(2) and git-archive ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  sendmail"}, {"role": "assistant", "content": "Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.normalTarget"}, {"role": "assistant", "content": "This variable controls the normal target destination.\nIt may be overridden by the GIT_TRACE2 environment variable.\nThe following table shows possible values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.perfTarget"}, {"role": "assistant", "content": "This variable controls the performance target destination.\nIt may be overridden by the GIT_TRACE2_PERF environment variable.\nThe following table shows possible values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventTarget"}, {"role": "assistant", "content": "This variable controls the event target destination.\nIt may be overridden by the GIT_TRACE2_EVENT environment variable.\nThe following table shows possible values. 0 or false - Disables the target. 1 or true - Writes to STDERR . [2-9] - Writes to the already opened file descriptor. <absolute-pathname> - Writes to the file in append mode. If the target\nalready exists and is a directory, the traces will be written to files (one\nper process) underneath the given directory. af_unix:[<socket-type>:]<absolute-pathname> - Write to a\nUnix DomainSocket (on platforms that support them).  Socket\ntype can be either stream or dgram ; if omitted Git will\ntry both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.normalBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from normal output.  May be overridden by the GIT_TRACE2_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.perfBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from PERF output.  May be overridden by the GIT_TRACE2_PERF_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventBrief"}, {"role": "assistant", "content": "Boolean.  When true time , filename , and line fields are\nomitted from event output.  May be overridden by the GIT_TRACE2_EVENT_BRIEF environment variable.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.eventNesting"}, {"role": "assistant", "content": "Integer.  Specifies desired depth of nested regions in the\nevent output.  Regions deeper than this value will be\nomitted.  May be overridden by the GIT_TRACE2_EVENT_NESTING environment variable.  Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.configParams"}, {"role": "assistant", "content": "A comma-separated list of patterns of \"important\" config\nsettings that should be recorded in the trace2 output.\nFor example, core.*,remote.*.url would cause the trace2\noutput to contain events listing each configured remote.\nMay be overridden by the GIT_TRACE2_CONFIG_PARAMS environment\nvariable.  Unset by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.envVars"}, {"role": "assistant", "content": "A comma-separated list of \"important\" environment variables that should\nbe recorded in the trace2 output.  For example, GIT_HTTP_USER_AGENT,GIT_CONFIG would cause the trace2 output to\ncontain events listing the overrides for HTTP user agent and the\nlocation of the Git configuration file (assuming any are set).  May be\noverridden by the GIT_TRACE2_ENV_VARS environment variable.  Unset by\ndefault."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.destinationDebug"}, {"role": "assistant", "content": "Boolean.  When true Git will print error messages when a\ntrace target destination cannot be opened for writing.\nBy default, these errors are suppressed and tracing is\nsilently disabled.  May be overridden by the GIT_TRACE2_DST_DEBUG environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.maxFiles"}, {"role": "assistant", "content": "Integer.  When writing trace files to a target directory, do not\nwrite additional traces if doing so would exceed this many files. Instead,\nwrite a sentinel file that will block further tracing to this\ndirectory. Defaults to 0, which disables this check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.credentialsInUrl"}, {"role": "assistant", "content": "A configured URL can contain plaintext credentials in the form <protocol>://<user>:<password>@<domain>/<path> . You may want\nto warn or forbid the use of such configuration (in favor of\nusing git-credential ). This will be used on git-clone , git-fetch , git-push ,\nand any other direct use of the configured URL. Note that this is currently limited to detecting credentials in remote.<name>.url configuration; it won’t detect credentials in remote.<name>.pushurl configuration. You might want to enable this to prevent inadvertent credentials\nexposure, e.g. because: The OS or system where you’re running git may not provide a way or\notherwise allow you to configure the permissions of the\nconfiguration file where the username and/or password are stored. Even if it does, having such data stored \"at rest\" might expose you\nin other ways, e.g. a backup process might copy the data to another\nsystem. The git programs will pass the full URL to one another as arguments\non the command-line, meaning the credentials will be exposed to other\nunprivileged users on systems that allow them to see the full\nprocess list of other users. On linux the \"hidepid\" setting\ndocumented in procfs(5) allows for configuring this behavior. If such concerns don’t apply to you then you probably don’t need to be\nconcerned about credentials exposure due to storing sensitive\ndata in git’s configuration files. If you do want to use this, set transfer.credentialsInUrl to one of these values: allow (default): Git will proceed with its activity without warning. warn : Git will write a warning message to stderr when parsing a URL\nwith a plaintext credential. die : Git will write a failure message to stderr when parsing a URL\nwith a plaintext credential."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.fsckObjects"}, {"role": "assistant", "content": "When fetch.fsckObjects or receive.fsckObjects are\nnot set, the value of this variable is used instead.\nDefaults to false. When set, the fetch or receive will abort in the case of a malformed\nobject or a link to a nonexistent object. In addition, various other\nissues are checked for, including legacy issues (see fsck.<msg-id> ),\nand potential security issues like the existence of a .GIT directory\nor a malicious .gitmodules file (see the release notes for v2.2.1\nand v2.17.1 for details). Other sanity and security checks may be\nadded in future releases. On the receiving side, failing fsckObjects will make those objects\nunreachable, see \"QUARANTINE ENVIRONMENT\" in git-receive-pack . On the fetch side, malformed objects will\ninstead be left unreferenced in the repository. Due to the non-quarantine nature of the fetch.fsckObjects implementation it cannot be relied upon to leave the object store\nclean like receive.fsckObjects can. As objects are unpacked they’re written to the object store, so there\ncan be cases where malicious objects get introduced even though the\n\"fetch\" failed, only to have a subsequent \"fetch\" succeed because only\nnew incoming objects are checked, not those that have already been\nwritten to the object store. That difference in behavior should not be\nrelied upon. In the future, such objects may be quarantined for\n\"fetch\" as well. For now, the paranoid need to find some way to emulate the quarantine\nenvironment if they’d like the same protection as \"push\". E.g. in the\ncase of an internal mirror do the mirroring in two steps, one to fetch\nthe untrusted objects, and then do a second \"push\" (which will use the\nquarantine) to another internal repo, and have internal clients\nconsume this pushed-to repository, or embargo internal fetches and\nonly allow them once a full \"fsck\" has run (and no new fetches have\nhappened in the meantime)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.hideRefs"}, {"role": "assistant", "content": "String(s) receive-pack and upload-pack use to decide which\nrefs to omit from their initial advertisements.  Use more than\none definition to specify multiple prefix strings. A ref that is\nunder the hierarchies listed in the value of this variable is\nexcluded, and is hidden when responding to git push or git\nfetch .  See receive.hideRefs and uploadpack.hideRefs for\nprogram-specific versions of this config. You may also include a ! in front of the ref name to negate the entry,\nexplicitly exposing it, even if an earlier entry marked it as hidden.\nIf you have multiple hideRefs values, later entries override earlier ones\n(and entries in more-specific config files override less-specific ones). If a namespace is in use, the namespace prefix is stripped from each\nreference before it is matched against transfer.hiderefs patterns. In\norder to match refs before stripping, add a ^ in front of the ref name. If\nyou combine ! and ^ , ! must be specified first. For example, if refs/heads/master is specified in transfer.hideRefs and\nthe current namespace is foo , then refs/namespaces/foo/refs/heads/master is omitted from the advertisements. If uploadpack.allowRefInWant is set, upload-pack will treat want-ref refs/heads/master in a protocol v2 fetch command as if refs/namespaces/foo/refs/heads/master did not exist. receive-pack , on the other hand, will still advertise the object id the\nref is pointing to without mentioning its name (a so-called \".have\" line). Even if you hide refs, a client may still be able to steal the target\nobjects via the techniques described in the \"SECURITY\" section of the gitnamespaces man page; it’s best to keep private data in a\nseparate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.unpackLimit"}, {"role": "assistant", "content": "When fetch.unpackLimit or receive.unpackLimit are\nnot set, the value of this variable is used instead.\nThe default value is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseSID"}, {"role": "assistant", "content": "Boolean. When true, client and server processes will advertise their\nunique session IDs to their remote counterpart. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.bundleURI"}, {"role": "assistant", "content": "When true , local git clone commands will request bundle\ninformation from the remote server (if advertised) and download\nbundles before continuing the clone through the Git protocol.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseObjectInfo"}, {"role": "assistant", "content": "When true , the object-info capability is advertised by\nservers. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadarchive.allowUnreachable"}, {"role": "assistant", "content": "If true, allow clients to use git archive --remote to request\nany tree, whether reachable from the ref tips or not. See the\ndiscussion in the \"SECURITY\" section of git-upload-archive for more details. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.hideRefs"}, {"role": "assistant", "content": "This variable is the same as transfer.hideRefs , but applies\nonly to upload-pack (and so affects only fetches, not pushes).\nAn attempt to fetch a hidden ref by git fetch will fail.  See\nalso uploadpack.allowTipSHA1InWant ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowTipSHA1InWant"}, {"role": "assistant", "content": "When uploadpack.hideRefs is in effect, allow upload-pack to accept a fetch request that asks for an object at the tip\nof a hidden ref (by default, such a request is rejected).\nSee also uploadpack.hideRefs .  Even if this is false, a client\nmay be able to steal objects via the techniques described in the\n\"SECURITY\" section of the gitnamespaces man page; it’s\nbest to keep private data in a separate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowReachableSHA1InWant"}, {"role": "assistant", "content": "Allow upload-pack to accept a fetch request that asks for an\nobject that is reachable from any ref tip. However, note that\ncalculating object reachability is computationally expensive.\nDefaults to false .  Even if this is false, a client may be able\nto steal objects via the techniques described in the \"SECURITY\"\nsection of the gitnamespaces man page; it’s best to\nkeep private data in a separate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowAnySHA1InWant"}, {"role": "assistant", "content": "Allow upload-pack to accept a fetch request that asks for any\nobject at all.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.keepAlive"}, {"role": "assistant", "content": "When upload-pack has started pack-objects , there may be a\nquiet period while pack-objects prepares the pack. Normally\nit would output progress information, but if --quiet was used\nfor the fetch, pack-objects will output nothing at all until\nthe pack data begins. Some clients and networks may consider\nthe server to be hung and give up. Setting this option instructs upload-pack to send an empty keepalive packet every uploadpack.keepAlive seconds. Setting this option to 0\ndisables keepalive packets entirely. The default is 5 seconds."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.packObjectsHook"}, {"role": "assistant", "content": "If this option is set, when upload-pack would run git pack-objects to create a packfile for a client, it will\nrun this shell command instead.  The pack-objects command and\narguments it would have run (including the git pack-objects at the beginning) are appended to the shell command. The stdin\nand stdout of the hook are treated as if pack-objects itself\nwas run. I.e., upload-pack will feed input intended for pack-objects to the hook, and expects a completed packfile on\nstdout. Note that this configuration variable is only respected when it is specified\nin protected configuration (see SCOPES ). This is a safety measure\nagainst fetching from untrusted repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowFilter"}, {"role": "assistant", "content": "If this option is set, upload-pack will support partial\nclone and partial fetch object filtering."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.allow"}, {"role": "assistant", "content": "Provides a default value for unspecified object filters (see: the\nbelow configuration variable). If set to true , this will also\nenable all filters which get added in the future.\nDefaults to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.<filter>.allow"}, {"role": "assistant", "content": "Explicitly allow or ban the object filter corresponding to <filter> , where <filter> may be one of: blob:none , blob:limit , object:type , tree , sparse:oid , or combine .\nIf using combined filters, both combine and all of the nested\nfilter kinds must be allowed. Defaults to uploadpackfilter.allow ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpackfilter.tree.maxDepth"}, {"role": "assistant", "content": "Only allow --filter=tree:<n> when <n> is no more than the value of uploadpackfilter.tree.maxDepth . If set, this also implies uploadpackfilter.tree.allow=true , unless this configuration\nvariable had already been set. Has no effect if unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  uploadpack.allowRefInWant"}, {"role": "assistant", "content": "If this option is set, upload-pack will support the ref-in-want feature of the protocol version 2 fetch command.  This feature\nis intended for the benefit of load-balanced servers which may\nnot have the same view of what OIDs their refs point to due to\nreplication delay."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  url.<base>.insteadOf"}, {"role": "assistant", "content": "Any URL that starts with this value will be rewritten to\nstart, instead, with <base>. In cases where some site serves a\nlarge number of repositories, and serves them with multiple\naccess methods, and some users need to use different access\nmethods, this feature allows people to specify any of the\nequivalent URLs and have Git automatically rewrite the URL to\nthe best alternative for the particular user, even for a\nnever-before-seen repository on the site.  When more than one\ninsteadOf strings match a given URL, the longest match is used. Note that any protocol restrictions will be applied to the rewritten\nURL. If the rewrite changes the URL to use a custom protocol or remote\nhelper, you may need to adjust the protocol.*.allow config to permit\nthe request.  In particular, protocols you expect to use for submodules\nmust be set to always rather than the default of user . See the\ndescription of protocol.allow above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  url.<base>.pushInsteadOf"}, {"role": "assistant", "content": "Any URL that starts with this value will not be pushed to;\ninstead, it will be rewritten to start with <base>, and the\nresulting URL will be pushed to. In cases where some site serves\na large number of repositories, and serves them with multiple\naccess methods, some of which do not allow push, this feature\nallows people to specify a pull-only URL and have Git\nautomatically use an appropriate URL to push, even for a\nnever-before-seen repository on the site.  When more than one\npushInsteadOf strings match a given URL, the longest match is\nused.  If a remote has an explicit pushurl, Git will ignore this\nsetting for that remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.name  user.email  author.name  author.email  committer.name  committer.email"}, {"role": "assistant", "content": "The user.name and user.email variables determine what ends\nup in the author and committer fields of commit\nobjects.\nIf you need the author or committer to be different, the author.name , author.email , committer.name , or committer.email variables can be set.\nAll of these can be overridden by the GIT_AUTHOR_NAME , GIT_AUTHOR_EMAIL , GIT_COMMITTER_NAME , GIT_COMMITTER_EMAIL , and EMAIL environment variables. Note that the name forms of these variables conventionally refer to\nsome form of a personal name.  See git-commit and the\nenvironment variables section of git for more information on\nthese settings and the credential.username option if you’re looking\nfor authentication credentials instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.useConfigOnly"}, {"role": "assistant", "content": "Instruct Git to avoid trying to guess defaults for user.email and user.name , and instead retrieve the values only from the\nconfiguration. For example, if you have multiple email addresses\nand would like to use a different one for each repository, then\nwith this configuration option set to true in the global config\nalong with a name, Git will prompt you to set up an email before\nmaking new commits in a newly cloned repository.\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  user.signingKey"}, {"role": "assistant", "content": "If git-tag or git-commit is not selecting the\nkey you want it to automatically when creating a signed tag or\ncommit, you can override the default selection with this variable.\nThis option is passed unchanged to gpg’s --local-user parameter,\nso you may specify a key using any method that gpg supports.\nIf gpg.format is set to ssh this can contain the path to either\nyour private ssh key or the public key when ssh-agent is used.\nAlternatively it can contain a public key prefixed with key:: directly (e.g.: \"key::ssh-rsa XXXXXX identifier\"). The private key\nneeds to be available via ssh-agent. If not set Git will call\ngpg.ssh.defaultKeyCommand (e.g.: \"ssh-add -L\") and try to use the\nfirst key available. For backward compatibility, a raw key which\nbegins with \"ssh-\", such as \"ssh-rsa XXXXXX identifier\", is treated\nas \"key::ssh-rsa XXXXXX identifier\", but this form is deprecated;\nuse the key:: form instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  versionsort.prereleaseSuffix (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for versionsort.suffix .  Ignored if versionsort.suffix is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  versionsort.suffix"}, {"role": "assistant", "content": "Even when version sort is used in git-tag , tagnames\nwith the same base version but different suffixes are still sorted\nlexicographically, resulting e.g. in prerelease tags appearing\nafter the main release (e.g. \"1.0-rc1\" after \"1.0\").  This\nvariable can be specified to determine the sorting order of tags\nwith different suffixes. By specifying a single suffix in this variable, any tagname containing\nthat suffix will appear before the corresponding main release.  E.g. if\nthe variable is set to \"-rc\", then all \"1.0-rcX\" tags will appear before\n\"1.0\".  If specified multiple times, once per suffix, then the order of\nsuffixes in the configuration will determine the sorting order of tagnames\nwith those suffixes.  E.g. if \"-pre\" appears before \"-rc\" in the\nconfiguration, then all \"1.0-preX\" tags will be listed before any\n\"1.0-rcX\" tags.  The placement of the main release tag relative to tags\nwith various suffixes can be determined by specifying the empty suffix\namong those other suffixes.  E.g. if the suffixes \"-rc\", \"\", \"-ck\", and\n\"-bfs\" appear in the configuration in this order, then all \"v4.8-rcX\" tags\nare listed first, followed by \"v4.8\", then \"v4.8-ckX\" and finally\n\"v4.8-bfsX\". If more than one suffix matches the same tagname, then that tagname will\nbe sorted according to the suffix which starts at the earliest position in\nthe tagname.  If more than one different matching suffix starts at\nthat earliest position, then that tagname will be sorted according to the\nlongest of those suffixes.\nThe sorting order between different suffixes is undefined if they are\nin multiple config files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  web.browser"}, {"role": "assistant", "content": "Specify a web browser that may be used by some commands.\nCurrently only git-instaweb and git-help may use it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  worktree.guessRemote"}, {"role": "assistant", "content": "If no branch is specified and neither -b nor -B nor --detach is used, then git worktree add defaults to\ncreating a new branch from HEAD.  If worktree.guessRemote is\nset to true, worktree add tries to find a remote-tracking\nbranch whose name uniquely matches the new branch name.  If\nsuch a branch exists, it is checked out and set as \"upstream\"\nfor the new branch.  If no such match can be found, it falls\nback to creating a new branch from the current HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options"}, {"role": "assistant", "content": "BUGS When using the deprecated [section.subsection] syntax, changing a value\nwill result in adding a multi-line key instead of a change, if the subsection\nis given with at least one uppercase character. For example when the config\nlooks like [section.subsection]\n    key = value1 and running git config section.Subsection.key value2 will result in [section.subsection]\n    key = value1\n    key = value2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "NAME git-help - Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "SYNOPSIS git help [-a|--all] [--[no-]verbose] [--[no-]external-commands] [--[no-]aliases] git help [[-i|--info] [-m|--man] [-w|--web]] [<command>|<doc>] git help [-g|--guides] git help [-c|--config] git help [--user-interfaces] git help [--developer-interfaces]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "DESCRIPTION With no options and no <command> or <doc> given, the synopsis of the git command and a list of the most commonly used Git commands are printed\non the standard output. If the option --all or -a is given, all available commands are\nprinted on the standard output. If the option --guides or -g is given, a list of the\nGit concept guides is also printed on the standard output. If a command or other documentation is given, the relevant manual page\nwill be brought up. The man program is used by default for this\npurpose, but this can be overridden by other options or configuration\nvariables. If an alias is given, git shows the definition of the alias on\nstandard output. To get the manual page for the aliased command, use git <command> --help . Note that git --help ... is identical to git help ... because the\nformer is internally converted into the latter. To display the git man page, use git help git . This page can be displayed with git help help or git help --help ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -a  --all"}, {"role": "assistant", "content": "Print all the available commands on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --no-external-commands"}, {"role": "assistant", "content": "When used with --all , exclude the listing of external \"git-*\"\ncommands found in the $PATH ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --no-aliases"}, {"role": "assistant", "content": "When used with --all , exclude the listing of configured\naliases."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --verbose"}, {"role": "assistant", "content": "When used with --all , print description for all recognized\ncommands. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -c  --config"}, {"role": "assistant", "content": "List all available configuration variables. This is a short\nsummary of the list in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -g  --guides"}, {"role": "assistant", "content": "Print a list of the Git concept guides on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --user-interfaces"}, {"role": "assistant", "content": "Print a list of the repository, command and file interfaces\ndocumentation on the standard output. In-repository file interfaces such as .git/info/exclude are\ndocumented here (see gitrepository-layout ), as well as\nin-tree configuration such as .mailmap (see gitmailmap ). This section of the documentation also covers general or widespread\nuser-interface conventions (e.g. gitcli ), and\npseudo-configuration such as the file-based .git/hooks/* interface\ndescribed in githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  --developer-interfaces"}, {"role": "assistant", "content": "Print a list of file formats, protocols and other developer\ninterfaces documentation on the standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -i  --info"}, {"role": "assistant", "content": "Display manual page for the command in the info format. The info program will be used for that purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -m  --man"}, {"role": "assistant", "content": "Display manual page for the command in the man format. This\noption may be used to override a value set in the help.format configuration variable. By default the man program will be used to display the manual page,\nbut the man.viewer configuration variable may be used to choose\nother display programs (see below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -w  --web"}, {"role": "assistant", "content": "Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose. The web browser can be specified using the configuration variable help.browser , or web.browser if the former is not set. If neither of\nthese config variables is set, the git web--browse helper script\n(called by git help ) will pick a suitable default. See git-web--browse for more information about this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git"}, {"role": "assistant", "content": "CONFIGURATION VARIABLES help.format If no command-line option is passed, the help.format configuration\nvariable will be checked. The following values are supported for this\nvariable; they make git help behave as their corresponding command-\nline option: \"man\" corresponds to -m|--man , \"info\" corresponds to -i|--info , \"web\" or \"html\" correspond to -w|--web . help.browser, web.browser, and browser.<tool>.path The help.browser , web.browser and browser.<tool>.path will also\nbe checked if the web format is chosen (either by command-line\noption or configuration variable). See -w|--web in the OPTIONS\nsection above and git-web--browse . man.viewer The man.viewer configuration variable will be checked if the man format is chosen. The following values are currently supported: \"man\": use the man program as usual, \"woman\": use emacsclient to launch the \"woman\" mode in emacs\n(this only works starting with emacsclient versions 22), \"konqueror\": use kfmclient to open the man page in a new konqueror\ntab (see Note about konqueror below). Values for other tools can be used if there is a corresponding man.<tool>.cmd configuration entry (see below). Multiple values may be given to the man.viewer configuration\nvariable. Their corresponding programs will be tried in the order\nlisted in the configuration file. For example, this configuration: [man]\n\t\tviewer = konqueror\n\t\tviewer = woman will try to use konqueror first. But this may fail (for example, if\nDISPLAY is not set) and in that case emacs' woman mode will be tried. If everything fails, or if no viewer is configured, the viewer specified\nin the GIT_MAN_VIEWER environment variable will be tried.  If that\nfails too, the man program will be tried anyway. man.<tool>.path You can explicitly provide a full path to your preferred man viewer by\nsetting the configuration variable man.<tool>.path . For example, you\ncan configure the absolute path to konqueror by setting man.konqueror.path . Otherwise, git help assumes the tool is\navailable in PATH. man.<tool>.cmd When the man viewer, specified by the man.viewer configuration\nvariables, is not among the supported ones, then the corresponding man.<tool>.cmd configuration variable will be looked up. If this\nvariable exists then the specified tool will be treated as a custom\ncommand and a shell eval will be used to run the command with the man\npage passed as arguments. Note about konqueror When konqueror is specified in the man.viewer configuration\nvariable, we launch kfmclient to try to open the man page on an\nalready opened konqueror in a new tab if possible. For consistency, we also try such a trick if man.konqueror.path is\nset to something like A_PATH_TO/konqueror . That means we will try to\nlaunch A_PATH_TO/kfmclient instead. If you really want to use konqueror , then you can use something like\nthe following: [man]\n\t\tviewer = konq\n\n\t[man \"konq\"]\n\t\tcmd = A_PATH_TO/konqueror Note about git config --global Note that all these configuration variables should probably be set\nusing the --global flag, for example like this: $ git config --global help.format web\n$ git config --global web.browser firefox as they are probably more user specific than repository specific.\nSee git-config for more information about this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "NAME git-bugreport - Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "SYNOPSIS git bugreport [(-o | --output-directory) <path>]\n\t\t[(-s | --suffix) <format> | --no-suffix]\n\t\t[--diagnose[=<mode>]]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report"}, {"role": "assistant", "content": "DESCRIPTION Collects information about the user’s machine, Git client, and repository\nstate, in addition to a form requesting information about the behavior the\nuser observed, and stores it in a single text file which the user can then\nshare, for example to the Git mailing list, in order to report an observed\nbug. The following information is requested from the user: Reproduction steps Expected behavior Actual behavior The following information is captured automatically: git version --build-options uname sysname, release, version, and machine strings Compiler-specific info string A list of enabled hooks $SHELL Additional information may be gathered into a separate zip archive using the --diagnose option, and can be attached alongside the bugreport document to\nprovide additional context to readers. This tool is invoked via the typical Git setup process, which means that in some\ncases, it might not be able to launch - for example, if a relevant config file\nis unreadable. In this kind of scenario, it may be helpful to manually gather\nthe kind of information listed above when manually asking for help."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  -o <path>  --output-directory <path>"}, {"role": "assistant", "content": "Place the resulting bug report file in <path> instead of the current\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  -s <format>  --suffix <format>  --no-suffix"}, {"role": "assistant", "content": "Specify an alternate suffix for the bugreport name, to create a file\nnamed git-bugreport-<formatted-suffix> . This should take the form of a\nstrftime(3) format string; the current local time will be used. --no-suffix disables the suffix and the file is just named git-bugreport without any disambiguation measure."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bugreport - Collect information for user to file a bug report  --no-diagnose  --diagnose[=<mode>]"}, {"role": "assistant", "content": "Create a zip archive of supplemental information about the user’s\nmachine, Git client, and repository state. The archive is written to the\nsame output directory as the bug report and is named git-diagnostics-<formatted-suffix> . Without mode specified, the diagnostic archive will contain the default set of\nstatistics reported by git diagnose . An optional mode value may be specified\nto change which information is included in the archive. See git-diagnose for the list of valid values for mode and details\nabout their usage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "NAME git-init - Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "SYNOPSIS git init [ -q | --quiet ] [ --bare ] [ --template= <template-directory> ]\n\t  [ --separate-git-dir <git-dir> ] [ --object-format= <format> ]\n\t  [ --ref-format= <format> ]\n\t  [ -b <branch-name> | --initial-branch= <branch-name> ]\n\t  [ --shared [ = <permissions> ]] [ <directory> ]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "DESCRIPTION This command creates an empty Git repository - basically a .git directory with subdirectories for objects , refs/heads , refs/tags , and template files.  An initial branch without any\ncommits will be created (see the --initial-branch option below\nfor its name). If the $GIT_DIR environment variable is set then it specifies a path\nto use instead of ./.git for the base of the repository. If the object storage directory is specified via the $GIT_OBJECT_DIRECTORY environment variable then the sha1 directories\nare created underneath; otherwise, the default $GIT_DIR/objects directory is used. Running git init in an existing repository is safe. It will not\noverwrite things that are already there. The primary reason for\nrerunning git init is to pick up newly added templates (or to move\nthe repository to another place if --separate-git-dir is given)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  -q  --quiet"}, {"role": "assistant", "content": "Only print error and warning messages; all other output will be suppressed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --bare"}, {"role": "assistant", "content": "Create a bare repository. If GIT_DIR environment is not set, it is set to the\ncurrent working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --object-format= <format>"}, {"role": "assistant", "content": "Specify the given object <format> (hash algorithm) for the repository.  The valid\nvalues are sha1 and (if enabled) sha256 . sha1 is the default. Note: At present, there is no interoperability between SHA-256\nrepositories and SHA-1 repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --ref-format= <format>"}, {"role": "assistant", "content": "Specify the given ref storage <format> for the repository. The valid values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --template= <template-directory>"}, {"role": "assistant", "content": "Specify the directory from which templates will be used.  (See the \"TEMPLATE\nDIRECTORY\" section below.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --separate-git-dir= <git-dir>"}, {"role": "assistant", "content": "Instead of initializing the repository as a directory to either $GIT_DIR or ./.git/ , create a text file there containing the path to the actual\nrepository.  This file acts as a filesystem-agnostic Git symbolic link to the\nrepository. If this is a reinitialization, the repository will be moved to the specified path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  -b <branch-name>  --initial-branch= <branch-name>"}, {"role": "assistant", "content": "Use <branch-name> for the initial branch in the newly created\nrepository.  If not specified, fall back to the default name (currently master , but this is subject to change in the future; the name can be\ncustomized via the init.defaultBranch configuration variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  --shared [ = ( false | true | umask | group | all | world | everybody | <perm> )]"}, {"role": "assistant", "content": "Specify that the Git repository is to be shared amongst several users.  This\nallows users belonging to the same group to push into that\nrepository.  When specified, the config variable core.sharedRepository is\nset so that files and directories under $GIT_DIR are created with the\nrequested permissions.  When not specified, Git will use permissions reported\nby umask (2). The option can have the following values, defaulting to group if no value\nis given: umask false Use permissions reported by umask (2). The default, when --shared is not\nspecified. group true Make the repository group-writable, (and g+sx , since the git group may not be\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask (2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022 , using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions. all world everybody Same as group , but make the repository readable by all users. <perm> <perm> is a 3-digit octal number prefixed with 0 and each file\nwill have mode <perm> . <perm> will override users' umask (2)\nvalue (and not only loosen permissions as group and all do). 0640 will create a repository which is group-readable, but\nnot group-writable or accessible to others. 0660 will create a repo\nthat is readable and writable to the current user and group, but\ninaccessible to others (directories and executable files get their x bit from the r bit for corresponding classes of users)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  umask  false"}, {"role": "assistant", "content": "Use permissions reported by umask (2). The default, when --shared is not\nspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  group  true"}, {"role": "assistant", "content": "Make the repository group-writable, (and g+sx , since the git group may not be\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask (2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022 , using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  all  world  everybody"}, {"role": "assistant", "content": "Same as group , but make the repository readable by all users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  <perm>"}, {"role": "assistant", "content": "<perm> is a 3-digit octal number prefixed with 0 and each file\nwill have mode <perm> . <perm> will override users' umask (2)\nvalue (and not only loosen permissions as group and all do). 0640 will create a repository which is group-readable, but\nnot group-writable or accessible to others. 0660 will create a repo\nthat is readable and writable to the current user and group, but\ninaccessible to others (directories and executable files get their x bit from the r bit for corresponding classes of users)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one"}, {"role": "assistant", "content": "TEMPLATE DIRECTORY Files and directories in the template directory whose name do not start with a\ndot will be copied to the $GIT_DIR after it is created. The template directory will be one of the following (in order): the argument given with the --template option; the contents of the $GIT_TEMPLATE_DIR environment variable; the init.templateDir configuration variable; or the default template directory: /usr/share/git-core/templates . The default template directory includes some directory structure, suggested\n\"exclude patterns\" (see gitignore ), and sample hook files. The sample hooks are all disabled by default. To enable one of the\nsample hooks rename it by removing its .sample suffix. See githooks for more general info on hook execution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  Start a new Git repository for an existing code base"}, {"role": "assistant", "content": "$ cd /path/to/my/codebase\n$ git init (1) $ git add . (2) $ git commit (3) Create a /path/to/my/codebase/.git directory. Add all existing files to the index. Record the pristine state as the first commit in the history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-init - Create an empty Git repository or reinitialize an existing one  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "NAME git-clone - Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "SYNOPSIS git clone [ --template= <template-directory> ]\n\t  [ -l ] [ -s ] [ --no-hardlinks ] [ -q ] [ -n ] [ --bare ] [ --mirror ]\n\t  [ -o <name> ] [ -b <name> ] [ -u <upload-pack> ] [ --reference <repository> ]\n\t  [ --dissociate ] [ --separate-git-dir <git-dir> ]\n\t  [ --depth <depth> ] single-branch ] [ --no-tags ]\n\t  [ --recurse-submodules [ = <pathspec> ]] shallow-submodules ] remote-submodules ] [ --jobs <n> ] [ --sparse ] reject-shallow ]\n\t  [ --filter= <filter-spec> ] [ --also-filter-submodules ]] [ -- ] <repository> [ <directory> ]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "DESCRIPTION Clones a repository into a newly created directory, creates\nremote-tracking branches for each branch in the cloned repository\n(visible using git branch --remotes ), and creates and checks out an\ninitial branch that is forked from the cloned repository’s\ncurrently active branch. After the clone, a plain git fetch without arguments will update\nall the remote-tracking branches, and a git pull without\narguments will in addition merge the remote master branch into the\ncurrent master branch, if any (this is untrue when --single-branch is given; see below). This default configuration is achieved by creating references to\nthe remote branch heads under refs/remotes/origin and\nby initializing remote.origin.url and remote.origin.fetch configuration variables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -l  --local"}, {"role": "assistant", "content": "When the repository to clone from is on a local machine,\nthis flag bypasses the normal \"Git aware\" transport\nmechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible. If the repository is specified as a local path (e.g., /path/to/repo ),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying --no-local will\noverride the default when /path/to/repo is given, using the regular\nGit transport instead. If the repository’s $GIT_DIR/objects has symbolic links or is a\nsymbolic link, the clone will fail. This is a security measure to\nprevent the unintentional copying of files by dereferencing the symbolic\nlinks. NOTE : this operation can race with concurrent modification to the\nsource repository, similar to running cp -r src dst while modifying src ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --no-hardlinks"}, {"role": "assistant", "content": "Force the cloning process from a repository on a local\nfilesystem to copy the files under the .git/objects directory instead of using hardlinks. This may be desirable\nif you are trying to make a back-up of your repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -s  --shared"}, {"role": "assistant", "content": "When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup .git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as git commit )\nwhich automatically call git maintenance run --auto . (See git-maintenance .) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt. Note that running git repack without the --local option in a repository\ncloned with --shared will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of clone --shared .\nIt is safe, however, to run git gc , which uses the --local option by\ndefault. If you want to break the dependency of a repository cloned with --shared on\nits source repository, you can simply run git repack -a to copy all\nobjects from the source repository into a pack in the cloned repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --reference [ -if-able ] <repository>"}, {"role": "assistant", "content": "If the reference <repository> is on the local machine,\nautomatically setup .git/objects/info/alternates to\nobtain objects from the reference <repository> .  Using\nan already existing repository as an alternate will\nrequire fewer objects to be copied from the repository\nbeing cloned, reducing network and local storage costs.\nWhen using the --reference-if-able , a non existing\ndirectory is skipped with a warning instead of aborting\nthe clone. NOTE : see the NOTE for the --shared option, and also the --dissociate option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --dissociate"}, {"role": "assistant", "content": "Borrow the objects from reference repositories specified\nwith the --reference options only to reduce network\ntransfer, and stop borrowing from them after a clone is made\nby making necessary local copies of borrowed objects.  This\noption can also be used when cloning locally from a\nrepository that already borrows objects from another\nrepository—​the new repository will borrow objects from the\nsame repository, and this option can be used to stop the\nborrowing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -q  --quiet"}, {"role": "assistant", "content": "Operate quietly.  Progress is not reported to the standard\nerror stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -v  --verbose"}, {"role": "assistant", "content": "Run verbosely. Does not affect the reporting of progress status\nto the standard error stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --server-option= <option>"}, {"role": "assistant", "content": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option= <option> are given, they are all\nsent to the other side in the order listed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -n  --no-checkout"}, {"role": "assistant", "content": "No checkout of HEAD is performed after the clone is complete."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] reject-shallow"}, {"role": "assistant", "content": "Fail if the source repository is a shallow repository.\nThe clone.rejectShallow configuration variable can be used to\nspecify the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --bare"}, {"role": "assistant", "content": "Make a bare Git repository.  That is, instead of\ncreating <directory> and placing the administrative\nfiles in <directory> `/.git`, make the <directory> itself the $GIT_DIR . This obviously implies the --no-checkout because there is nowhere to check out the working tree.\nAlso the branch heads at the remote are copied directly\nto corresponding local branch heads, without mapping\nthem to refs/remotes/origin/ .  When this option is\nused, neither remote-tracking branches nor the related\nconfiguration variables are created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --sparse"}, {"role": "assistant", "content": "Employ a sparse-checkout, with only files in the toplevel\ndirectory initially being present.  The git-sparse-checkout command can be used to grow the\nworking directory as needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --filter= <filter-spec>"}, {"role": "assistant", "content": "Use the partial clone feature and request that the server sends\na subset of reachable objects according to a given object filter.\nWhen using --filter , the supplied <filter-spec> is used for\nthe partial clone filter. For example, --filter=blob:none will\nfilter out all blobs (file contents) until needed by Git. Also, --filter=blob:limit= <size> will filter out all blobs of size\nat least <size> . For more details on filter specifications, see\nthe --filter option in git-rev-list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --also-filter-submodules"}, {"role": "assistant", "content": "Also apply the partial clone filter to any submodules in the repository.\nRequires --filter and --recurse-submodules . This can be turned on by\ndefault by setting the clone.filterSubmodules config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --mirror"}, {"role": "assistant", "content": "Set up a mirror of the source repository.  This implies --bare .\nCompared to --bare , --mirror not only maps local branches of the\nsource to local branches of the target, it maps all refs (including\nremote-tracking branches, notes etc.) and sets up a refspec configuration such\nthat all these refs are overwritten by a git remote update in the\ntarget repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -o <name>  --origin <name>"}, {"role": "assistant", "content": "Instead of using the remote name origin to keep track of the upstream\nrepository, use <name> .  Overrides clone.defaultRemoteName from the\nconfig."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -b <name>  --branch <name>"}, {"role": "assistant", "content": "Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out. --branch can also take tags and detaches the HEAD at that commit\nin the resulting repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -u <upload-pack>  --upload-pack <upload-pack>"}, {"role": "assistant", "content": "When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --template= <template-directory>"}, {"role": "assistant", "content": "Specify the directory from which templates will be used;\n(See the \"TEMPLATE DIRECTORY\" section of git-init .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -c <key> = <value>  --config <key> = <value>"}, {"role": "assistant", "content": "Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The <key> is in the same format as expected by git-config (e.g., core.eol=true ). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote. Due to limitations of the current implementation, some configuration\nvariables do not take effect until after the initial fetch and checkout.\nConfiguration variables known to not take effect are: remote. <name> .mirror and remote. <name> .tagOpt .  Use the\ncorresponding --mirror and --no-tags options instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --depth <depth>"}, {"role": "assistant", "content": "Create a shallow clone with a history truncated to the\nspecified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the\ntips of all branches. If you want to clone submodules shallowly,\nalso pass --shallow-submodules ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --shallow-since= <date>"}, {"role": "assistant", "content": "Create a shallow clone with a history after the specified time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --shallow-exclude= <revision>"}, {"role": "assistant", "content": "Create a shallow clone with a history, excluding commits\nreachable from a specified remote branch or tag.  This option\ncan be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] single-branch"}, {"role": "assistant", "content": "Clone only the history leading to the tip of a single branch,\neither specified by the --branch option or the primary\nbranch remote’s HEAD points at.\nFurther fetches into the resulting repository will only update the\nremote-tracking branch for the branch this option was used for the\ninitial cloning.  If the HEAD at the remote did not point at any\nbranch when --single-branch clone was made, no remote-tracking\nbranch is created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --no-tags"}, {"role": "assistant", "content": "Don’t clone any tags, and set remote.<remote>.tagOpt=--no-tags in the config, ensuring\nthat future git pull and git fetch operations won’t follow\nany tags. Subsequent explicit tag fetches will still work,\n(see git-fetch ). Can be used in conjunction with --single-branch to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --recurse-submodules [ = <pathspec> ]"}, {"role": "assistant", "content": "After the clone is created, initialize and clone submodules\nwithin based on the provided <pathspec> .  If no =<pathspec> is\nprovided, all submodules are initialized and cloned.\nThis option can be given multiple times for pathspecs consisting\nof multiple entries.  The resulting clone has submodule.active set to\nthe provided pathspec, or \".\" (meaning all submodules) if no\npathspec is provided. Submodules are initialized and cloned using their default settings. This is\nequivalent to running git submodule update --init --recursive <pathspec> immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of --no-checkout / -n , --bare ,\nor --mirror is given)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] shallow-submodules"}, {"role": "assistant", "content": "All submodules which are cloned will be shallow with a depth of 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -- [ no- ] remote-submodules"}, {"role": "assistant", "content": "All submodules which are cloned will use the status of the submodule’s\nremote-tracking branch to update the submodule, rather than the\nsuperproject’s recorded SHA-1. Equivalent to passing --remote to git submodule update ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --separate-git-dir= <git-dir>"}, {"role": "assistant", "content": "Instead of placing the cloned repository where it is supposed\nto be, place the cloned repository at the specified directory,\nthen make a filesystem-agnostic Git symbolic link to there.\nThe result is Git repository can be separated from working\ntree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --ref-format= <ref-format>"}, {"role": "assistant", "content": "Specify the given ref storage format for the repository. The valid values are: files for loose files with packed-refs. This is the default. reftable for the reftable format. This format is experimental and its\ninternals are subject to change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -j <n>  --jobs <n>"}, {"role": "assistant", "content": "The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  <repository>"}, {"role": "assistant", "content": "The (possibly remote) <repository> to clone from.  See the GIT URLS section below for more information on specifying\nrepositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  <directory>"}, {"role": "assistant", "content": "The name of a new directory to clone into.  The \"humanish\"\npart of the source repository is used if no <directory> is\nexplicitly given ( repo for /path/to/repo.git and foo for host.xz:foo/.git ).  Cloning into an existing directory\nis only allowed if the directory is empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  --bundle-uri= <uri>"}, {"role": "assistant", "content": "Before fetching from the remote, fetch a bundle from the given <uri> and unbundle the data into the local repository. The refs\nin the bundle will be stored under the hidden refs/bundle/* namespace. This option is incompatible with --depth , --shallow-since , and --shallow-exclude ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except the former implies --local option. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn’t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory"}, {"role": "assistant", "content": "EXAMPLES Clone from upstream: $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n$ cd my-linux\n$ make Make a local clone that borrows from the current directory, without checking things out: $ git clone -l -s -n . ../copy\n$ cd ../copy\n$ git show-branch Clone from upstream while borrowing from an existing local directory: $ git clone --reference /git/linux.git \\\n\tgit://git.kernel.org/pub/scm/.../linux.git \\\n\tmy-linux\n$ cd my-linux Create a bare repository to publish your changes to the public: $ git clone --bare -l /home/proj/.git /pub/scm/proj.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  init.templateDir"}, {"role": "assistant", "content": "Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  init.defaultBranch"}, {"role": "assistant", "content": "Allows overriding the default branch name e.g. when initializing\na new repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.defaultRemoteName"}, {"role": "assistant", "content": "The name of the remote to create when cloning a repository.  Defaults to origin .\nIt can be overridden by passing the --origin command-line\noption."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.rejectShallow"}, {"role": "assistant", "content": "Reject cloning a repository if it is a shallow one; this can be overridden by\npassing the --reject-shallow option on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  clone.filterSubmodules"}, {"role": "assistant", "content": "If a partial clone filter is provided (see --filter in git-rev-list ) and --recurse-submodules is used, also apply\nthe filter to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "NAME git-add - Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "SYNOPSIS git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | -A | --[no-]ignore-removal | [--update | -u]] [--sparse]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n\t  [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "DESCRIPTION This command updates the index using the current content found in\nthe working tree, to prepare the content staged for the next commit.\nIt typically adds the current content of existing paths as a whole,\nbut with some options it can also be used to add content with\nonly part of the changes made to the working tree files applied, or\nremove paths that do not exist in the working tree anymore. The \"index\" holds a snapshot of the content of the working tree, and it\nis this snapshot that is taken as the contents of the next commit.  Thus\nafter making any changes to the working tree, and before running\nthe commit command, you must use the add command to add any new or\nmodified files to the index. This command can be performed multiple times before a commit.  It only\nadds the content of the specified file(s) at the time the add command is\nrun; if you want subsequent changes included in the next commit, then\nyou must run git add again to add the new content to the index. The git status command can be used to obtain a summary of which\nfiles have changes that are staged for the next commit. The git add command will not add ignored files by default.  If any\nignored files were explicitly specified on the command line, git add will fail with a list of ignored files.  Ignored files reached by\ndirectory recursion or filename globbing performed by Git (quote your\nglobs before the shell) will be silently ignored.  The git add command can\nbe used to add ignored files with the -f (force) option. Please see git-commit for alternative ways to add content to a\ncommit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  <pathspec>…​"}, {"role": "assistant", "content": "Files to add content from.  Fileglobs (e.g. *.c ) can\nbe given to add all matching files.  Also a\nleading directory name (e.g. dir to add dir/file1 and dir/file2 ) can be given to update the index to\nmatch the current state of the directory as a whole (e.g.\nspecifying dir will record not just a file dir/file1 modified in the working tree, a file dir/file2 added to\nthe working tree, but also a file dir/file3 removed from\nthe working tree). Note that older versions of Git used\nto ignore removed files; use --no-all option if you want\nto add modified or new files but ignore removed ones. For more details about the <pathspec> syntax, see the pathspec entry\nin gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -n  --dry-run"}, {"role": "assistant", "content": "Don’t actually add the file(s), just show if they exist and/or will\nbe ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -v  --verbose"}, {"role": "assistant", "content": "Be verbose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -f  --force"}, {"role": "assistant", "content": "Allow adding otherwise ignored files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --sparse"}, {"role": "assistant", "content": "Allow updating index entries outside of the sparse-checkout cone.\nNormally, git add refuses to update index entries whose paths do\nnot fit within the sparse-checkout cone, since those files might\nbe removed from the working tree without warning. See git-sparse-checkout for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -i  --interactive"}, {"role": "assistant", "content": "Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -p  --patch"}, {"role": "assistant", "content": "Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex. This effectively runs add --interactive , but bypasses the\ninitial command menu and directly jumps to the patch subcommand.\nSee “Interactive mode” for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -e  --edit"}, {"role": "assistant", "content": "Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index. The intent of this option is to pick and choose lines of the patch to\napply, or even to modify the contents of lines to be staged. This can be\nquicker and more flexible than using the interactive hunk selector.\nHowever, it is easy to confuse oneself and create a patch that does not\napply to the index. See EDITING PATCHES below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -u  --update"}, {"role": "assistant", "content": "Update the index just where it already has an entry matching <pathspec> .  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files. If no <pathspec> is given when -u option is used, all\ntracked files in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -A  --all  --no-ignore-removal"}, {"role": "assistant", "content": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree. If no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --no-all  --ignore-removal"}, {"role": "assistant", "content": "Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used. This option is primarily to help users who are used to older\nversions of Git, whose \"git add <pathspec> …​\" was a synonym\nfor \"git add --no-all <pathspec> …​\", i.e. ignored removed files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -N  --intent-to-add"}, {"role": "assistant", "content": "Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --refresh"}, {"role": "assistant", "content": "Don’t add the file(s), but only refresh their stat()\ninformation in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --ignore-errors"}, {"role": "assistant", "content": "If some files could not be added because of errors indexing\nthem, do not abort the operation, but continue adding the\nothers. The command shall still exit with non-zero status.\nThe configuration variable add.ignoreErrors can be set to\ntrue to make this the default behaviour."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --ignore-missing"}, {"role": "assistant", "content": "This option can only be used together with --dry-run. By using\nthis option the user can check if any of the given files would\nbe ignored, no matter if they are already present in the work\ntree or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --no-warn-embedded-repo"}, {"role": "assistant", "content": "By default, git add will warn when adding an embedded\nrepository to the index without using git submodule add to\ncreate an entry in .gitmodules . This option will suppress the\nwarning (e.g., if you are manually performing operations on\nsubmodules)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --renormalize"}, {"role": "assistant", "content": "Apply the \"clean\" process freshly to all tracked files to\nforcibly add them again to the index.  This is useful after\nchanging core.autocrlf configuration or the text attribute\nin order to correct files added with wrong CRLF/LF line endings.\nThis option implies -u . Lone CR characters are untouched, thus\nwhile a CRLF cleans to LF, a CRCRLF sequence is only partially\ncleaned to CRLF."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --chmod=(+|-)x"}, {"role": "assistant", "content": "Override the executable bit of the added files.  The executable\nbit is only changed in the index, the files on disk are left\nunchanged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --"}, {"role": "assistant", "content": "This option can be used to separate command-line options from\nthe list of files, (useful when filenames might be mistaken\nfor command-line options)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index"}, {"role": "assistant", "content": "EXAMPLES Adds content from all *.txt files under Documentation directory\nand its subdirectories: $ git add Documentation/\\*.txt Note that the asterisk * is quoted from the shell in this\nexample; this lets the command include the files from\nsubdirectories of Documentation/ directory. Considers adding content from all git-*.sh scripts: $ git add git-*.sh Because this example lets the shell expand the asterisk (i.e. you are\nlisting the files explicitly), it does not consider subdir/git-foo.sh ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  status"}, {"role": "assistant", "content": "This shows the change between HEAD and index (i.e. what will be\ncommitted if you say git commit ), and between index and\nworking tree files (i.e. what you could stage further before git commit using git add ) for each path.  A sample output\nlooks like this: staged     unstaged path\n     1:       binary      nothing foo.png\n     2:     +403/-35        +1/-1 add-interactive.c It shows that foo.png has differences from HEAD (but that is\nbinary so line count cannot be shown) and there is no\ndifference between indexed copy and the working tree\nversion (if the working tree version were also different, binary would have been shown in place of nothing ).  The\nother file, add-interactive.c, has 403 lines added\nand 35 lines deleted if you commit what is in the index, but\nworking tree file has further modifications (one addition and\none deletion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  update"}, {"role": "assistant", "content": "This shows the status information and issues an \"Update>>\"\nprompt.  When the prompt ends with double >> , you can\nmake more than one selection, concatenated with whitespace or\ncomma.  Also you can say ranges.  E.g. \"2-5 7,9\" to choose\n2,3,4,5,7,9 from the list.  If the second number in a range is\nomitted, all remaining patches are taken.  E.g. \"7-\" to choose\n7,8,9 from the list.  You can say * to choose everything. What you chose are then highlighted with * ,\nlike this: staged     unstaged path\n  1:       binary      nothing foo.png\n* 2:     +403/-35        +1/-1 add-interactive.c To remove selection, prefix the input with - like this: Update>> -2 After making the selection, answer with an empty line to stage the\ncontents of working tree files for selected paths in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  revert"}, {"role": "assistant", "content": "This has a very similar UI to update , and the staged\ninformation for selected paths are reverted to that of the\nHEAD version.  Reverting new paths makes them untracked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add untracked"}, {"role": "assistant", "content": "This has a very similar UI to update and revert , and lets you add untracked paths to the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  patch"}, {"role": "assistant", "content": "This lets you choose one path out of a status like selection.\nAfter choosing the path, it presents the diff between the index\nand the working tree file and asks you if you want to stage\nthe change of each hunk.  You can select one of the following\noptions and type return: y - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk or any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk or any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\np - print the current hunk\n? - print help After deciding the fate for all hunks, if there is any hunk\nthat was chosen, the index is updated with the selected hunks. You can omit having to type return here, by setting the configuration\nvariable interactive.singleKey to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  diff"}, {"role": "assistant", "content": "This lets you review what will be committed (i.e. between\nHEAD and index)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  added content"}, {"role": "assistant", "content": "Added content is represented by lines beginning with \"+\". You can\nprevent staging any addition lines by deleting them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  removed content"}, {"role": "assistant", "content": "Removed content is represented by lines beginning with \"-\". You can\nprevent staging their removal by converting the \"-\" to a \" \" (space)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  modified content"}, {"role": "assistant", "content": "Modified content is represented by \"-\" lines (removing the old content)\nfollowed by \"+\" lines (adding the replacement content). You can\nprevent staging the modification by converting \"-\" lines to \" \", and\nremoving \"+\" lines. Beware that modifying only half of the pair is\nlikely to introduce confusing changes to the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  removing untouched content"}, {"role": "assistant", "content": "Content which does not differ between the index and working tree may be\nshown on context lines, beginning with a \" \" (space).  You can stage\ncontext lines for removal by converting the space to a \"-\". The\nresulting working tree file will appear to re-add the content."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  modifying existing content"}, {"role": "assistant", "content": "One can also modify context lines by staging them for removal (by\nconverting \" \" to \"-\") and adding a \"+\" line with the new content.\nSimilarly, one can modify \"+\" lines for existing additions or\nmodifications. In all cases, the new modification will appear reverted\nin the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  new content"}, {"role": "assistant", "content": "You may also add new content that does not exist in the patch; simply\nadd new lines, each starting with \"+\". The addition will appear\nreverted in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add.ignoreErrors  add.ignore-errors (deprecated)"}, {"role": "assistant", "content": "Tells git add to continue adding files when some files cannot be\nadded due to indexing errors. Equivalent to the --ignore-errors option of git-add . add.ignore-errors is deprecated,\nas it does not follow the usual naming convention for configuration\nvariables."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  add.interactive.useBuiltin"}, {"role": "assistant", "content": "Unused configuration variable. Used in Git versions v2.25.0 to\nv2.36.0 to enable the built-in version of git-add 's\ninteractive mode, which then became the default in Git\nversions v2.37.0 to v2.39.0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "NAME git-status - Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "SYNOPSIS git status [<options>] [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "DESCRIPTION Displays paths that have differences between the index file and the\ncurrent HEAD commit, paths that have differences between the working\ntree and the index file, and paths in the working tree that are not\ntracked by Git (and are not ignored by gitignore ). The first\nare what you would commit by running git commit ; the second and\nthird are what you could commit by running git add before running git commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -s  --short"}, {"role": "assistant", "content": "Give the output in the short-format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -b  --branch"}, {"role": "assistant", "content": "Show the branch and tracking info even in short-format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --show-stash"}, {"role": "assistant", "content": "Show the number of entries currently stashed away."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --porcelain[=<version>]"}, {"role": "assistant", "content": "Give the output in an easy-to-parse format for scripts.\nThis is similar to the short output, but will remain stable\nacross Git versions and regardless of user configuration. See\nbelow for details. The version parameter is used to specify the format version.\nThis is optional and defaults to the original version v1 format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --long"}, {"role": "assistant", "content": "Give the output in the long-format. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -v  --verbose"}, {"role": "assistant", "content": "In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached ). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -u[<mode>]  --untracked-files[=<mode>]"}, {"role": "assistant", "content": "Show untracked files. The mode parameter is used to specify the handling of untracked files.\nIt is optional: it defaults to all , and if specified, it must be\nstuck to the option (e.g. -uno , but not -u no ). The possible options are: no - Show no untracked files. normal - Shows untracked files and directories. all - Also shows individual files in untracked directories. When -u option is not used, untracked files and directories are\nshown (i.e. the same as specifying normal ), to help you avoid\nforgetting to add newly created files.  Because it takes extra work\nto find untracked files in the filesystem, this mode may take some\ntime in a large working tree.\nConsider enabling untracked cache and split index if supported (see git update-index --untracked-cache and git update-index\n--split-index ), Otherwise you can use no to have git status return more quickly without showing untracked files.\nAll usual spellings for Boolean value true are taken as normal and false as no . The default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules when looking for changes. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior before 1.7.0). Using \"all\" hides all changes to submodules\n(and suppresses the output of submodule summaries when the config option status.submoduleSummary is set)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --ignored[=<mode>]"}, {"role": "assistant", "content": "Show ignored files as well. The mode parameter is used to specify the handling of ignored files.\nIt is optional: it defaults to traditional . The possible options are: traditional - Shows ignored files and directories, unless\n--untracked-files=all is specified, in which case\nindividual files in ignored directories are\ndisplayed. no - Show no ignored files. matching - Shows ignored files and directories matching an\nignore pattern. When matching mode is specified, paths that explicitly match an\nignored pattern are shown. If a directory matches an ignore pattern,\nthen it is shown, but not paths contained in the ignored directory. If\na directory does not match an ignore pattern, but all contents are\nignored, then the directory is not shown, but all contents are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -z"}, {"role": "assistant", "content": "Terminate entries with NUL, instead of LF.  This implies\nthe --porcelain=v1 output format if no other format is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --column[=<options>]  --no-column"}, {"role": "assistant", "content": "Display untracked files in columns. See configuration variable column.status for option syntax. --column and --no-column without options are equivalent to always and never respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --ahead-behind  --no-ahead-behind"}, {"role": "assistant", "content": "Display or do not display detailed ahead/behind counts for the\nbranch relative to its upstream branch.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --renames  --no-renames"}, {"role": "assistant", "content": "Turn on/off rename detection regardless of user configuration.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  --find-renames[=<n>]"}, {"role": "assistant", "content": "Turn on rename detection, optionally setting the similarity\nthreshold.\nSee also git-diff --find-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  <pathspec>…​"}, {"role": "assistant", "content": "See the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "OUTPUT The output from this command is designed to be used as a commit\ntemplate comment.\nThe default, long format, is designed to be human readable,\nverbose and descriptive.  Its contents and format are subject to change\nat any time. The paths mentioned in the output, unlike many other Git commands, are\nmade relative to the current directory if you are working in a\nsubdirectory (this is on purpose, to help cutting and pasting). See\nthe status.relativePaths config option below. Short Format In the short-format, the status of each path is shown as one of these\nforms XY PATH\nXY ORIG_PATH -> PATH where ORIG_PATH is where the renamed/copied contents came\nfrom. ORIG_PATH is only shown when the entry is renamed or\ncopied. The XY is a two-letter status code. The fields (including the -> ) are separated from each other by a\nsingle space. If a filename contains whitespace or other nonprintable\ncharacters, that field will be quoted in the manner of a C string\nliteral: surrounded by ASCII double quote (34) characters, and with\ninterior special characters backslash-escaped. There are three different types of states that are shown using this format, and\neach one uses the XY syntax differently: When a merge is occurring and the merge was successful, or outside of a merge\nsituation, X shows the status of the index and Y shows the status of the\nworking tree. When a merge conflict has occurred and has not yet been resolved, X and Y show the state introduced by each head of the merge, relative to the common\nancestor. These paths are said to be unmerged . When a path is untracked, X and Y are always the same, since they are\nunknown to the index. ?? is used for untracked paths. Ignored files are\nnot listed unless --ignored is used; if it is, ignored files are indicated\nby !! . Note that the term merge here also includes rebases using the default --merge strategy, cherry-picks, and anything else using the merge machinery. In the following table, these three classes are shown in separate sections, and\nthese characters are used for X and Y fields for the first two sections that\nshow tracked paths: ' ' = unmodified M = modified T = file type changed (regular file, symbolic link or submodule) A = added D = deleted R = renamed C = copied (if config option status.renames is set to \"copies\") U = updated but unmerged X          Y     Meaning\n-------------------------------------------------\n\t [AMD]   not updated\nM        [ MTD]  updated in index\nT        [ MTD]  type changed in index\nA        [ MTD]  added to index\nD                deleted from index\nR        [ MTD]  renamed in index\nC        [ MTD]  copied in index\n[MTARC]          index and work tree matches\n[ MTARC]    M    work tree changed since index\n[ MTARC]    T    type changed in work tree since index\n[ MTARC]    D    deleted in work tree\n\t    R    renamed in work tree\n\t    C    copied in work tree\n-------------------------------------------------\nD           D    unmerged, both deleted\nA           U    unmerged, added by us\nU           D    unmerged, deleted by them\nU           A    unmerged, added by them\nD           U    unmerged, deleted by us\nA           A    unmerged, both added\nU           U    unmerged, both modified\n-------------------------------------------------\n?           ?    untracked\n!           !    ignored\n------------------------------------------------- Submodules have more state and instead report M = the submodule has a different HEAD than recorded in the index m = the submodule has modified content ? = the submodule has untracked files This is since modified content or untracked files in a submodule cannot be added\nvia git add in the superproject to prepare a commit. m and ? are applied recursively. For example if a nested submodule\nin a submodule contains an untracked file, this is reported as ? as well. If -b is used the short-format status is preceded by a line ## branchname tracking info Porcelain Format Version 1 Version 1 porcelain format is similar to the short format, but is guaranteed\nnot to change in a backwards-incompatible way between Git versions or\nbased on user configuration. This makes it ideal for parsing by scripts.\nThe description of the short format above also describes the porcelain\nformat, with a few exceptions: The user’s color.status configuration is not respected; color will\nalways be off. The user’s status.relativePaths configuration is not respected; paths\nshown will always be relative to the repository root. There is also an alternate -z format recommended for machine parsing. In\nthat format, the status field is the same, but some other things\nchange.  First, the -> is omitted from rename entries and the field\norder is reversed (e.g from -> to becomes to from ). Second, a NUL\n(ASCII 0) follows each filename, replacing space as a field separator\nand the terminating newline (but a space still separates the status\nfield from the first filename).  Third, filenames containing special\ncharacters are not specially formatted; no quoting or\nbackslash-escaping is performed. Any submodule changes are reported as modified M instead of m or single ? . Porcelain Format Version 2 Version 2 format adds more detailed information about the state of\nthe worktree and changed items.  Version 2 also defines an extensible\nset of easy to parse optional headers. Header lines start with \"#\" and are added in response to specific\ncommand line arguments.  Parsers should ignore headers they\ndon’t recognize. Branch Headers If --branch is given, a series of header lines are printed with\ninformation about the current branch. Line                                     Notes\n------------------------------------------------------------\n# branch.oid <commit> | (initial)        Current commit.\n# branch.head <branch> | (detached)      Current branch.\n# branch.upstream <upstream-branch>      If upstream is set.\n# branch.ab +<ahead> -<behind>           If upstream is set and\n\t\t\t\t\t the commit is present.\n------------------------------------------------------------ Stash Information If --show-stash is given, one line is printed showing the number of stash\nentries if non-zero: # stash <N> Changed Tracked Entries Following the headers, a series of lines are printed for tracked\nentries.  One of three different line formats may be used to describe\nan entry depending on the type of change.  Tracked entries are printed\nin an undefined order; parsers should allow for a mixture of the 3\nline types in any order. Ordinary changed entries have the following format: 1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path> Renamed or copied entries have the following format: 2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath> Field       Meaning\n--------------------------------------------------------\n<XY>        A 2 character field containing the staged and\n\t    unstaged XY values described in the short format,\n\t    with unchanged indicated by a \".\" rather than\n\t    a space.\n<sub>       A 4 character field describing the submodule state.\n\t    \"N...\" when the entry is not a submodule.\n\t    \"S<c><m><u>\" when the entry is a submodule.\n\t    <c> is \"C\" if the commit changed; otherwise \".\".\n\t    <m> is \"M\" if it has tracked changes; otherwise \".\".\n\t    <u> is \"U\" if there are untracked changes; otherwise \".\".\n<mH>        The octal file mode in HEAD.\n<mI>        The octal file mode in the index.\n<mW>        The octal file mode in the worktree.\n<hH>        The object name in HEAD.\n<hI>        The object name in the index.\n<X><score>  The rename or copy score (denoting the percentage\n\t    of similarity between the source and target of the\n\t    move or copy). For example \"R100\" or \"C75\".\n<path>      The pathname.  In a renamed/copied entry, this\n\t    is the target path.\n<sep>       When the `-z` option is used, the 2 pathnames are separated\n\t    with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)\n\t    byte separates them.\n<origPath>  The pathname in the commit at HEAD or in the index.\n\t    This is only present in a renamed/copied entry, and\n\t    tells where the renamed/copied contents came from.\n-------------------------------------------------------- Unmerged entries have the following format; the first character is\na \"u\" to distinguish from ordinary changed entries. u <XY> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path> Field       Meaning\n--------------------------------------------------------\n<XY>        A 2 character field describing the conflict type\n\t    as described in the short format.\n<sub>       A 4 character field describing the submodule state\n\t    as described above.\n<m1>        The octal file mode in stage 1.\n<m2>        The octal file mode in stage 2.\n<m3>        The octal file mode in stage 3.\n<mW>        The octal file mode in the worktree.\n<h1>        The object name in stage 1.\n<h2>        The object name in stage 2.\n<h3>        The object name in stage 3.\n<path>      The pathname.\n-------------------------------------------------------- Other Items Following the tracked entries (and if requested), a series of\nlines will be printed for untracked and then ignored items\nfound in the worktree. Untracked items have the following format: ? <path> Ignored items have the following format: ! <path> Pathname Format Notes and -z When the -z option is given, pathnames are printed as is and\nwithout any quoting and lines are terminated with a NUL (ASCII 0x00)\nbyte. Without the -z option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "CONFIGURATION The command honors color.status (or status.color — they\nmean the same thing and the latter is kept for backward\ncompatibility) and color.status.<slot> configuration variables\nto colorize its output. If the config variable status.relativePaths is set to false, then all\npaths shown are relative to the repository root, not to the current\ndirectory. If status.submoduleSummary is set to a non zero number or true (identical\nto -1 or an unlimited number), the submodule summary will be enabled for\nthe long format and a summary of commits for modified submodules will be\nshown (see --summary-limit option of git-submodule ). Please note\nthat the summary output from the status command will be suppressed for all\nsubmodules when diff.ignoreSubmodules is set to all or only for those\nsubmodules where submodule.<name>.ignore=all . To also view the summary for\nignored submodules you can either use the --ignore-submodules=dirty command\nline option or the git submodule summary command, which shows a similar\noutput but does not honor these settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "BACKGROUND REFRESH By default, git status will automatically refresh the index, updating\nthe cached stat information from the working tree and writing out the\nresult. Writing out the updated index is an optimization that isn’t\nstrictly necessary ( status computes the values for itself, but writing\nthem out is just to save subsequent programs from repeating our\ncomputation). When status is run in the background, the lock held\nduring the write may conflict with other simultaneous processes, causing\nthem to fail. Scripts running status in the background should consider\nusing git --no-optional-locks status (see git for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status"}, {"role": "assistant", "content": "UNTRACKED FILES AND PERFORMANCE git status can be very slow in large worktrees if/when it\nneeds to search for untracked files and directories. There are\nmany configuration options available to speed this up by either\navoiding the work or making use of cached results from previous\nGit commands. There is no single optimum set of settings right\nfor everyone. We’ll list a summary of the relevant options to help\nyou, but before going into the list, you may want to run git status again, because your configuration may already be caching git status results, so it could be faster on subsequent runs. The --untracked-files=no flag or the status.showUntrackedFiles=no config (see above for both):\nindicate that git status should not report untracked\nfiles. This is the fastest option. git status will not list\nthe untracked files, so you need to be careful to remember if\nyou create any new files and manually git add them. advice.statusUoption=false (see git-config ):\nsetting this variable to false disables the warning message\ngiven when enumerating untracked files takes more than 2\nseconds.  In a large project, it may take longer and the user\nmay have already accepted the trade off (e.g. using \"-uno\" may\nnot be an acceptable option for the user), in which case, there\nis no point issuing the warning message, and in such a case,\ndisabling the warning may be the best. core.untrackedCache=true (see git-update-index ):\nenable the untracked cache feature and only search directories\nthat have been modified since the previous git status command.\nGit remembers the set of untracked files within each directory\nand assumes that if a directory has not been modified, then\nthe set of untracked files within has not changed.  This is much\nfaster than enumerating the contents of every directory, but still\nnot without cost, because Git still has to search for the set of\nmodified directories. The untracked cache is stored in the .git/index file. The reduced cost of searching for untracked\nfiles is offset slightly by the increased size of the index and\nthe cost of keeping it up-to-date. That reduced search time is\nusually worth the additional size. core.untrackedCache=true and core.fsmonitor=true or core.fsmonitor=<hook-command-pathname> (see git-update-index ): enable both the untracked cache\nand FSMonitor features and only search directories that have\nbeen modified since the previous git status command.  This\nis faster than using just the untracked cache alone because\nGit can also avoid searching for modified directories.  Git\nonly has to enumerate the exact set of directories that have\nchanged recently. While the FSMonitor feature can be enabled\nwithout the untracked cache, the benefits are greatly reduced\nin that case. Note that after you turn on the untracked cache and/or FSMonitor\nfeatures it may take a few git status commands for the various\ncaches to warm up before you see improved command times.  This is\nnormal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "NAME git-diff - Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "SYNOPSIS git diff [<options>] [<commit>] [--] [<path>…​] git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​] git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​] git diff [<options>] <commit>…​<commit> [--] [<path>…​] git diff [<options>] <blob> <blob> git diff [<options>] --no-index [--] <path> <path>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --no-index [--] <path> <path>"}, {"role": "assistant", "content": "This form is to compare the given two paths on the\nfilesystem.  You can omit the --no-index option when\nrunning the command in a working tree controlled by Git and\nat least one of the paths points outside the working tree,\nor when running the command outside a working tree\ncontrolled by Git. This form implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you staged for the next\ncommit relative to the named <commit>.  Typically you\nwould want comparison with the latest commit, so if you\ndo not give <commit>, it defaults to HEAD.\nIf HEAD does not exist (e.g. unborn branches) and\n<commit> is not given, it shows all staged changes.\n--staged is a synonym of --cached. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --cached --merge-base A is equivalent to git diff --cached $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you have in your\nworking tree relative to the named <commit>.  You can\nuse HEAD to compare it with the latest commit, or a\nbranch name to compare with the tip of a different\nbranch. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --merge-base A is equivalent to git diff $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is to view the changes between two arbitrary\n<commit>. If --merge-base is given, use the merge base of the two commits for the\n\"before\" side. git diff --merge-base A B is equivalent to git diff $(git merge-base A B) B ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit> <commit>…​ <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the results of a merge commit.  The first\nlisted <commit> must be the merge itself; the remaining two or\nmore commits should be its parents.  Convenient ways to produce\nthe desired set of revisions are to use the suffixes ^@ and ^! .  If A is a merge commit, then git diff A A^@ , git diff A^! and git show A all give the same combined diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>..<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is synonymous to the earlier form (without the .. ) for\nviewing the changes between two arbitrary <commit>.  If <commit> on\none side is omitted, it will have the same effect as\nusing HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>...<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes on the branch containing\nand up to the second <commit>, starting at a common ancestor\nof both <commit>. git diff A...B is equivalent to git diff $(git merge-base A B) B .  You can omit any one\nof <commit>, which has the same effect as using HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob>"}, {"role": "assistant", "content": "This form is to view the differences between the raw\ncontents of two blob objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p ).\nThis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --raw"}, {"role": "assistant", "content": "Generate the diff in raw format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -z"}, {"role": "assistant", "content": "When --raw , --numstat , --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto .\nIt can be changed by the color.ui and color.diff configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nIt can be changed by the diff.colorMoved configuration setting.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --exit-code"}, {"role": "assistant", "content": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --quiet"}, {"role": "assistant", "content": "Disable all output of the program. Implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -1 --base  -2 --ours  -3 --theirs"}, {"role": "assistant", "content": "Compare the working tree with the \"base\" version (stage #1),\n\"our branch\" (stage #2) or \"their branch\" (stage #3).  The\nindex contains these stages only for unmerged entries i.e.\nwhile resolving conflicts.  See git-read-tree section \"3-Way Merge\" for detailed information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -0"}, {"role": "assistant", "content": "Omit diff output for unmerged entries and just show\n\"Unmerged\".  Can be used only when comparing the working tree\nwith the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <path>…​"}, {"role": "assistant", "content": "The <paths> parameters, when given, are used to limit\nthe diff to the named paths (you can give directory\nnames and get diff for all files under them)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…​]"}, {"role": "assistant", "content": "compares the trees named by the two arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-files [<pattern>…​]"}, {"role": "assistant", "content": "compares the index and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "diff format for merges \"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\"\ncan take -c or --cc option\nto generate diff output also for merge commits.  The output differs\nfrom the format described above in the following way: there is a colon for each parent there are more \"src\" modes and \"src\" sha1 status is concatenated status characters for each parent no optional \"score\" number tab-separated pathname(s) of the file For -c and --cc , only the destination or final path is shown even\nif the file was renamed on any side of history.  With --combined-all-paths , the name of the path in each parent is shown\nfollowed by the name of the path in the merge commit. Examples for -c and --cc without --combined-all-paths : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tphooey.c Examples when --combined-all-paths added to either -c or --cc : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\tdesc.c\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tfoo.sh\tbar.sh\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tfooey.c\tfuey.c\tphooey.c Note that combined diff lists only files which were modified from\nall parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "other diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Various ways to check your working tree"}, {"role": "assistant", "content": "$ git diff (1) $ git diff --cached (2) $ git diff HEAD (3) $ git diff AUTO_MERGE (4) Changes in the working tree not yet staged for the next commit. Changes between the index and your last commit; what you\nwould be committing if you run git commit without -a option. Changes in the working tree since your last commit; what you\nwould be committing if you run git commit -a Changes in the working tree you’ve made to resolve textual\nconflicts so far."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing with arbitrary commits"}, {"role": "assistant", "content": "$ git diff test (1) $ git diff HEAD -- ./test (2) $ git diff HEAD^ HEAD (3) Instead of using the tip of the current branch, compare with the\ntip of \"test\" branch. Instead of comparing with the tip of \"test\" branch, compare with\nthe tip of the current branch, but limit the comparison to the\nfile \"test\". Compare the version before the last commit and the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing branches"}, {"role": "assistant", "content": "$ git diff topic master (1) $ git diff topic..master (2) $ git diff topic...master (3) Changes between the tips of the topic and the master branches. Same as above. Changes that occurred on the master branch since when the topic\nbranch was started off it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Limiting the diff output"}, {"role": "assistant", "content": "$ git diff --diff-filter=MRC (1) $ git diff --name-status (2) $ git diff arch/i386 include/asm-i386 (3) Show only modification, rename, and copy, but not addition\nor deletion. Show only names and the nature of change, but not actual\ndiff output. Limit diff output to named subtrees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Munging the diff output"}, {"role": "assistant", "content": "$ git diff --find-copies-harder -B -C (1) $ git diff -R (2) Spend extra cycles to find renames, copies and complete\nrewrites (very expensive). Output diff in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.autoRefreshIndex"}, {"role": "assistant", "content": "When using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statGraphWidth"}, {"role": "assistant", "content": "Limit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dstPrefix"}, {"role": "assistant", "content": "If set, git diff uses this destination prefix. Defaults to \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.relative"}, {"role": "assistant", "content": "If set to true , git diff does not show changes outside of the directory\nand show pathnames relative to the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.orderFile"}, {"role": "assistant", "content": "File indicating how to order files within a diff.\nSee the -O option to git-diff for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\ncopy/rename detection; equivalent to the git diff option -l .  If not set, the default value is currently 1000.  This\nsetting has no effect if rename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.submodule"}, {"role": "assistant", "content": "Specify the format in which differences in submodules are\nshown.  The \"short\" format just shows the names of the commits\nat the beginning and end of the range. The \"log\" format lists\nthe commits in the range like git-submodule summary does. The \"diff\" format shows an inline diff of the changed\ncontents of the submodule. Defaults to \"short\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wordRegex"}, {"role": "assistant", "content": "A POSIX Extended Regular Expression used to determine what is a \"word\"\nwhen performing word-by-word difference calculations.  Character\nsequences that match the regular expression are \"words\", all other\ncharacters are ignorable whitespace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.command"}, {"role": "assistant", "content": "The custom diff driver command.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.binary"}, {"role": "assistant", "content": "Set this option to true to make the diff driver treat files as\nbinary.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.wordRegex"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.cachetextconv"}, {"role": "assistant", "content": "Set this option to true to make the diff driver cache the text\nconversion outputs.  See gitattributes for details. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 kompare meld nvimdiff opendiff p4merge smerge tkdiff vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMoved"}, {"role": "assistant", "content": "If set to either a valid <mode> or a true value, moved lines\nin a diff are colored differently, for details of valid modes\nsee --color-moved in git-diff . If simply set to\ntrue the default color mode will be used. When set to false,\nmoved lines are not colored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMovedWS"}, {"role": "assistant", "content": "When moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff"}, {"role": "assistant", "content": "compares the (i)ndex and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --cached"}, {"role": "assistant", "content": "compares a (c)ommit and the (i)ndex;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "NAME git-commit - Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "SYNOPSIS git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n\t   [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]\n\t   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n\t   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n\t   [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n\t   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t   [(--trailer <token>[(=|:)<value>])…​] [-S[<keyid>]]\n\t   [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "DESCRIPTION Create a new commit containing the current contents of the index and\nthe given log message describing the changes. The new commit is a\ndirect child of HEAD, usually the tip of the current branch, and the\nbranch is updated to point to it (unless no branch is associated with\nthe working tree, in which case HEAD is \"detached\" as described in git-checkout ). The content to be committed can be specified in several ways: by using git-add to incrementally \"add\" changes to the\nindex before using the commit command (Note: even modified files\nmust be \"added\"); by using git-rm to remove files from the working tree\nand the index, again before using the commit command; by listing files as arguments to the commit command\n(without --interactive or --patch switch), in which\ncase the commit will ignore changes staged in the index, and instead\nrecord the current content of the listed files (which must already\nbe known to Git); by using the -a switch with the commit command to automatically\n\"add\" changes from all known files (i.e. all files that are already\nlisted in the index) and to automatically \"rm\" files in the index\nthat have been removed from the working tree, and then perform the\nactual commit; by using the --interactive or --patch switches with the commit command\nto decide one by one which files or hunks should be part of the commit\nin addition to contents in the index,\nbefore finalizing the operation. See the “Interactive Mode” section of git-add to learn how to operate these modes. The --dry-run option can be used to obtain a\nsummary of what is included by any of the above for the next\ncommit by giving the same set of parameters (options and paths). If you make a commit and then find a mistake immediately after\nthat, you can recover from it with git reset ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -a  --all"}, {"role": "assistant", "content": "Tell the command to automatically stage files that have\nbeen modified and deleted, but new files you have not\ntold Git about are not affected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -p  --patch"}, {"role": "assistant", "content": "Use the interactive patch selection interface to choose\nwhich changes to commit. See git-add for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -C <commit>  --reuse-message=<commit>"}, {"role": "assistant", "content": "Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -c <commit>  --reedit-message=<commit>"}, {"role": "assistant", "content": "Like -C , but with -c the editor is invoked, so that\nthe user can further edit the commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --fixup=[(amend|reword):]<commit>"}, {"role": "assistant", "content": "Create a new commit which \"fixes up\" <commit> when applied with git rebase --autosquash . Plain --fixup=<commit> creates a\n\"fixup!\" commit which changes the content of <commit> but leaves\nits log message untouched. --fixup=amend:<commit> is similar but\ncreates an \"amend!\" commit which also replaces the log message of <commit> with the log message of the \"amend!\" commit. --fixup=reword:<commit> creates an \"amend!\" commit which\nreplaces the log message of <commit> with its own log message\nbut makes no changes to the content of <commit> . The commit created by plain --fixup=<commit> has a subject\ncomposed of \"fixup!\" followed by the subject line from <commit>,\nand is recognized specially by git rebase --autosquash . The -m option may be used to supplement the log message of the created\ncommit, but the additional commentary will be thrown away once the\n\"fixup!\" commit is squashed into <commit> by git rebase --autosquash . The commit created by --fixup=amend:<commit> is similar but its\nsubject is instead prefixed with \"amend!\". The log message of\n<commit> is copied into the log message of the \"amend!\" commit and\nopened in an editor so it can be refined. When git rebase\n--autosquash squashes the \"amend!\" commit into <commit> , the\nlog message of <commit> is replaced by the refined log message\nfrom the \"amend!\" commit. It is an error for the \"amend!\" commit’s\nlog message to be empty unless --allow-empty-message is\nspecified. --fixup=reword:<commit> is shorthand for --fixup=amend:<commit>\n--only . It creates an \"amend!\" commit with only a log message\n(ignoring any changes staged in the index). When squashed by git\nrebase --autosquash , it replaces the log message of <commit> without making any other changes. Neither \"fixup!\" nor \"amend!\" commits change authorship of <commit> when applied by git rebase --autosquash .\nSee git-rebase for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --squash=<commit>"}, {"role": "assistant", "content": "Construct a commit message for use with rebase --autosquash .\nThe commit message subject line is taken from the specified\ncommit with a prefix of \"squash! \".  Can be used with additional\ncommit message options ( -m / -c / -C / -F ). See git-rebase for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --reset-author"}, {"role": "assistant", "content": "When used with -C/-c/--amend options, or when committing after a\nconflicting cherry-pick, declare that the authorship of the\nresulting commit now belongs to the committer. This also renews\nthe author timestamp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --short"}, {"role": "assistant", "content": "When doing a dry-run, give the output in the short-format. See git-status for details. Implies --dry-run ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --branch"}, {"role": "assistant", "content": "Show the branch and tracking info even in short-format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --porcelain"}, {"role": "assistant", "content": "When doing a dry-run, give the output in a porcelain-ready\nformat. See git-status for details. Implies --dry-run ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --long"}, {"role": "assistant", "content": "When doing a dry-run, give the output in the long-format.\nImplies --dry-run ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -z  --null"}, {"role": "assistant", "content": "When showing short or porcelain status output, print the\nfilename verbatim and terminate the entries with NUL, instead of LF.\nIf no format is given, implies the --porcelain output format.\nWithout the -z option, filenames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -F <file>  --file=<file>"}, {"role": "assistant", "content": "Take the commit message from the given file.  Use - to\nread the message from the standard input."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --author=<author>"}, {"role": "assistant", "content": "Override the commit author. Specify an explicit author using the\nstandard A U Thor <author@example.com> format. Otherwise <author>\nis assumed to be a pattern and is used to search for an existing\ncommit by that author (i.e. rev-list --all -i --author=<author>);\nthe commit author is then copied from the first such commit found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --date=<date>"}, {"role": "assistant", "content": "Override the author date used in the commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -m <msg>  --message=<msg>"}, {"role": "assistant", "content": "Use the given <msg> as the commit message.\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs. The -m option is mutually exclusive with -c , -C , and -F ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -t <file>  --template=<file>"}, {"role": "assistant", "content": "When editing the commit message, start the editor with the\ncontents in the given file.  The commit.template configuration\nvariable is often used to give this option implicitly to the\ncommand.  This mechanism can be used by projects that want to\nguide participants with some hints on what to write in the message\nin what order.  If the user exits the editor without editing the\nmessage, the commit is aborted.  This has no effect when a message\nis given by other means, e.g. with the -m or -F options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -s  --signoff  --no-signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See https://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project. The --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --trailer <token>[(=|:)<value>]"}, {"role": "assistant", "content": "Specify a (<token>, <value>) pair that should be applied as a\ntrailer. (e.g. git commit --trailer \"Signed-off-by:C O Mitter \\\n<committer@example.com>\" --trailer \"Helped-by:C O Mitter \\\n<committer@example.com>\" will add the \"Signed-off-by\" trailer\nand the \"Helped-by\" trailer to the commit message.)\nThe trailer.* configuration variables\n( git-interpret-trailers ) can be used to define if\na duplicated trailer is omitted, where in the run of trailers\neach trailer would appear, and other details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -n  --[no-]verify"}, {"role": "assistant", "content": "By default, the pre-commit and commit-msg hooks are run.\nWhen any of --no-verify or -n is given, these are bypassed.\nSee also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --allow-empty"}, {"role": "assistant", "content": "Usually recording a commit that has the exact same tree as its\nsole parent commit is a mistake, and the command prevents you\nfrom making such a commit.  This option bypasses the safety, and\nis primarily for use by foreign SCM interface scripts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --allow-empty-message"}, {"role": "assistant", "content": "Like --allow-empty this command is primarily for use by foreign\nSCM interface scripts. It allows you to create a commit with an\nempty commit message without using plumbing commands like git-commit-tree ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the supplied commit message should be\ncleaned up before committing.  The <mode> can be strip , whitespace , verbatim , scissors or default . strip Strip leading and trailing empty lines, trailing whitespace,\ncommentary and collapse consecutive empty lines. whitespace Same as strip except #commentary is not removed. verbatim Do not change the message at all. scissors Same as whitespace except that everything from (and including)\nthe line found below is truncated, if the message is to be edited.\n\" # \" can be customized with core.commentChar. # ------------------------ >8 ------------------------ default Same as strip if the message is to be edited.\nOtherwise whitespace . The default can be changed by the commit.cleanup configuration\nvariable (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -e  --edit"}, {"role": "assistant", "content": "The message taken from file with -F , command line with -m , and from commit object with -C are usually used as\nthe commit log message unmodified. This option lets you\nfurther edit the message taken from these sources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --no-edit"}, {"role": "assistant", "content": "Use the selected commit message without launching an editor.\nFor example, git commit --amend --no-edit amends a commit\nwithout changing its commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --amend"}, {"role": "assistant", "content": "Replace the tip of the current branch by creating a new\ncommit. The recorded tree is prepared as usual (including\nthe effect of the -i and -o options and explicit\npathspec), and the message from the original commit is used\nas the starting point, instead of an empty message, when no\nother message is specified from the command line via options\nsuch as -m , -F , -c , etc.  The new commit has the same\nparents and author as the current one (the --reset-author option can countermand this). It is a rough equivalent for: $ git reset --soft HEAD^\n\t$ ... do something else to come up with the right tree ...\n\t$ git commit -c ORIG_HEAD but can be used to amend a merge commit. You should understand the implications of rewriting history if you\namend a commit that has already been published.  (See the \"RECOVERING\nFROM UPSTREAM REBASE\" section in git-rebase .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --no-post-rewrite"}, {"role": "assistant", "content": "Bypass the post-rewrite hook."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -i  --include"}, {"role": "assistant", "content": "Before making a commit out of staged contents so far,\nstage the contents of paths given on the command line\nas well.  This is usually not what you want unless you\nare concluding a conflicted merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -o  --only"}, {"role": "assistant", "content": "Make a commit by taking the updated working tree contents\nof the paths specified on the\ncommand line, disregarding any contents that have been\nstaged for other paths. This is the default mode of operation of git commit if any paths are given on the command line,\nin which case this option can be omitted.\nIf this option is specified together with --amend , then\nno paths need to be specified, which can be used to amend\nthe last commit without committing changes that have\nalready been staged. If used together with --allow-empty paths are also not required, and an empty commit will be created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -u[<mode>]  --untracked-files[=<mode>]"}, {"role": "assistant", "content": "Show untracked files. The mode parameter is optional (defaults to all ), and is used to\nspecify the handling of untracked files; when -u is not used, the\ndefault is normal , i.e. show untracked files and directories. The possible options are: no - Show no untracked files normal - Shows untracked files and directories all - Also shows individual files in untracked directories. All usual spellings for Boolean value true are taken as normal and false as no .\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -v  --verbose"}, {"role": "assistant", "content": "Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn’t have its\nlines prefixed with # . This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config . If specified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the unstaged\nchanges to tracked files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -q  --quiet"}, {"role": "assistant", "content": "Suppress commit summary message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --dry-run"}, {"role": "assistant", "content": "Do not create a commit, but show a list of paths that are\nto be committed, paths with local changes that will be left\nuncommitted and paths that are untracked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --status"}, {"role": "assistant", "content": "Include the output of git-status in the commit\nmessage template when using an editor to prepare the commit\nmessage.  Defaults to on, but can be used to override\nconfiguration variable commit.status."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --no-status"}, {"role": "assistant", "content": "Do not include the output of git-status in the\ncommit message template when using an editor to prepare the\ndefault commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  <pathspec>…​"}, {"role": "assistant", "content": "When pathspec is given on the command line, commit the contents of\nthe files that match the pathspec without recording the changes\nalready added to the index. The contents of these files are also\nstaged for the next commit on top of what have been staged before. For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  strip"}, {"role": "assistant", "content": "Strip leading and trailing empty lines, trailing whitespace,\ncommentary and collapse consecutive empty lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  whitespace"}, {"role": "assistant", "content": "Same as strip except #commentary is not removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  verbatim"}, {"role": "assistant", "content": "Do not change the message at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  scissors"}, {"role": "assistant", "content": "Same as whitespace except that everything from (and including)\nthe line found below is truncated, if the message is to be edited.\n\" # \" can be customized with core.commentChar. # ------------------------ >8 ------------------------"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  default"}, {"role": "assistant", "content": "Same as strip if the message is to be edited.\nOtherwise whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "EXAMPLES When recording your own work, the contents of modified files in\nyour working tree are temporarily stored to a staging area\ncalled the \"index\" with git add .  A file can be\nreverted back, only in the index but not in the working tree,\nto that of the last commit with git restore --staged <file> ,\nwhich effectively reverts git add and prevents the changes to\nthis file from participating in the next commit.  After building\nthe state to be committed incrementally with these commands, git commit (without any pathname parameter) is used to record what\nhas been staged so far.  This is the most basic form of the\ncommand.  An example: $ edit hello.c\n$ git rm goodbye.c\n$ git add hello.c\n$ git commit Instead of staging files after each individual change, you can\ntell git commit to notice the changes to the files whose\ncontents are tracked in\nyour working tree and do corresponding git add and git rm for you.  That is, this example does the same as the earlier\nexample if there is no other change in your working tree: $ edit hello.c\n$ rm goodbye.c\n$ git commit -a The command git commit -a first looks at your working tree,\nnotices that you have modified hello.c and removed goodbye.c,\nand performs necessary git add and git rm for you. After staging changes to many files, you can alter the order the\nchanges are recorded in, by giving pathnames to git commit .\nWhen pathnames are given, the command makes a commit that\nonly records the changes made to the named paths: $ edit hello.c hello.h\n$ git add hello.c hello.h\n$ edit Makefile\n$ git commit Makefile This makes a commit that records the modification to Makefile .\nThe changes staged for hello.c and hello.h are not included\nin the resulting commit.  However, their changes are not lost — they are still staged and merely held back.  After the above\nsequence, if you do: $ git commit this second commit would record the changes to hello.c and hello.h as expected. After a merge (initiated by git merge or git pull ) stops\nbecause of conflicts, cleanly merged\npaths are already staged to be committed for you, and paths that\nconflicted are left in unmerged state.  You would have to first\ncheck which paths are conflicting with git status and after fixing them manually in your working tree, you would\nstage the result as usual with git add : $ git status | grep unmerged\nunmerged: hello.c\n$ edit hello.c\n$ git add hello.c After resolving conflicts and staging the result, git ls-files -u would stop mentioning the conflicted path.  When you are done,\nrun git commit to finally record the merge: $ git commit As with the case to record your own changes, you can use -a option to save typing.  One difference is that during a merge\nresolution, you cannot use git commit with pathnames to\nalter the order the changes are committed, because the merge\nshould be recorded as a single commit.  In fact, the command\nrefuses to run when given pathnames (but see -i option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "COMMIT INFORMATION Author and committer information is taken from the following environment\nvariables, if set: GIT_AUTHOR_NAME\nGIT_AUTHOR_EMAIL\nGIT_AUTHOR_DATE\nGIT_COMMITTER_NAME\nGIT_COMMITTER_EMAIL\nGIT_COMMITTER_DATE (nb \"<\", \">\" and \"\\n\"s are stripped) The author and committer names are by convention some form of a personal name\n(that is, the name by which other humans refer to you), although Git does not\nenforce or require any particular form. Arbitrary Unicode may be used, subject\nto the constraints listed above. This name has no effect on authentication; for\nthat, see the credential.username variable in git-config . In case (some of) these environment variables are not set, the information\nis taken from the configuration items user.name and user.email , or, if not\npresent, the environment variable EMAIL, or, if that is not set,\nsystem user name and the hostname used for outgoing mail (taken\nfrom /etc/mailname and falling back to the fully qualified hostname when\nthat file does not exist). The author.name and committer.name and their corresponding email options\noverride user.name and user.email if set and are overridden themselves by\nthe environment variables. The typical usage is to set just the user.name and user.email variables;\nthe other options are provided for more complex use cases."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  Git internal format"}, {"role": "assistant", "content": "It is <unix-timestamp> <time-zone-offset> , where <unix-timestamp> is the number of seconds since the UNIX epoch. <time-zone-offset> is a positive or negative offset from UTC.\nFor example CET (which is 1 hour ahead of UTC) is +0100 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  RFC 2822"}, {"role": "assistant", "content": "The standard date format as described by RFC 2822, for example Thu, 07 Apr 2005 22:13:13 +0200 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  ISO 8601"}, {"role": "assistant", "content": "Time and date specified by the ISO 8601 standard, for example 2005-04-07T22:13:13 . The parser accepts a space instead of the T character as well. Fractional parts of a second will be ignored,\nfor example 2005-04-07T22:13:13.019 will be treated as 2005-04-07T22:13:13 . Note In addition, the date part is accepted in the following formats: YYYY.MM.DD , MM/DD/YYYY and DD.MM.YYYY ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "DISCUSSION Though not required, it’s a good idea to begin the commit message\nwith a single short (no more than 50 characters) line summarizing the\nchange, followed by a blank line and then a more thorough description.\nThe text up to the first blank line in a commit message is treated\nas the commit title, and that title is used throughout Git.\nFor example, git-format-patch turns a commit into email, and it uses\nthe title on the Subject line and the rest of the commit in the body. Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.cleanup"}, {"role": "assistant", "content": "This setting overrides the default of the --cleanup option in git commit . See git-commit for details. Changing the\ndefault can be useful when you always want to keep lines that begin\nwith the comment character # in your log message, in which case you\nwould do git config commit.cleanup whitespace (note that you will\nhave to remove the help lines that begin with # in the commit log\ntemplate yourself, if you do this)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.gpgSign"}, {"role": "assistant", "content": "A boolean to specify whether all commits should be GPG signed.\nUse of this option when doing operations such as rebase can\nresult in a large number of commits being signed. It may be\nconvenient to use an agent to avoid typing your GPG passphrase\nseveral times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.status"}, {"role": "assistant", "content": "A boolean to enable/disable inclusion of status information in the\ncommit message template when using an editor to prepare the commit\nmessage.  Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.template"}, {"role": "assistant", "content": "Specify the pathname of a file to use as the template for\nnew commit messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  commit.verbose"}, {"role": "assistant", "content": "A boolean or int to specify the level of verbosity with git commit .\nSee git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "HOOKS This command can run commit-msg , prepare-commit-msg , pre-commit , post-commit and post-rewrite hooks.  See githooks for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  $GIT_DIR/COMMIT_EDITMSG"}, {"role": "assistant", "content": "This file contains the commit message of a commit in progress.\nIf git commit exits due to an error before creating a commit,\nany commit message that has been provided by the user (e.g., in\nan editor session) will be available in this file, but will be\noverwritten by the next invocation of git commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "NAME git-notes - Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "SYNOPSIS git notes [list [<object>]] git notes add [-f] [--allow-empty] [--[no-]separator | --separator=<paragraph-break>] [--[no-]stripspace] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>] git notes copy [-f] ( --stdin | <from-object> [<to-object>] ) git notes append [--allow-empty] [--[no-]separator | --separator=<paragraph-break>] [--[no-]stripspace] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>] git notes edit [--allow-empty] [<object>] [--[no-]stripspace] git notes show [<object>] git notes merge [-v | -q] [-s <strategy> ] <notes-ref> git notes merge --commit [-v | -q] git notes merge --abort [-v | -q] git notes remove [--ignore-missing] [--stdin] [<object>…​] git notes prune [-n] [-v] git notes get-ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "DESCRIPTION Adds, removes, or reads notes attached to objects, without touching\nthe objects themselves. By default, notes are saved to and read from refs/notes/commits , but\nthis default can be overridden.  See the OPTIONS, CONFIGURATION, and\nENVIRONMENT sections below.  If this ref does not exist, it will be\nquietly created when it is first needed to store a note. A typical use of notes is to supplement a commit message without\nchanging the commit itself. Notes can be shown by git log along with\nthe original commit message. To distinguish these notes from the\nmessage stored in the commit object, the notes are indented like the\nmessage, after an unindented line saying \"Notes (<refname>):\" (or\n\"Notes:\" for refs/notes/commits ). Notes can also be added to patches prepared with git format-patch by\nusing the --notes option. Such notes are added as a patch commentary\nafter a three dash separator line. To change which notes are shown by git log , see the\n\"notes.displayRef\" discussion in CONFIGURATION . See the \"notes.rewrite.<command>\" configuration for a way to carry\nnotes across commands that rewrite commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  list"}, {"role": "assistant", "content": "List the notes object for a given object. If no object is\ngiven, show a list of all note objects and the objects they\nannotate (in the format \"<note-object> <annotated-object>\").\nThis is the default subcommand if no subcommand is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  add"}, {"role": "assistant", "content": "Add notes for a given object (defaults to HEAD). Abort if the\nobject already has notes (use -f to overwrite existing notes).\nHowever, if you’re using add interactively (using an editor\nto supply the notes contents), then - instead of aborting -\nthe existing notes will be opened in the editor (like the edit subcommand). If you specify multiple -m and -F , a blank\nline will be inserted between the messages. Use the --separator option to insert other delimiters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  copy"}, {"role": "assistant", "content": "Copy the notes for the first object onto the second object (defaults to\nHEAD). Abort if the second object already has notes, or if the first\nobject has none (use -f to overwrite existing notes to the\nsecond object). This subcommand is equivalent to: git notes add [-f] -C $(git notes list <from-object>) <to-object> In --stdin mode, take lines in the format <from-object> SP <to-object> [ SP <rest> ] LF on standard input, and copy the notes from each <from-object> to its\ncorresponding <to-object>.  (The optional <rest> is ignored so that\nthe command can read the input given to the post-rewrite hook.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  append"}, {"role": "assistant", "content": "Append new message(s) given by -m or -F options to an\nexisting note, or add them as a new note if one does not\nexist, for the object (defaults to HEAD).  When appending to\nan existing note, a blank line is added before each new\nmessage as an inter-paragraph separator.  The separator can\nbe customized with the --separator option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  edit"}, {"role": "assistant", "content": "Edit the notes for a given object (defaults to HEAD)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  show"}, {"role": "assistant", "content": "Show the notes for a given object (defaults to HEAD)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  merge"}, {"role": "assistant", "content": "Merge the given notes ref into the current notes ref.\nThis will try to merge the changes made by the given\nnotes ref (called \"remote\") since the merge-base (if\nany) into the current notes ref (called \"local\"). If conflicts arise and a strategy for automatically resolving\nconflicting notes (see the \"NOTES MERGE STRATEGIES\" section) is not given,\nthe \"manual\" resolver is used. This resolver checks out the\nconflicting notes in a special worktree ( .git/NOTES_MERGE_WORKTREE ),\nand instructs the user to manually resolve the conflicts there.\nWhen done, the user can either finalize the merge with git notes merge --commit , or abort the merge with git notes merge --abort ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  remove"}, {"role": "assistant", "content": "Remove the notes for given objects (defaults to HEAD). When\ngiving zero or one object from the command line, this is\nequivalent to specifying an empty note message to\nthe edit subcommand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  prune"}, {"role": "assistant", "content": "Remove all notes for non-existing/unreachable objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  get-ref"}, {"role": "assistant", "content": "Print the current notes ref. This provides an easy way to\nretrieve the current notes ref (e.g. from scripts)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -f  --force"}, {"role": "assistant", "content": "When adding notes to an object that already has notes,\noverwrite the existing notes (instead of aborting)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -m <msg>  --message=<msg>"}, {"role": "assistant", "content": "Use the given note message (instead of prompting).\nIf multiple -m options are given, their values\nare concatenated as separate paragraphs.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out.\nIf you wish to keep them verbatim, use --no-stripspace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -F <file>  --file=<file>"}, {"role": "assistant", "content": "Take the note message from the given file.  Use - to\nread the note message from the standard input.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out.\nIf you wish to keep them verbatim, use --no-stripspace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -C <object>  --reuse-message=<object>"}, {"role": "assistant", "content": "Take the given blob object (for example, another note) as the\nnote message. (Use git notes copy <object> instead to\ncopy notes between objects.).  By default, message will be\ncopied verbatim, but if you wish to strip out the lines\nstarting with # and empty lines other than a single line\nbetween paragraphs, use with`--stripspace` option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -c <object>  --reedit-message=<object>"}, {"role": "assistant", "content": "Like -C , but with -c the editor is invoked, so that\nthe user can further edit the note message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --allow-empty"}, {"role": "assistant", "content": "Allow an empty note object to be stored. The default behavior is\nto automatically remove empty notes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --[no-]separator, --separator=<paragraph-break>"}, {"role": "assistant", "content": "Specify a string used as a custom inter-paragraph separator\n(a newline is added at the end as needed). If --no-separator , no\nseparators will be added between paragraphs.  Defaults to a blank\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --[no-]stripspace"}, {"role": "assistant", "content": "Strip leading and trailing whitespace from the note message.\nAlso strip out empty lines other than a single line between\nparagraphs. Lines starting with # will be stripped out\nin non-editor cases like -m , -F and -C , but not in\neditor case like git notes edit , -c , etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --ref <ref>"}, {"role": "assistant", "content": "Manipulate the notes tree in <ref>.  This overrides GIT_NOTES_REF and the \"core.notesRef\" configuration.  The ref\nspecifies the full refname when it begins with refs/notes/ ; when it\nbegins with notes/ , refs/ and otherwise refs/notes/ is prefixed\nto form a full name of the ref."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --ignore-missing"}, {"role": "assistant", "content": "Do not consider it an error to request removing notes from an\nobject that does not have notes attached to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --stdin"}, {"role": "assistant", "content": "Also read the object names to remove notes from the standard\ninput (there is no reason you cannot combine this with object\nnames from the command line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -n  --dry-run"}, {"role": "assistant", "content": "Do not remove anything; just report the object names whose notes\nwould be removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "When merging notes, resolve notes conflicts using the given\nstrategy. The following strategies are recognized: \"manual\"\n(default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\".\nThis option overrides the \"notes.mergeStrategy\" configuration setting.\nSee the \"NOTES MERGE STRATEGIES\" section below for more\ninformation on each notes merge strategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --commit"}, {"role": "assistant", "content": "Finalize an in-progress git notes merge . Use this option\nwhen you have resolved the conflicts that git notes merge stored in .git/NOTES_MERGE_WORKTREE. This amends the partial\nmerge commit created by git notes merge (stored in\n.git/NOTES_MERGE_PARTIAL) by adding the notes in\n.git/NOTES_MERGE_WORKTREE. The notes ref stored in the\n.git/NOTES_MERGE_REF symref is updated to the resulting commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --abort"}, {"role": "assistant", "content": "Abort/reset an in-progress git notes merge , i.e. a notes merge\nwith conflicts. This simply removes all files related to the\nnotes merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -q  --quiet"}, {"role": "assistant", "content": "When merging notes, operate quietly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -v  --verbose"}, {"role": "assistant", "content": "When merging notes, be more verbose.\nWhen pruning notes, report all object names whose notes are\nremoved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "DISCUSSION Commit notes are blobs containing extra information about an object\n(usually information to supplement a commit’s message).  These blobs\nare taken from notes refs.  A notes ref is usually a branch which\ncontains \"files\" whose paths are the object names for the objects\nthey describe, with some directory separators included for performance\nreasons [ 1 ] . Every notes change creates a new commit at the specified notes ref.\nYou can therefore inspect the history of the notes by invoking, e.g., git log -p notes/commits .  Currently the commit message only records\nwhich operation triggered the update, and the commit authorship is\ndetermined according to the usual rules (see git-commit ).\nThese details may change in the future. It is also permitted for a notes ref to point directly to a tree\nobject, in which case the history of the notes can be read with git log -p -g <refname> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "NOTES MERGE STRATEGIES The default notes merge strategy is \"manual\", which checks out\nconflicting notes in a special work tree for resolving notes conflicts\n( .git/NOTES_MERGE_WORKTREE ), and instructs the user to resolve the\nconflicts in that work tree.\nWhen done, the user can either finalize the merge with git notes merge --commit , or abort the merge with git notes merge --abort . Users may select an automated merge strategy from among the following using\neither -s/--strategy option or configuring notes.mergeStrategy accordingly: \"ours\" automatically resolves conflicting notes in favor of the local\nversion (i.e. the current notes ref). \"theirs\" automatically resolves notes conflicts in favor of the remote\nversion (i.e. the given notes ref being merged into the current notes\nref). \"union\" automatically resolves notes conflicts by concatenating the\nlocal and remote versions. \"cat_sort_uniq\" is similar to \"union\", but in addition to concatenating\nthe local and remote versions, this strategy also sorts the resulting\nlines, and removes duplicate lines from the result. This is equivalent\nto applying the \"cat | sort | uniq\" shell pipeline to the local and\nremote versions. This strategy is useful if the notes follow a line-based\nformat where one wants to avoid duplicated lines in the merge result.\nNote that if either the local or remote version contain duplicate lines\nprior to the merge, these will also be removed by this notes merge\nstrategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes"}, {"role": "assistant", "content": "EXAMPLES You can use notes to add annotations with information that was not\navailable at the time a commit was written. $ git notes add -m 'Tested-by: Johannes Sixt <j6t@kdbg.org>' 72a144e2\n$ git show -s 72a144e\n[...]\n    Signed-off-by: Junio C Hamano <gitster@pobox.com>\n\nNotes:\n    Tested-by: Johannes Sixt <j6t@kdbg.org> In principle, a note is a regular Git blob, and any kind of\n(non-)format is accepted.  You can binary-safely create notes from\narbitrary files using git hash-object : $ cc *.c\n$ blob=$(git hash-object -w a.out)\n$ git notes --ref=built add --allow-empty -C \"$blob\" HEAD (You cannot simply use git notes --ref=built add -F a.out HEAD because that is not binary-safe.)\nOf course, it doesn’t make much sense to display non-text-format notes\nwith git log , so if you use such notes, you’ll probably need to write\nsome special-purpose tools to do something useful with them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  core.notesRef"}, {"role": "assistant", "content": "Notes ref to read and manipulate instead of refs/notes/commits .  Must be an unabbreviated ref name.\nThis setting can be overridden through the environment and\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  notes.rewriteRef"}, {"role": "assistant", "content": "When copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  GIT_NOTES_REF"}, {"role": "assistant", "content": "Which ref to manipulate notes from, instead of refs/notes/commits .\nThis overrides the core.notesRef setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  GIT_NOTES_DISPLAY_REF"}, {"role": "assistant", "content": "Colon-delimited list of refs or globs indicating which refs,\nin addition to the default from core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages.\nThis overrides the notes.displayRef setting. A warning will be issued for refs that do not exist, but a glob that\ndoes not match any refs is silently ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  GIT_NOTES_REWRITE_MODE"}, {"role": "assistant", "content": "When copying notes during a rewrite, what to do if the target\ncommit already has a note.\nMust be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nThis overrides the core.rewriteMode setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  GIT_NOTES_REWRITE_REF"}, {"role": "assistant", "content": "When rewriting commits, which notes to copy from the original\nto the rewritten commit.  Must be a colon-delimited list of\nrefs or globs. If not set in the environment, the list of notes to copy depends\non the notes.rewrite.<command> and notes.rewriteRef settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files"}, {"role": "assistant", "content": "NAME git-restore - Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files"}, {"role": "assistant", "content": "SYNOPSIS git restore [<options>] [--source=<tree>] [--staged] [--worktree] [--] <pathspec>…​ git restore [<options>] [--source=<tree>] [--staged] [--worktree] --pathspec-from-file=<file> [--pathspec-file-nul] git restore (-p|--patch) [<options>] [--source=<tree>] [--staged] [--worktree] [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files"}, {"role": "assistant", "content": "DESCRIPTION Restore specified paths in the working tree with some contents from a\nrestore source. If a path is tracked but does not exist in the restore\nsource, it will be removed to match the source. The command can also be used to restore the content in the index with --staged , or restore both the working tree and the index with --staged --worktree . By default, if --staged is given, the contents are restored from HEAD ,\notherwise from the index. Use --source to restore from a different commit. See \"Reset, restore and revert\" in git for the differences\nbetween the three commands. THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -s <tree>  --source=<tree>"}, {"role": "assistant", "content": "Restore the working tree files with the content from the given\ntree. It is common to specify the source tree by naming a\ncommit, branch or tag associated with it. If not specified, the contents are restored from HEAD if --staged is\ngiven, otherwise from the index. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -p  --patch"}, {"role": "assistant", "content": "Interactively select hunks in the difference between the\nrestore source and the restore location. See the “Interactive\nMode” section of git-add to learn how to operate\nthe --patch mode. Note that --patch can accept no pathspec and will prompt to restore\nall modified paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -W  --worktree  -S  --staged"}, {"role": "assistant", "content": "Specify the restore location. If neither option is specified,\nby default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -q  --quiet"}, {"role": "assistant", "content": "Quiet, suppress feedback messages. Implies --no-progress ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --ours  --theirs"}, {"role": "assistant", "content": "When restoring files in the working tree from the index, use\nstage #2 ( ours ) or #3 ( theirs ) for unmerged paths.\nThis option cannot be used when checking out paths from a\ntree-ish (i.e. with the --source option). Note that during git rebase and git pull --rebase , ours and theirs may appear swapped. See the explanation of the same options\nin git-checkout for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -m  --merge"}, {"role": "assistant", "content": "When restoring files on the working tree from the index,\nrecreate the conflicted merge in the unmerged paths.\nThis option cannot be used when checking out paths from a\ntree-ish (i.e. with the --source option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --conflict=<style>"}, {"role": "assistant", "content": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the merge.conflictStyle configuration variable.  Possible values\nare \"merge\" (default), \"diff3\", and \"zdiff3\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --ignore-unmerged"}, {"role": "assistant", "content": "When restoring files on the working tree from the index, do\nnot abort the operation if there are unmerged entries and\nneither --ours , --theirs , --merge or --conflict is\nspecified. Unmerged paths on the working tree are left alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --ignore-skip-worktree-bits"}, {"role": "assistant", "content": "In sparse checkout mode, the default is to only update entries\nmatched by <pathspec> and sparse patterns in\n$GIT_DIR/info/sparse-checkout. This option ignores the sparse\npatterns and unconditionally restores any files in <pathspec> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --recurse-submodules  --no-recurse-submodules"}, {"role": "assistant", "content": "If <pathspec> names an active submodule and the restore location\nincludes the working tree, the submodule will only be updated if\nthis option is given, in which case its working tree will be\nrestored to the commit recorded in the superproject, and any local\nmodifications overwritten. If nothing (or --no-recurse-submodules ) is used, submodules working trees will\nnot be updated. Just like git-checkout , this will detach HEAD of the submodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --overlay  --no-overlay"}, {"role": "assistant", "content": "In overlay mode, the command never removes files when\nrestoring. In no-overlay mode, tracked files that do not\nappear in the --source tree are removed, to make them match <tree> exactly. The default is no-overlay mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  <pathspec>…​"}, {"role": "assistant", "content": "Limits the paths affected by the operation. For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files"}, {"role": "assistant", "content": "EXAMPLES The following sequence switches to the master branch, reverts the Makefile to two revisions back, deletes hello.c by mistake, and gets\nit back from the index. $ git switch master\n$ git restore --source master~2 Makefile (1) $ rm -f hello.c\n$ git restore hello.c (2) take a file out of another commit restore hello.c from the index If you want to restore all C source files to match the version in\nthe index, you can say $ git restore '*.c' Note the quotes around *.c .  The file hello.c will also be\nrestored, even though it is no longer in the working tree, because the\nfile globbing is used to match entries in the index (not in the\nworking tree by the shell). To restore all files in the current directory $ git restore . or to restore all working tree files with top pathspec magic (see gitglossary ) $ git restore :/ To restore a file in the index to match the version in HEAD (this is\nthe same as using git-reset ) $ git restore --staged hello.c or you can restore both the index and the working tree (this is the same\nas using git-checkout ) $ git restore --source=HEAD --staged --worktree hello.c or the short form which is more practical but less readable: $ git restore -s@ -SW hello.c"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state"}, {"role": "assistant", "content": "NAME git-reset - Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state"}, {"role": "assistant", "content": "SYNOPSIS git reset [-q] [<tree-ish>] [--] <pathspec>…​ git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>] git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>…​] git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  git reset [-q] [<tree-ish>] [--] <pathspec>…​  git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]"}, {"role": "assistant", "content": "These forms reset the index entries for all paths that match the <pathspec> to their state at <tree-ish> .  (It does not affect\nthe working tree or the current branch.) This means that git reset <pathspec> is the opposite of git add\n<pathspec> . This command is equivalent to git restore [--source=<tree-ish>] --staged <pathspec>... . After running git reset <pathspec> to update the index entry, you can\nuse git-restore to check the contents out of the index to\nthe working tree. Alternatively, using git-restore and specifying a commit with --source , you\ncan copy the contents of a path out of a commit to the index and to the\nworking tree in one go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>…​]"}, {"role": "assistant", "content": "Interactively select hunks in the difference between the index\nand <tree-ish> (defaults to HEAD ).  The chosen hunks are applied\nin reverse to the index. This means that git reset -p is the opposite of git add -p , i.e.\nyou can use it to selectively reset hunks. See the “Interactive Mode”\nsection of git-add to learn how to operate the --patch mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  git reset [<mode>] [<commit>]"}, {"role": "assistant", "content": "This form resets the current branch head to <commit> and\npossibly updates the index (resetting it to the tree of <commit> ) and\nthe working tree depending on <mode> . Before the operation, ORIG_HEAD is set to the tip of the current branch. If <mode> is omitted,\ndefaults to --mixed . The <mode> must be one of the following: --soft Does not touch the index file or the working tree at all (but\nresets the head to <commit> , just like all modes do). This leaves\nall your changed files \"Changes to be committed\", as git status would put it. --mixed Resets the index but not the working tree (i.e., the changed files\nare preserved but not marked for commit) and reports what has not\nbeen updated. This is the default action. If -N is specified, removed paths are marked as intent-to-add (see git-add ). --hard Resets the index and working tree. Any changes to tracked files in the\nworking tree since <commit> are discarded.  Any untracked files or\ndirectories in the way of writing any tracked files are simply deleted. --merge Resets the index and updates the files in the working tree that are\ndifferent between <commit> and HEAD , but keeps those which are\ndifferent between the index and working tree (i.e. which have changes\nwhich have not been added).\nIf a file that is different between <commit> and the index has\nunstaged changes, reset is aborted. In other words, --merge does something like a git read-tree -u -m <commit> ,\nbut carries forward unmerged index entries. --keep Resets index entries and updates files in the working tree that are\ndifferent between <commit> and HEAD .\nIf a file that is different between <commit> and HEAD has local\nchanges, reset is aborted. --[no-]recurse-submodules When the working tree is updated, using --recurse-submodules will\nalso recursively reset the working tree of all active submodules\naccording to the commit recorded in the superproject, also setting\nthe submodules' HEAD to be detached at that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --soft"}, {"role": "assistant", "content": "Does not touch the index file or the working tree at all (but\nresets the head to <commit> , just like all modes do). This leaves\nall your changed files \"Changes to be committed\", as git status would put it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --mixed"}, {"role": "assistant", "content": "Resets the index but not the working tree (i.e., the changed files\nare preserved but not marked for commit) and reports what has not\nbeen updated. This is the default action. If -N is specified, removed paths are marked as intent-to-add (see git-add )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --hard"}, {"role": "assistant", "content": "Resets the index and working tree. Any changes to tracked files in the\nworking tree since <commit> are discarded.  Any untracked files or\ndirectories in the way of writing any tracked files are simply deleted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --merge"}, {"role": "assistant", "content": "Resets the index and updates the files in the working tree that are\ndifferent between <commit> and HEAD , but keeps those which are\ndifferent between the index and working tree (i.e. which have changes\nwhich have not been added).\nIf a file that is different between <commit> and the index has\nunstaged changes, reset is aborted. In other words, --merge does something like a git read-tree -u -m <commit> ,\nbut carries forward unmerged index entries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --keep"}, {"role": "assistant", "content": "Resets index entries and updates files in the working tree that are\ndifferent between <commit> and HEAD .\nIf a file that is different between <commit> and HEAD has local\nchanges, reset is aborted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --[no-]recurse-submodules"}, {"role": "assistant", "content": "When the working tree is updated, using --recurse-submodules will\nalso recursively reset the working tree of all active submodules\naccording to the commit recorded in the superproject, also setting\nthe submodules' HEAD to be detached at that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  -q  --quiet"}, {"role": "assistant", "content": "Be quiet, only report errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --refresh  --no-refresh"}, {"role": "assistant", "content": "Refresh the index after a mixed reset. Enabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  <pathspec>…​"}, {"role": "assistant", "content": "Limits the paths affected by the operation. For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo add"}, {"role": "assistant", "content": "$ edit (1) $ git add frotz.c filfre.c\n$ mailx (2) $ git reset (3) $ git pull git://info.example.com/ nitfol (4) You are happily working on something, and find the changes\nin these files are in good order.  You do not want to see them\nwhen you run git diff , because you plan to work on other files\nand changes with these files are distracting. Somebody asks you to pull, and the changes sound worthy of merging. However, you already dirtied the index (i.e. your index does\nnot match the HEAD commit).  But you know the pull you are going\nto make does not affect frotz.c or filfre.c , so you revert the\nindex changes for these two files.  Your changes in working tree\nremain there. Then you can pull and merge, leaving frotz.c and filfre.c changes still in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo a commit and redo"}, {"role": "assistant", "content": "$ git commit ...\n$ git reset --soft HEAD^ (1) $ edit (2) $ git commit -a -c ORIG_HEAD (3) This is most often done when you remembered what you\njust committed is incomplete, or you misspelled your commit\nmessage, or both.  Leaves working tree as it was before \"reset\". Make corrections to working tree files. \"reset\" copies the old head to .git/ORIG_HEAD ; redo the\ncommit by starting with its log message.  If you do not need to\nedit the message further, you can give -C option instead. See also the --amend option to git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo a commit, making it a topic branch"}, {"role": "assistant", "content": "$ git branch topic/wip (1) $ git reset --hard HEAD~3 (2) $ git switch topic/wip (3) You have made some commits, but realize they were premature\nto be in the master branch.  You want to continue polishing\nthem in a topic branch, so create topic/wip branch off of the\ncurrent HEAD . Rewind the master branch to get rid of those three commits. Switch to topic/wip branch and keep working."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo commits permanently"}, {"role": "assistant", "content": "$ git commit ...\n$ git reset --hard HEAD~3 (1) The last three commits ( HEAD , HEAD^ , and HEAD~2 ) were bad\nand you do not want to ever see them again.  Do not do this if\nyou have already given these commits to somebody else.  (See the\n\"RECOVERING FROM UPSTREAM REBASE\" section in git-rebase for the implications of doing so.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo a merge or pull"}, {"role": "assistant", "content": "$ git pull (1) Auto-merging nitfol\nCONFLICT (content): Merge conflict in nitfol\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git reset --hard (2) $ git pull . topic/branch (3) Updating from 41223... to 13134...\nFast-forward\n$ git reset --hard ORIG_HEAD (4) Try to update from the upstream resulted in a lot of\nconflicts; you were not ready to spend a lot of time merging\nright now, so you decide to do that later. \"pull\" has not made merge commit, so git reset --hard which is a synonym for git reset --hard HEAD clears the mess\nfrom the index file and the working tree. Merge a topic branch into the current branch, which resulted\nin a fast-forward. But you decided that the topic branch is not ready for public\nconsumption yet.  \"pull\" or \"merge\" always leaves the original\ntip of the current branch in ORIG_HEAD , so resetting hard to it\nbrings your index file and the working tree back to that state,\nand resets the tip of the branch to that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo a merge or pull inside a dirty working tree"}, {"role": "assistant", "content": "$ git pull (1) Auto-merging nitfol\nMerge made by recursive.\n nitfol                |   20 +++++----\n ...\n$ git reset --merge ORIG_HEAD (2) Even if you may have local modifications in your\nworking tree, you can safely say git pull when you know\nthat the change in the other branch does not overlap with\nthem. After inspecting the result of the merge, you may find\nthat the change in the other branch is unsatisfactory.  Running git reset --hard ORIG_HEAD will let you go back to where you\nwere, but it will discard your local changes, which you do not\nwant. git reset --merge keeps your local changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Interrupted workflow"}, {"role": "assistant", "content": "Suppose you are interrupted by an urgent fix request while you\nare in the middle of a large change.  The files in your\nworking tree are not in any shape to be committed yet, but you\nneed to get to the other branch for a quick bugfix. $ git switch feature  ;# you were working in \"feature\" branch and\n$ work work work      ;# got interrupted\n$ git commit -a -m \"snapshot WIP\" (1) $ git switch master\n$ fix fix fix\n$ git commit ;# commit with real log\n$ git switch feature\n$ git reset --soft HEAD^ ;# go back to WIP state (2) $ git reset (3) This commit will get blown away so a throw-away log message is OK. This removes the WIP commit from the commit history, and sets\nyour working tree to the state just before you made that snapshot. At this point the index file still has all the WIP changes you\ncommitted as snapshot WIP .  This updates the index to show your\nWIP files as uncommitted. See also git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Reset a single file in the index"}, {"role": "assistant", "content": "Suppose you have added a file to your index, but later decide you do not\nwant to add it to your commit. You can remove the file from the index\nwhile keeping your changes with git reset. $ git reset -- frotz.c (1) $ git commit -m \"Commit files in index\" (2) $ git add frotz.c (3) This removes the file from the index while keeping it in the working\ndirectory. This commits all other changes in the index. Adds the file to the index again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Keep changes in working tree while discarding some previous commits"}, {"role": "assistant", "content": "Suppose you are working on something and you commit it, and then you\ncontinue working a bit more, but now you think that what you have in\nyour working tree should be in another branch that has nothing to do\nwith what you committed previously. You can start a new branch and\nreset it while keeping the changes in your working tree. $ git tag start\n$ git switch -c branch1\n$ edit\n$ git commit ... (1) $ edit\n$ git switch -c branch2 (2) $ git reset --keep start (3) This commits your first edits in branch1 . In the ideal world, you could have realized that the earlier\ncommit did not belong to the new topic when you created and switched\nto branch2 (i.e. git switch -c branch2 start ), but nobody is\nperfect. But you can use reset --keep to remove the unwanted commit after\nyou switched to branch2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Split a commit apart into a sequence of commits"}, {"role": "assistant", "content": "Suppose that you have created lots of logically separate changes and committed\nthem together. Then, later you decide that it might be better to have each\nlogical chunk associated with its own commit. You can use git reset to rewind\nhistory without changing the contents of your local files, and then successively\nuse git add -p to interactively select which hunks to include into each commit,\nusing git commit -c to pre-populate the commit message. $ git reset -N HEAD^ (1) $ git add -p (2) $ git diff --cached (3) $ git commit -c HEAD@{1} (4) ... (5) $ git add ... (6) $ git diff --cached (7) $ git commit ... (8) First, reset the history back one commit so that we remove the original\ncommit, but leave the working tree with all the changes. The -N ensures\nthat any new files added with HEAD are still marked so that git add -p will find them. Next, we interactively select diff hunks to add using the git add -p facility. This will ask you about each diff hunk in sequence and you can\nuse simple commands such as \"yes, include this\", \"No don’t include this\"\nor even the very powerful \"edit\" facility. Once satisfied with the hunks you want to include, you should verify what\nhas been prepared for the first commit by using git diff --cached . This\nshows all the changes that have been moved into the index and are about\nto be committed. Next, commit the changes stored in the index. The -c option specifies to\npre-populate the commit message from the original message that you started\nwith in the first commit. This is helpful to avoid retyping it. The HEAD@{1} is a special notation for the commit that HEAD used to be at\nprior to the original reset commit (1 change ago).\nSee git-reflog for more details. You may also use any other\nvalid commit reference. You can repeat steps 2-4 multiple times to break the original code into\nany number of commits. Now you’ve split out many of the changes into their own commits, and might\nno longer use the patch mode of git add , in order to select all remaining\nuncommitted changes. Once again, check to verify that you’ve included what you want to. You may\nalso wish to verify that git diff doesn’t show any remaining changes to be\ncommitted later. And finally create the final commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state"}, {"role": "assistant", "content": "DISCUSSION The tables below show what happens when running: git reset --option target to reset the HEAD to another commit ( target ) with the different\nreset options depending on the state of the files. In these tables, A , B , C and D are some different states of a\nfile. For example, the first line of the first table means that if a\nfile is in state A in the working tree, in state B in the index, in\nstate C in HEAD and in state D in the target, then git reset --soft\ntarget will leave the file in the working tree in state A and in the\nindex in state B .  It resets (i.e. moves) the HEAD (i.e. the tip of\nthe current branch, if you are on one) to target (which has the file\nin state D ). working index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    D     --soft   A       B     D\n\t\t\t  --mixed  A       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep  (disallowed) working index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    C     --soft   A       B     C\n\t\t\t  --mixed  A       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep   A       C     C working index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    D     --soft   B       B     D\n\t\t\t  --mixed  B       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge  D       D     D\n\t\t\t  --keep  (disallowed) working index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    C     --soft   B       B     C\n\t\t\t  --mixed  B       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge  C       C     C\n\t\t\t  --keep   B       C     C working index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    D     --soft   B       C     D\n\t\t\t  --mixed  B       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep  (disallowed) working index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    C     --soft   B       C     C\n\t\t\t  --mixed  B       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge  B       C     C\n\t\t\t  --keep   B       C     C reset --merge is meant to be used when resetting out of a conflicted\nmerge. Any mergy operation guarantees that the working tree file that is\ninvolved in the merge does not have a local change with respect to the index\nbefore it starts, and that it writes the result out to the working tree. So if\nwe see some difference between the index and the target and also\nbetween the index and the working tree, then it means that we are not\nresetting out from a state that a mergy operation left after failing\nwith a conflict. That is why we disallow --merge option in this case. reset --keep is meant to be used when removing some of the last\ncommits in the current branch while keeping changes in the working\ntree. If there could be conflicts between the changes in the commit we\nwant to remove and the changes in the working tree we want to keep,\nthe reset is disallowed. That’s why it is disallowed if there are both\nchanges between the working tree and HEAD , and between HEAD and the\ntarget. To be safe, it is also disallowed when there are unmerged\nentries. The following tables show what happens when there are unmerged\nentries: working index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    B     --soft  (disallowed)\n\t\t\t  --mixed  X       B     B\n\t\t\t  --hard   B       B     B\n\t\t\t  --merge  B       B     B\n\t\t\t  --keep  (disallowed) working index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    A     --soft  (disallowed)\n\t\t\t  --mixed  X       A     A\n\t\t\t  --hard   A       A     A\n\t\t\t  --merge  A       A     A\n\t\t\t  --keep  (disallowed) X means any state and U means an unmerged index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "NAME git-rm - Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "SYNOPSIS git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]\n\t  [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "DESCRIPTION Remove files matching pathspec from the index, or from the working tree\nand the index. git rm will not remove a file from just your working\ndirectory. (There is no option to remove a file only from the working\ntree and yet keep it in the index; use /bin/rm if you want to do\nthat.) The files being removed have to be identical to the tip of the\nbranch, and no updates to their contents can be staged in the index,\nthough that default behavior can be overridden with the -f option.\nWhen --cached is given, the staged content has to\nmatch either the tip of the branch or the file on disk,\nallowing the file to be removed from just the index. When\nsparse-checkouts are in use (see git-sparse-checkout ), git rm will only remove paths within the sparse-checkout patterns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  <pathspec>…​"}, {"role": "assistant", "content": "Files to remove.  A leading directory name (e.g. dir to remove dir/file1 and dir/file2 ) can be given to remove all files in\nthe directory, and recursively all sub-directories, but this\nrequires the -r option to be explicitly given. The command removes only the paths that are known to Git. File globbing matches across directory boundaries.  Thus, given two\ndirectories d and d2 , there is a difference between using git rm 'd*' and git rm 'd/*' , as the former will also remove all\nof directory d2 . For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -f  --force"}, {"role": "assistant", "content": "Override the up-to-date check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -n  --dry-run"}, {"role": "assistant", "content": "Don’t actually remove any file(s).  Instead, just show\nif they exist in the index and would otherwise be removed\nby the command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -r"}, {"role": "assistant", "content": "Allow recursive removal when a leading directory name is\ngiven."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --"}, {"role": "assistant", "content": "This option can be used to separate command-line options from\nthe list of files, (useful when filenames might be mistaken\nfor command-line options)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --cached"}, {"role": "assistant", "content": "Use this option to unstage and remove paths only from the index.\nWorking tree files, whether modified or not, will be\nleft alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --ignore-unmatch"}, {"role": "assistant", "content": "Exit with a zero status even if no files matched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --sparse"}, {"role": "assistant", "content": "Allow updating index entries outside of the sparse-checkout cone.\nNormally, git rm refuses to update index entries whose paths do\nnot fit within the sparse-checkout cone. See git-sparse-checkout for more."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -q  --quiet"}, {"role": "assistant", "content": "git rm normally outputs one line (in the form of an rm command)\nfor each file removed. This option suppresses that output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM There is no option for git rm to remove from the index only\nthe paths that have disappeared from the filesystem. However,\ndepending on the use case, there are several ways that can be\ndone. Using “git commit -a” If you intend that your next commit should record all modifications\nof tracked files in the working tree and record all removals of\nfiles that have been removed from the working tree with rm (as opposed to git rm ), use git commit -a , as it will\nautomatically notice and record all removals.  You can also have a\nsimilar effect without committing by using git add -u . Using “git add -A” When accepting a new code drop for a vendor branch, you probably\nwant to record both the removal of paths and additions of new paths\nas well as modifications of existing paths. Typically you would first remove all tracked files from the working\ntree using this command: git ls-files -z | xargs -0 rm -f and then untar the new code in the working tree. Alternately\nyou could rsync the changes into the working tree. After that, the easiest way to record all removals, additions, and\nmodifications in the working tree is: git add -A See git-add . Other ways If all you really want to do is to remove from the index the files\nthat are no longer present in the working tree (perhaps because\nyour working tree is dirty so that you cannot use git commit -a ),\nuse the following command: git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "SUBMODULES Only submodules using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will be removed from the work\ntree, as their repository lives inside the .git directory of the\nsuperproject. If a submodule (or one of those nested inside it)\nstill uses a .git directory, git rm will move the submodules\ngit directory into the superprojects git directory to protect\nthe submodule’s history. If it exists the submodule.<name> section\nin the gitmodules file will also be removed and that file\nwill be staged (unless --cached or -n are used). A submodule is considered up to date when the HEAD is the same as\nrecorded in the index, no tracked files are modified and no untracked\nfiles that aren’t ignored are present in the submodule’s work tree.\nIgnored files are deemed expendable and won’t stop a submodule’s work\ntree from being removed. If you only want to remove the local checkout of a submodule from your\nwork tree without committing the removal, use git-submodule deinit instead. Also see gitsubmodules for details on submodule removal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  git rm Documentation/\\*.txt"}, {"role": "assistant", "content": "Removes all *.txt files from the index that are under the Documentation directory and any of its subdirectories. Note that the asterisk * is quoted from the shell in this\nexample; this lets Git, and not the shell, expand the pathnames\nof files and subdirectories under the Documentation/ directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  git rm -f git-*.sh"}, {"role": "assistant", "content": "Because this example lets the shell expand the asterisk\n(i.e. you are listing the files explicitly), it\ndoes not remove subdir/git-foo.sh ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "BUGS Each time a superproject update removes a populated submodule\n(e.g. when switching between commits before and after the removal) a\nstale submodule checkout will remain in the old location. Removing the\nold directory is only safe when it uses a gitfile, as otherwise the\nhistory of the submodule will be deleted too. This step will be\nobsolete when recursive submodule update has been implemented."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "NAME git-mv - Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "SYNOPSIS git mv [<options>] <source>…​ <destination>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "DESCRIPTION Move or rename a file, directory, or symlink. git mv [-v] [-f] [-n] [-k] <source> <destination>\ngit mv [-v] [-f] [-n] [-k] <source> ... <destination-directory> In the first form, it renames <source>, which must exist and be either\na file, symlink or directory, to <destination>.\nIn the second form, the last argument has to be an existing\ndirectory; the given sources will be moved into this directory. The index is updated after successful completion, but the change must still be\ncommitted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink  -f  --force"}, {"role": "assistant", "content": "Force renaming or moving of a file even if the <destination> exists."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink  -k"}, {"role": "assistant", "content": "Skip move or rename actions which would lead to an error\ncondition. An error happens when a source is neither existing nor\ncontrolled by Git, or when it would overwrite an existing\nfile unless -f is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink  -n  --dry-run"}, {"role": "assistant", "content": "Do nothing; only show what would happen"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink  -v  --verbose"}, {"role": "assistant", "content": "Report the names of files as they are moved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "SUBMODULES Moving a submodule using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will update the gitfile and\ncore.worktree setting to make the submodule work in the new location.\nIt also will attempt to update the submodule.<name>.path setting in\nthe gitmodules file and stage that file (unless -n is used)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "BUGS Each time a superproject update moves a populated submodule (e.g. when\nswitching between commits before and after the move) a stale submodule\ncheckout will remain in the old location and an empty directory will\nappear in the new location. To populate the submodule again in the new\nlocation the user will have to run \"git submodule update\"\nafterwards. Removing the old directory is only safe when it uses a\ngitfile, as otherwise the history of the submodule will be deleted\ntoo. Both steps will be obsolete when recursive submodule update has\nbeen implemented."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches"}, {"role": "assistant", "content": "NAME git-branch - List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches"}, {"role": "assistant", "content": "SYNOPSIS git branch [--color[=<when>] | --no-color] [--show-current]\n\t[-v [--abbrev=<n> | --no-abbrev]]\n\t[--column[=<options>] | --no-column] [--sort=<key>]\n\t[--merged [<commit>]] [--no-merged [<commit>]]\n\t[--contains [<commit>]] [--no-contains [<commit>]]\n\t[--points-at <object>] [--format=<format>]\n\t[(-r | --remotes) | (-a | --all)]\n\t[--list] [<pattern>…​] git branch [--track[=(direct|inherit)] | --no-track] [-f]\n\t[--recurse-submodules] <branchname> [<start-point>] git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>] git branch --unset-upstream [<branchname>] git branch (-m | -M) [<oldbranch>] <newbranch> git branch (-c | -C) [<oldbranch>] <newbranch> git branch (-d | -D) [-r] <branchname>…​ git branch --edit-description [<branchname>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches"}, {"role": "assistant", "content": "DESCRIPTION If --list is given, or if there are no non-option arguments, existing\nbranches are listed; the current branch will be highlighted in green and\nmarked with an asterisk.  Any branches checked out in linked worktrees will\nbe highlighted in cyan and marked with a plus sign. Option -r causes the\nremote-tracking branches to be listed,\nand option -a shows both local and remote branches. If a <pattern> is given, it is used as a shell wildcard to restrict the output to\nmatching branches. If multiple patterns are given, a branch is shown if\nit matches any of the patterns. Note that when providing a <pattern> , you must use --list ; otherwise the command may be interpreted\nas branch creation. With --contains , shows only the branches that contain the named commit\n(in other words, the branches whose tip commits are descendants of the\nnamed commit), --no-contains inverts it. With --merged , only branches\nmerged into the named commit (i.e. the branches whose tip commits are\nreachable from the named commit) will be listed.  With --no-merged only\nbranches not merged into the named commit will be listed.  If the <commit>\nargument is missing it defaults to HEAD (i.e. the tip of the current\nbranch). The command’s second form creates a new branch head named <branchname>\nwhich points to the current HEAD , or <start-point> if given. As a\nspecial case, for <start-point>, you may use \"A...B\" as a shortcut for\nthe merge base of A and B if there is exactly one merge base. You\ncan leave out at most one of A and B , in which case it defaults to HEAD . Note that this will create the new branch, but it will not switch the\nworking tree to it; use \"git switch <newbranch>\" to switch to the\nnew branch. When a local branch is started off a remote-tracking branch, Git sets up the\nbranch (specifically the branch.<name>.remote and branch.<name>.merge configuration entries) so that git pull will appropriately merge from\nthe remote-tracking branch. This behavior may be changed via the global branch.autoSetupMerge configuration flag. That setting can be\noverridden by using the --track and --no-track options, and\nchanged later using git branch --set-upstream-to . With a -m or -M option, <oldbranch> will be renamed to <newbranch>.\nIf <oldbranch> had a corresponding reflog, it is renamed to match\n<newbranch>, and a reflog entry is created to remember the branch\nrenaming. If <newbranch> exists, -M must be used to force the rename\nto happen. The -c and -C options have the exact same semantics as -m and -M , except instead of the branch being renamed, it will be copied to a\nnew name, along with its config and reflog. With a -d or -D option, <branchname> will be deleted.  You may\nspecify more than one branch for deletion.  If the branch currently\nhas a reflog then the reflog will also be deleted. Use -r together with -d to delete remote-tracking branches. Note, that it\nonly makes sense to delete remote-tracking branches if they no longer exist\nin the remote repository or if git fetch was configured not to fetch\nthem again. See also the prune subcommand of git-remote for a\nway to clean up all obsolete remote-tracking branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -d  --delete"}, {"role": "assistant", "content": "Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with --track or --set-upstream-to ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -D"}, {"role": "assistant", "content": "Shortcut for --delete --force ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --create-reflog"}, {"role": "assistant", "content": "Create the branch’s reflog.  This activates recording of\nall changes made to the branch ref, enabling use of date\nbased sha1 expressions such as \"<branchname>@{yesterday}\".\nNote that in non-bare repositories, reflogs are usually\nenabled by default by the core.logAllRefUpdates config option.\nThe negated form --no-create-reflog only overrides an earlier --create-reflog , but currently does not negate the setting of core.logAllRefUpdates ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -f  --force"}, {"role": "assistant", "content": "Reset <branchname> to <start-point>, even if <branchname> exists\nalready. Without -f , git branch refuses to change an existing branch.\nIn combination with -d (or --delete ), allow deleting the\nbranch irrespective of its merged status, or whether it even\npoints to a valid commit. In combination with -m (or --move ), allow renaming the branch even if the new\nbranch name already exists, the same applies for -c (or --copy ). Note that git branch -f <branchname> [<start-point>] , even with -f ,\nrefuses to change an existing branch <branchname> that is checked out\nin another worktree linked to the same repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -m  --move"}, {"role": "assistant", "content": "Move/rename a branch, together with its config and reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -M"}, {"role": "assistant", "content": "Shortcut for --move --force ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -c  --copy"}, {"role": "assistant", "content": "Copy a branch, together with its config and reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -C"}, {"role": "assistant", "content": "Shortcut for --copy --force ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --color[=<when>]"}, {"role": "assistant", "content": "Color branches to highlight current, local, and\nremote-tracking branches.\nThe value must be always (the default), never, or auto."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-color"}, {"role": "assistant", "content": "Turn off branch colors, even when the configuration file gives the\ndefault to color output.\nSame as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -i  --ignore-case"}, {"role": "assistant", "content": "Sorting and filtering branches are case insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --omit-empty"}, {"role": "assistant", "content": "Do not print a newline after formatted refs where the format expands\nto the empty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --column[=<options>]  --no-column"}, {"role": "assistant", "content": "Display branch listing in columns. See configuration variable column.branch for option syntax. --column and --no-column without options are equivalent to always and never respectively. This option is only applicable in non-verbose mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -r  --remotes"}, {"role": "assistant", "content": "List or delete (if used with -d) the remote-tracking branches.\nCombine with --list to match the optional pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -a  --all"}, {"role": "assistant", "content": "List both remote-tracking branches and local branches.\nCombine with --list to match optional pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -l  --list"}, {"role": "assistant", "content": "List branches.  With optional <pattern>... , e.g. git\nbranch --list 'maint-*' , list only the branches that match\nthe pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --show-current"}, {"role": "assistant", "content": "Print the name of the current branch. In detached HEAD state,\nnothing is printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -v  -vv  --verbose"}, {"role": "assistant", "content": "When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe path of the linked worktree (if any) and the name of the upstream\nbranch, as well (see also git remote show <remote> ).  Note that the\ncurrent worktree’s HEAD will not have its path printed (it will always\nbe your current directory)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -q  --quiet"}, {"role": "assistant", "content": "Be more quiet when creating or deleting a branch, suppressing\nnon-error messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --abbrev=<n>"}, {"role": "assistant", "content": "In the verbose listing that show the commit object name,\nshow the shortest prefix that is at least <n> hexdigits\nlong that uniquely refers the object.\nThe default value is 7 and can be overridden by the core.abbrev config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-abbrev"}, {"role": "assistant", "content": "Display the full sha1s in the output listing rather than abbreviating them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -t  --track[=(direct|inherit)]"}, {"role": "assistant", "content": "When creating a new branch, set up branch.<name>.remote and branch.<name>.merge configuration entries to set \"upstream\" tracking\nconfiguration for the new branch. This\nconfiguration will tell git to show the relationship between the\ntwo branches in git status and git branch -v . Furthermore,\nit directs git pull without arguments to pull from the\nupstream when the new branch is checked out. The exact upstream branch is chosen depending on the optional argument: -t , --track , or --track=direct means to use the start-point branch\nitself as the upstream; --track=inherit means to copy the upstream\nconfiguration of the start-point branch. The branch.autoSetupMerge configuration variable specifies how git switch , git checkout and git branch should behave when neither --track nor --no-track are specified: The default option, true , behaves as though --track=direct were given whenever the start-point is a remote-tracking branch. false behaves as if --no-track were given. always behaves as though --track=direct were given. inherit behaves as though --track=inherit were given. simple behaves as though --track=direct were given only when\nthe start-point is a remote-tracking branch and the new branch has the same\nname as the remote branch. See git-pull and git-config for additional discussion on\nhow the branch.<name>.remote and branch.<name>.merge options are used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-track"}, {"role": "assistant", "content": "Do not set up \"upstream\" configuration, even if the\nbranch.autoSetupMerge configuration variable is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --recurse-submodules"}, {"role": "assistant", "content": "THIS OPTION IS EXPERIMENTAL! Causes the current command to\nrecurse into submodules if submodule.propagateBranches is\nenabled. See submodule.propagateBranches in git-config . Currently, only branch creation is\nsupported. When used in branch creation, a new branch <branchname> will be created\nin the superproject and all of the submodules in the superproject’s\n<start-point>. In submodules, the branch will point to the submodule\ncommit in the superproject’s <start-point> but the branch’s tracking\ninformation will be set up based on the submodule’s branches and remotes\ne.g. git branch --recurse-submodules topic origin/main will create the\nsubmodule branch \"topic\" that points to the submodule commit in the\nsuperproject’s \"origin/main\", but tracks the submodule’s \"origin/main\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --set-upstream"}, {"role": "assistant", "content": "As this option had confusing syntax, it is no longer supported.\nPlease use --track or --set-upstream-to instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -u <upstream>  --set-upstream-to=<upstream>"}, {"role": "assistant", "content": "Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --unset-upstream"}, {"role": "assistant", "content": "Remove the upstream information for <branchname>. If no branch\nis specified it defaults to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --edit-description"}, {"role": "assistant", "content": "Open an editor and edit the text to explain what the branch is\nfor, to be used by various other commands (e.g. format-patch , request-pull , and merge (if enabled)). Multi-line explanations\nmay be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --contains [<commit>]"}, {"role": "assistant", "content": "Only list branches which contain the specified commit (HEAD\nif not specified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-contains [<commit>]"}, {"role": "assistant", "content": "Only list branches which don’t contain the specified commit\n(HEAD if not specified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --merged [<commit>]"}, {"role": "assistant", "content": "Only list branches whose tips are reachable from the\nspecified commit (HEAD if not specified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --no-merged [<commit>]"}, {"role": "assistant", "content": "Only list branches whose tips are not reachable from the\nspecified commit (HEAD if not specified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <branchname>"}, {"role": "assistant", "content": "The name of the branch to create or delete.\nThe new branch name must pass all checks defined by git-check-ref-format .  Some of these checks\nmay restrict the characters allowed in a branch name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <start-point>"}, {"role": "assistant", "content": "The new branch head will point to this commit.  It may be\ngiven as a branch name, a commit-id, or a tag.  If this\noption is omitted, the current HEAD will be used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <oldbranch>"}, {"role": "assistant", "content": "The name of an existing branch.  If this option is omitted,\nthe name of the current branch will be used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  <newbranch>"}, {"role": "assistant", "content": "The new name for an existing branch. The same restrictions as for\n<branchname> apply."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --sort=<key>"}, {"role": "assistant", "content": "Sort based on the key given. Prefix - to sort in descending\norder of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. The keys supported are the same as those in git\nfor-each-ref . Sort order defaults to the value configured for the branch.sort variable if it exists, or to sorting based on the\nfull refname (including refs/... prefix). This lists\ndetached HEAD (if present) first, then local branches and\nfinally remote-tracking branches. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --points-at <object>"}, {"role": "assistant", "content": "Only list branches of the given object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  --format <format>"}, {"role": "assistant", "content": "A string that interpolates %(fieldname) from a branch ref being shown\nand the object it points at.  The format is the same as\nthat of git-for-each-ref ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.autoSetupMerge"}, {"role": "assistant", "content": "Tells git branch , git switch and git checkout to set up new branches\nso that git-pull will appropriately merge from the\nstarting point branch. Note that even if this option is not set,\nthis behavior can be chosen per-branch using the --track and --no-track options. The valid settings are: false — no\nautomatic setup is done; true — automatic setup is done when the\nstarting point is a remote-tracking branch; always — automatic setup is done when the starting point is either a\nlocal branch or remote-tracking branch; inherit — if the starting point\nhas a tracking configuration, it is copied to the new\nbranch; simple — automatic setup is done only when the starting point\nis a remote-tracking branch and the new branch has the same name as the\nremote branch. This option defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.autoSetupRebase"}, {"role": "assistant", "content": "When a new branch is created with git branch , git switch or git checkout that tracks another branch, this variable tells Git to set\nup pull to rebase instead of merge (see \"branch.<name>.rebase\").\nWhen never , rebase is never automatically set to true.\nWhen local , rebase is set to true for tracked branches of\nother local branches.\nWhen remote , rebase is set to true for tracked branches of\nremote-tracking branches.\nWhen always , rebase will be set to true for all tracking\nbranches.\nSee \"branch.autoSetupMerge\" for details on how to set up a\nbranch to track another branch.\nThis option defaults to never."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.sort"}, {"role": "assistant", "content": "This variable controls the sort ordering of branches when displayed by git-branch . Without the \"--sort=<value>\" option provided, the\nvalue of this variable will be used as the default.\nSee git-for-each-ref field names for valid values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.remote"}, {"role": "assistant", "content": "When on branch <name>, it tells git fetch and git push which remote to fetch from or push to.  The remote to push to\nmay be overridden with remote.pushDefault (for all branches).\nThe remote to push to, for the current branch, may be further\noverridden by branch.<name>.pushRemote .  If no remote is\nconfigured, or if you are not on any branch and there is more than\none remote defined in the repository, it defaults to origin for\nfetching and remote.pushDefault for pushing.\nAdditionally, . (a period) is the current local repository\n(a dot-repository), see branch.<name>.merge 's final note below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.pushRemote"}, {"role": "assistant", "content": "When on branch <name>, it overrides branch.<name>.remote for\npushing.  It also overrides remote.pushDefault for pushing\nfrom branch <name>.  When you pull from one place (e.g. your\nupstream) and push to another place (e.g. your own publishing\nrepository), you would want to set remote.pushDefault to\nspecify the remote to push to for all branches, and use this\noption to override it for a specific branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.merge"}, {"role": "assistant", "content": "Defines, together with branch.<name>.remote, the upstream branch\nfor the given branch. It tells git fetch / git pull / git rebase which\nbranch to merge and can also affect git push (see push.default).\nWhen in branch <name>, it tells git fetch the default\nrefspec to be marked for merging in FETCH_HEAD. The value is\nhandled like the remote part of a refspec, and must match a\nref which is fetched from the remote given by\n\"branch.<name>.remote\".\nThe merge information is used by git pull (which first calls git fetch ) to lookup the default branch for merging. Without\nthis option, git pull defaults to merge the first refspec fetched.\nSpecify multiple values to get an octopus merge.\nIf you wish to setup git pull so that it merges into <name> from\nanother branch in the local repository, you can point\nbranch.<name>.merge to the desired branch, and use the relative path\nsetting . (a period) for branch.<name>.remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.mergeOptions"}, {"role": "assistant", "content": "Sets default options for merging into branch <name>. The syntax and\nsupported options are the same as those of git-merge , but\noption values containing whitespace characters are currently not\nsupported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.rebase"}, {"role": "assistant", "content": "When true, rebase the branch <name> on top of the fetched branch,\ninstead of merging the default branch from the default remote when\n\"git pull\" is run. See \"pull.rebase\" for doing this in a non\nbranch-specific manner. When merges (or just m ), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase for details). When the value is interactive (or just i ), the rebase is run in interactive\nmode. NOTE : this is a possibly dangerous operation; do not use\nit unless you understand the implications (see git-rebase for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.<name>.description"}, {"role": "assistant", "content": "Branch description, can be edited with git branch --edit-description . Branch description is\nautomatically added to the format-patch cover letter or\nrequest-pull summary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  Start development from a known tag"}, {"role": "assistant", "content": "$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6\n$ cd my2.6\n$ git branch my2.6.14 v2.6.14 (1) $ git switch my2.6.14 This step and the next one could be combined into a single step with\n\"checkout -b my2.6.14 v2.6.14\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  Delete an unneeded branch"}, {"role": "assistant", "content": "$ git clone git://git.kernel.org/.../git.git my.git\n$ cd my.git\n$ git branch -d -r origin/todo origin/html origin/man (1) $ git branch -D test (2) Delete the remote-tracking branches \"todo\", \"html\" and \"man\". The next fetch or pull will create them again unless you configure them not to.\nSee git-fetch . Delete the \"test\" branch even if the \"master\" branch (or whichever branch\nis currently checked out) does not have all commits from the test branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  Listing branches from a specific remote"}, {"role": "assistant", "content": "$ git branch -r -l '<remote>/<pattern>' (1) $ git for-each-ref 'refs/remotes/<remote>/<pattern>' (2) Using -a would conflate <remote> with any local branches you happen to\nhave been prefixed with the same <remote> pattern. for-each-ref can take a wide range of options. See git-for-each-ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches"}, {"role": "assistant", "content": "NOTES If you are creating a branch that you want to switch to immediately,\nit is easier to use the \"git switch\" command with its -c option to\ndo the same thing with a single command. The options --contains , --no-contains , --merged and --no-merged serve four related but different purposes: --contains <commit> is used to find all branches which will need\nspecial attention if <commit> were to be rebased or amended, since those\nbranches contain the specified <commit>. --no-contains <commit> is the inverse of that, i.e. branches that don’t\ncontain the specified <commit>. --merged is used to find all branches which can be safely deleted,\nsince those branches are fully contained by HEAD. --no-merged is used to find branches which are candidates for merging\ninto HEAD, since those branches are not fully contained by HEAD. When combining multiple --contains and --no-contains filters, only\nreferences that contain at least one of the --contains commits and\ncontain none of the --no-contains commits are shown. When combining multiple --merged and --no-merged filters, only\nreferences that are reachable from at least one of the --merged commits and from none of the --no-merged commits are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files"}, {"role": "assistant", "content": "NAME git-checkout - Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files"}, {"role": "assistant", "content": "SYNOPSIS git checkout [-q] [-f] [-m] [<branch>] git checkout [-q] [-f] [-m] --detach [<branch>] git checkout [-q] [-f] [-m] [--detach] <commit> git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new-branch>] [<start-point>] git checkout [-f] <tree-ish> [--] <pathspec>…​ git checkout [-f] <tree-ish> --pathspec-from-file=<file> [--pathspec-file-nul] git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [--] <pathspec>…​ git checkout [-f|--ours|--theirs|-m|--conflict=<style>] --pathspec-from-file=<file> [--pathspec-file-nul] git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout [<branch>]"}, {"role": "assistant", "content": "To prepare for working on <branch> , switch to it by updating\nthe index and the files in the working tree, and by pointing HEAD at the branch. Local modifications to the files in the\nworking tree are kept, so that they can be committed to the <branch> . If <branch> is not found but there does exist a tracking branch in\nexactly one remote (call it <remote> ) with a matching name and --no-guess is not specified, treat as equivalent to $ git checkout -b <branch> --track <remote>/<branch> You could omit <branch> , in which case the command degenerates to\n\"check out the current branch\", which is a glorified no-op with\nrather expensive side-effects to show only the tracking information,\nif it exists, for the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout -b|-B <new-branch> [<start-point>]"}, {"role": "assistant", "content": "Specifying -b causes a new branch to be created as if git-branch were called and then checked out.  In\nthis case you can use the --track or --no-track options,\nwhich will be passed to git branch .  As a convenience, --track without -b implies branch creation; see the\ndescription of --track below. If -B is given, <new-branch> is created if it doesn’t exist; otherwise, it\nis reset. This is the transactional equivalent of $ git branch -f <branch> [<start-point>]\n$ git checkout <branch> that is to say, the branch is not reset/created unless \"git checkout\" is\nsuccessful (e.g., when the branch is in use in another worktree, not\njust the current branch stays the same, but the branch is not reset to\nthe start-point, either)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout --detach [<branch>]  git checkout [--detach] <commit>"}, {"role": "assistant", "content": "Prepare to work on top of <commit> , by detaching HEAD at it\n(see \"DETACHED HEAD\" section), and updating the index and the\nfiles in the working tree.  Local modifications to the files\nin the working tree are kept, so that the resulting working\ntree will be the state recorded in the commit plus the local\nmodifications. When the <commit> argument is a branch name, the --detach option can\nbe used to detach HEAD at the tip of the branch ( git checkout\n<branch> would check out that branch without detaching HEAD ). Omitting <branch> detaches HEAD at the tip of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>…​  git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]"}, {"role": "assistant", "content": "Overwrite the contents of the files that match the pathspec.\nWhen the <tree-ish> (most often a commit) is not given,\noverwrite working tree with the contents in the index.\nWhen the <tree-ish> is given, overwrite both the index and\nthe working tree with the contents at the <tree-ish> . The index may contain unmerged entries because of a previous failed merge.\nBy default, if you try to check out such an entry from the index, the\ncheckout operation will fail and nothing will be checked out.\nUsing -f will ignore these unmerged entries.  The contents from a\nspecific side of the merge can be checked out of the index by\nusing --ours or --theirs .  With -m , changes made to the working tree\nfile can be discarded to re-create the original conflicted merge result."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>…​]"}, {"role": "assistant", "content": "This is similar to the previous mode, but lets you use the\ninteractive interface to show the \"diff\" output and choose which\nhunks to use in the result.  See below for the description of --patch option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -q  --quiet"}, {"role": "assistant", "content": "Quiet, suppress feedback messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -f  --force"}, {"role": "assistant", "content": "When switching branches, proceed even if the index or the\nworking tree differs from HEAD , and even if there are untracked\nfiles in the way.  This is used to throw away local changes and\nany untracked files or directories that are in the way. When checking out paths from the index, do not fail upon unmerged\nentries; instead, unmerged entries are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --ours  --theirs"}, {"role": "assistant", "content": "When checking out paths from the index, check out stage #2\n( ours ) or #3 ( theirs ) for unmerged paths. Note that during git rebase and git pull --rebase , ours and theirs may appear swapped; --ours gives the version from the\nbranch the changes are rebased onto, while --theirs gives the\nversion from the branch that holds your work that is being rebased. This is because rebase is used in a workflow that treats the\nhistory at the remote as the shared canonical one, and treats the\nwork done on the branch you are rebasing as the third-party work to\nbe integrated, and you are temporarily assuming the role of the\nkeeper of the canonical history during the rebase.  As the keeper of\nthe canonical history, you need to view the history from the remote\nas ours (i.e. \"our shared canonical history\"), while what you did\non your side branch as theirs (i.e. \"one contributor’s work on top\nof it\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -b <new-branch>"}, {"role": "assistant", "content": "Create a new branch named <new-branch> , start it at <start-point> , and check the resulting branch out;\nsee git-branch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -B <new-branch>"}, {"role": "assistant", "content": "Creates the branch <new-branch> , start it at <start-point> ;\nif it already exists, then reset it to <start-point> . And then\ncheck the resulting branch out.  This is equivalent to running\n\"git branch\" with \"-f\" followed by \"git checkout\" of that branch;\nsee git-branch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -t  --track[=(direct|inherit)]"}, {"role": "assistant", "content": "When creating a new branch, set up \"upstream\" configuration. See\n\"--track\" in git-branch for details. If no -b option is given, the name of the new branch will be\nderived from the remote-tracking branch, by looking at the local part of\nthe refspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".\nThis would tell us to use hack as the local branch when branching\noff of origin/hack (or remotes/origin/hack , or even refs/remotes/origin/hack ).  If the given name has no slash, or the above\nguessing results in an empty name, the guessing is aborted.  You can\nexplicitly give a name with -b in such a case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --no-track"}, {"role": "assistant", "content": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --guess  --no-guess"}, {"role": "assistant", "content": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote> ) with a\nmatching name, treat as equivalent to $ git checkout -b <branch> --track <remote>/<branch> If the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to\ne.g. checkout.defaultRemote=origin to always checkout remote\nbranches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config . --guess is the default behavior. Use --no-guess to disable it. The default behavior can be set via the checkout.guess configuration\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -l"}, {"role": "assistant", "content": "Create the new branch’s reflog; see git-branch for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -d  --detach"}, {"role": "assistant", "content": "Rather than checking out a branch to work on it, check out a\ncommit for inspection and discardable experiments.\nThis is the default behavior of git checkout <commit> when <commit> is not a branch name.  See the \"DETACHED HEAD\" section\nbelow for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --orphan <new-branch>"}, {"role": "assistant", "content": "Create a new unborn branch, named <new-branch> , started from <start-point> and switch to it.  The first commit made on this\nnew branch will have no parents and it will be the root of a new\nhistory totally disconnected from all the other branches and\ncommits. The index and the working tree are adjusted as if you had previously run git checkout <start-point> .  This allows you to start a new history\nthat records a set of paths similar to <start-point> by easily running git commit -a to make the root commit. This can be useful when you want to publish the tree from a commit\nwithout exposing its full history. You might want to do this to publish\nan open source branch of a project whose current tree is \"clean\", but\nwhose full history contains proprietary or otherwise encumbered bits of\ncode. If you want to start a disconnected history that records a set of paths\nthat is totally different from the one of <start-point> , then you should\nclear the index and the working tree right after creating the orphan\nbranch by running git rm -rf . from the top level of the working tree.\nAfterwards you will be ready to prepare your new files, repopulating the\nworking tree, by copying them from elsewhere, extracting a tarball, etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --ignore-skip-worktree-bits"}, {"role": "assistant", "content": "In sparse checkout mode, git checkout -- <paths> would\nupdate only entries matched by <paths> and sparse patterns\nin $GIT_DIR/info/sparse-checkout . This option ignores\nthe sparse patterns and adds back any files in <paths> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -m  --merge"}, {"role": "assistant", "content": "When switching branches,\nif you have local modifications to one or more files that\nare different between the current branch and the branch to\nwhich you are switching, the command refuses to switch\nbranches in order to preserve your modifications in context.\nHowever, with this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch\nis done, and you will be on the new branch. When a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path). When checking out paths from the index, this option lets you recreate\nthe conflicted merge in the specified paths.  This option cannot be\nused when checking out paths from a tree-ish. When switching branches with --merge , staged changes may be lost."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --conflict=<style>"}, {"role": "assistant", "content": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the merge.conflictStyle configuration variable.  Possible values are\n\"merge\" (default), \"diff3\", and \"zdiff3\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  -p  --patch"}, {"role": "assistant", "content": "Interactively select hunks in the difference between the <tree-ish> (or the index, if unspecified) and the working\ntree.  The chosen hunks are then applied in reverse to the\nworking tree (and if a <tree-ish> was specified, the index). This means that you can use git checkout -p to selectively discard\nedits from your current working tree. See the “Interactive Mode”\nsection of git-add to learn how to operate the --patch mode. Note that this option uses the no overlay mode by default (see also --overlay ), and currently doesn’t support overlay mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --ignore-other-worktrees"}, {"role": "assistant", "content": "git checkout refuses when the wanted ref is already checked\nout by another worktree. This option makes it check the ref\nout anyway. In other words, the ref can be held by more than one\nworktree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --overwrite-ignore  --no-overwrite-ignore"}, {"role": "assistant", "content": "Silently overwrite ignored files when switching branches. This\nis the default behavior. Use --no-overwrite-ignore to abort\nthe operation when the new branch contains ignored files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --recurse-submodules  --no-recurse-submodules"}, {"role": "assistant", "content": "Using --recurse-submodules will update the content of all active\nsubmodules according to the commit recorded in the superproject. If\nlocal modifications in a submodule would be overwritten the checkout\nwill fail unless -f is used. If nothing (or --no-recurse-submodules )\nis used, submodules working trees will not be updated.\nJust like git-submodule , this will detach HEAD of the\nsubmodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --overlay  --no-overlay"}, {"role": "assistant", "content": "In the default overlay mode, git checkout never\nremoves files from the index or the working tree.  When\nspecifying --no-overlay , files that appear in the index and\nworking tree, but not in <tree-ish> are removed, to make them\nmatch <tree-ish> exactly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <branch>"}, {"role": "assistant", "content": "Branch to checkout; if it refers to a branch (i.e., a name that,\nwhen prepended with \"refs/heads/\", is a valid ref), then that\nbranch is checked out. Otherwise, if it refers to a valid\ncommit, your HEAD becomes \"detached\" and you are no longer on\nany branch (see below for details). You can use the @{-N} syntax to refer to the N-th last\nbranch/commit checked out using \"git checkout\" operation. You may\nalso specify - which is synonymous to @{-1} . As a special case, you may use A...B as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <new-branch>"}, {"role": "assistant", "content": "Name for the new branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <start-point>"}, {"role": "assistant", "content": "The name of a commit at which to start the new branch; see git-branch for details. Defaults to HEAD . As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <tree-ish>"}, {"role": "assistant", "content": "Tree to checkout from (when paths are given). If not specified,\nthe index will be used. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <pathspec>…​"}, {"role": "assistant", "content": "Limits the paths affected by the operation. For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files"}, {"role": "assistant", "content": "DETACHED HEAD HEAD normally refers to a named branch (e.g. master ). Meanwhile, each\nbranch refers to a specific commit. Let’s look at a repo with three\ncommits, one of them tagged, and with branch master checked out: HEAD (refers to branch 'master')\n            |\n            v\na---b---c  branch 'master' (refers to commit 'c')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') When a commit is created in this state, the branch is updated to refer to\nthe new commit. Specifically, git commit creates a new commit d , whose\nparent is commit c , and then updates branch master to refer to new\ncommit d . HEAD still refers to branch master and so indirectly now refers\nto commit d : $ edit; git add; git commit\n\n               HEAD (refers to branch 'master')\n                |\n                v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') It is sometimes useful to be able to checkout a commit that is not at\nthe tip of any named branch, or even to create a new commit that is not\nreferenced by a named branch. Let’s look at what happens when we\ncheckout commit b (here we show two ways this may be done): $ git checkout v2.0  # or\n$ git checkout master^^\n\n   HEAD (refers to commit 'b')\n    |\n    v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') Notice that regardless of which checkout command we use, HEAD now refers\ndirectly to commit b . This is known as being in detached HEAD state.\nIt means simply that HEAD refers to a specific commit, as opposed to\nreferring to a named branch. Let’s see what happens when we create a commit: $ edit; git add; git commit\n\n     HEAD (refers to commit 'e')\n      |\n      v\n      e\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') There is now a new commit e , but it is referenced only by HEAD . We can\nof course add yet another commit in this state: $ edit; git add; git commit\n\n\t HEAD (refers to commit 'f')\n\t  |\n\t  v\n      e---f\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') In fact, we can perform all the normal Git operations. But, let’s look\nat what happens when we then checkout master : $ git checkout master\n\n               HEAD (refers to branch 'master')\n      e---f     |\n     /          v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b') It is important to realize that at this point nothing refers to commit f . Eventually commit f (and by extension commit e ) will be deleted\nby the routine Git garbage collection process, unless we create a reference\nbefore that happens. If we have not yet moved away from commit f ,\nany of these will create a reference to it: $ git checkout -b foo  # or \"git switch -c foo\" (1) $ git branch foo (2) $ git tag foo (3) creates a new branch foo , which refers to commit f , and then\nupdates HEAD to refer to branch foo . In other words, we’ll no longer\nbe in detached HEAD state after this command. similarly creates a new branch foo , which refers to commit f ,\nbut leaves HEAD detached. creates a new tag foo , which refers to commit f ,\nleaving HEAD detached. If we have moved away from commit f , then we must first recover its object\nname (typically by using git reflog), and then we can create a reference to\nit. For example, to see the last two commits to which HEAD referred, we\ncan use either of these commands: $ git reflog -2 HEAD # or\n$ git log -g -2 HEAD"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files"}, {"role": "assistant", "content": "ARGUMENT DISAMBIGUATION When there is only one argument given and it is not -- (e.g. git\ncheckout abc ), and when the argument is both a valid <tree-ish> (e.g. a branch abc exists) and a valid <pathspec> (e.g. a file\nor a directory whose name is \"abc\" exists), Git would usually ask\nyou to disambiguate.  Because checking out a branch is so common an\noperation, however, git checkout abc takes \"abc\" as a <tree-ish> in such a situation.  Use git checkout -- <pathspec> if you want\nto checkout these paths out of the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files"}, {"role": "assistant", "content": "EXAMPLES 1. Paths The following sequence checks out the master branch, reverts\nthe Makefile to two revisions back, deletes hello.c by\nmistake, and gets it back from the index. $ git checkout master (1) $ git checkout master~2 Makefile (2) $ rm -f hello.c\n$ git checkout hello.c (3) switch branch take a file out of another commit restore hello.c from the index If you want to check out all C source files out of the index,\nyou can say $ git checkout -- '*.c' Note the quotes around *.c .  The file hello.c will also be\nchecked out, even though it is no longer in the working tree,\nbecause the file globbing is used to match entries in the index\n(not in the working tree by the shell). If you have an unfortunate branch that is named hello.c , this\nstep would be confused as an instruction to switch to that branch.\nYou should instead write: $ git checkout -- hello.c 2. Merge After working in the wrong branch, switching to the correct\nbranch would be done using: $ git checkout mytopic However, your \"wrong\" branch and correct mytopic branch may\ndiffer in files that you have modified locally, in which case\nthe above checkout would fail like this: $ git checkout mytopic\nerror: You have local changes to 'frotz'; not switching branches. You can give the -m flag to the command, which would try a\nthree-way merge: $ git checkout -m mytopic\nAuto-merging frotz After this three-way merge, the local modifications are not registered in your index file, so git diff would show you what\nchanges you made since the tip of the new branch. 3. Merge conflict When a merge conflict happens during switching branches with\nthe -m option, you would see something like this: $ git checkout -m mytopic\nAuto-merging frotz\nERROR: Merge conflict in frotz\nfatal: merge program failed At this point, git diff shows the changes cleanly merged as in\nthe previous example, as well as the changes in the conflicted\nfiles.  Edit and resolve the conflict and mark it resolved with git add as usual: $ edit frotz\n$ git add frotz"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  checkout.defaultRemote"}, {"role": "assistant", "content": "When you run git checkout <something> or git switch <something> and only have one\nremote, it may implicitly fall back on checking out and\ntracking e.g. origin/<something> . This stops working as soon\nas you have more than one remote with a <something> reference. This setting allows for setting the name of a\npreferred remote that should always win when it comes to\ndisambiguation. The typical use-case is to set this to origin . Currently this is used by git-switch and git-checkout when git checkout <something> or git switch <something> will checkout the <something> branch on another remote,\nand by git-worktree when git worktree add refers to a\nremote branch. This setting might be used for other checkout-like\ncommands or functionality in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  checkout.guess"}, {"role": "assistant", "content": "Provides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch and git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  checkout.workers"}, {"role": "assistant", "content": "The number of parallel workers to use when updating the working tree.\nThe default is one, i.e. sequential execution. If set to a value less\nthan one, Git will use as many workers as the number of logical cores\navailable. This setting and checkout.thresholdForParallelism affect\nall commands that perform checkout. E.g. checkout, clone, reset,\nsparse-checkout, etc. Note: Parallel checkout usually delivers better performance for repositories\nlocated on SSDs or over NFS. For repositories on spinning disks and/or machines\nwith a small number of cores, the default sequential checkout often performs\nbetter. The size and compression level of a repository might also influence how\nwell the parallel version performs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  checkout.thresholdForParallelism"}, {"role": "assistant", "content": "When running parallel checkout with a small number of files, the cost\nof subprocess spawning and inter-process communication might outweigh\nthe parallelization gains. This setting allows you to define the minimum\nnumber of files for which parallel checkout should be attempted. The\ndefault is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches"}, {"role": "assistant", "content": "NAME git-switch - Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches"}, {"role": "assistant", "content": "SYNOPSIS git switch [<options>] [--no-guess] <branch> git switch [<options>] --detach [<start-point>] git switch [<options>] (-c|-C) <new-branch> [<start-point>] git switch [<options>] --orphan <new-branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches"}, {"role": "assistant", "content": "DESCRIPTION Switch to a specified branch. The working tree and the index are\nupdated to match the branch. All new commits will be added to the tip\nof this branch. Optionally a new branch could be created with either -c , -C ,\nautomatically from a remote branch of same name (see --guess ), or\ndetach the working tree from any branch with --detach , along with\nswitching. Switching branches does not require a clean index and working tree\n(i.e. no differences compared to HEAD ). The operation is aborted\nhowever if the operation leads to loss of local changes, unless told\notherwise with --discard-changes or --merge . THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  <branch>"}, {"role": "assistant", "content": "Branch to switch to."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  <new-branch>"}, {"role": "assistant", "content": "Name for the new branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  <start-point>"}, {"role": "assistant", "content": "The starting point for the new branch. Specifying a <start-point> allows you to create a branch based on some\nother point in history than where HEAD currently points. (Or,\nin the case of --detach , allows you to inspect and detach\nfrom some other point.) You can use the @{-N} syntax to refer to the N-th last\nbranch/commit switched to using \"git switch\" or \"git checkout\"\noperation. You may also specify - which is synonymous to @{-1} .\nThis is often used to switch quickly between two branches, or to undo\na branch switch by mistake. As a special case, you may use A...B as a shortcut for the merge\nbase of A and B if there is exactly one merge base. You can leave\nout at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -c <new-branch>  --create <new-branch>"}, {"role": "assistant", "content": "Create a new branch named <new-branch> starting at <start-point> before switching to the branch. This is the\ntransactional equivalent of $ git branch <new-branch>\n$ git switch <new-branch> that is to say, the branch is not reset/created unless \"git switch\" is\nsuccessful (e.g., when the branch is in use in another worktree, not\njust the current branch stays the same, but the branch is not reset to\nthe start-point, either)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -C <new-branch>  --force-create <new-branch>"}, {"role": "assistant", "content": "Similar to --create except that if <new-branch> already\nexists, it will be reset to <start-point> . This is a\nconvenient shortcut for: $ git branch -f <new-branch>\n$ git switch <new-branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -d  --detach"}, {"role": "assistant", "content": "Switch to a commit for inspection and discardable\nexperiments. See the \"DETACHED HEAD\" section in git-checkout for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --guess  --no-guess"}, {"role": "assistant", "content": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote> ) with a\nmatching name, treat as equivalent to $ git switch -c <branch> --track <remote>/<branch> If the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to e.g. checkout.defaultRemote=origin to always checkout remote branches from there if <branch> is\nambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config . --guess is the default behavior. Use --no-guess to disable it. The default behavior can be set via the checkout.guess configuration\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -f  --force"}, {"role": "assistant", "content": "An alias for --discard-changes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --discard-changes"}, {"role": "assistant", "content": "Proceed even if the index or the working tree differs from HEAD . Both the index and working tree are restored to match\nthe switching target. If --recurse-submodules is specified,\nsubmodule content is also restored to match the switching\ntarget. This is used to throw away local changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -m  --merge"}, {"role": "assistant", "content": "If you have local modifications to one or more files that are\ndifferent between the current branch and the branch to which\nyou are switching, the command refuses to switch branches in\norder to preserve your modifications in context.  However,\nwith this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch is\ndone, and you will be on the new branch. When a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --conflict=<style>"}, {"role": "assistant", "content": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the merge.conflictStyle configuration variable.  Possible values are\n\"merge\" (default), \"diff3\", and \"zdiff3\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -q  --quiet"}, {"role": "assistant", "content": "Quiet, suppress feedback messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -t  --track [direct|inherit]"}, {"role": "assistant", "content": "When creating a new branch, set up \"upstream\" configuration. -c is implied. See --track in git-branch for\ndetails. If no -c option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use hack as\nthe local branch when branching off of origin/hack (or remotes/origin/hack , or even refs/remotes/origin/hack ).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with -c in such a case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --no-track"}, {"role": "assistant", "content": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --orphan <new-branch>"}, {"role": "assistant", "content": "Create a new unborn branch, named <new-branch> . All\ntracked files are removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --ignore-other-worktrees"}, {"role": "assistant", "content": "git switch refuses when the wanted ref is already\nchecked out by another worktree. This option makes it check\nthe ref out anyway. In other words, the ref can be held by\nmore than one worktree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --recurse-submodules  --no-recurse-submodules"}, {"role": "assistant", "content": "Using --recurse-submodules will update the content of all\nactive submodules according to the commit recorded in the\nsuperproject. If nothing (or --no-recurse-submodules ) is\nused, submodules working trees will not be updated. Just\nlike git-submodule , this will detach HEAD of the\nsubmodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches"}, {"role": "assistant", "content": "EXAMPLES The following command switches to the \"master\" branch: $ git switch master After working in the wrong branch, switching to the correct branch\nwould be done using: $ git switch mytopic However, your \"wrong\" branch and correct \"mytopic\" branch may differ\nin files that you have modified locally, in which case the above\nswitch would fail like this: $ git switch mytopic\nerror: You have local changes to 'frotz'; not switching branches. You can give the -m flag to the command, which would try a three-way\nmerge: $ git switch -m mytopic\nAuto-merging frotz After this three-way merge, the local modifications are not registered in your index file, so git diff would show you what\nchanges you made since the tip of the new branch. To switch back to the previous branch before we switched to mytopic\n(i.e. \"master\" branch): $ git switch - You can grow a new branch from any commit. For example, switch to\n\"HEAD~3\" and create branch \"fixup\": $ git switch -c fixup HEAD~3\nSwitched to a new branch 'fixup' If you want to start a new branch from a remote branch of the same\nname: $ git switch new-topic\nBranch 'new-topic' set up to track remote branch 'new-topic' from 'origin'\nSwitched to a new branch 'new-topic' To check out commit HEAD~3 for temporary inspection or experiment\nwithout creating a new branch: $ git switch --detach HEAD~3\nHEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits' If it turns out whatever you have done is worth keeping, you can\nalways create a new name for it (without switching away): $ git switch -c good-surprises"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  checkout.defaultRemote"}, {"role": "assistant", "content": "When you run git checkout <something> or git switch <something> and only have one\nremote, it may implicitly fall back on checking out and\ntracking e.g. origin/<something> . This stops working as soon\nas you have more than one remote with a <something> reference. This setting allows for setting the name of a\npreferred remote that should always win when it comes to\ndisambiguation. The typical use-case is to set this to origin . Currently this is used by git-switch and git-checkout when git checkout <something> or git switch <something> will checkout the <something> branch on another remote,\nand by git-worktree when git worktree add refers to a\nremote branch. This setting might be used for other checkout-like\ncommands or functionality in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  checkout.guess"}, {"role": "assistant", "content": "Provides the default value for the --guess or --no-guess option in git checkout and git switch . See git-switch and git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  checkout.workers"}, {"role": "assistant", "content": "The number of parallel workers to use when updating the working tree.\nThe default is one, i.e. sequential execution. If set to a value less\nthan one, Git will use as many workers as the number of logical cores\navailable. This setting and checkout.thresholdForParallelism affect\nall commands that perform checkout. E.g. checkout, clone, reset,\nsparse-checkout, etc. Note: Parallel checkout usually delivers better performance for repositories\nlocated on SSDs or over NFS. For repositories on spinning disks and/or machines\nwith a small number of cores, the default sequential checkout often performs\nbetter. The size and compression level of a repository might also influence how\nwell the parallel version performs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  checkout.thresholdForParallelism"}, {"role": "assistant", "content": "When running parallel checkout with a small number of files, the cost\nof subprocess spawning and inter-process communication might outweigh\nthe parallelization gains. This setting allows you to define the minimum\nnumber of files for which parallel checkout should be attempted. The\ndefault is 100."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "NAME git-merge - Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "SYNOPSIS git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n\t[--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n\t[--[no-]allow-unrelated-histories]\n\t[--[no-]rerere-autoupdate] [-m <msg>] [-F <file>]\n\t[--into-name <branch>] [<commit>…​] git merge (--continue | --abort | --quit)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "DESCRIPTION Incorporates changes from the named commits (since the time their\nhistories diverged from the current branch) into the current\nbranch.  This command is used by git pull to incorporate changes\nfrom another repository and can be used by hand to merge changes\nfrom one branch into another. Assume the following history exists and the current branch is master : A---B---C topic\n\t /\n    D---E---F---G master Then git merge topic will replay the changes made on the topic branch since it diverged from master (i.e., E ) until\nits current commit ( C ) on top of master , and record the result\nin a new commit along with the names of the two parent commits and\na log message from the user describing the changes. Before the operation, ORIG_HEAD is set to the tip of the current branch ( C ). A---B---C topic\n\t /         \\\n    D---E---F---G---H master A merge stops if there’s a conflict that cannot be resolved\nautomatically or if --no-commit was provided when initiating the\nmerge. At that point you can run git merge --abort or git merge\n--continue . git merge --abort will abort the merge process and try to reconstruct\nthe pre-merge state. However, if there were uncommitted changes when the\nmerge started (and especially if those changes were further modified\nafter the merge was started), git merge --abort will in some cases be\nunable to reconstruct the original (pre-merge) changes. Therefore: Warning : Running git merge with non-trivial uncommitted changes is\ndiscouraged: while possible, it may leave you in a state that is hard to\nback out of in the case of a conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --commit  --no-commit"}, {"role": "assistant", "content": "Perform the merge and commit the result. This option can\nbe used to override --no-commit. With --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing. Note that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --edit  -e  --no-edit"}, {"role": "assistant", "content": "Invoke an editor before committing successful mechanical merge to\n\tfurther edit the auto-generated merge message, so that the user\n\tcan explain and justify the merge. The --no-edit option can be\n\tused to accept the auto-generated message (this is generally\n\tdiscouraged).\nThe --edit (or -e ) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor. Older scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge . To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the merge message will be cleaned up before\ncommitting. See git-commit for more details. In addition, if\nthe <mode> is given a value of scissors , scissors will be appended\nto MERGE_MSG before being passed on to the commit machinery in the\ncase of a merge conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --ff  --no-ff  --ff-only"}, {"role": "assistant", "content": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history. --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed. With --ff , when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit. With --no-ff , create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward. With --ff-only , resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --log[=<n>]  --no-log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg . With --no-log do not list one-line descriptions from the\nactual commits being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --signoff  --no-signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See https://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project. The --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --stat  -n  --no-stat"}, {"role": "assistant", "content": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat. With -n or --no-stat do not show a diffstat at the end of the\nmerge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --squash  --no-squash"}, {"role": "assistant", "content": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD , or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus). With --no-squash perform the merge and commit the result. This\noption can be used to override --squash. With --squash, --commit is not allowed, and will fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --[no-]verify"}, {"role": "assistant", "content": "By default, the pre-merge and commit-msg hooks are run.\nWhen --no-verify is given, these are bypassed.\nSee also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead ( ort when merging a single head, octopus otherwise)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -X <option>  --strategy-option=<option>"}, {"role": "assistant", "content": "Pass merge strategy specific option through to the merge\nstrategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --verify-signatures  --no-verify-signatures"}, {"role": "assistant", "content": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --summary  --no-summary"}, {"role": "assistant", "content": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -q  --quiet"}, {"role": "assistant", "content": "Operate quietly. Implies --no-progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -v  --verbose"}, {"role": "assistant", "content": "Be verbose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --progress  --no-progress"}, {"role": "assistant", "content": "Turn progress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a terminal.\nNote that not all merge strategies may support progress\nreporting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --autostash  --no-autostash"}, {"role": "assistant", "content": "Automatically create a temporary stash entry before the operation\nbegins, record it in the ref MERGE_AUTOSTASH and apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --allow-unrelated-histories"}, {"role": "assistant", "content": "By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -m <msg>"}, {"role": "assistant", "content": "Set the commit message to be used for the merge commit (in\ncase one is created). If --log is specified, a shortlog of the commits being merged\nwill be appended to the specified message. The git fmt-merge-msg command can be\nused to give a good default for automated git merge invocations. The automated message can include the branch description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --into-name <branch>"}, {"role": "assistant", "content": "Prepare the default merge message as if merging to the branch <branch> , instead of the name of the real branch to which\nthe merge is made."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -F <file>  --file=<file>"}, {"role": "assistant", "content": "Read the commit message to be used for the merge commit (in\ncase one is created). If --log is specified, a shortlog of the commits being merged\nwill be appended to the specified message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --overwrite-ignore  --no-overwrite-ignore"}, {"role": "assistant", "content": "Silently overwrite ignored files from the merge result. This\nis the default behavior. Use --no-overwrite-ignore to abort."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --abort"}, {"role": "assistant", "content": "Abort the current conflict resolution process, and\ntry to reconstruct the pre-merge state. If an autostash entry is\npresent, apply it to the worktree. If there were uncommitted worktree changes present when the merge\nstarted, git merge --abort will in some cases be unable to\nreconstruct these changes. It is therefore recommended to always\ncommit or stash your changes before running git merge . git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present unless MERGE_AUTOSTASH is also present in\nwhich case git merge --abort applies the stash entry to the worktree\nwhereas git reset --merge will save the stashed changes in the stash\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --quit"}, {"role": "assistant", "content": "Forget about the current merge in progress. Leave the index\nand the working tree as-is. If MERGE_AUTOSTASH is present, the\nstash entry will be saved to the stash list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  --continue"}, {"role": "assistant", "content": "After a git merge stops due to conflicts you can conclude the\nmerge by running git merge --continue (see \"HOW TO RESOLVE\nCONFLICTS\" section below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  <commit>…​"}, {"role": "assistant", "content": "Commits, usually other branch heads, to merge into our branch.\nSpecifying more than one commit will create a merge with\nmore than two parents (affectionately called an Octopus merge). If no commit is given from the command line, merge the remote-tracking\nbranches that the current branch is configured to use as its upstream.\nSee also the configuration section of this manual page. When FETCH_HEAD (and no other commit) is specified, the branches\nrecorded in the .git/FETCH_HEAD file by the previous invocation\nof git fetch for merging are merged to the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "PRE-MERGE CHECKS Before applying outside changes, you should get your own work in\ngood shape and committed locally, so it will not be clobbered if\nthere are conflicts.  See also git-stash . git pull and git merge will stop without doing anything when\nlocal uncommitted changes overlap with files that git pull / git\nmerge may need to update. To avoid recording unrelated changes in the merge commit, git pull and git merge will also abort if there are any changes\nregistered in the index relative to the HEAD commit.  (Special\nnarrow exceptions to this rule may exist depending on which merge\nstrategy is in use, but generally, the index must match HEAD.) If all named commits are already ancestors of HEAD , git merge will exit early with the message \"Already up to date.\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "FAST-FORWARD MERGE Often the current branch head is an ancestor of the named commit.\nThis is the most common case especially when invoked from git\npull : you are tracking an upstream repository, you have committed\nno local changes, and now you want to update to a newer upstream\nrevision.  In this case, a new commit is not needed to store the\ncombined history; instead, the HEAD (along with the index) is\nupdated to point at the named commit, without creating an extra\nmerge commit. This behavior can be suppressed with the --no-ff option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "TRUE MERGE Except in a fast-forward merge (see above), the branches to be\nmerged must be tied together by a merge commit that has both of them\nas its parents. A merged version reconciling the changes from all branches to be\nmerged is committed, and your HEAD , index, and working tree are\nupdated to it.  It is possible to have modifications in the working\ntree as long as they do not overlap; the update will preserve them. When it is not obvious how to reconcile the changes, the following\nhappens: The HEAD pointer stays the same. The MERGE_HEAD ref is set to point to the other branch head. Paths that merged cleanly are updated both in the index file and\nin your working tree. For conflicting paths, the index file records up to three\nversions: stage 1 stores the version from the common ancestor,\nstage 2 from HEAD , and stage 3 from MERGE_HEAD (you\ncan inspect the stages with git ls-files -u ).  The working\ntree files contain the result of the merge operation; i.e. 3-way\nmerge results with familiar conflict markers <<< === >>> . A ref named AUTO_MERGE is written, pointing to a tree\ncorresponding to the current content of the working tree (including\nconflict markers for textual conflicts).  Note that this ref is only\nwritten when the ort merge strategy is used (the default). No other changes are made.  In particular, the local\nmodifications you had before you started merge will stay the\nsame and the index entries for them stay as they were,\ni.e. matching HEAD . If you tried a merge which resulted in complex conflicts and\nwant to start over, you can recover with git merge --abort ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "MERGING TAG When merging an annotated (and possibly signed) tag, Git always\ncreates a merge commit even if a fast-forward merge is possible, and\nthe commit message template is prepared with the tag message.\nAdditionally, if the tag is signed, the signature check is reported\nas a comment in the message template. See also git-tag . When you want to just integrate with the work leading to the commit\nthat happens to be tagged, e.g. synchronizing with an upstream\nrelease point, you may not want to make an unnecessary merge commit. In such a case, you can \"unwrap\" the tag yourself before feeding it\nto git merge , or pass --ff-only when you do not have any work on\nyour own. e.g. git fetch origin\ngit merge v1.2.3^0\ngit merge --ff-only v1.2.3"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "HOW CONFLICTS ARE PRESENTED During a merge, the working tree files are updated to reflect the result\nof the merge.  Among the changes made to the common ancestor’s version,\nnon-overlapping ones (that is, you changed an area of the file while the\nother side left that area intact, or vice versa) are incorporated in the\nfinal result verbatim.  When both sides made changes to the same area,\nhowever, Git cannot randomly pick one side over the other, and asks you to\nresolve it by leaving what both sides did to that area. By default, Git uses the same style as the one used by the \"merge\" program\nfrom the RCS suite to present such a conflicted hunk, like this: Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed,\nor cleanly resolved because both sides changed the same way.\n<<<<<<< yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n=======\nGit makes conflict resolution easy.\n>>>>>>> theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified. The area where a pair of conflicting changes happened is marked with markers <<<<<<< , ======= , and >>>>>>> .  The part before the ======= is typically your side, and the part afterwards is typically their side. The default format does not show what the original said in the conflicting\narea.  You cannot tell how many lines are deleted and replaced with\nBarbie’s remark on your side.  The only thing you can tell is that your\nside wants to say it is hard and you’d prefer to go shopping, while the\nother side wants to claim it is easy. An alternative style can be used by setting the merge.conflictStyle configuration variable to either \"diff3\" or \"zdiff3\".  In \"diff3\"\nstyle, the above conflict may look like this: Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed,\n<<<<<<< yours:sample.txt\nor cleanly resolved because both sides changed the same way.\nConflict resolution is hard;\nlet's go shopping.\n||||||| base:sample.txt\nor cleanly resolved because both sides changed identically.\nConflict resolution is hard.\n=======\nor cleanly resolved because both sides changed the same way.\nGit makes conflict resolution easy.\n>>>>>>> theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified. while in \"zdiff3\" style, it may look like this: Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed,\nor cleanly resolved because both sides changed the same way.\n<<<<<<< yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n||||||| base:sample.txt\nor cleanly resolved because both sides changed identically.\nConflict resolution is hard.\n=======\nGit makes conflict resolution easy.\n>>>>>>> theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified. In addition to the <<<<<<< , ======= , and >>>>>>> markers, it uses\nanother ||||||| marker that is followed by the original text.  You can\ntell that the original just stated a fact, and your side simply gave in to\nthat statement and gave up, while the other side tried to have a more\npositive attitude.  You can sometimes come up with a better resolution by\nviewing the original."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "HOW TO RESOLVE CONFLICTS After seeing a conflict, you can do two things: Decide not to merge.  The only clean-ups you need are to reset\nthe index file to the HEAD commit to reverse 2. and to clean\nup working tree changes made by 2. and 3.; git merge --abort can be used for this. Resolve the conflicts.  Git will mark the conflicts in\nthe working tree.  Edit the files into shape and git add them to the index.  Use git commit or git merge --continue to seal the deal. The latter command\nchecks whether there is a (interrupted) merge in progress\nbefore calling git commit . You can work through the conflict with a number of tools: Use a mergetool. git mergetool to launch a graphical\nmergetool which will work through the merge with you. Look at the diffs. git diff will show a three-way diff,\nhighlighting changes from both the HEAD and MERGE_HEAD versions. git diff AUTO_MERGE will show what changes you’ve\nmade so far to resolve textual conflicts. Look at the diffs from each branch. git log --merge -p <path> will show diffs first for the HEAD version and then the MERGE_HEAD version. Look at the originals. git show :1:filename shows the\ncommon ancestor, git show :2:filename shows the HEAD version, and git show :3:filename shows the MERGE_HEAD version."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "EXAMPLES Merge branches fixes and enhancements on top of\nthe current branch, making an octopus merge: $ git merge fixes enhancements Merge branch obsolete into the current branch, using ours merge strategy: $ git merge -s ours obsolete Merge branch maint into the current branch, but do not make\na new commit automatically: $ git merge --no-commit maint This can be used when you want to include further changes to the\nmerge, or want to write your own merge commit message. You should refrain from abusing this option to sneak substantial\nchanges into a merge commit.  Small fixups like bumping\nrelease/version name would be acceptable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  ort"}, {"role": "assistant", "content": "This is the default merge strategy when pulling or merging one\nbranch.  This strategy can only resolve two heads using a\n3-way merge algorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a merged\ntree of the common ancestors and uses that as the reference\ntree for the 3-way merge.  This has been reported to result in\nfewer merge conflicts without causing mismerges by tests done\non actual merge commits taken from Linux 2.6 kernel\ndevelopment history.  Additionally this strategy can detect\nand handle merges involving renames.  It does not make use of\ndetected copies.  The name for this algorithm is an acronym\n(\"Ostensibly Recursive’s Twin\") and came from the fact that it\nwas written as a replacement for the previous default\nalgorithm, recursive . The ort strategy can take the following options: ours This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it. theirs This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with. ignore-space-change ignore-all-space ignore-space-at-eol ignore-cr-at-eol Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way. renormalize This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details. no-renormalize Disables the renormalize option.  This overrides the merge.renormalize configuration variable. find-renames[=<n>] Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames . rename-threshold=<n> Deprecated synonym for find-renames=<n> . subtree[=<path>] This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  recursive"}, {"role": "assistant", "content": "This can only resolve two heads using a 3-way merge\nalgorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as\nthe reference tree for the 3-way merge.  This has been\nreported to result in fewer merge conflicts without\ncausing mismerges by tests done on actual merge commits\ntaken from Linux 2.6 kernel development history.\nAdditionally this can detect and handle merges involving\nrenames.  It does not make use of detected copies.  This was\nthe default strategy for resolving two heads from Git v0.99.9k\nuntil v2.33.0. The recursive strategy takes the same options as ort .  However,\nthere are three additional options that ort ignores (not documented\nabove) that are potentially useful with the recursive strategy: patience Deprecated synonym for diff-algorithm=patience . diff-algorithm=[patience|minimal|histogram|myers] Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting. no-renames Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  resolve"}, {"role": "assistant", "content": "This can only resolve two heads (i.e. the current branch\nand another branch you pulled from) using a 3-way merge\nalgorithm.  It tries to carefully detect criss-cross\nmerge ambiguities.  It does not handle renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  octopus"}, {"role": "assistant", "content": "This resolves cases with more than two heads, but refuses to do\na complex merge that needs manual resolution.  It is\nprimarily meant to be used for bundling topic branch\nheads together.  This is the default merge strategy when\npulling or merging more than one branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  ours"}, {"role": "assistant", "content": "This resolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches.  It is meant to\nbe used to supersede old development history of side\nbranches.  Note that this is different from the -Xours option to\nthe recursive merge strategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  subtree"}, {"role": "assistant", "content": "This is a modified ort strategy. When merging trees A and\nB, if B corresponds to a subtree of A, B is first adjusted to\nmatch the tree structure of A, instead of reading the trees at\nthe same level. This adjustment is also done to the common\nancestor tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  ours"}, {"role": "assistant", "content": "This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  theirs"}, {"role": "assistant", "content": "This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  ignore-space-change  ignore-all-space  ignore-space-at-eol  ignore-cr-at-eol"}, {"role": "assistant", "content": "Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  renormalize"}, {"role": "assistant", "content": "This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  no-renormalize"}, {"role": "assistant", "content": "Disables the renormalize option.  This overrides the merge.renormalize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  find-renames[=<n>]"}, {"role": "assistant", "content": "Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  rename-threshold=<n>"}, {"role": "assistant", "content": "Deprecated synonym for find-renames=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  subtree[=<path>]"}, {"role": "assistant", "content": "This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  patience"}, {"role": "assistant", "content": "Deprecated synonym for diff-algorithm=patience ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  diff-algorithm=[patience|minimal|histogram|myers]"}, {"role": "assistant", "content": "Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  no-renames"}, {"role": "assistant", "content": "Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  branch.<name>.mergeOptions"}, {"role": "assistant", "content": "Sets default options for merging into branch <name>. The syntax and\nsupported options are the same as those of git merge , but option\nvalues containing whitespace characters are currently not supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.conflictStyle"}, {"role": "assistant", "content": "Specify the style in which conflicted hunks are written out to\nworking tree files upon merge.  The default is \"merge\", which\nshows a <<<<<<< conflict marker, changes made by one side,\na ======= marker, changes made by the other side, and then\na >>>>>>> marker.  An alternate style, \"diff3\", adds a ||||||| marker and the original text before the ======= marker.  The\n\"merge\" style tends to produce smaller conflict regions than diff3,\nboth because of the exclusion of the original text, and because\nwhen a subset of lines match on the two sides, they are just pulled\nout of the conflict region.  Another alternate style, \"zdiff3\", is\nsimilar to diff3 but removes matching lines on the two sides from\nthe conflict region when those matching lines appear near either\nthe beginning or end of a conflict region."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.defaultToUpstream"}, {"role": "assistant", "content": "If merge is called without any commit argument, merge the upstream\nbranches configured for the current branch by using their last\nobserved values stored in their remote-tracking branches.\nThe values of the branch.<current branch>.merge that name the\nbranches at the remote named by branch.<current branch>.remote are consulted, and then they are mapped via remote.<remote>.fetch to their corresponding remote-tracking branches, and the tips of\nthese tracking branches are merged. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.ff"}, {"role": "assistant", "content": "By default, Git does not create an extra merge commit when merging\na commit that is a descendant of the current commit. Instead, the\ntip of the current branch is fast-forwarded. When set to false ,\nthis variable tells Git to create an extra merge commit in such\na case (equivalent to giving the --no-ff option from the command\nline). When set to only , only such fast-forward merges are\nallowed (equivalent to giving the --ff-only option from the\ncommand line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.verifySignatures"}, {"role": "assistant", "content": "If true, this is equivalent to the --verify-signatures command\nline option. See git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.branchdesc"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with\nthe branch description text associated with them.  Defaults\nto false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged.  Defaults to false, and\ntrue is a synonym for 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.suppressDest"}, {"role": "assistant", "content": "By adding a glob that matches the names of integration\nbranches to this multi-valued configuration variable, the\ndefault merge message computed for merges into these\nintegration branches will omit \"into <branch name>\" from\nits title. An element with an empty value can be used to clear the list\nof globs accumulated from previous configuration entries.\nWhen there is no merge.suppressDest variable defined, the\ndefault value of master is used for backward compatibility."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\nrename detection during a merge.  If not specified, defaults\nto the value of diff.renameLimit.  If neither\nmerge.renameLimit nor diff.renameLimit are specified,\ncurrently defaults to 7000.  This setting has no effect if\nrename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.renames"}, {"role": "assistant", "content": "Whether Git detects renames.  If set to \"false\", rename detection\nis disabled. If set to \"true\", basic rename detection is enabled.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.directoryRenames"}, {"role": "assistant", "content": "Whether Git detects directory renames, affecting what happens at\nmerge time to new files added to a directory on one side of\nhistory when that directory was renamed on the other side of\nhistory.  If merge.directoryRenames is set to \"false\", directory\nrename detection is disabled, meaning that such new files will be\nleft behind in the old directory.  If set to \"true\", directory\nrename detection is enabled, meaning that such new files will be\nmoved into the new directory.  If set to \"conflict\", a conflict\nwill be reported for such paths.  If merge.renames is false,\nmerge.directoryRenames is ignored and treated as false.  Defaults\nto \"conflict\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.renormalize"}, {"role": "assistant", "content": "Tell Git that canonical representation of files in the\nrepository has changed over time (e.g. earlier commits record\ntext files with CRLF line endings, but recent ones use LF line\nendings).  In such a repository, Git can convert the data\nrecorded in commits to a canonical form before performing a\nmerge to reduce unnecessary conflicts.  For more information,\nsee section \"Merging branches with differing checkin/checkout\nattributes\" in gitattributes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.stat"}, {"role": "assistant", "content": "Whether to print the diffstat between ORIG_HEAD and the merge result\nat the end of the merge.  True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run merge on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful merge might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-merge .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.tool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires\nthat a corresponding mergetool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.guitool"}, {"role": "assistant", "content": "Controls which merge tool is used by git-mergetool when the\n-g/--gui flag is specified. The list below shows the valid built-in values.\nAny other value is treated as a custom merge tool and requires that a\ncorresponding mergetool.<guitool>.cmd variable is defined. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 meld nvimdiff opendiff p4merge smerge tkdiff tortoisemerge vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.verbosity"}, {"role": "assistant", "content": "Controls the amount of output shown by the recursive merge\nstrategy.  Level 0 outputs nothing except a final error\nmessage if conflicts were detected. Level 1 outputs only\nconflicts, 2 outputs conflicts and file changes.  Level 5 and\nabove outputs debugging information.  The default is level 2.\nCan be overridden by the GIT_MERGE_VERBOSITY environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.<driver>.name"}, {"role": "assistant", "content": "Defines a human-readable name for a custom low-level\nmerge driver.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.<driver>.driver"}, {"role": "assistant", "content": "Defines the command that implements a custom low-level\nmerge driver.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  merge.<driver>.recursive"}, {"role": "assistant", "content": "Names a low-level merge driver to be used when\nperforming an internal merge between common ancestors.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "NAME git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "SYNOPSIS git mergetool [--tool=<tool>] [-y | --[no-]prompt] [<file>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "DESCRIPTION Use git mergetool to run one of several merge utilities to resolve\nmerge conflicts.  It is typically run after git merge . If one or more <file> parameters are given, the merge tool program will\nbe run to resolve differences in each file (skipping those without\nconflicts).  Specifying a directory will include all unresolved files in\nthat path.  If no <file> names are specified, git mergetool will run\nthe merge tool program on every file with merge conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  -t <tool>  --tool=<tool>"}, {"role": "assistant", "content": "Use the merge resolution program specified by <tool>.\nValid values include emerge, gvimdiff, kdiff3,\nmeld, vimdiff, and tortoisemerge. Run git mergetool --tool-help for the list of valid <tool> settings. If a merge resolution program is not specified, git mergetool will use the configuration variable merge.tool .  If the\nconfiguration variable merge.tool is not set, git mergetool will pick a suitable default. You can explicitly provide a full path to the tool by setting the\nconfiguration variable mergetool.<tool>.path . For example, you\ncan configure the absolute path to kdiff3 by setting mergetool.kdiff3.path . Otherwise, git mergetool assumes the\ntool is available in PATH. Instead of running one of the known merge tool programs, git mergetool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable mergetool.<tool>.cmd . When git mergetool is invoked with this tool (either through the -t or --tool option or the merge.tool configuration\nvariable), the configured command line will be invoked with $BASE set to the name of a temporary file containing the common base for\nthe merge, if available; $LOCAL set to the name of a temporary\nfile containing the contents of the file on the current branch; $REMOTE set to the name of a temporary file containing the\ncontents of the file to be merged, and $MERGED set to the name\nof the file to which the merge tool should write the result of the\nmerge resolution. If the custom merge tool correctly indicates the success of a\nmerge resolution with its exit code, then the configuration\nvariable mergetool.<tool>.trustExitCode can be set to true .\nOtherwise, git mergetool will prompt the user to indicate the\nsuccess of the resolution after the custom tool has exited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  --tool-help"}, {"role": "assistant", "content": "Print a list of merge tools that may be used with --tool ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  -y  --no-prompt"}, {"role": "assistant", "content": "Don’t prompt before each invocation of the merge resolution\nprogram.\nThis is the default if the merge resolution program is\nexplicitly specified with the --tool option or with the merge.tool configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  --prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program\nto give the user a chance to skip the path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  -g  --gui"}, {"role": "assistant", "content": "When git-mergetool is invoked with the -g or --gui option,\nthe default merge tool will be read from the configured merge.guitool variable instead of merge.tool . If merge.guitool is not set, we will fallback to the tool\nconfigured under merge.tool . This may be autoselected using\nthe configuration variable mergetool.guiDefault ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  --no-gui"}, {"role": "assistant", "content": "This overrides a previous -g or --gui setting or mergetool.guiDefault configuration and reads the default merge\ntool from the configured merge.tool variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  -O<orderfile>"}, {"role": "assistant", "content": "Process files in the order specified in the\n<orderfile>, which has one shell glob pattern per line.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified merge tool.  The\nspecified command is evaluated in shell with the following\nvariables available: BASE is the name of a temporary file\ncontaining the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of\nthe file on the current branch; REMOTE is the name of a temporary\nfile containing the contents of the file from the branch being\nmerged; MERGED contains the name of the file to which the merge\ntool should write the results of a successful merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<tool>.hideResolved"}, {"role": "assistant", "content": "Allows the user to override the global mergetool.hideResolved value\nfor a specific tool. See mergetool.hideResolved for the full\ndescription."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<tool>.trustExitCode"}, {"role": "assistant", "content": "For a custom merge command, specify whether the exit code of\nthe merge command can be used to determine whether the merge was\nsuccessful.  If this is not set to true then the merge target file\ntimestamp is checked, and the merge is assumed to have been successful\nif the file has been updated; otherwise, the user is prompted to\nindicate the success of the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.meld.hasOutput"}, {"role": "assistant", "content": "Older versions of meld do not support the --output option.\nGit will attempt to detect whether meld supports --output by inspecting the output of meld --help .  Configuring mergetool.meld.hasOutput will make Git skip these checks and\nuse the configured value instead.  Setting mergetool.meld.hasOutput to true tells Git to unconditionally use the --output option,\nand false avoids using --output ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.meld.useAutoMerge"}, {"role": "assistant", "content": "When the --auto-merge is given, meld will merge all non-conflicting\nparts automatically, highlight the conflicting parts, and wait for\nuser decision.  Setting mergetool.meld.useAutoMerge to true tells\nGit to unconditionally use the --auto-merge option with meld .\nSetting this value to auto makes git detect whether --auto-merge is supported and will only use --auto-merge when available.  A\nvalue of false avoids using --auto-merge altogether, and is the\ndefault value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.<vimdiff variant>.layout"}, {"role": "assistant", "content": "Configure the split window layout for vimdiff’s <variant> , which is any of vimdiff , nvimdiff , gvimdiff .\nUpon launching git mergetool with --tool=<variant> (or without --tool if merge.tool is configured as <variant> ), Git will consult mergetool.<variant>.layout to determine the tool’s layout. If the\nvariant-specific configuration is not available, vimdiff 's is used as\nfallback.  If that too is not available, a default layout with 4 windows\nwill be used.  To configure the layout, see the BACKEND SPECIFIC HINTS section."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.hideResolved"}, {"role": "assistant", "content": "During a merge, Git will automatically resolve as many conflicts as\npossible and write the MERGED file containing conflict markers around\nany conflicts that it cannot resolve; LOCAL and REMOTE normally\nrepresent the versions of the file from before Git’s conflict\nresolution. This flag causes LOCAL and REMOTE to be overwritten so\nthat only the unresolved conflicts are presented to the merge tool. Can\nbe configured per-tool via the mergetool.<tool>.hideResolved configuration variable. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.keepBackup"}, {"role": "assistant", "content": "After performing a merge, the original file with conflict markers\ncan be saved as a file with a .orig extension.  If this variable\nis set to false then this file is not preserved.  Defaults to true (i.e. keep the backup files)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.keepTemporaries"}, {"role": "assistant", "content": "When invoking a custom merge tool, Git uses a set of temporary\nfiles to pass to the tool. If the tool returns an error and this\nvariable is set to true , then these temporary files will be\npreserved; otherwise, they will be removed after the tool has\nexited. Defaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.writeToTemp"}, {"role": "assistant", "content": "Git writes temporary BASE , LOCAL , and REMOTE versions of\nconflicting files in the worktree by default.  Git will attempt\nto use a temporary directory for these files when set true .\nDefaults to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.guiDefault"}, {"role": "assistant", "content": "Set true to use the merge.guitool by default (equivalent to\nspecifying the --gui argument), or auto to select merge.guitool or merge.tool depending on the presence of a DISPLAY environment\nvariable value. The default is false , where the --gui argument\nmust be provided explicitly for the merge.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "TEMPORARY FILES git mergetool creates *.orig backup files while resolving merges.\nThese are safe to remove once a file has been merged and its git mergetool session has completed. Setting the mergetool.keepBackup configuration variable to false causes git mergetool to automatically remove the backup files as files\nare successfully merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "BACKEND SPECIFIC HINTS vimdiff Description When specifying --tool=vimdiff in git mergetool Git will open Vim with a 4\nwindows layout distributed in the following way: ------------------------------------------\n|             |           |              |\n|   LOCAL     |   BASE    |   REMOTE     |\n|             |           |              |\n------------------------------------------\n|                                        |\n|                MERGED                  |\n|                                        |\n------------------------------------------ LOCAL , BASE and REMOTE are read-only buffers showing the contents of the\nconflicting file in specific commits (\"commit you are merging into\", \"common\nancestor commit\" and \"commit you are merging from\" respectively) MERGED is a writable buffer where you have to resolve the conflicts (using the\nother read-only buffers as a reference). Once you are done, save and exit Vim as\nusual ( :wq ) or, if you want to abort, exit using :cq . Layout configuration You can change the windows layout used by Vim by setting configuration variable mergetool.vimdiff.layout which accepts a string where the following separators\nhave special meaning: + is used to \"open a new tab\" , is used to \"open a new vertical split\" / is used to \"open a new horizontal split\" @ is used to indicate the file containing the final version after\nsolving the conflicts. If not present, MERGED will be used by default. The precedence of the operators is as follows (you can use parentheses to change\nit): `@` > `+` > `/` > `,` Let’s see some examples to understand how it works: layout = \"(LOCAL,BASE,REMOTE)/MERGED\" This is exactly the same as the default layout we have already seen. Note that / has precedence over , and thus the parenthesis are not\nneeded in this case. The next layout definition is equivalent: layout = \"LOCAL,BASE,REMOTE / MERGED\" layout = \"LOCAL,MERGED,REMOTE\" If, for some reason, we are not interested in the BASE buffer. ------------------------------------------\n|             |           |              |\n|             |           |              |\n|   LOCAL     |   MERGED  |   REMOTE     |\n|             |           |              |\n|             |           |              |\n------------------------------------------ layout = \"MERGED\" Only the MERGED buffer will be shown. Note, however, that all the other\nones are still loaded in vim, and you can access them with the \"buffers\"\ncommand. ------------------------------------------\n|                                        |\n|                                        |\n|                 MERGED                 |\n|                                        |\n|                                        |\n------------------------------------------ layout = \"@LOCAL,REMOTE\" When MERGED is not present in the layout, you must \"mark\" one of the\nbuffers with an asterisk. That will become the buffer you need to edit and\nsave after resolving the conflicts. ------------------------------------------\n|                   |                    |\n|                   |                    |\n|                   |                    |\n|     LOCAL         |    REMOTE          |\n|                   |                    |\n|                   |                    |\n|                   |                    |\n------------------------------------------ layout = \"LOCAL,BASE,REMOTE / MERGED + BASE,LOCAL + BASE,REMOTE\" Three tabs will open: the first one is a copy of the default layout, while\nthe other two only show the differences between ( BASE and LOCAL ) and\n( BASE and REMOTE ) respectively. ------------------------------------------\n| <TAB #1> |  TAB #2  |  TAB #3  |       |\n------------------------------------------\n|             |           |              |\n|   LOCAL     |   BASE    |   REMOTE     |\n|             |           |              |\n------------------------------------------\n|                                        |\n|                MERGED                  |\n|                                        |\n------------------------------------------ ------------------------------------------\n|  TAB #1  | <TAB #2> |  TAB #3  |       |\n------------------------------------------\n|                   |                    |\n|                   |                    |\n|                   |                    |\n|     BASE          |    LOCAL           |\n|                   |                    |\n|                   |                    |\n|                   |                    |\n------------------------------------------ ------------------------------------------\n|  TAB #1  |  TAB #2  | <TAB #3> |       |\n------------------------------------------\n|                   |                    |\n|                   |                    |\n|                   |                    |\n|     BASE          |    REMOTE          |\n|                   |                    |\n|                   |                    |\n|                   |                    |\n------------------------------------------ layout = \"LOCAL,BASE,REMOTE / MERGED + BASE,LOCAL + BASE,REMOTE + (LOCAL/BASE/REMOTE),MERGED\" Same as the previous example, but adds a fourth tab with the same\ninformation as the first tab, with a different layout. ---------------------------------------------\n|  TAB #1  |  TAB #2  |  TAB #3  | <TAB #4> |\n---------------------------------------------\n|       LOCAL         |                     |\n|---------------------|                     |\n|       BASE          |        MERGED       |\n|---------------------|                     |\n|       REMOTE        |                     |\n--------------------------------------------- Note how in the third tab definition we need to use parentheses to make , have precedence over / . Variants Instead of --tool=vimdiff , you can also use one of these other variants: --tool=gvimdiff , to open gVim instead of Vim. --tool=nvimdiff , to open Neovim instead of Vim. When using these variants, in order to specify a custom layout you will have to\nset configuration variables mergetool.gvimdiff.layout and mergetool.nvimdiff.layout instead of mergetool.vimdiff.layout (though the\nlatter will be used as fallback if the variant-specific one is not set). In addition, for backwards compatibility with previous Git versions, you can\nalso append 1 , 2 or 3 to either vimdiff or any of the variants (ex: vimdiff3 , nvimdiff1 , etc…​) to use a predefined layout.\nIn other words, using --tool=[g,n,]vimdiffx is the same as using --tool=[g,n,]vimdiff and setting configuration variable mergetool.[g,n,]vimdiff.layout to…​ x=1 : \"@LOCAL, REMOTE\" x=2 : \"LOCAL, MERGED, REMOTE\" x=3 : \"MERGED\" Example: using --tool=gvimdiff2 will open gvim with three columns (LOCAL,\nMERGED and REMOTE)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "NAME git-log - Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "SYNOPSIS git log [<options>] [<revision-range>] [[--] <path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "DESCRIPTION Shows the commit logs. List commits that are reachable by following the parent links from the\ngiven commit(s), but exclude commits that are reachable from the one(s)\ngiven with a ^ in front of them.  The output is given in reverse\nchronological order by default. You can think of this as a set operation. Commits reachable from any of\nthe commits given on the command line form a set, and then commits reachable\nfrom any of the ones given with ^ in front are subtracted from that\nset.  The remaining commits are what comes out in the command’s output.\nVarious other options and paths parameters can be used to further limit the\nresult. Thus, the following command: $ git log foo bar ^baz means \"list all the commits which are reachable from foo or bar , but\nnot from baz \". A special notation \" <commit1> .. <commit2> \" can be used as a\nshort-hand for \"^ <commit1> <commit2> \". For example, either of\nthe following may be used interchangeably: $ git log origin..HEAD\n$ git log HEAD ^origin Another special notation is \" <commit1> …​ <commit2> \" which is useful\nfor merges.  The resulting set of commits is the symmetric difference\nbetween the two operands.  The following two commands are equivalent: $ git log A B --not $(git merge-base --all A B)\n$ git log A...B The command takes options applicable to the git-rev-list command to control what is shown and how, and options applicable to\nthe git-diff command to control how the changes\neach commit introduces are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --follow"}, {"role": "assistant", "content": "Continue listing the history of a file beyond renames\n(works only for a single file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-decorate  --decorate[=short|full|auto|no]"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The option --decorate is short-hand for --decorate=short .\nDefault to configuration value of log.decorate if configured,\notherwise, auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --decorate-refs=<pattern>  --decorate-refs-exclude=<pattern>"}, {"role": "assistant", "content": "For each candidate reference, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn’t match any of the patterns given to --decorate-refs . The log.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration . If none of these options or config settings are given, then references are\nused as decoration if they match HEAD , refs/heads/ , refs/remotes/ , refs/stash/ , or refs/tags/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --clear-decorations"}, {"role": "assistant", "content": "When specified, this option clears all previous --decorate-refs or --decorate-refs-exclude options and relaxes the default\ndecoration filter to include all references. This option is\nassumed if the config value log.initialDecorationSet is set to all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --source"}, {"role": "assistant", "content": "Print out the ref name given on the command line by which each\ncommit was reached."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]mailmap  --[no-]use-mailmap"}, {"role": "assistant", "content": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-diff"}, {"role": "assistant", "content": "Without this flag, git log -p <path>... shows commits that\ntouch the specified paths, and diffs about the same specified\npaths.  With this, the full diff is shown for commits that touch\nthe specified paths; this means that \"<path>…​\" limits only\ncommits, and doesn’t limit diff for those commits. Note that this affects all diff-based output types, e.g. those\nproduced by --stat , etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --log-size"}, {"role": "assistant", "content": "Include a line “log size <number>” in the output for each commit,\nwhere <number> is the length of that commit’s message in bytes.\nIntended to speed up tools that read log messages from git log output by allowing them to allocate space in advance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -L<start>,<end>:<file>  -L:<funcname>:<file>"}, {"role": "assistant", "content": "Trace the evolution of the line range given by <start>,<end> ,\nor by the function name regex <funcname> , within the <file> . You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments, and <start> and <end> (or <funcname> ) must exist in the starting revision.\nYou can specify this option more than once. Implies --patch .\nPatch output can be suppressed using --no-patch , but other diff formats\n(namely --raw , --numstat , --shortstat , --dirstat , --summary , --name-only , --name-status , --check ) are not currently implemented. <start> and <end> can take one of these forms: number If <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1). /regex/ This form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/ , it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start> . +offset or -offset This is only valid for <end> and will specify a number\nof lines before or after the line given by <start> . If :<funcname> is given in place of <start> and <end> , it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname> , up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <revision-range>"}, {"role": "assistant", "content": "Show only commits in the specified revision range.  When no\n<revision-range> is specified, it defaults to HEAD (i.e. the\nwhole history leading to the current commit). origin..HEAD specifies all the commits reachable from the current commit\n(i.e. HEAD ), but not from origin . For a complete list of\nways to spell <revision-range>, see the Specifying Ranges section of gitrevisions ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  [--] <path>…​"}, {"role": "assistant", "content": "Show only commits that are enough to explain how the files\nthat match the specified paths came to be.  See History\nSimplification below for details and other simplification\nmodes. Paths may need to be prefixed with -- to separate them from\noptions or the revision range, when confusion arises."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -<number>  -n <number>  --max-count=<number>"}, {"role": "assistant", "content": "Limit the number of commits to output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --skip=<number>"}, {"role": "assistant", "content": "Skip number commits before starting to show the commit output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --until=<date>  --before=<date>"}, {"role": "assistant", "content": "Show commits older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --author=<pattern>  --committer=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern> ,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --grep-reflog=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog , commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --grep=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern> , commits whose message\nmatches any of the given patterns are chosen (but see --all-match ). When --notes is in effect, the message from the notes is\nmatched as if it were part of the log message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --all-match"}, {"role": "assistant", "content": "Limit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --invert-grep"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that do not\nmatch the pattern specified with --grep=<pattern> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -i  --regexp-ignore-case"}, {"role": "assistant", "content": "Match the regular expression limiting patterns without regard to letter\ncase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --basic-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -E  --extended-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -F  --fixed-strings"}, {"role": "assistant", "content": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -P  --perl-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remove-empty"}, {"role": "assistant", "content": "Stop when a given path disappears from the tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --merges"}, {"role": "assistant", "content": "Print only merge commits. This is exactly the same as --min-parents=2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-merges"}, {"role": "assistant", "content": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --min-parents=<number>  --max-parents=<number>  --no-min-parents  --no-max-parents"}, {"role": "assistant", "content": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges , --min-parents=2 is the same as --merges . --max-parents=0 gives all root commits and --min-parents=3 all octopus merges. --no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --first-parent"}, {"role": "assistant", "content": "When finding commits to include, follow only the first\nparent commit upon seeing a merge commit.  This option\ncan give a better overview when viewing the evolution of\na particular topic branch, because merges into a topic\nbranch tend to be only about adjusting to updated upstream\nfrom time to time, and this option allows you to ignore\nthe individual commits brought in to your history by such\na merge. This option also changes default diff format for merge commits\nto first-parent , see --diff-merges=first-parent for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude-first-parent-only"}, {"role": "assistant", "content": "When finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --not"}, {"role": "assistant", "content": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not .\nWhen used on the command line before --stdin, the revisions passed\nthrough stdin will not be affected by it. Conversely, when passed\nvia standard input, the revisions passed on the command line will\nnot be affected by it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --all"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --branches[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit> . If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --tags[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remotes[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit> . If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --alternate-refs"}, {"role": "assistant", "content": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates .  The set of included objects may\nbe modified by core.alternateRefsCommand , etc. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-missing"}, {"role": "assistant", "content": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --bisect"}, {"role": "assistant", "content": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --stdin"}, {"role": "assistant", "content": "In addition to getting arguments from the command line, read\nthem from standard input as well. This accepts commits and\npseudo-options like --all and --glob= . When a -- separator\nis seen, the following input is treated as paths and used to\nlimit the result. Flags like --not which are read via standard input\nare only respected for arguments passed in the same way and will not\ninfluence any subsequent command line arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry-mark"}, {"role": "assistant", "content": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with + ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry-pick"}, {"role": "assistant", "content": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference. For example, if you have two branches, A and B , a usual way\nto list all commits on only one side of them is with --left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --left-only  --right-only"}, {"role": "assistant", "content": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by --left-right . For example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in A . In other words, this lists the + commits from git cherry A B .\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -g  --walk-reflogs"}, {"role": "assistant", "content": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit , commit1..commit2 ,\nand commit1...commit2 notations cannot be used). With --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{<Nth>} (where <Nth> is the reverse-chronological index in the\nreflog) or as ref@{<timestamp>} (with the <timestamp> for that entry),\ndepending on a few rules: If the starting point is specified as ref@{<Nth>} , show the index\nformat. If the starting point was specified as ref@{now} , show the\ntimestamp format. If neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date . Otherwise, show the index format. Under --pretty=oneline , the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse .\nSee also git-reflog . Under --pretty=reference , this information will not be shown at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --merge"}, {"role": "assistant", "content": "Show commits touching conflicted paths in the range HEAD...<other> ,\nwhere <other> is the first existing pseudoref in MERGE_HEAD , CHERRY_PICK_HEAD , REVERT_HEAD or REBASE_HEAD . Only works\nwhen the index has unmerged entries. This option can be used to show\nrelevant commits when resolving conflicts from a 3-way merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <paths>"}, {"role": "assistant", "content": "Commits modifying the given <paths> are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-by-decoration"}, {"role": "assistant", "content": "Commits that are referred by some branch or tag are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  Default mode"}, {"role": "assistant", "content": "Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history"}, {"role": "assistant", "content": "Same as the default mode, but does not prune some history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dense"}, {"role": "assistant", "content": "Only the selected commits are shown, plus some to have a\nmeaningful history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --sparse"}, {"role": "assistant", "content": "All commits in the simplified history are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-merges"}, {"role": "assistant", "content": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  Default mode"}, {"role": "assistant", "content": "Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents. This results in: .-A---N---O\n\t /     /   /\n\tI---------D Note how the rule to only follow the TREESAME parent, if one is\navailable, removed B from consideration entirely. C was\nconsidered via N , but is TREESAME.  Root commits are compared to an\nempty tree, so I is !TREESAME. Parent/child relations are only visible with --parents , but that does\nnot affect the commits selected in default mode, so we have shown the\nparent lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dense"}, {"role": "assistant", "content": "Commits that are walked are included if they are not TREESAME\nto any parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --sparse"}, {"role": "assistant", "content": "All commits that are walked are included. Note that without --full-history , this still simplifies merges: if\none of the parents is TREESAME, we follow only that one, so the other\nsides of the merge are never walked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-merges"}, {"role": "assistant", "content": "First, build a history graph in the same way that --full-history with parent rewriting does (see above). Then simplify each commit C to its replacement C' in the final\nhistory according to the following rules: Set C' to C . Replace each parent P of C' with its simplification P' .  In\nthe process, drop parents that are ancestors of other parents or that are\nroot commits TREESAME to an empty tree, and remove duplicates, but take care\nto never drop all parents that we are TREESAME to. If after this parent rewriting, C' is a root or merge commit (has\nzero or >1 parents), a boundary commit, or !TREESAME, it remains.\nOtherwise, it is replaced with its only parent. The effect of this is best shown by way of comparing to --full-history with parent rewriting.  The example turns into: .-A---M---N---O\n\t /     /       /\n\tI     B       D\n\t \\   /       /\n\t  `---------' Note the major differences in N , P , and Q over --full-history : N 's parent list had I removed, because it is an ancestor of the\nother parent M .  Still, N remained because it is !TREESAME. P 's parent list similarly had I removed. P was then\nremoved completely, because it had one parent and is TREESAME. Q 's parent list had Y simplified to X . X was then removed, because it\nwas a TREESAME root. Q was then removed completely, because it had one\nparent and is TREESAME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "Limit the displayed commits to those which are an ancestor of\n<commit>, or which are a descendant of <commit>, or are <commit>\nitself. As an example use case, consider the following commit history: D---E-------F\n\t   /     \\       \\\n\t  B---C---G---H---I---J\n\t /                     \\\n\tA-------K---------------L--M A regular D..M computes the set of commits that are ancestors of M ,\nbut excludes the ones that are ancestors of D . This is useful to see\nwhat happened to the history leading to M since D , in the sense\nthat “what does M have that did not exist in D ”. The result in this\nexample would be all the commits, except A and B (and D itself,\nof course). When we want to find out what commits in M are contaminated with the\nbug introduced by D and need fixing, however, we might want to view\nonly the subset of D..M that are actually descendants of D , i.e.\nexcluding C and K . This is exactly what the --ancestry-path option does. Applied to the D..M range, it results in: E-------F\n\t\t \\       \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M We can also use --ancestry-path=D instead of --ancestry-path which\nmeans the same thing when applied to the D..M range but is just more\nexplicit. If we instead are interested in a given topic within this range, and all\ncommits affected by that topic, we may only want to view the subset of D..M which contain that topic in their ancestry path.  So, using --ancestry-path=H D..M for example would result in: E\n\t\t \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M Whereas --ancestry-path=K D..M would result in K---------------L--M"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-pulls"}, {"role": "assistant", "content": "In addition to the commits shown in the default history, show\neach merge commit that is not TREESAME to its first parent but\nis TREESAME to a later parent. When a merge commit is included by --show-pulls , the merge is\ntreated as if it \"pulled\" the change from another branch. When using --show-pulls on this example (and no other options) the resulting\ngraph is: I---X---R---N Here, the merge commits R and N are included because they pulled\nthe commits X and R into the base branch, respectively. These\nmerges are the reason the commits A and B do not appear in the\ndefault history. When --show-pulls is paired with --simplify-merges , the\ngraph includes all of the necessary information: .-A---M--.   N\n\t /     /    \\ /\n\tI     B      R\n\t \\   /      /\n\t  \\ /      /\n\t   `---X--' Notice that since M is reachable from R , the edge from N to M was simplified away. However, N still appears in the history as an\nimportant commit because it \"pulled\" the change R into the main\nbranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --author-date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --topo-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed. For example, in a commit history like this: ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8--- where the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1. With --topo-order , they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --reverse"}, {"role": "assistant", "content": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with --walk-reflogs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-walk[=(sorted|unsorted)]"}, {"role": "assistant", "content": "Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --do-walk"}, {"role": "assistant", "content": "Overrides a previous --no-walk ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pretty[=<format>]  --format=<format>"}, {"role": "assistant", "content": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline , short , medium , full , fuller , reference , email , raw , format:<string> and tformat:<string> .  When <format> is none of the above,\nand has %placeholder in it, it acts as if --pretty=tformat:<format> were given. See the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium . Note: you can specify the default pretty format in the repository\nconfiguration (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --abbrev-commit"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-abbrev-commit"}, {"role": "assistant", "content": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit , either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --oneline"}, {"role": "assistant", "content": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --encoding=<encoding>"}, {"role": "assistant", "content": "Commit objects record the character encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X , we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output. Likewise, if iconv(3) fails\nto convert the commit, we will quietly output the original\nobject verbatim."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --expand-tabs=<n>  --expand-tabs  --no-expand-tabs"}, {"role": "assistant", "content": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is a multiple of <n> )\nin the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8 , and --no-expand-tabs is a short-hand for --expand-tabs=0 ,\nwhich disables tab expansion. By default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. medium , which is the default, full ,\nand fuller )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --notes[=<ref>]"}, {"role": "assistant", "content": "Show the notes (see git-notes ) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log , git show and git whatchanged commands when\nthere is no --pretty , --format , or --oneline option given\non the command line. By default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config for more details. With an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/ ; when it begins with notes/ , refs/ and otherwise refs/notes/ is prefixed to form the full name of the ref. Multiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-notes"}, {"role": "assistant", "content": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-notes-by-default"}, {"role": "assistant", "content": "Show the default notes unless options for displaying specific\nnotes are given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-notes[=<ref>]  --[no-]standard-notes"}, {"role": "assistant", "content": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-signature"}, {"role": "assistant", "content": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --relative-date"}, {"role": "assistant", "content": "Synonym for --date=relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date=<format>"}, {"role": "assistant", "content": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty . log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g., iso-local ), the user’s local time zone is used instead. --date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for --date=relative . --date=local is an alias for --date=default-local . --date=iso (or --date=iso8601 ) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are: a space instead of the T date/time delimiter a space between time and time zone no colon between hours and minutes of the time zone --date=iso-strict (or --date=iso8601-strict ) shows timestamps in strict\nISO 8601 format. --date=rfc (or --date=rfc2822 ) shows timestamps in RFC 2822\nformat, often found in email messages. --date=short shows only the date, but not the time, in YYYY-MM-DD format. --date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\") ).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value. --date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted. --date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw , this is always in UTC and therefore -local has no effect. --date=format:... feeds the format ... to your system strftime ,\nexcept for %s, %z, and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local , the correct syntax is --date=format-local:... . --date=default is the default format, and is based on ctime(3)\noutput.  It shows a single line with three-letter day of the week,\nthree-letter month, day-of-month, hour-minute-seconds in \"HH:MM:SS\"\nformat, followed by 4-digit year, plus timezone information, unless\nthe local time zone is used, e.g. Thu Jan 1 00:00:00 1970 +0000 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --parents"}, {"role": "assistant", "content": "Print also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --children"}, {"role": "assistant", "content": "Print also the children of the commit (in the form \"commit child…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --left-right"}, {"role": "assistant", "content": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --graph"}, {"role": "assistant", "content": "Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk . This enables parent rewriting, see History Simplification above. This implies the --topo-order option by default, but the --date-order option may also be specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-linear-break[=<barrier>]"}, {"role": "assistant", "content": "When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %x00"}, {"role": "assistant", "content": "%x followed by two hexadecimal digits is replaced with a\nbyte with the hexadecimal digits' value (we will call this\n\"literal formatting code\" in the rest of this document)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cred"}, {"role": "assistant", "content": "switch color to red"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cgreen"}, {"role": "assistant", "content": "switch color to green"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cblue"}, {"role": "assistant", "content": "switch color to blue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Creset"}, {"role": "assistant", "content": "reset color"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %C(…​)"}, {"role": "assistant", "content": "color specification, as described under Values in the\n\"CONFIGURATION FILE\" section of git-config .  By\ndefault, colors are shown only when enabled for log output\n(by color.diff , color.ui , or --color , and respecting\nthe auto settings of the former if we are going to a\nterminal). %C(auto,...) is accepted as a historical\nsynonym for the default (e.g., %C(auto,red) ). Specifying %C(always,...) will show the colors even when color is\nnot otherwise enabled (though consider just using --color=always to enable color for the whole output,\nincluding this format and anything else git might color). auto alone (i.e. %C(auto) ) will turn on auto coloring\non the next placeholders until the color is switched\nagain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %m"}, {"role": "assistant", "content": "left ( < ), right ( > ) or boundary ( - ) mark"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %w([<w>[,<i1>[,<i2>]]])"}, {"role": "assistant", "content": "switch line wrapping, like the -w option of git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %<|( <M> )"}, {"role": "assistant", "content": "make the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %>( <N> ) , %>|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively,\nbut padding spaces on the left"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %>>( <N> ) , %>>|( <M> )"}, {"role": "assistant", "content": "similar to %>( <N> ) , %>|( <M> ) respectively, except that if the next\nplaceholder takes more spaces than given and\nthere are spaces on its left, use those\nspaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %><( <N> ) , %><|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively, but padding both sides\n(i.e. the text is centered)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %H"}, {"role": "assistant", "content": "commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %h"}, {"role": "assistant", "content": "abbreviated commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %T"}, {"role": "assistant", "content": "tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %t"}, {"role": "assistant", "content": "abbreviated tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %P"}, {"role": "assistant", "content": "parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %p"}, {"role": "assistant", "content": "abbreviated parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %an"}, {"role": "assistant", "content": "author name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aN"}, {"role": "assistant", "content": "author name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ae"}, {"role": "assistant", "content": "author email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aE"}, {"role": "assistant", "content": "author email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aL"}, {"role": "assistant", "content": "author local-part (see %al ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ad"}, {"role": "assistant", "content": "author date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aD"}, {"role": "assistant", "content": "author date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ar"}, {"role": "assistant", "content": "author date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %at"}, {"role": "assistant", "content": "author date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ai"}, {"role": "assistant", "content": "author date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %as"}, {"role": "assistant", "content": "author date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ah"}, {"role": "assistant", "content": "author date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cN"}, {"role": "assistant", "content": "committer name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ce"}, {"role": "assistant", "content": "committer email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cE"}, {"role": "assistant", "content": "committer email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cl"}, {"role": "assistant", "content": "committer email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cL"}, {"role": "assistant", "content": "committer local-part (see %cl ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cd"}, {"role": "assistant", "content": "committer date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cD"}, {"role": "assistant", "content": "committer date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ct"}, {"role": "assistant", "content": "committer date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ci"}, {"role": "assistant", "content": "committer date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cI"}, {"role": "assistant", "content": "committer date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cs"}, {"role": "assistant", "content": "committer date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ch"}, {"role": "assistant", "content": "committer date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %d"}, {"role": "assistant", "content": "ref names, like the --decorate option of git-log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %D"}, {"role": "assistant", "content": "ref names without the \" (\", \")\" wrapping."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(decorate[:<options>])"}, {"role": "assistant", "content": "ref names with custom decorations. The decorate string may be followed by a\ncolon and zero or more comma-separated options. Option values may contain\nliteral formatting codes. These must be used for commas ( %x2C ) and closing\nparentheses ( %x29 ), due to their role in the option syntax. prefix=<value> : Shown before the list of ref names.  Defaults to \" ( \". suffix=<value> : Shown after the list of ref names.  Defaults to \" ) \". separator=<value> : Shown between ref names.  Defaults to \" , \". pointer=<value> : Shown between HEAD and the branch it points to, if any.\nDefaults to \" -> \". tag=<value> : Shown before tag names. Defaults to \" tag: \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %S"}, {"role": "assistant", "content": "ref name given on the command line by which the commit was reached\n(like git log --source ), only works with git log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %e"}, {"role": "assistant", "content": "encoding"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %s"}, {"role": "assistant", "content": "subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %f"}, {"role": "assistant", "content": "sanitized subject line, suitable for a filename"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %b"}, {"role": "assistant", "content": "body"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %B"}, {"role": "assistant", "content": "raw body (unwrapped subject and body)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %N"}, {"role": "assistant", "content": "commit notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GG"}, {"role": "assistant", "content": "raw verification message from GPG for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GS"}, {"role": "assistant", "content": "show the name of the signer for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GK"}, {"role": "assistant", "content": "show the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GF"}, {"role": "assistant", "content": "show the fingerprint of the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GP"}, {"role": "assistant", "content": "show the fingerprint of the primary key whose subkey was used\nto sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GT"}, {"role": "assistant", "content": "show the trust level for the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gD"}, {"role": "assistant", "content": "reflog selector, e.g., refs/stash@{1} or refs/stash@{2\nminutes ago} ; the format follows the rules described for the -g option. The portion before the @ is the refname as\ngiven on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gd"}, {"role": "assistant", "content": "shortened reflog selector; same as %gD , but the refname\nportion is shortened for human readability (so refs/heads/master becomes just master )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gn"}, {"role": "assistant", "content": "reflog identity name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gN"}, {"role": "assistant", "content": "reflog identity name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ge"}, {"role": "assistant", "content": "reflog identity email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gE"}, {"role": "assistant", "content": "reflog identity email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gs"}, {"role": "assistant", "content": "reflog subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(trailers[:<options>])"}, {"role": "assistant", "content": "display the trailers of the body as interpreted by git-interpret-trailers . The trailers string may be followed by\na colon and zero or more comma-separated options. If any option is provided\nmultiple times, the last occurrence wins. key=<key> : only show trailers with specified <key>. Matching is done\ncase-insensitively and trailing colon is optional. If option is\ngiven multiple times trailer lines matching any of the keys are\nshown. This option automatically enables the only option so that\nnon-trailer lines in the trailer block are hidden. If that is not\ndesired it can be disabled with only=false .  E.g., %(trailers:key=Reviewed-by) shows trailer lines with key Reviewed-by . only[=<bool>] : select whether non-trailer lines from the trailer\nblock should be included. separator=<sep> : specify the separator inserted between trailer\nlines. Defaults to a line feed character. The string <sep> may contain\nthe literal formatting codes described above. To use comma as\nseparator one must use %x2C as it would otherwise be parsed as\nnext option. E.g., %(trailers:key=Ticket,separator=%x2C ) shows all trailer lines whose key is \"Ticket\" separated by a comma\nand a space. unfold[=<bool>] : make it behave as if interpret-trailer’s --unfold option was given. E.g., %(trailers:only,unfold=true) unfolds and shows all trailer lines. keyonly[=<bool>] : only show the key part of the trailer. valueonly[=<bool>] : only show the value part of the trailer. key_value_separator=<sep> : specify the separator inserted between\nthe key and value of each trailer. Defaults to \": \". Otherwise it\nshares the same semantics as separator=<sep> above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -m"}, {"role": "assistant", "content": "Show diffs for merge commits in the default format. This is\nsimilar to --diff-merges=on , except -m will\nproduce no output unless -p is given as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -c"}, {"role": "assistant", "content": "Produce combined diff output for merge commits.\nShortcut for --diff-merges=combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cc"}, {"role": "assistant", "content": "Produce dense combined diff output for merge commits.\nShortcut for --diff-merges=dense-combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dd"}, {"role": "assistant", "content": "Produce diff with respect to first parent for both merge and\nregular commits.\nShortcut for --diff-merges=first-parent -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remerge-diff"}, {"role": "assistant", "content": "Produce remerge-diff output for merge commits.\nShortcut for --diff-merges=remerge -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-diff-merges"}, {"role": "assistant", "content": "Synonym for --diff-merges=off ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-merges=<format>"}, {"role": "assistant", "content": "Specify diff format to be used for merge commits. Default is\n`off` unless --first-parent is in use, in\nwhich case first-parent is the default. The following formats are supported: off, none Disable output of diffs for merge commits. Useful to override\nimplied value. on, m Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate . first-parent, 1 Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits. separate Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent. combined, c Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents. dense-combined, cc Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification. remerge, r Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --combined-all-paths"}, {"role": "assistant", "content": "This flag causes combined diffs (used for merge commits) to\nlist the name of the file from all parents.  It thus only has\neffect when --diff-merges=[dense-]combined is in use, and\nis likely only useful if filename changes are detected (i.e.\nwhen either rename or copy detection have been requested)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --raw"}, {"role": "assistant", "content": "For each commit, show a summary of changes using the raw diff\nformat. See the \"RAW OUTPUT FORMAT\" section of git-diff . This is different from showing the log\nitself in raw format, which you can achieve with --format=raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -t"}, {"role": "assistant", "content": "Show the tree objects in the diff output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -z"}, {"role": "assistant", "content": "Separate the commits with NULs instead of newlines. Also, when --raw or --numstat has been given, do not munge\npathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "If generating diffs, detect and report renames for each commit.\nFor following files across renames while traversing history, see --follow .\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  off, none"}, {"role": "assistant", "content": "Disable output of diffs for merge commits. Useful to override\nimplied value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  on, m"}, {"role": "assistant", "content": "Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  first-parent, 1"}, {"role": "assistant", "content": "Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  separate"}, {"role": "assistant", "content": "Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  combined, c"}, {"role": "assistant", "content": "Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  dense-combined, cc"}, {"role": "assistant", "content": "Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  remerge, r"}, {"role": "assistant", "content": "Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --no-merges"}, {"role": "assistant", "content": "Show the whole commit history, but skip any merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log v2.6.12.. include/scsi drivers/scsi"}, {"role": "assistant", "content": "Show all commits since version v2.6.12 that changed any file\nin the include/scsi or drivers/scsi subdirectories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --since=\"2 weeks ago\" -- gitk"}, {"role": "assistant", "content": "Show the changes during the last two weeks to the file gitk .\nThe -- is necessary to avoid confusion with the branch named gitk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --name-status release..test"}, {"role": "assistant", "content": "Show the commits that are in the \"test\" branch but not yet\nin the \"release\" branch, along with the list of paths\neach commit modifies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --follow builtin/rev-list.c"}, {"role": "assistant", "content": "Shows the commits that changed builtin/rev-list.c , including\nthose commits that occurred before the file was given its\npresent name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --branches --not --remotes=origin"}, {"role": "assistant", "content": "Shows all commits that are in any of local branches but not in\nany of remote-tracking branches for origin (what you have that\norigin doesn’t)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log master --not --remotes=*/master"}, {"role": "assistant", "content": "Shows all commits that are in local master but not in any remote\nrepository master branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -p -m --first-parent"}, {"role": "assistant", "content": "Shows the history including change diffs, but only from the\n“main branch” perspective, skipping commits that come from merged\nbranches, and showing full diffs of changes introduced by the merges.\nThis makes sense only when following a strict policy of merging all\ntopic branches when staying on a single integration branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -L '/int main/',/^}/:main.c"}, {"role": "assistant", "content": "Shows how the function main() in the file main.c evolved\nover time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -3"}, {"role": "assistant", "content": "Limits the number of commits to show to 3."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "DISCUSSION Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  format.pretty"}, {"role": "assistant", "content": "Default for the --format option.  (See Pretty Formats above.)\nDefaults to medium ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  i18n.logOutputEncoding"}, {"role": "assistant", "content": "Encoding to use when displaying logs.  (See Discussion above.)\nDefaults to the value of i18n.commitEncoding if set, and UTF-8\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.abbrevCommit"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --abbrev-commit . You may\noverride this option with --no-abbrev-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.date"}, {"role": "assistant", "content": "Set the default date-time mode for the log command.\nSetting a value for log.date is similar to using git log 's --date option.  See git-log for details. If the format is set to \"auto:foo\" and the pager is in use, format\n\"foo\" will be used for the date format. Otherwise, \"default\" will\nbe used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.initialDecorationSet"}, {"role": "assistant", "content": "By default, git log only shows decorations for certain known ref\nnamespaces. If all is specified, then show all refs as\ndecorations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.excludeDecoration"}, {"role": "assistant", "content": "Exclude the specified patterns from the log decorations. This is\nsimilar to the --decorate-refs-exclude command-line option, but\nthe config option can be overridden by the --decorate-refs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.diffMerges"}, {"role": "assistant", "content": "Set diff format to be used when --diff-merges=on is\nspecified, see --diff-merges in git-log for\ndetails. Defaults to separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.follow"}, {"role": "assistant", "content": "If true , git log will act as if the --follow option was used when\na single <path> is given.  This has the same limitations as --follow ,\ni.e. it cannot be used to follow multiple files and does not work well\non non-linear history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log or git-whatchanged , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.showSignature"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --show-signature ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.mailmap"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --use-mailmap , otherwise\nassume --no-use-mailmap . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewriteRef"}, {"role": "assistant", "content": "When copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away"}, {"role": "assistant", "content": "NAME git-stash - Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away"}, {"role": "assistant", "content": "SYNOPSIS git stash list [<log-options>] git stash show [-u | --include-untracked | --only-untracked] [<diff-options>] [<stash>] git stash drop [-q | --quiet] [<stash>] git stash pop [--index] [-q | --quiet] [<stash>] git stash apply [--index] [-q | --quiet] [<stash>] git stash branch <branchname> [<stash>] git stash [push [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]\n\t     [-u | --include-untracked] [-a | --all] [(-m | --message) <message>]\n\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t     [--] [<pathspec>…​]] git stash save [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]\n\t     [-u | --include-untracked] [-a | --all] [<message>] git stash clear git stash create [<message>] git stash store [(-m | --message) <message>] [-q | --quiet] <commit>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away"}, {"role": "assistant", "content": "DESCRIPTION Use git stash when you want to record the current state of the\nworking directory and the index, but want to go back to a clean\nworking directory.  The command saves your local modifications away\nand reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list , inspected with git stash show , and restored\n(potentially on top of a different commit) with git stash apply .\nCalling git stash without any arguments is equivalent to git stash push .\nA stash is by default listed as \"WIP on branchname …​\", but\nyou can give a more descriptive message on the command line when\nyou create one. The latest stash you created is stored in refs/stash ; older\nstashes are found in the reflog of this reference and can be named using\nthe usual reflog syntax (e.g. stash@{0} is the most recently\ncreated stash, stash@{1} is the one before it, stash@{2.hours.ago} is also possible). Stashes may also be referenced by specifying just the\nstash index (e.g. the integer n is equivalent to stash@{n} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  push [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [(-m|--message) <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]"}, {"role": "assistant", "content": "Save your local modifications to a new stash entry and roll them\nback to HEAD (in the working tree and in the index).\nThe <message> part is optional and gives\nthe description along with the stashed state. For quickly making a snapshot, you can omit \"push\".  In this mode,\nnon-option arguments are not allowed to prevent a misspelled\nsubcommand from making an unwanted stash entry.  The two exceptions to this\nare stash -p which acts as alias for stash push -p and pathspec elements,\nwhich are allowed after a double hyphen -- for disambiguation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  save [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]"}, {"role": "assistant", "content": "This option is deprecated in favour of git stash push .  It\ndiffers from \"stash push\" in that it cannot take pathspec.\nInstead, all non-option arguments are concatenated to form the stash\nmessage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  list [<log-options>]"}, {"role": "assistant", "content": "List the stash entries that you currently have.  Each stash entry is\nlisted with its name (e.g. stash@{0} is the latest entry, stash@{1} is\nthe one before, etc.), the name of the branch that was current when the\nentry was made, and a short description of the commit the entry was\nbased on. stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\nstash@{1}: On master: 9cc0589... Add git-stash The command takes options applicable to the git log command to control what is shown and how. See git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]"}, {"role": "assistant", "content": "Show the changes recorded in the stash entry as a diff between the\nstashed contents and the commit back when the stash entry was first\ncreated.\nBy default, the command shows the diffstat, but it will accept any\nformat known to git diff (e.g., git stash show -p stash@{1} to view the second most recent entry in patch form).\nIf no <diff-option> is provided, the default behavior will be given\nby the stash.showStat , and stash.showPatch config variables. You\ncan also use stash.showIncludeUntracked to set whether --include-untracked is enabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  pop [--index] [-q|--quiet] [<stash>]"}, {"role": "assistant", "content": "Remove a single stashed state from the stash list and apply it\non top of the current working tree state, i.e., do the inverse\noperation of git stash push . The working directory must\nmatch the index. Applying the state can fail with conflicts; in this case, it is not\nremoved from the stash list. You need to resolve the conflicts by hand\nand call git stash drop manually afterwards."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  apply [--index] [-q|--quiet] [<stash>]"}, {"role": "assistant", "content": "Like pop , but do not remove the state from the stash list. Unlike pop , <stash> may be any commit that looks like a commit created by stash push or stash create ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  branch <branchname> [<stash>]"}, {"role": "assistant", "content": "Creates and checks out a new branch named <branchname> starting from\nthe commit at which the <stash> was originally created, applies the\nchanges recorded in <stash> to the new working tree and index.\nIf that succeeds, and <stash> is a reference of the form stash@{<revision>} , it then drops the <stash> . This is useful if the branch on which you ran git stash push has\nchanged enough that git stash apply fails due to conflicts. Since\nthe stash entry is applied on top of the commit that was HEAD at the\ntime git stash was run, it restores the originally stashed state\nwith no conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  clear"}, {"role": "assistant", "content": "Remove all the stash entries. Note that those entries will then\nbe subject to pruning, and may be impossible to recover (see Examples below for a possible strategy)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  drop [-q|--quiet] [<stash>]"}, {"role": "assistant", "content": "Remove a single stash entry from the list of stash entries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  create"}, {"role": "assistant", "content": "Create a stash entry (which is a regular commit object) and\nreturn its object name, without storing it anywhere in the ref\nnamespace.\nThis is intended to be useful for scripts.  It is probably not\nthe command you want to use; see \"push\" above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  store"}, {"role": "assistant", "content": "Store a given stash created via git stash create (which is a\ndangling merge commit) in the stash ref, updating the stash\nreflog.  This is intended to be useful for scripts.  It is\nprobably not the command you want to use; see \"push\" above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -a  --all"}, {"role": "assistant", "content": "This option is only valid for push and save commands. All ignored and untracked files are also stashed and then cleaned\nup with git clean ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -u  --include-untracked  --no-include-untracked"}, {"role": "assistant", "content": "When used with the push and save commands,\nall untracked files are also stashed and then cleaned up with git clean . When used with the show command, show the untracked files in the stash\nentry as part of the diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  --only-untracked"}, {"role": "assistant", "content": "This option is only valid for the show command. Show only the untracked files in the stash entry as part of the diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  --index"}, {"role": "assistant", "content": "This option is only valid for pop and apply commands. Tries to reinstate not only the working tree’s changes, but also\nthe index’s ones. However, this can fail, when you have conflicts\n(which are stored in the index, where you therefore can no longer\napply the changes as they were originally)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -k  --keep-index  --no-keep-index"}, {"role": "assistant", "content": "This option is only valid for push and save commands. All changes already added to the index are left intact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -p  --patch"}, {"role": "assistant", "content": "This option is only valid for push and save commands. Interactively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the “Interactive Mode” section of git-add to learn how to operate the --patch mode. The --patch option implies --keep-index .  You can use --no-keep-index to override this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -S  --staged"}, {"role": "assistant", "content": "This option is only valid for push and save commands. Stash only the changes that are currently staged. This is similar to\nbasic git commit except the state is committed to the stash instead\nof current branch. The --patch option has priority over this one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  --pathspec-from-file=<file>"}, {"role": "assistant", "content": "This option is only valid for push command. Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath (see git-config ). See also --pathspec-file-nul and\nglobal --literal-pathspecs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  --pathspec-file-nul"}, {"role": "assistant", "content": "This option is only valid for push command. Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -q  --quiet"}, {"role": "assistant", "content": "This option is only valid for apply , drop , pop , push , save , store commands. Quiet, suppress feedback messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  --"}, {"role": "assistant", "content": "This option is only valid for push command. Separates pathspec from options for disambiguation purposes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  <pathspec>…​"}, {"role": "assistant", "content": "This option is only valid for push command. The new stash entry records the modified states only for the files\nthat match the pathspec.  The index entries and working tree files\nare then rolled back to the state in HEAD only for these files,\ntoo, leaving files that do not match the pathspec intact. For more details, see the pathspec entry in gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  <stash>"}, {"role": "assistant", "content": "This option is only valid for apply , branch , drop , pop , show commands. A reference of the form stash@{<revision>} . When no <stash> is\ngiven, the latest stash is assumed (that is, stash@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away"}, {"role": "assistant", "content": "DISCUSSION A stash entry is represented as a commit whose tree records the state\nof the working directory, and its first parent is the commit at HEAD when the entry was created.  The tree of the second parent records the\nstate of the index when the entry is made, and it is made a child of\nthe HEAD commit.  The ancestry graph looks like this: .----W\n      /    /\n-----H----I where H is the HEAD commit, I is a commit that records the state\nof the index, and W is a commit that records the state of the working\ntree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  Pulling into a dirty tree"}, {"role": "assistant", "content": "When you are in the middle of something, you learn that there are\nupstream changes that are possibly relevant to what you are\ndoing.  When your local changes do not conflict with the changes in\nthe upstream, a simple git pull will let you move forward. However, there are cases in which your local changes do conflict with\nthe upstream changes, and git pull refuses to overwrite your\nchanges.  In such a case, you can stash your changes away,\nperform a pull, and then unstash, like this: $ git pull\n ...\nfile foobar not up to date, cannot merge.\n$ git stash\n$ git pull\n$ git stash pop"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  Interrupted workflow"}, {"role": "assistant", "content": "When you are in the middle of something, your boss comes in and\ndemands that you fix something immediately.  Traditionally, you would\nmake a commit to a temporary branch to store your changes away, and\nreturn to your original branch to make the emergency fix, like this: # ... hack hack hack ...\n$ git switch -c my_wip\n$ git commit -a -m \"WIP\"\n$ git switch master\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git switch my_wip\n$ git reset --soft HEAD^\n# ... continue hacking ... You can use git stash to simplify the above, like this: # ... hack hack hack ...\n$ git stash\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git stash pop\n# ... continue hacking ..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  Testing partial commits"}, {"role": "assistant", "content": "You can use git stash push --keep-index when you want to make two or\nmore commits out of the changes in the work tree, and you want to test\neach change before committing: # ... hack hack hack ...\n$ git add --patch foo            # add just first part to the index\n$ git stash push --keep-index    # save all other changes to the stash\n$ edit/build/test first part\n$ git commit -m 'First part'     # commit fully tested change\n$ git stash pop                  # prepare to work on all other changes\n# ... repeat above five steps until one commit remains ...\n$ edit/build/test remaining parts\n$ git commit foo -m 'Remaining parts'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  Saving unrelated changes for future use"}, {"role": "assistant", "content": "When you are in the middle of massive changes and you find some\nunrelated issue that you don’t want to forget to fix, you can do the\nchange(s), stage them, and use git stash push --staged to stash them\nout for future use. This is similar to committing the staged changes,\nonly the commit ends-up being in the stash and not on the current branch. # ... hack hack hack ...\n$ git add --patch foo           # add unrelated changes to the index\n$ git stash push --staged       # save these changes to the stash\n# ... hack hack hack, finish current changes ...\n$ git commit -m 'Massive'       # commit fully tested changes\n$ git switch fixup-branch       # switch to another branch\n$ git stash pop                 # to finish work on the saved changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  Recovering stash entries that were cleared/dropped erroneously"}, {"role": "assistant", "content": "If you mistakenly drop or clear stash entries, they cannot be recovered\nthrough the normal safety mechanisms.  However, you can try the\nfollowing incantation to get a list of stash entries that are still in\nyour repository, but not reachable any more: git fsck --unreachable |\ngrep commit | cut -d\\  -f3 |\nxargs git log --merges --no-walk --grep=WIP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  stash.showIncludeUntracked"}, {"role": "assistant", "content": "If this is set to true, the git stash show command will show\nthe untracked files of a stash entry.  Defaults to false. See\nthe description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  stash.showPatch"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show the stash entry in patch form.  Defaults to false.\nSee the description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  stash.showStat"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show a diffstat of the stash entry.  Defaults to true.\nSee the description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "NAME git-tag - Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "SYNOPSIS git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>] [-e]\n\t<tagname> [<commit> | <object>] git tag -d <tagname>…​ git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n\t[--points-at <object>] [--column[=<options>] | --no-column]\n\t[--create-reflog] [--sort=<key>] [--format=<format>]\n\t[--merged <commit>] [--no-merged <commit>] [<pattern>…​] git tag -v [--format=<format>] <tagname>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "DESCRIPTION Add a tag reference in refs/tags/ , unless -d/-l/-v is given\nto delete, list or verify tags. Unless -f is given, the named tag must not yet exist. If one of -a , -s , or -u <key-id> is passed, the command\ncreates a tag object, and requires a tag message.  Unless -m <msg> or -F <file> is given, an editor is started for the user to type\nin the tag message. If -m <msg> or -F <file> is given and -a , -s , and -u <key-id> are absent, -a is implied. Otherwise, a tag reference that points directly at the given object\n(i.e., a lightweight tag) is created. A GnuPG signed tag object will be created when -s or -u\n<key-id> is used.  When -u <key-id> is not used, the\ncommitter identity for the current user is used to find the\nGnuPG key for signing. \tThe configuration variable gpg.program is used to specify custom GnuPG binary. Tag objects (created with -a , -s , or -u ) are called \"annotated\"\ntags; they contain a creation date, the tagger name and e-mail, a\ntagging message, and an optional GnuPG signature. Whereas a\n\"lightweight\" tag is simply a name for an object (usually a commit\nobject). Annotated tags are meant for release while lightweight tags are meant\nfor private or temporary object labels. For this reason, some git\ncommands for naming objects (like git describe ) will ignore\nlightweight tags by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -a  --annotate"}, {"role": "assistant", "content": "Make an unsigned, annotated tag object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -s  --sign"}, {"role": "assistant", "content": "Make a GPG-signed tag, using the default e-mail address’s key.\nThe default behavior of tag GPG-signing is controlled by tag.gpgSign configuration variable if it exists, or disabled otherwise.\nSee git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --no-sign"}, {"role": "assistant", "content": "Override tag.gpgSign configuration variable that is\nset to force each and every tag to be signed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -u <key-id>  --local-user=<key-id>"}, {"role": "assistant", "content": "Make a GPG-signed tag, using the given key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -f  --force"}, {"role": "assistant", "content": "Replace an existing tag with the given name (instead of failing)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -d  --delete"}, {"role": "assistant", "content": "Delete existing tags with the given names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -v  --verify"}, {"role": "assistant", "content": "Verify the GPG signature of the given tag names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -n<num>"}, {"role": "assistant", "content": "<num> specifies how many lines from the annotation, if any,\nare printed when using -l. Implies --list . The default is not to print any annotation lines.\nIf no number is given to -n , only the first line is printed.\nIf the tag is not annotated, the commit message is displayed instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -l  --list"}, {"role": "assistant", "content": "List tags. With optional <pattern>... , e.g. git tag --list\n'v-*' , list only the tags that match the pattern(s). Running \"git tag\" without arguments also lists all tags. The pattern\nis a shell wildcard (i.e., matched using fnmatch(3)). Multiple\npatterns may be given; if any of them matches, the tag is shown. This option is implicitly supplied if any other list-like option such\nas --contains is provided. See the documentation for each of those\noptions for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --sort=<key>"}, {"role": "assistant", "content": "Sort based on the key given.  Prefix - to sort in\ndescending order of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. Also supports \"version:refname\" or \"v:refname\" (tag\nnames are treated as versions). The \"version:refname\" sort\norder can also be affected by the \"versionsort.suffix\"\nconfiguration variable.\nThe keys supported are the same as those in git for-each-ref .\nSort order defaults to the value configured for the tag.sort variable if it exists, or lexicographic order otherwise. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --color[=<when>]"}, {"role": "assistant", "content": "Respect any colors specified in the --format option. The <when> field must be one of always , never , or auto (if <when> is absent, behave as if always was given)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -i  --ignore-case"}, {"role": "assistant", "content": "Sorting and filtering tags are case insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --omit-empty"}, {"role": "assistant", "content": "Do not print a newline after formatted refs where the format expands\nto the empty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --column[=<options>]  --no-column"}, {"role": "assistant", "content": "Display tag listing in columns. See configuration variable column.tag for option syntax. --column and --no-column without options are equivalent to always and never respectively. This option is only applicable when listing tags without annotation lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --contains [<commit>]"}, {"role": "assistant", "content": "Only list tags which contain the specified commit (HEAD if not\nspecified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --no-contains [<commit>]"}, {"role": "assistant", "content": "Only list tags which don’t contain the specified commit (HEAD if\nnot specified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --merged [<commit>]"}, {"role": "assistant", "content": "Only list tags whose commits are reachable from the specified\ncommit ( HEAD if not specified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --no-merged [<commit>]"}, {"role": "assistant", "content": "Only list tags whose commits are not reachable from the specified\ncommit ( HEAD if not specified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --points-at <object>"}, {"role": "assistant", "content": "Only list tags of the given object (HEAD if not\nspecified). Implies --list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -m <msg>  --message=<msg>"}, {"role": "assistant", "content": "Use the given tag message (instead of prompting).\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\nImplies -a if none of -a , -s , or -u <key-id> is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -F <file>  --file=<file>"}, {"role": "assistant", "content": "Take the tag message from the given file.  Use - to\nread the message from the standard input.\nImplies -a if none of -a , -s , or -u <key-id> is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -e  --edit"}, {"role": "assistant", "content": "The message taken from file with -F and command line with -m are usually used as the tag message unmodified.\nThis option lets you further edit the message taken from these sources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --cleanup=<mode>"}, {"role": "assistant", "content": "This option sets how the tag message is cleaned up.\nThe <mode> can be one of verbatim , whitespace and strip .  The strip mode is default. The verbatim mode does not change message at\nall, whitespace removes just leading/trailing whitespace lines and strip removes both whitespace and commentary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --create-reflog"}, {"role": "assistant", "content": "Create a reflog for the tag. To globally enable reflogs for tags, see core.logAllRefUpdates in git-config .\nThe negated form --no-create-reflog only overrides an earlier --create-reflog , but currently does not negate the setting of core.logAllRefUpdates ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  --format=<format>"}, {"role": "assistant", "content": "A string that interpolates %(fieldname) from a tag ref being shown\nand the object it points at.  The format is the same as\nthat of git-for-each-ref .  When unspecified,\ndefaults to %(refname:strip=2) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  <tagname>"}, {"role": "assistant", "content": "The name of the tag to create, delete, or describe.\nThe new tag name must pass all checks defined by git-check-ref-format .  Some of these checks\nmay restrict the characters allowed in a tag name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  <commit>  <object>"}, {"role": "assistant", "content": "The object that the new tag will refer to, usually a commit.\nDefaults to HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "CONFIGURATION By default, git tag in sign-with-default mode (-s) will use your\ncommitter identity (of the form Your Name <your@email.address> ) to\nfind a key.  If you want to use a different default key, you can specify\nit in the repository configuration as follows: [user]\n    signingKey = <gpg-key-id> pager.tag is only respected when listing tags, i.e., when -l is\nused or implied. The default is to use a pager.\nSee git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "DISCUSSION On Re-tagging What should you do when you tag a wrong commit and you would\nwant to re-tag? If you never pushed anything out, just re-tag it. Use \"-f\" to\nreplace the old one. And you’re done. But if you have pushed things out (or others could just read\nyour repository directly), then others will have already seen\nthe old tag. In that case you can do one of two things: The sane thing.\nJust admit you screwed up, and use a different name. Others have\nalready seen one tag-name, and if you keep the same name, you\nmay be in the situation that two people both have \"version X\",\nbut they actually have different \"X\"'s.  So just call it \"X.1\"\nand be done with it. The insane thing.\nYou really want to call the new version \"X\" too, even though others have already seen the old one. So just use git tag -f again, as if you hadn’t already published the old one. However, Git does not (and it should not) change tags behind\nusers back. So if somebody already got the old tag, doing a git pull on your tree shouldn’t just make them overwrite the old\none. If somebody got a release tag from you, you cannot just change\nthe tag for them by updating your own one. This is a big\nsecurity issue, in that people MUST be able to trust their\ntag-names.  If you really want to do the insane thing, you need\nto just fess up to it, and tell people that you messed up. You\ncan do that by making a very public announcement saying: Ok, I messed up, and I pushed out an earlier version tagged as X. I\nthen fixed something, and retagged the *fixed* tree as X again.\n\nIf you got the wrong tag, and want the new one, please delete\nthe old one and fetch the new one by doing:\n\n\tgit tag -d X\n\tgit fetch origin tag X\n\nto get my updated tag.\n\nYou can test which tag you have by doing\n\n\tgit rev-parse X\n\nwhich should return 0123456789abcdef.. if you have the new version.\n\nSorry for the inconvenience. Does this seem a bit complicated?  It should be. There is no\nway that it would be correct to just \"fix\" it automatically.\nPeople need to know that their tags might have been changed. On Automatic following If you are following somebody else’s tree, you are most likely\nusing remote-tracking branches (eg. refs/remotes/origin/master ).\nYou usually want the tags from the other end. On the other hand, if you are fetching because you would want a\none-shot merge from somebody else, you typically do not want to\nget tags from there.  This happens more often for people near\nthe toplevel but not limited to them.  Mere mortals when pulling\nfrom each other do not necessarily want to automatically get\nprivate anchor point tags from the other person. Often, \"please pull\" messages on the mailing list just provide\ntwo pieces of information: a repo URL and a branch name; this\nis designed to be easily cut&pasted at the end of a git fetch command line: Linus, please pull from\n\n\tgit://git..../proj.git master\n\nto get the following updates... becomes: $ git pull git://git..../proj.git master In such a case, you do not want to automatically follow the other\nperson’s tags. One important aspect of Git is its distributed nature, which\nlargely means there is no inherent \"upstream\" or\n\"downstream\" in the system.  On the face of it, the above\nexample might seem to indicate that the tag namespace is owned\nby the upper echelon of people and that tags only flow downwards, but\nthat is not the case.  It only shows that the usage pattern\ndetermines who are interested in whose tags. A one-shot pull is a sign that a commit history is now crossing\nthe boundary between one circle of people (e.g. \"people who are\nprimarily interested in the networking part of the kernel\") who may\nhave their own set of tags (e.g. \"this is the third release\ncandidate from the networking group to be proposed for general\nconsumption with 2.6.21 release\") to another circle of people\n(e.g. \"people who integrate various subsystem improvements\").\nThe latter are usually not interested in the detailed tags used\ninternally in the former group (that is what \"internal\" means).\nThat is why it is desirable not to follow tags automatically in\nthis case. It may well be that among networking people, they may want to\nexchange the tags internal to their group, but in that workflow\nthey are most likely tracking each other’s progress by\nhaving remote-tracking branches.  Again, the heuristic to automatically\nfollow such tags is a good thing. On Backdating Tags If you have imported some changes from another VCS and would like\nto add tags for major releases of your work, it is useful to be able\nto specify the date to embed inside of the tag object; such data in\nthe tag object affects, for example, the ordering of tags in the\ngitweb interface. To set the date used in future tag objects, set the environment\nvariable GIT_COMMITTER_DATE (see the later discussion of possible\nvalues; the most common form is \"YYYY-MM-DD HH:MM\"). For example: $ GIT_COMMITTER_DATE=\"2006-10-02 10:31\" git tag -s v1.0.1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  Git internal format"}, {"role": "assistant", "content": "It is <unix-timestamp> <time-zone-offset> , where <unix-timestamp> is the number of seconds since the UNIX epoch. <time-zone-offset> is a positive or negative offset from UTC.\nFor example CET (which is 1 hour ahead of UTC) is +0100 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  RFC 2822"}, {"role": "assistant", "content": "The standard date format as described by RFC 2822, for example Thu, 07 Apr 2005 22:13:13 +0200 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  ISO 8601"}, {"role": "assistant", "content": "Time and date specified by the ISO 8601 standard, for example 2005-04-07T22:13:13 . The parser accepts a space instead of the T character as well. Fractional parts of a second will be ignored,\nfor example 2005-04-07T22:13:13.019 will be treated as 2005-04-07T22:13:13 . Note In addition, the date part is accepted in the following formats: YYYY.MM.DD , MM/DD/YYYY and DD.MM.YYYY ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  $GIT_DIR/TAG_EDITMSG"}, {"role": "assistant", "content": "This file contains the message of an in-progress annotated\ntag. If git tag exits due to an error before creating an\nannotated tag then the tag message that has been provided by the\nuser in an editor session will be available in this file, but\nmay be overwritten by the next invocation of git tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG"}, {"role": "assistant", "content": "NOTES When combining multiple --contains and --no-contains filters, only\nreferences that contain at least one of the --contains commits and\ncontain none of the --no-contains commits are shown. When combining multiple --merged and --no-merged filters, only\nreferences that are reachable from at least one of the --merged commits and from none of the --no-merged commits are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "NAME git-worktree - Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "SYNOPSIS git worktree add [-f] [--detach] [--checkout] [--lock [--reason <string>]]\n\t\t   [--orphan] [(-b | -B) <new-branch>] <path> [<commit-ish>] git worktree list [-v | --porcelain [-z]] git worktree lock [--reason <string>] <worktree> git worktree move <worktree> <new-path> git worktree prune [-n] [-v] [--expire <expire>] git worktree remove [-f] <worktree> git worktree repair [<path>…​] git worktree unlock <worktree>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "DESCRIPTION Manage multiple working trees attached to the same repository. A git repository can support multiple working trees, allowing you to check\nout more than one branch at a time.  With git worktree add a new working\ntree is associated with the repository, along with additional metadata\nthat differentiates that working tree from others in the same repository.\nThe working tree, along with this metadata, is called a \"worktree\". This new worktree is called a \"linked worktree\" as opposed to the \"main\nworktree\" prepared by git-init or git-clone .\nA repository has one main worktree (if it’s not a bare repository) and\nzero or more linked worktrees. When you are done with a linked worktree,\nremove it with git worktree remove . In its simplest form, git worktree add <path> automatically creates a\nnew branch whose name is the final component of <path> , which is\nconvenient if you plan to work on a new topic. For instance, git\nworktree add ../hotfix creates new branch hotfix and checks it out at\npath ../hotfix . To instead work on an existing branch in a new worktree,\nuse git worktree add <path> <branch> . On the other hand, if you just\nplan to make some experimental changes or do testing without disturbing\nexisting development, it is often convenient to create a throwaway worktree not associated with any branch. For instance, git worktree add -d <path> creates a new worktree with a detached HEAD at the same commit as the current branch. If a working tree is deleted without using git worktree remove , then\nits associated administrative files, which reside in the repository\n(see \"DETAILS\" below), will eventually be removed automatically (see gc.worktreePruneExpire in git-config ), or you can run git worktree prune in the main or any linked worktree to clean up any\nstale administrative files. If the working tree for a linked worktree is stored on a portable device\nor network share which is not always mounted, you can prevent its\nadministrative files from being pruned by issuing the git worktree lock command, optionally specifying --reason to explain why the worktree is\nlocked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  add <path> [<commit-ish>]"}, {"role": "assistant", "content": "Create a worktree at <path> and checkout <commit-ish> into it. The new worktree\nis linked to the current repository, sharing everything except per-worktree\nfiles such as HEAD , index , etc. As a convenience, <commit-ish> may\nbe a bare \" - \", which is synonymous with @{-1} . If <commit-ish> is a branch name (call it <branch> ) and is not found,\nand neither -b nor -B nor --detach are used, but there does\nexist a tracking branch in exactly one remote (call it <remote> )\nwith a matching name, treat as equivalent to: $ git worktree add --track -b <branch> <path> <remote>/<branch> If the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to\ne.g. checkout.defaultRemote=origin to always checkout remote\nbranches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config . If <commit-ish> is omitted and neither -b nor -B nor --detach used,\nthen, as a convenience, the new worktree is associated with a branch (call\nit <branch> ) named after $(basename <path>) .  If <branch> doesn’t\nexist, a new branch based on HEAD is automatically created as if -b <branch> was given.  If <branch> does exist, it will be checked out\nin the new worktree, if it’s not checked out anywhere else, otherwise the\ncommand will refuse to create the worktree (unless --force is used). If <commit-ish> is omitted, neither --detach , or --orphan is\nused, and there are no valid local branches (or remote branches if --guess-remote is specified) then, as a convenience, the new worktree is\nassociated with a new unborn branch named <branch> (after $(basename <path>) if neither -b or -B is used) as if --orphan was\npassed to the command. In the event the repository has a remote and --guess-remote is used, but no remote or local branches exist, then the\ncommand fails with a warning reminding the user to fetch from their remote\nfirst (or override by using -f/--force )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  list"}, {"role": "assistant", "content": "List details of each worktree.  The main worktree is listed first,\nfollowed by each of the linked worktrees.  The output details include\nwhether the worktree is bare, the revision currently checked out, the\nbranch currently checked out (or \"detached HEAD\" if none), \"locked\" if\nthe worktree is locked, \"prunable\" if the worktree can be pruned by the prune command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  lock"}, {"role": "assistant", "content": "If a worktree is on a portable device or network share which is not always\nmounted, lock it to prevent its administrative files from being pruned\nautomatically. This also prevents it from being moved or deleted.\nOptionally, specify a reason for the lock with --reason ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  move"}, {"role": "assistant", "content": "Move a worktree to a new location. Note that the main worktree or linked\nworktrees containing submodules cannot be moved with this command. (The git worktree repair command, however, can reestablish the connection\nwith linked worktrees if you move the main worktree manually.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  prune"}, {"role": "assistant", "content": "Prune worktree information in $GIT_DIR/worktrees ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  remove"}, {"role": "assistant", "content": "Remove a worktree. Only clean worktrees (no untracked files and no\nmodification in tracked files) can be removed. Unclean worktrees or ones\nwith submodules can be removed with --force . The main worktree cannot be\nremoved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  repair [<path>…​]"}, {"role": "assistant", "content": "Repair worktree administrative files, if possible, if they have become\ncorrupted or outdated due to external factors. For instance, if the main worktree (or bare repository) is moved, linked\nworktrees will be unable to locate it. Running repair in the main\nworktree will reestablish the connection from linked worktrees back to the\nmain worktree. Similarly, if the working tree for a linked worktree is moved without\nusing git worktree move , the main worktree (or bare repository) will be\nunable to locate it. Running repair within the recently-moved worktree\nwill reestablish the connection. If multiple linked worktrees are moved,\nrunning repair from any worktree with each tree’s new <path> as an\nargument, will reestablish the connection to all the specified paths. If both the main worktree and linked worktrees have been moved manually,\nthen running repair in the main worktree and specifying the new <path> of each linked worktree will reestablish all connections in both\ndirections."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  unlock"}, {"role": "assistant", "content": "Unlock a worktree, allowing it to be pruned, moved or deleted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -f  --force"}, {"role": "assistant", "content": "By default, add refuses to create a new worktree when <commit-ish> is a branch name and is already checked out by\nanother worktree, or if <path> is already assigned to some\nworktree but is missing (for instance, if <path> was deleted\nmanually). This option overrides these safeguards. To add a missing but\nlocked worktree path, specify --force twice. move refuses to move a locked worktree unless --force is specified\ntwice. If the destination is already assigned to some other worktree but is\nmissing (for instance, if <new-path> was deleted manually), then --force allows the move to proceed; use --force twice if the destination is locked. remove refuses to remove an unclean worktree unless --force is used.\nTo remove a locked worktree, specify --force twice."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -b <new-branch>  -B <new-branch>"}, {"role": "assistant", "content": "With add , create a new branch named <new-branch> starting at <commit-ish> , and check out <new-branch> into the new worktree.\nIf <commit-ish> is omitted, it defaults to HEAD .\nBy default, -b refuses to create a new branch if it already\nexists. -B overrides this safeguard, resetting <new-branch> to <commit-ish> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -d  --detach"}, {"role": "assistant", "content": "With add , detach HEAD in the new worktree. See \"DETACHED HEAD\"\nin git-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --[no-]checkout"}, {"role": "assistant", "content": "By default, add checks out <commit-ish> , however, --no-checkout can\nbe used to suppress checkout in order to make customizations,\nsuch as configuring sparse-checkout. See \"Sparse checkout\"\nin git-read-tree ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --[no-]guess-remote"}, {"role": "assistant", "content": "With worktree add <path> , without <commit-ish> , instead\nof creating a new branch from HEAD , if there exists a tracking\nbranch in exactly one remote matching the basename of <path> ,\nbase the new branch on the remote-tracking branch, and mark\nthe remote-tracking branch as \"upstream\" from the new branch. This can also be set up as the default behaviour by using the worktree.guessRemote config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --[no-]track"}, {"role": "assistant", "content": "When creating a new branch, if <commit-ish> is a branch,\nmark it as \"upstream\" from the new branch.  This is the\ndefault if <commit-ish> is a remote-tracking branch.  See --track in git-branch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --lock"}, {"role": "assistant", "content": "Keep the worktree locked after creation. This is the\nequivalent of git worktree lock after git worktree add ,\nbut without a race condition."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -n  --dry-run"}, {"role": "assistant", "content": "With prune , do not remove anything; just report what it would\nremove."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --orphan"}, {"role": "assistant", "content": "With add , make the new worktree and index empty, associating\nthe worktree with a new unborn branch named <new-branch> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --porcelain"}, {"role": "assistant", "content": "With list , output in an easy-to-parse format for scripts.\nThis format will remain stable across Git versions and regardless of user\nconfiguration.  It is recommended to combine this with -z .\nSee below for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -z"}, {"role": "assistant", "content": "Terminate each line with a NUL rather than a newline when --porcelain is specified with list . This makes it possible\nto parse the output when a worktree path contains a newline\ncharacter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -q  --quiet"}, {"role": "assistant", "content": "With add , suppress feedback messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  -v  --verbose"}, {"role": "assistant", "content": "With prune , report all removals. With list , output additional information about worktrees (see below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --expire <time>"}, {"role": "assistant", "content": "With prune , only expire unused worktrees older than <time> . With list , annotate missing worktrees as prunable if they are older than <time> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  --reason <string>"}, {"role": "assistant", "content": "With lock or with add --lock , an explanation why the worktree\nis locked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  <worktree>"}, {"role": "assistant", "content": "Worktrees can be identified by path, either relative or absolute. If the last path components in the worktree’s path is unique among\nworktrees, it can be used to identify a worktree. For example if you only\nhave two worktrees, at /abc/def/ghi and /abc/def/ggg , then ghi or def/ghi is enough to point to the former worktree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "REFS When using multiple worktrees, some refs are shared between all worktrees,\nbut others are specific to an individual worktree. One example is HEAD ,\nwhich is different for each worktree. This section is about the sharing\nrules and how to access refs of one worktree from another. In general, all pseudo refs are per-worktree and all refs starting with refs/ are shared. Pseudo refs are ones like HEAD which are directly\nunder $GIT_DIR instead of inside $GIT_DIR/refs . There are exceptions,\nhowever: refs inside refs/bisect , refs/worktree and refs/rewritten are\nnot shared. Refs that are per-worktree can still be accessed from another worktree via\ntwo special paths, main-worktree and worktrees . The former gives\naccess to per-worktree refs of the main worktree, while the latter to all\nlinked worktrees. For example, main-worktree/HEAD or main-worktree/refs/bisect/good resolve to the same value as the main worktree’s HEAD and refs/bisect/good respectively. Similarly, worktrees/foo/HEAD or worktrees/bar/refs/bisect/bad are the same as $GIT_COMMON_DIR/worktrees/foo/HEAD and $GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad . To access refs, it’s best not to look inside $GIT_DIR directly. Instead\nuse commands such as git-rev-parse or git-update-ref which will handle refs correctly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "CONFIGURATION FILE By default, the repository config file is shared across all worktrees.\nIf the config variables core.bare or core.worktree are present in the\ncommon config file and extensions.worktreeConfig is disabled, then they\nwill be applied to the main worktree only. In order to have worktree-specific configuration, you can turn on the worktreeConfig extension, e.g.: $ git config extensions.worktreeConfig true In this mode, specific configuration stays in the path pointed by git\nrev-parse --git-path config.worktree . You can add or update\nconfiguration in this file with git config --worktree . Older Git\nversions will refuse to access repositories with this extension. Note that in this file, the exception for core.bare and core.worktree is gone. If they exist in $GIT_DIR/config , you must move\nthem to the config.worktree of the main worktree. You may also take this\nopportunity to review and move other configuration that you do not want to\nshare to all worktrees: core.worktree should never be shared. core.bare should not be shared if the value is core.bare=true . core.sparseCheckout should not be shared, unless you are sure you\nalways use sparse checkout for all worktrees. See the documentation of extensions.worktreeConfig in git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "DETAILS Each linked worktree has a private sub-directory in the repository’s $GIT_DIR/worktrees directory.  The private sub-directory’s name is usually\nthe base name of the linked worktree’s path, possibly appended with a\nnumber to make it unique.  For example, when $GIT_DIR=/path/main/.git the\ncommand git worktree add /path/other/test-next next creates the linked\nworktree in /path/other/test-next and also creates a $GIT_DIR/worktrees/test-next directory (or $GIT_DIR/worktrees/test-next1 if test-next is already taken). Within a linked worktree, $GIT_DIR is set to point to this private\ndirectory (e.g. /path/main/.git/worktrees/test-next in the example) and $GIT_COMMON_DIR is set to point back to the main worktree’s $GIT_DIR (e.g. /path/main/.git ). These settings are made in a .git file located at\nthe top directory of the linked worktree. Path resolution via git rev-parse --git-path uses either $GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the\nlinked worktree git rev-parse --git-path HEAD returns /path/main/.git/worktrees/test-next/HEAD (not /path/other/test-next/.git/HEAD or /path/main/.git/HEAD ) while git\nrev-parse --git-path refs/heads/master uses $GIT_COMMON_DIR and returns /path/main/.git/refs/heads/master ,\nsince refs are shared across all worktrees, except refs/bisect , refs/worktree and refs/rewritten . See gitrepository-layout for more information. The rule of\nthumb is do not make any assumption about whether a path belongs to $GIT_DIR or $GIT_COMMON_DIR when you need to directly access something\ninside $GIT_DIR . Use git rev-parse --git-path to get the final path. If you manually move a linked worktree, you need to update the gitdir file\nin the entry’s directory. For example, if a linked worktree is moved\nto /newpath/test-next and its .git file points to /path/main/.git/worktrees/test-next , then update /path/main/.git/worktrees/test-next/gitdir to reference /newpath/test-next instead. Better yet, run git worktree repair to reestablish the connection\nautomatically. To prevent a $GIT_DIR/worktrees entry from being pruned (which\ncan be useful in some situations, such as when the\nentry’s worktree is stored on a portable device), use the git worktree lock command, which adds a file named locked to the entry’s directory. The file contains the reason in\nplain text. For example, if a linked worktree’s .git file points\nto /path/main/.git/worktrees/test-next then a file named /path/main/.git/worktrees/test-next/locked will prevent the test-next entry from being pruned.  See gitrepository-layout for details. When extensions.worktreeConfig is enabled, the config file .git/worktrees/<id>/config.worktree is read after .git/config is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "LIST OUTPUT FORMAT The worktree list command has two output formats. The default format shows the\ndetails on a single line with columns.  For example: $ git worktree list\n/path/to/bare-source            (bare)\n/path/to/linked-worktree        abcd1234 [master]\n/path/to/other-linked-worktree  1234abc  (detached HEAD) The command also shows annotations for each worktree, according to its state.\nThese annotations are: locked , if the worktree is locked. prunable , if the worktree can be pruned via git worktree prune . $ git worktree list\n/path/to/linked-worktree    abcd1234 [master]\n/path/to/locked-worktree    acbd5678 (brancha) locked\n/path/to/prunable-worktree  5678abc  (detached HEAD) prunable For these annotations, a reason might also be available and this can be\nseen using the verbose mode. The annotation is then moved to the next line\nindented followed by the additional information. $ git worktree list --verbose\n/path/to/linked-worktree              abcd1234 [master]\n/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked\n/path/to/locked-worktree-with-reason  1234abcd (brancha)\n\tlocked: worktree path is mounted on a portable device\n/path/to/prunable-worktree            5678abc1 (detached HEAD)\n\tprunable: gitdir file points to non-existent location Note that the annotation is moved to the next line if the additional\ninformation is available, otherwise it stays on the same line as the\nworktree itself. Porcelain Format The porcelain format has a line per attribute.  If -z is given then the lines\nare terminated with NUL rather than a newline.  Attributes are listed with a\nlabel and value separated by a single space.  Boolean attributes (like bare and detached ) are listed as a label only, and are present only\nif the value is true.  Some attributes (like locked ) can be listed as a label\nonly or with a value depending upon whether a reason is available.  The first\nattribute of a worktree is always worktree , an empty line indicates the\nend of the record.  For example: $ git worktree list --porcelain\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\nworktree /path/to/linked-worktree-locked-no-reason\nHEAD 5678abc5678abc5678abc5678abc5678abc5678c\nbranch refs/heads/locked-no-reason\nlocked\n\nworktree /path/to/linked-worktree-locked-with-reason\nHEAD 3456def3456def3456def3456def3456def3456b\nbranch refs/heads/locked-with-reason\nlocked reason why is locked\n\nworktree /path/to/linked-worktree-prunable\nHEAD 1233def1234def1234def1234def1234def1234b\ndetached\nprunable gitdir file points to non-existent location Unless -z is used any \"unusual\" characters in the lock reason such as newlines\nare escaped and the entire reason is quoted as explained for the\nconfiguration variable core.quotePath (see git-config ).\nFor Example: $ git worktree list --porcelain\n...\nlocked \"reason\\nwhy is locked\"\n..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "EXAMPLES You are in the middle of a refactoring session and your boss comes in and\ndemands that you fix something immediately. You might typically use git-stash to store your changes away temporarily, however, your\nworking tree is in such a state of disarray (with new, moved, and removed\nfiles, and other bits and pieces strewn around) that you don’t want to risk\ndisturbing any of it. Instead, you create a temporary linked worktree to\nmake the emergency fix, remove it when done, and then resume your earlier\nrefactoring session. $ git worktree add -b emergency-fix ../temp master\n$ pushd ../temp\n# ... hack hack hack ...\n$ git commit -a -m 'emergency fix for boss'\n$ popd\n$ git worktree remove ../temp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees"}, {"role": "assistant", "content": "BUGS Multiple checkout in general is still experimental, and the support\nfor submodules is incomplete. It is NOT recommended to make multiple\ncheckouts of a superproject."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "NAME git-fetch - Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "SYNOPSIS git fetch [<options>] [<repository> [<refspec>…​]] git fetch [<options>] <group> git fetch --multiple [<options>] [(<repository> | <group>)…​] git fetch --all [<options>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "DESCRIPTION Fetch branches and/or tags (collectively, \"refs\") from one or more\nother repositories, along with the objects necessary to complete their\nhistories.  Remote-tracking branches are updated (see the description\nof <refspec> below for ways to control this behavior). By default, any tag that points into the histories being fetched is\nalso fetched; the effect is to fetch tags that\npoint at branches that you are interested in.  This default behavior\ncan be changed by using the --tags or --no-tags options or by\nconfiguring remote.<name>.tagOpt.  By using a refspec that fetches tags\nexplicitly, you can fetch tags that do not point into branches you\nare interested in as well. git fetch can fetch from either a single named repository or URL,\nor from several repositories at once if <group> is given and\nthere is a remotes.<group> entry in the configuration file.\n(See git-config ). When no remote is specified, by default the origin remote will be used,\nunless there’s an upstream branch configured for the current branch. The names of refs that are fetched, together with the object names\nthey point at, are written to .git/FETCH_HEAD .  This information\nmay be used by scripts or other git commands, such as git-pull ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --[no-]all"}, {"role": "assistant", "content": "Fetch all remotes. This overrides the configuration variable fetch.all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -a  --append"}, {"role": "assistant", "content": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD .  Without this\noption old data in .git/FETCH_HEAD will be overwritten."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --atomic"}, {"role": "assistant", "content": "Use an atomic transaction to update local refs. Either all refs are\nupdated, or on error, no refs are updated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --depth=<depth>"}, {"role": "assistant", "content": "Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see git-clone ), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --deepen=<depth>"}, {"role": "assistant", "content": "Similar to --depth, except it specifies the number of commits\nfrom the current shallow boundary instead of from the tip of\neach remote branch history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --shallow-since=<date>"}, {"role": "assistant", "content": "Deepen or shorten the history of a shallow repository to\ninclude all reachable commits after <date>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --shallow-exclude=<revision>"}, {"role": "assistant", "content": "Deepen or shorten the history of a shallow repository to\nexclude commits reachable from a specified remote branch or tag.\nThis option can be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --unshallow"}, {"role": "assistant", "content": "If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories. If the source repository is shallow, fetch as much as possible so that\nthe current repository has the same history as the source repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --update-shallow"}, {"role": "assistant", "content": "By default when fetching from a shallow repository, git fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accepts such\nrefs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --negotiation-tip=<commit|glob>"}, {"role": "assistant", "content": "By default, Git will report, to the server, commits reachable\nfrom all local refs to find common commits in an attempt to\nreduce the size of the to-be-received packfile. If specified,\nGit will only report commits reachable from the given tips.\nThis is useful to speed up fetches when the user knows which\nlocal ref is likely to have commits in common with the\nupstream ref being fetched. This option may be specified more than once; if so, Git will report\ncommits reachable from any of the given commits. The argument to this option may be a glob on ref names, a ref, or the (possibly\nabbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying\nthis option multiple times, one for each matching ref name. See also the fetch.negotiationAlgorithm and push.negotiate configuration variables documented in git-config , and the --negotiate-only option below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --negotiate-only"}, {"role": "assistant", "content": "Do not fetch anything from the server, and instead print the\nancestors of the provided --negotiation-tip=* arguments,\nwhich we have in common with the server. This is incompatible with --recurse-submodules=[yes|on-demand] .\nInternally this is used to implement the push.negotiate option, see git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --dry-run"}, {"role": "assistant", "content": "Show what would be done, without making any changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --porcelain"}, {"role": "assistant", "content": "Print the output to standard output in an easy-to-parse format for\nscripts. See section OUTPUT in git-fetch for details. This is incompatible with --recurse-submodules=[yes|on-demand] and takes\nprecedence over the fetch.output config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --[no-]write-fetch-head"}, {"role": "assistant", "content": "Write the list of remote refs fetched in the FETCH_HEAD file directly under $GIT_DIR .  This is the default.\nPassing --no-write-fetch-head from the command line tells\nGit not to write the file.  Under --dry-run option, the\nfile is never written."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -f  --force"}, {"role": "assistant", "content": "When git fetch is used with <src>:<dst> refspec, it may\nrefuse to update the local branch as discussed\nin the <refspec> part below.\nThis option overrides that check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -k  --keep"}, {"role": "assistant", "content": "Keep downloaded pack."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --multiple"}, {"role": "assistant", "content": "Allow several <repository> and <group> arguments to be\nspecified. No <refspec>s may be specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --[no-]auto-maintenance  --[no-]auto-gc"}, {"role": "assistant", "content": "Run git maintenance run --auto at the end to perform automatic\nrepository maintenance if needed. ( --[no-]auto-gc is a synonym.)\nThis is enabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --[no-]write-commit-graph"}, {"role": "assistant", "content": "Write a commit-graph after fetching. This overrides the config\nsetting fetch.writeCommitGraph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --prefetch"}, {"role": "assistant", "content": "Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -p  --prune"}, {"role": "assistant", "content": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec. See the PRUNING section below for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -P  --prune-tags"}, {"role": "assistant", "content": "Before fetching, remove any local tags that no longer exist on\nthe remote if --prune is enabled. This option should be used\nmore carefully, unlike --prune it will remove any local\nreferences (local tags) that have been created. This option is\na shorthand for providing the explicit tag refspec along with --prune , see the discussion about that in its documentation. See the PRUNING section below for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -n  --no-tags"}, {"role": "assistant", "content": "By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --refetch"}, {"role": "assistant", "content": "Instead of negotiating with the server to avoid transferring commits and\nassociated objects that are already present locally, this option fetches\nall objects as a fresh clone would. Use this to reapply a partial clone\nfilter from configuration or using --filter= when the filter\ndefinition has changed. Automatic post-fetch maintenance will perform\nobject database pack consolidation to remove any duplicate objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --refmap=<refspec>"}, {"role": "assistant", "content": "When fetching refs listed on the command line, use the\nspecified refspec (can be given more than once) to map the\nrefs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote\nrepository.  Providing an empty <refspec> to the --refmap option causes Git to ignore the configured\nrefspecs and rely entirely on the refspecs supplied as\ncommand-line arguments. See section on \"Configured Remote-tracking\nBranches\" for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -t  --tags"}, {"role": "assistant", "content": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --recurse-submodules[=(yes|on-demand|no)]"}, {"role": "assistant", "content": "This option controls if and under what conditions new commits of\nsubmodules should be fetched too. When recursing through submodules, git fetch always attempts to fetch \"changed\" submodules, that is, a\nsubmodule that has commits that are referenced by a newly fetched\nsuperproject commit but are missing in the local submodule clone. A\nchanged submodule can be fetched as long as it is present locally e.g.\nin $GIT_DIR/modules/ (see gitsubmodules ); if the upstream\nadds a new submodule, that submodule cannot be fetched until it is\ncloned e.g. by git submodule update . When set to on-demand , only changed submodules are fetched. When set\nto yes , all populated submodules are fetched and submodules that are\nboth unpopulated and changed are fetched. When set to no , submodules\nare never fetched. When unspecified, this uses the value of fetch.recurseSubmodules if it\nis set (see git-config ), defaulting to on-demand if unset.\nWhen this option is used without any value, it defaults to yes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -j  --jobs=<n>"}, {"role": "assistant", "content": "Number of parallel children to be used for all forms of fetching. If the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config ). Typically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --no-recurse-submodules"}, {"role": "assistant", "content": "Disable recursive fetching of submodules (this has the same effect as\nusing the --recurse-submodules=no option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --set-upstream"}, {"role": "assistant", "content": "If the remote is fetched successfully, add upstream\n(tracking) reference, used by argument-less git-pull and other commands. For more information,\nsee branch.<name>.merge and branch.<name>.remote in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --submodule-prefix=<path>"}, {"role": "assistant", "content": "Prepend <path> to paths printed in informative messages\nsuch as \"Fetching submodule foo\".  This option is used\ninternally when recursing over submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --recurse-submodules-default=[yes|on-demand]"}, {"role": "assistant", "content": "This option is used internally to temporarily provide a\nnon-negative default value for the --recurse-submodules\noption.  All other methods of configuring fetch’s submodule\nrecursion (such as settings in gitmodules and git-config ) override this option, as does\nspecifying --[no-]recurse-submodules directly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -u  --update-head-ok"}, {"role": "assistant", "content": "By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull to communicate with git fetch , and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --upload-pack <upload-pack>"}, {"role": "assistant", "content": "When given, and the repository to fetch from is handled\nby git fetch-pack , --exec=<upload-pack> is passed to\nthe command to specify non-default path for the command\nrun on the other end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -q  --quiet"}, {"role": "assistant", "content": "Pass --quiet to git-fetch-pack and silence any other internally\nused git commands. Progress is not reported to the standard error\nstream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -v  --verbose"}, {"role": "assistant", "content": "Be verbose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -o <option>  --server-option=<option>"}, {"role": "assistant", "content": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --show-forced-updates"}, {"role": "assistant", "content": "By default, git checks if a branch is force-updated during\nfetch. This can be disabled through fetch.showForcedUpdates, but\nthe --show-forced-updates option guarantees this check occurs.\nSee git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --no-show-forced-updates"}, {"role": "assistant", "content": "By default, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates\nto false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates\nbefore attempting a fast-forward update. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -4  --ipv4"}, {"role": "assistant", "content": "Use IPv4 addresses only, ignoring IPv6 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -6  --ipv6"}, {"role": "assistant", "content": "Use IPv6 addresses only, ignoring IPv4 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  <repository>"}, {"role": "assistant", "content": "The \"remote\" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  <group>"}, {"role": "assistant", "content": "A name referring to a list of repositories as the value\nof remotes.<group> in the configuration file.\n(See git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  <refspec>"}, {"role": "assistant", "content": "Specifies which refs to fetch and which local refs to update.\nWhen no <refspec>s appear on the command line, the refs to fetch\nare read from remote.<repository>.fetch variables instead\n(see CONFIGURED REMOTE-TRACKING BRANCHES below). The format of a <refspec> parameter is an optional plus + , followed by the source <src>, followed\nby a colon : , followed by the destination ref <dst>.\nThe colon can be omitted when <dst> is empty.  <src> is\ntypically a ref, but it can also be a fully spelled hex object\nname. A <refspec> may contain a * in its <src> to indicate a simple pattern\nmatch. Such a refspec functions like a glob that matches any ref with the\nsame prefix. A pattern <refspec> must have a * in both the <src> and\n<dst>. It will map refs to the destination by replacing the * with the\ncontents matched from the source. If a refspec is prefixed by ^ , it will be interpreted as a negative\nrefspec. Rather than specifying which refs to fetch or which local refs to\nupdate, such a refspec will instead specify refs to exclude. A ref will be\nconsidered to match if it matches at least one positive refspec, and does\nnot match any negative refspec. Negative refspecs can be useful to restrict\nthe scope of a pattern refspec so that it will not include specific refs.\nNegative refspecs can themselves be pattern refspecs. However, they may only\ncontain a <src> and do not specify a <dst>. Fully spelled out hex object\nnames are also not supported. tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag> ;\nit requests fetching everything up to the given tag. The remote ref that matches <src>\nis fetched, and if <dst> is not an empty string, an attempt\nis made to update the local ref that matches it. Whether that update is allowed without --force depends on the ref\nnamespace it’s being fetched to, the type of object being fetched, and\nwhether the update is considered to be a fast-forward. Generally, the\nsame rules apply for fetching as when pushing, see the <refspec>... section of git-push for what those are. Exceptions to those\nrules particular to git fetch are noted below. Until Git version 2.20, and unlike when pushing with git-push , any updates to refs/tags/* would be accepted\nwithout + in the refspec (or --force ). When fetching, we promiscuously\nconsidered all tag updates from a remote to be forced fetches.  Since\nGit version 2.20, fetching to update refs/tags/* works the same way\nas when pushing. I.e. any updates will be rejected without + in the\nrefspec (or --force ). Unlike when pushing with git-push , any updates outside of refs/{tags,heads}/* will be accepted without + in the refspec (or --force ), whether that’s swapping e.g. a tree object for a blob, or\na commit for another commit that doesn’t have the previous commit as\nan ancestor etc. Unlike when pushing with git-push , there is no\nconfiguration which’ll amend these rules, and nothing like a pre-fetch hook analogous to the pre-receive hook. As with pushing with git-push , all of the rules described\nabove about what’s not allowed as an update can be overridden by\nadding an optional leading + to a refspec (or using the --force command line option). The only exception to this is that no amount of\nforcing will make the refs/heads/* namespace accept a non-commit\nobject. Note When the remote branch you want to fetch is known to\nbe rewound and rebased regularly, it is expected that\nits new tip will not be a descendant of its previous tip\n(as stored in your remote-tracking branch the last time\nyou fetched).  You would want\nto use the + sign to indicate non-fast-forward updates\nwill be needed for such branches.  There is no way to\ndetermine or declare that a branch will be made available\nin a repository with this behavior; the pulling user simply\nmust know this is the expected usage pattern for a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --stdin"}, {"role": "assistant", "content": "Read refspecs, one per line, from stdin in addition to those provided\nas arguments. The \"tag <name>\" format is not supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See git-clone for\ndetails. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn’t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "REMOTES The name of one of the following can be used instead\nof a URL as <repository> argument: a remote in the Git configuration file: $GIT_DIR/config , a file in the $GIT_DIR/remotes directory, or a file in the $GIT_DIR/branches directory. All of these also allow you to omit the refspec from the command line\nbecause they each contain a refspec which git will use by default. Named remote in configuration file You can choose to provide the name of a remote which you had previously\nconfigured using git-remote , git-config or even by a manual edit to the $GIT_DIR/config file.  The URL of\nthis remote will be used to access the repository.  The refspec\nof this remote will be used by default when you do\nnot provide a refspec on the command line.  The entry in the\nconfig file would appear like this: [remote \"<name>\"]\n\t\turl = <URL>\n\t\tpushurl = <pushurl>\n\t\tpush = <refspec>\n\t\tfetch = <refspec> The <pushurl> is used for pushes only. It is optional and defaults\nto <URL> . Pushing to a remote affects all defined pushurls or all\ndefined urls if no pushurls are defined. Fetch, however, will only\nfetch from the first defined url if multiple urls are defined. Named file in $GIT_DIR/remotes You can choose to provide the name of a\nfile in $GIT_DIR/remotes .  The URL\nin this file will be used to access the repository.  The refspec\nin this file will be used as default when you do not\nprovide a refspec on the command line.  This file should have the\nfollowing format: URL: one of the above URL formats\n\tPush: <refspec>\n\tPull: <refspec> Push: lines are used by git push and Pull: lines are used by git pull and git fetch .\nMultiple Push: and Pull: lines may\nbe specified for additional branch mappings. Named file in $GIT_DIR/branches You can choose to provide the name of a\nfile in $GIT_DIR/branches .\nThe URL in this file will be used to access the repository.\nThis file should have the following format: <URL>#<head> <URL> is required; #<head> is optional. Depending on the operation, git will use one of the following\nrefspecs, if you don’t provide one on the command line. <branch> is the name of this file in $GIT_DIR/branches and <head> defaults to master . git fetch uses: refs/heads/<head>:refs/heads/<branch> git push uses: HEAD:refs/heads/<head>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "CONFIGURED REMOTE-TRACKING BRANCHES You often interact with the same remote repository by\nregularly and repeatedly fetching from it.  In order to keep track\nof the progress of such a remote repository, git fetch allows you\nto configure remote.<repository>.fetch configuration variables. Typically such a variable may look like this: [remote \"origin\"]\n\tfetch = +refs/heads/*:refs/remotes/origin/* This configuration is used in two ways: When git fetch is run without specifying what branches\nand/or tags to fetch on the command line, e.g. git fetch origin or git fetch , remote.<repository>.fetch values are used as\nthe refspecs—​they specify which refs to fetch and which local refs\nto update.  The example above will fetch\nall branches that exist in the origin (i.e. any ref that matches\nthe left-hand side of the value, refs/heads/* ) and update the\ncorresponding remote-tracking branches in the refs/remotes/origin/* hierarchy. When git fetch is run with explicit branches and/or tags\nto fetch on the command line, e.g. git fetch origin master , the\n<refspec>s given on the command line determine what are to be\nfetched (e.g. master in the example,\nwhich is a short-hand for master: , which in turn means\n\"fetch the master branch but I do not explicitly say what\nremote-tracking branch to update with it from the command line\"),\nand the example command will\nfetch only the master branch.  The remote.<repository>.fetch values determine which\nremote-tracking branch, if any, is updated.  When used in this\nway, the remote.<repository>.fetch values do not have any\neffect in deciding what gets fetched (i.e. the values are not\nused as refspecs when the command-line lists refspecs); they are\nonly used to decide where the refs that are fetched are stored\nby acting as a mapping. The latter use of the remote.<repository>.fetch values can be\noverridden by giving the --refmap=<refspec> parameter(s) on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "PRUNING Git has a default disposition of keeping data unless it’s explicitly\nthrown away; this extends to holding onto local references to branches\non remotes that have themselves deleted those branches. If left to accumulate, these stale references might make performance\nworse on big and busy repos that have a lot of branch churn, and\ne.g. make the output of commands like git branch -a --contains\n<commit> needlessly verbose, as well as impacting anything else\nthat’ll work with the complete set of known references. These remote-tracking references can be deleted as a one-off with\neither of: # While fetching\n$ git fetch --prune <name>\n\n# Only prune, don't fetch\n$ git remote prune <name> To prune references as part of your normal workflow without needing to\nremember to run that, set fetch.prune globally, or remote.<name>.prune per-remote in the config. See git-config . Here’s where things get tricky and more specific. The pruning feature\ndoesn’t actually care about branches, instead it’ll prune local ←→\nremote-references as a function of the refspec of the remote (see <refspec> and CONFIGURED REMOTE-TRACKING BRANCHES above). Therefore if the refspec for the remote includes\ne.g. refs/tags/*:refs/tags/* , or you manually run e.g. git fetch\n--prune <name> \"refs/tags/*:refs/tags/*\" it won’t be stale remote\ntracking branches that are deleted, but any local tag that doesn’t\nexist on the remote. This might not be what you expect, i.e. you want to prune remote <name> , but also explicitly fetch tags from it, so when you fetch\nfrom it you delete all your local tags, most of which may not have\ncome from the <name> remote in the first place. So be careful when using this with a refspec like refs/tags/*:refs/tags/* , or any other refspec which might map\nreferences from multiple remotes to the same local namespace. Since keeping up-to-date with both branches and tags on the remote is\na common use-case the --prune-tags option can be supplied along with --prune to prune local tags that don’t exist on the remote, and\nforce-update those tags that differ. Tag pruning can also be enabled\nwith fetch.pruneTags or remote.<name>.pruneTags in the config. See git-config . The --prune-tags option is equivalent to having refs/tags/*:refs/tags/* declared in the refspecs of the remote. This\ncan lead to some seemingly strange interactions: # These both fetch tags\n$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'\n$ git fetch --no-tags --prune-tags origin The reason it doesn’t error out when provided without --prune or its\nconfig versions is for flexibility of the configured versions, and to\nmaintain a 1=1 mapping between what the command line flags do, and\nwhat the configuration versions do. It’s reasonable to e.g. configure fetch.pruneTags=true in ~/.gitconfig to have tags pruned whenever git fetch --prune is\nrun, without making every invocation of git fetch without --prune an error. Pruning tags with --prune-tags also works when fetching a URL\ninstead of a named remote. These will all prune tags not found on\norigin: $ git fetch origin --prune --prune-tags\n$ git fetch origin --prune 'refs/tags/*:refs/tags/*'\n$ git fetch <url-of-origin> --prune --prune-tags\n$ git fetch <url-of-origin> --prune 'refs/tags/*:refs/tags/*'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  flag"}, {"role": "assistant", "content": "A single character indicating the status of the ref: (space) for a successfully fetched fast-forward; + for a successful forced update; - for a successfully pruned ref; t for a successful tag update; * for a successfully fetched new ref; ! for a ref that was rejected or failed to update; and = for a ref that was up to date and did not need fetching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  summary"}, {"role": "assistant", "content": "For a successfully fetched ref, the summary shows the old and new\nvalues of the ref in a form suitable for using as an argument to git log (this is <old>..<new> in most cases, and <old>...<new> for forced non-fast-forward updates)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  from"}, {"role": "assistant", "content": "The name of the remote ref being fetched from, minus its refs/<type>/ prefix. In the case of deletion, the name of\nthe remote ref is \"(none)\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  to"}, {"role": "assistant", "content": "The name of the local ref being updated, minus its refs/<type>/ prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  reason"}, {"role": "assistant", "content": "A human-readable explanation. In the case of successfully fetched\nrefs, no explanation is needed. For a failed ref, the reason for\nfailure is described."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  (space)"}, {"role": "assistant", "content": "for a successfully fetched fast-forward;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  +"}, {"role": "assistant", "content": "for a successful forced update;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -"}, {"role": "assistant", "content": "for a successfully pruned ref;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  t"}, {"role": "assistant", "content": "for a successful tag update;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  *"}, {"role": "assistant", "content": "for a successfully fetched new ref;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  !"}, {"role": "assistant", "content": "for a ref that was rejected or failed to update; and"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  ="}, {"role": "assistant", "content": "for a ref that was up to date and did not need fetching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "EXAMPLES Update the remote-tracking branches: $ git fetch origin The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace,\nunless the remote.<repository>.fetch option is used to specify a\nnon-default refspec. Using refspecs explicitly: $ git fetch origin +seen:seen maint:tmp This updates (or creates, as necessary) branches seen and tmp in\nthe local repository by fetching from the branches (respectively) seen and maint from the remote repository. The seen branch will be updated even if it does not fast-forward,\nbecause it is prefixed with a plus sign; tmp will not be. Peek at a remote’s branch, without configuring the remote in your local\nrepository: $ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n$ git log FETCH_HEAD The first command fetches the maint branch from the repository at git://git.kernel.org/pub/scm/git/git.git and the second command uses FETCH_HEAD to examine the branch with git-log .  The fetched\nobjects will eventually be removed by git’s built-in housekeeping (see git-gc )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "SECURITY The fetch and push protocols are not designed to prevent one side from\nstealing data from the other repository that was not intended to be\nshared. If you have private data that you need to protect from a malicious\npeer, your best option is to store it in another repository. This applies\nto both clients and servers. In particular, namespaces on a server are not\neffective for read access control; you should only grant read access to a\nnamespace to clients that you would trust with read access to the entire\nrepository. The known attack vectors are as follows: The victim sends \"have\" lines advertising the IDs of objects it has that\nare not explicitly intended to be shared but can be used to optimize the\ntransfer if the peer also has them. The attacker chooses an object ID X\nto steal and sends a ref to X, but isn’t required to send the content of\nX because the victim already has it. Now the victim believes that the\nattacker has X, and it sends the content of X back to the attacker\nlater. (This attack is most straightforward for a client to perform on a\nserver, by creating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to perform it\non a client is to \"merge\" X into a public branch and hope that the user\ndoes additional work on this branch and pushes it back to the server\nwithout noticing the merge.) As in #1, the attacker chooses an object ID X to steal. The victim sends\nan object Y that the attacker already has, and the attacker falsely\nclaims to have X and not Y, so the victim sends Y as a delta against X.\nThe delta reveals regions of X that are similar to Y to the attacker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.recurseSubmodules"}, {"role": "assistant", "content": "This option controls whether git fetch (and the underlying fetch\nin git pull ) will recursively fetch into populated submodules.\nThis option can be set either to a boolean value or to on-demand .\nSetting it to a boolean changes the behavior of fetch and pull to\nrecurse unconditionally into submodules when set to true or to not\nrecurse at all when set to false. When set to on-demand , fetch and\npull will only recurse into a populated submodule when its\nsuperproject retrieves a commit that updates the submodule’s\nreference.\nDefaults to on-demand , or to the value of submodule.recurse if set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.fsckObjects"}, {"role": "assistant", "content": "If it is set to true, git-fetch-pack will check all fetched\nobjects. See transfer.fsckObjects for what’s\nchecked. Defaults to false. If not set, the value of transfer.fsckObjects is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.fsck.<msg-id>"}, {"role": "assistant", "content": "Acts like fsck.<msg-id> , but is used by git-fetch-pack instead of git-fsck . See\nthe fsck.<msg-id> documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.fsck.skipList"}, {"role": "assistant", "content": "Acts like fsck.skipList , but is used by git-fetch-pack instead of git-fsck . See\nthe fsck.skipList documentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.unpackLimit"}, {"role": "assistant", "content": "If the number of objects fetched over the Git native\ntransfer is below this\nlimit, then the objects will be unpacked into loose object\nfiles. However if the number of received objects equals or\nexceeds this limit then the received pack will be stored as\na pack, after adding any missing delta bases.  Storing the\npack from a push can make the push operation complete faster,\nespecially on slow filesystems.  If not set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.prune"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the --prune option was given on the command line.  See also remote.<name>.prune and the PRUNING section of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.pruneTags"}, {"role": "assistant", "content": "If true, fetch will automatically behave as if the refs/tags/*:refs/tags/* refspec was provided when pruning,\nif not set already. This allows for setting both this option\nand fetch.prune to maintain a 1=1 mapping to upstream\nrefs. See also remote.<name>.pruneTags and the PRUNING\nsection of git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.all"}, {"role": "assistant", "content": "If true, fetch will attempt to update all available remotes.\nThis behavior can be overridden by passing --no-all or by\nexplicitly specifying one or more remote(s) to fetch from.\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.output"}, {"role": "assistant", "content": "Control how ref update status is printed. Valid values are full and compact . Default value is full . See the\nOUTPUT section in git-fetch for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.negotiationAlgorithm"}, {"role": "assistant", "content": "Control how information about the commits in the local repository\nis sent when negotiating the contents of the packfile to be sent by\nthe server.  Set to \"consecutive\" to use an algorithm that walks\nover consecutive commits checking each one.  Set to \"skipping\" to\nuse an algorithm that skips commits in an effort to converge\nfaster, but may result in a larger-than-necessary packfile; or set\nto \"noop\" to not send any information at all, which will almost\ncertainly result in a larger-than-necessary packfile, but will skip\nthe negotiation step.  Set to \"default\" to override settings made\npreviously and use the default behaviour.  The default is normally\n\"consecutive\", but if feature.experimental is true, then the\ndefault is \"skipping\".  Unknown values will cause git fetch to\nerror out. See also the --negotiate-only and --negotiation-tip options to git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.showForcedUpdates"}, {"role": "assistant", "content": "Set to false to enable --no-show-forced-updates in git-fetch and git-pull commands.\nDefaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.parallel"}, {"role": "assistant", "content": "Specifies the maximal number of fetch operations to be run in parallel\nat a time (submodules, or remotes when the --multiple option of git-fetch is in effect). A value of 0 will give some reasonable default. If unset, it defaults to 1. For submodules, this setting can be overridden using the submodule.fetchJobs config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.writeCommitGraph"}, {"role": "assistant", "content": "Set to true to write a commit-graph after every git fetch command\nthat downloads a pack-file from a remote. Using the --split option,\nmost executions will create a very small commit-graph file on top of\nthe existing commit-graph file(s). Occasionally, these files will\nmerge and the write may take longer. Having an updated commit-graph\nfile helps performance of many Git commands, including git merge-base , git push -f , and git log --graph . Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.bundleURI"}, {"role": "assistant", "content": "This value stores a URI for downloading Git object data from a bundle\nURI before performing an incremental fetch from the origin Git server.\nThis is similar to how the --bundle-uri option behaves in git-clone . git clone --bundle-uri will set the fetch.bundleURI value if the supplied bundle URI contains a bundle\nlist that is organized for incremental fetches. If you modify this value and your repository has a fetch.bundleCreationToken value, then remove that fetch.bundleCreationToken value before fetching from\nthe new bundle URI."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.bundleCreationToken"}, {"role": "assistant", "content": "When using fetch.bundleURI to fetch incrementally from a bundle\nlist that uses the \"creationToken\" heuristic, this config value\nstores the maximum creationToken value of the downloaded bundles.\nThis value is used to prevent downloading bundles in the future\nif the advertised creationToken is not strictly larger than this\nvalue. The creation token values are chosen by the provider serving the specific\nbundle URI. If you modify the URI at fetch.bundleURI , then be sure to\nremove the value for the fetch.bundleCreationToken value before fetching."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "BUGS Using --recurse-submodules can only fetch new commits in submodules that are\npresent locally e.g. in $GIT_DIR/modules/ . If the upstream adds a new\nsubmodule, that submodule cannot be fetched until it is cloned e.g. by git\nsubmodule update . This is expected to be fixed in a future Git version."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "NAME git-pull - Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "SYNOPSIS git pull [<options>] [<repository> [<refspec>…​]]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "DESCRIPTION Incorporates changes from a remote repository into the current branch.\nIf the current branch is behind the remote, then by default it will\nfast-forward the current branch to match the remote.  If the current\nbranch and the remote have diverged, the user needs to specify how to\nreconcile the divergent branches with --rebase or --no-rebase (or\nthe corresponding configuration option in pull.rebase ). More precisely, git pull runs git fetch with the given parameters\nand then depending on configuration options or command line flags,\nwill call either git rebase or git merge to reconcile diverging\nbranches. <repository> should be the name of a remote repository as\npassed to git-fetch .  <refspec> can name an\narbitrary remote ref (for example, the name of a tag) or even\na collection of refs with corresponding remote-tracking branches\n(e.g., refs/heads/*:refs/remotes/origin/*),\nbut usually it is the name of a branch in the remote repository. Default values for <repository> and <branch> are read from the\n\"remote\" and \"merge\" configuration for the current branch\nas set by git-branch --track . Assume the following history exists and the current branch is\n\" master \": A---B---C master on origin\n\t /\n    D---E---F---G master\n\t^\n\torigin/master in your repository Then \" git pull \" will fetch and replay the changes from the remote master branch since it diverged from the local master (i.e., E )\nuntil its current commit ( C ) on top of master and record the\nresult in a new commit along with the names of the two parent commits\nand a log message from the user describing the changes. A---B---C origin/master\n\t /         \\\n    D---E---F---G---H master See git-merge for details, including how conflicts\nare presented and handled. In Git 1.7.0 or later, to cancel a conflicting merge, use git reset --merge . Warning : In older versions of Git, running git pull with uncommitted changes is discouraged: while possible, it leaves you\nin a state that may be hard to back out of in the case of a conflict. If any of the remote changes overlap with local uncommitted changes,\nthe merge will be automatically canceled and the work tree untouched.\nIt is generally best to get any local changes in working order before\npulling or stash them away with git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -q  --quiet"}, {"role": "assistant", "content": "This is passed to both underlying git-fetch to squelch reporting of\nduring transfer, and underlying git-merge to squelch output during\nmerging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -v  --verbose"}, {"role": "assistant", "content": "Pass --verbose to git-fetch and git-merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --[no-]recurse-submodules[=(yes|on-demand|no)]"}, {"role": "assistant", "content": "This option controls if new commits of populated submodules should\nbe fetched, and if the working trees of active submodules should be\nupdated, too (see git-fetch , git-config and gitmodules ). If the checkout is done via rebase, local submodule commits are rebased as well. If the update is done via merge, the submodule conflicts are resolved and checked out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --commit  --no-commit"}, {"role": "assistant", "content": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\nOnly useful when merging. With --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing. Note that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --edit  -e  --no-edit"}, {"role": "assistant", "content": "Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged). Older scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge . To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the merge message will be cleaned up before\ncommitting. See git-commit for more details. In addition, if\nthe <mode> is given a value of scissors , scissors will be appended\nto MERGE_MSG before being passed on to the commit machinery in the\ncase of a merge conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --ff-only"}, {"role": "assistant", "content": "Only update to the new history if there is no divergent local\nhistory.  This is the default when no method for reconciling\ndivergent histories is provided (via the --rebase=* flags)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --ff  --no-ff"}, {"role": "assistant", "content": "When merging rather than rebasing, specifies how a merge is\nhandled when the merged-in history is already a descendant of\nthe current history.  If merging is requested, --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed. With --ff , when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit. With --no-ff , create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --log[=<n>]  --no-log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg .\nOnly useful when merging. With --no-log do not list one-line descriptions from the\nactual commits being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --signoff  --no-signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See https://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project. The --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --stat  -n  --no-stat"}, {"role": "assistant", "content": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat. With -n or --no-stat do not show a diffstat at the end of the\nmerge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --squash  --no-squash"}, {"role": "assistant", "content": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD , or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus). With --no-squash perform the merge and commit the result. This\noption can be used to override --squash. With --squash, --commit is not allowed, and will fail. Only useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --[no-]verify"}, {"role": "assistant", "content": "By default, the pre-merge and commit-msg hooks are run.\nWhen --no-verify is given, these are bypassed.\nSee also githooks .\nOnly useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead ( ort when merging a single head, octopus otherwise)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -X <option>  --strategy-option=<option>"}, {"role": "assistant", "content": "Pass merge strategy specific option through to the merge\nstrategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --verify-signatures  --no-verify-signatures"}, {"role": "assistant", "content": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted. Only useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --summary  --no-summary"}, {"role": "assistant", "content": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --autostash  --no-autostash"}, {"role": "assistant", "content": "Automatically create a temporary stash entry before the operation\nbegins, record it in the ref MERGE_AUTOSTASH and apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --allow-unrelated-histories"}, {"role": "assistant", "content": "By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added. Only useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -r  --rebase[=(false|true|merges|interactive)]"}, {"role": "assistant", "content": "When true, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that information\nto avoid rebasing non-local changes. When set to merges , rebase using git rebase --rebase-merges so that\nthe local merge commits are included in the rebase (see git-rebase for details). When false, merge the upstream branch into the current branch. When interactive , enable the interactive mode of rebase. See pull.rebase , branch.<name>.rebase and branch.autoSetupRebase in git-config if you want to make git pull always use --rebase instead of merging. Note This is a potentially dangerous mode of operation.\nIt rewrites history, which does not bode well when you\npublished that history already.  Do not use this option\nunless you have read git-rebase carefully."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --no-rebase"}, {"role": "assistant", "content": "This is shorthand for --rebase=false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --[no-]all"}, {"role": "assistant", "content": "Fetch all remotes. This overrides the configuration variable fetch.all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -a  --append"}, {"role": "assistant", "content": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD .  Without this\noption old data in .git/FETCH_HEAD will be overwritten."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --atomic"}, {"role": "assistant", "content": "Use an atomic transaction to update local refs. Either all refs are\nupdated, or on error, no refs are updated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --depth=<depth>"}, {"role": "assistant", "content": "Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see git-clone ), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --deepen=<depth>"}, {"role": "assistant", "content": "Similar to --depth, except it specifies the number of commits\nfrom the current shallow boundary instead of from the tip of\neach remote branch history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --shallow-since=<date>"}, {"role": "assistant", "content": "Deepen or shorten the history of a shallow repository to\ninclude all reachable commits after <date>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --shallow-exclude=<revision>"}, {"role": "assistant", "content": "Deepen or shorten the history of a shallow repository to\nexclude commits reachable from a specified remote branch or tag.\nThis option can be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --unshallow"}, {"role": "assistant", "content": "If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories. If the source repository is shallow, fetch as much as possible so that\nthe current repository has the same history as the source repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --update-shallow"}, {"role": "assistant", "content": "By default when fetching from a shallow repository, git fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accepts such\nrefs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --negotiation-tip=<commit|glob>"}, {"role": "assistant", "content": "By default, Git will report, to the server, commits reachable\nfrom all local refs to find common commits in an attempt to\nreduce the size of the to-be-received packfile. If specified,\nGit will only report commits reachable from the given tips.\nThis is useful to speed up fetches when the user knows which\nlocal ref is likely to have commits in common with the\nupstream ref being fetched. This option may be specified more than once; if so, Git will report\ncommits reachable from any of the given commits. The argument to this option may be a glob on ref names, a ref, or the (possibly\nabbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying\nthis option multiple times, one for each matching ref name. See also the fetch.negotiationAlgorithm and push.negotiate configuration variables documented in git-config , and the --negotiate-only option below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --negotiate-only"}, {"role": "assistant", "content": "Do not fetch anything from the server, and instead print the\nancestors of the provided --negotiation-tip=* arguments,\nwhich we have in common with the server. This is incompatible with --recurse-submodules=[yes|on-demand] .\nInternally this is used to implement the push.negotiate option, see git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --dry-run"}, {"role": "assistant", "content": "Show what would be done, without making any changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --porcelain"}, {"role": "assistant", "content": "Print the output to standard output in an easy-to-parse format for\nscripts. See section OUTPUT in git-fetch for details. This is incompatible with --recurse-submodules=[yes|on-demand] and takes\nprecedence over the fetch.output config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -f  --force"}, {"role": "assistant", "content": "When git fetch is used with <src>:<dst> refspec, it may\nrefuse to update the local branch as discussed\nin the <refspec> part of the git-fetch documentation.\nThis option overrides that check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -k  --keep"}, {"role": "assistant", "content": "Keep downloaded pack."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --prefetch"}, {"role": "assistant", "content": "Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -p  --prune"}, {"role": "assistant", "content": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --no-tags"}, {"role": "assistant", "content": "By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --refmap=<refspec>"}, {"role": "assistant", "content": "When fetching refs listed on the command line, use the\nspecified refspec (can be given more than once) to map the\nrefs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote\nrepository.  Providing an empty <refspec> to the --refmap option causes Git to ignore the configured\nrefspecs and rely entirely on the refspecs supplied as\ncommand-line arguments. See section on \"Configured Remote-tracking\nBranches\" for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -t  --tags"}, {"role": "assistant", "content": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -j  --jobs=<n>"}, {"role": "assistant", "content": "Number of parallel children to be used for all forms of fetching. If the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config ). Typically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --set-upstream"}, {"role": "assistant", "content": "If the remote is fetched successfully, add upstream\n(tracking) reference, used by argument-less git-pull and other commands. For more information,\nsee branch.<name>.merge and branch.<name>.remote in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --upload-pack <upload-pack>"}, {"role": "assistant", "content": "When given, and the repository to fetch from is handled\nby git fetch-pack , --exec=<upload-pack> is passed to\nthe command to specify non-default path for the command\nrun on the other end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -o <option>  --server-option=<option>"}, {"role": "assistant", "content": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --show-forced-updates"}, {"role": "assistant", "content": "By default, git checks if a branch is force-updated during\nfetch. This can be disabled through fetch.showForcedUpdates, but\nthe --show-forced-updates option guarantees this check occurs.\nSee git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --no-show-forced-updates"}, {"role": "assistant", "content": "By default, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates\nto false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates\nbefore attempting a fast-forward update. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -4  --ipv4"}, {"role": "assistant", "content": "Use IPv4 addresses only, ignoring IPv6 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -6  --ipv6"}, {"role": "assistant", "content": "Use IPv6 addresses only, ignoring IPv4 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  <repository>"}, {"role": "assistant", "content": "The \"remote\" repository that is the source of a fetch\nor pull operation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  <refspec>"}, {"role": "assistant", "content": "Specifies which refs to fetch and which local refs to update.\nWhen no <refspec>s appear on the command line, the refs to fetch\nare read from remote.<repository>.fetch variables instead\n(see the section \"CONFIGURED REMOTE-TRACKING BRANCHES\"\nin git-fetch ). The format of a <refspec> parameter is an optional plus + , followed by the source <src>, followed\nby a colon : , followed by the destination ref <dst>.\nThe colon can be omitted when <dst> is empty.  <src> is\ntypically a ref, but it can also be a fully spelled hex object\nname. A <refspec> may contain a * in its <src> to indicate a simple pattern\nmatch. Such a refspec functions like a glob that matches any ref with the\nsame prefix. A pattern <refspec> must have a * in both the <src> and\n<dst>. It will map refs to the destination by replacing the * with the\ncontents matched from the source. If a refspec is prefixed by ^ , it will be interpreted as a negative\nrefspec. Rather than specifying which refs to fetch or which local refs to\nupdate, such a refspec will instead specify refs to exclude. A ref will be\nconsidered to match if it matches at least one positive refspec, and does\nnot match any negative refspec. Negative refspecs can be useful to restrict\nthe scope of a pattern refspec so that it will not include specific refs.\nNegative refspecs can themselves be pattern refspecs. However, they may only\ncontain a <src> and do not specify a <dst>. Fully spelled out hex object\nnames are also not supported. tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag> ;\nit requests fetching everything up to the given tag. The remote ref that matches <src>\nis fetched, and if <dst> is not an empty string, an attempt\nis made to update the local ref that matches it. Whether that update is allowed without --force depends on the ref\nnamespace it’s being fetched to, the type of object being fetched, and\nwhether the update is considered to be a fast-forward. Generally, the\nsame rules apply for fetching as when pushing, see the <refspec>... section of git-push for what those are. Exceptions to those\nrules particular to git fetch are noted below. Until Git version 2.20, and unlike when pushing with git-push , any updates to refs/tags/* would be accepted\nwithout + in the refspec (or --force ). When fetching, we promiscuously\nconsidered all tag updates from a remote to be forced fetches.  Since\nGit version 2.20, fetching to update refs/tags/* works the same way\nas when pushing. I.e. any updates will be rejected without + in the\nrefspec (or --force ). Unlike when pushing with git-push , any updates outside of refs/{tags,heads}/* will be accepted without + in the refspec (or --force ), whether that’s swapping e.g. a tree object for a blob, or\na commit for another commit that doesn’t have the previous commit as\nan ancestor etc. Unlike when pushing with git-push , there is no\nconfiguration which’ll amend these rules, and nothing like a pre-fetch hook analogous to the pre-receive hook. As with pushing with git-push , all of the rules described\nabove about what’s not allowed as an update can be overridden by\nadding an optional leading + to a refspec (or using the --force command line option). The only exception to this is that no amount of\nforcing will make the refs/heads/* namespace accept a non-commit\nobject. Note When the remote branch you want to fetch is known to\nbe rewound and rebased regularly, it is expected that\nits new tip will not be a descendant of its previous tip\n(as stored in your remote-tracking branch the last time\nyou fetched).  You would want\nto use the + sign to indicate non-fast-forward updates\nwill be needed for such branches.  There is no way to\ndetermine or declare that a branch will be made available\nin a repository with this behavior; the pulling user simply\nmust know this is the expected usage pattern for a branch. Note There is a difference between listing multiple <refspec>\ndirectly on git pull command line and having multiple remote.<repository>.fetch entries in your configuration\nfor a <repository> and running a git pull command without any explicit <refspec> parameters.\n<refspec>s listed explicitly on the command line are always\nmerged into the current branch after fetching.  In other words,\nif you list more than one remote ref, git pull will create\nan Octopus merge.  On the other hand, if you do not list any\nexplicit <refspec> parameter on the command line, git pull will fetch all the <refspec>s it finds in the remote.<repository>.fetch configuration and merge\nonly the first <refspec> found into the current branch.\nThis is because making an\nOctopus from remote refs is rarely done, while keeping track\nof multiple remote heads in one-go by fetching more than one\nis often useful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See git-clone for\ndetails. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn’t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "REMOTES The name of one of the following can be used instead\nof a URL as <repository> argument: a remote in the Git configuration file: $GIT_DIR/config , a file in the $GIT_DIR/remotes directory, or a file in the $GIT_DIR/branches directory. All of these also allow you to omit the refspec from the command line\nbecause they each contain a refspec which git will use by default. Named remote in configuration file You can choose to provide the name of a remote which you had previously\nconfigured using git-remote , git-config or even by a manual edit to the $GIT_DIR/config file.  The URL of\nthis remote will be used to access the repository.  The refspec\nof this remote will be used by default when you do\nnot provide a refspec on the command line.  The entry in the\nconfig file would appear like this: [remote \"<name>\"]\n\t\turl = <URL>\n\t\tpushurl = <pushurl>\n\t\tpush = <refspec>\n\t\tfetch = <refspec> The <pushurl> is used for pushes only. It is optional and defaults\nto <URL> . Pushing to a remote affects all defined pushurls or all\ndefined urls if no pushurls are defined. Fetch, however, will only\nfetch from the first defined url if multiple urls are defined. Named file in $GIT_DIR/remotes You can choose to provide the name of a\nfile in $GIT_DIR/remotes .  The URL\nin this file will be used to access the repository.  The refspec\nin this file will be used as default when you do not\nprovide a refspec on the command line.  This file should have the\nfollowing format: URL: one of the above URL formats\n\tPush: <refspec>\n\tPull: <refspec> Push: lines are used by git push and Pull: lines are used by git pull and git fetch .\nMultiple Push: and Pull: lines may\nbe specified for additional branch mappings. Named file in $GIT_DIR/branches You can choose to provide the name of a\nfile in $GIT_DIR/branches .\nThe URL in this file will be used to access the repository.\nThis file should have the following format: <URL>#<head> <URL> is required; #<head> is optional. Depending on the operation, git will use one of the following\nrefspecs, if you don’t provide one on the command line. <branch> is the name of this file in $GIT_DIR/branches and <head> defaults to master . git fetch uses: refs/heads/<head>:refs/heads/<branch> git push uses: HEAD:refs/heads/<head>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  ort"}, {"role": "assistant", "content": "This is the default merge strategy when pulling or merging one\nbranch.  This strategy can only resolve two heads using a\n3-way merge algorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a merged\ntree of the common ancestors and uses that as the reference\ntree for the 3-way merge.  This has been reported to result in\nfewer merge conflicts without causing mismerges by tests done\non actual merge commits taken from Linux 2.6 kernel\ndevelopment history.  Additionally this strategy can detect\nand handle merges involving renames.  It does not make use of\ndetected copies.  The name for this algorithm is an acronym\n(\"Ostensibly Recursive’s Twin\") and came from the fact that it\nwas written as a replacement for the previous default\nalgorithm, recursive . The ort strategy can take the following options: ours This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it. theirs This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with. ignore-space-change ignore-all-space ignore-space-at-eol ignore-cr-at-eol Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way. renormalize This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details. no-renormalize Disables the renormalize option.  This overrides the merge.renormalize configuration variable. find-renames[=<n>] Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames . rename-threshold=<n> Deprecated synonym for find-renames=<n> . subtree[=<path>] This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  recursive"}, {"role": "assistant", "content": "This can only resolve two heads using a 3-way merge\nalgorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as\nthe reference tree for the 3-way merge.  This has been\nreported to result in fewer merge conflicts without\ncausing mismerges by tests done on actual merge commits\ntaken from Linux 2.6 kernel development history.\nAdditionally this can detect and handle merges involving\nrenames.  It does not make use of detected copies.  This was\nthe default strategy for resolving two heads from Git v0.99.9k\nuntil v2.33.0. The recursive strategy takes the same options as ort .  However,\nthere are three additional options that ort ignores (not documented\nabove) that are potentially useful with the recursive strategy: patience Deprecated synonym for diff-algorithm=patience . diff-algorithm=[patience|minimal|histogram|myers] Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting. no-renames Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  resolve"}, {"role": "assistant", "content": "This can only resolve two heads (i.e. the current branch\nand another branch you pulled from) using a 3-way merge\nalgorithm.  It tries to carefully detect criss-cross\nmerge ambiguities.  It does not handle renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  octopus"}, {"role": "assistant", "content": "This resolves cases with more than two heads, but refuses to do\na complex merge that needs manual resolution.  It is\nprimarily meant to be used for bundling topic branch\nheads together.  This is the default merge strategy when\npulling or merging more than one branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  ours"}, {"role": "assistant", "content": "This resolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches.  It is meant to\nbe used to supersede old development history of side\nbranches.  Note that this is different from the -Xours option to\nthe recursive merge strategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  subtree"}, {"role": "assistant", "content": "This is a modified ort strategy. When merging trees A and\nB, if B corresponds to a subtree of A, B is first adjusted to\nmatch the tree structure of A, instead of reading the trees at\nthe same level. This adjustment is also done to the common\nancestor tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  ours"}, {"role": "assistant", "content": "This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  theirs"}, {"role": "assistant", "content": "This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  ignore-space-change  ignore-all-space  ignore-space-at-eol  ignore-cr-at-eol"}, {"role": "assistant", "content": "Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  renormalize"}, {"role": "assistant", "content": "This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  no-renormalize"}, {"role": "assistant", "content": "Disables the renormalize option.  This overrides the merge.renormalize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  find-renames[=<n>]"}, {"role": "assistant", "content": "Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  rename-threshold=<n>"}, {"role": "assistant", "content": "Deprecated synonym for find-renames=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  subtree[=<path>]"}, {"role": "assistant", "content": "This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  patience"}, {"role": "assistant", "content": "Deprecated synonym for diff-algorithm=patience ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  diff-algorithm=[patience|minimal|histogram|myers]"}, {"role": "assistant", "content": "Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  no-renames"}, {"role": "assistant", "content": "Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "DEFAULT BEHAVIOUR Often people use git pull without giving any parameter.\nTraditionally, this has been equivalent to saying git pull\norigin .  However, when configuration branch.<name>.remote is\npresent while on branch <name> , that value is used instead of origin . In order to determine what URL to use to fetch from, the value\nof the configuration remote.<origin>.url is consulted\nand if there is not any such variable, the value on the URL: line\nin $GIT_DIR/remotes/<origin> is used. In order to determine what remote branches to fetch (and\noptionally store in the remote-tracking branches) when the command is\nrun without any refspec parameters on the command line, values\nof the configuration variable remote.<origin>.fetch are\nconsulted, and if there aren’t any, $GIT_DIR/remotes/<origin> is consulted and its Pull: lines are used.\nIn addition to the refspec formats described in the OPTIONS\nsection, you can have a globbing refspec that looks like this: refs/heads/*:refs/remotes/origin/* A globbing refspec must have a non-empty RHS (i.e. must store\nwhat were fetched in remote-tracking branches), and its LHS and RHS\nmust end with /* .  The above specifies that all remote\nbranches are tracked using remote-tracking branches in refs/remotes/origin/ hierarchy under the same name. The rule to determine which remote branch to merge after\nfetching is a bit involved, in order not to break backward\ncompatibility. If explicit refspecs were given on the command\nline of git pull , they are all merged. When no refspec was given on the command line, then git pull uses the refspec from the configuration or $GIT_DIR/remotes/<origin> .  In such cases, the following\nrules apply: If branch.<name>.merge configuration for the current\nbranch <name> exists, that is the name of the branch at the\nremote site that is merged. If the refspec is a globbing one, nothing is merged. Otherwise the remote branch of the first refspec is merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "EXAMPLES Update the remote-tracking branches for the repository\nyou cloned from, then merge one of them into your\ncurrent branch: $ git pull\n$ git pull origin Normally the branch merged in is the HEAD of the remote repository,\nbut the choice is determined by the branch.<name>.remote and\nbranch.<name>.merge options; see git-config for details. Merge into the current branch the remote branch next : $ git pull origin next This leaves a copy of next temporarily in FETCH_HEAD, and\nupdates the remote-tracking branch origin/next .\nThe same can be done by invoking fetch and merge: $ git fetch origin\n$ git merge origin/next If you tried a pull which resulted in complex conflicts and\nwould want to start over, you can recover with git reset ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "SECURITY The fetch and push protocols are not designed to prevent one side from\nstealing data from the other repository that was not intended to be\nshared. If you have private data that you need to protect from a malicious\npeer, your best option is to store it in another repository. This applies\nto both clients and servers. In particular, namespaces on a server are not\neffective for read access control; you should only grant read access to a\nnamespace to clients that you would trust with read access to the entire\nrepository. The known attack vectors are as follows: The victim sends \"have\" lines advertising the IDs of objects it has that\nare not explicitly intended to be shared but can be used to optimize the\ntransfer if the peer also has them. The attacker chooses an object ID X\nto steal and sends a ref to X, but isn’t required to send the content of\nX because the victim already has it. Now the victim believes that the\nattacker has X, and it sends the content of X back to the attacker\nlater. (This attack is most straightforward for a client to perform on a\nserver, by creating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to perform it\non a client is to \"merge\" X into a public branch and hope that the user\ndoes additional work on this branch and pushes it back to the server\nwithout noticing the merge.) As in #1, the attacker chooses an object ID X to steal. The victim sends\nan object Y that the attacker already has, and the attacker falsely\nclaims to have X and not Y, so the victim sends Y as a delta against X.\nThe delta reveals regions of X that are similar to Y to the attacker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "BUGS Using --recurse-submodules can only fetch new commits in already checked\nout submodules right now. When e.g. upstream added a new submodule in the\njust fetched commits of the superproject the submodule itself cannot be\nfetched, making it impossible to check out that submodule later without\nhaving to do a fetch again. This is expected to be fixed in a future Git\nversion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "NAME git-push - Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "SYNOPSIS git push [--all | --branches | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n\t   [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-q | --quiet] [-v | --verbose]\n\t   [-u | --set-upstream] [-o <string> | --push-option=<string>]\n\t   [--[no-]signed|--signed=(true|false|if-asked)]\n\t   [--force-with-lease[=<refname>[:<expect>]] [--force-if-includes]]\n\t   [--no-verify] [<repository> [<refspec>…​]]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "DESCRIPTION Updates remote refs using local refs, while sending objects\nnecessary to complete the given refs. You can make interesting things happen to a repository\nevery time you push into it, by setting up hooks there.  See\ndocumentation for git-receive-pack . When the command line does not specify where to push with the <repository> argument, branch.*.remote configuration for the\ncurrent branch is consulted to determine where to push.  If the\nconfiguration is missing, it defaults to origin . When the command line does not specify what to push with <refspec>... arguments or --all , --mirror , --tags options, the command finds\nthe default <refspec> by consulting remote.*.push configuration,\nand if it is not found, honors push.default configuration to decide\nwhat to push (See git-config for the meaning of push.default ). When neither the command-line nor the configuration specifies what to\npush, the default behavior is used, which corresponds to the simple value for push.default : the current branch is pushed to the\ncorresponding upstream branch, but as a safety measure, the push is\naborted if the upstream branch does not have the same name as the\nlocal one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  <repository>"}, {"role": "assistant", "content": "The \"remote\" repository that is the destination of a push\noperation.  This parameter can be either a URL\n(see the section GIT URLS below) or the name\nof a remote (see the section REMOTES below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  <refspec>…​"}, {"role": "assistant", "content": "Specify what destination ref to update with what source object.\nThe format of a <refspec> parameter is an optional plus + , followed by the source object <src>, followed\nby a colon : , followed by the destination ref <dst>. The <src> is often the name of the branch you would want to push, but\nit can be any arbitrary \"SHA-1 expression\", such as master~4 or HEAD (see gitrevisions ). The <dst> tells which ref on the remote side is updated with this\npush. Arbitrary expressions cannot be used here, an actual ref must\nbe named.\nIf git push [<repository>] without any <refspec> argument is set to\nupdate some ref at the destination with <src> with remote.<repository>.push configuration variable, :<dst> part can\nbe omitted—​such a push will update a ref that <src> normally updates\nwithout any <refspec> on the command line.  Otherwise, missing :<dst> means to update the same ref as the <src> . If <dst> doesn’t start with refs/ (e.g. refs/heads/master ) we will\ntry to infer where in refs/* on the destination <repository> it\nbelongs based on the type of <src> being pushed and whether <dst>\nis ambiguous. If <dst> unambiguously refers to a ref on the <repository> remote,\nthen push to that ref. If <src> resolves to a ref starting with refs/heads/ or refs/tags/,\nthen prepend that to <dst>. Other ambiguity resolutions might be added in the future, but for\nnow any other cases will error out with an error indicating what we\ntried, and depending on the advice.pushUnqualifiedRefname configuration (see git-config ) suggest what refs/\nnamespace you may have wanted to push to. The object referenced by <src> is used to update the <dst> reference\non the remote side. Whether this is allowed depends on where in refs/* the <dst> reference lives as described in detail below, in\nthose sections \"update\" means any modifications except deletes, which\nas noted after the next few sections are treated differently. The refs/heads/* namespace will only accept commit objects, and\nupdates only if they can be fast-forwarded. The refs/tags/* namespace will accept any kind of object (as\ncommits, trees and blobs can be tagged), and any updates to them will\nbe rejected. It’s possible to push any type of object to any namespace outside of refs/{tags,heads}/* . In the case of tags and commits, these will be\ntreated as if they were the commits inside refs/heads/* for the\npurposes of whether the update is allowed. I.e. a fast-forward of commits and tags outside refs/{tags,heads}/* is allowed, even in cases where what’s being fast-forwarded is not a\ncommit, but a tag object which happens to point to a new commit which\nis a fast-forward of the commit the last tag (or commit) it’s\nreplacing. Replacing a tag with an entirely different tag is also\nallowed, if it points to the same commit, as well as pushing a peeled\ntag, i.e. pushing the commit that existing tag object points to, or a\nnew tag object which an existing commit points to. Tree and blob objects outside of refs/{tags,heads}/* will be treated\nthe same way as if they were inside refs/tags/* , any update of them\nwill be rejected. All of the rules described above about what’s not allowed as an update\ncan be overridden by adding an the optional leading + to a refspec\n(or using --force command line option). The only exception to this\nis that no amount of forcing will make the refs/heads/* namespace\naccept a non-commit object. Hooks and configuration can also override\nor amend these rules, see e.g. receive.denyNonFastForwards in git-config and pre-receive and update in githooks . Pushing an empty <src> allows you to delete the <dst> ref from the\nremote repository. Deletions are always accepted without a leading + in the refspec (or --force ), except when forbidden by configuration\nor hooks. See receive.denyDeletes in git-config and pre-receive and update in githooks . The special refspec : (or +: to allow non-fast-forward updates)\ndirects Git to push \"matching\" branches: for every branch that exists on\nthe local side, the remote side is updated if a branch of the same name\nalready exists on the remote side. tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --all  --branches"}, {"role": "assistant", "content": "Push all branches (i.e. refs under refs/heads/ ); cannot be\nused with other <refspec>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --prune"}, {"role": "assistant", "content": "Remove remote branches that don’t have a local counterpart. For example\na remote branch tmp will be removed if a local branch with the same\nname doesn’t exist any more. This also respects refspecs, e.g. git push --prune remote refs/heads/*:refs/tmp/* would\nmake sure that remote refs/tmp/foo will be removed if refs/heads/foo doesn’t exist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --mirror"}, {"role": "assistant", "content": "Instead of naming each ref to push, specifies that all\nrefs under refs/ (which includes but is not\nlimited to refs/heads/ , refs/remotes/ , and refs/tags/ )\nbe mirrored to the remote repository.  Newly created local\nrefs will be pushed to the remote end, locally updated refs\nwill be force updated on the remote end, and deleted refs\nwill be removed from the remote end.  This is the default\nif the configuration option remote.<remote>.mirror is\nset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -n  --dry-run"}, {"role": "assistant", "content": "Do everything except actually send the updates."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --porcelain"}, {"role": "assistant", "content": "Produce machine-readable output.  The output status line for each ref\nwill be tab-separated and sent to stdout instead of stderr.  The full\nsymbolic names of the refs will be given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -d  --delete"}, {"role": "assistant", "content": "All listed refs are deleted from the remote repository. This is\nthe same as prefixing all refs with a colon."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --tags"}, {"role": "assistant", "content": "All refs under refs/tags are pushed, in\naddition to refspecs explicitly listed on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --follow-tags"}, {"role": "assistant", "content": "Push all the refs that would be pushed without this option,\nand also push annotated tags in refs/tags that are missing\nfrom the remote but are pointing at commit-ish that are\nreachable from the refs being pushed.  This can also be specified\nwith configuration variable push.followTags .  For more\ninformation, see push.followTags in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]signed  --signed=(true|false|if-asked)"}, {"role": "assistant", "content": "GPG-sign the push request to update refs on the receiving\nside, to allow it to be checked by the hooks and/or be\nlogged.  If false or --no-signed , no signing will be\nattempted.  If true or --signed , the push will fail if the\nserver does not support signed pushes.  If set to if-asked ,\nsign if and only if the server supports signed pushes.  The push\nwill also fail if the actual call to gpg --sign fails.  See git-receive-pack for the details on the receiving end."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]atomic"}, {"role": "assistant", "content": "Use an atomic transaction on the remote side if available.\nEither all refs are updated, or on error, no refs are updated.\nIf the server does not support atomic pushes the push will fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -o <option>  --push-option=<option>"}, {"role": "assistant", "content": "Transmit the given string to the server, which passes them to\nthe pre-receive as well as the post-receive hook. The given string\nmust not contain a NUL or LF character.\nWhen multiple --push-option=<option> are given, they are\nall sent to the other side in the order listed on the\ncommand line.\nWhen no --push-option=<option> is given from the command\nline, the values of configuration variable push.pushOption are used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --receive-pack=<git-receive-pack>  --exec=<git-receive-pack>"}, {"role": "assistant", "content": "Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]force-with-lease  --force-with-lease=<refname>  --force-with-lease=<refname>:<expect>"}, {"role": "assistant", "content": "Usually, \"git push\" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it. This option overrides this restriction if the current value of the\nremote ref is the expected value.  \"git push\" fails otherwise. Imagine that you have to rebase what you have already published.\nYou will have to bypass the \"must fast-forward\" rule in order to\nreplace the history you originally published with the rebased history.\nIf somebody else built on top of your original history while you are\nrebasing, the tip of the branch at the remote may advance with their\ncommit, and blindly pushing with --force will lose their work. This option allows you to say that you expect the history you are\nupdating is what you rebased and want to replace. If the remote ref\nstill points at the commit you specified, you can be sure that no\nother people did anything to the ref. It is like taking a \"lease\" on\nthe ref without explicitly locking it, and the remote ref is updated\nonly if the \"lease\" is still valid. --force-with-lease alone, without specifying the details, will protect\nall remote refs that are going to be updated by requiring their\ncurrent value to be the same as the remote-tracking branch we have\nfor them. --force-with-lease=<refname> , without specifying the expected value, will\nprotect the named ref (alone), if it is going to be updated, by\nrequiring its current value to be the same as the remote-tracking\nbranch we have for it. --force-with-lease=<refname>:<expect> will protect the named ref (alone),\nif it is going to be updated, by requiring its current value to be\nthe same as the specified value <expect> (which is allowed to be\ndifferent from the remote-tracking branch we have for the refname,\nor we do not even have to have such a remote-tracking branch when\nthis form is used).  If <expect> is the empty string, then the named ref\nmust not already exist. Note that all forms other than --force-with-lease=<refname>:<expect> that specifies the expected current value of the ref explicitly are\nstill experimental and their semantics may change as we gain experience\nwith this feature. \"--no-force-with-lease\" will cancel all the previous --force-with-lease on the\ncommand line. A general note on safety: supplying this option without an expected\nvalue, i.e. as --force-with-lease or --force-with-lease=<refname> interacts very badly with anything that implicitly runs git fetch on\nthe remote to be pushed to in the background, e.g. git fetch origin on your repository in a cronjob. The protection it offers over --force is ensuring that subsequent\nchanges your work wasn’t based on aren’t clobbered, but this is\ntrivially defeated if some background process is updating refs in the\nbackground. We don’t have anything except the remote tracking info to\ngo by as a heuristic for refs you’re expected to have seen & are\nwilling to clobber. If your editor or some other system is running git fetch in the\nbackground for you a way to mitigate this is to simply set up another\nremote: git remote add origin-push $(git config remote.origin.url)\ngit fetch origin-push Now when the background process runs git fetch origin the references\non origin-push won’t be updated, and thus commands like: git push --force-with-lease origin-push Will fail unless you manually run git fetch origin-push . This method\nis of course entirely defeated by something that runs git fetch\n--all , in that case you’d need to either disable it or do something\nmore tedious like: git fetch              # update 'master' from remote\ngit tag base master    # mark our base point\ngit rebase -i master   # rewrite some commits\ngit push --force-with-lease=master:base master:master I.e. create a base tag for versions of the upstream code that you’ve\nseen and are willing to overwrite, then rewrite history, and finally\nforce push changes to master if the remote version is still at base , regardless of what your local remotes/origin/master has been\nupdated to in the background. Alternatively, specifying --force-if-includes as an ancillary option\nalong with --force-with-lease[=<refname>] (i.e., without saying what\nexact commit the ref on the remote side must be pointing at, or which\nrefs on the remote side are being protected) at the time of \"push\" will\nverify if updates from the remote-tracking refs that may have been\nimplicitly updated in the background are integrated locally before\nallowing a forced update."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -f  --force"}, {"role": "assistant", "content": "Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected. This flag disables these checks, and can cause the remote repository\nto lose commits; use it with care. Note that --force applies to all the refs that are pushed, hence\nusing it with push.default set to matching or with multiple push\ndestinations configured with remote.*.push may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart).  To force a push to only\none branch, use a + in front of the refspec to push (e.g git push\norigin +master to force a push to the master branch). See the <refspec>... section above for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]force-if-includes"}, {"role": "assistant", "content": "Force an update only if the tip of the remote-tracking ref\nhas been integrated locally. This option enables a check that verifies if the tip of the\nremote-tracking ref is reachable from one of the \"reflog\" entries of\nthe local branch based in it for a rewrite. The check ensures that any\nupdates from the remote have been incorporated locally by rejecting the\nforced update if that is not the case. If the option is passed without specifying --force-with-lease , or\nspecified along with --force-with-lease=<refname>:<expect> , it is\na \"no-op\". Specifying --no-force-if-includes disables this behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --repo=<repository>"}, {"role": "assistant", "content": "This option is equivalent to the <repository> argument. If both\nare specified, the command-line argument takes precedence."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -u  --set-upstream"}, {"role": "assistant", "content": "For every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less git-pull and other commands. For more information,\nsee branch.<name>.merge in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]thin"}, {"role": "assistant", "content": "These options are passed to git-send-pack . A thin transfer\nsignificantly reduces the amount of sent data when the sender and\nreceiver share many of the same objects in common. The default is --thin ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -q  --quiet"}, {"role": "assistant", "content": "Suppress all output, including the listing of updated refs,\nunless an error occurs. Progress is not reported to the standard\nerror stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -v  --verbose"}, {"role": "assistant", "content": "Run verbosely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --no-recurse-submodules  --recurse-submodules=check|on-demand|only|no"}, {"role": "assistant", "content": "May be used to make sure all submodule commits used by the\nrevisions to be pushed are available on a remote-tracking branch.\nIf check is used Git will verify that all submodule commits that\nchanged in the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push will\nbe aborted and exit with non-zero status. If on-demand is used\nall submodules that changed in the revisions to be pushed will be\npushed. If on-demand was not able to push all necessary revisions it will\nalso be aborted and exit with non-zero status. If only is used all\nsubmodules will be pushed while the superproject is left\nunpushed. A value of no or using --no-recurse-submodules can be used\nto override the push.recurseSubmodules configuration variable when no\nsubmodule recursion is required. When using on-demand or only , if a submodule has a\n\"push.recurseSubmodules={on-demand,only}\" or \"submodule.recurse\" configuration,\nfurther recursion will occur. In this case, \"only\" is treated as \"on-demand\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --[no-]verify"}, {"role": "assistant", "content": "Toggle the pre-push hook (see githooks ).  The\ndefault is --verify, giving the hook a chance to prevent the\npush.  With --no-verify, the hook is bypassed completely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -4  --ipv4"}, {"role": "assistant", "content": "Use IPv4 addresses only, ignoring IPv6 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -6  --ipv6"}, {"role": "assistant", "content": "Use IPv6 addresses only, ignoring IPv4 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See git-clone for\ndetails. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn’t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "REMOTES The name of one of the following can be used instead\nof a URL as <repository> argument: a remote in the Git configuration file: $GIT_DIR/config , a file in the $GIT_DIR/remotes directory, or a file in the $GIT_DIR/branches directory. All of these also allow you to omit the refspec from the command line\nbecause they each contain a refspec which git will use by default. Named remote in configuration file You can choose to provide the name of a remote which you had previously\nconfigured using git-remote , git-config or even by a manual edit to the $GIT_DIR/config file.  The URL of\nthis remote will be used to access the repository.  The refspec\nof this remote will be used by default when you do\nnot provide a refspec on the command line.  The entry in the\nconfig file would appear like this: [remote \"<name>\"]\n\t\turl = <URL>\n\t\tpushurl = <pushurl>\n\t\tpush = <refspec>\n\t\tfetch = <refspec> The <pushurl> is used for pushes only. It is optional and defaults\nto <URL> . Pushing to a remote affects all defined pushurls or all\ndefined urls if no pushurls are defined. Fetch, however, will only\nfetch from the first defined url if multiple urls are defined. Named file in $GIT_DIR/remotes You can choose to provide the name of a\nfile in $GIT_DIR/remotes .  The URL\nin this file will be used to access the repository.  The refspec\nin this file will be used as default when you do not\nprovide a refspec on the command line.  This file should have the\nfollowing format: URL: one of the above URL formats\n\tPush: <refspec>\n\tPull: <refspec> Push: lines are used by git push and Pull: lines are used by git pull and git fetch .\nMultiple Push: and Pull: lines may\nbe specified for additional branch mappings. Named file in $GIT_DIR/branches You can choose to provide the name of a\nfile in $GIT_DIR/branches .\nThe URL in this file will be used to access the repository.\nThis file should have the following format: <URL>#<head> <URL> is required; #<head> is optional. Depending on the operation, git will use one of the following\nrefspecs, if you don’t provide one on the command line. <branch> is the name of this file in $GIT_DIR/branches and <head> defaults to master . git fetch uses: refs/heads/<head>:refs/heads/<branch> git push uses: HEAD:refs/heads/<head>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  flag"}, {"role": "assistant", "content": "A single character indicating the status of the ref: (space) for a successfully pushed fast-forward; + for a successful forced update; - for a successfully deleted ref; * for a successfully pushed new ref; ! for a ref that was rejected or failed to push; and = for a ref that was up to date and did not need pushing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  summary"}, {"role": "assistant", "content": "For a successfully pushed ref, the summary shows the old and new\nvalues of the ref in a form suitable for using as an argument to git log (this is <old>..<new> in most cases, and <old>...<new> for forced non-fast-forward updates). For a failed update, more details are given: rejected Git did not try to send the ref at all, typically because it\nis not a fast-forward and you did not force the update. remote rejected The remote end refused the update.  Usually caused by a hook\non the remote side, or because the remote repository has one\nof the following safety options in effect: receive.denyCurrentBranch (for pushes to the checked out\nbranch), receive.denyNonFastForwards (for forced\nnon-fast-forward updates), receive.denyDeletes or receive.denyDeleteCurrent .  See git-config . remote failure The remote end did not report the successful update of the ref,\nperhaps because of a temporary error on the remote side, a\nbreak in the network connection, or other transient error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  from"}, {"role": "assistant", "content": "The name of the local ref being pushed, minus its refs/<type>/ prefix. In the case of deletion, the\nname of the local ref is omitted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  to"}, {"role": "assistant", "content": "The name of the remote ref being updated, minus its refs/<type>/ prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  reason"}, {"role": "assistant", "content": "A human-readable explanation. In the case of successfully pushed\nrefs, no explanation is needed. For a failed ref, the reason for\nfailure is described."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  (space)"}, {"role": "assistant", "content": "for a successfully pushed fast-forward;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  +"}, {"role": "assistant", "content": "for a successful forced update;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -"}, {"role": "assistant", "content": "for a successfully deleted ref;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  *"}, {"role": "assistant", "content": "for a successfully pushed new ref;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  !"}, {"role": "assistant", "content": "for a ref that was rejected or failed to push; and"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  ="}, {"role": "assistant", "content": "for a ref that was up to date and did not need pushing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  rejected"}, {"role": "assistant", "content": "Git did not try to send the ref at all, typically because it\nis not a fast-forward and you did not force the update."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  remote rejected"}, {"role": "assistant", "content": "The remote end refused the update.  Usually caused by a hook\non the remote side, or because the remote repository has one\nof the following safety options in effect: receive.denyCurrentBranch (for pushes to the checked out\nbranch), receive.denyNonFastForwards (for forced\nnon-fast-forward updates), receive.denyDeletes or receive.denyDeleteCurrent .  See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  remote failure"}, {"role": "assistant", "content": "The remote end did not report the successful update of the ref,\nperhaps because of a temporary error on the remote side, a\nbreak in the network connection, or other transient error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "NOTE ABOUT FAST-FORWARDS When an update changes a branch (or more in general, a ref) that used to\npoint at commit A to point at another commit B, it is called a\nfast-forward update if and only if B is a descendant of A. In a fast-forward update from A to B, the set of commits that the original\ncommit A built on top of is a subset of the commits the new commit B\nbuilds on top of.  Hence, it does not lose any history. In contrast, a non-fast-forward update will lose history.  For example,\nsuppose you and somebody else started at the same commit X, and you built\na history leading to commit B while the other person built a history\nleading to commit A.  The history looks like this: B\n     /\n ---X---A Further suppose that the other person already pushed changes leading to A\nback to the original repository from which you two obtained the original\ncommit X. The push done by the other person updated the branch that used to point at\ncommit X to point at commit A.  It is a fast-forward. But if you try to push, you will attempt to update the branch (that\nnow points at A) with commit B.  This does not fast-forward.  If you did\nso, the changes introduced by commit A will be lost, because everybody\nwill now start building on top of B. The command by default does not allow an update that is not a fast-forward\nto prevent such loss of history. If you do not want to lose your work (history from X to B) or the work by\nthe other person (history from X to A), you would need to first fetch the\nhistory from the repository, create a history that contains changes done\nby both parties, and push the result back. You can perform \"git pull\", resolve potential conflicts, and \"git push\"\nthe result.  A \"git pull\" will create a merge commit C between commits A\nand B. B---C\n     /   /\n ---X---A Updating A with the resulting merge commit will fast-forward and your\npush will be accepted. Alternatively, you can rebase your change between X and B on top of A,\nwith \"git pull --rebase\", and push the result back.  The rebase will\ncreate a new commit D that builds the change between X and B on top of\nA. B   D\n     /   /\n ---X---A Again, updating A with this commit will fast-forward and your push will be\naccepted. There is another common situation where you may encounter non-fast-forward\nrejection when you try to push, and it is possible even when you are\npushing into a repository nobody else pushes into. After you push commit\nA yourself (in the first picture in this section), replace it with \"git\ncommit --amend\" to produce commit B, and you try to push it out, because\nforgot that you have pushed A out already. In such a case, and only if\nyou are certain that nobody in the meantime fetched your earlier commit A\n(and started building on top of it), you can run \"git push --force\" to\noverwrite it. In other words, \"git push --force\" is a method reserved for\na case where you do mean to lose history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push"}, {"role": "assistant", "content": "Works like git push <remote> , where <remote> is the\ncurrent branch’s remote (or origin , if no remote is\nconfigured for the current branch)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin"}, {"role": "assistant", "content": "Without additional configuration, pushes the current branch to\nthe configured upstream ( branch.<name>.merge configuration\nvariable) if it has the same name as the current branch, and\nerrors out without pushing otherwise. The default behavior of this command when no <refspec> is given can be\nconfigured by setting the push option of the remote, or the push.default configuration variable. For example, to default to pushing only the current branch to origin use git config remote.origin.push HEAD .  Any valid <refspec> (like\nthe ones in the examples below) can be configured as the default for git push origin ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin :"}, {"role": "assistant", "content": "Push \"matching\" branches to origin . See\n<refspec> in the OPTIONS section above for a\ndescription of \"matching\" branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin master"}, {"role": "assistant", "content": "Find a ref that matches master in the source repository\n(most likely, it would find refs/heads/master ), and update\nthe same ref (e.g. refs/heads/master ) in origin repository\nwith it.  If master did not exist remotely, it would be\ncreated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin HEAD"}, {"role": "assistant", "content": "A handy way to push the current branch to the same name on the\nremote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push mothership master:satellite/master dev:satellite/dev"}, {"role": "assistant", "content": "Use the source ref that matches master (e.g. refs/heads/master )\nto update the ref that matches satellite/master (most probably refs/remotes/satellite/master ) in the mothership repository;\ndo the same for dev and satellite/dev . See the section describing <refspec>... above for a discussion of\nthe matching semantics. This is to emulate git fetch run on the mothership using git\npush that is run in the opposite direction in order to integrate\nthe work done on satellite , and is often necessary when you can\nonly make connection in one way (i.e. satellite can ssh into\nmothership but mothership cannot initiate connection to satellite\nbecause the latter is behind a firewall or does not run sshd). After running this git push on the satellite machine, you would\nssh into the mothership and run git merge there to complete the\nemulation of git pull that were run on mothership to pull changes\nmade on satellite ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin HEAD:master"}, {"role": "assistant", "content": "Push the current branch to the remote ref matching master in the origin repository. This form is convenient to push the current\nbranch without thinking about its local name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin master:refs/heads/experimental"}, {"role": "assistant", "content": "Create the branch experimental in the origin repository\nby copying the current master branch.  This form is only\nneeded to create a new branch or tag in the remote repository when\nthe local name and the remote name are different; otherwise,\nthe ref name on its own will work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin :experimental"}, {"role": "assistant", "content": "Find a ref that matches experimental in the origin repository\n(e.g. refs/heads/experimental ), and delete it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  git push origin +dev:master"}, {"role": "assistant", "content": "Update the origin repository’s master branch with the dev branch,\nallowing non-fast-forward updates. This can leave unreferenced\ncommits dangling in the origin repository. Consider the\nfollowing situation, where a fast-forward is not possible: o---o---o---A---B  origin/master\n\t\t     \\\n\t\t      X---Y---Z  dev The above command would change the origin repository to A---B  (unnamed branch)\n\t\t     /\n\t    o---o---o---X---Y---Z  master Commits A and B would no longer belong to a branch with a symbolic name,\nand so would be unreachable.  As such, these commits would be removed by\na git gc command on the origin repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "SECURITY The fetch and push protocols are not designed to prevent one side from\nstealing data from the other repository that was not intended to be\nshared. If you have private data that you need to protect from a malicious\npeer, your best option is to store it in another repository. This applies\nto both clients and servers. In particular, namespaces on a server are not\neffective for read access control; you should only grant read access to a\nnamespace to clients that you would trust with read access to the entire\nrepository. The known attack vectors are as follows: The victim sends \"have\" lines advertising the IDs of objects it has that\nare not explicitly intended to be shared but can be used to optimize the\ntransfer if the peer also has them. The attacker chooses an object ID X\nto steal and sends a ref to X, but isn’t required to send the content of\nX because the victim already has it. Now the victim believes that the\nattacker has X, and it sends the content of X back to the attacker\nlater. (This attack is most straightforward for a client to perform on a\nserver, by creating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to perform it\non a client is to \"merge\" X into a public branch and hope that the user\ndoes additional work on this branch and pushes it back to the server\nwithout noticing the merge.) As in #1, the attacker chooses an object ID X to steal. The victim sends\nan object Y that the attacker already has, and the attacker falsely\nclaims to have X and not Y, so the victim sends Y as a delta against X.\nThe delta reveals regions of X that are similar to Y to the attacker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.autoSetupRemote"}, {"role": "assistant", "content": "If set to \"true\" assume --set-upstream on default push when no\nupstream tracking exists for the current branch; this option\ntakes effect with push.default options simple , upstream ,\nand current . It is useful if by default you want new branches\nto be pushed to the default remote (like the behavior of push.default=current ) and you also want the upstream tracking\nto be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to\nhave the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.default"}, {"role": "assistant", "content": "Defines the action git push should take if no refspec is\ngiven (whether from the command-line, config, or elsewhere).\nDifferent values are well-suited for\nspecific workflows; for instance, in a purely central workflow\n(i.e. the fetch source is equal to the push destination), upstream is probably what you want.  Possible values are: nothing - do not push anything (error out) unless a refspec is\ngiven. This is primarily meant for people who want to\navoid mistakes by always being explicit. current - push the current branch to update a branch with the same\nname on the receiving end.  Works in both central and non-central\nworkflows. upstream - push the current branch back to the branch whose\nchanges are usually integrated into the current branch (which is\ncalled @{upstream} ).  This mode only makes sense if you are\npushing to the same repository you would normally pull from\n(i.e. central workflow). tracking - This is a deprecated synonym for upstream . simple - push the current branch with the same name on the remote. If you are working on a centralized workflow (pushing to the same repository you\npull from, which is typically origin ), then you need to configure an upstream\nbranch with the same name. This mode is the default since Git 2.0, and is the safest option suited for\nbeginners. matching - push all branches having the same name on both ends.\nThis makes the repository you are pushing to remember the set of\nbranches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push\nto will have these two branches, and your local maint and master will be pushed there). To use this mode effectively, you have to make sure all the\nbranches you would push out are ready to be pushed out before\nrunning git push , as the whole point of this mode is to allow you\nto push all of the branches in one go.  If you usually finish work\non only one branch and push out the result, while other branches are\nunfinished, this mode is not for you.  Also this mode is not\nsuitable for pushing into a shared central repository, as other\npeople may add new branches there, or update the tip of existing\nbranches outside your control. This used to be the default, but not since Git 2.0 ( simple is the\nnew default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.followTags"}, {"role": "assistant", "content": "If set to true, enable --follow-tags option by default.  You\nmay override this configuration at time of push by specifying --no-follow-tags ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.gpgSign"}, {"role": "assistant", "content": "May be set to a boolean value, or the string if-asked . A true\nvalue causes all pushes to be GPG signed, as if --signed is\npassed to git-push . The string if-asked causes\npushes to be signed if the server supports it, as if --signed=if-asked is passed to git push . A false value may\noverride a value from a lower-priority config file. An explicit\ncommand-line flag always overrides this config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.pushOption"}, {"role": "assistant", "content": "When no --push-option=<option> argument is given from the\ncommand line, git push behaves as if each <value> of\nthis variable is given as --push-option=<value> . This is a multi-valued variable, and an empty value can be used in a\nhigher priority configuration file (e.g. .git/config in a\nrepository) to clear the values inherited from a lower priority\nconfiguration files (e.g. $HOME/.gitconfig ). Example:\n\n/etc/gitconfig\n  push.pushoption = a\n  push.pushoption = b\n\n~/.gitconfig\n  push.pushoption = c\n\nrepo/.git/config\n  push.pushoption =\n  push.pushoption = b\n\nThis will result in only b (a and c are cleared)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.recurseSubmodules"}, {"role": "assistant", "content": "May be \"check\", \"on-demand\", \"only\", or \"no\", with the same behavior\nas that of \"push --recurse-submodules\".\nIf not set, no is used by default, unless submodule.recurse is\nset (in which case a true value means on-demand )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.useForceIfIncludes"}, {"role": "assistant", "content": "If set to \"true\", it is equivalent to specifying --force-if-includes as an option to git-push in the command line. Adding --no-force-if-includes at the\ntime of push overrides this configuration setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.negotiate"}, {"role": "assistant", "content": "If set to \"true\", attempt to reduce the size of the packfile\nsent by rounds of negotiation in which the client and the\nserver attempt to find commits in common. If \"false\", Git will\nrely solely on the server’s ref advertisement to find commits\nin common."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.useBitmaps"}, {"role": "assistant", "content": "If set to \"false\", disable use of bitmaps for \"git push\" even if pack.useBitmaps is \"true\", without preventing other git operations\nfrom using bitmaps. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "NAME git-remote - Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "SYNOPSIS git remote [-v | --verbose] git remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=(fetch|push)] <name> <URL> git remote rename [--[no-]progress] <old> <new> git remote remove <name> git remote set-head <name> (-a | --auto | -d | --delete | <branch>) git remote set-branches [--add] <name> <branch>…​ git remote get-url [--push] [--all] <name> git remote set-url [--push] <name> <newurl> [<oldurl>] git remote set-url --add [--push] <name> <newurl> git remote set-url --delete [--push] <name> <URL> git remote [-v | --verbose] show [-n] <name>…​ git remote prune [-n | --dry-run] <name>…​ git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "DESCRIPTION Manage the set of repositories (\"remotes\") whose branches you track."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  -v  --verbose"}, {"role": "assistant", "content": "Be a little more verbose and show remote url after name.\nFor promisor remotes, also show which filters ( blob:none etc.)\nare configured.\nNOTE: This must be placed between remote and subcommand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  add"}, {"role": "assistant", "content": "Add a remote named <name> for the repository at\n<URL>.  The command git fetch <name> can then be used to create and\nupdate remote-tracking branches <name>/<branch>. With -f option, git fetch <name> is run immediately after\nthe remote information is set up. With --tags option, git fetch <name> imports every tag from the\nremote repository. With --no-tags option, git fetch <name> does not import tags from\nthe remote repository. By default, only tags on fetched branches are imported\n(see git-fetch ). With -t <branch> option, instead of the default glob\nrefspec for the remote to track all branches under\nthe refs/remotes/<name>/ namespace, a refspec to track only <branch> is created.  You can give more than one -t <branch> to track\nmultiple branches without grabbing all branches. With -m <master> option, a symbolic-ref refs/remotes/<name>/HEAD is set\nup to point at remote’s <master> branch. See also the set-head command. When a fetch mirror is created with --mirror=fetch , the refs will not\nbe stored in the refs/remotes/ namespace, but rather everything in refs/ on the remote will be directly mirrored into refs/ in the\nlocal repository. This option only makes sense in bare repositories,\nbecause a fetch would overwrite any local commits. When a push mirror is created with --mirror=push , then git push will always behave as if --mirror was passed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  rename"}, {"role": "assistant", "content": "Rename the remote named <old> to <new>. All remote-tracking branches and\nconfiguration settings for the remote are updated. In case <old> and <new> are the same, and <old> is a file under $GIT_DIR/remotes or $GIT_DIR/branches , the remote is converted to\nthe configuration file format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  remove  rm"}, {"role": "assistant", "content": "Remove the remote named <name>. All remote-tracking branches and\nconfiguration settings for the remote are removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  set-head"}, {"role": "assistant", "content": "Sets or deletes the default branch (i.e. the target of the\nsymbolic-ref refs/remotes/<name>/HEAD ) for\nthe named remote. Having a default branch for a remote is not required,\nbut allows the name of the remote to be specified in lieu of a specific\nbranch. For example, if the default branch for origin is set to master , then origin may be specified wherever you would normally\nspecify origin/master . With -d or --delete , the symbolic ref refs/remotes/<name>/HEAD is deleted. With -a or --auto , the remote is queried to determine its HEAD , then the\nsymbolic-ref refs/remotes/<name>/HEAD is set to the same branch. e.g., if the remote HEAD is pointed at next , git remote set-head origin -a will set\nthe symbolic-ref refs/remotes/origin/HEAD to refs/remotes/origin/next . This will\nonly work if refs/remotes/origin/next already exists; if not it must be\nfetched first. Use <branch> to set the symbolic-ref refs/remotes/<name>/HEAD explicitly. e.g., git\nremote set-head origin master will set the symbolic-ref refs/remotes/origin/HEAD to refs/remotes/origin/master . This will only work if refs/remotes/origin/master already exists; if not it must be fetched first."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  set-branches"}, {"role": "assistant", "content": "Changes the list of branches tracked by the named remote.\nThis can be used to track a subset of the available remote branches\nafter the initial setup for a remote. The named branches will be interpreted as if specified with the -t option on the git remote add command line. With --add , instead of replacing the list of currently tracked\nbranches, adds to that list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  get-url"}, {"role": "assistant", "content": "Retrieves the URLs for a remote. Configurations for insteadOf and pushInsteadOf are expanded here. By default, only the first URL is listed. With --push , push URLs are queried rather than fetch URLs. With --all , all URLs for the remote will be listed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  set-url"}, {"role": "assistant", "content": "Changes URLs for the remote. Sets first URL for remote <name> that matches\nregex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If\n<oldurl> doesn’t match any URL, an error occurs and nothing is changed. With --push , push URLs are manipulated instead of fetch URLs. With --add , instead of changing existing URLs, new URL is added. With --delete , instead of changing existing URLs, all URLs matching\nregex <URL> are deleted for remote <name>.  Trying to delete all\nnon-push URLs is an error. Note that the push URL and the fetch URL, even though they can\nbe set differently, must still refer to the same place.  What you\npushed to the push URL should be what you would see if you\nimmediately fetched from the fetch URL.  If you are trying to\nfetch from one place (e.g. your upstream) and push to another (e.g.\nyour publishing repository), use two separate remotes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  show"}, {"role": "assistant", "content": "Gives some information about the remote <name>. With -n option, the remote heads are not queried first with git ls-remote <name> ; cached information is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  prune"}, {"role": "assistant", "content": "Deletes stale references associated with <name>. By default, stale\nremote-tracking branches under <name> are deleted, but depending on\nglobal configuration and the configuration of the remote we might even\nprune local tags that haven’t been pushed there. Equivalent to git\nfetch --prune <name> , except that no new references will be fetched. See the PRUNING section of git-fetch for what it’ll prune\ndepending on various configuration. With --dry-run option, report what branches would be pruned, but do not\nactually prune them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  update"}, {"role": "assistant", "content": "Fetch updates for remotes or remote groups in the repository as defined by remotes.<group> . If neither group nor remote is specified on the command line,\nthe configuration parameter remotes.default will be used; if\nremotes.default is not defined, all remotes which do not have the\nconfiguration parameter remote.<name>.skipDefaultUpdate set to true will\nbe updated.  (See git-config ). With --prune option, run pruning against all the remotes that are updated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "DISCUSSION The remote configuration is achieved using the remote.origin.url and remote.origin.fetch configuration variables.  (See git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "EXIT STATUS On success, the exit status is 0 . When subcommands such as add , rename , and remove can’t find the\nremote in question, the exit status is 2 . When the remote already\nexists, the exit status is 3 . On any other error, the exit status may be any other non-zero value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories"}, {"role": "assistant", "content": "EXAMPLES Add a new remote, fetch, and check out a branch from it $ git remote\norigin\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n$ git remote\norigin\nstaging\n$ git fetch staging\n...\nFrom git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n * [new branch]      master     -> staging/master\n * [new branch]      staging-linus -> staging/staging-linus\n * [new branch]      staging-next -> staging/staging-next\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n  staging/master\n  staging/staging-linus\n  staging/staging-next\n$ git switch -c staging staging/master\n... Imitate git clone but track only selected branches $ mkdir project.git\n$ cd project.git\n$ git init\n$ git remote add -f -t master -m master origin git://example.com/git.git/\n$ git merge origin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules"}, {"role": "assistant", "content": "NAME git-submodule - Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules"}, {"role": "assistant", "content": "SYNOPSIS git submodule [--quiet] [--cached] git submodule [--quiet] add [<options>] [--] <repository> [<path>] git submodule [--quiet] status [--cached] [--recursive] [--] [<path>…​] git submodule [--quiet] init [--] [<path>…​] git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…​) git submodule [--quiet] update [<options>] [--] [<path>…​] git submodule [--quiet] set-branch [<options>] [--] <path> git submodule [--quiet] set-url [--] <path> <newurl> git submodule [--quiet] summary [<options>] [--] [<path>…​] git submodule [--quiet] foreach [--recursive] <command> git submodule [--quiet] sync [--recursive] [--] [<path>…​] git submodule [--quiet] absorbgitdirs [--] [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules"}, {"role": "assistant", "content": "DESCRIPTION Inspects, updates and manages submodules. For more information about submodules, see gitsubmodules ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  add [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]"}, {"role": "assistant", "content": "Add the given repository as a submodule at the given path\nto the changeset to be committed next to the current\nproject: the current project is termed the \"superproject\". <repository> is the URL of the new submodule’s origin repository.\nThis may be either an absolute URL, or (if it begins with ./\nor ../), the location relative to the superproject’s default remote\nrepository (Please note that to specify a repository foo.git which is located right next to a superproject bar.git , you’ll\nhave to use ../foo.git instead of ./foo.git - as one might expect\nwhen following the rules for relative URLs - because the evaluation\nof relative URLs in Git is identical to that of relative directories). The default remote is the remote of the remote-tracking branch\nof the current branch. If no such remote-tracking branch exists or\nthe HEAD is detached, \"origin\" is assumed to be the default remote.\nIf the superproject doesn’t have a default remote configured\nthe superproject is its own authoritative upstream and the current\nworking directory is used instead. The optional argument <path> is the relative location for the cloned\nsubmodule to exist in the superproject. If <path> is not given, the\ncanonical part of the source repository is used (\"repo\" for\n\"/path/to/repo.git\" and \"foo\" for \"host.xz:foo/.git\"). If <path>\nexists and is already a valid Git repository, then it is staged\nfor commit without cloning. The <path> is also used as the submodule’s\nlogical name in its configuration entries unless --name is used\nto specify a logical name. The given URL is recorded into .gitmodules for use by subsequent users\ncloning the superproject. If the URL is given relative to the\nsuperproject’s repository, the presumption is the superproject and\nsubmodule repositories will be kept together in the same relative\nlocation, and only the superproject’s URL needs to be provided.\ngit-submodule will correctly locate the submodule using the relative\nURL in .gitmodules ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  status [--cached] [--recursive] [--] [<path>…​]"}, {"role": "assistant", "content": "Show the status of the submodules. This will print the SHA-1 of the\ncurrently checked out commit for each submodule, along with the\nsubmodule path and the output of git describe for the\nSHA-1. Each SHA-1 will possibly be prefixed with - if the submodule is\nnot initialized, + if the currently checked out submodule commit\ndoes not match the SHA-1 found in the index of the containing\nrepository and U if the submodule has merge conflicts. If --cached is specified, this command will instead print the SHA-1\nrecorded in the superproject for each submodule. If --recursive is specified, this command will recurse into nested\nsubmodules, and show their status as well. If you are only interested in changes of the currently initialized\nsubmodules with respect to the commit recorded in the index or the HEAD, git-status and git-diff will provide that information\ntoo (and can also report changes to a submodule’s work tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  init [--] [<path>…​]"}, {"role": "assistant", "content": "Initialize the submodules recorded in the index (which were\nadded and committed elsewhere) by setting submodule.$name.url in .git/config , using the same setting from .gitmodules as\na template. If the URL is relative, it will be resolved using\nthe default remote. If there is no default remote, the current\nrepository will be assumed to be upstream. Optional <path> arguments limit which submodules will be initialized.\nIf no path is specified and submodule.active has been configured, submodules\nconfigured to be active will be initialized, otherwise all submodules are\ninitialized. It will also copy the value of submodule.$name.update , if present in\nthe .gitmodules file, to .git/config , but (1) this command does not\nalter existing information in .git/config , and (2) submodule.$name.update that is set to a custom command is not copied for security reasons. You can then customize the submodule clone URLs in .git/config for your local setup and proceed to git submodule update ;\nyou can also just use git submodule update --init without\nthe explicit init step if you do not intend to customize\nany submodule locations. See the add subcommand for the definition of default remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  deinit [-f|--force] (--all|[--] <path>…​)"}, {"role": "assistant", "content": "Unregister the given submodules, i.e. remove the whole submodule.$name section from .git/config together with their work\ntree. Further calls to git submodule update , git submodule foreach and git submodule sync will skip any unregistered submodules until\nthey are initialized again, so use this command if you don’t want to\nhave a local checkout of the submodule in your working tree anymore. When the command is run without pathspec, it errors out,\ninstead of deinit-ing everything, to prevent mistakes. If --force is specified, the submodule’s working tree will\nbe removed even if it contains local modifications. If you really want to remove a submodule from the repository and commit\nthat use git-rm instead. See gitsubmodules for removal\noptions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  update [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--filter <filter-spec>] [--] [<path>…​]"}, {"role": "assistant", "content": "Update the registered submodules to match what the superproject\nexpects by cloning missing submodules, fetching missing commits\nin submodules and updating the working tree of\nthe submodules. The \"updating\" can be done in several ways depending\non command line options and the value of submodule.<name>.update configuration variable. The command line option takes precedence over\nthe configuration variable. If neither is given, a checkout is performed.\n(note: what is in .gitmodules file is irrelevant at this point;\nsee git submodule init above for how .gitmodules is used).\nThe update procedures supported both from the command line as well as\nthrough the submodule.<name>.update configuration are: checkout the commit recorded in the superproject will be\nchecked out in the submodule on a detached HEAD. If --force is specified, the submodule will be checked out (using git checkout --force ), even if the commit specified\nin the index of the containing repository already matches the commit\nchecked out in the submodule. rebase the current branch of the submodule will be rebased\nonto the commit recorded in the superproject. merge the commit recorded in the superproject will be merged\ninto the current branch in the submodule. The following update procedures have additional limitations: custom command mechanism for running arbitrary commands with the\ncommit ID as an argument. Specifically, if the submodule.<name>.update configuration variable is set to !custom command , the object name of the commit recorded in the\nsuperproject for the submodule is appended to the custom command string and executed. Note that this mechanism is not supported in\nthe .gitmodules file or on the command line. none the submodule is not updated. This update procedure is not\nallowed on the command line. If the submodule is not yet initialized, and you just want to use the\nsetting as stored in .gitmodules , you can automatically initialize the\nsubmodule with the --init option. If --recursive is specified, this command will recurse into the\nregistered submodules, and update any nested submodules within. If --filter <filter-spec> is specified, the given partial clone filter will be\napplied to the submodule. See git-rev-list for details on filter\nspecifications."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  set-branch (-b|--branch) <branch> [--] <path>  set-branch (-d|--default) [--] <path>"}, {"role": "assistant", "content": "Sets the default remote tracking branch for the submodule. The --branch option allows the remote branch to be specified. The --default option removes the submodule.<name>.branch configuration\nkey, which causes the tracking branch to default to the remote HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  set-url [--] <path> <newurl>"}, {"role": "assistant", "content": "Sets the URL of the specified submodule to <newurl>. Then, it will\nautomatically synchronize the submodule’s new remote URL\nconfiguration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  summary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<path>…​]"}, {"role": "assistant", "content": "Show commit summary between the given commit (defaults to HEAD) and\nworking tree/index. For a submodule in question, a series of commits\nin the submodule between the given super project commit and the\nindex or working tree (switched by --cached ) are shown. If the option --files is given, show the series of commits in the submodule between\nthe index of the super project and the working tree of the submodule\n(this option doesn’t allow to use the --cached option or to provide an\nexplicit commit). Using the --submodule=log option with git-diff will provide that\ninformation too."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  foreach [--recursive] <command>"}, {"role": "assistant", "content": "Evaluates an arbitrary shell command in each checked out submodule.\nThe command has access to the variables $name, $sm_path, $displaypath,\n$sha1 and $toplevel:\n$name is the name of the relevant submodule section in .gitmodules ,\n$sm_path is the path of the submodule as recorded in the immediate\nsuperproject, $displaypath contains the relative path from the\ncurrent working directory to the submodules root directory,\n$sha1 is the commit as recorded in the immediate\nsuperproject, and $toplevel is the absolute path to the top-level\nof the immediate superproject.\nNote that to avoid conflicts with $PATH on Windows, the $path variable is now a deprecated synonym of $sm_path variable.\nAny submodules defined in the superproject but not checked out are\nignored by this command. Unless given --quiet , foreach prints the name\nof each submodule before evaluating the command.\nIf --recursive is given, submodules are traversed recursively (i.e.\nthe given shell command is evaluated in nested submodules as well).\nA non-zero return from the command in any submodule causes\nthe processing to terminate. This can be overridden by adding || : to the end of the command. As an example, the command below will show the path and currently\nchecked out commit for each submodule: git submodule foreach 'echo $sm_path `git rev-parse HEAD`'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  sync [--recursive] [--] [<path>…​]"}, {"role": "assistant", "content": "Synchronizes submodules' remote URL configuration setting\nto the value specified in .gitmodules . It will only affect those\nsubmodules which already have a URL entry in .git/config (that is the\ncase when they are initialized or freshly added). This is useful when\nsubmodule URLs change upstream and you need to update your local\nrepositories accordingly. git submodule sync synchronizes all submodules while git submodule sync -- A synchronizes submodule \"A\" only. If --recursive is specified, this command will recurse into the\nregistered submodules, and sync any nested submodules within."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  absorbgitdirs"}, {"role": "assistant", "content": "If a git directory of a submodule is inside the submodule,\nmove the git directory of the submodule into its superproject’s $GIT_DIR/modules path and then connect the git directory and\nits working directory by setting the core.worktree and adding\na .git file pointing to the git directory embedded in the\nsuperprojects git directory. A repository that was cloned independently and later added as a submodule or\nold setups have the submodules git directory inside the submodule instead of\nembedded into the superprojects git directory. This command is recursive by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  checkout"}, {"role": "assistant", "content": "the commit recorded in the superproject will be\nchecked out in the submodule on a detached HEAD. If --force is specified, the submodule will be checked out (using git checkout --force ), even if the commit specified\nin the index of the containing repository already matches the commit\nchecked out in the submodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  rebase"}, {"role": "assistant", "content": "the current branch of the submodule will be rebased\nonto the commit recorded in the superproject."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  merge"}, {"role": "assistant", "content": "the commit recorded in the superproject will be merged\ninto the current branch in the submodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  custom command"}, {"role": "assistant", "content": "mechanism for running arbitrary commands with the\ncommit ID as an argument. Specifically, if the submodule.<name>.update configuration variable is set to !custom command , the object name of the commit recorded in the\nsuperproject for the submodule is appended to the custom command string and executed. Note that this mechanism is not supported in\nthe .gitmodules file or on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  none"}, {"role": "assistant", "content": "the submodule is not updated. This update procedure is not\nallowed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -q  --quiet"}, {"role": "assistant", "content": "Only print error messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --progress"}, {"role": "assistant", "content": "This option is only valid for add and update commands.\nProgress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --all"}, {"role": "assistant", "content": "This option is only valid for the deinit command. Unregister all\nsubmodules in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -b <branch>  --branch <branch>"}, {"role": "assistant", "content": "Branch of repository to add as submodule.\nThe name of the branch is recorded as submodule.<name>.branch in .gitmodules for update --remote .  A special value of . is used to\nindicate that the name of the branch in the submodule should be the\nsame name as the current branch in the current repository.  If the\noption is not specified, it defaults to the remote HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -f  --force"}, {"role": "assistant", "content": "This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --cached"}, {"role": "assistant", "content": "This option is only valid for status and summary commands.  These\ncommands typically use the commit found in the submodule HEAD, but\nwith this option, the commit stored in the index is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --files"}, {"role": "assistant", "content": "This option is only valid for the summary command. This command\ncompares the commit in the index with that in the submodule HEAD\nwhen this option is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -n  --summary-limit"}, {"role": "assistant", "content": "This option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --remote"}, {"role": "assistant", "content": "This option is only valid for the update command.  Instead of using\nthe superproject’s recorded SHA-1 to update the submodule, use the\nstatus of the submodule’s remote-tracking branch.  The remote used\nis branch’s remote ( branch.<name>.remote ), defaulting to origin .\nThe remote branch used defaults to the remote HEAD , but the branch\nname may be overridden by setting the submodule.<name>.branch option in either .gitmodules or .git/config (with .git/config taking precedence). This works for any of the supported update procedures ( --checkout , --rebase , etc.).  The only change is the source of the target SHA-1.\nFor example, submodule update --remote --merge will merge upstream\nsubmodule changes into the submodules, while submodule update\n--merge will merge superproject gitlink changes into the submodules. In order to ensure a current tracking branch state, update --remote fetches the submodule’s remote repository before calculating the\nSHA-1.  If you don’t want to fetch, you should use submodule update\n--remote --no-fetch . Use this option to integrate changes from the upstream subproject with\nyour submodule’s current HEAD.  Alternatively, you can run git pull from the submodule, which is equivalent except for the remote branch\nname: update --remote uses the default upstream repository and submodule.<name>.branch , while git pull uses the submodule’s branch.<name>.merge .  Prefer submodule.<name>.branch if you want\nto distribute the default upstream branch with the superproject and branch.<name>.merge if you want a more native feel while working in\nthe submodule itself."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -N  --no-fetch"}, {"role": "assistant", "content": "This option is only valid for the update command.\nDon’t fetch new objects from the remote site."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --checkout"}, {"role": "assistant", "content": "This option is only valid for the update command.\nCheckout the commit recorded in the superproject on a detached HEAD\nin the submodule. This is the default behavior, the main use of\nthis option is to override submodule.$name.update when set to\na value other than checkout .\nIf the key submodule.$name.update is either not explicitly set or\nset to checkout , this option is implicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --merge"}, {"role": "assistant", "content": "This option is only valid for the update command.\nMerge the commit recorded in the superproject into the current branch\nof the submodule. If this option is given, the submodule’s HEAD will\nnot be detached. If a merge failure prevents this process, you will\nhave to resolve the resulting conflicts within the submodule with the\nusual conflict resolution tools.\nIf the key submodule.$name.update is set to merge , this option is\nimplicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --rebase"}, {"role": "assistant", "content": "This option is only valid for the update command.\nRebase the current branch onto the commit recorded in the\nsuperproject. If this option is given, the submodule’s HEAD will not\nbe detached. If a merge failure prevents this process, you will have\nto resolve these failures with git-rebase .\nIf the key submodule.$name.update is set to rebase , this option is\nimplicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --init"}, {"role": "assistant", "content": "This option is only valid for the update command.\nInitialize all submodules for which \"git submodule init\" has not been\ncalled so far before updating."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --name"}, {"role": "assistant", "content": "This option is only valid for the add command. It sets the submodule’s\nname to the given string instead of defaulting to its path. The name\nmust be valid as a directory name and may not end with a / ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --reference <repository>"}, {"role": "assistant", "content": "This option is only valid for add and update commands.  These\ncommands sometimes need to clone a remote repository. In this case,\nthis option will be passed to the git-clone command. NOTE : Do not use this option unless you have read the note\nfor git-clone 's --reference , --shared , and --dissociate options carefully."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --dissociate"}, {"role": "assistant", "content": "This option is only valid for add and update commands.  These\ncommands sometimes need to clone a remote repository. In this case,\nthis option will be passed to the git-clone command. NOTE : see the NOTE for the --reference option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --recursive"}, {"role": "assistant", "content": "This option is only valid for foreach, update, status and sync commands.\nTraverse submodules recursively. The operation is performed not\nonly in the submodules of the current repo, but also\nin any nested submodules inside those submodules (and so on)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --depth"}, {"role": "assistant", "content": "This option is valid for add and update commands. Create a shallow clone with a history truncated to the specified number of revisions.\nSee git-clone"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --[no-]recommend-shallow"}, {"role": "assistant", "content": "This option is only valid for the update command.\nThe initial clone of a submodule will use the recommended submodule.<name>.shallow as provided by the .gitmodules file\nby default. To ignore the suggestions use --no-recommend-shallow ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -j <n>  --jobs <n>"}, {"role": "assistant", "content": "This option is only valid for the update command.\nClone new submodules in parallel with as many jobs.\nDefaults to the submodule.fetchJobs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  --[no-]single-branch"}, {"role": "assistant", "content": "This option is only valid for the update command.\nClone only one branch during update: HEAD or one specified by --branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  <path>…​"}, {"role": "assistant", "content": "Paths to submodule(s). When specified this will restrict the command\nto only operate on the submodules found at the specified paths.\n(This argument is required with add)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules"}, {"role": "assistant", "content": "FILES When initializing submodules, a .gitmodules file in the top-level directory\nof the containing repository is used to find the url of each submodule.\nThis file should be formatted in the same way as $GIT_DIR/config . The key\nto each submodule url is \"submodule.$name.url\".  See gitmodules for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "NAME git-show - Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "SYNOPSIS git show [<options>] [<object>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "DESCRIPTION Shows one or more objects (blobs, trees, tags and commits). For commits it shows the log message and textual diff. It also\npresents the merge commit in a special format as produced by git diff-tree --cc . For tags, it shows the tag message and the referenced objects. For trees, it shows the names (equivalent to git ls-tree with --name-only). For plain blobs, it shows the plain contents. Some options that git log command understands can be used to\ncontrol how the changes the commit introduces are shown. This manual page describes only the most frequently used options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  <object>…​"}, {"role": "assistant", "content": "The names of objects to show (defaults to HEAD ).\nFor a more complete list of ways to spell object names, see\n\"SPECIFYING REVISIONS\" section in gitrevisions ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --pretty[=<format>]  --format=<format>"}, {"role": "assistant", "content": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline , short , medium , full , fuller , reference , email , raw , format:<string> and tformat:<string> .  When <format> is none of the above,\nand has %placeholder in it, it acts as if --pretty=tformat:<format> were given. See the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium . Note: you can specify the default pretty format in the repository\nconfiguration (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --abbrev-commit"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-abbrev-commit"}, {"role": "assistant", "content": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit , either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --oneline"}, {"role": "assistant", "content": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --encoding=<encoding>"}, {"role": "assistant", "content": "Commit objects record the character encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X , we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output. Likewise, if iconv(3) fails\nto convert the commit, we will quietly output the original\nobject verbatim."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --expand-tabs=<n>  --expand-tabs  --no-expand-tabs"}, {"role": "assistant", "content": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is a multiple of <n> )\nin the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8 , and --no-expand-tabs is a short-hand for --expand-tabs=0 ,\nwhich disables tab expansion. By default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. medium , which is the default, full ,\nand fuller )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --notes[=<ref>]"}, {"role": "assistant", "content": "Show the notes (see git-notes ) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log , git show and git whatchanged commands when\nthere is no --pretty , --format , or --oneline option given\non the command line. By default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config for more details. With an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/ ; when it begins with notes/ , refs/ and otherwise refs/notes/ is prefixed to form the full name of the ref. Multiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-notes"}, {"role": "assistant", "content": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --show-notes-by-default"}, {"role": "assistant", "content": "Show the default notes unless options for displaying specific\nnotes are given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --show-notes[=<ref>]  --[no-]standard-notes"}, {"role": "assistant", "content": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --show-signature"}, {"role": "assistant", "content": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %x00"}, {"role": "assistant", "content": "%x followed by two hexadecimal digits is replaced with a\nbyte with the hexadecimal digits' value (we will call this\n\"literal formatting code\" in the rest of this document)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %Cred"}, {"role": "assistant", "content": "switch color to red"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %Cgreen"}, {"role": "assistant", "content": "switch color to green"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %Cblue"}, {"role": "assistant", "content": "switch color to blue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %Creset"}, {"role": "assistant", "content": "reset color"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %C(…​)"}, {"role": "assistant", "content": "color specification, as described under Values in the\n\"CONFIGURATION FILE\" section of git-config .  By\ndefault, colors are shown only when enabled for log output\n(by color.diff , color.ui , or --color , and respecting\nthe auto settings of the former if we are going to a\nterminal). %C(auto,...) is accepted as a historical\nsynonym for the default (e.g., %C(auto,red) ). Specifying %C(always,...) will show the colors even when color is\nnot otherwise enabled (though consider just using --color=always to enable color for the whole output,\nincluding this format and anything else git might color). auto alone (i.e. %C(auto) ) will turn on auto coloring\non the next placeholders until the color is switched\nagain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %m"}, {"role": "assistant", "content": "left ( < ), right ( > ) or boundary ( - ) mark"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %w([<w>[,<i1>[,<i2>]]])"}, {"role": "assistant", "content": "switch line wrapping, like the -w option of git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %<|( <M> )"}, {"role": "assistant", "content": "make the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %>( <N> ) , %>|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively,\nbut padding spaces on the left"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %>>( <N> ) , %>>|( <M> )"}, {"role": "assistant", "content": "similar to %>( <N> ) , %>|( <M> ) respectively, except that if the next\nplaceholder takes more spaces than given and\nthere are spaces on its left, use those\nspaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %><( <N> ) , %><|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively, but padding both sides\n(i.e. the text is centered)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %H"}, {"role": "assistant", "content": "commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %h"}, {"role": "assistant", "content": "abbreviated commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %T"}, {"role": "assistant", "content": "tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %t"}, {"role": "assistant", "content": "abbreviated tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %P"}, {"role": "assistant", "content": "parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %p"}, {"role": "assistant", "content": "abbreviated parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %an"}, {"role": "assistant", "content": "author name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aN"}, {"role": "assistant", "content": "author name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ae"}, {"role": "assistant", "content": "author email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aE"}, {"role": "assistant", "content": "author email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aL"}, {"role": "assistant", "content": "author local-part (see %al ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ad"}, {"role": "assistant", "content": "author date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aD"}, {"role": "assistant", "content": "author date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ar"}, {"role": "assistant", "content": "author date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %at"}, {"role": "assistant", "content": "author date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ai"}, {"role": "assistant", "content": "author date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %as"}, {"role": "assistant", "content": "author date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ah"}, {"role": "assistant", "content": "author date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cN"}, {"role": "assistant", "content": "committer name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ce"}, {"role": "assistant", "content": "committer email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cE"}, {"role": "assistant", "content": "committer email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cl"}, {"role": "assistant", "content": "committer email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cL"}, {"role": "assistant", "content": "committer local-part (see %cl ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cd"}, {"role": "assistant", "content": "committer date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cD"}, {"role": "assistant", "content": "committer date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ct"}, {"role": "assistant", "content": "committer date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ci"}, {"role": "assistant", "content": "committer date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cI"}, {"role": "assistant", "content": "committer date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cs"}, {"role": "assistant", "content": "committer date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ch"}, {"role": "assistant", "content": "committer date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %d"}, {"role": "assistant", "content": "ref names, like the --decorate option of git-log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %D"}, {"role": "assistant", "content": "ref names without the \" (\", \")\" wrapping."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %(decorate[:<options>])"}, {"role": "assistant", "content": "ref names with custom decorations. The decorate string may be followed by a\ncolon and zero or more comma-separated options. Option values may contain\nliteral formatting codes. These must be used for commas ( %x2C ) and closing\nparentheses ( %x29 ), due to their role in the option syntax. prefix=<value> : Shown before the list of ref names.  Defaults to \" ( \". suffix=<value> : Shown after the list of ref names.  Defaults to \" ) \". separator=<value> : Shown between ref names.  Defaults to \" , \". pointer=<value> : Shown between HEAD and the branch it points to, if any.\nDefaults to \" -> \". tag=<value> : Shown before tag names. Defaults to \" tag: \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %S"}, {"role": "assistant", "content": "ref name given on the command line by which the commit was reached\n(like git log --source ), only works with git log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %e"}, {"role": "assistant", "content": "encoding"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %s"}, {"role": "assistant", "content": "subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %f"}, {"role": "assistant", "content": "sanitized subject line, suitable for a filename"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %b"}, {"role": "assistant", "content": "body"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %B"}, {"role": "assistant", "content": "raw body (unwrapped subject and body)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %N"}, {"role": "assistant", "content": "commit notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GG"}, {"role": "assistant", "content": "raw verification message from GPG for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GS"}, {"role": "assistant", "content": "show the name of the signer for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GK"}, {"role": "assistant", "content": "show the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GF"}, {"role": "assistant", "content": "show the fingerprint of the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GP"}, {"role": "assistant", "content": "show the fingerprint of the primary key whose subkey was used\nto sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %GT"}, {"role": "assistant", "content": "show the trust level for the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gD"}, {"role": "assistant", "content": "reflog selector, e.g., refs/stash@{1} or refs/stash@{2\nminutes ago} ; the format follows the rules described for the -g option. The portion before the @ is the refname as\ngiven on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gd"}, {"role": "assistant", "content": "shortened reflog selector; same as %gD , but the refname\nportion is shortened for human readability (so refs/heads/master becomes just master )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gn"}, {"role": "assistant", "content": "reflog identity name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gN"}, {"role": "assistant", "content": "reflog identity name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %ge"}, {"role": "assistant", "content": "reflog identity email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gE"}, {"role": "assistant", "content": "reflog identity email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %gs"}, {"role": "assistant", "content": "reflog subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %(trailers[:<options>])"}, {"role": "assistant", "content": "display the trailers of the body as interpreted by git-interpret-trailers . The trailers string may be followed by\na colon and zero or more comma-separated options. If any option is provided\nmultiple times, the last occurrence wins. key=<key> : only show trailers with specified <key>. Matching is done\ncase-insensitively and trailing colon is optional. If option is\ngiven multiple times trailer lines matching any of the keys are\nshown. This option automatically enables the only option so that\nnon-trailer lines in the trailer block are hidden. If that is not\ndesired it can be disabled with only=false .  E.g., %(trailers:key=Reviewed-by) shows trailer lines with key Reviewed-by . only[=<bool>] : select whether non-trailer lines from the trailer\nblock should be included. separator=<sep> : specify the separator inserted between trailer\nlines. Defaults to a line feed character. The string <sep> may contain\nthe literal formatting codes described above. To use comma as\nseparator one must use %x2C as it would otherwise be parsed as\nnext option. E.g., %(trailers:key=Ticket,separator=%x2C ) shows all trailer lines whose key is \"Ticket\" separated by a comma\nand a space. unfold[=<bool>] : make it behave as if interpret-trailer’s --unfold option was given. E.g., %(trailers:only,unfold=true) unfolds and shows all trailer lines. keyonly[=<bool>] : only show the key part of the trailer. valueonly[=<bool>] : only show the value part of the trailer. key_value_separator=<sep> : specify the separator inserted between\nthe key and value of each trailer. Defaults to \": \". Otherwise it\nshares the same semantics as separator=<sep> above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -m"}, {"role": "assistant", "content": "Show diffs for merge commits in the default format. This is\nsimilar to --diff-merges=on , except -m will\nproduce no output unless -p is given as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -c"}, {"role": "assistant", "content": "Produce combined diff output for merge commits.\nShortcut for --diff-merges=combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --cc"}, {"role": "assistant", "content": "Produce dense combined diff output for merge commits.\nShortcut for --diff-merges=dense-combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --dd"}, {"role": "assistant", "content": "Produce diff with respect to first parent for both merge and\nregular commits.\nShortcut for --diff-merges=first-parent -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --remerge-diff"}, {"role": "assistant", "content": "Produce remerge-diff output for merge commits.\nShortcut for --diff-merges=remerge -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-diff-merges"}, {"role": "assistant", "content": "Synonym for --diff-merges=off ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --diff-merges=<format>"}, {"role": "assistant", "content": "Specify diff format to be used for merge commits. Default is\n`dense-combined` unless --first-parent is in use, in\nwhich case first-parent is the default. The following formats are supported: off, none Disable output of diffs for merge commits. Useful to override\nimplied value. on, m Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate . first-parent, 1 Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits. separate Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent. combined, c Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents. dense-combined, cc Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification. remerge, r Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --combined-all-paths"}, {"role": "assistant", "content": "This flag causes combined diffs (used for merge commits) to\nlist the name of the file from all parents.  It thus only has\neffect when --diff-merges=[dense-]combined is in use, and\nis likely only useful if filename changes are detected (i.e.\nwhen either rename or copy detection have been requested)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --raw"}, {"role": "assistant", "content": "For each commit, show a summary of changes using the raw diff\nformat. See the \"RAW OUTPUT FORMAT\" section of git-diff . This is different from showing the log\nitself in raw format, which you can achieve with --format=raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -t"}, {"role": "assistant", "content": "Show the tree objects in the diff output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -z"}, {"role": "assistant", "content": "Separate the commits with NULs instead of newlines. Also, when --raw or --numstat has been given, do not munge\npathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "If generating diffs, detect and report renames for each commit.\nFor following files across renames while traversing history, see --follow .\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  off, none"}, {"role": "assistant", "content": "Disable output of diffs for merge commits. Useful to override\nimplied value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  on, m"}, {"role": "assistant", "content": "Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  first-parent, 1"}, {"role": "assistant", "content": "Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  separate"}, {"role": "assistant", "content": "Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  combined, c"}, {"role": "assistant", "content": "Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  dense-combined, cc"}, {"role": "assistant", "content": "Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  remerge, r"}, {"role": "assistant", "content": "Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show v1.0.0"}, {"role": "assistant", "content": "Shows the tag v1.0.0 , along with the object the tag\npoints at."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show v1.0.0^{tree}"}, {"role": "assistant", "content": "Shows the tree pointed to by the tag v1.0.0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show -s --format=%s v1.0.0^{commit}"}, {"role": "assistant", "content": "Shows the subject of the commit pointed to by the\ntag v1.0.0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show next~10:Documentation/README"}, {"role": "assistant", "content": "Shows the contents of the file Documentation/README as\nthey were current in the 10th last commit of the branch next ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  git show master:Makefile master:t/Makefile"}, {"role": "assistant", "content": "Concatenates the contents of said Makefiles in the head\nof the branch master ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects"}, {"role": "assistant", "content": "DISCUSSION Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "NAME git-log - Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "SYNOPSIS git log [<options>] [<revision-range>] [[--] <path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "DESCRIPTION Shows the commit logs. List commits that are reachable by following the parent links from the\ngiven commit(s), but exclude commits that are reachable from the one(s)\ngiven with a ^ in front of them.  The output is given in reverse\nchronological order by default. You can think of this as a set operation. Commits reachable from any of\nthe commits given on the command line form a set, and then commits reachable\nfrom any of the ones given with ^ in front are subtracted from that\nset.  The remaining commits are what comes out in the command’s output.\nVarious other options and paths parameters can be used to further limit the\nresult. Thus, the following command: $ git log foo bar ^baz means \"list all the commits which are reachable from foo or bar , but\nnot from baz \". A special notation \" <commit1> .. <commit2> \" can be used as a\nshort-hand for \"^ <commit1> <commit2> \". For example, either of\nthe following may be used interchangeably: $ git log origin..HEAD\n$ git log HEAD ^origin Another special notation is \" <commit1> …​ <commit2> \" which is useful\nfor merges.  The resulting set of commits is the symmetric difference\nbetween the two operands.  The following two commands are equivalent: $ git log A B --not $(git merge-base --all A B)\n$ git log A...B The command takes options applicable to the git-rev-list command to control what is shown and how, and options applicable to\nthe git-diff command to control how the changes\neach commit introduces are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --follow"}, {"role": "assistant", "content": "Continue listing the history of a file beyond renames\n(works only for a single file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-decorate  --decorate[=short|full|auto|no]"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The option --decorate is short-hand for --decorate=short .\nDefault to configuration value of log.decorate if configured,\notherwise, auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --decorate-refs=<pattern>  --decorate-refs-exclude=<pattern>"}, {"role": "assistant", "content": "For each candidate reference, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn’t match any of the patterns given to --decorate-refs . The log.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration . If none of these options or config settings are given, then references are\nused as decoration if they match HEAD , refs/heads/ , refs/remotes/ , refs/stash/ , or refs/tags/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --clear-decorations"}, {"role": "assistant", "content": "When specified, this option clears all previous --decorate-refs or --decorate-refs-exclude options and relaxes the default\ndecoration filter to include all references. This option is\nassumed if the config value log.initialDecorationSet is set to all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --source"}, {"role": "assistant", "content": "Print out the ref name given on the command line by which each\ncommit was reached."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]mailmap  --[no-]use-mailmap"}, {"role": "assistant", "content": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-diff"}, {"role": "assistant", "content": "Without this flag, git log -p <path>... shows commits that\ntouch the specified paths, and diffs about the same specified\npaths.  With this, the full diff is shown for commits that touch\nthe specified paths; this means that \"<path>…​\" limits only\ncommits, and doesn’t limit diff for those commits. Note that this affects all diff-based output types, e.g. those\nproduced by --stat , etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --log-size"}, {"role": "assistant", "content": "Include a line “log size <number>” in the output for each commit,\nwhere <number> is the length of that commit’s message in bytes.\nIntended to speed up tools that read log messages from git log output by allowing them to allocate space in advance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -L<start>,<end>:<file>  -L:<funcname>:<file>"}, {"role": "assistant", "content": "Trace the evolution of the line range given by <start>,<end> ,\nor by the function name regex <funcname> , within the <file> . You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments, and <start> and <end> (or <funcname> ) must exist in the starting revision.\nYou can specify this option more than once. Implies --patch .\nPatch output can be suppressed using --no-patch , but other diff formats\n(namely --raw , --numstat , --shortstat , --dirstat , --summary , --name-only , --name-status , --check ) are not currently implemented. <start> and <end> can take one of these forms: number If <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1). /regex/ This form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/ , it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start> . +offset or -offset This is only valid for <end> and will specify a number\nof lines before or after the line given by <start> . If :<funcname> is given in place of <start> and <end> , it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname> , up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <revision-range>"}, {"role": "assistant", "content": "Show only commits in the specified revision range.  When no\n<revision-range> is specified, it defaults to HEAD (i.e. the\nwhole history leading to the current commit). origin..HEAD specifies all the commits reachable from the current commit\n(i.e. HEAD ), but not from origin . For a complete list of\nways to spell <revision-range>, see the Specifying Ranges section of gitrevisions ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  [--] <path>…​"}, {"role": "assistant", "content": "Show only commits that are enough to explain how the files\nthat match the specified paths came to be.  See History\nSimplification below for details and other simplification\nmodes. Paths may need to be prefixed with -- to separate them from\noptions or the revision range, when confusion arises."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -<number>  -n <number>  --max-count=<number>"}, {"role": "assistant", "content": "Limit the number of commits to output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --skip=<number>"}, {"role": "assistant", "content": "Skip number commits before starting to show the commit output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --until=<date>  --before=<date>"}, {"role": "assistant", "content": "Show commits older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --author=<pattern>  --committer=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern> ,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --grep-reflog=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog , commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --grep=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern> , commits whose message\nmatches any of the given patterns are chosen (but see --all-match ). When --notes is in effect, the message from the notes is\nmatched as if it were part of the log message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --all-match"}, {"role": "assistant", "content": "Limit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --invert-grep"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that do not\nmatch the pattern specified with --grep=<pattern> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -i  --regexp-ignore-case"}, {"role": "assistant", "content": "Match the regular expression limiting patterns without regard to letter\ncase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --basic-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -E  --extended-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -F  --fixed-strings"}, {"role": "assistant", "content": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -P  --perl-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remove-empty"}, {"role": "assistant", "content": "Stop when a given path disappears from the tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --merges"}, {"role": "assistant", "content": "Print only merge commits. This is exactly the same as --min-parents=2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-merges"}, {"role": "assistant", "content": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --min-parents=<number>  --max-parents=<number>  --no-min-parents  --no-max-parents"}, {"role": "assistant", "content": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges , --min-parents=2 is the same as --merges . --max-parents=0 gives all root commits and --min-parents=3 all octopus merges. --no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --first-parent"}, {"role": "assistant", "content": "When finding commits to include, follow only the first\nparent commit upon seeing a merge commit.  This option\ncan give a better overview when viewing the evolution of\na particular topic branch, because merges into a topic\nbranch tend to be only about adjusting to updated upstream\nfrom time to time, and this option allows you to ignore\nthe individual commits brought in to your history by such\na merge. This option also changes default diff format for merge commits\nto first-parent , see --diff-merges=first-parent for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude-first-parent-only"}, {"role": "assistant", "content": "When finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --not"}, {"role": "assistant", "content": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not .\nWhen used on the command line before --stdin, the revisions passed\nthrough stdin will not be affected by it. Conversely, when passed\nvia standard input, the revisions passed on the command line will\nnot be affected by it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --all"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --branches[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit> . If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --tags[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remotes[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit> . If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --alternate-refs"}, {"role": "assistant", "content": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates .  The set of included objects may\nbe modified by core.alternateRefsCommand , etc. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-missing"}, {"role": "assistant", "content": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --bisect"}, {"role": "assistant", "content": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --stdin"}, {"role": "assistant", "content": "In addition to getting arguments from the command line, read\nthem from standard input as well. This accepts commits and\npseudo-options like --all and --glob= . When a -- separator\nis seen, the following input is treated as paths and used to\nlimit the result. Flags like --not which are read via standard input\nare only respected for arguments passed in the same way and will not\ninfluence any subsequent command line arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry-mark"}, {"role": "assistant", "content": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with + ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry-pick"}, {"role": "assistant", "content": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference. For example, if you have two branches, A and B , a usual way\nto list all commits on only one side of them is with --left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --left-only  --right-only"}, {"role": "assistant", "content": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by --left-right . For example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in A . In other words, this lists the + commits from git cherry A B .\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -g  --walk-reflogs"}, {"role": "assistant", "content": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit , commit1..commit2 ,\nand commit1...commit2 notations cannot be used). With --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{<Nth>} (where <Nth> is the reverse-chronological index in the\nreflog) or as ref@{<timestamp>} (with the <timestamp> for that entry),\ndepending on a few rules: If the starting point is specified as ref@{<Nth>} , show the index\nformat. If the starting point was specified as ref@{now} , show the\ntimestamp format. If neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date . Otherwise, show the index format. Under --pretty=oneline , the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse .\nSee also git-reflog . Under --pretty=reference , this information will not be shown at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --merge"}, {"role": "assistant", "content": "Show commits touching conflicted paths in the range HEAD...<other> ,\nwhere <other> is the first existing pseudoref in MERGE_HEAD , CHERRY_PICK_HEAD , REVERT_HEAD or REBASE_HEAD . Only works\nwhen the index has unmerged entries. This option can be used to show\nrelevant commits when resolving conflicts from a 3-way merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <paths>"}, {"role": "assistant", "content": "Commits modifying the given <paths> are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-by-decoration"}, {"role": "assistant", "content": "Commits that are referred by some branch or tag are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  Default mode"}, {"role": "assistant", "content": "Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history"}, {"role": "assistant", "content": "Same as the default mode, but does not prune some history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dense"}, {"role": "assistant", "content": "Only the selected commits are shown, plus some to have a\nmeaningful history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --sparse"}, {"role": "assistant", "content": "All commits in the simplified history are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-merges"}, {"role": "assistant", "content": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  Default mode"}, {"role": "assistant", "content": "Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents. This results in: .-A---N---O\n\t /     /   /\n\tI---------D Note how the rule to only follow the TREESAME parent, if one is\navailable, removed B from consideration entirely. C was\nconsidered via N , but is TREESAME.  Root commits are compared to an\nempty tree, so I is !TREESAME. Parent/child relations are only visible with --parents , but that does\nnot affect the commits selected in default mode, so we have shown the\nparent lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dense"}, {"role": "assistant", "content": "Commits that are walked are included if they are not TREESAME\nto any parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --sparse"}, {"role": "assistant", "content": "All commits that are walked are included. Note that without --full-history , this still simplifies merges: if\none of the parents is TREESAME, we follow only that one, so the other\nsides of the merge are never walked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --simplify-merges"}, {"role": "assistant", "content": "First, build a history graph in the same way that --full-history with parent rewriting does (see above). Then simplify each commit C to its replacement C' in the final\nhistory according to the following rules: Set C' to C . Replace each parent P of C' with its simplification P' .  In\nthe process, drop parents that are ancestors of other parents or that are\nroot commits TREESAME to an empty tree, and remove duplicates, but take care\nto never drop all parents that we are TREESAME to. If after this parent rewriting, C' is a root or merge commit (has\nzero or >1 parents), a boundary commit, or !TREESAME, it remains.\nOtherwise, it is replaced with its only parent. The effect of this is best shown by way of comparing to --full-history with parent rewriting.  The example turns into: .-A---M---N---O\n\t /     /       /\n\tI     B       D\n\t \\   /       /\n\t  `---------' Note the major differences in N , P , and Q over --full-history : N 's parent list had I removed, because it is an ancestor of the\nother parent M .  Still, N remained because it is !TREESAME. P 's parent list similarly had I removed. P was then\nremoved completely, because it had one parent and is TREESAME. Q 's parent list had Y simplified to X . X was then removed, because it\nwas a TREESAME root. Q was then removed completely, because it had one\nparent and is TREESAME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "Limit the displayed commits to those which are an ancestor of\n<commit>, or which are a descendant of <commit>, or are <commit>\nitself. As an example use case, consider the following commit history: D---E-------F\n\t   /     \\       \\\n\t  B---C---G---H---I---J\n\t /                     \\\n\tA-------K---------------L--M A regular D..M computes the set of commits that are ancestors of M ,\nbut excludes the ones that are ancestors of D . This is useful to see\nwhat happened to the history leading to M since D , in the sense\nthat “what does M have that did not exist in D ”. The result in this\nexample would be all the commits, except A and B (and D itself,\nof course). When we want to find out what commits in M are contaminated with the\nbug introduced by D and need fixing, however, we might want to view\nonly the subset of D..M that are actually descendants of D , i.e.\nexcluding C and K . This is exactly what the --ancestry-path option does. Applied to the D..M range, it results in: E-------F\n\t\t \\       \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M We can also use --ancestry-path=D instead of --ancestry-path which\nmeans the same thing when applied to the D..M range but is just more\nexplicit. If we instead are interested in a given topic within this range, and all\ncommits affected by that topic, we may only want to view the subset of D..M which contain that topic in their ancestry path.  So, using --ancestry-path=H D..M for example would result in: E\n\t\t \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M Whereas --ancestry-path=K D..M would result in K---------------L--M"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-pulls"}, {"role": "assistant", "content": "In addition to the commits shown in the default history, show\neach merge commit that is not TREESAME to its first parent but\nis TREESAME to a later parent. When a merge commit is included by --show-pulls , the merge is\ntreated as if it \"pulled\" the change from another branch. When using --show-pulls on this example (and no other options) the resulting\ngraph is: I---X---R---N Here, the merge commits R and N are included because they pulled\nthe commits X and R into the base branch, respectively. These\nmerges are the reason the commits A and B do not appear in the\ndefault history. When --show-pulls is paired with --simplify-merges , the\ngraph includes all of the necessary information: .-A---M--.   N\n\t /     /    \\ /\n\tI     B      R\n\t \\   /      /\n\t  \\ /      /\n\t   `---X--' Notice that since M is reachable from R , the edge from N to M was simplified away. However, N still appears in the history as an\nimportant commit because it \"pulled\" the change R into the main\nbranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --author-date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --topo-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed. For example, in a commit history like this: ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8--- where the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1. With --topo-order , they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --reverse"}, {"role": "assistant", "content": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with --walk-reflogs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-walk[=(sorted|unsorted)]"}, {"role": "assistant", "content": "Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --do-walk"}, {"role": "assistant", "content": "Overrides a previous --no-walk ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pretty[=<format>]  --format=<format>"}, {"role": "assistant", "content": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline , short , medium , full , fuller , reference , email , raw , format:<string> and tformat:<string> .  When <format> is none of the above,\nand has %placeholder in it, it acts as if --pretty=tformat:<format> were given. See the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium . Note: you can specify the default pretty format in the repository\nconfiguration (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --abbrev-commit"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-abbrev-commit"}, {"role": "assistant", "content": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit , either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --oneline"}, {"role": "assistant", "content": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --encoding=<encoding>"}, {"role": "assistant", "content": "Commit objects record the character encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X , we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output. Likewise, if iconv(3) fails\nto convert the commit, we will quietly output the original\nobject verbatim."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --expand-tabs=<n>  --expand-tabs  --no-expand-tabs"}, {"role": "assistant", "content": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is a multiple of <n> )\nin the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8 , and --no-expand-tabs is a short-hand for --expand-tabs=0 ,\nwhich disables tab expansion. By default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. medium , which is the default, full ,\nand fuller )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --notes[=<ref>]"}, {"role": "assistant", "content": "Show the notes (see git-notes ) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log , git show and git whatchanged commands when\nthere is no --pretty , --format , or --oneline option given\non the command line. By default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config for more details. With an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/ ; when it begins with notes/ , refs/ and otherwise refs/notes/ is prefixed to form the full name of the ref. Multiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-notes"}, {"role": "assistant", "content": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-notes-by-default"}, {"role": "assistant", "content": "Show the default notes unless options for displaying specific\nnotes are given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-notes[=<ref>]  --[no-]standard-notes"}, {"role": "assistant", "content": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-signature"}, {"role": "assistant", "content": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --relative-date"}, {"role": "assistant", "content": "Synonym for --date=relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date=<format>"}, {"role": "assistant", "content": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty . log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g., iso-local ), the user’s local time zone is used instead. --date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for --date=relative . --date=local is an alias for --date=default-local . --date=iso (or --date=iso8601 ) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are: a space instead of the T date/time delimiter a space between time and time zone no colon between hours and minutes of the time zone --date=iso-strict (or --date=iso8601-strict ) shows timestamps in strict\nISO 8601 format. --date=rfc (or --date=rfc2822 ) shows timestamps in RFC 2822\nformat, often found in email messages. --date=short shows only the date, but not the time, in YYYY-MM-DD format. --date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\") ).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value. --date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted. --date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw , this is always in UTC and therefore -local has no effect. --date=format:... feeds the format ... to your system strftime ,\nexcept for %s, %z, and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local , the correct syntax is --date=format-local:... . --date=default is the default format, and is based on ctime(3)\noutput.  It shows a single line with three-letter day of the week,\nthree-letter month, day-of-month, hour-minute-seconds in \"HH:MM:SS\"\nformat, followed by 4-digit year, plus timezone information, unless\nthe local time zone is used, e.g. Thu Jan 1 00:00:00 1970 +0000 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --parents"}, {"role": "assistant", "content": "Print also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --children"}, {"role": "assistant", "content": "Print also the children of the commit (in the form \"commit child…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --left-right"}, {"role": "assistant", "content": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --graph"}, {"role": "assistant", "content": "Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk . This enables parent rewriting, see History Simplification above. This implies the --topo-order option by default, but the --date-order option may also be specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-linear-break[=<barrier>]"}, {"role": "assistant", "content": "When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %x00"}, {"role": "assistant", "content": "%x followed by two hexadecimal digits is replaced with a\nbyte with the hexadecimal digits' value (we will call this\n\"literal formatting code\" in the rest of this document)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cred"}, {"role": "assistant", "content": "switch color to red"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cgreen"}, {"role": "assistant", "content": "switch color to green"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cblue"}, {"role": "assistant", "content": "switch color to blue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Creset"}, {"role": "assistant", "content": "reset color"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %C(…​)"}, {"role": "assistant", "content": "color specification, as described under Values in the\n\"CONFIGURATION FILE\" section of git-config .  By\ndefault, colors are shown only when enabled for log output\n(by color.diff , color.ui , or --color , and respecting\nthe auto settings of the former if we are going to a\nterminal). %C(auto,...) is accepted as a historical\nsynonym for the default (e.g., %C(auto,red) ). Specifying %C(always,...) will show the colors even when color is\nnot otherwise enabled (though consider just using --color=always to enable color for the whole output,\nincluding this format and anything else git might color). auto alone (i.e. %C(auto) ) will turn on auto coloring\non the next placeholders until the color is switched\nagain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %m"}, {"role": "assistant", "content": "left ( < ), right ( > ) or boundary ( - ) mark"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %w([<w>[,<i1>[,<i2>]]])"}, {"role": "assistant", "content": "switch line wrapping, like the -w option of git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %<|( <M> )"}, {"role": "assistant", "content": "make the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %>( <N> ) , %>|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively,\nbut padding spaces on the left"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %>>( <N> ) , %>>|( <M> )"}, {"role": "assistant", "content": "similar to %>( <N> ) , %>|( <M> ) respectively, except that if the next\nplaceholder takes more spaces than given and\nthere are spaces on its left, use those\nspaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %><( <N> ) , %><|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively, but padding both sides\n(i.e. the text is centered)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %H"}, {"role": "assistant", "content": "commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %h"}, {"role": "assistant", "content": "abbreviated commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %T"}, {"role": "assistant", "content": "tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %t"}, {"role": "assistant", "content": "abbreviated tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %P"}, {"role": "assistant", "content": "parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %p"}, {"role": "assistant", "content": "abbreviated parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %an"}, {"role": "assistant", "content": "author name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aN"}, {"role": "assistant", "content": "author name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ae"}, {"role": "assistant", "content": "author email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aE"}, {"role": "assistant", "content": "author email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aL"}, {"role": "assistant", "content": "author local-part (see %al ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ad"}, {"role": "assistant", "content": "author date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aD"}, {"role": "assistant", "content": "author date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ar"}, {"role": "assistant", "content": "author date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %at"}, {"role": "assistant", "content": "author date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ai"}, {"role": "assistant", "content": "author date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %as"}, {"role": "assistant", "content": "author date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ah"}, {"role": "assistant", "content": "author date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cN"}, {"role": "assistant", "content": "committer name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ce"}, {"role": "assistant", "content": "committer email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cE"}, {"role": "assistant", "content": "committer email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cl"}, {"role": "assistant", "content": "committer email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cL"}, {"role": "assistant", "content": "committer local-part (see %cl ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cd"}, {"role": "assistant", "content": "committer date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cD"}, {"role": "assistant", "content": "committer date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ct"}, {"role": "assistant", "content": "committer date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ci"}, {"role": "assistant", "content": "committer date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cI"}, {"role": "assistant", "content": "committer date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %cs"}, {"role": "assistant", "content": "committer date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ch"}, {"role": "assistant", "content": "committer date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %d"}, {"role": "assistant", "content": "ref names, like the --decorate option of git-log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %D"}, {"role": "assistant", "content": "ref names without the \" (\", \")\" wrapping."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(decorate[:<options>])"}, {"role": "assistant", "content": "ref names with custom decorations. The decorate string may be followed by a\ncolon and zero or more comma-separated options. Option values may contain\nliteral formatting codes. These must be used for commas ( %x2C ) and closing\nparentheses ( %x29 ), due to their role in the option syntax. prefix=<value> : Shown before the list of ref names.  Defaults to \" ( \". suffix=<value> : Shown after the list of ref names.  Defaults to \" ) \". separator=<value> : Shown between ref names.  Defaults to \" , \". pointer=<value> : Shown between HEAD and the branch it points to, if any.\nDefaults to \" -> \". tag=<value> : Shown before tag names. Defaults to \" tag: \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %S"}, {"role": "assistant", "content": "ref name given on the command line by which the commit was reached\n(like git log --source ), only works with git log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %e"}, {"role": "assistant", "content": "encoding"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %s"}, {"role": "assistant", "content": "subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %f"}, {"role": "assistant", "content": "sanitized subject line, suitable for a filename"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %b"}, {"role": "assistant", "content": "body"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %B"}, {"role": "assistant", "content": "raw body (unwrapped subject and body)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %N"}, {"role": "assistant", "content": "commit notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GG"}, {"role": "assistant", "content": "raw verification message from GPG for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GS"}, {"role": "assistant", "content": "show the name of the signer for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GK"}, {"role": "assistant", "content": "show the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GF"}, {"role": "assistant", "content": "show the fingerprint of the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GP"}, {"role": "assistant", "content": "show the fingerprint of the primary key whose subkey was used\nto sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %GT"}, {"role": "assistant", "content": "show the trust level for the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gD"}, {"role": "assistant", "content": "reflog selector, e.g., refs/stash@{1} or refs/stash@{2\nminutes ago} ; the format follows the rules described for the -g option. The portion before the @ is the refname as\ngiven on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gd"}, {"role": "assistant", "content": "shortened reflog selector; same as %gD , but the refname\nportion is shortened for human readability (so refs/heads/master becomes just master )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gn"}, {"role": "assistant", "content": "reflog identity name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gN"}, {"role": "assistant", "content": "reflog identity name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ge"}, {"role": "assistant", "content": "reflog identity email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gE"}, {"role": "assistant", "content": "reflog identity email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gs"}, {"role": "assistant", "content": "reflog subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %(trailers[:<options>])"}, {"role": "assistant", "content": "display the trailers of the body as interpreted by git-interpret-trailers . The trailers string may be followed by\na colon and zero or more comma-separated options. If any option is provided\nmultiple times, the last occurrence wins. key=<key> : only show trailers with specified <key>. Matching is done\ncase-insensitively and trailing colon is optional. If option is\ngiven multiple times trailer lines matching any of the keys are\nshown. This option automatically enables the only option so that\nnon-trailer lines in the trailer block are hidden. If that is not\ndesired it can be disabled with only=false .  E.g., %(trailers:key=Reviewed-by) shows trailer lines with key Reviewed-by . only[=<bool>] : select whether non-trailer lines from the trailer\nblock should be included. separator=<sep> : specify the separator inserted between trailer\nlines. Defaults to a line feed character. The string <sep> may contain\nthe literal formatting codes described above. To use comma as\nseparator one must use %x2C as it would otherwise be parsed as\nnext option. E.g., %(trailers:key=Ticket,separator=%x2C ) shows all trailer lines whose key is \"Ticket\" separated by a comma\nand a space. unfold[=<bool>] : make it behave as if interpret-trailer’s --unfold option was given. E.g., %(trailers:only,unfold=true) unfolds and shows all trailer lines. keyonly[=<bool>] : only show the key part of the trailer. valueonly[=<bool>] : only show the value part of the trailer. key_value_separator=<sep> : specify the separator inserted between\nthe key and value of each trailer. Defaults to \": \". Otherwise it\nshares the same semantics as separator=<sep> above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -m"}, {"role": "assistant", "content": "Show diffs for merge commits in the default format. This is\nsimilar to --diff-merges=on , except -m will\nproduce no output unless -p is given as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -c"}, {"role": "assistant", "content": "Produce combined diff output for merge commits.\nShortcut for --diff-merges=combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cc"}, {"role": "assistant", "content": "Produce dense combined diff output for merge commits.\nShortcut for --diff-merges=dense-combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dd"}, {"role": "assistant", "content": "Produce diff with respect to first parent for both merge and\nregular commits.\nShortcut for --diff-merges=first-parent -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --remerge-diff"}, {"role": "assistant", "content": "Produce remerge-diff output for merge commits.\nShortcut for --diff-merges=remerge -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-diff-merges"}, {"role": "assistant", "content": "Synonym for --diff-merges=off ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-merges=<format>"}, {"role": "assistant", "content": "Specify diff format to be used for merge commits. Default is\n`off` unless --first-parent is in use, in\nwhich case first-parent is the default. The following formats are supported: off, none Disable output of diffs for merge commits. Useful to override\nimplied value. on, m Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate . first-parent, 1 Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits. separate Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent. combined, c Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents. dense-combined, cc Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification. remerge, r Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --combined-all-paths"}, {"role": "assistant", "content": "This flag causes combined diffs (used for merge commits) to\nlist the name of the file from all parents.  It thus only has\neffect when --diff-merges=[dense-]combined is in use, and\nis likely only useful if filename changes are detected (i.e.\nwhen either rename or copy detection have been requested)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --raw"}, {"role": "assistant", "content": "For each commit, show a summary of changes using the raw diff\nformat. See the \"RAW OUTPUT FORMAT\" section of git-diff . This is different from showing the log\nitself in raw format, which you can achieve with --format=raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -t"}, {"role": "assistant", "content": "Show the tree objects in the diff output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -z"}, {"role": "assistant", "content": "Separate the commits with NULs instead of newlines. Also, when --raw or --numstat has been given, do not munge\npathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "If generating diffs, detect and report renames for each commit.\nFor following files across renames while traversing history, see --follow .\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  off, none"}, {"role": "assistant", "content": "Disable output of diffs for merge commits. Useful to override\nimplied value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  on, m"}, {"role": "assistant", "content": "Make diff output for merge commits to be shown in the default\nformat. The default format can be changed using log.diffMerges configuration variable, whose default value\nis separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  first-parent, 1"}, {"role": "assistant", "content": "Show full diff with respect to first parent. This is the same\nformat as --patch produces for non-merge commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  separate"}, {"role": "assistant", "content": "Show full diff with respect to each of parents.\nSeparate log entry and diff is generated for each parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  combined, c"}, {"role": "assistant", "content": "Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  dense-combined, cc"}, {"role": "assistant", "content": "Further compress output produced by --diff-merges=combined by omitting uninteresting hunks whose contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  remerge, r"}, {"role": "assistant", "content": "Remerge two-parent merge commits to create a temporary tree\nobject—​potentially containing files with conflict markers\nand such.  A diff is then shown between that temporary tree\nand the actual merge commit. The output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --no-merges"}, {"role": "assistant", "content": "Show the whole commit history, but skip any merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log v2.6.12.. include/scsi drivers/scsi"}, {"role": "assistant", "content": "Show all commits since version v2.6.12 that changed any file\nin the include/scsi or drivers/scsi subdirectories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --since=\"2 weeks ago\" -- gitk"}, {"role": "assistant", "content": "Show the changes during the last two weeks to the file gitk .\nThe -- is necessary to avoid confusion with the branch named gitk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --name-status release..test"}, {"role": "assistant", "content": "Show the commits that are in the \"test\" branch but not yet\nin the \"release\" branch, along with the list of paths\neach commit modifies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --follow builtin/rev-list.c"}, {"role": "assistant", "content": "Shows the commits that changed builtin/rev-list.c , including\nthose commits that occurred before the file was given its\npresent name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log --branches --not --remotes=origin"}, {"role": "assistant", "content": "Shows all commits that are in any of local branches but not in\nany of remote-tracking branches for origin (what you have that\norigin doesn’t)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log master --not --remotes=*/master"}, {"role": "assistant", "content": "Shows all commits that are in local master but not in any remote\nrepository master branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -p -m --first-parent"}, {"role": "assistant", "content": "Shows the history including change diffs, but only from the\n“main branch” perspective, skipping commits that come from merged\nbranches, and showing full diffs of changes introduced by the merges.\nThis makes sense only when following a strict policy of merging all\ntopic branches when staying on a single integration branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -L '/int main/',/^}/:main.c"}, {"role": "assistant", "content": "Shows how the function main() in the file main.c evolved\nover time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -3"}, {"role": "assistant", "content": "Limits the number of commits to show to 3."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "DISCUSSION Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  format.pretty"}, {"role": "assistant", "content": "Default for the --format option.  (See Pretty Formats above.)\nDefaults to medium ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  i18n.logOutputEncoding"}, {"role": "assistant", "content": "Encoding to use when displaying logs.  (See Discussion above.)\nDefaults to the value of i18n.commitEncoding if set, and UTF-8\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.abbrevCommit"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --abbrev-commit . You may\noverride this option with --no-abbrev-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.date"}, {"role": "assistant", "content": "Set the default date-time mode for the log command.\nSetting a value for log.date is similar to using git log 's --date option.  See git-log for details. If the format is set to \"auto:foo\" and the pager is in use, format\n\"foo\" will be used for the date format. Otherwise, \"default\" will\nbe used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.decorate"}, {"role": "assistant", "content": "Print out the ref names of any commits that are shown by the log\ncommand. If short is specified, the ref name prefixes refs/heads/ , refs/tags/ and refs/remotes/ will not be printed. If full is\nspecified, the full ref name (including prefix) will be printed.\nIf auto is specified, then if the output is going to a terminal,\nthe ref names are shown as if short were given, otherwise no ref\nnames are shown. This is the same as the --decorate option\nof the git log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.initialDecorationSet"}, {"role": "assistant", "content": "By default, git log only shows decorations for certain known ref\nnamespaces. If all is specified, then show all refs as\ndecorations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.excludeDecoration"}, {"role": "assistant", "content": "Exclude the specified patterns from the log decorations. This is\nsimilar to the --decorate-refs-exclude command-line option, but\nthe config option can be overridden by the --decorate-refs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.diffMerges"}, {"role": "assistant", "content": "Set diff format to be used when --diff-merges=on is\nspecified, see --diff-merges in git-log for\ndetails. Defaults to separate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.follow"}, {"role": "assistant", "content": "If true , git log will act as if the --follow option was used when\na single <path> is given.  This has the same limitations as --follow ,\ni.e. it cannot be used to follow multiple files and does not work well\non non-linear history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log or git-whatchanged , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.showSignature"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --show-signature ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  log.mailmap"}, {"role": "assistant", "content": "If true, makes git-log , git-show , and git-whatchanged assume --use-mailmap , otherwise\nassume --no-use-mailmap . True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.displayRef"}, {"role": "assistant", "content": "Which ref (or refs, if a glob or specified more than once), in\naddition to the default set by core.notesRef or GIT_NOTES_REF , to read notes from when showing commit\nmessages with the git log family of commands. This setting can be overridden with the GIT_NOTES_DISPLAY_REF environment variable, which must be a colon separated list of refs or\nglobs. A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored. This setting can be disabled by the --no-notes option to the git\nlog family of commands, or by the --notes=<ref> option accepted by\nthose commands. The effective value of \"core.notesRef\" (possibly overridden by\nGIT_NOTES_REF) is also implicitly added to the list of refs to be\ndisplayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewriteRef"}, {"role": "assistant", "content": "When copying notes during a rewrite, specifies the (fully\nqualified) ref whose notes should be copied.  May be a glob,\nin which case notes in all matching refs will be copied.  You\nmay also specify this configuration several times. Does not have a default value; you must configure this variable to\nenable note rewriting.  Set it to refs/notes/commits to enable\nrewriting for the default commit notes. Can be overridden with the GIT_NOTES_REWRITE_REF environment variable.\nSee notes.rewrite.<command> above for a further description of its format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "NAME git-diff - Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "SYNOPSIS git diff [<options>] [<commit>] [--] [<path>…​] git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​] git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​] git diff [<options>] <commit>…​<commit> [--] [<path>…​] git diff [<options>] <blob> <blob> git diff [<options>] --no-index [--] <path> <path>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --no-index [--] <path> <path>"}, {"role": "assistant", "content": "This form is to compare the given two paths on the\nfilesystem.  You can omit the --no-index option when\nrunning the command in a working tree controlled by Git and\nat least one of the paths points outside the working tree,\nor when running the command outside a working tree\ncontrolled by Git. This form implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you staged for the next\ncommit relative to the named <commit>.  Typically you\nwould want comparison with the latest commit, so if you\ndo not give <commit>, it defaults to HEAD.\nIf HEAD does not exist (e.g. unborn branches) and\n<commit> is not given, it shows all staged changes.\n--staged is a synonym of --cached. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --cached --merge-base A is equivalent to git diff --cached $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you have in your\nworking tree relative to the named <commit>.  You can\nuse HEAD to compare it with the latest commit, or a\nbranch name to compare with the tip of a different\nbranch. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --merge-base A is equivalent to git diff $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is to view the changes between two arbitrary\n<commit>. If --merge-base is given, use the merge base of the two commits for the\n\"before\" side. git diff --merge-base A B is equivalent to git diff $(git merge-base A B) B ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit> <commit>…​ <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the results of a merge commit.  The first\nlisted <commit> must be the merge itself; the remaining two or\nmore commits should be its parents.  Convenient ways to produce\nthe desired set of revisions are to use the suffixes ^@ and ^! .  If A is a merge commit, then git diff A A^@ , git diff A^! and git show A all give the same combined diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>..<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is synonymous to the earlier form (without the .. ) for\nviewing the changes between two arbitrary <commit>.  If <commit> on\none side is omitted, it will have the same effect as\nusing HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>...<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes on the branch containing\nand up to the second <commit>, starting at a common ancestor\nof both <commit>. git diff A...B is equivalent to git diff $(git merge-base A B) B .  You can omit any one\nof <commit>, which has the same effect as using HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob>"}, {"role": "assistant", "content": "This form is to view the differences between the raw\ncontents of two blob objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p ).\nThis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --raw"}, {"role": "assistant", "content": "Generate the diff in raw format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -z"}, {"role": "assistant", "content": "When --raw , --numstat , --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto .\nIt can be changed by the color.ui and color.diff configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nIt can be changed by the diff.colorMoved configuration setting.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --exit-code"}, {"role": "assistant", "content": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --quiet"}, {"role": "assistant", "content": "Disable all output of the program. Implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -1 --base  -2 --ours  -3 --theirs"}, {"role": "assistant", "content": "Compare the working tree with the \"base\" version (stage #1),\n\"our branch\" (stage #2) or \"their branch\" (stage #3).  The\nindex contains these stages only for unmerged entries i.e.\nwhile resolving conflicts.  See git-read-tree section \"3-Way Merge\" for detailed information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -0"}, {"role": "assistant", "content": "Omit diff output for unmerged entries and just show\n\"Unmerged\".  Can be used only when comparing the working tree\nwith the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <path>…​"}, {"role": "assistant", "content": "The <paths> parameters, when given, are used to limit\nthe diff to the named paths (you can give directory\nnames and get diff for all files under them)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…​]"}, {"role": "assistant", "content": "compares the trees named by the two arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-files [<pattern>…​]"}, {"role": "assistant", "content": "compares the index and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "diff format for merges \"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\"\ncan take -c or --cc option\nto generate diff output also for merge commits.  The output differs\nfrom the format described above in the following way: there is a colon for each parent there are more \"src\" modes and \"src\" sha1 status is concatenated status characters for each parent no optional \"score\" number tab-separated pathname(s) of the file For -c and --cc , only the destination or final path is shown even\nif the file was renamed on any side of history.  With --combined-all-paths , the name of the path in each parent is shown\nfollowed by the name of the path in the merge commit. Examples for -c and --cc without --combined-all-paths : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tphooey.c Examples when --combined-all-paths added to either -c or --cc : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\tdesc.c\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tfoo.sh\tbar.sh\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tfooey.c\tfuey.c\tphooey.c Note that combined diff lists only files which were modified from\nall parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "other diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Various ways to check your working tree"}, {"role": "assistant", "content": "$ git diff (1) $ git diff --cached (2) $ git diff HEAD (3) $ git diff AUTO_MERGE (4) Changes in the working tree not yet staged for the next commit. Changes between the index and your last commit; what you\nwould be committing if you run git commit without -a option. Changes in the working tree since your last commit; what you\nwould be committing if you run git commit -a Changes in the working tree you’ve made to resolve textual\nconflicts so far."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing with arbitrary commits"}, {"role": "assistant", "content": "$ git diff test (1) $ git diff HEAD -- ./test (2) $ git diff HEAD^ HEAD (3) Instead of using the tip of the current branch, compare with the\ntip of \"test\" branch. Instead of comparing with the tip of \"test\" branch, compare with\nthe tip of the current branch, but limit the comparison to the\nfile \"test\". Compare the version before the last commit and the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing branches"}, {"role": "assistant", "content": "$ git diff topic master (1) $ git diff topic..master (2) $ git diff topic...master (3) Changes between the tips of the topic and the master branches. Same as above. Changes that occurred on the master branch since when the topic\nbranch was started off it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Limiting the diff output"}, {"role": "assistant", "content": "$ git diff --diff-filter=MRC (1) $ git diff --name-status (2) $ git diff arch/i386 include/asm-i386 (3) Show only modification, rename, and copy, but not addition\nor deletion. Show only names and the nature of change, but not actual\ndiff output. Limit diff output to named subtrees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Munging the diff output"}, {"role": "assistant", "content": "$ git diff --find-copies-harder -B -C (1) $ git diff -R (2) Spend extra cycles to find renames, copies and complete\nrewrites (very expensive). Output diff in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.autoRefreshIndex"}, {"role": "assistant", "content": "When using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statGraphWidth"}, {"role": "assistant", "content": "Limit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dstPrefix"}, {"role": "assistant", "content": "If set, git diff uses this destination prefix. Defaults to \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.relative"}, {"role": "assistant", "content": "If set to true , git diff does not show changes outside of the directory\nand show pathnames relative to the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.orderFile"}, {"role": "assistant", "content": "File indicating how to order files within a diff.\nSee the -O option to git-diff for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\ncopy/rename detection; equivalent to the git diff option -l .  If not set, the default value is currently 1000.  This\nsetting has no effect if rename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.submodule"}, {"role": "assistant", "content": "Specify the format in which differences in submodules are\nshown.  The \"short\" format just shows the names of the commits\nat the beginning and end of the range. The \"log\" format lists\nthe commits in the range like git-submodule summary does. The \"diff\" format shows an inline diff of the changed\ncontents of the submodule. Defaults to \"short\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wordRegex"}, {"role": "assistant", "content": "A POSIX Extended Regular Expression used to determine what is a \"word\"\nwhen performing word-by-word difference calculations.  Character\nsequences that match the regular expression are \"words\", all other\ncharacters are ignorable whitespace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.command"}, {"role": "assistant", "content": "The custom diff driver command.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.binary"}, {"role": "assistant", "content": "Set this option to true to make the diff driver treat files as\nbinary.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.wordRegex"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.cachetextconv"}, {"role": "assistant", "content": "Set this option to true to make the diff driver cache the text\nconversion outputs.  See gitattributes for details. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 kompare meld nvimdiff opendiff p4merge smerge tkdiff vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMoved"}, {"role": "assistant", "content": "If set to either a valid <mode> or a true value, moved lines\nin a diff are colored differently, for details of valid modes\nsee --color-moved in git-diff . If simply set to\ntrue the default color mode will be used. When set to false,\nmoved lines are not colored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMovedWS"}, {"role": "assistant", "content": "When moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff"}, {"role": "assistant", "content": "compares the (i)ndex and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --cached"}, {"role": "assistant", "content": "compares a (c)ommit and the (i)ndex;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools"}, {"role": "assistant", "content": "NAME git-difftool - Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools"}, {"role": "assistant", "content": "SYNOPSIS git difftool [<options>] [<commit> [<commit>]] [--] [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools"}, {"role": "assistant", "content": "DESCRIPTION git difftool is a Git command that allows you to compare and edit files\nbetween revisions using common diff tools. git difftool is a frontend\nto git diff and accepts the same options and arguments. See git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -d  --dir-diff"}, {"role": "assistant", "content": "Copy the modified files to a temporary location and perform\na directory diff on them. This mode never prompts before\nlaunching the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -y  --no-prompt"}, {"role": "assistant", "content": "Do not prompt before launching a diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool.\nThis is the default behaviour; the option is provided to\noverride any configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --rotate-to=<file>"}, {"role": "assistant", "content": "Start showing the diff for the given path,\nthe paths before it will move to the end and output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --skip-to=<file>"}, {"role": "assistant", "content": "Start showing the diff for the given path, skipping all\nthe paths before it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -t <tool>  --tool=<tool>"}, {"role": "assistant", "content": "Use the diff tool specified by <tool>.  Valid values include\nemerge, kompare, meld, and vimdiff. Run git difftool --tool-help for the list of valid <tool> settings. If a diff tool is not specified, git difftool will use the configuration variable diff.tool .  If the\nconfiguration variable diff.tool is not set, git difftool will pick a suitable default. You can explicitly provide a full path to the tool by setting the\nconfiguration variable difftool.<tool>.path . For example, you\ncan configure the absolute path to kdiff3 by setting difftool.kdiff3.path . Otherwise, git difftool assumes the\ntool is available in PATH. Instead of running one of the known diff tools, git difftool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable difftool.<tool>.cmd . When git difftool is invoked with this tool (either through the -t or --tool option or the diff.tool configuration variable)\nthe configured command line will be invoked with the following\nvariables available: $LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and $REMOTE is set to the name of the temporary file containing the contents\nof the diff post-image. $MERGED is the name of the file which is\nbeing compared. $BASE is provided for compatibility\nwith custom merge tool commands and has the same value as $MERGED ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --tool-help"}, {"role": "assistant", "content": "Print a list of diff tools that may be used with --tool ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --[no-]symlinks"}, {"role": "assistant", "content": "git difftool 's default behavior is to create symlinks to the\nworking tree when run in --dir-diff mode and the right-hand\nside of the comparison yields the same content as the file in\nthe working tree. Specifying --no-symlinks instructs git difftool to create copies\ninstead. --no-symlinks is the default on Windows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -x <command>  --extcmd=<command>"}, {"role": "assistant", "content": "Specify a custom command for viewing diffs. git-difftool ignores the configured defaults and runs <command> $LOCAL $REMOTE when this option is specified.\nAdditionally, $BASE is set in the environment."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -g  --[no-]gui"}, {"role": "assistant", "content": "When git-difftool is invoked with the -g or --gui option\nthe default diff tool will be read from the configured diff.guitool variable instead of diff.tool . This may be\nselected automatically using the configuration variable difftool.guiDefault . The --no-gui option can be used to\noverride these settings. If diff.guitool is not set, we will\nfallback in the order of merge.guitool , diff.tool , merge.tool until a tool is found."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --[no-]trust-exit-code"}, {"role": "assistant", "content": "Errors reported by the diff tool are ignored by default.\nUse --trust-exit-code to make git-difftool exit when an\ninvoked diff tool returns a non-zero exit code. git-difftool will forward the exit code of the invoked tool when --trust-exit-code is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  diff.tool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool .\nThis variable overrides the value configured in merge.tool .\nThe list below shows the valid built-in values.\nAny other value is treated as a custom diff tool and requires\nthat a corresponding difftool.<tool>.cmd variable is defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  diff.guitool"}, {"role": "assistant", "content": "Controls which diff tool is used by git-difftool when\nthe -g/--gui flag is specified. This variable overrides the value\nconfigured in merge.guitool . The list below shows the valid\nbuilt-in values. Any other value is treated as a custom diff tool\nand requires that a corresponding difftool.<guitool>.cmd variable\nis defined."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.<tool>.cmd"}, {"role": "assistant", "content": "Specify the command to invoke the specified diff tool.\nThe specified command is evaluated in shell with the following\nvariables available: LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and REMOTE is set to the name of the temporary file containing the contents\nof the diff post-image. See the --tool=<tool> option in git-difftool for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.trustExitCode"}, {"role": "assistant", "content": "Exit difftool if the invoked diff tool returns a non-zero exit status. See the --trust-exit-code option in git-difftool for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.guiDefault"}, {"role": "assistant", "content": "Set true to use the diff.guitool by default (equivalent to specifying\nthe --gui argument), or auto to select diff.guitool or diff.tool depending on the presence of a DISPLAY environment variable value. The\ndefault is false , where the --gui argument must be provided\nexplicitly for the diff.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  git-diff"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  git-mergetool"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "NAME git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "SYNOPSIS git range-diff [--color=[<when>]] [--no-color] [<diff-options>]\n\t[--no-dual-color] [--creation-factor=<factor>]\n\t[--left-only | --right-only]\n\t( <range1> <range2> | <rev1>…​<rev2> | <base> <rev1> <rev2> )\n\t[[--] <path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "DESCRIPTION This command shows the differences between two versions of a patch\nseries, or more generally, two commit ranges (ignoring merge commits). In the presence of <path> arguments, these commit ranges are limited\naccordingly. To that end, it first finds pairs of commits from both commit ranges\nthat correspond with each other. Two commits are said to correspond when\nthe diff between their patches (i.e. the author information, the commit\nmessage and the commit diff) is reasonably small compared to the\npatches' size. See ``Algorithm`` below for details. Finally, the list of matching commits is shown in the order of the\nsecond commit range, with unmatched commits being inserted just after\nall of their ancestors have been shown. There are three ways to specify the commit ranges: <range1> <range2> : Either commit range can be of the form <base>..<rev> , <rev>^! or <rev>^-<n> . See SPECIFYING RANGES in gitrevisions for more details. <rev1>...<rev2> . This is equivalent to <rev2>..<rev1> <rev1>..<rev2> . <base> <rev1> <rev2> : This is equivalent to <base>..<rev1>\n<base>..<rev2> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --no-dual-color"}, {"role": "assistant", "content": "When the commit diffs differ, git range-diff recreates the\noriginal diffs' coloring, and adds outer -/+ diff markers with\nthe background being red/green to make it easier to see e.g.\nwhen there was a change in what exact lines were added. Additionally, the commit diff lines that are only present in the first commit\nrange are shown \"dimmed\" (this can be overridden using the color.diff.<slot> config setting where <slot> is one of contextDimmed , oldDimmed and newDimmed ), and the commit diff lines that are only present in the second\ncommit range are shown in bold (which can be overridden using the config\nsettings color.diff.<slot> with <slot> being one of contextBold , oldBold or newBold ). This is known to range-diff as \"dual coloring\". Use --no-dual-color to revert to color all lines according to the outer diff markers\n(and completely ignore the inner diff when it comes to color)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --creation-factor=<percent>"}, {"role": "assistant", "content": "Set the creation/deletion cost fudge factor to <percent> .\nDefaults to 60. Try a larger value if git range-diff erroneously\nconsiders a large change a total rewrite (deletion of one commit\nand addition of another), and a smaller one in the reverse case.\nSee the ``Algorithm`` section below for an explanation of why this is\nneeded."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --left-only"}, {"role": "assistant", "content": "Suppress commits that are missing from the first specified range\n(or the \"left range\" when using the <rev1>...<rev2> format)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --right-only"}, {"role": "assistant", "content": "Suppress commits that are missing from the second specified range\n(or the \"right range\" when using the <rev1>...<rev2> format)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  --[no-]notes[=<ref>]"}, {"role": "assistant", "content": "This flag is passed to the git log program\n(see git-log ) that generates the patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  <range1> <range2>"}, {"role": "assistant", "content": "Compare the commits specified by the two ranges, where <range1> is considered an older version of <range2> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  <rev1>…​<rev2>"}, {"role": "assistant", "content": "Equivalent to passing <rev2>..<rev1> and <rev1>..<rev2> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)  <base> <rev1> <rev2>"}, {"role": "assistant", "content": "Equivalent to passing <base>..<rev1> and <base>..<rev2> .\nNote that <base> does not need to be the exact branch point\nof the branches. Example: after rebasing a branch my-topic , git range-diff my-topic@{u} my-topic@{1} my-topic would\nshow the differences introduced by the rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "OUTPUT STABILITY The output of the range-diff command is subject to change. It is\nintended to be human-readable porcelain output, not something that can\nbe used across versions of Git to get a textually stable range-diff (as opposed to something like the --stable option to git-patch-id ). There’s also no equivalent of git-apply for range-diff , the output is not intended to\nbe machine-readable. This is particularly true when passing in diff options. Currently some\noptions like --stat can, as an emergent effect, produce output\nthat’s quite useless in the context of range-diff . Future versions\nof range-diff may learn to interpret such options in a manner\nspecific to range-diff (e.g. for --stat producing human-readable\noutput which summarizes how the diffstat changed)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "CONFIGURATION This command uses the diff.color.* and pager.range-diff settings\n(the latter is on by default).\nSee git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "EXAMPLES When a rebase required merge conflicts to be resolved, compare the changes\nintroduced by the rebase directly afterwards using: $ git range-diff @{u} @{1} @ A typical output of git range-diff would look like this: -:  ------- > 1:  0ddba11 Prepare for the inevitable!\n1:  c0debee = 2:  cab005e Add a helpful message at the start\n2:  f00dbal ! 3:  decafe1 Describe a bug\n    @@ -1,3 +1,3 @@\n     Author: A U Thor <author@example.com>\n\n    -TODO: Describe a bug\n    +Describe a bug\n    @@ -324,5 +324,6\n      This is expected.\n\n    -+What is unexpected is that it will also crash.\n    ++Unexpectedly, it also crashes. This is a bug, and the jury is\n    ++still out there how to fix it best. See ticket #314 for details.\n\n      Contact\n3:  bedead < -:  ------- TO-UNDO In this example, there are 3 old and 3 new commits, where the developer\nremoved the 3rd, added a new one before the first two, and modified the\ncommit message of the 2nd commit as well as its diff. When the output goes to a terminal, it is color-coded by default, just\nlike regular git diff 's output. In addition, the first line (adding a\ncommit) is green, the last line (deleting a commit) is red, the second\nline (with a perfect match) is yellow like the commit header of git\nshow 's output, and the third line colors the old commit red, the new\none green and the rest like git show 's commit header. A naive color-coded diff of diffs is actually a bit hard to read,\nthough, as it colors the entire lines red or green. The line that added\n\"What is unexpected\" in the old commit, for example, is completely red,\neven if the intent of the old commit was to add something. To help with that, range uses the --dual-color mode by default. In\nthis mode, the diff of diffs will retain the original diff colors, and\nprefix the lines with -/+ markers that have their background red or\ngreen, to make it more obvious that they describe how the diff itself\nchanged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"}, {"role": "assistant", "content": "Algorithm The general idea is this: we generate a cost matrix between the commits\nin both commit ranges, then solve the least-cost assignment. The cost matrix is populated thusly: for each pair of commits, both\ndiffs are generated and the \"diff of diffs\" is generated, with 3 context\nlines, then the number of lines in that diff is used as cost. To avoid false positives (e.g. when a patch has been removed, and an\nunrelated patch has been added between two iterations of the same patch\nseries), the cost matrix is extended to allow for that, by adding\nfixed-cost entries for wholesale deletes/adds. Example: Let commits 1--2 be the first iteration of a patch series and A--C the second iteration. Let’s assume that A is a cherry-pick of 2, and C is a cherry-pick of 1 but with a small modification (say,\na fixed typo). Visualize the commits as a bipartite graph: 1            A\n\n    2            B\n\n\t\t C We are looking for a \"best\" explanation of the new series in terms of\nthe old one. We can represent an \"explanation\" as an edge in the graph: 1            A\n\t       /\n    2 --------'  B\n\n\t\t C This explanation comes for \"free\" because there was no change. Similarly C could be explained using 1 , but that comes at some cost c>0\nbecause of the modification: 1 ----.      A\n\t  |    /\n    2 ----+---'  B\n\t  |\n\t  `----- C\n\t  c>0 In mathematical terms, what we are looking for is some sort of a minimum\ncost bipartite matching; 1 is matched to C at some cost, etc. The\nunderlying graph is in fact a complete bipartite graph; the cost we\nassociate with every edge is the size of the diff between the two\ncommits' patches. To explain also new commits, we introduce dummy nodes\non both sides: 1 ----.      A\n\t  |    /\n    2 ----+---'  B\n\t  |\n    o     `----- C\n\t  c>0\n    o            o\n\n    o            o The cost of an edge o--C is the size of C 's diff, modified by a\nfudge factor that should be smaller than 100%. The cost of an edge o--o is free. The fudge factor is necessary because even if 1 and C have nothing in common, they may still share a few empty lines and\nsuch, possibly making the assignment 1--C , o--o slightly cheaper\nthan 1--o , o--C even if 1 and C have nothing in common. With the\nfudge factor we require a much larger common part to consider patches as\ncorresponding. The overall time needed to compute this algorithm is the time needed to\ncompute n+m commit diffs and then n*m diffs of patches, plus the time\nneeded to compute the least-cost assignment between n and m diffs. Git\nuses an implementation of the Jonker-Volgenant algorithm to solve the\nassignment problem, which has cubic runtime complexity. The matching\nfound in this case will look like this: 1 ----.      A\n\t  |    /\n    2 ----+---'  B\n       .--+-----'\n    o -'  `----- C\n\t  c>0\n    o ---------- o\n\n    o ---------- o"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output"}, {"role": "assistant", "content": "NAME git-shortlog - Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output"}, {"role": "assistant", "content": "SYNOPSIS git shortlog [<options>] [<revision-range>] [[--] <path>…​]\ngit log --pretty=short | git shortlog [<options>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output"}, {"role": "assistant", "content": "DESCRIPTION Summarizes git log output in a format suitable for inclusion\nin release announcements. Each commit will be grouped by author and title. Additionally, \"[PATCH]\" will be stripped from the commit description. If no revisions are passed on the command line and either standard input\nis not a terminal or there is no current branch, git shortlog will\noutput a summary of the log read from standard input, without\nreference to the current repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -n  --numbered"}, {"role": "assistant", "content": "Sort output according to the number of commits per author instead\nof author alphabetic order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -s  --summary"}, {"role": "assistant", "content": "Suppress commit description and provide a commit count summary only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -e  --email"}, {"role": "assistant", "content": "Show the email address of each author."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --format[=<format>]"}, {"role": "assistant", "content": "Instead of the commit subject, use some other information to\ndescribe each commit. <format> can be any string accepted\nby the --format option of git log , such as * [%h] %s .\n(See the \"PRETTY FORMATS\" section of git-log .) Each pretty-printed commit will be rewrapped before it is shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --date=<format>"}, {"role": "assistant", "content": "Show dates formatted according to the given date string. (See\nthe --date option in the \"Commit Formatting\" section of git-log ). Useful with --group=format:<format> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --group=<type>"}, {"role": "assistant", "content": "Group commits based on <type> . If no --group option is\nspecified, the default is author . <type> is one of: author , commits are grouped by author committer , commits are grouped by committer (the same as -c ) trailer:<field> , the <field> is interpreted as a case-insensitive\ncommit message trailer (see git-interpret-trailers ). For\nexample, if your project uses Reviewed-by trailers, you might want\nto see who has been reviewing with git shortlog -ns --group=trailer:reviewed-by . format:<format> , any string accepted by the --format option of git log . (See the \"PRETTY FORMATS\" section of git-log .) Note that commits that do not include the trailer will not be counted.\nLikewise, commits with multiple trailers (e.g., multiple signoffs) may\nbe counted more than once (but only once per unique trailer value in\nthat commit). Shortlog will attempt to parse each trailer value as a name <email> identity. If successful, the mailmap is applied and the email is omitted\nunless the --email option is specified. If the value cannot be parsed\nas an identity, it will be taken literally and completely. If --group is specified multiple times, commits are counted under each\nvalue (but again, only once per unique value in that commit). For\nexample, git shortlog --group=author --group=trailer:co-authored-by counts both authors and co-authors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -c  --committer"}, {"role": "assistant", "content": "This is an alias for --group=committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -w[<width>[,<indent1>[,<indent2>]]]"}, {"role": "assistant", "content": "Linewrap the output by wrapping each line at width .  The first\nline of each entry is indented by indent1 spaces, and the second\nand subsequent lines are indented by indent2 spaces. width , indent1 , and indent2 default to 76, 6 and 9 respectively. If width is 0 (zero) then indent the lines of the output without wrapping\nthem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  <revision-range>"}, {"role": "assistant", "content": "Show only commits in the specified revision range.  When no\n<revision-range> is specified, it defaults to HEAD (i.e. the\nwhole history leading to the current commit). origin..HEAD specifies all the commits reachable from the current commit\n(i.e. HEAD ), but not from origin . For a complete list of\nways to spell <revision-range>, see the \"Specifying Ranges\"\nsection of gitrevisions ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  [--] <path>…​"}, {"role": "assistant", "content": "Consider only commits that are enough to explain how the files\nthat match the specified paths came to be. Paths may need to be prefixed with -- to separate them from\noptions or the revision range, when confusion arises."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -<number>  -n <number>  --max-count=<number>"}, {"role": "assistant", "content": "Limit the number of commits to output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --skip=<number>"}, {"role": "assistant", "content": "Skip number commits before starting to show the commit output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --until=<date>  --before=<date>"}, {"role": "assistant", "content": "Show commits older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --author=<pattern>  --committer=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern> ,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --grep-reflog=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog , commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --grep=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern> , commits whose message\nmatches any of the given patterns are chosen (but see --all-match ). When --notes is in effect, the message from the notes is\nmatched as if it were part of the log message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --all-match"}, {"role": "assistant", "content": "Limit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --invert-grep"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that do not\nmatch the pattern specified with --grep=<pattern> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -i  --regexp-ignore-case"}, {"role": "assistant", "content": "Match the regular expression limiting patterns without regard to letter\ncase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --basic-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -E  --extended-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -F  --fixed-strings"}, {"role": "assistant", "content": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -P  --perl-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --remove-empty"}, {"role": "assistant", "content": "Stop when a given path disappears from the tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --merges"}, {"role": "assistant", "content": "Print only merge commits. This is exactly the same as --min-parents=2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --no-merges"}, {"role": "assistant", "content": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --min-parents=<number>  --max-parents=<number>  --no-min-parents  --no-max-parents"}, {"role": "assistant", "content": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges , --min-parents=2 is the same as --merges . --max-parents=0 gives all root commits and --min-parents=3 all octopus merges. --no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --first-parent"}, {"role": "assistant", "content": "When finding commits to include, follow only the first\nparent commit upon seeing a merge commit.  This option\ncan give a better overview when viewing the evolution of\na particular topic branch, because merges into a topic\nbranch tend to be only about adjusting to updated upstream\nfrom time to time, and this option allows you to ignore\nthe individual commits brought in to your history by such\na merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --exclude-first-parent-only"}, {"role": "assistant", "content": "When finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --not"}, {"role": "assistant", "content": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not .\nWhen used on the command line before --stdin, the revisions passed\nthrough stdin will not be affected by it. Conversely, when passed\nvia standard input, the revisions passed on the command line will\nnot be affected by it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --all"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --branches[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit> . If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --tags[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --remotes[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit> . If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --alternate-refs"}, {"role": "assistant", "content": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates .  The set of included objects may\nbe modified by core.alternateRefsCommand , etc. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --ignore-missing"}, {"role": "assistant", "content": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --bisect"}, {"role": "assistant", "content": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --stdin"}, {"role": "assistant", "content": "In addition to getting arguments from the command line, read\nthem from standard input as well. This accepts commits and\npseudo-options like --all and --glob= . When a -- separator\nis seen, the following input is treated as paths and used to\nlimit the result. Flags like --not which are read via standard input\nare only respected for arguments passed in the same way and will not\ninfluence any subsequent command line arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --cherry-mark"}, {"role": "assistant", "content": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with + ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --cherry-pick"}, {"role": "assistant", "content": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference. For example, if you have two branches, A and B , a usual way\nto list all commits on only one side of them is with --left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --left-only  --right-only"}, {"role": "assistant", "content": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by --left-right . For example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in A . In other words, this lists the + commits from git cherry A B .\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -g  --walk-reflogs"}, {"role": "assistant", "content": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit , commit1..commit2 ,\nand commit1...commit2 notations cannot be used). With --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{<Nth>} (where <Nth> is the reverse-chronological index in the\nreflog) or as ref@{<timestamp>} (with the <timestamp> for that entry),\ndepending on a few rules: If the starting point is specified as ref@{<Nth>} , show the index\nformat. If the starting point was specified as ref@{now} , show the\ntimestamp format. If neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date . Otherwise, show the index format. Under --pretty=oneline , the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse .\nSee also git-reflog . Under --pretty=reference , this information will not be shown at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --merge"}, {"role": "assistant", "content": "Show commits touching conflicted paths in the range HEAD...<other> ,\nwhere <other> is the first existing pseudoref in MERGE_HEAD , CHERRY_PICK_HEAD , REVERT_HEAD or REBASE_HEAD . Only works\nwhen the index has unmerged entries. This option can be used to show\nrelevant commits when resolving conflicts from a 3-way merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  <paths>"}, {"role": "assistant", "content": "Commits modifying the given <paths> are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --simplify-by-decoration"}, {"role": "assistant", "content": "Commits that are referred by some branch or tag are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  Default mode"}, {"role": "assistant", "content": "Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --full-history"}, {"role": "assistant", "content": "Same as the default mode, but does not prune some history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --dense"}, {"role": "assistant", "content": "Only the selected commits are shown, plus some to have a\nmeaningful history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --sparse"}, {"role": "assistant", "content": "All commits in the simplified history are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --simplify-merges"}, {"role": "assistant", "content": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  Default mode"}, {"role": "assistant", "content": "Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents. This results in: .-A---N---O\n\t /     /   /\n\tI---------D Note how the rule to only follow the TREESAME parent, if one is\navailable, removed B from consideration entirely. C was\nconsidered via N , but is TREESAME.  Root commits are compared to an\nempty tree, so I is !TREESAME. Parent/child relations are only visible with --parents , but that does\nnot affect the commits selected in default mode, so we have shown the\nparent lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --dense"}, {"role": "assistant", "content": "Commits that are walked are included if they are not TREESAME\nto any parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --sparse"}, {"role": "assistant", "content": "All commits that are walked are included. Note that without --full-history , this still simplifies merges: if\none of the parents is TREESAME, we follow only that one, so the other\nsides of the merge are never walked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --simplify-merges"}, {"role": "assistant", "content": "First, build a history graph in the same way that --full-history with parent rewriting does (see above). Then simplify each commit C to its replacement C' in the final\nhistory according to the following rules: Set C' to C . Replace each parent P of C' with its simplification P' .  In\nthe process, drop parents that are ancestors of other parents or that are\nroot commits TREESAME to an empty tree, and remove duplicates, but take care\nto never drop all parents that we are TREESAME to. If after this parent rewriting, C' is a root or merge commit (has\nzero or >1 parents), a boundary commit, or !TREESAME, it remains.\nOtherwise, it is replaced with its only parent. The effect of this is best shown by way of comparing to --full-history with parent rewriting.  The example turns into: .-A---M---N---O\n\t /     /       /\n\tI     B       D\n\t \\   /       /\n\t  `---------' Note the major differences in N , P , and Q over --full-history : N 's parent list had I removed, because it is an ancestor of the\nother parent M .  Still, N remained because it is !TREESAME. P 's parent list similarly had I removed. P was then\nremoved completely, because it had one parent and is TREESAME. Q 's parent list had Y simplified to X . X was then removed, because it\nwas a TREESAME root. Q was then removed completely, because it had one\nparent and is TREESAME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "Limit the displayed commits to those which are an ancestor of\n<commit>, or which are a descendant of <commit>, or are <commit>\nitself. As an example use case, consider the following commit history: D---E-------F\n\t   /     \\       \\\n\t  B---C---G---H---I---J\n\t /                     \\\n\tA-------K---------------L--M A regular D..M computes the set of commits that are ancestors of M ,\nbut excludes the ones that are ancestors of D . This is useful to see\nwhat happened to the history leading to M since D , in the sense\nthat “what does M have that did not exist in D ”. The result in this\nexample would be all the commits, except A and B (and D itself,\nof course). When we want to find out what commits in M are contaminated with the\nbug introduced by D and need fixing, however, we might want to view\nonly the subset of D..M that are actually descendants of D , i.e.\nexcluding C and K . This is exactly what the --ancestry-path option does. Applied to the D..M range, it results in: E-------F\n\t\t \\       \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M We can also use --ancestry-path=D instead of --ancestry-path which\nmeans the same thing when applied to the D..M range but is just more\nexplicit. If we instead are interested in a given topic within this range, and all\ncommits affected by that topic, we may only want to view the subset of D..M which contain that topic in their ancestry path.  So, using --ancestry-path=H D..M for example would result in: E\n\t\t \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M Whereas --ancestry-path=K D..M would result in K---------------L--M"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --show-pulls"}, {"role": "assistant", "content": "In addition to the commits shown in the default history, show\neach merge commit that is not TREESAME to its first parent but\nis TREESAME to a later parent. When a merge commit is included by --show-pulls , the merge is\ntreated as if it \"pulled\" the change from another branch. When using --show-pulls on this example (and no other options) the resulting\ngraph is: I---X---R---N Here, the merge commits R and N are included because they pulled\nthe commits X and R into the base branch, respectively. These\nmerges are the reason the commits A and B do not appear in the\ndefault history. When --show-pulls is paired with --simplify-merges , the\ngraph includes all of the necessary information: .-A---M--.   N\n\t /     /    \\ /\n\tI     B      R\n\t \\   /      /\n\t  \\ /      /\n\t   `---X--' Notice that since M is reachable from R , the edge from N to M was simplified away. However, N still appears in the history as an\nimportant commit because it \"pulled\" the change R into the main\nbranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output"}, {"role": "assistant", "content": "MAPPING AUTHORS See gitmailmap . Note that if git shortlog is run outside of a repository (to process\nlog contents on standard input), it will look for a .mailmap file in\nthe current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "NAME git-describe - Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "SYNOPSIS git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>…​] git describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>] git describe <blob>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "DESCRIPTION The command finds the most recent tag that is reachable from a\ncommit.  If the tag points to the commit, then only the tag is\nshown.  Otherwise, it suffixes the tag name with the number of\nadditional commits on top of the tagged object and the\nabbreviated object name of the most recent commit. The result\nis a \"human-readable\" object name which can also be used to\nidentify the commit to other git commands. By default (without --all or --tags) git describe only shows\nannotated tags.  For more information about creating annotated tags\nsee the -a and -s options to git-tag . If the given object refers to a blob, it will be described\nas <commit-ish>:<path> , such that the blob can be found\nat <path> in the <commit-ish> , which itself describes the\nfirst commit in which this blob occurs in a reverse revision walk\nfrom HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  <commit-ish>…​"}, {"role": "assistant", "content": "Commit-ish object names to describe.  Defaults to HEAD if omitted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --dirty[=<mark>]  --broken[=<mark>]"}, {"role": "assistant", "content": "Describe the state of the working tree.  When the working\ntree matches HEAD, the output is the same as \"git describe\nHEAD\".  If the working tree has local modification \"-dirty\"\nis appended to it.  If a repository is corrupt and Git\ncannot determine if there is local modification, Git will\nerror out, unless ‘--broken’ is given, which appends\nthe suffix \"-broken\" instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --all"}, {"role": "assistant", "content": "Instead of using only the annotated tags, use any ref\nfound in refs/ namespace.  This option enables matching\nany known branch, remote-tracking branch, or lightweight tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --tags"}, {"role": "assistant", "content": "Instead of using only the annotated tags, use any tag\nfound in refs/tags namespace.  This option enables matching\na lightweight (non-annotated) tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --contains"}, {"role": "assistant", "content": "Instead of finding the tag that predates the commit, find\nthe tag that comes after the commit, and thus contains it.\nAutomatically implies --tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --abbrev=<n>"}, {"role": "assistant", "content": "Instead of using the default number of hexadecimal digits (which\nwill vary according to the number of objects in the repository with\na default of 7) of the abbreviated object name, use <n> digits, or\nas many digits as needed to form a unique object name. An <n> of 0\nwill suppress long format, only showing the closest tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --candidates=<n>"}, {"role": "assistant", "content": "Instead of considering only the 10 most recent tags as\ncandidates to describe the input commit-ish consider\nup to <n> candidates.  Increasing <n> above 10 will take\nslightly longer but may produce a more accurate result.\nAn <n> of 0 will cause only exact matches to be output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --exact-match"}, {"role": "assistant", "content": "Only output exact matches (a tag directly references the\nsupplied commit).  This is a synonym for --candidates=0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --debug"}, {"role": "assistant", "content": "Verbosely display information about the searching strategy\nbeing employed to standard error.  The tag name will still\nbe printed to standard out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --long"}, {"role": "assistant", "content": "Always output the long format (the tag, the number of commits\nand the abbreviated commit name) even when it matches a tag.\nThis is useful when you want to see parts of the commit object name\nin \"describe\" output, even when the commit in question happens to be\na tagged version.  Instead of just emitting the tag name, it will\ndescribe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2\nthat points at object deadbee…​.)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --match <pattern>"}, {"role": "assistant", "content": "Only consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix. If used with --all , it also\nconsiders local branches and remote-tracking references matching the\npattern, excluding respectively \"refs/heads/\" and \"refs/remotes/\"\nprefix; references of other types are never considered. If given\nmultiple times, a list of patterns will be accumulated, and tags\nmatching any of the patterns will be considered.  Use --no-match to\nclear and reset the list of patterns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --exclude <pattern>"}, {"role": "assistant", "content": "Do not consider tags matching the given glob(7) pattern, excluding\nthe \"refs/tags/\" prefix. If used with --all , it also does not consider\nlocal branches and remote-tracking references matching the pattern,\nexcluding respectively \"refs/heads/\" and \"refs/remotes/\" prefix;\nreferences of other types are never considered. If given multiple times,\na list of patterns will be accumulated and tags matching any of the\npatterns will be excluded. When combined with --match a tag will be\nconsidered when it matches at least one --match pattern and does not\nmatch any of the --exclude patterns. Use --no-exclude to clear and\nreset the list of patterns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --always"}, {"role": "assistant", "content": "Show uniquely abbreviated commit object as fallback."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --first-parent"}, {"role": "assistant", "content": "Follow only the first parent commit upon seeing a merge commit.\nThis is useful when you wish to not match tags on branches merged\nin the history of the target commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "EXAMPLES With something like git.git current tree, I get: [torvalds@g5 git]$ git describe parent\nv1.0.4-14-g2414721 i.e. the current head of my \"parent\" branch is based on v1.0.4,\nbut since it has a few commits on top of that,\ndescribe has added the number of additional commits (\"14\") and\nan abbreviated object name for the commit itself (\"2414721\")\nat the end. The number of additional commits is the number\nof commits which would be displayed by \"git log v1.0.4..parent\".\nThe hash suffix is \"-g\" + an unambiguous abbreviation for the tip commit\nof parent (which was 2414721b194453f058079d897d13c4e377f92dc6 ). The\nlength of the abbreviation scales as the repository grows, using the\napproximate number of objects in the repository and a bit of math\naround the birthday paradox, and defaults to a minimum of 7.\nThe \"g\" prefix stands for \"git\" and is used to allow describing the version of\na software depending on the SCM the software is managed with. This is useful\nin an environment where people may use different SCMs. Doing a git describe on a tag-name will just show the tag name: [torvalds@g5 git]$ git describe v1.0.4\nv1.0.4 With --all, the command can use branch heads as references, so\nthe output shows the reference path as well: [torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2\ntags/v1.0.0-21-g975b [torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^\nheads/lt/describe-7-g975b With --abbrev set to 0, the command can be used to find the\nclosest tagname without any suffix: [torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2\ntags/v1.0.0 Note that the suffix you get if you type these commands today may be\nlonger than what Linus saw above when he ran these commands, as your\nGit repository may have new commits whose object names begin with\n975b that did not exist back then, and \"-g975b\" suffix alone may not\nbe sufficient to disambiguate these commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "SEARCH STRATEGY For each commit-ish supplied, git describe will first look for\na tag which tags exactly that commit.  Annotated tags will always\nbe preferred over lightweight tags, and tags with newer dates will\nalways be preferred over tags with older dates.  If an exact match\nis found, its name will be output and searching will stop. If an exact match was not found, git describe will walk back\nthrough the commit history to locate an ancestor commit which\nhas been tagged.  The ancestor’s tag will be output along with an\nabbreviation of the input commit-ish’s SHA-1. If --first-parent was\nspecified then the walk will only consider the first parent of each\ncommit. If multiple tags were found during the walk then the tag which\nhas the fewest commits different from the input commit-ish will be\nselected and output.  Here fewest commits different is defined as\nthe number of commits which would be shown by git log tag..input will be the smallest number of commits possible."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "BUGS Tree objects as well as tag objects not pointing at commits, cannot be described.\nWhen describing blobs, the lightweight tags pointing at blobs are ignored,\nbut the blob is still described as <commit-ish>:<path> despite the lightweight\ntag being favorable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "NAME git-apply - Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "SYNOPSIS git apply [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]\n\t  [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]\n\t  [--allow-binary-replacement | --binary] [--reject] [-z]\n\t  [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]\n\t  [--ignore-space-change | --ignore-whitespace]\n\t  [--whitespace=(nowarn|warn|fix|error|error-all)]\n\t  [--exclude=<path>] [--include=<path>] [--directory=<root>]\n\t  [--verbose | --quiet] [--unsafe-paths] [--allow-empty] [<patch>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "DESCRIPTION Reads the supplied diff output (i.e. \"a patch\") and applies it to files.\nWhen running from a subdirectory in a repository, patched paths\noutside the directory are ignored.\nWith the --index option, the patch is also applied to the index, and\nwith the --cached option, the patch is only applied to the index.\nWithout these options, the command applies the patch only to files,\nand does not require them to be in a Git repository. This command applies the patch but does not create a commit.  Use git-am to create commits from patches generated by git-format-patch and/or received by email."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  <patch>…​"}, {"role": "assistant", "content": "The files to read the patch from. - can be used to read\nfrom the standard input."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --stat"}, {"role": "assistant", "content": "Instead of applying the patch, output diffstat for the\ninput.  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows the number of added and\ndeleted lines in decimal notation and the pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 .  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --summary"}, {"role": "assistant", "content": "Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames, and mode changes.\nTurns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --check"}, {"role": "assistant", "content": "Instead of applying the patch, see if the patch is\napplicable to the current working tree and/or the index\nfile and detects errors.  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --index"}, {"role": "assistant", "content": "Apply the patch to both the index and the working tree (or\nmerely check that it would apply cleanly to both if --check is\nin effect). Note that --index expects index entries and\nworking tree copies for relevant paths to be identical (their\ncontents and metadata such as file mode must match), and will\nraise an error if they are not, even if the patch would apply\ncleanly to both the index and the working tree in isolation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --cached"}, {"role": "assistant", "content": "Apply the patch to just the index, without touching the working\ntree. If --check is in effect, merely check that it would\napply cleanly to the index entry."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --intent-to-add"}, {"role": "assistant", "content": "When applying the patch only to the working tree, mark new\nfiles to be added to the index later (see --intent-to-add option in git-add ). This option is ignored unless\nrunning in a Git repository and --index is not specified.\nNote that --index could be implied by other options such\nas --cached or --3way ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -3  --3way"}, {"role": "assistant", "content": "Attempt 3-way merge if the patch records the identity of blobs it is supposed\nto apply to and we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option unless the --cached option is used, and is incompatible with the --reject option.\nWhen used with the --cached option, any conflicts are left at higher stages\nin the cache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --build-fake-ancestor=<file>"}, {"role": "assistant", "content": "Newer git diff output has embedded index information for each blob to help identify the original version that\nthe patch applies to.  When this flag is given, and if\nthe original versions of the blobs are available locally,\nbuilds a temporary index containing those blobs. When a pure mode change is encountered (which has no index information),\nthe information is read from the current index instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -R  --reverse"}, {"role": "assistant", "content": "Apply the patch in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --reject"}, {"role": "assistant", "content": "For atomicity, git apply by default fails the whole patch and\ndoes not touch the working tree when some of the hunks\ndo not apply.  This option makes it apply\nthe parts of the patch that are applicable, and leave the\nrejected hunks in corresponding *.rej files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -z"}, {"role": "assistant", "content": "When --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -p<n>"}, {"role": "assistant", "content": "Remove <n> leading path components (separated by slashes) from\ntraditional diff paths. E.g., with -p2 , a patch against a/dir/file will be applied directly to file . The default is\n1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -C<n>"}, {"role": "assistant", "content": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --unidiff-zero"}, {"role": "assistant", "content": "By default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0 . To bypass these\nchecks use --unidiff-zero . Note, for the reasons stated above, the usage of context-free patches is\ndiscouraged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --apply"}, {"role": "assistant", "content": "If you use any of the options marked \"Turns off apply \" above, git apply reads and outputs the\nrequested information without actually applying the\npatch.  Give this flag after those flags to also apply\nthe patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --no-add"}, {"role": "assistant", "content": "When applying a patch, ignore additions made by the\npatch.  This can be used to extract the common part between\ntwo files by first running diff on them and applying\nthe result with this option, which would apply the\ndeletion part but not the addition part."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --allow-binary-replacement  --binary"}, {"role": "assistant", "content": "Historically we did not allow binary patch application\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently, we always allow binary\npatch application, so this is a no-op."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --exclude=<path-pattern>"}, {"role": "assistant", "content": "Don’t apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to exclude certain\nfiles or directories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --include=<path-pattern>"}, {"role": "assistant", "content": "Apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to include certain\nfiles or directories. When --exclude and --include patterns are used, they are examined in the\norder they appear on the command line, and the first match determines if a\npatch to each path is used.  A patch to a path that does not match any\ninclude/exclude pattern is used by default if there is no include pattern\non the command line, and ignored if there is any include pattern."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --ignore-space-change  --ignore-whitespace"}, {"role": "assistant", "content": "When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the --whitespace option. New lines will still be fixed, though."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --whitespace=<action>"}, {"role": "assistant", "content": "When applying a patch, detect a new or modified line that has\nwhitespace errors.  What are considered whitespace errors is\ncontrolled by core.whitespace configuration.  By default,\ntrailing whitespaces (including lines that solely consist of\nwhitespaces) and a space character that is immediately followed\nby a tab character inside the initial indent of the line are\nconsidered whitespace errors. By default, the command outputs warning messages but applies the patch.\nWhen git-apply is used for statistics and not applying a\npatch, it defaults to nowarn . You can use different <action> values to control this\nbehavior: nowarn turns off the trailing whitespace warning. warn outputs warnings for a few such errors, but applies the\npatch as-is (default). fix outputs warnings for a few such errors, and applies the\npatch after fixing them ( strip is a synonym — the tool\nused to consider only trailing whitespace characters as errors, and the\nfix involved stripping them, but modern Gits do more). error outputs warnings for a few such errors, and refuses\nto apply the patch. error-all is similar to error but shows all errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --inaccurate-eof"}, {"role": "assistant", "content": "Under certain circumstances, some versions of diff do not correctly\ndetect a missing new-line at the end of the file. As a result, patches\ncreated by such diff programs do not record incomplete lines\ncorrectly. This option adds support for applying such patches by\nworking around this bug."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -v  --verbose"}, {"role": "assistant", "content": "Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -q  --quiet"}, {"role": "assistant", "content": "Suppress stderr output. Messages about patch status and progress\nwill not be printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --recount"}, {"role": "assistant", "content": "Do not trust the line counts in the hunk headers, but infer them\nby inspecting the patch (e.g. after editing the patch without\nadjusting the hunk headers appropriately)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --directory=<root>"}, {"role": "assistant", "content": "Prepend <root> to all filenames.  If a \"-p\" argument was also passed,\nit is applied before prepending the new root. For example, a patch that talks about updating a/git-gui.sh to b/git-gui.sh can be applied to the file in the working tree modules/git-gui/git-gui.sh by\nrunning git apply --directory=modules/git-gui ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --unsafe-paths"}, {"role": "assistant", "content": "By default, a patch that affects outside the working area\n(either a Git controlled working tree, or the current working\ndirectory when \"git apply\" is used as a replacement of GNU\npatch) is rejected as a mistake (or a mischief). When git apply is used as a \"better GNU patch\", the user can pass\nthe --unsafe-paths option to override this safety check.  This option\nhas no effect when --index or --cached is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --allow-empty"}, {"role": "assistant", "content": "Don’t return an error for patches containing no diff. This includes\nempty patches and patches with commit text only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  apply.ignoreWhitespace"}, {"role": "assistant", "content": "When set to change , tells git apply to ignore changes in\nwhitespace, in the same way as the --ignore-space-change option.\nWhen set to one of: no, none, never, false, it tells git apply to\nrespect all whitespace differences.\nSee git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  apply.whitespace"}, {"role": "assistant", "content": "Tells git apply how to handle whitespace, in the same way\nas the --whitespace option. See git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "SUBMODULES If the patch contains any changes to submodules then git apply treats these changes as follows. If --index is specified (explicitly or implicitly), then the submodule\ncommits must match the index exactly for the patch to apply.  If any\nof the submodules are checked-out, then these check-outs are completely\nignored, i.e., they are not required to be up to date or clean and they\nare not updated. If --index is not specified, then the submodule commits in the patch\nare ignored and only the absence or presence of the corresponding\nsubdirectory is checked and (if possible) updated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits"}, {"role": "assistant", "content": "NAME git-cherry-pick - Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits"}, {"role": "assistant", "content": "SYNOPSIS git cherry-pick [--edit] [-n] [-m <parent-number>] [-s] [-x] [--ff]\n\t\t  [-S[<keyid>]] <commit>…​ git cherry-pick (--continue | --skip | --abort | --quit)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits"}, {"role": "assistant", "content": "DESCRIPTION Given one or more existing commits, apply the change each one\nintroduces, recording a new commit for each.  This requires your\nworking tree to be clean (no modifications from the HEAD commit). When it is not obvious how to apply a change, the following\nhappens: The current branch and HEAD pointer stay at the last commit\nsuccessfully made. The CHERRY_PICK_HEAD ref is set to point at the commit that\nintroduced the change that is difficult to apply. Paths in which the change applied cleanly are updated both\nin the index file and in your working tree. For conflicting paths, the index file records up to three\nversions, as described in the \"TRUE MERGE\" section of git-merge .  The working tree files will include\na description of the conflict bracketed by the usual\nconflict markers <<<<<<< and >>>>>>> . No other modifications are made. See git-merge for some hints on resolving such\nconflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  <commit>…​"}, {"role": "assistant", "content": "Commits to cherry-pick.\nFor a more complete list of ways to spell commits, see gitrevisions .\nSets of commits can be passed but no traversal is done by\ndefault, as if the --no-walk option was specified, see git-rev-list . Note that specifying a range will\nfeed all <commit>…​ arguments to a single revision walk\n(see a later example that uses maint master..next )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -e  --edit"}, {"role": "assistant", "content": "With this option, git cherry-pick will let you edit the commit\nmessage prior to committing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit for more\ndetails. In particular, if the <mode> is given a value of scissors ,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -x"}, {"role": "assistant", "content": "When recording the commit, append a line that says\n\"(cherry picked from commit …​)\" to the original commit\nmessage in order to indicate which commit this change was\ncherry-picked from.  This is done only for cherry\npicks without conflicts.  Do not use this option if\nyou are cherry-picking from your private branch because\nthe information is useless to the recipient.  If on the\nother hand you are cherry-picking between two publicly\nvisible branches (e.g. backporting a fix to a\nmaintenance branch for an older release from a\ndevelopment branch), adding this information can be\nuseful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -r"}, {"role": "assistant", "content": "It used to be that the command defaulted to do -x described above, and -r was to disable it.  Now the\ndefault is not to do -x so this option is a no-op."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -m <parent-number>  --mainline <parent-number>"}, {"role": "assistant", "content": "Usually you cannot cherry-pick a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows cherry-pick to replay the change\nrelative to the specified parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -n  --no-commit"}, {"role": "assistant", "content": "Usually the command automatically creates a sequence of commits.\nThis flag applies the changes necessary to cherry-pick\neach named commit to your working tree and the index,\nwithout making any commit.  In addition, when this\noption is used, your index does not have to match the\nHEAD commit.  The cherry-pick is done against the\nbeginning state of your index. This is useful when cherry-picking more than one commits'\neffect to your index in a row."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -s  --signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --ff"}, {"role": "assistant", "content": "If the current HEAD is the same as the parent of the\ncherry-pick’ed commit, then a fast forward to this commit will\nbe performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --allow-empty"}, {"role": "assistant", "content": "By default, cherry-picking an empty commit will fail,\nindicating that an explicit invocation of git commit\n--allow-empty is required. This option overrides that\nbehavior, allowing empty commits to be preserved automatically\nin a cherry-pick. Note that when \"--ff\" is in effect, empty\ncommits that meet the \"fast-forward\" requirement will be kept\neven without this option.  Note also, that use of this option only\nkeeps commits that were initially empty (i.e. the commit recorded the\nsame tree as its parent).  Commits which are made empty due to a\nprevious commit will cause the cherry-pick to fail.  To force the\ninclusion of those commits, use --empty=keep ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --allow-empty-message"}, {"role": "assistant", "content": "By default, cherry-picking a commit with an empty message will fail.\nThis option overrides that behavior, allowing commits with empty\nmessages to be cherry picked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --empty=(drop|keep|stop)"}, {"role": "assistant", "content": "How to handle commits being cherry-picked that are redundant with\nchanges already in the current history. drop The commit will be dropped. keep The commit will be kept. Implies --allow-empty . stop The cherry-pick will stop when the commit is applied, allowing\nyou to examine the commit. This is the default behavior. Note that --empty=drop and --empty=stop only specify how to handle a\ncommit that was not initially empty, but rather became empty due to a previous\ncommit. Commits that were initially empty will still cause the cherry-pick to\nfail unless one of --empty=keep or --allow-empty are specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --keep-redundant-commits"}, {"role": "assistant", "content": "Deprecated synonym for --empty=keep ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  -X<option>  --strategy-option=<option>"}, {"role": "assistant", "content": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  drop"}, {"role": "assistant", "content": "The commit will be dropped."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  keep"}, {"role": "assistant", "content": "The commit will be kept. Implies --allow-empty ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  stop"}, {"role": "assistant", "content": "The cherry-pick will stop when the commit is applied, allowing\nyou to examine the commit. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --continue"}, {"role": "assistant", "content": "Continue the operation in progress using the information in .git/sequencer .  Can be used to continue after resolving\nconflicts in a failed cherry-pick or revert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --skip"}, {"role": "assistant", "content": "Skip the current commit and continue with the rest of the\nsequence."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --quit"}, {"role": "assistant", "content": "Forget about the current operation in progress.  Can be used\nto clear the sequencer state after a failed cherry-pick or\nrevert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --abort"}, {"role": "assistant", "content": "Cancel the operation and return to the pre-sequence state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick master"}, {"role": "assistant", "content": "Apply the change introduced by the commit at the tip of the\nmaster branch and create a new commit with this change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick ..master  git cherry-pick ^HEAD master"}, {"role": "assistant", "content": "Apply the changes introduced by all commits that are ancestors\nof master but not of HEAD to produce new commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick maint next ^master  git cherry-pick maint master..next"}, {"role": "assistant", "content": "Apply the changes introduced by all commits that are\nancestors of maint or next, but not master or any of its\nancestors.  Note that the latter does not mean maint and\neverything between master and next ; specifically, maint will not be used if it is included in master ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick master~4 master~2"}, {"role": "assistant", "content": "Apply the changes introduced by the fifth and third last\ncommits pointed to by master and create 2 new commits with\nthese changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick -n master~1 next"}, {"role": "assistant", "content": "Apply to the working tree and the index the changes introduced\nby the second last commit pointed to by master and by the last\ncommit pointed to by next, but do not create any commit with\nthese changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git cherry-pick --ff ..next"}, {"role": "assistant", "content": "If history is linear and HEAD is an ancestor of next, update\nthe working tree and advance the HEAD pointer to match next.\nOtherwise, apply the changes introduced by those commits that\nare in next but not HEAD to the current branch, creating a new\ncommit for each new change."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  git rev-list --reverse master -- README | git cherry-pick -n --stdin"}, {"role": "assistant", "content": "Apply the changes introduced by all commits on the master\nbranch that touched README to the working tree and index,\nso the result can be inspected and made into a single new\ncommit if suitable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "NAME git-diff - Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "SYNOPSIS git diff [<options>] [<commit>] [--] [<path>…​] git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​] git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​] git diff [<options>] <commit>…​<commit> [--] [<path>…​] git diff [<options>] <blob> <blob> git diff [<options>] --no-index [--] <path> <path>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven’t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --no-index [--] <path> <path>"}, {"role": "assistant", "content": "This form is to compare the given two paths on the\nfilesystem.  You can omit the --no-index option when\nrunning the command in a working tree controlled by Git and\nat least one of the paths points outside the working tree,\nor when running the command outside a working tree\ncontrolled by Git. This form implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you staged for the next\ncommit relative to the named <commit>.  Typically you\nwould want comparison with the latest commit, so if you\ndo not give <commit>, it defaults to HEAD.\nIf HEAD does not exist (e.g. unborn branches) and\n<commit> is not given, it shows all staged changes.\n--staged is a synonym of --cached. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --cached --merge-base A is equivalent to git diff --cached $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes you have in your\nworking tree relative to the named <commit>.  You can\nuse HEAD to compare it with the latest commit, or a\nbranch name to compare with the tip of a different\nbranch. If --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD. git diff --merge-base A is equivalent to git diff $(git merge-base A HEAD) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--merge-base] <commit> <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is to view the changes between two arbitrary\n<commit>. If --merge-base is given, use the merge base of the two commits for the\n\"before\" side. git diff --merge-base A B is equivalent to git diff $(git merge-base A B) B ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit> <commit>…​ <commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the results of a merge commit.  The first\nlisted <commit> must be the merge itself; the remaining two or\nmore commits should be its parents.  Convenient ways to produce\nthe desired set of revisions are to use the suffixes ^@ and ^! .  If A is a merge commit, then git diff A A^@ , git diff A^! and git show A all give the same combined diff."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>..<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This is synonymous to the earlier form (without the .. ) for\nviewing the changes between two arbitrary <commit>.  If <commit> on\none side is omitted, it will have the same effect as\nusing HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <commit>...<commit> [--] [<path>…​]"}, {"role": "assistant", "content": "This form is to view the changes on the branch containing\nand up to the second <commit>, starting at a common ancestor\nof both <commit>. git diff A...B is equivalent to git diff $(git merge-base A B) B .  You can omit any one\nof <commit>, which has the same effect as using HEAD instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob>"}, {"role": "assistant", "content": "This form is to view the differences between the raw\ncontents of two blob objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p ).\nThis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --raw"}, {"role": "assistant", "content": "Generate the diff in raw format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -z"}, {"role": "assistant", "content": "When --raw , --numstat , --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto .\nIt can be changed by the color.ui and color.diff configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nIt can be changed by the diff.colorMoved configuration setting.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --exit-code"}, {"role": "assistant", "content": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --quiet"}, {"role": "assistant", "content": "Disable all output of the program. Implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -1 --base  -2 --ours  -3 --theirs"}, {"role": "assistant", "content": "Compare the working tree with the \"base\" version (stage #1),\n\"our branch\" (stage #2) or \"their branch\" (stage #3).  The\nindex contains these stages only for unmerged entries i.e.\nwhile resolving conflicts.  See git-read-tree section \"3-Way Merge\" for detailed information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -0"}, {"role": "assistant", "content": "Omit diff output for unmerged entries and just show\n\"Unmerged\".  Can be used only when comparing the working tree\nwith the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <path>…​"}, {"role": "assistant", "content": "The <paths> parameters, when given, are used to limit\nthe diff to the named paths (you can give directory\nnames and get diff for all files under them)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…​]"}, {"role": "assistant", "content": "compares the trees named by the two arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git-diff-files [<pattern>…​]"}, {"role": "assistant", "content": "compares the index and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "diff format for merges \"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\"\ncan take -c or --cc option\nto generate diff output also for merge commits.  The output differs\nfrom the format described above in the following way: there is a colon for each parent there are more \"src\" modes and \"src\" sha1 status is concatenated status characters for each parent no optional \"score\" number tab-separated pathname(s) of the file For -c and --cc , only the destination or final path is shown even\nif the file was renamed on any side of history.  With --combined-all-paths , the name of the path in each parent is shown\nfollowed by the name of the path in the merge commit. Examples for -c and --cc without --combined-all-paths : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tphooey.c Examples when --combined-all-paths added to either -c or --cc : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\tdesc.c\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tfoo.sh\tbar.sh\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tfooey.c\tfuey.c\tphooey.c Note that combined diff lists only files which were modified from\nall parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc"}, {"role": "assistant", "content": "other diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Various ways to check your working tree"}, {"role": "assistant", "content": "$ git diff (1) $ git diff --cached (2) $ git diff HEAD (3) $ git diff AUTO_MERGE (4) Changes in the working tree not yet staged for the next commit. Changes between the index and your last commit; what you\nwould be committing if you run git commit without -a option. Changes in the working tree since your last commit; what you\nwould be committing if you run git commit -a Changes in the working tree you’ve made to resolve textual\nconflicts so far."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing with arbitrary commits"}, {"role": "assistant", "content": "$ git diff test (1) $ git diff HEAD -- ./test (2) $ git diff HEAD^ HEAD (3) Instead of using the tip of the current branch, compare with the\ntip of \"test\" branch. Instead of comparing with the tip of \"test\" branch, compare with\nthe tip of the current branch, but limit the comparison to the\nfile \"test\". Compare the version before the last commit and the last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing branches"}, {"role": "assistant", "content": "$ git diff topic master (1) $ git diff topic..master (2) $ git diff topic...master (3) Changes between the tips of the topic and the master branches. Same as above. Changes that occurred on the master branch since when the topic\nbranch was started off it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Limiting the diff output"}, {"role": "assistant", "content": "$ git diff --diff-filter=MRC (1) $ git diff --name-status (2) $ git diff arch/i386 include/asm-i386 (3) Show only modification, rename, and copy, but not addition\nor deletion. Show only names and the nature of change, but not actual\ndiff output. Limit diff output to named subtrees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Munging the diff output"}, {"role": "assistant", "content": "$ git diff --find-copies-harder -B -C (1) $ git diff -R (2) Spend extra cycles to find renames, copies and complete\nrewrites (very expensive). Output diff in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.autoRefreshIndex"}, {"role": "assistant", "content": "When using git diff to compare with work tree\nfiles, do not consider stat-only changes as changed.\nInstead, silently run git update-index --refresh to\nupdate the cached stat information for paths whose\ncontents in the work tree match the contents in the\nindex.  This option defaults to true.  Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statGraphWidth"}, {"role": "assistant", "content": "Limit the width of the graph part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.external"}, {"role": "assistant", "content": "If this config variable is set, diff generation is not\nperformed using the internal diff machinery, but using the\ngiven command.  Can be overridden with the ‘GIT_EXTERNAL_DIFF’\nenvironment variable.  The command is called with parameters\nas described under \"git Diffs\" in git .  Note: if\nyou want to use an external diff program only on a subset of\nyour files, you might want to use gitattributes instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dstPrefix"}, {"role": "assistant", "content": "If set, git diff uses this destination prefix. Defaults to \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.relative"}, {"role": "assistant", "content": "If set to true , git diff does not show changes outside of the directory\nand show pathnames relative to the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.orderFile"}, {"role": "assistant", "content": "File indicating how to order files within a diff.\nSee the -O option to git-diff for details.\nIf diff.orderFile is a relative pathname, it is treated as\nrelative to the top of the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renameLimit"}, {"role": "assistant", "content": "The number of files to consider in the exhaustive portion of\ncopy/rename detection; equivalent to the git diff option -l .  If not set, the default value is currently 1000.  This\nsetting has no effect if rename detection is turned off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.submodule"}, {"role": "assistant", "content": "Specify the format in which differences in submodules are\nshown.  The \"short\" format just shows the names of the commits\nat the beginning and end of the range. The \"log\" format lists\nthe commits in the range like git-submodule summary does. The \"diff\" format shows an inline diff of the changed\ncontents of the submodule. Defaults to \"short\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wordRegex"}, {"role": "assistant", "content": "A POSIX Extended Regular Expression used to determine what is a \"word\"\nwhen performing word-by-word difference calculations.  Character\nsequences that match the regular expression are \"words\", all other\ncharacters are ignorable whitespace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.command"}, {"role": "assistant", "content": "The custom diff driver command.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.binary"}, {"role": "assistant", "content": "Set this option to true to make the diff driver treat files as\nbinary.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.textconv"}, {"role": "assistant", "content": "The command that the diff driver should call to generate the\ntext-converted version of a file.  The result of the\nconversion is used to generate a human-readable diff.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.wordRegex"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nsplit words in a line.  See gitattributes for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.cachetextconv"}, {"role": "assistant", "content": "Set this option to true to make the diff driver cache the text\nconversion outputs.  See gitattributes for details. araxis bc codecompare deltawalker diffmerge diffuse ecmerge emerge examdiff guiffy gvimdiff kdiff3 kompare meld nvimdiff opendiff p4merge smerge tkdiff vimdiff winmerge xxdiff"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMoved"}, {"role": "assistant", "content": "If set to either a valid <mode> or a true value, moved lines\nin a diff are colored differently, for details of valid modes\nsee --color-moved in git-diff . If simply set to\ntrue the default color mode will be used. When set to false,\nmoved lines are not colored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.colorMovedWS"}, {"role": "assistant", "content": "When moved lines are colored using e.g. the diff.colorMoved setting,\nthis option controls the <mode> how spaces are treated.\nFor details of valid modes see --color-moved-ws in git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff"}, {"role": "assistant", "content": "compares the (i)ndex and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --cached"}, {"role": "assistant", "content": "compares a (c)ommit and the (i)ndex;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "NAME git-rebase - Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "SYNOPSIS git rebase [-i | --interactive] [<options>] [--exec <cmd>]\n\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]] git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n\t--root [<branch>] git rebase (--continue|--skip|--abort|--quit|--edit-todo|--show-current-patch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "DESCRIPTION If <branch> is specified, git rebase will perform an automatic git switch <branch> before doing anything else.  Otherwise\nit remains on the current branch. If <upstream> is not specified, the upstream configured in branch.<name>.remote and branch.<name>.merge options will be used (see git-config for details) and the --fork-point option is\nassumed.  If you are currently not on any branch or if the current\nbranch does not have a configured upstream, the rebase will abort. All changes made by commits in the current branch but that are not\nin <upstream> are saved to a temporary area.  This is the same set\nof commits that would be shown by git log <upstream>..HEAD ; or by git log 'fork_point'..HEAD , if --fork-point is active (see the\ndescription on --fork-point below); or by git log HEAD , if the --root option is specified. The current branch is reset to <upstream> or <newbase> if the --onto option was supplied.  This has the exact same effect as git reset --hard <upstream> (or <newbase> ). ORIG_HEAD is set\nto point at the tip of the branch before the reset. Note ORIG_HEAD is not guaranteed to still point to the previous branch tip\nat the end of the rebase if other commands that write that pseudo-ref\n(e.g. git reset ) are used during the rebase. The previous branch tip,\nhowever, is accessible using the reflog of the current branch\n(i.e. @{1} , see gitrevisions ). The commits that were previously saved into the temporary area are\nthen reapplied to the current branch, one by one, in order. Note that\nany commits in HEAD which introduce the same textual changes as a commit\nin HEAD..<upstream> are omitted (i.e., a patch already accepted upstream\nwith a different commit message or timestamp will be skipped). It is possible that a merge failure will prevent this process from being\ncompletely automatic.  You will have to resolve any such merge failure\nand run git rebase --continue .  Another option is to bypass the commit\nthat caused the merge failure with git rebase --skip .  To check out the\noriginal <branch> and remove the .git/rebase-apply working files, use\nthe command git rebase --abort instead. Assume the following history exists and the current branch is \"topic\": A---B---C topic\n         /\n    D---E---F---G master From this point, the result of either of the following commands: git rebase master\ngit rebase master topic would be: A'--B'--C' topic\n                 /\n    D---E---F---G master NOTE: The latter form is just a short-hand of git checkout topic followed by git rebase master . When rebase exits topic will\nremain the checked-out branch. If the upstream branch already contains a change you have made (e.g.,\nbecause you mailed a patch which was applied upstream), then that commit\nwill be skipped and warnings will be issued (if the merge backend is\nused).  For example, running git rebase master on the following\nhistory (in which A' and A introduce the same set of changes, but\nhave different committer information): A---B---C topic\n         /\n    D---E---A'---F master will result in: B'---C' topic\n                  /\n    D---E---A'---F master Here is how you would transplant a topic branch based on one\nbranch to another, to pretend that you forked the topic branch\nfrom the latter branch, using rebase --onto . First let’s assume your topic is based on branch next .\nFor example, a feature developed in topic depends on some\nfunctionality which is found in next . o---o---o---o---o  master\n         \\\n          o---o---o---o---o  next\n                           \\\n                            o---o---o  topic We want to make topic forked from branch master ; for example,\nbecause the functionality on which topic depends was merged into the\nmore stable master branch. We want our tree to look like this: o---o---o---o---o  master\n        |            \\\n        |             o'--o'--o'  topic\n         \\\n          o---o---o---o---o  next We can get this using the following command: git rebase --onto master next topic Another example of --onto option is to rebase part of a\nbranch.  If we have the following situation: H---I---J topicB\n                           /\n                  E---F---G  topicA\n                 /\n    A---B---C---D  master then the command git rebase --onto master topicA topicB would result in: H'--I'--J'  topicB\n                /\n                | E---F---G  topicA\n                |/\n    A---B---C---D  master This is useful when topicB does not depend on topicA. A range of commits could also be removed with rebase.  If we have\nthe following situation: E---F---G---H---I---J  topicA then the command git rebase --onto topicA~5 topicA~3 topicA would result in the removal of commits F and G: E---H'---I'---J'  topicA This is useful if F and G were flawed in some way, or should not be\npart of topicA.  Note that the argument to --onto and the <upstream> parameter can be any valid commit-ish. In case of conflict, git rebase will stop at the first problematic commit\nand leave conflict markers in the tree.  You can use git diff to locate\nthe markers (<<<<<<) and make edits to resolve the conflict.  For each\nfile you edit, you need to tell Git that the conflict has been resolved,\ntypically this would be done with git add <filename> After resolving the conflict manually and updating the index with the\ndesired resolution, you can continue the rebasing process with git rebase --continue Alternatively, you can undo the git rebase with git rebase --abort"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --continue"}, {"role": "assistant", "content": "Restart the rebasing process after having resolved a merge conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --skip"}, {"role": "assistant", "content": "Restart the rebasing process by skipping the current patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --abort"}, {"role": "assistant", "content": "Abort the rebase operation and reset HEAD to the original\nbranch. If <branch> was provided when the rebase operation was\nstarted, then HEAD will be reset to <branch> . Otherwise HEAD will be reset to where it was when the rebase operation was\nstarted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --quit"}, {"role": "assistant", "content": "Abort the rebase operation but HEAD is not reset back to the\noriginal branch. The index and working tree are also left\nunchanged as a result. If a temporary stash entry was created\nusing --autostash , it will be saved to the stash list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --edit-todo"}, {"role": "assistant", "content": "Edit the todo list during an interactive rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --show-current-patch"}, {"role": "assistant", "content": "Show the current patch in an interactive rebase or when rebase\nis stopped because of conflicts. This is the equivalent of git show REBASE_HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --onto <newbase>"}, {"role": "assistant", "content": "Starting point at which to create the new commits. If the --onto option is not specified, the starting point is <upstream> .  May be any valid commit, and not just an\nexisting branch name. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B, in which case it defaults to HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --keep-base"}, {"role": "assistant", "content": "Set the starting point at which to create the new commits to the\nmerge base of <upstream> and <branch> . Running git rebase --keep-base <upstream> <branch> is equivalent to\nrunning git rebase --reapply-cherry-picks --no-fork-point --onto <upstream>...<branch> <upstream> <branch> . This option is useful in the case where one is developing a feature on\ntop of an upstream branch. While the feature is being worked on, the\nupstream branch may advance and it may not be the best idea to keep\nrebasing on top of the upstream but to keep the base commit as-is. As\nthe base commit is unchanged this option implies --reapply-cherry-picks to avoid losing commits. Although both this option and --fork-point find the merge base between <upstream> and <branch> , this option uses the merge base as the starting\npoint on which new commits will be created, whereas --fork-point uses\nthe merge base to determine the set of commits which will be rebased. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  <upstream>"}, {"role": "assistant", "content": "Upstream branch to compare against.  May be any valid commit,\nnot just an existing branch name. Defaults to the configured\nupstream for the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  <branch>"}, {"role": "assistant", "content": "Working branch; defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --apply"}, {"role": "assistant", "content": "Use applying strategies to rebase (calling git-am internally).  This option may become a no-op in the future\nonce the merge backend handles everything the apply one does. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --empty=(drop|keep|stop)"}, {"role": "assistant", "content": "How to handle commits that are not empty to start and are not\nclean cherry-picks of any upstream commit, but which become\nempty after rebasing (because they contain a subset of already\nupstream changes): drop The commit will be dropped. This is the default behavior. keep The commit will be kept. This option is implied when --exec is\nspecified unless -i / --interactive is also specified. stop ask The rebase will halt when the commit is applied, allowing you to\nchoose whether to drop it, edit files more, or just commit the empty\nchanges. This option is implied when -i / --interactive is\nspecified. ask is a deprecated synonym of stop . Note that commits which start empty are kept (unless --no-keep-empty is specified), and commits which are clean cherry-picks (as determined\nby git log --cherry-mark ... ) are detected and dropped as a\npreliminary step (unless --reapply-cherry-picks or --keep-base is\npassed). See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --no-keep-empty  --keep-empty"}, {"role": "assistant", "content": "Do not keep commits that start empty before the rebase\n(i.e. that do not change anything from its parent) in the\nresult.  The default is to keep commits which start empty,\nsince creating such commits requires passing the --allow-empty override flag to git commit , signifying that a user is very\nintentionally creating such a commit and thus wants to keep\nit. Usage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don’t want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed. For commits which do not start empty but become empty after rebasing,\nsee the --empty flag. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --reapply-cherry-picks  --no-reapply-cherry-picks"}, {"role": "assistant", "content": "Reapply all clean cherry-picks of any upstream commit instead\nof preemptively dropping them. (If these commits then become\nempty after rebasing, because they contain a subset of already\nupstream changes, the behavior towards them is controlled by\nthe --empty flag.) In the absence of --keep-base (or if --no-reapply-cherry-picks is\ngiven), these commits will be automatically dropped.  Because this\nnecessitates reading all upstream commits, this can be expensive in\nrepositories with a large number of upstream commits that need to be\nread. When using the merge backend, warnings will be issued for each\ndropped commit (unless --quiet is given). Advice will also be issued\nunless advice.skippedCherryPicks is set to false (see git-config ). --reapply-cherry-picks allows rebase to forgo reading all upstream\ncommits, potentially improving performance. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --allow-empty-message"}, {"role": "assistant", "content": "No-op.  Rebasing commits with an empty message used to fail\nand this option would override that behavior, allowing commits\nwith empty messages to be rebased.  Now commits with an empty\nmessage do not cause rebasing to halt. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -m  --merge"}, {"role": "assistant", "content": "Using merging strategies to rebase (default). Note that a rebase merge works by replaying each commit from the working\nbranch on top of the <upstream> branch.  Because of this, when a merge\nconflict happens, the side reported as ours is the so-far rebased\nseries, starting with <upstream> , and theirs is the working branch.\nIn other words, the sides are swapped. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy, instead of the default ort .\nThis implies --merge . Because git rebase replays each commit from the working branch\non top of the <upstream> branch using the given strategy, using\nthe ours strategy simply empties all patches from the <branch> ,\nwhich makes little sense. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -X <strategy-option>  --strategy-option=<strategy-option>"}, {"role": "assistant", "content": "Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s ort .  Note the reversal of ours and theirs as noted above for the -m option. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -q  --quiet"}, {"role": "assistant", "content": "Be quiet. Implies --no-stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -v  --verbose"}, {"role": "assistant", "content": "Be verbose. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --stat"}, {"role": "assistant", "content": "Show a diffstat of what changed upstream since the last rebase. The\ndiffstat is also controlled by the configuration option rebase.stat."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -n  --no-stat"}, {"role": "assistant", "content": "Do not show a diffstat as part of the rebase process."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --no-verify"}, {"role": "assistant", "content": "This option bypasses the pre-rebase hook.  See also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --verify"}, {"role": "assistant", "content": "Allows the pre-rebase hook to run, which is the default.  This option can\nbe used to override --no-verify .  See also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -C<n>"}, {"role": "assistant", "content": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored.  Implies --apply . See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --no-ff  --force-rebase  -f"}, {"role": "assistant", "content": "Individually replay all rebased commits instead of fast-forwarding\nover the unchanged ones.  This ensures that the entire history of\nthe rebased branch is composed of new commits. You may find this helpful after reverting a topic branch merge, as this option\nrecreates the topic branch with fresh commits so it can be remerged\nsuccessfully without needing to \"revert the reversion\" (see the revert-a-faulty-merge How-To for\ndetails)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --fork-point  --no-fork-point"}, {"role": "assistant", "content": "Use reflog to find a better common ancestor between <upstream> and <branch> when calculating which commits have been\nintroduced by <branch> . When --fork-point is active, fork_point will be used instead of <upstream> to calculate the set of commits to rebase, where fork_point is the result of git merge-base --fork-point <upstream>\n<branch> command (see git-merge-base ).  If fork_point ends up being empty, the <upstream> will be used as a fallback. If <upstream> or --keep-base is given on the command line, then\nthe default is --no-fork-point , otherwise the default is --fork-point . See also rebase.forkpoint in git-config . If your branch was based on <upstream> but <upstream> was rewound and\nyour branch contains commits which were dropped, this option can be used\nwith --keep-base in order to drop those commits from your branch. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --ignore-whitespace"}, {"role": "assistant", "content": "Ignore whitespace differences when trying to reconcile\ndifferences. Currently, each backend implements an approximation of\nthis behavior: apply backend When applying a patch, ignore changes in whitespace in context\nlines. Unfortunately, this means that if the \"old\" lines being\nreplaced by the patch differ only in whitespace from the existing\nfile, you will get a merge conflict instead of a successful patch\napplication. merge backend Treat lines with only whitespace changes as unchanged when merging.\nUnfortunately, this means that any patch hunks that were intended\nto modify whitespace and nothing else will be dropped, even if the\nother side had no changes that conflicted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --whitespace=<option>"}, {"role": "assistant", "content": "This flag is passed to the git apply program\n(see git-apply ) that applies the patch.\nImplies --apply . See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --committer-date-is-author-date"}, {"role": "assistant", "content": "Instead of using the current time as the committer date, use\nthe author date of the commit being rebased as the committer\ndate. This option implies --force-rebase ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --ignore-date  --reset-author-date"}, {"role": "assistant", "content": "Instead of using the author date of the original commit, use\nthe current time as the\tauthor date of the rebased commit.  This\noption implies --force-rebase . See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer to all the rebased commits. Note\nthat if --interactive is given then only commits marked to be\npicked, edited or reworded will have the trailer added. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -i  --interactive"}, {"role": "assistant", "content": "Make a list of the commits which are about to be rebased.  Let the\nuser edit that list before rebasing.  This mode can also be used to\nsplit commits (see SPLITTING COMMITS below). The commit list format can be changed by setting the configuration option\nrebase.instructionFormat.  A customized instruction format will automatically\nhave the commit hash prepended to the format. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -r  --rebase-merges[=(rebase-cousins|no-rebase-cousins)]  --no-rebase-merges"}, {"role": "assistant", "content": "By default, a rebase will simply drop merge commits from the todo\nlist, and put the rebased commits into a single, linear branch.\nWith --rebase-merges , the rebase will instead try to preserve\nthe branching structure within the commits that are to be rebased,\nby recreating the merge commits. Any resolved merge conflicts or\nmanual amendments in these merge commits will have to be\nresolved/re-applied manually. --no-rebase-merges can be used to\ncountermand both the rebase.rebaseMerges config option and a previous --rebase-merges . When rebasing merges, there are two modes: rebase-cousins and no-rebase-cousins . If the mode is not specified, it defaults to no-rebase-cousins . In no-rebase-cousins mode, commits which do not have <upstream> as direct ancestor will keep their original branch point, i.e.\ncommits that would be excluded by git-log 's --ancestry-path option will keep their original ancestry by default. In rebase-cousins mode,\nsuch commits are instead rebased onto <upstream> (or <onto> , if\nspecified). It is currently only possible to recreate the merge commits using the ort merge strategy; different merge strategies can be used only via\nexplicit exec git merge -s <strategy> [...] commands. See also REBASING MERGES and INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -x <cmd>  --exec <cmd>"}, {"role": "assistant", "content": "Append \"exec <cmd>\" after each line creating a commit in the\nfinal history. <cmd> will be interpreted as one or more shell\ncommands. Any command that fails will interrupt the rebase,\nwith exit code 1. You may execute several commands by either using one instance of --exec with several commands: git rebase -i --exec \"cmd1 && cmd2 && ...\" or by giving more than one --exec : git rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ... If --autosquash is used, exec lines will not be appended for\nthe intermediate commits, and will only appear at the end of each\nsquash/fixup series. This uses the --interactive machinery internally, but it can be run\nwithout an explicit --interactive . See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --root"}, {"role": "assistant", "content": "Rebase all commits reachable from <branch> , instead of\nlimiting them with an <upstream> .  This allows you to rebase\nthe root commit(s) on a branch. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --autosquash  --no-autosquash"}, {"role": "assistant", "content": "Automatically squash commits with specially formatted messages into\nprevious commits being rebased.  If a commit message starts with\n\"squash! \", \"fixup! \" or \"amend! \", the remainder of the subject line\nis taken as a commit specifier, which matches a previous commit if it\nmatches the subject line or the hash of that commit.  If no commit\nmatches fully, matches of the specifier with the start of commit\nsubjects are considered. In the rebase todo list, the actions of squash, fixup and amend commits are\nchanged from pick to squash , fixup or fixup -C , respectively, and they\nare moved right after the commit they modify.  The --interactive option can\nbe used to review and edit the todo list before proceeding. The recommended way to create commits with squash markers is by using the --squash , --fixup , --fixup=amend: or --fixup=reword: options of git-commit , which take the target commit as an argument and\nautomatically fill in the subject line of the new commit from that. Setting configuration variable rebase.autoSquash to true enables\nauto-squashing by default for interactive rebase.  The --no-autosquash option can be used to override that setting. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --autostash  --no-autostash"}, {"role": "assistant", "content": "Automatically create a temporary stash entry before the operation\nbegins, and apply it after the operation ends.  This means\nthat you can run rebase on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nrebase might result in non-trivial conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --reschedule-failed-exec  --no-reschedule-failed-exec"}, {"role": "assistant", "content": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided). This option applies once a rebase is started. It is preserved for the whole\nrebase based on, in order, the command line option provided to the initial git\nrebase , the rebase.rescheduleFailedExec configuration (see git-config or \"CONFIGURATION\" below), or it defaults to false. Recording this option for the whole rebase is a convenience feature. Otherwise\nan explicit --no-reschedule-failed-exec at the start would be overridden by\nthe presence of a rebase.rescheduleFailedExec=true configuration when git\nrebase --continue is invoked. Currently, you cannot pass --[no-]reschedule-failed-exec to git rebase --continue ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --update-refs  --no-update-refs"}, {"role": "assistant", "content": "Automatically force-update any branches that point to commits that\nare being rebased. Any branches that are checked out in a worktree\nare not updated in this way. If the configuration variable rebase.updateRefs is set, then this option\ncan be used to override and disable this setting. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  drop"}, {"role": "assistant", "content": "The commit will be dropped. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  keep"}, {"role": "assistant", "content": "The commit will be kept. This option is implied when --exec is\nspecified unless -i / --interactive is also specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  stop  ask"}, {"role": "assistant", "content": "The rebase will halt when the commit is applied, allowing you to\nchoose whether to drop it, edit files more, or just commit the empty\nchanges. This option is implied when -i / --interactive is\nspecified. ask is a deprecated synonym of stop ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  apply backend"}, {"role": "assistant", "content": "When applying a patch, ignore changes in whitespace in context\nlines. Unfortunately, this means that if the \"old\" lines being\nreplaced by the patch differ only in whitespace from the existing\nfile, you will get a merge conflict instead of a successful patch\napplication."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  merge backend"}, {"role": "assistant", "content": "Treat lines with only whitespace changes as unchanged when merging.\nUnfortunately, this means that any patch hunks that were intended\nto modify whitespace and nothing else will be dropped, even if the\nother side had no changes that conflicted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "INCOMPATIBLE OPTIONS The following options: --apply --whitespace -C are incompatible with the following options: --merge --strategy --strategy-option --autosquash --rebase-merges --interactive --exec --no-keep-empty --empty= --[no-]reapply-cherry-picks when used without --keep-base --update-refs --root when used without --onto In addition, the following pairs of options are incompatible: --keep-base and --onto --keep-base and --root --fork-point and --root"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "BEHAVIORAL DIFFERENCES git rebase has two primary backends: apply and merge .  (The apply backend used to be known as the am backend, but the name led to\nconfusion as it looks like a verb instead of a noun.  Also, the merge backend used to be known as the interactive backend, but it is now\nused for non-interactive cases as well.  Both were renamed based on\nlower-level functionality that underpinned each.) There are some\nsubtle differences in how these two backends behave: Empty commits The apply backend unfortunately drops intentionally empty commits, i.e.\ncommits that started empty, though these are rare in practice.  It\nalso drops commits that become empty and has no option for controlling\nthis behavior. The merge backend keeps intentionally empty commits by default (though\nwith -i they are marked as empty in the todo list editor, or they can\nbe dropped automatically with --no-keep-empty ). Similar to the apply backend, by default the merge backend drops\ncommits that become empty unless -i / --interactive is specified (in\nwhich case it stops and asks the user what to do).  The merge backend\nalso has an --empty=(drop|keep|stop) option for changing the behavior\nof handling commits that become empty. Directory rename detection Due to the lack of accurate tree information (arising from\nconstructing fake ancestors with the limited information available in\npatches), directory rename detection is disabled in the apply backend.\nDisabled directory rename detection means that if one side of history\nrenames a directory and the other adds new files to the old directory,\nthen the new files will be left behind in the old directory without\nany warning at the time of rebasing that you may want to move these\nfiles into the new directory. Directory rename detection works with the merge backend to provide you\nwarnings in such cases. Context The apply backend works by creating a sequence of patches (by calling format-patch internally), and then applying the patches in sequence\n(calling am internally).  Patches are composed of multiple hunks,\neach with line numbers, a context region, and the actual changes.  The\nline numbers have to be taken with some fuzz, since the other side\nwill likely have inserted or deleted lines earlier in the file.  The\ncontext region is meant to help find how to adjust the line numbers in\norder to apply the changes to the right lines.  However, if multiple\nareas of the code have the same surrounding lines of context, the\nwrong one can be picked.  There are real-world cases where this has\ncaused commits to be reapplied incorrectly with no conflicts reported.\nSetting diff.context to a larger value may prevent such types of\nproblems, but increases the chance of spurious conflicts (since it\nwill require more lines of matching context to apply). The merge backend works with a full copy of each relevant file,\ninsulating it from these types of problems. Labelling of conflicts markers When there are content conflicts, the merge machinery tries to\nannotate each side’s conflict markers with the commits where the\ncontent came from.  Since the apply backend drops the original\ninformation about the rebased commits and their parents (and instead\ngenerates new fake commits based off limited information in the\ngenerated patches), those commits cannot be identified; instead it has\nto fall back to a commit summary.  Also, when merge.conflictStyle is\nset to diff3 or zdiff3 , the apply backend will use \"constructed merge\nbase\" to label the content from the merge base, and thus provide no\ninformation about the merge base commit whatsoever. The merge backend works with the full commits on both sides of history\nand thus has no such limitations. Hooks The apply backend has not traditionally called the post-commit hook,\nwhile the merge backend has.  Both have called the post-checkout hook,\nthough the merge backend has squelched its output.  Further, both\nbackends only call the post-checkout hook with the starting point\ncommit of the rebase, not the intermediate commits nor the final\ncommit.  In each case, the calling of these hooks was by accident of\nimplementation rather than by design (both backends were originally\nimplemented as shell scripts and happened to invoke other commands\nlike git checkout or git commit that would call the hooks).  Both\nbackends should have the same behavior, though it is not entirely\nclear which, if any, is correct.  We will likely make rebase stop\ncalling either of these hooks in the future. Interruptability The apply backend has safety problems with an ill-timed interrupt; if\nthe user presses Ctrl-C at the wrong time to try to abort the rebase,\nthe rebase can enter a state where it cannot be aborted with a\nsubsequent git rebase --abort .  The merge backend does not appear to\nsuffer from the same shortcoming.  (See https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/ for\ndetails.) Commit Rewording When a conflict occurs while rebasing, rebase stops and asks the user\nto resolve.  Since the user may need to make notable changes while\nresolving conflicts, after conflicts are resolved and the user has run git rebase --continue , the rebase should open an editor and ask the\nuser to update the commit message.  The merge backend does this, while\nthe apply backend blindly applies the original commit message. Miscellaneous differences There are a few more behavioral differences that most folks would\nprobably consider inconsequential but which are mentioned for\ncompleteness: Reflog: The two backends will use different wording when describing\nthe changes made in the reflog, though both will make use of the\nword \"rebase\". Progress, informational, and error messages: The two backends\nprovide slightly different progress and informational messages.\nAlso, the apply backend writes error messages (such as \"Your files\nwould be overwritten…​\") to stdout, while the merge backend writes\nthem to stderr. State directories: The two backends keep their state in different\ndirectories under .git/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  ort"}, {"role": "assistant", "content": "This is the default merge strategy when pulling or merging one\nbranch.  This strategy can only resolve two heads using a\n3-way merge algorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a merged\ntree of the common ancestors and uses that as the reference\ntree for the 3-way merge.  This has been reported to result in\nfewer merge conflicts without causing mismerges by tests done\non actual merge commits taken from Linux 2.6 kernel\ndevelopment history.  Additionally this strategy can detect\nand handle merges involving renames.  It does not make use of\ndetected copies.  The name for this algorithm is an acronym\n(\"Ostensibly Recursive’s Twin\") and came from the fact that it\nwas written as a replacement for the previous default\nalgorithm, recursive . The ort strategy can take the following options: ours This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it. theirs This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with. ignore-space-change ignore-all-space ignore-space-at-eol ignore-cr-at-eol Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way. renormalize This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details. no-renormalize Disables the renormalize option.  This overrides the merge.renormalize configuration variable. find-renames[=<n>] Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames . rename-threshold=<n> Deprecated synonym for find-renames=<n> . subtree[=<path>] This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  recursive"}, {"role": "assistant", "content": "This can only resolve two heads using a 3-way merge\nalgorithm.  When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as\nthe reference tree for the 3-way merge.  This has been\nreported to result in fewer merge conflicts without\ncausing mismerges by tests done on actual merge commits\ntaken from Linux 2.6 kernel development history.\nAdditionally this can detect and handle merges involving\nrenames.  It does not make use of detected copies.  This was\nthe default strategy for resolving two heads from Git v0.99.9k\nuntil v2.33.0. The recursive strategy takes the same options as ort .  However,\nthere are three additional options that ort ignores (not documented\nabove) that are potentially useful with the recursive strategy: patience Deprecated synonym for diff-algorithm=patience . diff-algorithm=[patience|minimal|histogram|myers] Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting. no-renames Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  resolve"}, {"role": "assistant", "content": "This can only resolve two heads (i.e. the current branch\nand another branch you pulled from) using a 3-way merge\nalgorithm.  It tries to carefully detect criss-cross\nmerge ambiguities.  It does not handle renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  octopus"}, {"role": "assistant", "content": "This resolves cases with more than two heads, but refuses to do\na complex merge that needs manual resolution.  It is\nprimarily meant to be used for bundling topic branch\nheads together.  This is the default merge strategy when\npulling or merging more than one branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  ours"}, {"role": "assistant", "content": "This resolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches.  It is meant to\nbe used to supersede old development history of side\nbranches.  Note that this is different from the -Xours option to\nthe recursive merge strategy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  subtree"}, {"role": "assistant", "content": "This is a modified ort strategy. When merging trees A and\nB, if B corresponds to a subtree of A, B is first adjusted to\nmatch the tree structure of A, instead of reading the trees at\nthe same level. This adjustment is also done to the common\nancestor tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  ours"}, {"role": "assistant", "content": "This option forces conflicting hunks to be auto-resolved cleanly by\nfavoring our version.  Changes from the other tree that do not\nconflict with our side are reflected in the merge result.\nFor a binary file, the entire contents are taken from our side. This should not be confused with the ours merge strategy, which does not\neven look at what the other tree contains at all.  It discards everything\nthe other tree did, declaring our history contains all that happened in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  theirs"}, {"role": "assistant", "content": "This is the opposite of ours ; note that, unlike ours , there is\nno theirs merge strategy to confuse this merge option with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  ignore-space-change  ignore-all-space  ignore-space-at-eol  ignore-cr-at-eol"}, {"role": "assistant", "content": "Treats lines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge.  Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also git-diff -b , -w , --ignore-space-at-eol , and --ignore-cr-at-eol . If their version only introduces whitespace changes to a line, our version is used; If our version introduces whitespace changes but their version includes a substantial change, their version is used; Otherwise, the merge proceeds in the usual way."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  renormalize"}, {"role": "assistant", "content": "This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  no-renormalize"}, {"role": "assistant", "content": "Disables the renormalize option.  This overrides the merge.renormalize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  find-renames[=<n>]"}, {"role": "assistant", "content": "Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rename-threshold=<n>"}, {"role": "assistant", "content": "Deprecated synonym for find-renames=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  subtree[=<path>]"}, {"role": "assistant", "content": "This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  patience"}, {"role": "assistant", "content": "Deprecated synonym for diff-algorithm=patience ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  diff-algorithm=[patience|minimal|histogram|myers]"}, {"role": "assistant", "content": "Use a different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions).  See also git-diff --diff-algorithm .  Note that ort specifically uses diff-algorithm=histogram , while recursive defaults to the diff.algorithm config setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  no-renames"}, {"role": "assistant", "content": "Turn off rename detection. This overrides the merge.renames configuration variable.\nSee also git-diff --no-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "NOTES You should understand the implications of using git rebase on a\nrepository that you share.  See also RECOVERING FROM UPSTREAM REBASE\nbelow. When the rebase is run, it will first execute a pre-rebase hook if one\nexists.  You can use this hook to do sanity checks and reject the rebase\nif it isn’t appropriate.  Please see the template pre-rebase hook script\nfor an example. Upon completion, <branch> will be the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "INTERACTIVE MODE Rebasing interactively means that you have a chance to edit the commits\nwhich are rebased.  You can reorder the commits, and you can\nremove them (weeding out bad or otherwise unwanted patches). The interactive mode is meant for this type of workflow: have a wonderful idea hack on the code prepare a series for submission submit where point 2. consists of several instances of a) regular use finish something worthy of a commit commit b) independent fixup realize that something does not work fix that commit it Sometimes the thing fixed in b.2. cannot be amended to the not-quite\nperfect commit it fixes, because that commit is buried deeply in a\npatch series.  That is exactly what interactive rebase is for: use it\nafter plenty of \"a\"s and \"b\"s, by rearranging and editing\ncommits, and squashing multiple commits into one. Start it with the last commit you want to retain as-is: git rebase -i <after-this-commit> An editor will be fired up with all the commits in your current branch\n(ignoring merge commits), which come after the given commit.  You can\nreorder the commits in this list to your heart’s content, and you can\nremove them.  The list looks more or less like this: pick deadbee The oneline of this commit\npick fa1afe1 The oneline of the next commit\n... The oneline descriptions are purely for your pleasure; git rebase will\nnot look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in this\nexample), so do not delete or edit the names. By replacing the command \"pick\" with the command \"edit\", you can tell git rebase to stop after applying that commit, so that you can edit\nthe files and/or the commit message, amend the commit, and continue\nrebasing. To interrupt the rebase (just like an \"edit\" command would do, but without\ncherry-picking any commit first), use the \"break\" command. If you just want to edit the commit message for a commit, replace the\ncommand \"pick\" with the command \"reword\". To drop a commit, replace the command \"pick\" with \"drop\", or just\ndelete the matching line. If you want to fold two or more commits into one, replace the command\n\"pick\" for the second and subsequent commits with \"squash\" or \"fixup\".\nIf the commits had different authors, the folded commit will be\nattributed to the author of the first commit.  The suggested commit\nmessage for the folded commit is the concatenation of the first\ncommit’s message with those identified by \"squash\" commands, omitting the\nmessages of commits identified by \"fixup\" commands, unless \"fixup -c\"\nis used.  In that case the suggested commit message is only the message\nof the \"fixup -c\" commit, and an editor is opened allowing you to edit\nthe message.  The contents (patch) of the \"fixup -c\" commit are still\nincorporated into the folded commit. If there is more than one \"fixup -c\"\ncommit, the message from the final one is used.  You can also use\n\"fixup -C\" to get the same behavior as \"fixup -c\" except without opening\nan editor. git rebase will stop when \"pick\" has been replaced with \"edit\" or\nwhen a command fails due to merge errors. When you are done editing\nand/or resolving conflicts you can continue with git rebase --continue . For example, if you want to reorder the last 5 commits, such that what\nwas HEAD~4 becomes the new HEAD . To achieve that, you would call git rebase like this: $ git rebase -i HEAD~5 And move the first patch to the end of the list. You might want to recreate merge commits, e.g. if you have a history\nlike this: X\n            \\\n         A---M---B\n        /\n---o---O---P---Q Suppose you want to rebase the side branch starting at \"A\" to \"Q\". Make\nsure that the current HEAD is \"B\", and call $ git rebase -i -r --onto Q O Reordering and editing commits usually creates untested intermediate\nsteps.  You may want to check that your history editing did not break\nanything by running a test, or at least recompiling at intermediate\npoints in history by using the \"exec\" command (shortcut \"x\").  You may\ndo so by creating a todo list like this one: pick deadbee Implement feature XXX\nfixup f1a5c00 Fix to feature XXX\nexec make\npick c0ffeee The oneline of the next commit\nedit deadbab The oneline of the commit after\nexec cd subdir; make test\n... The interactive rebase will stop when a command fails (i.e. exits with\nnon-0 status) to give you an opportunity to fix the problem. You can\ncontinue with git rebase --continue . The \"exec\" command launches the command in a shell (the default one, usually\n/bin/sh), so you can use shell features (like \"cd\", \">\", \";\" …​). The command\nis run from the root of the working tree. $ git rebase -i --exec \"make test\" This command lets you check that intermediate commits are compilable.\nThe todo list becomes like that: pick 5928aea one\nexec make test\npick 04d0fda two\nexec make test\npick ba46169 three\nexec make test\npick f4593f9 four\nexec make test"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "SPLITTING COMMITS In interactive mode, you can mark commits with the action \"edit\".  However,\nthis does not necessarily mean that git rebase expects the result of this\nedit to be exactly one commit.  Indeed, you can undo the commit, or you can\nadd other commits.  This can be used to split a commit into two: Start an interactive rebase with git rebase -i <commit>^ , where <commit> is the commit you want to split.  In fact, any commit range\nwill do, as long as it contains that commit. Mark the commit you want to split with the action \"edit\". When it comes to editing that commit, execute git reset HEAD^ .  The\neffect is that the HEAD is rewound by one, and the index follows suit.\nHowever, the working tree stays the same. Now add the changes to the index that you want to have in the first\ncommit.  You can use git add (possibly interactively) or git gui (or both) to do that. Commit the now-current index with whatever commit message is appropriate\nnow. Repeat the last two steps until your working tree is clean. Continue the rebase with git rebase --continue . If you are not absolutely sure that the intermediate revisions are\nconsistent (they compile, pass the testsuite, etc.) you should use git stash to stash away the not-yet-committed changes\nafter each commit, test, and amend the commit if fixes are necessary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  Easy case: The changes are literally the same."}, {"role": "assistant", "content": "This happens if the subsystem rebase was a simple rebase and\nhad no conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  Hard case: The changes are not the same."}, {"role": "assistant", "content": "This happens if the subsystem rebase had conflicts, or used --interactive to omit, edit, squash, or fixup commits; or\nif the upstream used one of commit --amend , reset , or\na full history rewriting command like filter-repo ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "REBASING MERGES The interactive rebase command was originally designed to handle\nindividual patch series. As such, it makes sense to exclude merge\ncommits from the todo list, as the developer may have merged the\nthen-current master while working on the branch, only to rebase\nall the commits onto master eventually (skipping the merge\ncommits). However, there are legitimate reasons why a developer may want to\nrecreate merge commits: to keep the branch structure (or \"commit\ntopology\") when working on multiple, inter-related branches. In the following example, the developer works on a topic branch that\nrefactors the way buttons are defined, and on another topic branch\nthat uses that refactoring to implement a \"Report a bug\" button. The\noutput of git log --graph --format=%s -5 may look like this: *   Merge branch 'report-a-bug'\n|\\\n| * Add the feedback button\n* | Merge branch 'refactor-button'\n|\\ \\\n| |/\n| * Use the Button class for all buttons\n| * Extract a generic Button class from the DownloadButton one The developer might want to rebase those commits to a newer master while keeping the branch topology, for example when the first topic\nbranch is expected to be integrated into master much earlier than the\nsecond one, say, to resolve merge conflicts with changes to the\nDownloadButton class that made it into master . This rebase can be performed using the --rebase-merges option.\nIt will generate a todo list looking like this: label onto\n\n# Branch: refactor-button\nreset onto\npick 123456 Extract a generic Button class from the DownloadButton one\npick 654321 Use the Button class for all buttons\nlabel refactor-button\n\n# Branch: report-a-bug\nreset refactor-button # Use the Button class for all buttons\npick abcdef Add the feedback button\nlabel report-a-bug\n\nreset onto\nmerge -C a1b2c3 refactor-button # Merge 'refactor-button'\nmerge -C 6f5e4d report-a-bug # Merge 'report-a-bug' In contrast to a regular interactive rebase, there are label , reset and merge commands in addition to pick ones. The label command associates a label with the current HEAD when that\ncommand is executed. These labels are created as worktree-local refs\n( refs/rewritten/<label> ) that will be deleted when the rebase\nfinishes. That way, rebase operations in multiple worktrees linked to\nthe same repository do not interfere with one another. If the label command fails, it is rescheduled immediately, with a helpful message how\nto proceed. The reset command resets the HEAD, index and worktree to the specified\nrevision. It is similar to an exec git reset --hard <label> , but\nrefuses to overwrite untracked files. If the reset command fails, it is\nrescheduled immediately, with a helpful message how to edit the todo list\n(this typically happens when a reset command was inserted into the todo\nlist manually and contains a typo). The merge command will merge the specified revision(s) into whatever\nis HEAD at that time. With -C <original-commit> , the commit message of\nthe specified merge commit will be used. When the -C is changed to\na lower-case -c , the message will be opened in an editor after a\nsuccessful merge so that the user can edit the message. If a merge command fails for any reason other than merge conflicts (i.e.\nwhen the merge operation did not even start), it is rescheduled immediately. By default, the merge command will use the ort merge strategy for\nregular merges, and octopus for octopus merges.  One can specify a\ndefault strategy for all merges using the --strategy argument when\ninvoking rebase, or can override specific merges in the interactive\nlist of commands by using an exec command to call git merge explicitly with a --strategy argument.  Note that when calling git\nmerge explicitly like this, you can make use of the fact that the\nlabels are worktree-local refs (the ref refs/rewritten/onto would\ncorrespond to the label onto , for example) in order to refer to the\nbranches you want to merge. Note: the first command ( label onto ) labels the revision onto which\nthe commits are rebased; The name onto is just a convention, as a nod\nto the --onto option. It is also possible to introduce completely new merge commits from scratch\nby adding a command of the form merge <merge-head> . This form will\ngenerate a tentative commit message and always open an editor to let the\nuser edit it. This can be useful e.g. when a topic branch turns out to\naddress more than a single concern and wants to be split into two or\neven more topic branches. Consider this todo list: pick 192837 Switch from GNU Makefiles to CMake\npick 5a6c7e Document the switch to CMake\npick 918273 Fix detection of OpenSSL in CMake\npick afbecd http: add support for TLS v1.3\npick fdbaec Fix detection of cURL in CMake on Windows The one commit in this list that is not related to CMake may very well\nhave been motivated by working on fixing all those bugs introduced by\nswitching to CMake, but it addresses a different concern. To split this\nbranch into two topic branches, the todo list could be edited like this: label onto\n\npick afbecd http: add support for TLS v1.3\nlabel tlsv1.3\n\nreset onto\npick 192837 Switch from GNU Makefiles to CMake\npick 918273 Fix detection of OpenSSL in CMake\npick fdbaec Fix detection of cURL in CMake on Windows\npick 5a6c7e Document the switch to CMake\nlabel cmake\n\nreset onto\nmerge tlsv1.3\nmerge cmake"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.backend"}, {"role": "assistant", "content": "Default backend to use for rebasing.  Possible choices are apply or merge .  In the future, if the merge backend gains\nall remaining capabilities of the apply backend, this setting\nmay become unused."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.stat"}, {"role": "assistant", "content": "Whether to show a diffstat of what changed upstream since the last\nrebase. False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.autoSquash"}, {"role": "assistant", "content": "If set to true, enable the --autosquash option of git-rebase by default for interactive mode.\nThis can be overridden with the --no-autosquash option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run rebase on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful rebase might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-rebase .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.updateRefs"}, {"role": "assistant", "content": "If set to true enable --update-refs option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.missingCommitsCheck"}, {"role": "assistant", "content": "If set to \"warn\", git rebase -i will print a warning if some\ncommits are removed (e.g. a line was deleted), however the\nrebase will still proceed. If set to \"error\", it will print\nthe previous warning and stop the rebase, git rebase\n--edit-todo can then be used to correct the error. If set to\n\"ignore\", no checking is done.\nTo drop a commit without warning or error, use the drop command in the todo list.\nDefaults to \"ignore\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.instructionFormat"}, {"role": "assistant", "content": "A format string, as specified in git-log , to be used for the\ntodo list during an interactive rebase.  The format will\nautomatically have the commit hash prepended to the format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.abbreviateCommands"}, {"role": "assistant", "content": "If set to true, git rebase will use abbreviated command names in the\ntodo list resulting in something like this: p deadbee The oneline of the commit\n\tp fa1afe1 The oneline of the next commit\n\t... instead of: pick deadbee The oneline of the commit\n\tpick fa1afe1 The oneline of the next commit\n\t... Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.rescheduleFailedExec"}, {"role": "assistant", "content": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\nThis is the same as specifying the --reschedule-failed-exec option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.forkPoint"}, {"role": "assistant", "content": "If set to false set --no-fork-point option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.rebaseMerges"}, {"role": "assistant", "content": "Whether and how to set the --rebase-merges option by default. Can\nbe rebase-cousins , no-rebase-cousins , or a boolean. Setting to\ntrue or to no-rebase-cousins is equivalent to --rebase-merges=no-rebase-cousins , setting to rebase-cousins is\nequivalent to --rebase-merges=rebase-cousins , and setting to false is\nequivalent to --no-rebase-merges . Passing --rebase-merges on the\ncommand line, with or without an argument, overrides any rebase.rebaseMerges configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  rebase.maxLabelLength"}, {"role": "assistant", "content": "When generating label names from commit subjects, truncate the names to\nthis length. By default, the names are truncated to a little less than NAME_MAX (to allow e.g. .lock files to be written for the\ncorresponding loose refs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  sequence.editor"}, {"role": "assistant", "content": "Text editor used by git rebase -i for editing the rebase instruction file.\nThe value is meant to be interpreted by the shell when it is used.\nIt can be overridden by the GIT_SEQUENCE_EDITOR environment variable.\nWhen not configured, the default commit message editor is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "NAME git-revert - Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "SYNOPSIS git revert [--[no-]edit] [-n] [-m <parent-number>] [-s] [-S[<keyid>]] <commit>…​ git revert (--continue | --skip | --abort | --quit)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "DESCRIPTION Given one or more existing commits, revert the changes that the\nrelated patches introduce, and record some new commits that record\nthem.  This requires your working tree to be clean (no modifications\nfrom the HEAD commit). Note: git revert is used to record some new commits to reverse the\neffect of some earlier commits (often only a faulty one).  If you want to\nthrow away all uncommitted changes in your working directory, you\nshould see git-reset , particularly the --hard option.  If\nyou want to extract specific files as they were in another commit, you\nshould see git-restore , specifically the --source option. Take care with these alternatives as\nboth will discard uncommitted changes in your working directory. See \"Reset, restore and revert\" in git for the differences\nbetween the three commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  <commit>…​"}, {"role": "assistant", "content": "Commits to revert.\nFor a more complete list of ways to spell commit names, see gitrevisions .\nSets of commits can also be given but no traversal is done by\ndefault, see git-rev-list and its --no-walk option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -e  --edit"}, {"role": "assistant", "content": "With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -m parent-number  --mainline parent-number"}, {"role": "assistant", "content": "Usually you cannot revert a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows revert to reverse the change\nrelative to the specified parent. Reverting a merge commit declares that you will never want the tree changes\nbrought in by the merge.  As a result, later merges will only bring in tree\nchanges introduced by commits that are not ancestors of the previously\nreverted merge.  This may or may not be what you want. See the revert-a-faulty-merge How-To for\nmore details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --no-edit"}, {"role": "assistant", "content": "With this option, git revert will not start the commit\nmessage editor."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit for more\ndetails. In particular, if the <mode> is given a value of scissors ,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -n  --no-commit"}, {"role": "assistant", "content": "Usually the command automatically creates some commits with\ncommit log messages stating which commits were\nreverted.  This flag applies the changes necessary\nto revert the named commits to your working tree\nand the index, but does not make the commits.  In addition,\nwhen this option is used, your index does not have to match\nthe HEAD commit.  The revert is done against the\nbeginning state of your index. This is useful when reverting more than one commits'\neffect to your index in a row."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -s  --signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -X<option>  --strategy-option=<option>"}, {"role": "assistant", "content": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --reference"}, {"role": "assistant", "content": "Instead of starting the body of the log message with \"This\nreverts <full-object-name-of-the-commit-being-reverted>.\",\nrefer to the commit using \"--pretty=reference\" format\n(cf. git-log ).  The revert.reference configuration variable can be used to enable this option by\ndefault."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --continue"}, {"role": "assistant", "content": "Continue the operation in progress using the information in .git/sequencer .  Can be used to continue after resolving\nconflicts in a failed cherry-pick or revert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --skip"}, {"role": "assistant", "content": "Skip the current commit and continue with the rest of the\nsequence."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --quit"}, {"role": "assistant", "content": "Forget about the current operation in progress.  Can be used\nto clear the sequencer state after a failed cherry-pick or\nrevert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --abort"}, {"role": "assistant", "content": "Cancel the operation and return to the pre-sequence state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  git revert HEAD~3"}, {"role": "assistant", "content": "Revert the changes specified by the fourth last commit in HEAD\nand create a new commit with the reverted changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  git revert -n master~5..master~2"}, {"role": "assistant", "content": "Revert the changes done by commits from the fifth last commit\nin master (included) to the third last commit in master\n(included), but do not create any commit with the reverted\nchanges. The revert only modifies the working tree and the\nindex."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits"}, {"role": "assistant", "content": "DISCUSSION While git creates a basic commit message automatically, it is strongly recommended to explain why the original commit is being\nreverted.\nIn addition, repeatedly reverting reverts will result in increasingly\nunwieldy subject lines, for example Reapply \"Reapply \"<original-subject>\"\" .\nPlease consider rewording these to be shorter and more unique."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  revert.reference"}, {"role": "assistant", "content": "Setting this variable to true makes git revert behave\nas if the --reference option is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug"}, {"role": "assistant", "content": "NAME git-bisect - Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug"}, {"role": "assistant", "content": "SYNOPSIS git bisect <subcommand> <options>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug"}, {"role": "assistant", "content": "DESCRIPTION The command takes various subcommands, and different options depending\non the subcommand: git bisect start [--term-(bad|new)=<term-new> --term-(good|old)=<term-old>]\n\t  [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<pathspec>...]\ngit bisect (bad|new|<term-new>) [<rev>]\ngit bisect (good|old|<term-old>) [<rev>...]\ngit bisect terms [--term-(good|old) | --term-(bad|new)]\ngit bisect skip [(<rev>|<range>)...]\ngit bisect reset [<commit>]\ngit bisect (visualize|view)\ngit bisect replay <logfile>\ngit bisect log\ngit bisect run <cmd> [<arg>...]\ngit bisect help This command uses a binary search algorithm to find which commit in\nyour project’s history introduced a bug. You use it by first telling\nit a \"bad\" commit that is known to contain the bug, and a \"good\"\ncommit that is known to be before the bug was introduced. Then git\nbisect picks a commit between those two endpoints and asks you\nwhether the selected commit is \"good\" or \"bad\". It continues narrowing\ndown the range until it finds the exact commit that introduced the\nchange. In fact, git bisect can be used to find the commit that changed any property of your project; e.g., the commit that fixed a bug, or\nthe commit that caused a benchmark’s performance to improve. To\nsupport this more general usage, the terms \"old\" and \"new\" can be used\nin place of \"good\" and \"bad\", or you can choose your own terms. See\nsection \"Alternate terms\" below for more information. Basic bisect commands: start, bad, good As an example, suppose you are trying to find the commit that broke a\nfeature that was known to work in version v2.6.13-rc2 of your\nproject. You start a bisect session as follows: $ git bisect start\n$ git bisect bad                 # Current version is bad\n$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good Once you have specified at least one bad and one good commit, git\nbisect selects a commit in the middle of that range of history,\nchecks it out, and outputs something similar to the following: Bisecting: 675 revisions left to test after this (roughly 10 steps) You should now compile the checked-out version and test it. If that\nversion works correctly, type $ git bisect good If that version is broken, type $ git bisect bad Then git bisect will respond with something like Bisecting: 337 revisions left to test after this (roughly 9 steps) Keep repeating the process: compile the tree, test it, and depending\non whether it is good or bad run git bisect good or git bisect bad to ask for the next commit that needs testing. Eventually there will be no more revisions left to inspect, and the\ncommand will print out a description of the first bad commit. The\nreference refs/bisect/bad will be left pointing at that commit. Bisect reset After a bisect session, to clean up the bisection state and return to\nthe original HEAD, issue the following command: $ git bisect reset By default, this will return your tree to the commit that was checked\nout before git bisect start .  (A new git bisect start will also do\nthat, as it cleans up the old bisection state.) With an optional argument, you can return to a different commit\ninstead: $ git bisect reset <commit> For example, git bisect reset bisect/bad will check out the first\nbad revision, while git bisect reset HEAD will leave you on the\ncurrent bisection commit and avoid switching commits at all. Alternate terms Sometimes you are not looking for the commit that introduced a\nbreakage, but rather for a commit that caused a change between some\nother \"old\" state and \"new\" state. For example, you might be looking\nfor the commit that introduced a particular fix. Or you might be\nlooking for the first commit in which the source-code filenames were\nfinally all converted to your company’s naming standard. Or whatever. In such cases it can be very confusing to use the terms \"good\" and\n\"bad\" to refer to \"the state before the change\" and \"the state after\nthe change\". So instead, you can use the terms \"old\" and \"new\",\nrespectively, in place of \"good\" and \"bad\". (But note that you cannot\nmix \"good\" and \"bad\" with \"old\" and \"new\" in a single session.) In this more general usage, you provide git bisect with a \"new\"\ncommit that has some property and an \"old\" commit that doesn’t have that\nproperty. Each time git bisect checks out a commit, you test if that\ncommit has the property. If it does, mark the commit as \"new\";\notherwise, mark it as \"old\". When the bisection is done, git bisect will report which commit introduced the property. To use \"old\" and \"new\" instead of \"good\" and bad, you must run git\nbisect start without commits as argument and then run the following\ncommands to add the commits: git bisect old [<rev>] to indicate that a commit was before the sought change, or git bisect new [<rev>...] to indicate that it was after. To get a reminder of the currently used terms, use git bisect terms You can get just the old term with git bisect terms --term-old or git bisect terms --term-good ; git bisect terms --term-new and git bisect terms --term-bad can be used to learn how to call\nthe commits more recent than the sought change. If you would like to use your own terms instead of \"bad\"/\"good\" or\n\"new\"/\"old\", you can choose any names you like (except existing bisect\nsubcommands like reset , start , …​) by starting the\nbisection using git bisect start --term-old <term-old> --term-new <term-new> For example, if you are looking for a commit that introduced a\nperformance regression, you might use git bisect start --term-old fast --term-new slow Or if you are looking for the commit that fixed a bug, you might use git bisect start --term-new fixed --term-old broken Then, use git bisect <term-old> and git bisect <term-new> instead\nof git bisect good and git bisect bad to mark commits. Bisect visualize/view To see the currently remaining suspects in gitk , issue the following\ncommand during the bisection process (the subcommand view can be used\nas an alternative to visualize ): $ git bisect visualize Git detects a graphical environment through various environment variables: DISPLAY , which is set in X Window System environments on Unix systems. SESSIONNAME , which is set under Cygwin in interactive desktop sessions. MSYSTEM , which is set under Msys2 and Git for Windows. SECURITYSESSIONID , which may be set on macOS in interactive desktop sessions. If none of these environment variables is set, git log is used instead.\nYou can also give command-line options such as -p and --stat . $ git bisect visualize --stat Bisect log and bisect replay After having marked revisions as good or bad, issue the following\ncommand to show what has been done so far: $ git bisect log If you discover that you made a mistake in specifying the status of a\nrevision, you can save the output of this command to a file, edit it to\nremove the incorrect entries, and then issue the following commands to\nreturn to a corrected state: $ git bisect reset\n$ git bisect replay that-file Avoiding testing a commit If, in the middle of a bisect session, you know that the suggested\nrevision is not a good one to test (e.g. it fails to build and you\nknow that the failure does not have anything to do with the bug you\nare chasing), you can manually select a nearby commit and test that\none instead. For example: $ git bisect good/bad\t\t\t# previous round was good or bad.\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n$ git bisect visualize\t\t\t# oops, that is uninteresting.\n$ git reset --hard HEAD~3\t\t# try 3 revisions before what\n\t\t\t\t\t# was suggested Then compile and test the chosen revision, and afterwards mark\nthe revision as good or bad in the usual manner. Bisect skip Instead of choosing a nearby commit by yourself, you can ask Git to do\nit for you by issuing the command: $ git bisect skip                 # Current version cannot be tested However, if you skip a commit adjacent to the one you are looking for,\nGit will be unable to tell exactly which of those commits was the\nfirst bad one. You can also skip a range of commits, instead of just one commit,\nusing range notation. For example: $ git bisect skip v2.5..v2.6 This tells the bisect process that no commit after v2.5 , up to and\nincluding v2.6 , should be tested. Note that if you also want to skip the first commit of the range you\nwould issue the command: $ git bisect skip v2.5 v2.5..v2.6 This tells the bisect process that the commits between v2.5 and v2.6 (inclusive) should be skipped. Cutting down bisection by giving more parameters to bisect start You can further cut down the number of trials, if you know what part of\nthe tree is involved in the problem you are tracking down, by specifying\npathspec parameters when issuing the bisect start command: $ git bisect start -- arch/i386 include/asm-i386 If you know beforehand more than one good commit, you can narrow the\nbisect space down by specifying all of the good commits immediately after\nthe bad commit when issuing the bisect start command: $ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n                   # v2.6.20-rc6 is bad\n                   # v2.6.20-rc4 and v2.6.20-rc1 are good Bisect run If you have a script that can tell if the current source code is good\nor bad, you can bisect by issuing the command: $ git bisect run my_script arguments Note that the script ( my_script in the above example) should exit\nwith code 0 if the current source code is good/old, and exit with a\ncode between 1 and 127 (inclusive), except 125, if the current source\ncode is bad/new. Any other exit code will abort the bisect process. It should be noted\nthat a program that terminates via exit(-1) leaves $? = 255, (see the\nexit(3) manual page), as the value is chopped with & 0377 . The special exit code 125 should be used when the current source code\ncannot be tested. If the script exits with this code, the current\nrevision will be skipped (see git bisect skip above). 125 was chosen\nas the highest sensible value to use for this purpose, because 126 and 127\nare used by POSIX shells to signal specific error status (127 is for\ncommand not found, 126 is for command found but not executable—​these\ndetails do not matter, as they are normal errors in the script, as far as bisect run is concerned). You may often find that during a bisect session you want to have\ntemporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a\nheader file, or \"revision that does not have this commit needs this\npatch applied to work around another problem this bisection is not\ninterested in\") applied to the revision being tested. To cope with such a situation, after the inner git bisect finds the\nnext revision to test, the script can apply the patch\nbefore compiling, run the real test, and afterwards decide if the\nrevision (possibly with the needed patch) passed the test and then\nrewind the tree to the pristine state.  Finally the script should exit\nwith the status of the real test to let the git bisect run command loop\ndetermine the eventual outcome of the bisect session."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug  --no-checkout"}, {"role": "assistant", "content": "Do not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update the reference named BISECT_HEAD to make\nit point to the commit that should be tested. This option may be useful when the test you would perform in each step\ndoes not require a checked out tree. If the repository is bare, --no-checkout is assumed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug  --first-parent"}, {"role": "assistant", "content": "Follow only the first parent commit upon seeing a merge commit. In detecting regressions introduced through the merging of a branch, the merge\ncommit will be identified as introduction of the bug and its ancestors will be\nignored. This option is particularly useful in avoiding false positives when a merged\nbranch contained broken or non-buildable commits, but the merge itself was OK."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug"}, {"role": "assistant", "content": "EXAMPLES Automatically bisect a broken build between v1.2 and HEAD: $ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n$ git bisect run make                # \"make\" builds the app\n$ git bisect reset                   # quit the bisect session Automatically bisect a test failure between origin and HEAD: $ git bisect start HEAD origin --    # HEAD is bad, origin is good\n$ git bisect run make test           # \"make test\" builds and tests\n$ git bisect reset                   # quit the bisect session Automatically bisect a broken test case: $ cat ~/test.sh\n#!/bin/sh\nmake || exit 125                     # this skips broken builds\n~/check_test_case.sh                 # does the test case pass?\n$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run ~/test.sh\n$ git bisect reset                   # quit the bisect session Here we use a test.sh custom script. In this script, if make fails, we skip the current commit. check_test_case.sh should exit 0 if the test case passes,\nand exit 1 otherwise. It is safer if both test.sh and check_test_case.sh are\noutside the repository to prevent interactions between the bisect,\nmake and test processes and the scripts. Automatically bisect with temporary modifications (hot-fix): $ cat ~/test.sh\n#!/bin/sh\n\n# tweak the working tree by merging the hot-fix branch\n# and then attempt a build\nif\tgit merge --no-commit --no-ff hot-fix &&\n\tmake\nthen\n\t# run project specific test and report its status\n\t~/check_test_case.sh\n\tstatus=$?\nelse\n\t# tell the caller this is untestable\n\tstatus=125\nfi\n\n# undo the tweak to allow clean flipping to the next commit\ngit reset --hard\n\n# return control\nexit $status This applies modifications from a hot-fix branch before each test run,\ne.g. in case your build or test environment changed so that older\nrevisions may need a fix which newer ones have already. (Make sure the\nhot-fix branch is based off a commit which is contained in all revisions\nwhich you are bisecting, so that the merge does not pull in too much, or\nuse git cherry-pick instead of git merge .) Automatically bisect a broken test case: $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n$ git bisect reset                   # quit the bisect session This shows that you can do without a run script if you write the test\non a single line. Locate a good region of the object graph in a damaged repository $ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout\n$ git bisect run sh -c '\n\tGOOD=$(git for-each-ref \"--format=%(objectname)\" refs/bisect/good-*) &&\n\tgit rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&\n\tgit pack-objects --stdout >/dev/null <tmp.$$\n\trc=$?\n\trm -f tmp.$$\n\ttest $rc = 0'\n\n$ git bisect reset                   # quit the bisect session In this case, when git bisect run finishes, bisect/bad will refer to a commit that\nhas at least one parent whose reachable graph is fully traversable in the sense\nrequired by git pack objects . Look for a fix instead of a regression in the code $ git bisect start\n$ git bisect new HEAD    # current commit is marked as new\n$ git bisect old HEAD~10 # the tenth commit from now is marked as old or: $ git bisect start --term-old broken --term-new fixed\n$ git bisect fixed\n$ git bisect broken HEAD~10 Getting help Use git bisect to get a short usage description, and git bisect\nhelp or git bisect -h to get a long usage description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "NAME git-blame - Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "SYNOPSIS git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n\t    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n\t    [--ignore-rev <rev>] [--ignore-revs-file <file>]\n\t    [--color-lines] [--color-by-age] [--progress] [--abbrev=<n>]\n\t    [ --contents <file> ] [<rev> | --reverse <rev>..<rev>] [--] <file>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "DESCRIPTION Annotates each line in the given file with information from the revision which\nlast modified the line. Optionally, start annotating from the given revision. When specified one or more times, -L restricts annotation to the requested\nlines. The origin of lines is automatically followed across whole-file\nrenames (currently there is no option to turn the rename-following\noff). To follow lines moved from one file to another, or to follow\nlines that were copied and pasted from another file, etc., see the -C and -M options. The report does not tell you anything about lines which have been deleted or\nreplaced; you need to use a tool such as git diff or the \"pickaxe\"\ninterface briefly mentioned in the following paragraph. Apart from supporting file annotation, Git also supports searching the\ndevelopment history for when a code snippet occurred in a change. This makes it\npossible to track when a code snippet was added to a file, moved or copied\nbetween files, and eventually deleted or replaced. It works by searching for\na text string in the diff. A small example of the pickaxe interface\nthat searches for blame_usage : $ git log --pretty=oneline -S'blame_usage'\n5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>\nea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -b"}, {"role": "assistant", "content": "Show blank SHA-1 for boundary commits.  This can also\nbe controlled via the blame.blankBoundary config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --root"}, {"role": "assistant", "content": "Do not treat root commits as boundaries.  This can also be\ncontrolled via the blame.showRoot config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --show-stats"}, {"role": "assistant", "content": "Include additional statistics at the end of blame output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -L <start>,<end>  -L :<funcname>"}, {"role": "assistant", "content": "Annotate only the line range given by <start>,<end> ,\nor by the function name regex <funcname> .\nMay be specified multiple times. Overlapping ranges are allowed. <start> and <end> are optional. -L <start> or -L <start>, spans from <start> to end of file. -L ,<end> spans from start of file to <end> . <start> and <end> can take one of these forms: number If <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1). /regex/ This form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/ , it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start> . +offset or -offset This is only valid for <end> and will specify a number\nof lines before or after the line given by <start> . If :<funcname> is given in place of <start> and <end> , it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname> , up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -l"}, {"role": "assistant", "content": "Show long rev (Default: off)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -t"}, {"role": "assistant", "content": "Show raw timestamp (Default: off)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -S <revs-file>"}, {"role": "assistant", "content": "Use revisions from revs-file instead of calling git-rev-list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --reverse <rev>..<rev>"}, {"role": "assistant", "content": "Walk history forward instead of backward. Instead of showing\nthe revision in which a line appeared, this shows the last\nrevision in which a line has existed. This requires a range of\nrevision like START..END where the path to blame exists in\nSTART. git blame --reverse START is taken as git blame\n--reverse START..HEAD for convenience."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --first-parent"}, {"role": "assistant", "content": "Follow only the first parent commit upon seeing a merge\ncommit. This option can be used to determine when a line\nwas introduced to a particular integration branch, rather\nthan when it was introduced to the history overall."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -p  --porcelain"}, {"role": "assistant", "content": "Show in a format designed for machine consumption."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --line-porcelain"}, {"role": "assistant", "content": "Show the porcelain format, but output commit information for\neach line, not just the first time a commit is referenced.\nImplies --porcelain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --incremental"}, {"role": "assistant", "content": "Show the result incrementally in a format designed for\nmachine consumption."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --encoding=<encoding>"}, {"role": "assistant", "content": "Specifies the encoding used to output author names\nand commit summaries. Setting it to none makes blame\noutput unconverted data. For more information see the\ndiscussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --contents <file>"}, {"role": "assistant", "content": "Annotate using the contents from the named file, starting from <rev>\nif it is specified, and HEAD otherwise. You may specify - to make\nthe command read from the standard input for the file contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --date <format>"}, {"role": "assistant", "content": "Specifies the format used to output dates. If --date is not\nprovided, the value of the blame.date config variable is\nused. If the blame.date config variable is also not set, the\niso format is used. For supported values, see the discussion\nof the --date option at git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --[no-]progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal. This flag\nenables progress reporting even if not attached to a\nterminal. Can’t use --progress together with --porcelain or --incremental ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -M[<num>]"}, {"role": "assistant", "content": "Detect moved or copied lines within a file. When a commit\nmoves or copies a block of lines (e.g. the original file\nhas A and then B, and the commit changes it to B and then\nA), the traditional blame algorithm notices only half of\nthe movement and typically blames the lines that were moved\nup (i.e. B) to the parent and assigns blame to the lines that\nwere moved down (i.e. A) to the child commit.  With this\noption, both groups of lines are blamed on the parent by\nrunning extra passes of inspection. <num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nwithin a file for it to associate those lines with the parent\ncommit. The default value is 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -C[<num>]"}, {"role": "assistant", "content": "In addition to -M , detect lines moved or copied from other\nfiles that were modified in the same commit.  This is\nuseful when you reorganize your program and move code\naround across files.  When this option is given twice,\nthe command additionally looks for copies from other\nfiles in the commit that creates the file. When this\noption is given three times, the command additionally\nlooks for copies from other files in any commit. <num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nbetween files for it to associate those lines with the parent\ncommit. And the default value is 40. If there are more than one -C options given, the <num> argument of the last -C will\ntake effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --ignore-rev <rev>"}, {"role": "assistant", "content": "Ignore changes made by the revision when assigning blame, as if the\nchange never happened.  Lines that were changed or added by an ignored\ncommit will be blamed on the previous commit that changed that line or\nnearby lines.  This option may be specified multiple times to ignore\nmore than one revision.  If the blame.markIgnoredLines config option\nis set, then lines that were changed by an ignored commit and attributed to\nanother commit will be marked with a ? in the blame output.  If the blame.markUnblamableLines config option is set, then those lines touched\nby an ignored commit that we could not attribute to another revision are\nmarked with a * ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --ignore-revs-file <file>"}, {"role": "assistant", "content": "Ignore revisions listed in file , which must be in the same format as an fsck.skipList .  This option may be repeated, and these files will be\nprocessed after any files specified with the blame.ignoreRevsFile config\noption.  An empty file name, \"\" , will clear the list of revs from\npreviously processed files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --color-lines"}, {"role": "assistant", "content": "Color line annotations in the default format differently if they come from\nthe same commit as the preceding line. This makes it easier to distinguish\ncode blocks introduced by different commits. The color defaults to cyan and\ncan be adjusted using the color.blame.repeatedLines config option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --color-by-age"}, {"role": "assistant", "content": "Color line annotations depending on the age of the line in the default format.\nThe color.blame.highlightRecent config option controls what color is used for\neach range of age."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -h"}, {"role": "assistant", "content": "Show help message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -c"}, {"role": "assistant", "content": "Use the same output mode as git-annotate (Default: off)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --score-debug"}, {"role": "assistant", "content": "Include debugging information related to the movement of\nlines between files (see -C ) and lines moved within a\nfile (see -M ).  The first number listed is the score.\nThis is the number of alphanumeric characters detected\nas having been moved between or within files.  This must be above\na certain threshold for git blame to consider those lines\nof code to have been moved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -f  --show-name"}, {"role": "assistant", "content": "Show the filename in the original commit.  By default\nthe filename is shown if there is any line that came from a\nfile with a different name, due to rename detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -n  --show-number"}, {"role": "assistant", "content": "Show the line number in the original commit (Default: off)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -s"}, {"role": "assistant", "content": "Suppress the author name and timestamp from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -e  --show-email"}, {"role": "assistant", "content": "Show the author email instead of the author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -w"}, {"role": "assistant", "content": "Ignore whitespace when comparing the parent’s version and\nthe child’s to find where the lines came from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --abbrev=<n>"}, {"role": "assistant", "content": "Instead of using the default 7+1 hexadecimal digits as the\nabbreviated object name, use <m>+1 digits, where <m> is at\nleast <n> but ensures the commit object names are unique.\nNote that 1 column\nis used for a caret to mark the boundary commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "THE DEFAULT FORMAT When neither --porcelain nor --incremental option is specified, git blame will output annotation for each line with: abbreviated object name for the commit the line came from; author ident (by default the author name and date, unless -s or -e is specified); and line number before the line contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "THE PORCELAIN FORMAT In this format, each line is output after a header; the\nheader at the minimum has the first line which has: 40-byte SHA-1 of the commit the line is attributed to; the line number of the line in the original file; the line number of the line in the final file; on a line that starts a group of lines from a different\ncommit than the previous one, the number of lines in this\ngroup.  On subsequent lines this field is absent. This header line is followed by the following information\nat least once for each commit: the author name (\"author\"), email (\"author-mail\"), time\n(\"author-time\"), and time zone (\"author-tz\"); similarly\nfor committer. the filename in the commit that the line is attributed to. the first line of the commit log message (\"summary\"). The contents of the actual line are output after the above\nheader, prefixed by a TAB. This is to allow adding more\nheader elements later. The porcelain format generally suppresses commit information that has\nalready been seen. For example, two lines that are blamed to the same\ncommit will both be shown, but the details for that commit will be shown\nonly once. This is more efficient, but may require more state be kept by\nthe reader. The --line-porcelain option can be used to output full\ncommit information for each line, allowing simpler (but less efficient)\nusage like: # count the number of lines attributed to each author\ngit blame --line-porcelain file |\nsed -n 's/^author //p' |\nsort | uniq -c | sort -rn"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "SPECIFYING RANGES Unlike git blame and git annotate in older versions of git, the extent\nof the annotation can be limited to both line ranges and revision\nranges. The -L option, which limits annotation to a range of lines, may be\nspecified multiple times. When you are interested in finding the origin for\nlines 40-60 for file foo , you can use the -L option like so\n(they mean the same thing — both ask for 21 lines starting at\nline 40): git blame -L 40,60 foo\ngit blame -L 40,+21 foo Also you can use a regular expression to specify the line range: git blame -L '/^sub hello {/,/^}$/' foo which limits the annotation to the body of the hello subroutine. When you are not interested in changes older than version\nv2.6.18, or changes older than 3 weeks, you can use revision\nrange specifiers similar to git rev-list : git blame v2.6.18.. -- foo\ngit blame --since=3.weeks -- foo When revision range specifiers are used to limit the annotation,\nlines that have not changed since the range boundary (either the\ncommit v2.6.18 or the most recent commit that is more than 3\nweeks old in the above example) are blamed for that range\nboundary commit. A particularly useful way is to see if an added file has lines\ncreated by copy-and-paste from existing files.  Sometimes this\nindicates that the developer was being sloppy and did not\nrefactor the code properly.  You can first find the commit that\nintroduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its\nparents, using commit^! notation: git blame -C -C -f $commit^! -- foo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "INCREMENTAL OUTPUT When called with --incremental option, the command outputs the\nresult as it is built.  The output generally will talk about\nlines touched by more recent commits first (i.e. the lines will\nbe annotated out of order) and is meant to be used by\ninteractive viewers. The output format is similar to the Porcelain format, but it\ndoes not contain the actual lines from the file that is being\nannotated. Each blame entry always starts with a line of: <40-byte-hex-sha1> <sourceline> <resultline> <num-lines> Line numbers count from 1. The first time that a commit shows up in the stream, it has various\nother information about it printed out with a one-word tag at the\nbeginning of each line describing the extra commit information (author,\nemail, committer, dates, summary, etc.). Unlike the Porcelain format, the filename information is always\ngiven and terminates the entry: \"filename\" <whitespace-quoted-filename-goes-here> and thus it is really quite easy to parse for some line- and word-oriented\nparser (which should be quite natural for most scripting languages). Note For people who do parsing: to make it more robust, just ignore any\nlines between the first and last one (\"<sha1>\" and \"filename\" lines)\nwhere you do not recognize the tag words (or care about that particular\none) at the beginning of the \"extended information\" lines. That way, if\nthere is ever added information (like the commit encoding or extended\ncommit commentary), a blame viewer will not care."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "MAPPING AUTHORS See gitmailmap ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.blankBoundary"}, {"role": "assistant", "content": "Show blank commit object name for boundary commits in git-blame . This option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.coloring"}, {"role": "assistant", "content": "This determines the coloring scheme to be applied to blame\noutput. It can be repeatedLines , highlightRecent ,\nor none which is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.date"}, {"role": "assistant", "content": "Specifies the format used to output dates in git-blame .\nIf unset the iso format is used. For supported values,\nsee the discussion of the --date option at git-log ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.showEmail"}, {"role": "assistant", "content": "Show the author email instead of author name in git-blame .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.showRoot"}, {"role": "assistant", "content": "Do not treat root commits as boundaries in git-blame .\nThis option defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.ignoreRevsFile"}, {"role": "assistant", "content": "Ignore revisions listed in the file, one unabbreviated object name per\nline, in git-blame .  Whitespace and comments beginning with # are ignored.  This option may be repeated multiple times.  Empty\nfile names will reset the list of ignored revisions.  This option will\nbe handled before the command line option --ignore-revs-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.markUnblamableLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we could not\nattribute to another commit with a * in the output of git-blame ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  blame.markIgnoredLines"}, {"role": "assistant", "content": "Mark lines that were changed by an ignored revision that we attributed to\nanother commit with a ? in the output of git-blame ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern"}, {"role": "assistant", "content": "NAME git-grep - Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern"}, {"role": "assistant", "content": "SYNOPSIS git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n\t   [-v | --invert-match] [-h|-H] [--full-name]\n\t   [-E | --extended-regexp] [-G | --basic-regexp]\n\t   [-P | --perl-regexp]\n\t   [-F | --fixed-strings] [-n | --line-number] [--column]\n\t   [-l | --files-with-matches] [-L | --files-without-match]\n\t   [(-O | --open-files-in-pager) [<pager>]]\n\t   [-z | --null]\n\t   [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]\n\t   [--max-depth <depth>] [--[no-]recursive]\n\t   [--color[=<when>] | --no-color]\n\t   [--break] [--heading] [-p | --show-function]\n\t   [-A <post-context>] [-B <pre-context>] [-C <context>]\n\t   [-W | --function-context]\n\t   [(-m | --max-count) <num>]\n\t   [--threads <num>]\n\t   [-f <file>] [-e] <pattern>\n\t   [--and|--or|--not|(|)|-e <pattern>…​]\n\t   [--recurse-submodules] [--parent-basename <basename>]\n\t   [ [--[no-]exclude-standard] [--cached | --untracked | --no-index] | <tree>…​]\n\t   [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern"}, {"role": "assistant", "content": "DESCRIPTION Look for specified patterns in the tracked files in the work tree, blobs\nregistered in the index file, or blobs in given tree objects.  Patterns\nare lists of one or more search expressions separated by newline\ncharacters.  An empty string as search expression matches all lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --cached"}, {"role": "assistant", "content": "Instead of searching tracked files in the working tree, search\nblobs registered in the index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --untracked"}, {"role": "assistant", "content": "In addition to searching in the tracked files in the working\ntree, search also in untracked files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --no-index"}, {"role": "assistant", "content": "Search files in the current directory that is not managed by Git,\nor by ignoring that the current directory is managed by Git.  This\nis rather similar to running the regular grep(1) utility with its -r option specified, but with some additional benefits, such as\nusing pathspec patterns to limit paths;  see the pathspec entry\nin gitglossary for more information. This option cannot be used together with --cached or --untracked .\nSee also grep.fallbackToNoIndex in CONFIGURATION below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --no-exclude-standard"}, {"role": "assistant", "content": "Also search in ignored files by not honoring the .gitignore mechanism. Only useful with --untracked ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --exclude-standard"}, {"role": "assistant", "content": "Do not pay attention to ignored files specified via the .gitignore mechanism.  Only useful when searching files in the current directory\nwith --no-index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --recurse-submodules"}, {"role": "assistant", "content": "Recursively search in each submodule that is active and\nchecked out in the repository.  When used in combination with the <tree> option the prefix of all submodule output will be the name of\nthe parent project’s <tree> object.  This option cannot be used together\nwith --untracked , and it has no effect if --no-index is specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -a  --text"}, {"role": "assistant", "content": "Process binary files as if they were text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --textconv"}, {"role": "assistant", "content": "Honor textconv filter settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --no-textconv"}, {"role": "assistant", "content": "Do not honor textconv filter settings.\nThis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -i  --ignore-case"}, {"role": "assistant", "content": "Ignore case differences between the patterns and the\nfiles."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -I"}, {"role": "assistant", "content": "Don’t match the pattern in binary files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --max-depth <depth>"}, {"role": "assistant", "content": "For each <pathspec> given on command line, descend at most <depth>\nlevels of directories. A value of -1 means no limit.\nThis option is ignored if <pathspec> contains active wildcards.\nIn other words if \"a*\" matches a directory named \"a*\",\n\"*\" is matched literally so --max-depth is still effective."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -r  --recursive"}, {"role": "assistant", "content": "Same as --max-depth=-1 ; this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --no-recursive"}, {"role": "assistant", "content": "Same as --max-depth=0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -w  --word-regexp"}, {"role": "assistant", "content": "Match the pattern only at word boundary (either begin at the\nbeginning of a line, or preceded by a non-word character; end at\nthe end of a line or followed by a non-word character)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -v  --invert-match"}, {"role": "assistant", "content": "Select non-matching lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -h  -H"}, {"role": "assistant", "content": "By default, the command shows the filename for each\nmatch. -h option is used to suppress this output. -H is there for completeness and does not do anything\nexcept it overrides -h given earlier on the command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --full-name"}, {"role": "assistant", "content": "When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -E  --extended-regexp  -G  --basic-regexp"}, {"role": "assistant", "content": "Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -P  --perl-regexp"}, {"role": "assistant", "content": "Use Perl-compatible regular expressions for patterns. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -F  --fixed-strings"}, {"role": "assistant", "content": "Use fixed strings for patterns (don’t interpret pattern\nas a regex)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -n  --line-number"}, {"role": "assistant", "content": "Prefix the line number to matching lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --column"}, {"role": "assistant", "content": "Prefix the 1-indexed byte-offset of the first match from the start of the\nmatching line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -l  --files-with-matches  --name-only  -L  --files-without-match"}, {"role": "assistant", "content": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff , --name-only is a\nsynonym for --files-with-matches ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -O[<pager>]  --open-files-in-pager[=<pager>]"}, {"role": "assistant", "content": "Open the matching files in the pager (not the output of grep ).\nIf the pager happens to be \"less\" or \"vi\", and the user\nspecified only one pattern, the first file is positioned at\nthe first match automatically. The pager argument is\noptional; if specified, it must be stuck to the option\nwithout a space. If pager is unspecified, the default pager\nwill be used (see core.pager in git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -z  --null"}, {"role": "assistant", "content": "Use \\0 as the delimiter for pathnames in the output, and print\nthem verbatim. Without this option, pathnames with \"unusual\"\ncharacters are quoted as explained for the configuration\nvariable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -o  --only-matching"}, {"role": "assistant", "content": "Print only the matched (non-empty) parts of a matching line, with each such\npart on a separate output line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -c  --count"}, {"role": "assistant", "content": "Instead of showing every matched line, show the number of\nlines that match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --color[=<when>]"}, {"role": "assistant", "content": "Show colored matches.\nThe value must be always (the default), never, or auto."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --no-color"}, {"role": "assistant", "content": "Turn off match highlighting, even when the configuration file\ngives the default to color output.\nSame as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --break"}, {"role": "assistant", "content": "Print an empty line between matches from different files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --heading"}, {"role": "assistant", "content": "Show the filename above the matches in that file instead of\nat the start of each shown line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -p  --show-function"}, {"role": "assistant", "content": "Show the preceding line that contains the function name of\nthe match, unless the matching line is a function name itself.\nThe name is determined in the same way as git diff works out\npatch hunk headers (see Defining a custom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -<num>  -C <num>  --context <num>"}, {"role": "assistant", "content": "Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -A <num>  --after-context <num>"}, {"role": "assistant", "content": "Show <num> trailing lines, and place a line containing -- between contiguous groups of matches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -B <num>  --before-context <num>"}, {"role": "assistant", "content": "Show <num> leading lines, and place a line containing -- between contiguous groups of matches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -W  --function-context"}, {"role": "assistant", "content": "Show the surrounding text from the previous line containing a\nfunction name up to the one before the next function name,\neffectively showing the whole function in which the match was\nfound. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -m <num>  --max-count <num>"}, {"role": "assistant", "content": "Limit the amount of matches per file. When using the -v or --invert-match option, the search stops after the specified\nnumber of non-matches. A value of -1 will return unlimited\nresults (the default). A value of 0 will exit immediately with\na non-zero status."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --threads <num>"}, {"role": "assistant", "content": "Number of grep worker threads to use.  See NOTES ON THREADS and grep.threads in CONFIGURATION for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -f <file>"}, {"role": "assistant", "content": "Read patterns from <file>, one per line. Passing the pattern via <file> allows for providing a search pattern\ncontaining a \\0. Not all pattern types support patterns containing \\0. Git will error\nout if a given pattern type can’t support such a pattern. The --perl-regexp pattern type when compiled against the PCRE v2 backend\nhas the widest support for these types of patterns. In versions of Git before 2.23.0 patterns containing \\0 would be\nsilently considered fixed. This was never documented, there were also\nodd and undocumented interactions between e.g. non-ASCII patterns\ncontaining \\0 and --ignore-case . In future versions we may learn to support patterns containing \\0 for\nmore search backends, until then we’ll die when the pattern type in\nquestion doesn’t support them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -e"}, {"role": "assistant", "content": "The next parameter is the pattern. This option has to be\nused for patterns starting with - and should be used in\nscripts passing user input to grep.  Multiple patterns are\ncombined by or ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --and  --or  --not  ( …​ )"}, {"role": "assistant", "content": "Specify how multiple patterns are combined using Boolean\nexpressions. --or is the default operator. --and has\nhigher precedence than --or . -e has to be used for all\npatterns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --all-match"}, {"role": "assistant", "content": "When giving multiple pattern expressions combined with --or ,\nthis flag is specified to limit the match to files that\nhave lines to match all of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -q  --quiet"}, {"role": "assistant", "content": "Do not output matched lines; instead, exit with status 0 when\nthere is a match and with non-zero status when there isn’t."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  <tree>…​"}, {"role": "assistant", "content": "Instead of searching tracked files in the working tree, search\nblobs in the given trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --"}, {"role": "assistant", "content": "Signals the end of options; the rest of the parameters\nare <pathspec> limiters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  <pathspec>…​"}, {"role": "assistant", "content": "If given, limit the search to paths matching at least one pattern.\nBoth leading paths match and glob(7) patterns are supported. For more details about the <pathspec> syntax, see the pathspec entry\nin gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  git grep 'time_t' -- '*.[ch]'"}, {"role": "assistant", "content": "Looks for time_t in all tracked .c and .h files in the working\ndirectory and its subdirectories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  git grep -e '#define' --and \\( -e MAX_PATH -e PATH_MAX \\)"}, {"role": "assistant", "content": "Looks for a line that has #define and either MAX_PATH or PATH_MAX ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  git grep --all-match -e NODE -e Unexpected"}, {"role": "assistant", "content": "Looks for a line that has NODE or Unexpected in\nfiles that have lines that match both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  git grep solution -- :^Documentation"}, {"role": "assistant", "content": "Looks for solution , excluding files in Documentation ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern"}, {"role": "assistant", "content": "NOTES ON THREADS The --threads option (and the grep.threads configuration) will be ignored when --open-files-in-pager is used, forcing a single-threaded execution. When grepping the object store (with --cached or giving tree objects), running\nwith multiple threads might perform slower than single-threaded if --textconv is given and there are too many text conversions.  Thus, if low performance is\nexperienced in this case, it might be desirable to use --threads=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.lineNumber"}, {"role": "assistant", "content": "If set to true, enable -n option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.column"}, {"role": "assistant", "content": "If set to true, enable the --column option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.patternType"}, {"role": "assistant", "content": "Set the default matching behavior. Using a value of basic , extended , fixed , or perl will enable the --basic-regexp , --extended-regexp , --fixed-strings , or --perl-regexp option accordingly, while the\nvalue default will use the grep.extendedRegexp option to choose\nbetween basic and extended ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.extendedRegexp"}, {"role": "assistant", "content": "If set to true, enable --extended-regexp option by default. This\noption is ignored when the grep.patternType option is set to a value\nother than default ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.threads"}, {"role": "assistant", "content": "Number of grep worker threads to use. If unset (or set to 0), Git will\nuse as many threads as the number of logical cores available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.fullName"}, {"role": "assistant", "content": "If set to true, enable --full-name option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.fallbackToNoIndex"}, {"role": "assistant", "content": "If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "NAME gitattributes - Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "SYNOPSIS $GIT_DIR/info/attributes, .gitattributes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "The path has the attribute with special value \"true\";\nthis is specified by listing only the name of the\nattribute in the attribute list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "The path has the attribute with special value \"false\";\nthis is specified by listing the name of the attribute\nprefixed with a dash - in the attribute list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to a value"}, {"role": "assistant", "content": "The path has the attribute with specified string value;\nthis is specified by listing the name of the attribute\nfollowed by an equal sign = and its value in the\nattribute list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "No pattern matches the path, and nothing says if\nthe path has or does not have the attribute, the\nattribute for the path is said to be Unspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "RESERVED BUILTIN_* ATTRIBUTES builtin_* is a reserved namespace for builtin attribute values. Any\nuser defined attributes under this namespace will be ignored and\ntrigger a warning. builtin_objectmode This attribute is for filtering files by their file bit modes (40000,\n120000, 160000, 100755, 100644). e.g. :(attr:builtin_objectmode=160000) .\nYou may also check these values with git check-attr builtin_objectmode -- <file> .\nIf the object is not in the index git check-attr --cached will return unspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "Setting the text attribute on a path enables end-of-line\nconversion on checkin and checkout as described above.  Line endings\nare normalized to LF in the index every time the file is checked in,\neven if the file was previously added to Git with CRLF line endings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "Unsetting the text attribute on a path tells Git not to\nattempt any end-of-line conversion upon checkin or checkout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to string value \"auto\""}, {"role": "assistant", "content": "When text is set to \"auto\", Git decides by itself whether the file\nis text or binary.  If it is text and the file was not already in\nGit with CRLF endings, line endings are converted on checkin and\ncheckout as described above.  Otherwise, no conversion is done on\ncheckin or checkout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "If the text attribute is unspecified, Git uses the core.autocrlf configuration variable to determine if the\nfile should be converted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to string value \"crlf\""}, {"role": "assistant", "content": "This setting converts the file’s line endings in the working\ndirectory to CRLF when the file is checked out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set to string value \"lf\""}, {"role": "assistant", "content": "This setting uses the same line endings in the working directory as\nin the index when the file is checked out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "If the eol attribute is unspecified for a file, its line endings\nin the working directory are determined by the core.autocrlf or core.eol configuration variable (see the definitions of those\noptions in git-config ).  If text is set but neither of\nthose variables is, the default is eol=crlf on Windows and eol=lf on all other platforms."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "A path to which the diff attribute is set is treated\nas text, even when they contain byte values that\nnormally never appear in text files, such as NUL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "A path to which the diff attribute is unset will\ngenerate Binary files differ (or a binary patch, if\nbinary patches are enabled)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "A path to which the diff attribute is unspecified\nfirst gets its contents inspected, and if it looks like\ntext and is smaller than core.bigFileThreshold, it is treated\nas text. Otherwise it would generate Binary files differ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  String"}, {"role": "assistant", "content": "Diff is shown using the specified diff driver.  Each driver may\nspecify one or more options, as described in the following\nsection. The options for the diff driver \"foo\" are defined\nby the configuration variables in the \"diff.foo\" section of the\nGit config file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "Built-in 3-way merge driver is used to merge the\ncontents in a way similar to merge command of RCS suite.  This is suitable for ordinary text files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "Take the version from the current branch as the\ntentative merge result, and declare that the merge has\nconflicts.  This is suitable for binary files that do\nnot have a well-defined merge semantics."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "By default, this uses the same built-in 3-way merge\ndriver as is the case when the merge attribute is set.\nHowever, the merge.default configuration variable can name\ndifferent merge driver to be used with paths for which the merge attribute is unspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  String"}, {"role": "assistant", "content": "3-way merge is performed using the specified custom\nmerge driver.  The built-in 3-way merge driver can be\nexplicitly specified by asking for \"text\" driver; the\nbuilt-in \"take the current branch\" driver can be\nrequested with \"binary\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  text"}, {"role": "assistant", "content": "Usual 3-way file level merge for text files.  Conflicted\nregions are marked with conflict markers <<<<<<< , ======= and >>>>>>> .  The version from your branch\nappears before the ======= marker, and the version\nfrom the merged branch appears after the ======= marker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  binary"}, {"role": "assistant", "content": "Keep the version from your branch in the work tree, but\nleave the path in the conflicted state for the user to\nsort out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  union"}, {"role": "assistant", "content": "Run 3-way file level merge for text files, but take\nlines from both versions, instead of leaving conflict\nmarkers.  This tends to leave the added lines in the\nresulting file in random order and the user should\nverify the result. Do not use this if you do not\nunderstand the implications."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "Notice all types of potential whitespace errors known to Git.\nThe tab width is taken from the value of the core.whitespace configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "Do not notice anything as error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unspecified"}, {"role": "assistant", "content": "Use the value of the core.whitespace configuration variable to\ndecide what to notice as error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  String"}, {"role": "assistant", "content": "Specify a comma separated list of common whitespace problems to\nnotice in the same format as the core.whitespace configuration\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "USING MACRO ATTRIBUTES You do not want any end-of-line conversions applied to, nor textual diffs\nproduced for, any binary file you track.  You would need to specify e.g. *.jpg -text -diff but that may become cumbersome, when you have many attributes.  Using\nmacro attributes, you can define an attribute that, when set, also\nsets or unsets a number of other attributes at the same time.  The\nsystem knows a built-in macro attribute, binary : *.jpg binary Setting the \"binary\" attribute also unsets the \"text\" and \"diff\"\nattributes as above.  Note that macro attributes can only be \"Set\",\nthough setting one might have the effect of setting or unsetting other\nattributes or even returning other attributes to the \"Unspecified\"\nstate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "DEFINING MACRO ATTRIBUTES Custom macro attributes can be defined only in top-level gitattributes\nfiles ( $GIT_DIR/info/attributes , the .gitattributes file at the\ntop level of the working tree, or the global or system-wide\ngitattributes files), not in .gitattributes files in working tree\nsubdirectories.  The built-in macro attribute \"binary\" is equivalent\nto: [attr]binary -diff -merge -text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "NOTES Git does not follow symbolic links when accessing a .gitattributes file in the working tree. This keeps behavior consistent when the file\nis accessed from the index or a tree versus from the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "EXAMPLES If you have these three gitattributes file: (in $GIT_DIR/info/attributes)\n\na*\tfoo !bar -baz\n\n(in .gitattributes)\nabc\tfoo bar baz\n\n(in t/.gitattributes)\nab*\tmerge=filfre\nabc\t-foo -bar\n*.c\tfrotz the attributes given to path t/abc are computed as follows: By examining t/.gitattributes (which is in the same\ndirectory as the path in question), Git finds that the first\nline matches. merge attribute is set.  It also finds that\nthe second line matches, and attributes foo and bar are unset. Then it examines .gitattributes (which is in the parent\ndirectory), and finds that the first line matches, but t/.gitattributes file already decided how merge , foo and bar attributes should be given to this path, so it\nleaves foo and bar unset.  Attribute baz is set. Finally it examines $GIT_DIR/info/attributes .  This file\nis used to override the in-tree settings.  The first line is\na match, and foo is set, bar is reverted to unspecified\nstate, and baz is unset. As the result, the attributes assignment to t/abc becomes: foo\tset to true\nbar\tunspecified\nbaz\tset to false\nmerge\tset to string value \"filfre\"\nfrotz\tunspecified"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions"}, {"role": "assistant", "content": "NAME gitcli - Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions"}, {"role": "assistant", "content": "SYNOPSIS gitcli"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions"}, {"role": "assistant", "content": "DESCRIPTION This manual describes the convention used throughout Git CLI. Many commands take revisions (most often \"commits\", but sometimes\n\"tree-ish\", depending on the context and command) and paths as their\narguments.  Here are the rules: Options come first and then args.\nA subcommand may take dashed options (which may take their own\narguments, e.g. \"--max-parents 2\") and arguments.  You SHOULD\ngive dashed options first and then arguments.  Some commands may\naccept dashed options after you have already given non-option\narguments (which may make the command ambiguous), but you should\nnot rely on it (because eventually we may find a way to fix\nthese ambiguities by enforcing the \"options then args\" rule). Revisions come first and then paths.\nE.g. in git diff v1.0 v2.0 arch/x86 include/asm-x86 , v1.0 and v2.0 are revisions and arch/x86 and include/asm-x86 are paths. When an argument can be misunderstood as either a revision or a path,\nthey can be disambiguated by placing -- between them.\nE.g. git diff -- HEAD is, \"I have a file called HEAD in my work\ntree.  Please show changes between the version I staged in the index\nand what I have in the work tree for that file\", not \"show the difference\nbetween the HEAD commit and the work tree as a whole\".  You can say git diff HEAD -- to ask for the latter. Without disambiguating -- , Git makes a reasonable guess, but errors\nout and asks you to disambiguate when ambiguous.  E.g. if you have a\nfile called HEAD in your work tree, git diff HEAD is ambiguous, and\nyou have to say either git diff HEAD -- or git diff -- HEAD to\ndisambiguate. Because -- disambiguates revisions and paths in some commands, it\ncannot be used for those commands to separate options and revisions.\nYou can use --end-of-options for this (it also works for commands\nthat do not distinguish between revisions in paths, in which case it\nis simply an alias for -- ). When writing a script that is expected to handle random user-input, it is\na good practice to make it explicit which arguments are which by placing\ndisambiguating -- at appropriate places. Many commands allow wildcards in paths, but you need to protect\nthem from getting globbed by the shell.  These two mean different\nthings: $ git restore *.c\n$ git restore \\*.c The former lets your shell expand the fileglob, and you are asking\nthe dot-C files in your working tree to be overwritten with the version\nin the index.  The latter passes the *.c to Git, and you are asking\nthe paths in the index that match the pattern to be checked out to your\nworking tree.  After running git add hello.c; rm hello.c , you will not see hello.c in your working tree with the former, but with the latter\nyou will. Just as the filesystem . (period) refers to the current directory,\nusing a . as a repository name in Git (a dot-repository) is a relative\npath and means your current repository. Here are the rules regarding the \"flags\" that you should follow when you are\nscripting Git: Splitting short options to separate words (prefer git foo -a -b to git foo -ab , the latter may not even work). When a command-line option takes an argument, use the stuck form.  In\nother words, write git foo -oArg instead of git foo -o Arg for short\noptions, and git foo --long-opt=Arg instead of git foo --long-opt Arg for long options.  An option that takes optional option-argument must be\nwritten in the stuck form. When you give a revision parameter to a command, make sure the parameter is\nnot ambiguous with a name of a file in the work tree.  E.g. do not write git log -1 HEAD but write git log -1 HEAD -- ; the former will not work\nif you happen to have a file called HEAD in the work tree. Many commands allow a long option --option to be abbreviated\nonly to their unique prefix (e.g. if there is no other option\nwhose name begins with opt , you may be able to spell --opt to\ninvoke the --option flag), but you should fully spell them out\nwhen writing your scripts; later versions of Git may introduce a\nnew option whose name shares the same prefix, e.g. --optimize ,\nto make a short prefix that used to be unique no longer unique."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions  -h"}, {"role": "assistant", "content": "gives a pretty printed usage of the command. $ git describe -h\nusage: git describe [<options>] <commit-ish>*\n   or: git describe [<options>] --dirty\n\n    --contains            find the tag that comes after the commit\n    --debug               debug search strategy on stderr\n    --all                 use any ref\n    --tags                use any tag, even unannotated\n    --long                always use long format\n    --abbrev[=<n>]        use <n> digits to display SHA-1s Note that some subcommand (e.g. git grep ) may behave differently\nwhen there are things on the command line other than -h , but git\nsubcmd -h without anything else on the command line is meant to\nconsistently give the usage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions  --help-all"}, {"role": "assistant", "content": "Some Git commands take options that are only used for plumbing or that\nare deprecated, and such options are hidden from the default usage. This\noption gives the full list of options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions"}, {"role": "assistant", "content": "NOTES ON FREQUENTLY CONFUSED OPTIONS Many commands that can work on files in the working tree\nand/or in the index can take --cached and/or --index options.  Sometimes people incorrectly think that, because\nthe index was originally called cache, these two are\nsynonyms.  They are not — these two options mean very\ndifferent things. The --cached option is used to ask a command that\nusually works on files in the working tree to only work\nwith the index.  For example, git grep , when used\nwithout a commit to specify from which commit to look for\nstrings in, usually works on files in the working tree,\nbut with the --cached option, it looks for strings in\nthe index. The --index option is used to ask a command that\nusually works on files in the working tree to also affect the index.  For example, git stash apply usually\nmerges changes recorded in a stash entry to the working tree,\nbut with the --index option, it also merges changes to\nthe index as well. git apply command can be used with --cached and --index (but not at the same time).  Usually the command\nonly affects the files in the working tree, but with --index , it patches both the files and their index\nentries, and with --cached , it modifies only the index\nentries. See also https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp.cox.net/ and https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese.dyndns.org/ for further\ninformation. Some other commands that also work on files in the working tree and/or\nin the index can take --staged and/or --worktree . --staged is exactly like --cached , which is used to ask a\ncommand to only work on the index, not the working tree. --worktree is the opposite, to ask a command to work on the\nworking tree only, not the index. The two options can be specified together to ask a command to work\non both the index and the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git"}, {"role": "assistant", "content": "NAME giteveryday - A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git"}, {"role": "assistant", "content": "SYNOPSIS Everyday Git With 20 Commands Or So"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git"}, {"role": "assistant", "content": "DESCRIPTION Git users can broadly be grouped into four categories for the purposes of\ndescribing here a small set of useful commands for everyday Git. Individual Developer (Standalone) commands are essential\nfor anybody who makes a commit, even for somebody who works alone. If you work with other people, you will need commands listed in\nthe Individual Developer (Participant) section as well. People who play the Integrator role need to learn some\nmore commands in addition to the above. Repository Administration commands are for system\nadministrators who are responsible for the care and feeding\nof Git repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Use a tarball as a starting point for a new repository."}, {"role": "assistant", "content": "$ tar zxf frotz.tar.gz\n$ cd frotz\n$ git init\n$ git add . (1) $ git commit -m \"import of frotz source tree.\"\n$ git tag v2.43 (2) add everything under the current directory. make a lightweight, unannotated tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Create a topic branch and develop."}, {"role": "assistant", "content": "$ git switch -c alsa-audio (1) $ edit/compile/test\n$ git restore curses/ux_audio_oss.c (2) $ git add curses/ux_audio_alsa.c (3) $ edit/compile/test\n$ git diff HEAD (4) $ git commit -a -s (5) $ edit/compile/test\n$ git diff HEAD^ (6) $ git commit -a --amend (7) $ git switch master (8) $ git merge alsa-audio (9) $ git log --since='3 days ago' (10) $ git log v2.43.. curses/ (11) create a new topic branch. revert your botched changes in curses/ux_audio_oss.c . you need to tell Git if you added a new file; removal and\nmodification will be caught if you do git commit -a later. to see what changes you are committing. commit everything, as you have tested, with your sign-off. look at all your changes including the previous commit. amend the previous commit, adding all your new changes,\nusing your original message. switch to the master branch. merge a topic branch into your master branch. review commit logs; other forms to limit output can be\ncombined and include -10 (to show up to 10 commits), --until=2005-12-10 , etc. view only the changes that touch what’s in curses/ directory, since v2.43 tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Clone the upstream and work on it.  Feed changes to upstream."}, {"role": "assistant", "content": "$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n$ cd my2.6\n$ git switch -c mine master (1) $ edit/compile/test; git commit -a -s (2) $ git format-patch master (3) $ git send-email --to=\"person <email@example.com>\" 00*.patch (4) $ git switch master (5) $ git pull (6) $ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7) $ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8) $ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9) $ git reset --hard ORIG_HEAD (10) $ git gc (11) checkout a new branch mine from master. repeat as needed. extract patches from your branch, relative to master, and email them. return to master , ready to see what’s new git pull fetches from origin by default and merges into the\ncurrent branch. immediately after pulling, look at the changes done upstream\nsince last time we checked, only in the\narea we are interested in. check the branch names in an external repository (if not known). fetch from a specific branch ALL from a specific repository\nand merge it. revert the pull. garbage collect leftover objects from reverted pull."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Push into another repository."}, {"role": "assistant", "content": "satellite$ git clone mothership:frotz frotz (1) satellite$ cd frotz\nsatellite$ git config --get-regexp '^(remote|branch)\\.' (2) remote.origin.url mothership:frotz\nremote.origin.fetch refs/heads/*:refs/remotes/origin/*\nbranch.master.remote origin\nbranch.master.merge refs/heads/master\nsatellite$ git config remote.origin.push \\\n\t   +refs/heads/*:refs/remotes/satellite/* (3) satellite$ edit/compile/test/commit\nsatellite$ git push origin (4) mothership$ cd frotz\nmothership$ git switch master\nmothership$ git merge satellite/master (5) mothership machine has a frotz repository under your home\ndirectory; clone from it to start a repository on the satellite\nmachine. clone sets these configuration variables by default.\nIt arranges git pull to fetch and store the branches of mothership\nmachine to local remotes/origin/* remote-tracking branches. arrange git push to push all local branches to\ntheir corresponding branch of the mothership machine. push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine.  You could use this\nas a back-up method. Likewise, you can pretend that mothership\n\"fetched\" from you (useful when access is one sided). on mothership machine, merge the work done on the satellite\nmachine into the master branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Branch off of a specific tag."}, {"role": "assistant", "content": "$ git switch -c private2.6.14 v2.6.14 (1) $ edit/compile/test; git commit -a\n$ git checkout master\n$ git cherry-pick v2.6.14..private2.6.14 (2) create a private branch based on a well known (but somewhat behind)\ntag. forward port all changes in private2.6.14 branch to master branch\nwithout a formal \"merging\". Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 |\n  git am -3 -k"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  A typical integrator’s Git day."}, {"role": "assistant", "content": "$ git status (1) $ git branch --no-merged master (2) $ mailx (3) & s 2 3 4 5 ./+to-apply\n& s 7 8 ./+hold-linus\n& q\n$ git switch -c topic/one master\n$ git am -3 -i -s ./+to-apply (4) $ compile/test\n$ git switch -c hold/linus && git am -3 -i -s ./+hold-linus (5) $ git switch topic/one && git rebase master (6) $ git switch -C seen next (7) $ git merge topic/one topic/two && git merge hold/linus (8) $ git switch maint\n$ git cherry-pick master~4 (9) $ compile/test\n$ git tag -s -m \"GIT 0.99.9x\" v0.99.9x (10) $ git fetch ko && for branch in master maint next seen (11) do\n\tgit show-branch ko/$branch $branch (12) done\n$ git push --follow-tags ko (13) see what you were in the middle of doing, if anything. see which branches haven’t been merged into master yet.\nLikewise for any other integration branches e.g. maint , next and seen . read mails, save ones that are applicable, and save others\nthat are not quite ready (other mail readers are available). apply them, interactively, with your sign-offs. create topic branch as needed and apply, again with sign-offs. rebase internal topic branch that has not been merged to the\nmaster or exposed as a part of a stable branch. restart seen every time from the next. and bundle topic branches still cooking. backport a critical fix. create a signed tag. make sure master was not accidentally rewound beyond that\nalready pushed out. In the output from git show-branch , master should have\neverything ko/master has, and next should have\neverything ko/next has, etc. push out the bleeding edge, together with new tags that point\ninto the pushed history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  We assume the following in /etc/services"}, {"role": "assistant", "content": "$ grep 9418 /etc/services\ngit\t\t9418/tcp\t\t# Git Version Control System"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Run git-daemon to serve /pub/scm from inetd."}, {"role": "assistant", "content": "$ grep git /etc/inetd.conf\ngit\tstream\ttcp\tnowait\tnobody \\\n  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm The actual configuration line should be on one line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Run git-daemon to serve /pub/scm from xinetd."}, {"role": "assistant", "content": "$ cat /etc/xinetd.d/git-daemon\n# default: off\n# description: The Git server offers access to Git repositories\nservice git\n{\n\tdisable = no\n\ttype            = UNLISTED\n\tport            = 9418\n\tsocket_type     = stream\n\twait            = no\n\tuser            = nobody\n\tserver          = /usr/bin/git-daemon\n\tserver_args     = --inetd --export-all --base-path=/pub/scm\n\tlog_on_failure  += USERID\n} Check your xinetd(8) documentation and setup, this is from a Fedora system.\nOthers might be different."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Give push/pull only access to developers using git-over-ssh."}, {"role": "assistant", "content": "e.g. those using: $ git push/pull ssh://host.xz/pub/scm/project $ grep git /etc/passwd (1) alice:x:1000:1000::/home/alice:/usr/bin/git-shell\nbob:x:1001:1001::/home/bob:/usr/bin/git-shell\ncindy:x:1002:1002::/home/cindy:/usr/bin/git-shell\ndavid:x:1003:1003::/home/david:/usr/bin/git-shell\n$ grep git /etc/shells (2) /usr/bin/git-shell log-in shell is set to /usr/bin/git-shell, which does not\nallow anything but git push and git pull .  The users require\nssh access to the machine. in many distributions /etc/shells needs to list what is used\nas the login shell."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  CVS-style shared repository."}, {"role": "assistant", "content": "$ grep git /etc/group (1) git:x:9418:alice,bob,cindy,david\n$ cd /home/devo.git\n$ ls -l (2) lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -> refs/heads/master\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches\n  -rw-rw-r--   1 david git    84 Dec  4 22:40 config\n  -rw-rw-r--   1 david git    58 Dec  4 22:40 description\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks\n  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info\n  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects\n  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes\n$ ls -l hooks/update (3) -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update\n$ cat info/allowed-users (4) refs/heads/master\talice\\|cindy\nrefs/heads/doc-update\tbob\nrefs/tags/v[0-9]*\tdavid place the developers into the same git group. and make the shared repository writable by the group. use update-hook example by Carl from Documentation/howto/\nfor branch policy control. alice and cindy can push into master, only bob can push into doc-update.\ndavid is the release manager and is the only person who can\ncreate and push version tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git"}, {"role": "assistant", "content": "NAME gitfaq - Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git"}, {"role": "assistant", "content": "SYNOPSIS gitfaq"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git"}, {"role": "assistant", "content": "DESCRIPTION The examples in this FAQ assume a standard POSIX shell, like bash or dash ,\nand a user, A U Thor, who has the account author on the hosting provider git.example.org ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  What should I put in user.name ?"}, {"role": "assistant", "content": "You should put your personal name, generally a form using a given name\nand family name.  For example, the current maintainer of Git uses \"Junio\nC Hamano\".  This will be the name portion that is stored in every commit\nyou make. This configuration doesn’t have any effect on authenticating to remote services;\nfor that, see credential.username in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  What does http.postBuffer really do?"}, {"role": "assistant", "content": "This option changes the size of the buffer that Git uses when pushing\ndata to a remote over HTTP or HTTPS.  If the data is larger than this\nsize, libcurl, which handles the HTTP support for Git, will use chunked\ntransfer encoding since it isn’t known ahead of time what the size of\nthe pushed data will be. Leaving this value at the default size is fine unless you know that either the\nremote server or a proxy in the middle doesn’t support HTTP/1.1 (which\nintroduced the chunked transfer encoding) or is known to be broken with chunked\ndata.  This is often (erroneously) suggested as a solution for generic push\nproblems, but since almost every server and proxy supports at least HTTP/1.1,\nraising this value usually doesn’t solve most push problems.  A server or proxy\nthat didn’t correctly support HTTP/1.1 and chunked transfer encoding wouldn’t be\nthat useful on the Internet today, since it would break lots of traffic. Note that increasing this value will increase the memory used on every relevant\npush that Git does over HTTP or HTTPS, since the entire buffer is allocated\nregardless of whether or not it is all used.  Thus, it’s best to leave it at the\ndefault unless you are sure you need a different value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I configure a different editor?"}, {"role": "assistant", "content": "If you haven’t specified an editor specifically for Git, it will by default\nuse the editor you’ve configured using the VISUAL or EDITOR environment\nvariables, or if neither is specified, the system default (which is usually vi ).  Since some people find vi difficult to use or prefer a different\neditor, it may be desirable to change the editor used. If you want to configure a general editor for most programs which need one, you\ncan edit your shell configuration (e.g., ~/.bashrc or ~/.zshenv ) to contain\na line setting the EDITOR or VISUAL environment variable to an appropriate\nvalue.  For example, if you prefer the editor nano , then you could write the\nfollowing: export VISUAL=nano If you want to configure an editor specifically for Git, you can either set the core.editor configuration value or the GIT_EDITOR environment variable.  You\ncan see git-var for details on the order in which these options are\nconsulted. Note that in all cases, the editor value will be passed to the shell, so any\narguments containing spaces should be appropriately quoted.  Additionally, if\nyour editor normally detaches from the terminal when invoked, you should specify\nit with an argument that makes it not do that, or else Git will not see any\nchanges.  An example of a configuration addressing both of these issues on\nWindows would be the configuration \"C:\\Program Files\\Vim\\gvim.exe\" --nofork ,\nwhich quotes the filename with spaces and specifies the --nofork option to\navoid backgrounding the process."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I specify my credentials when pushing over HTTP?"}, {"role": "assistant", "content": "The easiest way to do this is to use a credential helper via the credential.helper configuration.  Most systems provide a standard\nchoice to integrate with the system credential manager.  For example,\nGit for Windows provides the wincred credential manager, macOS has the osxkeychain credential manager, and Unix systems with a standard\ndesktop environment can use the libsecret credential manager.  All of\nthese store credentials in an encrypted store to keep your passwords or\ntokens secure. In addition, you can use the store credential manager which stores in a file\nin your home directory, or the cache credential manager, which does not\npermanently store your credentials, but does prevent you from being prompted for\nthem for a certain period of time. You can also just enter your password when prompted.  While it is possible to\nplace the password (which must be percent-encoded) in the URL, this is not\nparticularly secure and can lead to accidental exposure of credentials, so it is\nnot recommended."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I read a password or token from an environment variable?"}, {"role": "assistant", "content": "The credential.helper configuration option can also take an arbitrary\nshell command that produces the credential protocol on standard output.\nThis is useful when passing credentials into a container, for example. Such a shell command can be specified by starting the option value with an\nexclamation point.  If your password or token were stored in the GIT_TOKEN ,\nyou could run the following command to set your credential helper: $ git config credential.helper \\\n\t'!f() { echo username=author; echo \"password=$GIT_TOKEN\"; };f'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I change the password or token I’ve saved in my credential manager?"}, {"role": "assistant", "content": "Usually, if the password or token is invalid, Git will erase it and\nprompt for a new one.  However, there are times when this doesn’t always\nhappen.  To change the password or token, you can erase the existing\ncredentials and then Git will prompt for new ones.  To erase\ncredentials, use a syntax like the following (substituting your username\nand the hostname): $ echo url=https://author@git.example.org | git credential reject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I use multiple accounts with the same hosting provider using HTTP?"}, {"role": "assistant", "content": "Usually the easiest way to distinguish between these accounts is to use\nthe username in the URL.  For example, if you have the accounts author and committer on git.example.org , you can use the URLs https://author@git.example.org/org1/project1.git and https://committer@git.example.org/org2/project2.git .  This way, when you\nuse a credential helper, it will automatically try to look up the\ncorrect credentials for your account.  If you already have a remote set\nup, you can change the URL with something like git remote set-url\norigin https://author@git.example.org/org1/project1.git (see git-remote for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I use multiple accounts with the same hosting provider using SSH?"}, {"role": "assistant", "content": "With most hosting providers that support SSH, a single key pair uniquely\nidentifies a user.  Therefore, to use multiple accounts, it’s necessary\nto create a key pair for each account.  If you’re using a reasonably\nmodern OpenSSH version, you can create a new key pair with something\nlike ssh-keygen -t ed25519 -f ~/.ssh/id_committer .  You can then\nregister the public key (in this case, ~/.ssh/id_committer.pub ; note\nthe .pub ) with the hosting provider. Most hosting providers use a single SSH account for pushing; that is, all users\npush to the git account (e.g., git@git.example.org ).  If that’s the case for\nyour provider, you can set up multiple aliases in SSH to make it clear which key\npair to use.  For example, you could write something like the following in ~/.ssh/config , substituting the proper private key file: # This is the account for author on git.example.org.\nHost example_author\n\tHostName git.example.org\n\tUser git\n\t# This is the key pair registered for author with git.example.org.\n\tIdentityFile ~/.ssh/id_author\n\tIdentitiesOnly yes\n# This is the account for committer on git.example.org.\nHost example_committer\n\tHostName git.example.org\n\tUser git\n\t# This is the key pair registered for committer with git.example.org.\n\tIdentityFile ~/.ssh/id_committer\n\tIdentitiesOnly yes Then, you can adjust your push URL to use git@example_author or git@example_committer instead of git@example.org (e.g., git remote set-url\ngit@example_author:org1/project1.git )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  I’ve made a mistake in the last commit.  How do I change it?"}, {"role": "assistant", "content": "You can make the appropriate change to your working tree, run git add\n<file> or git rm <file> , as appropriate, to stage it, and then git\ncommit --amend .  Your change will be included in the commit, and you’ll\nbe prompted to edit the commit message again; if you wish to use the\noriginal message verbatim, you can use the --no-edit option to git\ncommit in addition, or just save and quit when your editor opens."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  I’ve made a change with a bug and it’s been included in the main branch.  How should I undo it?"}, {"role": "assistant", "content": "The usual way to deal with this is to use git revert .  This preserves\nthe history that the original change was made and was a valuable\ncontribution, but also introduces a new commit that undoes those changes\nbecause the original had a problem.  The commit message of the revert\nindicates the commit which was reverted and is usually edited to include\nan explanation as to why the revert was made."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I ignore changes to a tracked file?"}, {"role": "assistant", "content": "Git doesn’t provide a way to do this.  The reason is that if Git needs\nto overwrite this file, such as during a checkout, it doesn’t know\nwhether the changes to the file are precious and should be kept, or\nwhether they are irrelevant and can safely be destroyed.  Therefore, it\nhas to take the safe route and always preserve them. It’s tempting to try to use certain features of git update-index , namely the\nassume-unchanged and skip-worktree bits, but these don’t work properly for this\npurpose and shouldn’t be used this way. If your goal is to modify a configuration file, it can often be helpful to have\na file checked into the repository which is a template or set of defaults which\ncan then be copied alongside and modified as appropriate.  This second, modified\nfile is usually ignored to prevent accidentally committing it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  I asked Git to ignore various files, yet they are still tracked"}, {"role": "assistant", "content": "A gitignore file ensures that certain file(s) which are not\ntracked by Git remain untracked.  However, sometimes particular\nfile(s) may have been tracked before adding them into the .gitignore , hence they still remain tracked.  To untrack and\nignore files/patterns, use git rm --cached <file/pattern> and add a pattern to .gitignore that matches the <file>.\nSee gitignore for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I know if I want to do a fetch or a pull?"}, {"role": "assistant", "content": "A fetch stores a copy of the latest changes from the remote\nrepository, without modifying the working tree or current branch.\nYou can then at your leisure inspect, merge, rebase on top of, or\nignore the upstream changes.  A pull consists of a fetch followed\nimmediately by either a merge or rebase.  See git-pull ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  What kinds of problems can occur when merging long-lived branches with squash merges?"}, {"role": "assistant", "content": "In general, there are a variety of problems that can occur when using squash\nmerges to merge two branches multiple times.  These can include seeing extra\ncommits in git log output, with a GUI, or when using the ... notation to\nexpress a range, as well as the possibility of needing to re-resolve conflicts\nagain and again. When Git does a normal merge between two branches, it considers exactly three\npoints: the two branches and a third commit, called the merge base , which is\nusually the common ancestor of the commits.  The result of the merge is the sum\nof the changes between the merge base and each head.  When you merge two\nbranches with a regular merge commit, this results in a new commit which will\nend up as a merge base when they’re merged again, because there is now a new\ncommon ancestor.  Git doesn’t have to consider changes that occurred before the\nmerge base, so you don’t have to re-resolve any conflicts you resolved before. When you perform a squash merge, a merge commit isn’t created; instead, the\nchanges from one side are applied as a regular commit to the other side.  This\nmeans that the merge base for these branches won’t have changed, and so when Git\ngoes to perform its next merge, it considers all of the changes that it\nconsidered the last time plus the new changes.  That means any conflicts may\nneed to be re-resolved.  Similarly, anything using the ... notation in git\ndiff , git log , or a GUI will result in showing all of the changes since the\noriginal merge base. As a consequence, if you want to merge two long-lived branches repeatedly, it’s\nbest to always use a regular merge commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  If I make a change on two branches but revert it on one, why does the merge of those branches include the change?"}, {"role": "assistant", "content": "By default, when Git does a merge, it uses a strategy called the ort strategy, which does a fancy three-way merge.  In such a case, when Git\nperforms the merge, it considers exactly three points: the two heads and a\nthird point, called the merge base , which is usually the common ancestor of\nthose commits.  Git does not consider the history or the individual commits\nthat have happened on those branches at all. As a result, if both sides have a change and one side has reverted that change,\nthe result is to include the change.  This is because the code has changed on\none side and there is no net change on the other, and in this scenario, Git\nadopts the change. If this is a problem for you, you can do a rebase instead, rebasing the branch\nwith the revert onto the other branch.  A rebase in this scenario will revert\nthe change, because a rebase applies each individual commit, including the\nrevert.  Note that rebases rewrite history, so you should avoid rebasing\npublished branches unless you’re sure you’re comfortable with that.  See the\nNOTES section in git-rebase for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I use hooks to prevent users from making certain changes?"}, {"role": "assistant", "content": "The only safe place to make these changes is on the remote repository\n(i.e., the Git server), usually in the pre-receive hook or in a\ncontinuous integration (CI) system.  These are the locations in which\npolicy can be enforced effectively. It’s common to try to use pre-commit hooks (or, for commit messages, commit-msg hooks) to check these things, which is great if you’re working as a\nsolo developer and want the tooling to help you.  However, using hooks on a\ndeveloper machine is not effective as a policy control because a user can bypass\nthese hooks with --no-verify without being noticed (among various other ways).\nGit assumes that the user is in control of their local repositories and doesn’t\ntry to prevent this or tattle on the user. In addition, some advanced users find pre-commit hooks to be an impediment to\nworkflows that use temporary commits to stage work in progress or that create\nfixup commits, so it’s better to push these kinds of checks to the server\nanyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  I’m on Windows and my text files are detected as binary."}, {"role": "assistant", "content": "Git works best when you store text files as UTF-8.  Many programs on\nWindows support UTF-8, but some do not and only use the little-endian\nUTF-16 format, which Git detects as binary.  If you can’t use UTF-8 with\nyour programs, you can specify a working tree encoding that indicates\nwhich encoding your files should be checked out with, while still\nstoring these files as UTF-8 in the repository.  This allows tools like git-diff to work as expected, while still allowing your tools\nto work. To do so, you can specify a gitattributes pattern with the working-tree-encoding attribute.  For example, the following pattern sets all\nC files to use UTF-16LE-BOM, which is a common encoding on Windows: *.c\tworking-tree-encoding=UTF-16LE-BOM You will need to run git add --renormalize to have this take effect.  Note\nthat if you are making these changes on a project that is used across platforms,\nyou’ll probably want to make it in a per-user configuration file or in the one\nin $GIT_DIR/info/attributes , since making it in a .gitattributes file in the\nrepository will apply to all users of the repository. See the following entry for information about normalizing line endings as well,\nand see gitattributes for more information about attribute files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  I’m on Windows and git diff shows my files as having a ^M at the end."}, {"role": "assistant", "content": "By default, Git expects files to be stored with Unix line endings.  As such,\nthe carriage return ( ^M ) that is part of a Windows line ending is shown\nbecause it is considered to be trailing whitespace.  Git defaults to showing\ntrailing whitespace only on new lines, not existing ones. You can store the files in the repository with Unix line endings and convert\nthem automatically to your platform’s line endings.  To do that, set the\nconfiguration option core.eol to native and see the following entry for\ninformation about how to configure files as text or binary. You can also control this behavior with the core.whitespace setting if you\ndon’t wish to remove the carriage returns from your line endings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  Why do I have a file that’s always modified?"}, {"role": "assistant", "content": "Internally, Git always stores file names as sequences of bytes and doesn’t\nperform any encoding or case folding.  However, Windows and macOS by default\nboth perform case folding on file names.  As a result, it’s possible to end up\nwith multiple files or directories whose names differ only in case.  Git can\nhandle this just fine, but the file system can store only one of these files,\nso when Git reads the other file to see its contents, it looks modified. It’s best to remove one of the files such that you only have one file.  You can\ndo this with commands like the following (assuming two files AFile.txt and afile.txt ) on an otherwise clean working tree: $ git rm --cached AFile.txt\n$ git commit -m 'Remove files conflicting in case'\n$ git checkout . This avoids touching the disk, but removes the additional file.  Your project\nmay prefer to adopt a naming convention, such as all-lowercase names, to avoid\nthis problem from occurring again; such a convention can be checked using a pre-receive hook or as part of a continuous integration (CI) system. It is also possible for perpetually modified files to occur on any platform if a\nsmudge or clean filter is in use on your system but a file was previously\ncommitted without running the smudge or clean filter.  To fix this, run the\nfollowing on an otherwise clean working tree: $ git add --renormalize ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  What’s the recommended way to store files in Git?"}, {"role": "assistant", "content": "While Git can store and handle any file of any type, there are some\nsettings that work better than others.  In general, we recommend that\ntext files be stored in UTF-8 without a byte-order mark (BOM) with LF\n(Unix-style) endings.  We also recommend the use of UTF-8 (again,\nwithout BOM) in commit messages.  These are the settings that work best\nacross platforms and with tools such as git diff and git merge . Additionally, if you have a choice between storage formats that are text based\nor non-text based, we recommend storing files in the text format and, if\nnecessary, transforming them into the other format.  For example, a text-based\nSQL dump with one record per line will work much better for diffing and merging\nthan an actual database file.  Similarly, text-based formats such as Markdown\nand AsciiDoc will work better than binary formats such as Microsoft Word and\nPDF. Similarly, storing binary dependencies (e.g., shared libraries or JAR files) or\nbuild products in the repository is generally not recommended.  Dependencies and\nbuild products are best stored on an artifact or package server with only\nreferences, URLs, and hashes stored in the repository. We also recommend setting a gitattributes file to explicitly mark\nwhich files are text and which are binary.  If you want Git to guess, you can\nset the attribute text=auto .  For example, the following might be appropriate\nin some projects: # By default, guess.\n*\ttext=auto\n# Mark all C files as text.\n*.c\ttext\n# Mark all JPEG files as binary.\n*.jpg\tbinary These settings help tools pick the right format for output such as patches and\nresult in files being checked out in the appropriate line ending for the\nplatform."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary"}, {"role": "assistant", "content": "NAME gitglossary - A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary"}, {"role": "assistant", "content": "SYNOPSIS *"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  alternate object database"}, {"role": "assistant", "content": "Via the alternates mechanism, a repository can inherit part of its object database from another object database, which is called an \"alternate\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  bare repository"}, {"role": "assistant", "content": "A bare repository is normally an appropriately\nnamed directory with a .git suffix that does not\nhave a locally checked-out copy of any of the files under\nrevision control. That is, all of the Git\nadministrative and control files that would normally be present in the\nhidden .git sub-directory are directly present in the repository.git directory instead,\nand no other files are present and checked out. Usually publishers of\npublic repositories make bare repositories available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  blob object"}, {"role": "assistant", "content": "Untyped object , e.g. the contents of a file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  branch"}, {"role": "assistant", "content": "A \"branch\" is a line of development.  The most recent commit on a branch is referred to as the tip of\nthat branch.  The tip of the branch is referenced by a branch head , which moves forward as additional development\nis done on the branch.  A single Git repository can track an arbitrary number of\nbranches, but your working tree is\nassociated with just one of them (the \"current\" or \"checked out\"\nbranch), and HEAD points to that branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  cache"}, {"role": "assistant", "content": "Obsolete for: index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  chain"}, {"role": "assistant", "content": "A list of objects, where each object in the list contains\na reference to its successor (for example, the successor of a commit could be one of its parents )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  changeset"}, {"role": "assistant", "content": "BitKeeper/cvsps speak for \" commit \". Since Git does not\nstore changes, but states, it really does not make sense to use the term\n\"changesets\" with Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  checkout"}, {"role": "assistant", "content": "The action of updating all or part of the working tree with a tree object or blob from the object database , and updating the index and HEAD if the whole working tree has\nbeen pointed at a new branch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  cherry-picking"}, {"role": "assistant", "content": "In SCM jargon, \"cherry pick\" means to choose a subset of\nchanges out of a series of changes (typically commits) and record them\nas a new series of changes on top of a different codebase. In Git, this is\nperformed by the \"git cherry-pick\" command to extract the change introduced\nby an existing commit and to record it based on the tip\nof the current branch as a new commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  clean"}, {"role": "assistant", "content": "A working tree is clean, if it\ncorresponds to the revision referenced by the current head . Also see \" dirty \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  commit"}, {"role": "assistant", "content": "As a noun: A single point in the\nGit history; the entire history of a project is represented as a\nset of interrelated commits.  The word \"commit\" is often\nused by Git in the same places other revision control systems\nuse the words \"revision\" or \"version\".  Also used as a short\nhand for commit object . As a verb: The action of storing a new snapshot of the project’s\nstate in the Git history, by creating a new commit representing the current\nstate of the index and advancing HEAD to point at the new commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  commit graph concept, representations and usage"}, {"role": "assistant", "content": "A synonym for the DAG structure formed by the commits\nin the object database, referenced by branch tips,\nusing their chain of linked commits.\nThis structure is the definitive commit graph. The\ngraph can be represented in other ways, e.g. the \"commit-graph\" file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  commit-graph file"}, {"role": "assistant", "content": "The \"commit-graph\" (normally hyphenated) file is a supplemental\nrepresentation of the commit graph which accelerates commit graph walks. The \"commit-graph\" file is\nstored either in the .git/objects/info directory or in the info\ndirectory of an alternate object database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  commit object"}, {"role": "assistant", "content": "An object which contains the information about a\nparticular revision , such as parents , committer,\nauthor, date and the tree object which corresponds\nto the top directory of the stored\nrevision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  commit-ish (also committish)"}, {"role": "assistant", "content": "A commit object or an object that\ncan be recursively dereferenced to a commit object.\nThe following are all commit-ishes:\na commit object,\na tag object that points to a commit\nobject,\na tag object that points to a tag object that points to a\ncommit object,\netc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  core Git"}, {"role": "assistant", "content": "Fundamental data structures and utilities of Git. Exposes only limited\nsource code management tools."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  DAG"}, {"role": "assistant", "content": "Directed acyclic graph. The commit objects form a\ndirected acyclic graph, because they have parents (directed), and the\ngraph of commit objects is acyclic (there is no chain which begins and ends with the same object )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  dangling object"}, {"role": "assistant", "content": "An unreachable object which is not reachable even from other unreachable objects; a\ndangling object has no references to it from any\nreference or object in the repository ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  dereference"}, {"role": "assistant", "content": "Referring to a symbolic ref : the action of accessing the reference pointed at by a symbolic ref. Recursive\ndereferencing involves repeating the aforementioned process on the\nresulting ref until a non-symbolic reference is found. Referring to a tag object : the action of accessing the object a tag points at. Tags are recursively dereferenced by\nrepeating the operation on the result object until the result has either a\nspecified object type (where applicable) or any non-\"tag\"\nobject type. A synonym for \"recursive dereference\" in the context of tags is\n\" peel \". Referring to a commit object : the action of accessing\nthe commit’s tree object. Commits cannot be dereferenced recursively. Unless otherwise specified, \"dereferencing\" as it used in the context of Git\ncommands or protocols is implicitly recursive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  detached HEAD"}, {"role": "assistant", "content": "Normally the HEAD stores the name of a branch , and commands that operate on the\nhistory HEAD represents operate on the history leading to the\ntip of the branch the HEAD points at.  However, Git also\nallows you to check out an arbitrary commit that isn’t necessarily the tip of any\nparticular branch.  The HEAD in such a state is called\n\"detached\". Note that commands that operate on the history of the current branch\n(e.g. git commit to build a new history on top of it) still work\nwhile the HEAD is detached. They update the HEAD to point at the tip\nof the updated history without affecting any branch.  Commands that\nupdate or inquire information about the current branch (e.g. git\nbranch --set-upstream-to that sets what remote-tracking branch the\ncurrent branch integrates with) obviously do not work, as there is no\n(real) current branch to ask about in this state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  directory"}, {"role": "assistant", "content": "The list you get with \"ls\" :-)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  dirty"}, {"role": "assistant", "content": "A working tree is said to be \"dirty\" if\nit contains modifications which have not been committed to the current branch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  evil merge"}, {"role": "assistant", "content": "An evil merge is a merge that introduces changes that\ndo not appear in any parent ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  fast-forward"}, {"role": "assistant", "content": "A fast-forward is a special type of merge where you have a revision and you are \"merging\" another branch 's changes that happen to be a descendant of what\nyou have. In such a case, you do not make a new merge commit but instead just update your branch to point at the same\nrevision as the branch you are merging. This will happen frequently on a remote-tracking branch of a remote repository ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  fetch"}, {"role": "assistant", "content": "Fetching a branch means to get the\nbranch’s head ref from a remote repository , to find out which objects are\nmissing from the local object database ,\nand to get them, too.  See also git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  file system"}, {"role": "assistant", "content": "Linus Torvalds originally designed Git to be a user space file system,\ni.e. the infrastructure to hold files and directories. That ensured the\nefficiency and speed of Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  Git archive"}, {"role": "assistant", "content": "Synonym for repository (for arch people)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  gitfile"}, {"role": "assistant", "content": "A plain file .git at the root of a working tree that\npoints at the directory that is the real repository.\nFor proper use see git-worktree or git-submodule .\nFor syntax see gitrepository-layout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  grafts"}, {"role": "assistant", "content": "Grafts enable two otherwise different lines of development to be joined\ntogether by recording fake ancestry information for commits. This way\nyou can make Git pretend the set of parents a commit has\nis different from what was recorded when the commit was\ncreated. Configured via the .git/info/grafts file. Note that the grafts mechanism is outdated and can lead to problems\ntransferring objects between repositories; see git-replace for a more flexible and robust system to do the same thing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  hash"}, {"role": "assistant", "content": "In Git’s context, synonym for object name ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  head"}, {"role": "assistant", "content": "A named reference to the commit at the tip of a branch .  Heads are stored in a file in $GIT_DIR/refs/heads/ directory, except when using packed refs. (See git-pack-refs .)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  HEAD"}, {"role": "assistant", "content": "The current branch .  In more detail: Your working tree is normally derived from the state of the tree\nreferred to by HEAD.  HEAD is a reference to one of the heads in your repository, except when using a detached HEAD , in which case it directly\nreferences an arbitrary commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  head ref"}, {"role": "assistant", "content": "A synonym for head ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  hook"}, {"role": "assistant", "content": "During the normal execution of several Git commands, call-outs are made\nto optional scripts that allow a developer to add functionality or\nchecking. Typically, the hooks allow for a command to be pre-verified\nand potentially aborted, and allow for a post-notification after the\noperation is done. The hook scripts are found in the $GIT_DIR/hooks/ directory, and are enabled by simply\nremoving the .sample suffix from the filename. In earlier versions\nof Git you had to make them executable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  index"}, {"role": "assistant", "content": "A collection of files with stat information, whose contents are stored\nas objects. The index is a stored version of your working tree . Truth be told, it can also contain a second, and even\na third version of a working tree, which are used\nwhen merging ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  index entry"}, {"role": "assistant", "content": "The information regarding a particular file, stored in the index . An index entry can be unmerged, if a merge was started, but not yet finished (i.e. if\nthe index contains multiple versions of that file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  master"}, {"role": "assistant", "content": "The default development branch . Whenever you\ncreate a Git repository , a branch named\n\"master\" is created, and becomes the active branch. In most\ncases, this contains the local development, though that is\npurely by convention and is not required."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  merge"}, {"role": "assistant", "content": "As a verb: To bring the contents of another branch (possibly from an external repository ) into the current branch.  In the\ncase where the merged-in branch is from a different repository,\nthis is done by first fetching the remote branch\nand then merging the result into the current branch.  This\ncombination of fetch and merge operations is called a pull .  Merging is performed by an automatic process\nthat identifies changes made since the branches diverged, and\nthen applies all those changes together.  In cases where changes\nconflict, manual intervention may be required to complete the\nmerge. As a noun: unless it is a fast-forward , a\nsuccessful merge results in the creation of a new commit representing the result of the merge, and having as parents the tips of the merged branches .\nThis commit is referred to as a \"merge commit\", or sometimes just a\n\"merge\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object"}, {"role": "assistant", "content": "The unit of storage in Git. It is uniquely identified by the SHA-1 of its contents. Consequently, an\nobject cannot be changed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object database"}, {"role": "assistant", "content": "Stores a set of \"objects\", and an individual object is\nidentified by its object name . The objects usually\nlive in $GIT_DIR/objects/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object identifier (oid)"}, {"role": "assistant", "content": "Synonym for object name ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object name"}, {"role": "assistant", "content": "The unique identifier of an object .  The\nobject name is usually represented by a 40 character\nhexadecimal string.  Also colloquially called SHA-1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  object type"}, {"role": "assistant", "content": "One of the identifiers \" commit \",\n\" tree \", \" tag \" or\n\" blob \" describing the type of an object ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  octopus"}, {"role": "assistant", "content": "To merge more than two branches ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  orphan"}, {"role": "assistant", "content": "The act of getting on a branch that does not\nexist yet (i.e., an unborn branch).  After\nsuch an operation, the commit first created becomes a commit\nwithout a parent, starting a new history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  origin"}, {"role": "assistant", "content": "The default upstream repository . Most projects have\nat least one upstream project which they track. By default origin is used for that purpose. New upstream updates\nwill be fetched into remote-tracking branches named\norigin/name-of-upstream-branch, which you can see using git branch -r ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  overlay"}, {"role": "assistant", "content": "Only update and add files to the working directory, but don’t\ndelete them, similar to how cp -R would update the contents\nin the destination directory.  This is the default mode in a checkout when checking out files from the index or a tree-ish .  In\ncontrast, no-overlay mode also deletes tracked files not\npresent in the source, similar to rsync --delete ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pack"}, {"role": "assistant", "content": "A set of objects which have been compressed into one file (to save space\nor to transmit them efficiently)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pack index"}, {"role": "assistant", "content": "The list of identifiers, and other information, of the objects in a pack , to assist in efficiently accessing the contents of a\npack."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pathspec"}, {"role": "assistant", "content": "Pattern used to limit paths in Git commands. Pathspecs are used on the command line of \"git ls-files\", \"git\nls-tree\", \"git add\", \"git grep\", \"git diff\", \"git checkout\",\nand many other commands to\nlimit the scope of operations to some subset of the tree or\nworking tree.  See the documentation of each command for whether\npaths are relative to the current directory or toplevel.  The\npathspec syntax is as follows: any path matches itself the pathspec up to the last slash represents a\ndirectory prefix.  The scope of that pathspec is\nlimited to that subtree. the rest of the pathspec is a pattern for the remainder\nof the pathname.  Paths relative to the directory\nprefix will be matched against that pattern using fnmatch(3);\nin particular, * and ? can match directory separators. For example, Documentation/*.jpg will match all .jpg files\nin the Documentation subtree,\nincluding Documentation/chapter_1/figure_1.jpg. A pathspec that begins with a colon : has special meaning.  In the\nshort form, the leading colon : is followed by zero or more \"magic\nsignature\" letters (which optionally is terminated by another colon : ),\nand the remainder is the pattern to match against the path.\nThe \"magic signature\" consists of ASCII symbols that are neither\nalphanumeric, glob, regex special characters nor colon.\nThe optional colon that terminates the \"magic signature\" can be\nomitted if the pattern begins with a character that does not belong to\n\"magic signature\" symbol set and is not a colon. In the long form, the leading colon : is followed by an open\nparenthesis ( , a comma-separated list of zero or more \"magic words\",\nand a close parentheses ) , and the remainder is the pattern to match\nagainst the path. A pathspec with only a colon means \"there is no pathspec\". This form\nshould not be combined with other pathspec. top The magic word top (magic signature: / ) makes the pattern\nmatch from the root of the working tree, even when you are\nrunning the command from inside a subdirectory. literal Wildcards in the pattern such as * or ? are treated\nas literal characters. icase Case insensitive match. glob Git treats the pattern as a shell glob suitable for\nconsumption by fnmatch(3) with the FNM_PATHNAME flag:\nwildcards in the pattern will not match a / in the pathname.\nFor example, \"Documentation/*.html\" matches\n\"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\"\nor \"tools/perf/Documentation/perf.html\". Two consecutive asterisks (\" ** \") in patterns matched against\nfull pathname may have special meaning: A leading \" ** \" followed by a slash means match in all\ndirectories. For example, \" **/foo \" matches file or directory\n\" foo \" anywhere, the same as pattern \" foo \". \" **/foo/bar \"\nmatches file or directory \" bar \" anywhere that is directly\nunder directory \" foo \". A trailing \" /** \" matches everything inside. For example,\n\" abc/** \" matches all files inside directory \"abc\", relative\nto the location of the .gitignore file, with infinite depth. A slash followed by two consecutive asterisks then a slash\nmatches zero or more directories. For example, \" a/**/b \"\nmatches \" a/b \", \" a/x/b \", \" a/x/y/b \" and so on. Other consecutive asterisks are considered invalid. Glob magic is incompatible with literal magic. attr After attr: comes a space separated list of \"attribute\nrequirements\", all of which must be met in order for the\npath to be considered a match; this is in addition to the\nusual non-magic pathspec pattern matching.\nSee gitattributes . Each of the attribute requirements for the path takes one of\nthese forms: \" ATTR \" requires that the attribute ATTR be set. \" -ATTR \" requires that the attribute ATTR be unset. \" ATTR=VALUE \" requires that the attribute ATTR be\nset to the string VALUE . \" !ATTR \" requires that the attribute ATTR be\nunspecified. Note that when matching against a tree object, attributes are still\nobtained from working tree, not from the given tree object. exclude After a path matches any non-exclude pathspec, it will be run\nthrough all exclude pathspecs (magic signature: ! or its\nsynonym ^ ). If it matches, the path is ignored.  When there\nis no non-exclude pathspec, the exclusion is applied to the\nresult set as if invoked without any pathspec."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  parent"}, {"role": "assistant", "content": "A commit object contains a (possibly empty) list\nof the logical predecessor(s) in the line of development, i.e. its\nparents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  peel"}, {"role": "assistant", "content": "The action of recursively dereferencing a tag object ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pickaxe"}, {"role": "assistant", "content": "The term pickaxe refers to an option to the diffcore\nroutines that help select changes that add or delete a given text\nstring. With the --pickaxe-all option, it can be used to view the full changeset that introduced or removed, say, a\nparticular line of text. See git-diff ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  plumbing"}, {"role": "assistant", "content": "Cute name for core Git ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  porcelain"}, {"role": "assistant", "content": "Cute name for programs and program suites depending on core Git , presenting a high level access to\ncore Git. Porcelains expose more of a SCM interface than the plumbing ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  per-worktree ref"}, {"role": "assistant", "content": "Refs that are per- worktree , rather than\nglobal.  This is presently only HEAD and any refs\nthat start with refs/bisect/ , but might later include other\nunusual refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pseudoref"}, {"role": "assistant", "content": "Pseudorefs are a class of files under $GIT_DIR which behave\nlike refs for the purposes of rev-parse, but which are treated\nspecially by git.  Pseudorefs both have names that are all-caps,\nand always start with a line consisting of a SHA-1 followed by whitespace.  So, HEAD is not a\npseudoref, because it is sometimes a symbolic ref.  They might\noptionally contain some additional data. MERGE_HEAD and CHERRY_PICK_HEAD are examples.  Unlike per-worktree refs , these files cannot\nbe symbolic refs, and never have reflogs.  They also cannot be\nupdated through the normal ref update machinery.  Instead,\nthey are updated by directly writing to the files.  However,\nthey can be read as if they were refs, so git rev-parse\nMERGE_HEAD will work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  pull"}, {"role": "assistant", "content": "Pulling a branch means to fetch it and merge it.  See also git-pull ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  push"}, {"role": "assistant", "content": "Pushing a branch means to get the branch’s head ref from a remote repository ,\nfind out if it is an ancestor to the branch’s local\nhead ref, and in that case, putting all\nobjects, which are reachable from the local\nhead ref, and which are missing from the remote\nrepository, into the remote object database , and updating the remote\nhead ref. If the remote head is not an\nancestor to the local head, the push fails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  reachable"}, {"role": "assistant", "content": "All of the ancestors of a given commit are said to be\n\"reachable\" from that commit. More\ngenerally, one object is reachable from\nanother if we can reach the one from the other by a chain that follows tags to whatever they tag, commits to their parents or trees, and trees to the trees or blobs that they contain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  reachability bitmaps"}, {"role": "assistant", "content": "Reachability bitmaps store information about the reachability of a selected set of commits in\na packfile, or a multi-pack index (MIDX), to speed up object search.\nThe bitmaps are stored in a \".bitmap\" file. A repository may have at\nmost one bitmap file in use. The bitmap file may belong to either one\npack, or the repository’s multi-pack index (if it exists)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  rebase"}, {"role": "assistant", "content": "To reapply a series of changes from a branch to a\ndifferent base, and reset the head of that branch\nto the result."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  ref"}, {"role": "assistant", "content": "A name that begins with refs/ (e.g. refs/heads/master )\nthat points to an object name or another\nref (the latter is called a symbolic ref ).\nFor convenience, a ref can sometimes be abbreviated when used\nas an argument to a Git command; see gitrevisions for details.\nRefs are stored in the repository . The ref namespace is hierarchical.\nDifferent subhierarchies are used for different purposes (e.g. the refs/heads/ hierarchy is used to represent local branches). There are a few special-purpose refs that do not begin with refs/ .\nThe most notable example is HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  reflog"}, {"role": "assistant", "content": "A reflog shows the local \"history\" of a ref.  In other words,\nit can tell you what the 3rd last revision in this repository\nwas, and what was the current state in this repository,\nyesterday 9:14pm.  See git-reflog for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  refspec"}, {"role": "assistant", "content": "A \"refspec\" is used by fetch and push to describe the mapping between remote ref and local ref."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  remote repository"}, {"role": "assistant", "content": "A repository which is used to track the same\nproject but resides somewhere else. To communicate with remotes,\nsee fetch or push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  remote-tracking branch"}, {"role": "assistant", "content": "A ref that is used to follow changes from another repository . It typically looks like refs/remotes/foo/bar (indicating that it tracks a branch named bar in a remote named foo ), and matches the right-hand-side of\na configured fetch refspec . A remote-tracking\nbranch should not contain direct modifications or have local\ncommits made to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  repository"}, {"role": "assistant", "content": "A collection of refs together with an object database containing all objects\nwhich are reachable from the refs, possibly\naccompanied by meta data from one or more porcelains . A\nrepository can share an object database with other repositories\nvia alternates mechanism ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  resolve"}, {"role": "assistant", "content": "The action of fixing up manually what a failed automatic merge left behind."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  revision"}, {"role": "assistant", "content": "Synonym for commit (the noun)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  rewind"}, {"role": "assistant", "content": "To throw away part of the development, i.e. to assign the head to an earlier revision ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  SCM"}, {"role": "assistant", "content": "Source code management (tool)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  SHA-1"}, {"role": "assistant", "content": "\"Secure Hash Algorithm 1\"; a cryptographic hash function.\nIn the context of Git used as a synonym for object name ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  shallow clone"}, {"role": "assistant", "content": "Mostly a synonym to shallow repository but the phrase makes it more explicit that it was created by\nrunning git clone --depth=... command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  shallow repository"}, {"role": "assistant", "content": "A shallow repository has an incomplete\nhistory some of whose commits have parents cauterized away (in other\nwords, Git is told to pretend that these commits do not have the\nparents, even though they are recorded in the commit\nobject ). This is sometimes useful when you are interested only in the\nrecent history of a project even though the real history recorded in the\nupstream is much larger. A shallow repository\nis created by giving the --depth option to git-clone , and\nits history can be later deepened with git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  stash entry"}, {"role": "assistant", "content": "An object used to temporarily store the contents of a dirty working directory and the index for future reuse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  special ref"}, {"role": "assistant", "content": "A ref that has different semantics than normal refs. These refs can be\naccessed via normal Git commands but may not behave the same as a\nnormal ref in some cases. The following special refs are known to Git: \" FETCH_HEAD \" is written by git-fetch or git-pull . It\nmay refer to multiple object IDs. Each object ID is annotated with metadata\nindicating where it was fetched from and its fetch status. \" MERGE_HEAD \" is written by git-merge when resolving merge\nconflicts. It contains all commit IDs which are being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  submodule"}, {"role": "assistant", "content": "A repository that holds the history of a\nseparate project inside another repository (the latter of\nwhich is called superproject )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  superproject"}, {"role": "assistant", "content": "A repository that references repositories\nof other projects in its working tree as submodules .\nThe superproject knows about the names of (but does not hold\ncopies of) commit objects of the contained submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  symref"}, {"role": "assistant", "content": "Symbolic reference: instead of containing the SHA-1 id\nitself, it is of the format ref: refs/some/thing and when referenced,\nit recursively dereferences to this reference. HEAD is a prime example of a symref. Symbolic references\nare manipulated with the git-symbolic-ref command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  tag"}, {"role": "assistant", "content": "A ref under refs/tags/ namespace that points to an\nobject of an arbitrary type (typically a tag points to either a tag or a commit object ).\nIn contrast to a head , a tag is not updated by\nthe commit command. A Git tag has nothing to do with a Lisp\ntag (which would be called an object type in Git’s context). A tag is most typically used to mark a particular\npoint in the commit ancestry chain ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  tag object"}, {"role": "assistant", "content": "An object containing a ref pointing to\nanother object, which can contain a message just like a commit object . It can also contain a (PGP)\nsignature, in which case it is called a \"signed tag object\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  topic branch"}, {"role": "assistant", "content": "A regular Git branch that is used by a developer to\nidentify a conceptual line of development. Since branches are very easy\nand inexpensive, it is often desirable to have several small branches\nthat each contain very well defined concepts or small incremental yet\nrelated changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  tree"}, {"role": "assistant", "content": "Either a working tree , or a tree\nobject together with the dependent blob and tree objects\n(i.e. a stored representation of a working tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  tree object"}, {"role": "assistant", "content": "An object containing a list of file names and modes along\nwith refs to the associated blob and/or tree objects. A tree is equivalent to a directory ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  tree-ish (also treeish)"}, {"role": "assistant", "content": "A tree object or an object that can\nbe recursively dereferenced to a tree object.\nDereferencing a commit object yields the tree\nobject corresponding to the revision 's top directory .\nThe following are all tree-ishes:\na commit-ish ,\na tree object,\na tag object that points to a tree object,\na tag object that points to a tag object that points to a tree\nobject,\netc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  unborn"}, {"role": "assistant", "content": "The HEAD can point at a branch that does not yet exist and that does not have any commit on\nit yet, and such a branch is called an unborn branch.  The\nmost typical way users encounter an unborn branch is by\ncreating a repository anew without cloning from elsewhere.\nThe HEAD would point at the main (or master , depending\non your configuration) branch that is yet to be born.  Also\nsome operations can get you on an unborn branch with their orphan option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  unmerged index"}, {"role": "assistant", "content": "An index which contains unmerged index entries ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  unreachable object"}, {"role": "assistant", "content": "An object which is not reachable from a branch , tag , or any other reference."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  upstream branch"}, {"role": "assistant", "content": "The default branch that is merged into the branch in\nquestion (or the branch in question is rebased onto). It is configured\nvia branch.<name>.remote and branch.<name>.merge. If the upstream branch\nof A is origin/B sometimes we say \" A is tracking origin/B \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  working tree"}, {"role": "assistant", "content": "The tree of actual checked out files.  The working tree normally\ncontains the contents of the HEAD commit’s tree,\nplus any local changes that you have made but not yet committed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  worktree"}, {"role": "assistant", "content": "A repository can have zero (i.e. bare repository) or one or\nmore worktrees attached to it. One \"worktree\" consists of a\n\"working tree\" and repository metadata, most of which are\nshared among other worktrees of a single repository, and\nsome of which are maintained separately per worktree\n(e.g. the index, HEAD and pseudorefs like MERGE_HEAD,\nper-worktree refs and per-worktree configuration file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  top"}, {"role": "assistant", "content": "The magic word top (magic signature: / ) makes the pattern\nmatch from the root of the working tree, even when you are\nrunning the command from inside a subdirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  literal"}, {"role": "assistant", "content": "Wildcards in the pattern such as * or ? are treated\nas literal characters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  icase"}, {"role": "assistant", "content": "Case insensitive match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  glob"}, {"role": "assistant", "content": "Git treats the pattern as a shell glob suitable for\nconsumption by fnmatch(3) with the FNM_PATHNAME flag:\nwildcards in the pattern will not match a / in the pathname.\nFor example, \"Documentation/*.html\" matches\n\"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\"\nor \"tools/perf/Documentation/perf.html\". Two consecutive asterisks (\" ** \") in patterns matched against\nfull pathname may have special meaning: A leading \" ** \" followed by a slash means match in all\ndirectories. For example, \" **/foo \" matches file or directory\n\" foo \" anywhere, the same as pattern \" foo \". \" **/foo/bar \"\nmatches file or directory \" bar \" anywhere that is directly\nunder directory \" foo \". A trailing \" /** \" matches everything inside. For example,\n\" abc/** \" matches all files inside directory \"abc\", relative\nto the location of the .gitignore file, with infinite depth. A slash followed by two consecutive asterisks then a slash\nmatches zero or more directories. For example, \" a/**/b \"\nmatches \" a/b \", \" a/x/b \", \" a/x/y/b \" and so on. Other consecutive asterisks are considered invalid. Glob magic is incompatible with literal magic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  attr"}, {"role": "assistant", "content": "After attr: comes a space separated list of \"attribute\nrequirements\", all of which must be met in order for the\npath to be considered a match; this is in addition to the\nusual non-magic pathspec pattern matching.\nSee gitattributes . Each of the attribute requirements for the path takes one of\nthese forms: \" ATTR \" requires that the attribute ATTR be set. \" -ATTR \" requires that the attribute ATTR be unset. \" ATTR=VALUE \" requires that the attribute ATTR be\nset to the string VALUE . \" !ATTR \" requires that the attribute ATTR be\nunspecified. Note that when matching against a tree object, attributes are still\nobtained from working tree, not from the given tree object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  exclude"}, {"role": "assistant", "content": "After a path matches any non-exclude pathspec, it will be run\nthrough all exclude pathspecs (magic signature: ! or its\nsynonym ^ ). If it matches, the path is ignored.  When there\nis no non-exclude pathspec, the exclusion is applied to the\nresult set as if invoked without any pathspec."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git"}, {"role": "assistant", "content": "NAME githooks - Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git"}, {"role": "assistant", "content": "SYNOPSIS $GIT_DIR/hooks/* (or `git config core.hooksPath`/*)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git"}, {"role": "assistant", "content": "DESCRIPTION Hooks are programs you can place in a hooks directory to trigger\nactions at certain points in git’s execution. Hooks that don’t have\nthe executable bit set are ignored. By default the hooks directory is $GIT_DIR/hooks , but that can be\nchanged via the core.hooksPath configuration variable (see git-config ). Before Git invokes a hook, it changes its working directory to either\n$GIT_DIR in a bare repository or the root of the working tree in a non-bare\nrepository. An exception are hooks triggered during a push ( pre-receive , update , post-receive , post-update , push-to-checkout ) which are always\nexecuted in $GIT_DIR. Environment variables, such as GIT_DIR , GIT_WORK_TREE , etc., are exported\nso that Git commands run by the hook can correctly locate the repository.  If\nyour hook needs to invoke Git commands in a foreign repository or in a\ndifferent working tree of the same repository, then it should clear these\nenvironment variables so they do not interfere with Git operations at the\nforeign location.  For example: local_desc=$(git describe)\nforeign_desc=$(unset $(git rev-parse --local-env-vars); git -C ../foreign-repo describe) Hooks can get their arguments via the environment, command-line\narguments, and stdin. See the documentation for each hook below for\ndetails. git init may copy hooks to the new repository, depending on its\nconfiguration. See the \"TEMPLATE DIRECTORY\" section in git-init for details. When the rest of this document refers\nto \"default hooks\" it’s talking about the default template shipped\nwith Git. The currently supported hooks are described below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git  rebase"}, {"role": "assistant", "content": "For the squash and fixup operation, all commits that were\nsquashed are listed as being rewritten to the squashed commit.\nThis means that there will be several lines sharing the same new-object-name . The commits are guaranteed to be listed in the order that they were\nprocessed by rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git  GIT_SENDEMAIL_FILE_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every file holding an e-mail\nto be sent (excluding any FIFOs). This counter does not follow the\npatch series counter scheme. It will always start at 1 and will end at\nGIT_SENDEMAIL_FILE_TOTAL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git  GIT_SENDEMAIL_FILE_TOTAL"}, {"role": "assistant", "content": "The total number of files that will be sent (excluding any FIFOs). This\ncounter does not follow the patch series counter scheme. It will always\nbe equal to the number of files being sent, whether there is a cover\nletter or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "NAME gitignore - Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "SYNOPSIS $XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "DESCRIPTION A gitignore file specifies intentionally untracked files that\nGit should ignore.\nFiles already tracked by Git are not affected; see the NOTES\nbelow for details. Each line in a gitignore file specifies a pattern.\nWhen deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following\norder of precedence, from highest to lowest (within one level of\nprecedence, the last matching pattern decides the outcome): Patterns read from the command line for those commands that support\nthem. Patterns read from a .gitignore file in the same directory\nas the path, or in any parent directory (up to the top-level of the working\ntree), with patterns in the higher level files being overridden by those in\nlower level files down to the directory containing the file. These patterns\nmatch relative to the location of the .gitignore file.  A project normally\nincludes such .gitignore files in its repository, containing patterns for\nfiles generated as part of the project build. Patterns read from $GIT_DIR/info/exclude . Patterns read from the file specified by the configuration\nvariable core.excludesFile . Which file to place a pattern in depends on how the pattern is meant to\nbe used. Patterns which should be version-controlled and distributed to\nother repositories via clone (i.e., files that all developers will want\nto ignore) should go into a .gitignore file. Patterns which are\nspecific to a particular repository but which do not need to be shared\nwith other related repositories (e.g., auxiliary files that live inside\nthe repository but are specific to one user’s workflow) should go into\nthe $GIT_DIR/info/exclude file. Patterns which a user wants Git to\nignore in all situations (e.g., backup or temporary files generated by\nthe user’s editor of choice) generally go into a file specified by core.excludesFile in the user’s ~/.gitconfig . Its default value is\n$XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or\nempty, $HOME/.config/git/ignore is used instead. The underlying Git plumbing tools, such as git ls-files and git read-tree , read gitignore patterns specified by command-line options, or from\nfiles specified by command-line options.  Higher-level Git\ntools, such as git status and git add ,\nuse patterns from the sources specified above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "PATTERN FORMAT A blank line matches no files, so it can serve as a separator\nfor readability. A line starting with # serves as a comment.\nPut a backslash (\" \\ \") in front of the first hash for patterns\nthat begin with a hash. Trailing spaces are ignored unless they are quoted with backslash\n(\" \\ \"). An optional prefix \" ! \" which negates the pattern; any\nmatching file excluded by a previous pattern will become\nincluded again. It is not possible to re-include a file if a parent\ndirectory of that file is excluded. Git doesn’t list excluded\ndirectories for performance reasons, so any patterns on contained\nfiles have no effect, no matter where they are defined.\nPut a backslash (\" \\ \") in front of the first \" ! \" for patterns\nthat begin with a literal \" ! \", for example, \" \\!important!.txt \". The slash \" / \" is used as the directory separator. Separators may\noccur at the beginning, middle or end of the .gitignore search pattern. If there is a separator at the beginning or middle (or both) of the\npattern, then the pattern is relative to the directory level of the\nparticular .gitignore file itself. Otherwise the pattern may also\nmatch at any level below the .gitignore level. If there is a separator at the end of the pattern then the pattern\nwill only match directories, otherwise the pattern can match both\nfiles and directories. For example, a pattern doc/frotz/ matches doc/frotz directory,\nbut not a/doc/frotz directory; however frotz/ matches frotz and a/frotz that is a directory (all paths are relative from\nthe .gitignore file). An asterisk \" * \" matches anything except a slash.\nThe character \" ? \" matches any one character except \" / \".\nThe range notation, e.g. [a-zA-Z] , can be used to match\none of the characters in a range. See fnmatch(3) and the\nFNM_PATHNAME flag for a more detailed description. Two consecutive asterisks (\" ** \") in patterns matched against\nfull pathname may have special meaning: A leading \" ** \" followed by a slash means match in all\ndirectories. For example, \" **/foo \" matches file or directory\n\" foo \" anywhere, the same as pattern \" foo \". \" **/foo/bar \"\nmatches file or directory \" bar \" anywhere that is directly\nunder directory \" foo \". A trailing \" /** \" matches everything inside. For example,\n\" abc/** \" matches all files inside directory \" abc \", relative\nto the location of the .gitignore file, with infinite depth. A slash followed by two consecutive asterisks then a slash\nmatches zero or more directories. For example, \" a/**/b \"\nmatches \" a/b \", \" a/x/b \", \" a/x/y/b \" and so on. Other consecutive asterisks are considered regular asterisks and\nwill match according to the previous rules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "CONFIGURATION The optional configuration variable core.excludesFile indicates a path to a\nfile containing patterns of file names to exclude, similar to $GIT_DIR/info/exclude .  Patterns in the exclude file are used in addition to\nthose in $GIT_DIR/info/exclude ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "NOTES The purpose of gitignore files is to ensure that certain files\nnot tracked by Git remain untracked. To stop tracking a file that is currently tracked, use git rm --cached to remove the file from the index. The filename\ncan then be added to the .gitignore file to stop the file from\nbeing reintroduced in later commits. Git does not follow symbolic links when accessing a .gitignore file in\nthe working tree. This keeps behavior consistent when the file is\naccessed from the index or a tree versus from the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore - Specifies intentionally untracked files to ignore"}, {"role": "assistant", "content": "EXAMPLES The pattern hello.* matches any file or directory\nwhose name begins with hello. . If one wants to restrict\nthis only to the directory and not in its subdirectories,\none can prepend the pattern with a slash, i.e. /hello.* ;\nthe pattern now matches hello.txt , hello.c but not a/hello.java . The pattern foo/ will match a directory foo and\npaths underneath it, but will not match a regular file\nor a symbolic link foo (this is consistent with the\nway how pathspec works in general in Git) The pattern doc/frotz and /doc/frotz have the same effect\nin any .gitignore file. In other words, a leading slash\nis not relevant  if there is already a middle slash in\nthe pattern. The pattern foo/* , matches foo/test.json (a regular file), foo/bar (a directory), but it does not match foo/bar/hello.c (a regular file), as the asterisk in the\npattern does not match bar/hello.c which has a slash in it. $ git status\n    [...]\n    # Untracked files:\n    [...]\n    #       Documentation/foo.html\n    #       Documentation/gitignore.html\n    #       file.o\n    #       lib.a\n    #       src/internal.o\n    [...]\n    $ cat .git/info/exclude\n    # ignore objects and archives, anywhere in the tree.\n    *.[oa]\n    $ cat Documentation/.gitignore\n    # ignore generated html files,\n    *.html\n    # except foo.html which is maintained by hand\n    !foo.html\n    $ git status\n    [...]\n    # Untracked files:\n    [...]\n    #       Documentation/foo.html\n    [...] Another example: $ cat .gitignore\n    vmlinux*\n    $ ls arch/foo/kernel/vm*\n    arch/foo/kernel/vmlinux.lds.S\n    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore The second .gitignore prevents Git from ignoring arch/foo/kernel/vmlinux.lds.S . Example to exclude everything except a specific directory foo/bar (note the /* - without the slash, the wildcard would also exclude\neverything within foo/bar ): $ cat .gitignore\n    # exclude everything except directory foo/bar\n    /*\n    !/foo\n    /foo/*\n    !/foo/bar"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties"}, {"role": "assistant", "content": "NAME gitmodules - Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties"}, {"role": "assistant", "content": "SYNOPSIS $GIT_WORK_TREE/.gitmodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.path"}, {"role": "assistant", "content": "Defines the path, relative to the top-level directory of the Git\nworking tree, where the submodule is expected to be checked out.\nThe path name must not end with a / . All submodule paths must\nbe unique within the .gitmodules file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.url"}, {"role": "assistant", "content": "Defines a URL from which the submodule repository can be cloned.\nThis may be either an absolute URL ready to be passed to git-clone or (if it begins with ./ or ../ ) a location\nrelative to the superproject’s origin repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.update"}, {"role": "assistant", "content": "Defines the default update procedure for the named submodule,\ni.e. how the submodule is updated by the git submodule update command in the superproject. This is only used by git\nsubmodule init to initialize the configuration variable of\nthe same name. Allowed values here are checkout , rebase , merge or none , but not !command (for security reasons).\nSee the description of the update command in git-submodule for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.branch"}, {"role": "assistant", "content": "A remote branch name for tracking updates in the upstream submodule.\nIf the option is not specified, it defaults to the remote HEAD .\nA special value of . is used to indicate that the name of the branch\nin the submodule should be the same name as the current branch in the\ncurrent repository.  See the --remote documentation in git-submodule for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.fetchRecurseSubmodules"}, {"role": "assistant", "content": "This option can be used to control recursive fetching of this\nsubmodule. If this option is also present in the submodule’s entry in .git/config of the superproject, the setting there will override the\none found in .gitmodules .\nBoth settings can be overridden on the command line by using the --[no-]recurse-submodules option to git fetch and git pull ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.ignore"}, {"role": "assistant", "content": "Defines under what circumstances git status and the diff family show\na submodule as modified. The following values are supported: all The submodule will never be considered modified (but will\nnonetheless show up in the output of status and commit when it has\nbeen staged). dirty All changes to the submodule’s work tree will be ignored, only\ncommitted differences between the HEAD of the submodule and its\nrecorded state in the superproject are taken into account. untracked Only untracked files in submodules will be ignored.\nCommitted differences and modifications to tracked files will show\nup. none No modifications to submodules are ignored, all of committed\ndifferences, and modifications to tracked and untracked files are\nshown. This is the default option. If this option is also present in the submodule’s entry in .git/config of the superproject, the setting there will override the one found in .gitmodules . Both settings can be overridden on the command line by using the --ignore-submodules option. The git submodule commands are not\naffected by this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  submodule.<name>.shallow"}, {"role": "assistant", "content": "When set to true, a clone of this submodule will be performed as a\nshallow clone (with a history depth of 1) unless the user explicitly\nasks for a non-shallow clone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  all"}, {"role": "assistant", "content": "The submodule will never be considered modified (but will\nnonetheless show up in the output of status and commit when it has\nbeen staged)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  dirty"}, {"role": "assistant", "content": "All changes to the submodule’s work tree will be ignored, only\ncommitted differences between the HEAD of the submodule and its\nrecorded state in the superproject are taken into account."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  untracked"}, {"role": "assistant", "content": "Only untracked files in submodules will be ignored.\nCommitted differences and modifications to tracked files will show\nup."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties  none"}, {"role": "assistant", "content": "No modifications to submodules are ignored, all of committed\ndifferences, and modifications to tracked and untracked files are\nshown. This is the default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties"}, {"role": "assistant", "content": "NOTES Git does not allow the .gitmodules file within a working tree to be a\nsymbolic link, and will refuse to check out such a tree entry. This\nkeeps behavior consistent when the file is accessed from the index or a\ntree versus from the filesystem, and helps Git reliably enforce security\nchecks of the file contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties"}, {"role": "assistant", "content": "EXAMPLES Consider the following .gitmodules file: [submodule \"libfoo\"]\n\tpath = include/foo\n\turl = git://foo.com/git/lib.git\n\n[submodule \"libbar\"]\n\tpath = include/bar\n\turl = git://bar.com/git/lib.git This defines two submodules, libfoo and libbar . These are expected to\nbe checked out in the paths include/foo and include/bar , and for both\nsubmodules a URL is specified which can be used for cloning the submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git"}, {"role": "assistant", "content": "NAME gitrevisions - Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git"}, {"role": "assistant", "content": "SYNOPSIS gitrevisions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git"}, {"role": "assistant", "content": "DESCRIPTION Many Git commands take revision parameters as arguments. Depending on\nthe command, they denote a specific commit or, for commands which\nwalk the revision graph (such as git-log ), all commits which are\nreachable from that commit. For commands that walk the revision graph one can\nalso specify a range of revisions explicitly. In addition, some Git commands (such as git-show and git-push ) can also take revision parameters which denote\nother objects than commits, e.g. blobs (\"files\") or trees\n(\"directories of files\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <sha1> , e.g. dae86e1950b1277e545cee180551750029cfe735 , dae86e"}, {"role": "assistant", "content": "The full SHA-1 object name (40-byte hexadecimal string), or\na leading substring that is unique within the repository.\nE.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both\nname the same commit object if there is no other object in\nyour repository whose object name starts with dae86e."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <describeOutput> , e.g. v1.7.4.2-679-g3bee7fb"}, {"role": "assistant", "content": "Output from git describe ; i.e. a closest tag, optionally\nfollowed by a dash and a number of commits, followed by a dash, a g , and an abbreviated object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <refname> , e.g. master , heads/master , refs/heads/master"}, {"role": "assistant", "content": "A symbolic ref name.  E.g. master typically means the commit\nobject referenced by refs/heads/master .  If you\nhappen to have both heads/master and tags/master , you can\nexplicitly say heads/master to tell Git which one you mean.\nWhen ambiguous, a <refname> is disambiguated by taking the\nfirst match in the following rules: If $GIT_DIR/<refname> exists, that is what you mean (this is usually\nuseful only for HEAD , FETCH_HEAD , ORIG_HEAD , MERGE_HEAD , REBASE_HEAD , REVERT_HEAD , CHERRY_PICK_HEAD , BISECT_HEAD and AUTO_MERGE ); otherwise, refs/<refname> if it exists; otherwise, refs/tags/<refname> if it exists; otherwise, refs/heads/<refname> if it exists; otherwise, refs/remotes/<refname> if it exists; otherwise, refs/remotes/<refname>/HEAD if it exists. HEAD names the commit on which you based the changes in the working tree. FETCH_HEAD records the branch which you fetched from a remote repository with\nyour last git fetch invocation. ORIG_HEAD is created by commands that move your HEAD in a drastic way ( git\nam , git merge , git rebase , git reset ), to record the position\nof the HEAD before their operation, so that you can easily change\nthe tip of the branch back to the state before you ran them. MERGE_HEAD records the commit(s) which you are merging into your branch when you\nrun git merge . REBASE_HEAD during a rebase, records the commit at which the operation is\ncurrently stopped, either because of conflicts or an edit command in\nan interactive rebase. REVERT_HEAD records the commit which you are reverting when you run git revert . CHERRY_PICK_HEAD records the commit which you are cherry-picking when you run git\ncherry-pick . BISECT_HEAD records the current commit to be tested when you run git bisect\n--no-checkout . AUTO_MERGE records a tree object corresponding to the state the ort merge strategy wrote to the working tree when a merge operation\nresulted in conflicts. Note that any of the refs/* cases above may come either from\nthe $GIT_DIR/refs directory or from the $GIT_DIR/packed-refs file.\nWhile the ref name encoding is unspecified, UTF-8 is preferred as\nsome output processing may assume ref names in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  @"}, {"role": "assistant", "content": "@ alone is a shortcut for HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  [<refname>]@{<date>} , e.g. master@{yesterday} , HEAD@{5 minutes ago}"}, {"role": "assistant", "content": "A ref followed by the suffix @ with a date specification\nenclosed in a brace\npair (e.g. {yesterday} , {1 month 2 weeks 3 days 1 hour 1\nsecond ago} or {1979-02-26 18:30:00} ) specifies the value\nof the ref at a prior point in time.  This suffix may only be\nused immediately following a ref name and the ref must have an\nexisting log ( $GIT_DIR/logs/<ref> ). Note that this looks up the state\nof your local ref at a given time; e.g., what was in your local master branch last week. If you want to look at commits made during\ncertain times, see --since and --until ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <refname>@{<n>} , e.g. master@{1}"}, {"role": "assistant", "content": "A ref followed by the suffix @ with an ordinal specification\nenclosed in a brace pair (e.g. {1} , {15} ) specifies\nthe n-th prior value of that ref.  For example master@{1} is the immediate prior value of master while master@{5} is the 5th prior value of master . This suffix may only be used\nimmediately following a ref name and the ref must have an existing\nlog ( $GIT_DIR/logs/<refname> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  @{<n>} , e.g. @{1}"}, {"role": "assistant", "content": "You can use the @ construct with an empty ref part to get at a\nreflog entry of the current branch. For example, if you are on\nbranch blabla then @{1} means the same as blabla@{1} ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  @{-<n>} , e.g. @{-1}"}, {"role": "assistant", "content": "The construct @{-<n>} means the <n>th branch/commit checked out\nbefore the current one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  [<branchname>]@{upstream} , e.g. master@{upstream} , @{u}"}, {"role": "assistant", "content": "A branch B may be set up to build on top of a branch X (configured with branch.<name>.merge ) at a remote R (configured with branch.<name>.remote ). B@{u} refers to the remote-tracking branch for\nthe branch X taken from remote R, typically found at refs/remotes/R/X ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  [<branchname>]@{push} , e.g. master@{push} , @{push}"}, {"role": "assistant", "content": "The suffix @{push} reports the branch \"where we would push to\" if git push were run while branchname was checked out (or the current HEAD if no branchname is specified). Like for @{upstream} , we report\nthe remote-tracking branch that corresponds to that branch at the remote. Here’s an example to make it more clear: $ git config push.default current\n$ git config remote.pushdefault myfork\n$ git switch -c mybranch origin/master\n\n$ git rev-parse --symbolic-full-name @{upstream}\nrefs/remotes/origin/master\n\n$ git rev-parse --symbolic-full-name @{push}\nrefs/remotes/myfork/mybranch Note in the example that we set up a triangular workflow, where we pull\nfrom one location and push to another. In a non-triangular workflow, @{push} is the same as @{upstream} , and there is no need for it. This suffix is also accepted when spelled in uppercase, and means the same\nthing no matter the case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^[<n>] , e.g. HEAD^, v1.5.1^0"}, {"role": "assistant", "content": "A suffix ^ to a revision parameter means the first parent of\nthat commit object. ^<n> means the <n>th parent (i.e. <rev>^ is equivalent to <rev>^1 ).  As a special rule, <rev>^0 means the commit itself and is used when <rev> is the\nobject name of a tag object that refers to a commit object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>~[<n>] , e.g. HEAD~, master~3"}, {"role": "assistant", "content": "A suffix ~ to a revision parameter means the first parent of\nthat commit object.\nA suffix ~<n> to a revision parameter means the commit\nobject that is the <n>th generation ancestor of the named\ncommit object, following only the first parents.  I.e. <rev>~3 is\nequivalent to <rev>^^^ which is equivalent to <rev>^1^1^1 .  See below for an illustration of\nthe usage of this form."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^{<type>} , e.g. v0.99.8^{commit}"}, {"role": "assistant", "content": "A suffix ^ followed by an object type name enclosed in\nbrace pair means dereference the object at <rev> recursively until\nan object of type <type> is found or the object cannot be\ndereferenced anymore (in which case, barf).\nFor example, if <rev> is a commit-ish, <rev>^{commit} describes the corresponding commit object.\nSimilarly, if <rev> is a tree-ish, <rev>^{tree} describes the corresponding tree object. <rev>^0 is a short-hand for <rev>^{commit} . <rev>^{object} can be used to make sure <rev> names an\nobject that exists, without requiring <rev> to be a tag, and\nwithout dereferencing <rev> ; because a tag is already an object,\nit does not have to be dereferenced even once to get to an object. <rev>^{tag} can be used to ensure that <rev> identifies an\nexisting tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^{} , e.g. v0.99.8^{}"}, {"role": "assistant", "content": "A suffix ^ followed by an empty brace pair\nmeans the object could be a tag,\nand dereference the tag recursively until a non-tag object is\nfound."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^{/<text>} , e.g. HEAD^{/fix nasty bug}"}, {"role": "assistant", "content": "A suffix ^ to a revision parameter, followed by a brace\npair that contains a text led by a slash,\nis the same as the :/fix nasty bug syntax below except that\nit returns the youngest matching commit which is reachable from\nthe <rev> before ^ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  :/<text> , e.g. :/fix nasty bug"}, {"role": "assistant", "content": "A colon, followed by a slash, followed by a text, names\na commit whose commit message matches the specified regular expression.\nThis name returns the youngest matching commit which is\nreachable from any ref, including HEAD.\nThe regular expression can match any part of the\ncommit message. To match messages starting with a string, one can use\ne.g. :/^foo . The special sequence :/! is reserved for modifiers to what\nis matched. :/!-foo performs a negative match, while :/!!foo matches a\nliteral ! character, followed by foo . Any other sequence beginning with :/! is reserved for now.\nDepending on the given text, the shell’s word splitting rules might\nrequire additional quoting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>:<path> , e.g. HEAD:README , master:./README"}, {"role": "assistant", "content": "A suffix : followed by a path names the blob or tree\nat the given path in the tree-ish object named by the part\nbefore the colon.\nA path starting with ./ or ../ is relative to the current working directory.\nThe given path will be converted to be relative to the working tree’s root directory.\nThis is most useful to address a blob or tree from a commit or tree that has\nthe same tree structure as the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  :[<n>:]<path> , e.g. :0:README , :README"}, {"role": "assistant", "content": "A colon, optionally followed by a stage number (0 to 3) and a\ncolon, followed by a path, names a blob object in the\nindex at the given path. A missing stage number (and the colon\nthat follows it) names a stage 0 entry. During a merge, stage\n1 is the common ancestor, stage 2 is the target branch’s version\n(typically the current branch), and stage 3 is the version from\nthe branch which is being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  HEAD"}, {"role": "assistant", "content": "names the commit on which you based the changes in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  FETCH_HEAD"}, {"role": "assistant", "content": "records the branch which you fetched from a remote repository with\nyour last git fetch invocation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  ORIG_HEAD"}, {"role": "assistant", "content": "is created by commands that move your HEAD in a drastic way ( git\nam , git merge , git rebase , git reset ), to record the position\nof the HEAD before their operation, so that you can easily change\nthe tip of the branch back to the state before you ran them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  MERGE_HEAD"}, {"role": "assistant", "content": "records the commit(s) which you are merging into your branch when you\nrun git merge ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  REBASE_HEAD"}, {"role": "assistant", "content": "during a rebase, records the commit at which the operation is\ncurrently stopped, either because of conflicts or an edit command in\nan interactive rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  REVERT_HEAD"}, {"role": "assistant", "content": "records the commit which you are reverting when you run git revert ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  CHERRY_PICK_HEAD"}, {"role": "assistant", "content": "records the commit which you are cherry-picking when you run git\ncherry-pick ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  BISECT_HEAD"}, {"role": "assistant", "content": "records the current commit to be tested when you run git bisect\n--no-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  AUTO_MERGE"}, {"role": "assistant", "content": "records a tree object corresponding to the state the ort merge strategy wrote to the working tree when a merge operation\nresulted in conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  ^<rev> (caret) Notation"}, {"role": "assistant", "content": "To exclude commits reachable from a commit, a prefix ^ notation is used.  E.g. ^r1 r2 means commits reachable\nfrom r2 but exclude the ones reachable from r1 (i.e. r1 and\nits ancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  The .. (two-dot) Range Notation"}, {"role": "assistant", "content": "The ^r1 r2 set operation appears so often that there is a shorthand\nfor it.  When you have two commits r1 and r2 (named according\nto the syntax explained in SPECIFYING REVISIONS above), you can ask\nfor commits that are reachable from r2 excluding those that are reachable\nfrom r1 by ^r1 r2 and it can be written as r1..r2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  The ... (three-dot) Symmetric Difference Notation"}, {"role": "assistant", "content": "A similar notation r1...r2 is called symmetric difference\nof r1 and r2 and is defined as r1 r2 --not $(git merge-base --all r1 r2) .\nIt is the set of commits that are reachable from either one of r1 (left side) or r2 (right side) but not from both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>"}, {"role": "assistant", "content": "Include commits that are reachable from <rev> (i.e. <rev> and its\nancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  ^<rev>"}, {"role": "assistant", "content": "Exclude commits that are reachable from <rev> (i.e. <rev> and its\nancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev1>..<rev2>"}, {"role": "assistant", "content": "Include commits that are reachable from <rev2> but exclude\nthose that are reachable from <rev1>.  When either <rev1> or\n<rev2> is omitted, it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev1>...<rev2>"}, {"role": "assistant", "content": "Include commits that are reachable from either <rev1> or\n<rev2> but exclude those that are reachable from both.  When\neither <rev1> or <rev2> is omitted, it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^@ , e.g. HEAD^@"}, {"role": "assistant", "content": "A suffix ^ followed by an at sign is the same as listing\nall parents of <rev> (meaning, include anything reachable from\nits parents, but not the commit itself)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^! , e.g. HEAD^!"}, {"role": "assistant", "content": "A suffix ^ followed by an exclamation mark is the same\nas giving commit <rev> and all its parents prefixed with ^ to exclude them (and their ancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>^-<n> , e.g. HEAD^-, HEAD^-2"}, {"role": "assistant", "content": "Equivalent to <rev>^<n>..<rev> , with <n> = 1 if not\ngiven."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "NAME gitsubmodules - Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "SYNOPSIS .gitmodules, $GIT_DIR/config git submodule\ngit <command> --recurse-submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "DESCRIPTION A submodule is a repository embedded inside another repository.\nThe submodule has its own history; the repository it is embedded\nin is called a superproject. On the filesystem, a submodule usually (but not always - see FORMS below)\nconsists of (i) a Git directory located under the $GIT_DIR/modules/ directory of its superproject, (ii) a working directory inside the\nsuperproject’s working directory, and a .git file at the root of\nthe submodule’s working directory pointing to (i). Assuming the submodule has a Git directory at $GIT_DIR/modules/foo/ and a working directory at path/to/bar/ , the superproject tracks the\nsubmodule via a gitlink entry in the tree at path/to/bar and an entry\nin its .gitmodules file (see gitmodules ) of the form submodule.foo.path = path/to/bar . The gitlink entry contains the object name of the commit that the\nsuperproject expects the submodule’s working directory to be at. The section submodule.foo.* in the .gitmodules file gives additional\nhints to Git’s porcelain layer. For example, the submodule.foo.url setting specifies where to obtain the submodule. Submodules can be used for at least two different use cases: Using another project while maintaining independent history.\nSubmodules allow you to contain the working tree of another project\nwithin your own working tree while keeping the history of both\nprojects separate. Also, since submodules are fixed to an arbitrary\nversion, the other project can be independently developed without\naffecting the superproject, allowing the superproject project to\nfix itself to new versions only when desired. Splitting a (logically single) project into multiple\nrepositories and tying them back together. This can be used to\novercome current limitations of Git’s implementation to have\nfiner grained access: Size of the Git repository:\nIn its current form Git scales up poorly for large repositories containing\ncontent that is not compressed by delta computation between trees.\nFor example, you can use submodules to hold large binary assets\nand these repositories can be shallowly cloned such that you do not\nhave a large history locally. Transfer size:\nIn its current form Git requires the whole working tree present. It\ndoes not allow partial trees to be transferred in fetch or clone.\nIf the project you work on consists of multiple repositories tied\ntogether as submodules in a superproject, you can avoid fetching the\nworking trees of the repositories you are not interested in. Access control:\nBy restricting user access to submodules, this can be used to implement\nread/write policies for different users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "The configuration of submodules Submodule operations can be configured using the following mechanisms\n(from highest to lowest precedence): The command line for those commands that support taking submodules\nas part of their pathspecs. Most commands have a boolean flag --recurse-submodules which specifies whether to recurse into submodules.\nExamples are grep and checkout .\nSome commands take enums, such as fetch and push , where you can\nspecify how submodules are affected. The configuration inside the submodule. This includes $GIT_DIR/config in the submodule, but also settings in the tree such as a .gitattributes or .gitignore files that specify behavior of commands inside the\nsubmodule. For example an effect from the submodule’s .gitignore file\nwould be observed when you run git status --ignore-submodules=none in\nthe superproject. This collects information from the submodule’s working\ndirectory by running status in the submodule while paying attention\nto the .gitignore file of the submodule. The submodule’s $GIT_DIR/config file would come into play when running git push --recurse-submodules=check in the superproject, as this would\ncheck if the submodule has any changes not published to any remote. The\nremotes are configured in the submodule as usual in the $GIT_DIR/config file. The configuration file $GIT_DIR/config in the superproject.\nGit only recurses into active submodules (see \"ACTIVE SUBMODULES\"\nsection below). If the submodule is not yet initialized, then the configuration\ninside the submodule does not exist yet, so where to\nobtain the submodule from is configured here for example. The .gitmodules file inside the superproject. A project usually\nuses this file to suggest defaults for the upstream collection\nof repositories for the mapping that is required between a\nsubmodule’s name and its path. This file mainly serves as the mapping between the name and path of submodules\nin the superproject, such that the submodule’s Git directory can be\nlocated. If the submodule has never been initialized, this is the only place\nwhere submodule configuration is found. It serves as the last fallback\nto specify where to obtain the submodule from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "FORMS Submodules can take the following forms: The basic form described in DESCRIPTION with a Git directory,\na working directory, a gitlink , and a .gitmodules entry. \"Old-form\" submodule: A working directory with an embedded .git directory, and the tracking gitlink and .gitmodules entry in\nthe superproject. This is typically found in repositories generated\nusing older versions of Git. It is possible to construct these old form repositories manually. When deinitialized or deleted (see below), the submodule’s Git\ndirectory is automatically moved to $GIT_DIR/modules/<name>/ of the superproject. Deinitialized submodule: A gitlink , and a .gitmodules entry,\nbut no submodule working directory. The submodule’s Git directory\nmay be there as after deinitializing the Git directory is kept around.\nThe directory which is supposed to be the working directory is empty instead. A submodule can be deinitialized by running git submodule deinit .\nBesides emptying the working directory, this command only modifies\nthe superproject’s $GIT_DIR/config file, so the superproject’s history\nis not affected. This can be undone using git submodule init . Deleted submodule: A submodule can be deleted by running git rm <submodule-path> && git commit . This can be undone\nusing git revert . The deletion removes the superproject’s tracking data, which are\nboth the gitlink entry and the section in the .gitmodules file.\nThe submodule’s working directory is removed from the file\nsystem, but the Git directory is kept around as it to make it\npossible to checkout past commits without requiring fetching\nfrom another repository. To completely remove a submodule, manually delete $GIT_DIR/modules/<name>/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "ACTIVE SUBMODULES A submodule is considered active, if submodule.<name>.active is set to true or if the submodule’s path matches the pathspec in submodule.active or if submodule.<name>.url is set. and these are evaluated in this order. For example: [submodule \"foo\"]\n  active = false\n  url = https://example.org/foo\n[submodule \"bar\"]\n  active = true\n  url = https://example.org/bar\n[submodule \"baz\"]\n  url = https://example.org/baz In the above config only the submodules bar and baz are active, bar due to (1) and baz due to (3). foo is inactive because\n(1) takes precedence over (3) Note that (3) is a historical artefact and will be ignored if the\n(1) and (2) specify that the submodule is not active. In other words,\nif we have a submodule.<name>.active set to false or if the\nsubmodule’s path is excluded in the pathspec in submodule.active , the\nurl doesn’t matter whether it is present or not. This is illustrated in\nthe example that follows. [submodule \"foo\"]\n  active = true\n  url = https://example.org/foo\n[submodule \"bar\"]\n  url = https://example.org/bar\n[submodule \"baz\"]\n  url = https://example.org/baz\n[submodule \"bob\"]\n  ignore = true\n[submodule]\n  active = b*\n  active = :(exclude) baz In here all submodules except baz (foo, bar, bob) are active. foo due to its own active flag and all the others due to the\nsubmodule active pathspec, which specifies that any submodule\nstarting with b except baz are also active, regardless of the\npresence of the .url field."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "Workflow for a third party library # Add a submodule\ngit submodule add <URL> <path> # Occasionally update the submodule to a new version:\ngit -C <path> checkout <new-version>\ngit add <path>\ngit commit -m \"update submodule to new version\" # See the list of submodules in a superproject\ngit submodule status # See FORMS on removing submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "Workflow for an artificially split repo # Enable recursion for relevant commands, such that\n# regular commands recurse into submodules by default\ngit config --global submodule.recurse true # Unlike most other commands below, clone still needs\n# its own recurse flag:\ngit clone --recurse <URL> <directory>\ncd <directory> # Get to know the code:\ngit grep foo\ngit ls-files --recurse-submodules Note git ls-files also requires its own --recurse-submodules flag. # Get new code\ngit fetch\ngit pull --rebase # Change worktree\ngit checkout\ngit reset"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "Implementation details When cloning or pulling a repository containing submodules the submodules\nwill not be checked out by default; you can instruct clone to recurse\ninto submodules. The init and update subcommands of git submodule will maintain submodules checked out and at an appropriate revision in\nyour working tree. Alternatively you can set submodule.recurse to have checkout recurse into submodules (note that submodule.recurse also\naffects other Git commands, see git-config for a complete list)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "NAME gittutorial - A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "SYNOPSIS git *"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "DESCRIPTION This tutorial explains how to import a new project into Git, make\nchanges to it, and share changes with other developers. If you are instead primarily interested in using Git to fetch a project,\nfor example, to test the latest version, you may prefer to start with\nthe first two chapters of The Git User’s Manual . First, note that you can get documentation for a command such as git log --graph with: $ man git-log or: $ git help log With the latter, you can use the manual viewer of your choice; see git-help for more information. It is a good idea to introduce yourself to Git with your name and\npublic email address before doing any operation.  The easiest\nway to do so is: $ git config --global user.name \"Your Name Comes Here\"\n$ git config --global user.email you@yourdomain.example.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Importing a new project Assume you have a tarball project.tar.gz with your initial work.  You\ncan place it under Git revision control as follows. $ tar xzf project.tar.gz\n$ cd project\n$ git init Git will reply Initialized empty Git repository in .git/ You’ve now initialized the working directory—​you may notice a new\ndirectory created, named .git . Next, tell Git to take a snapshot of the contents of all files under the\ncurrent directory (note the . ), with git add : $ git add . This snapshot is now stored in a temporary staging area which Git calls\nthe \"index\".  You can permanently store the contents of the index in the\nrepository with git commit : $ git commit This will prompt you for a commit message.  You’ve now stored the first\nversion of your project in Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Making changes Modify some files, then add their updated contents to the index: $ git add file1 file2 file3 You are now ready to commit.  You can see what is about to be committed\nusing git diff with the --cached option: $ git diff --cached (Without --cached , git diff will show you any changes that\nyou’ve made but not yet added to the index.)  You can also get a brief\nsummary of the situation with git status : $ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\n\tmodified:   file1\n\tmodified:   file2\n\tmodified:   file3 If you need to make any further adjustments, do so now, and then add any\nnewly modified content to the index.  Finally, commit your changes with: $ git commit This will again prompt you for a message describing the change, and then\nrecord a new version of the project. Alternatively, instead of running git add beforehand, you can use $ git commit -a which will automatically notice any modified (but not new) files, add\nthem to the index, and commit, all in one step. A note on commit messages: Though not required, it’s a good idea to\nbegin the commit message with a single short (no more than 50\ncharacters) line summarizing the change, followed by a blank line and\nthen a more thorough description. The text up to the first blank line in\na commit message is treated as the commit title, and that title is used\nthroughout Git.  For example, git-format-patch turns a\ncommit into email, and it uses the title on the Subject line and the\nrest of the commit in the body."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Git tracks content not files Many revision control systems provide an add command that tells the\nsystem to start tracking changes to a new file.  Git’s add command\ndoes something simpler and more powerful: git add is used both for new\nand newly modified files, and in both cases it takes a snapshot of the\ngiven files and stages that content in the index, ready for inclusion in\nthe next commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Viewing project history At any point you can view the history of your changes using $ git log If you also want to see complete diffs at each step, use $ git log -p Often the overview of the change is useful to get a feel of\neach step $ git log --stat --summary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Managing branches A single Git repository can maintain multiple branches of\ndevelopment.  To create a new branch named experimental , use $ git branch experimental If you now run $ git branch you’ll get a list of all existing branches: experimental\n* master The experimental branch is the one you just created, and the master branch is a default branch that was created for you\nautomatically.  The asterisk marks the branch you are currently on;\ntype $ git switch experimental to switch to the experimental branch.  Now edit a file, commit the\nchange, and switch back to the master branch: (edit file)\n$ git commit -a\n$ git switch master Check that the change you made is no longer visible, since it was\nmade on the experimental branch and you’re back on the master branch. You can make a different change on the master branch: (edit file)\n$ git commit -a at this point the two branches have diverged, with different changes\nmade in each.  To merge the changes made in experimental into master , run $ git merge experimental If the changes don’t conflict, you’re done.  If there are conflicts,\nmarkers will be left in the problematic files showing the conflict; $ git diff will show this.  Once you’ve edited the files to resolve the\nconflicts, $ git commit -a will commit the result of the merge. Finally, $ gitk will show a nice graphical representation of the resulting history. At this point you could delete the experimental branch with $ git branch -d experimental This command ensures that the changes in the experimental branch are\nalready in the current branch. If you develop on a branch crazy-idea , then regret it, you can always\ndelete the branch with $ git branch -D crazy-idea Branches are cheap and easy, so this is a good way to try something\nout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Using Git for collaboration Suppose that Alice has started a new project with a Git repository in /home/alice/project , and that Bob, who has a home directory on the\nsame machine, wants to contribute. Bob begins with: bob$ git clone /home/alice/project myrepo This creates a new directory myrepo containing a clone of Alice’s\nrepository.  The clone is on an equal footing with the original\nproject, possessing its own copy of the original project’s history. Bob then makes some changes and commits them: (edit files)\nbob$ git commit -a\n(repeat as necessary) When he’s ready, he tells Alice to pull changes from the repository\nat /home/bob/myrepo .  She does this with: alice$ cd /home/alice/project\nalice$ git pull /home/bob/myrepo master This merges the changes from Bob’s master branch into Alice’s\ncurrent branch.  If Alice has made her own changes in the meantime,\nthen she may need to manually fix any conflicts. The pull command thus performs two operations: it fetches changes\nfrom a remote branch, then merges them into the current branch. Note that in general, Alice would want her local changes committed before\ninitiating this pull .  If Bob’s work conflicts with what Alice did since\ntheir histories forked, Alice will use her working tree and the index to\nresolve conflicts, and existing local changes will interfere with the\nconflict resolution process (Git will still perform the fetch but will\nrefuse to merge — Alice will have to get rid of her local changes in\nsome way and pull again when this happens). Alice can peek at what Bob did without merging first, using the fetch command; this allows Alice to inspect what Bob did, using a special\nsymbol FETCH_HEAD , in order to determine if he has anything worth\npulling, like this: alice$ git fetch /home/bob/myrepo master\nalice$ git log -p HEAD..FETCH_HEAD This operation is safe even if Alice has uncommitted local changes.\nThe range notation HEAD..FETCH_HEAD means \"show everything that is reachable\nfrom the FETCH_HEAD but exclude anything that is reachable from HEAD \".\nAlice already knows everything that leads to her current state ( HEAD ),\nand reviews what Bob has in his state ( FETCH_HEAD ) that she has not\nseen with this command. If Alice wants to visualize what Bob did since their histories forked\nshe can issue the following command: $ gitk HEAD..FETCH_HEAD This uses the same two-dot range notation we saw earlier with git log . Alice may want to view what both of them did since they forked.\nShe can use three-dot form instead of the two-dot form: $ gitk HEAD...FETCH_HEAD This means \"show everything that is reachable from either one, but\nexclude anything that is reachable from both of them\". Please note that these range notation can be used with both gitk and git log . After inspecting what Bob did, if there is nothing urgent, Alice may\ndecide to continue working without pulling from Bob.  If Bob’s history\ndoes have something Alice would immediately need, Alice may choose to\nstash her work-in-progress first, do a pull , and then finally unstash\nher work-in-progress on top of the resulting history. When you are working in a small closely knit group, it is not\nunusual to interact with the same repository over and over\nagain.  By defining remote repository shorthand, you can make\nit easier: alice$ git remote add bob /home/bob/myrepo With this, Alice can perform the first part of the pull operation\nalone using the git fetch command without merging them with her own\nbranch, using: alice$ git fetch bob Unlike the longhand form, when Alice fetches from Bob using a\nremote repository shorthand set up with git remote , what was\nfetched is stored in a remote-tracking branch, in this case bob/master .  So after this: alice$ git log -p master..bob/master shows a list of all the changes that Bob made since he branched from\nAlice’s master branch. After examining those changes, Alice\ncould merge the changes into her master branch: alice$ git merge bob/master This merge can also be done by pulling from her own remote-tracking\nbranch , like this: alice$ git pull . remotes/bob/master Note that git pull always merges into the current branch,\nregardless of what else is given on the command line. Later, Bob can update his repo with Alice’s latest changes using bob$ git pull Note that he doesn’t need to give the path to Alice’s repository;\nwhen Bob cloned Alice’s repository, Git stored the location of her\nrepository in the repository configuration, and that location is\nused for pulls: bob$ git config --get remote.origin.url\n/home/alice/project (The complete configuration created by git clone is visible using git config -l , and the git-config man page\nexplains the meaning of each option.) Git also keeps a pristine copy of Alice’s master branch under the\nname origin/master : bob$ git branch -r\n  origin/master If Bob later decides to work from a different host, he can still\nperform clones and pulls using the ssh protocol: bob$ git clone alice.org:/home/alice/project myrepo Alternatively, Git has a native protocol, or can use http;\nsee git-pull for details. Git can also be used in a CVS-like mode, with a central repository\nthat various users push changes to; see git-push and gitcvs-migration ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Exploring history Git history is represented as a series of interrelated commits.  We\nhave already seen that the git log command can list those commits.\nNote that first line of each git log entry also gives a name for the\ncommit: $ git log\ncommit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\nAuthor: Junio C Hamano <junkio@cox.net>\nDate:   Tue May 16 17:18:22 2006 -0700\n\n    merge-base: Clarify the comments on post processing. We can give this name to git show to see the details about this\ncommit. $ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7 But there are other ways to refer to commits.  You can use any initial\npart of the name that is long enough to uniquely identify the commit: $ git show c82a22c39c\t# the first few characters of the name are\n\t\t\t# usually enough\n$ git show HEAD\t\t# the tip of the current branch\n$ git show experimental\t# the tip of the \"experimental\" branch Every commit usually has one \"parent\" commit\nwhich points to the previous state of the project: $ git show HEAD^  # to see the parent of HEAD\n$ git show HEAD^^ # to see the grandparent of HEAD\n$ git show HEAD~4 # to see the great-great grandparent of HEAD Note that merge commits may have more than one parent: $ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)\n$ git show HEAD^2 # show the second parent of HEAD You can also give commits names of your own; after running $ git tag v2.5 1b2e1d63ff you can refer to 1b2e1d63ff by the name v2.5 .  If you intend to\nshare this name with other people (for example, to identify a release\nversion), you should create a \"tag\" object, and perhaps sign it; see git-tag for details. Any Git command that needs to know a commit can take any of these\nnames.  For example: $ git diff v2.5 HEAD\t # compare the current HEAD to v2.5\n$ git branch stable v2.5 # start a new branch named \"stable\" based\n\t\t\t # at v2.5\n$ git reset --hard HEAD^ # reset your current branch and working\n\t\t\t # directory to its state at HEAD^ Be careful with that last command: in addition to losing any changes\nin the working directory, it will also remove all later commits from\nthis branch.  If this branch is the only branch containing those\ncommits, they will be lost.  Also, don’t use git reset on a\npublicly-visible branch that other developers pull from, as it will\nforce needless merges on other developers to clean up the history.\nIf you need to undo changes that you have pushed, use git revert instead. The git grep command can search for strings in any version of your\nproject, so $ git grep \"hello\" v2.5 searches for all occurrences of \"hello\" in v2.5 . If you leave out the commit name, git grep will search any of the\nfiles it manages in your current directory.  So $ git grep \"hello\" is a quick way to search just the files that are tracked by Git. Many Git commands also take sets of commits, which can be specified\nin a number of ways.  Here are some examples with git log : $ git log v2.5..v2.6            # commits between v2.5 and v2.6\n$ git log v2.5..                # commits since v2.5\n$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n$ git log v2.5.. Makefile       # commits since v2.5 which modify\n\t\t\t\t# Makefile You can also give git log a \"range\" of commits where the first is not\nnecessarily an ancestor of the second; for example, if the tips of\nthe branches stable and master diverged from a common\ncommit some time ago, then $ git log stable..master will list commits made in the master branch but not in the\nstable branch, while $ git log master..stable will show the list of commits made on the stable branch but not\nthe master branch. The git log command has a weakness: it must present commits in a\nlist.  When the history has lines of development that diverged and\nthen merged back together, the order in which git log presents\nthose commits is meaningless. Most projects with multiple contributors (such as the Linux kernel,\nor Git itself) have frequent merges, and gitk does a better job of\nvisualizing their history.  For example, $ gitk --since=\"2 weeks ago\" drivers/ allows you to browse any commits from the last 2 weeks of commits\nthat modified files under the drivers directory.  (Note: you can\nadjust gitk’s fonts by holding down the control key while pressing\n\"-\" or \"+\".) Finally, most commands that take filenames will optionally allow you\nto precede any filename by a commit, to specify a particular version\nof the file: $ git diff v2.5:Makefile HEAD:Makefile.in You can also use git show to see any such file: $ git show v2.5:Makefile"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Next Steps This tutorial should be enough to perform basic distributed revision\ncontrol for your projects.  However, to fully understand the depth\nand power of Git you need to understand two simple ideas on which it\nis based: The object database is the rather elegant system used to\nstore the history of your project—​files, directories, and\ncommits. The index file is a cache of the state of a directory tree,\nused to create commits, check out working directories, and\nhold the various trees involved in a merge. Part two of this tutorial explains the object\ndatabase, the index file, and a few other odds and ends that you’ll\nneed to make the most of Git. You can find it at gittutorial-2 . If you don’t want to continue with that right away, a few other\ndigressions that may be interesting at this point are: git-format-patch , git-am : These convert\nseries of git commits into emailed patches, and vice versa,\nuseful for projects such as the Linux kernel which rely heavily\non emailed patches. git-bisect : When there is a regression in your\nproject, one way to track down the bug is by searching through\nthe history to find the exact commit that’s to blame. git bisect can help you perform a binary search for that commit.  It is\nsmart enough to perform a close-to-optimal search even in the\ncase of complex non-linear history with lots of merged branches. gitworkflows : Gives an overview of recommended\nworkflows. giteveryday : Everyday Git with 20 Commands Or So. gitcvs-migration : Git for CVS users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "NAME gitworkflows - An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "SYNOPSIS git *"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "DESCRIPTION This document attempts to write down and motivate some of the workflow\nelements used for git.git itself.  Many ideas apply in general,\nthough the full workflow is rarely required for smaller projects with\nfewer people involved. We formulate a set of rules for quick reference, while the prose\ntries to motivate each of them.  Do not always take them literally;\nyou should value good reasons for your actions higher than manpages\nsuch as this one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "SEPARATE CHANGES As a general rule, you should try to split your changes into small\nlogical steps, and commit each of them.  They should be consistent,\nworking independently of any later commits, pass the test suite, etc.\nThis makes the review process much easier, and the history much more\nuseful for later inspection and analysis, for example with git-blame and git-bisect . To achieve this, try to split your work into small steps from the very\nbeginning. It is always easier to squash a few commits together than\nto split one big commit into several.  Don’t be afraid of making too\nsmall or imperfect steps along the way. You can always go back later\nand edit the commits with git rebase --interactive before you\npublish them.  You can use git stash push --keep-index to run the\ntest suite independent of other uncommitted changes; see the EXAMPLES\nsection of git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "MANAGING BRANCHES There are two main tools that can be used to include changes from one\nbranch on another: git-merge and git-cherry-pick . Merges have many advantages, so we try to solve as many problems as\npossible with merges alone.  Cherry-picking is still occasionally\nuseful; see \"Merging upwards\" below for an example. Most importantly, merging works at the branch level, while\ncherry-picking works at the commit level.  This means that a merge can\ncarry over the changes from 1, 10, or 1000 commits with equal ease,\nwhich in turn means the workflow scales much better to a large number\nof contributors (and contributions).  Merges are also easier to\nunderstand because a merge commit is a \"promise\" that all changes from\nall its parents are now included. There is a tradeoff of course: merges require a more careful branch\nmanagement.  The following subsections discuss the important points. Graduation As a given feature goes from experimental to stable, it also\n\"graduates\" between the corresponding branches of the software. git.git uses the following integration branches : maint tracks the commits that should go into the next \"maintenance\nrelease\", i.e., update of the last released stable version; master tracks the commits that should go into the next release; next is intended as a testing branch for topics being tested for\nstability for master. There is a fourth official branch that is used slightly differently: seen (patches seen by the maintainer) is an integration branch for\nthings that are not quite ready for inclusion yet (see \"Integration\nBranches\" below). Each of the four branches is usually a direct descendant of the one\nabove it. Conceptually, the feature enters at an unstable branch (usually next or seen ), and \"graduates\" to master for the next release once it is\nconsidered stable enough. Merging upwards The \"downwards graduation\" discussed above cannot be done by actually\nmerging downwards, however, since that would merge all changes on\nthe unstable branch into the stable one.  Hence the following: Rule: Merge upwards Always commit your fixes to the oldest supported branch that requires\nthem.  Then (periodically) merge the integration branches upwards into each\nother. This gives a very controlled flow of fixes.  If you notice that you\nhave applied a fix to e.g. master that is also required in maint ,\nyou will need to cherry-pick it (using git-cherry-pick )\ndownwards.  This will happen a few times and is nothing to worry about\nunless you do it very frequently. Topic branches Any nontrivial feature will require several patches to implement, and\nmay get extra bugfixes or improvements during its lifetime. Committing everything directly on the integration branches leads to many\nproblems: Bad commits cannot be undone, so they must be reverted one\nby one, which creates confusing histories and further error potential\nwhen you forget to revert part of a group of changes.  Working in\nparallel mixes up the changes, creating further confusion. Use of \"topic branches\" solves these problems.  The name is pretty\nself explanatory, with a caveat that comes from the \"merge upwards\"\nrule above: Rule: Topic branches Make a side branch for every topic (feature, bugfix, …​). Fork it off\nat the oldest integration branch that you will eventually want to merge it\ninto. Many things can then be done very naturally: To get the feature/bugfix into an integration branch, simply merge\nit.  If the topic has evolved further in the meantime, merge again.\n(Note that you do not necessarily have to merge it to the oldest\nintegration branch first.  For example, you can first merge a bugfix\nto next , give it some testing time, and merge to maint when you\nknow it is stable.) If you find you need new features from the branch other to continue\nworking on your topic, merge other to topic .  (However, do not\ndo this \"just habitually\", see below.) If you find you forked off the wrong branch and want to move it\n\"back in time\", use git-rebase . Note that the last point clashes with the other two: a topic that has\nbeen merged elsewhere should not be rebased.  See the section on\nRECOVERING FROM UPSTREAM REBASE in git-rebase . We should point out that \"habitually\" (regularly for no real reason)\nmerging an integration branch into your topics — and by extension,\nmerging anything upstream into anything downstream on a regular basis — is frowned upon: Rule: Merge to downstream only at well-defined points Do not merge to downstream except with a good reason: upstream API\nchanges affect your branch; your branch no longer merges to upstream\ncleanly; etc. Otherwise, the topic that was merged to suddenly contains more than a\nsingle (well-separated) change.  The many resulting small merges will\ngreatly clutter up history.  Anyone who later investigates the history\nof a file will have to find out whether that merge affected the topic\nin development.  An upstream might even inadvertently be merged into a\n\"more stable\" branch.  And so on. Throw-away integration If you followed the last paragraph, you will now have many small topic\nbranches, and occasionally wonder how they interact.  Perhaps the\nresult of merging them does not even work?  But on the other hand, we\nwant to avoid merging them anywhere \"stable\" because such merges\ncannot easily be undone. The solution, of course, is to make a merge that we can undo: merge\ninto a throw-away branch. Rule: Throw-away integration branches To test the interaction of several topics, merge them into a\nthrow-away branch.  You must never base any work on such a branch! If you make it (very) clear that this branch is going to be deleted\nright after the testing, you can even publish this branch, for example\nto give the testers a chance to work with it, or other developers a\nchance to see if their in-progress work will be compatible. git.git has such an official throw-away integration branch called seen . Branch management for a release Assuming you are using the merge approach discussed above, when you\nare releasing your project you will need to do some additional branch\nmanagement work. A feature release is created from the master branch, since master tracks the commits that should go into the next feature release. The master branch is supposed to be a superset of maint . If this\ncondition does not hold, then maint contains some commits that\nare not included on master . The fixes represented by those commits\nwill therefore not be included in your feature release. To verify that master is indeed a superset of maint , use git log: Recipe: Verify master is a superset of maint git log master..maint This command should not list any commits.  Otherwise, check out master and merge maint into it. Now you can proceed with the creation of the feature release. Apply a\ntag to the tip of master indicating the release version: Recipe: Release tagging git tag -s -m \"Git X.Y.Z\" vX.Y.Z master You need to push the new tag to a public Git server (see\n\"DISTRIBUTED WORKFLOWS\" below). This makes the tag available to\nothers tracking your project. The push could also trigger a\npost-update hook to perform release-related items such as building\nrelease tarballs and preformatted documentation pages. Similarly, for a maintenance release, maint is tracking the commits\nto be released. Therefore, in the steps above simply tag and push maint rather than master . Maintenance branch management after a feature release After a feature release, you need to manage your maintenance branches. First, if you wish to continue to release maintenance fixes for the\nfeature release made before the recent one, then you must create\nanother branch to track commits for that previous release. To do this, the current maintenance branch is copied to another branch\nnamed with the previous release version number (e.g. maint-X.Y.(Z-1)\nwhere X.Y.Z is the current release). Recipe: Copy maint git branch maint-X.Y.(Z-1) maint The maint branch should now be fast-forwarded to the newly released\ncode so that maintenance fixes can be tracked for the current release: Recipe: Update maint to new release git checkout maint git merge --ff-only master If the merge fails because it is not a fast-forward, then it is\npossible some fixes on maint were missed in the feature release.\nThis will not happen if the content of the branches was verified as\ndescribed in the previous section. Branch management for next and seen after a feature release After a feature release, the integration branch next may optionally be\nrewound and rebuilt from the tip of master using the surviving\ntopics on next : Recipe: Rewind and rebuild next git switch -C next master git merge ai/topic_in_next1 git merge ai/topic_in_next2 …​ The advantage of doing this is that the history of next will be\nclean. For example, some topics merged into next may have initially\nlooked promising, but were later found to be undesirable or premature.\nIn such a case, the topic is reverted out of next but the fact\nremains in the history that it was once merged and reverted. By\nrecreating next , you give another incarnation of such topics a clean\nslate to retry, and a feature release is a good point in history to do\nso. If you do this, then you should make a public announcement indicating\nthat next was rewound and rebuilt. The same rewind and rebuild process may be followed for seen . A public\nannouncement is not necessary since seen is a throw-away branch, as\ndescribed above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitworkflows - An overview of recommended workflows with Git"}, {"role": "assistant", "content": "DISTRIBUTED WORKFLOWS After the last section, you should know how to manage topics.  In\ngeneral, you will not be the only person working on the project, so\nyou will have to share your work. Roughly speaking, there are two important workflows: merge and patch.\nThe important difference is that the merge workflow can propagate full\nhistory, including merges, while patches cannot.  Both workflows can\nbe used in parallel: in git.git , only subsystem maintainers use\nthe merge workflow, while everyone else sends patches. Note that the maintainer(s) may impose restrictions, such as\n\"Signed-off-by\" requirements, that all commits/patches submitted for\ninclusion must adhere to.  Consult your project’s documentation for\nmore information. Merge workflow The merge workflow works by copying branches between upstream and\ndownstream.  Upstream can merge contributions into the official\nhistory; downstream base their work on the official history. There are three main tools that can be used for this: git-push copies your branches to a remote repository,\nusually to one that can be read by all involved parties; git-fetch that copies remote branches to your repository;\nand git-pull that does fetch and merge in one go. Note the last point.  Do not use git pull unless you actually want\nto merge the remote branch. Getting changes out is easy: Recipe: Push/pull: Publishing branches/topics git push <remote> <branch> and tell everyone where they can fetch\nfrom. You will still have to tell people by other means, such as mail.  (Git\nprovides the git-request-pull to send preformatted pull\nrequests to upstream maintainers to simplify this task.) If you just want to get the newest copies of the integration branches,\nstaying up to date is easy too: Recipe: Push/pull: Staying up to date Use git fetch <remote> or git remote update to stay up to date. Then simply fork your topic branches from the stable remotes as\nexplained earlier. If you are a maintainer and would like to merge other people’s topic\nbranches to the integration branches, they will typically send a\nrequest to do so by mail.  Such a request looks like Please pull from\n    <URL> <branch> In that case, git pull can do the fetch and merge in one go, as\nfollows. Recipe: Push/pull: Merging remote topics git pull <URL> <branch> Occasionally, the maintainer may get merge conflicts when they try to\npull changes from downstream.  In this case, they can ask downstream to\ndo the merge and resolve the conflicts themselves (perhaps they will\nknow better how to resolve them).  It is one of the rare cases where\ndownstream should merge from upstream. Patch workflow If you are a contributor that sends changes upstream in the form of\nemails, you should use topic branches as usual (see above).  Then use git-format-patch to generate the corresponding emails\n(highly recommended over manually formatting them because it makes the\nmaintainer’s life easier). Recipe: format-patch/am: Publishing branches/topics git format-patch -M upstream..topic to turn them into preformatted\npatch files git send-email --to=<recipient> <patches> See the git-format-patch and git-send-email manpages for further usage notes. If the maintainer tells you that your patch no longer applies to the\ncurrent upstream, you will have to rebase your topic (you cannot use a\nmerge because you cannot format-patch merges): Recipe: format-patch/am: Keeping topics up to date git pull --rebase <URL> <branch> You can then fix the conflicts during the rebase.  Presumably you have\nnot published your topic other than by mail, so rebasing it is not a\nproblem. If you receive such a patch series (as maintainer, or perhaps as a\nreader of the mailing list it was sent to), save the mails to files,\ncreate a new topic branch and use git am to import the commits: Recipe: format-patch/am: Importing patches git am < patch One feature worth pointing out is the three-way merge, which can help\nif you get conflicts: git am -3 will use index information contained\nin patches to figure out the merge base.  See git-am for\nother options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "NAME git - the stupid content tracker"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SYNOPSIS git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--config-env=<name>=<envvar>] <command> [<args>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "DESCRIPTION Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals. See gittutorial to get started, then see giteveryday for a useful minimum set of\ncommands.  The Git User’s Manual has a more\nin-depth introduction. After you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\". gitcli manual page gives you an overview of the command-line command syntax. A formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -v  --version"}, {"role": "assistant", "content": "Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts\nthe same options as the git-version command. If --help is\nalso given, it takes precedence over --version ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -h  --help"}, {"role": "assistant", "content": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command. Other options are available to control how the manual page is\ndisplayed. See git-help for more information,\nbecause git --help ... is converted internally into git\nhelp ... ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -C <path>"}, {"role": "assistant", "content": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path> .  If <path> is present but empty, e.g. -C \"\" , then the\ncurrent working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -c <name>=<value>"}, {"role": "assistant", "content": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by git config (subkeys separated by dots). Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ... ) sets foo.bar to the empty string which git config\n--type=bool will convert to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --config-env=<name>=<envvar>"}, {"role": "assistant", "content": "Like -c <name>=<value> , give configuration variable <name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on operating systems\nwhere other processes might be able to read your command line\n(e.g. /proc/self/cmdline ), but not your environment\n(e.g. /proc/self/environ ). That behavior is the default on\nLinux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --html-path"}, {"role": "assistant", "content": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --info-path"}, {"role": "assistant", "content": "Print the path where the Info files documenting this\nversion of Git are installed and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -p  --paginate"}, {"role": "assistant", "content": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section\nbelow)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  -P  --no-pager"}, {"role": "assistant", "content": "Do not pipe Git output into a pager."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --git-dir=<path>"}, {"role": "assistant", "content": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --work-tree=<path>"}, {"role": "assistant", "content": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config for a\nmore detailed discussion)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-replace-objects"}, {"role": "assistant", "content": "Do not use replacement refs to replace Git objects.\nThis is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value.\nSee git-replace for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-lazy-fetch"}, {"role": "assistant", "content": "Do not fetch missing objects from the promisor remote on\ndemand.  Useful together with git cat-file -e <object> to\nsee if the object is locally available.\nThis is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --literal-pathspecs"}, {"role": "assistant", "content": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --noglob-pathspecs"}, {"role": "assistant", "content": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1 . Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --icase-pathspecs"}, {"role": "assistant", "content": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --no-optional-locks"}, {"role": "assistant", "content": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --list-cmds=<group>[,<group>…​]"}, {"role": "assistant", "content": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --attr-source=<tree-ish>"}, {"role": "assistant", "content": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes . This is equivalent to setting the GIT_ATTR_SOURCE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-add"}, {"role": "assistant", "content": "Add file contents to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archive"}, {"role": "assistant", "content": "Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bisect"}, {"role": "assistant", "content": "Use binary search to find the commit that introduced a bug"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-branch"}, {"role": "assistant", "content": "List, create, or delete branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout"}, {"role": "assistant", "content": "Switch branches or restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry-pick"}, {"role": "assistant", "content": "Apply the changes introduced by some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clean"}, {"role": "assistant", "content": "Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit"}, {"role": "assistant", "content": "Record changes to the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff"}, {"role": "assistant", "content": "Show changes between commits, commit and working tree, etc"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch"}, {"role": "assistant", "content": "Download objects and refs from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gc"}, {"role": "assistant", "content": "Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-grep"}, {"role": "assistant", "content": "Print lines matching a pattern"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-gui"}, {"role": "assistant", "content": "A portable graphical interface to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-init"}, {"role": "assistant", "content": "Create an empty Git repository or reinitialize an existing one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-log"}, {"role": "assistant", "content": "Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-maintenance"}, {"role": "assistant", "content": "Run tasks to optimize Git repository data"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge"}, {"role": "assistant", "content": "Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-notes"}, {"role": "assistant", "content": "Add or inspect object notes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pull"}, {"role": "assistant", "content": "Fetch from and integrate with another repository or a local branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-range-diff"}, {"role": "assistant", "content": "Compare two commit ranges (e.g. two versions of a branch)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rebase"}, {"role": "assistant", "content": "Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rm"}, {"role": "assistant", "content": "Remove files from the working tree and from the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shortlog"}, {"role": "assistant", "content": "Summarize git log output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show"}, {"role": "assistant", "content": "Show various types of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sparse-checkout"}, {"role": "assistant", "content": "Reduce your working tree to a subset of tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-status"}, {"role": "assistant", "content": "Show the working tree status"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-submodule"}, {"role": "assistant", "content": "Initialize, update or inspect submodules"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-tag"}, {"role": "assistant", "content": "Create, list, delete or verify a tag object signed with GPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-worktree"}, {"role": "assistant", "content": "Manage multiple working trees"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  scalar"}, {"role": "assistant", "content": "A tool for managing large Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-export"}, {"role": "assistant", "content": "Git data exporter"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-filter-branch"}, {"role": "assistant", "content": "Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-refs"}, {"role": "assistant", "content": "Pack heads and tags for efficient repository access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-remote"}, {"role": "assistant", "content": "Manage set of tracked repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-repack"}, {"role": "assistant", "content": "Pack unpacked objects in a repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replace"}, {"role": "assistant", "content": "Create, list, delete refs to replace objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-annotate"}, {"role": "assistant", "content": "Annotate file lines with commit information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bugreport"}, {"role": "assistant", "content": "Collect information for user to file a bug report"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-count-objects"}, {"role": "assistant", "content": "Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diagnose"}, {"role": "assistant", "content": "Generate a zip archive of diagnostic information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-difftool"}, {"role": "assistant", "content": "Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fsck"}, {"role": "assistant", "content": "Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-help"}, {"role": "assistant", "content": "Display help information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-instaweb"}, {"role": "assistant", "content": "Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-tree"}, {"role": "assistant", "content": "Perform merge without touching index or working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rerere"}, {"role": "assistant", "content": "Reuse recorded resolution of conflicted merges"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-commit"}, {"role": "assistant", "content": "Check the GPG signature of commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-tag"}, {"role": "assistant", "content": "Check the GPG signature of tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-version"}, {"role": "assistant", "content": "Display version information about Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-whatchanged"}, {"role": "assistant", "content": "Show logs with differences each commit introduces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitweb"}, {"role": "assistant", "content": "Git web interface (web frontend to Git repositories)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-archimport"}, {"role": "assistant", "content": "Import a GNU Arch repository into Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsexportcommit"}, {"role": "assistant", "content": "Export a single commit to a CVS checkout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsimport"}, {"role": "assistant", "content": "Salvage your data out of another SCM people love to hate"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-imap-send"}, {"role": "assistant", "content": "Send a collection of patches from stdin to an IMAP folder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-p4"}, {"role": "assistant", "content": "Import from and submit to Perforce repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-quiltimport"}, {"role": "assistant", "content": "Applies a quilt patchset onto the current branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-request-pull"}, {"role": "assistant", "content": "Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-email"}, {"role": "assistant", "content": "Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-svn"}, {"role": "assistant", "content": "Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-apply"}, {"role": "assistant", "content": "Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-checkout-index"}, {"role": "assistant", "content": "Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-graph"}, {"role": "assistant", "content": "Write and verify Git commit-graph files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-commit-tree"}, {"role": "assistant", "content": "Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-file"}, {"role": "assistant", "content": "Run a three-way file merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-index"}, {"role": "assistant", "content": "Run a merge for files needing merging"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktag"}, {"role": "assistant", "content": "Creates a tag object with extra validation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mktree"}, {"role": "assistant", "content": "Build a tree-object from ls-tree formatted text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-multi-pack-index"}, {"role": "assistant", "content": "Write and verify multi-pack-indexes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-objects"}, {"role": "assistant", "content": "Create a packed archive of objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune-packed"}, {"role": "assistant", "content": "Remove extra objects that are already in pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-read-tree"}, {"role": "assistant", "content": "Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-replay"}, {"role": "assistant", "content": "EXPERIMENTAL: Replay commits on a new base, works with bare repos too"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-objects"}, {"role": "assistant", "content": "Unpack objects from a packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-ref"}, {"role": "assistant", "content": "Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cat-file"}, {"role": "assistant", "content": "Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cherry"}, {"role": "assistant", "content": "Find commits yet to be applied to upstream"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-files"}, {"role": "assistant", "content": "Compares files in the working tree and the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-tree"}, {"role": "assistant", "content": "Compares the content and mode of blobs found via two tree objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-ref"}, {"role": "assistant", "content": "Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-for-each-repo"}, {"role": "assistant", "content": "Run a Git command on a list of repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-files"}, {"role": "assistant", "content": "Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-remote"}, {"role": "assistant", "content": "List references in a remote repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-ls-tree"}, {"role": "assistant", "content": "List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-base"}, {"role": "assistant", "content": "Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-name-rev"}, {"role": "assistant", "content": "Find symbolic names for given revs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-list"}, {"role": "assistant", "content": "Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-rev-parse"}, {"role": "assistant", "content": "Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-index"}, {"role": "assistant", "content": "Show packed archive index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-ref"}, {"role": "assistant", "content": "List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-unpack-file"}, {"role": "assistant", "content": "Creates a temporary file with a blob’s contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-var"}, {"role": "assistant", "content": "Show a Git logical variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-verify-pack"}, {"role": "assistant", "content": "Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-daemon"}, {"role": "assistant", "content": "A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fetch-pack"}, {"role": "assistant", "content": "Receive missing objects from another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-backend"}, {"role": "assistant", "content": "Server side implementation of Git over HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-send-pack"}, {"role": "assistant", "content": "Push objects over Git protocol to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-server-info"}, {"role": "assistant", "content": "Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-fetch"}, {"role": "assistant", "content": "Download from a remote Git repository via HTTP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-receive-pack"}, {"role": "assistant", "content": "Receive what is pushed into the repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-shell"}, {"role": "assistant", "content": "Restricted login shell for Git-only SSH access"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-pack"}, {"role": "assistant", "content": "Send objects packed back to git-fetch-pack"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-attr"}, {"role": "assistant", "content": "Display gitattributes information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-mailmap"}, {"role": "assistant", "content": "Show canonical names and email addresses of contacts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ref-format"}, {"role": "assistant", "content": "Ensures that a reference name is well formed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-column"}, {"role": "assistant", "content": "Display data in columns"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-cache"}, {"role": "assistant", "content": "Helper to temporarily store passwords in memory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential-store"}, {"role": "assistant", "content": "Helper to store credentials on disk"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fmt-merge-msg"}, {"role": "assistant", "content": "Produce a merge commit message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hook"}, {"role": "assistant", "content": "Run git hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-interpret-trailers"}, {"role": "assistant", "content": "Add or parse structured information in commit messages"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailinfo"}, {"role": "assistant", "content": "Extracts patch and authorship from a single e-mail message"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mailsplit"}, {"role": "assistant", "content": "Simple UNIX mbox splitter program"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-patch-id"}, {"role": "assistant", "content": "Compute unique ID for a patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-i18n"}, {"role": "assistant", "content": "Git’s i18n setup code for shell scripts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stripspace"}, {"role": "assistant", "content": "Remove unnecessary whitespace"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcore-tutorial"}, {"role": "assistant", "content": "A Git core tutorial for developers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcredentials"}, {"role": "assistant", "content": "Providing usernames and passwords to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcvs-migration"}, {"role": "assistant", "content": "Git for CVS users"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitdiffcore"}, {"role": "assistant", "content": "Tweaking diff output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  giteveryday"}, {"role": "assistant", "content": "A useful minimum set of commands for Everyday Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitfaq"}, {"role": "assistant", "content": "Frequently asked questions about using Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitglossary"}, {"role": "assistant", "content": "A Git Glossary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitnamespaces"}, {"role": "assistant", "content": "Git namespaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitsubmodules"}, {"role": "assistant", "content": "Mounting one repository inside another"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial"}, {"role": "assistant", "content": "A tutorial introduction to Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitattributes"}, {"role": "assistant", "content": "Defining attributes per path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitcli"}, {"role": "assistant", "content": "Git command-line interface and conventions"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  githooks"}, {"role": "assistant", "content": "Hooks used by Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitignore"}, {"role": "assistant", "content": "Specifies intentionally untracked files to ignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmodules"}, {"role": "assistant", "content": "Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrevisions"}, {"role": "assistant", "content": "Specifying revisions and ranges for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-chunk"}, {"role": "assistant", "content": "Chunk-based file formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-index"}, {"role": "assistant", "content": "Git index format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-pack"}, {"role": "assistant", "content": "Git pack format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-common"}, {"role": "assistant", "content": "Things common to various protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-http"}, {"role": "assistant", "content": "Git HTTP-based protocols"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-pack"}, {"role": "assistant", "content": "How packs are transferred over-the-wire"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-v2"}, {"role": "assistant", "content": "Git Wire Protocol, Version 2"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <object>"}, {"role": "assistant", "content": "Indicates the object name for any type of object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <blob>"}, {"role": "assistant", "content": "Indicates a blob object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree>"}, {"role": "assistant", "content": "Indicates a tree object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit>"}, {"role": "assistant", "content": "Indicates a commit object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <commit-ish>"}, {"role": "assistant", "content": "Indicates a commit or tag object name.  A\ncommand that takes a <commit-ish> argument ultimately wants to\noperate on a <commit> object but automatically dereferences\n<tag> objects that point at a <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <file>"}, {"role": "assistant", "content": "Indicates a filename - almost always relative to the\nroot of the tree structure GIT_INDEX_FILE describes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  HEAD"}, {"role": "assistant", "content": "indicates the head of the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tag>"}, {"role": "assistant", "content": "a valid tag name (i.e. a refs/tags/<tag> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <head>"}, {"role": "assistant", "content": "a valid head name (i.e. a refs/heads/<head> reference)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "File/Directory Structure Please see the gitrepository-layout document. Read githooks for more details about each hook. Higher level SCMs may provide and manage additional information in the $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Terminology Please see gitglossary ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won’t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIR"}, {"role": "assistant", "content": "If the GIT_DIR environment variable is set then it\nspecifies a path to use instead of the default .git for the base of the repository.\nThe --git-dir command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_WORK_TREE"}, {"role": "assistant", "content": "Set the path to the root of the working tree.\nThis can also be controlled by the --work-tree command-line\noption and the core.worktree configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NAMESPACE"}, {"role": "assistant", "content": "Set the Git namespace; see gitnamespaces for details.\nThe --namespace command-line option also sets this value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CEILING_DIRECTORIES"}, {"role": "assistant", "content": "This should be a colon-separated list of absolute paths.  If\nset, it is a list of directories that Git should not chdir up\ninto while looking for a repository directory (useful for\nexcluding slow-loading network directories).  It will not\nexclude the current working directory or a GIT_DIR set on the\ncommand line or in the environment.  Normally, Git has to read\nthe entries in this list and resolve any symlink that\nmight be present in order to compare them with the current\ndirectory.  However, if even this access is slow, you\ncan add an empty entry to the list to tell Git that the\nsubsequent entries are not symlinks and needn’t be resolved;\ne.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DISCOVERY_ACROSS_FILESYSTEM"}, {"role": "assistant", "content": "When run in a directory that does not have \".git\" repository\ndirectory, Git tries to find such a directory in the parent\ndirectories to find the top of the working tree, but by default it\ndoes not cross filesystem boundaries.  This Boolean environment variable\ncan be set to true to tell Git not to stop at filesystem\nboundaries.  Like GIT_CEILING_DIRECTORIES , this will not affect\nan explicit repository directory set via GIT_DIR or on the\ncommand line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMON_DIR"}, {"role": "assistant", "content": "If this variable is set to a path, non-worktree files that are\nnormally in $GIT_DIR will be taken from this path\ninstead. Worktree-specific files such as HEAD or index are\ntaken from $GIT_DIR. See gitrepository-layout and git-worktree for\ndetails. This variable has lower precedence than other path\nvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_REF_FORMAT"}, {"role": "assistant", "content": "If this variable is set, the default reference backend format for new\nrepositories will be set to this value. The default is \"files\".\nSee --ref-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_DATE"}, {"role": "assistant", "content": "The date used for the author identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_NAME"}, {"role": "assistant", "content": "The human-readable name used in the committer identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_DATE"}, {"role": "assistant", "content": "The date used for the committer identity when creating commit or tag objects, or\nwhen writing reflogs. See git-commit for valid formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_OPTS"}, {"role": "assistant", "content": "Only valid setting is \"--unified=??\" or \"-u??\" to set the\nnumber of context lines shown when a unified diff is created.\nThis takes precedence over any \"-U\" or \"--unified\" option\nvalue passed on the Git diff command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EXTERNAL_DIFF"}, {"role": "assistant", "content": "When the environment variable GIT_EXTERNAL_DIFF is set, the\nprogram named by it is called to generate diffs, and Git\ndoes not use its builtin diff machinery.\nFor a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters: path old-file old-hex old-mode new-file new-hex new-mode where:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-file"}, {"role": "assistant", "content": "are files GIT_EXTERNAL_DIFF can use to read the\ncontents of <old|new>,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-hex"}, {"role": "assistant", "content": "are the 40-hexdigit SHA-1 hashes,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <old|new>-mode"}, {"role": "assistant", "content": "are the octal representation of the file modes. The file parameters can point at the user’s working file\n(e.g. new-file in \"git-diff-files\"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the\nindex). GIT_EXTERNAL_DIFF should not worry about unlinking the\ntemporary file — it is removed when GIT_EXTERNAL_DIFF exits. For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\nparameter, <path>. For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_COUNTER"}, {"role": "assistant", "content": "A 1-based counter incremented by one for every path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DIFF_PATH_TOTAL"}, {"role": "assistant", "content": "The total number of paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_MERGE_VERBOSITY"}, {"role": "assistant", "content": "A number controlling the amount of output shown by\nthe recursive merge strategy.  Overrides merge.verbosity.\nSee git-merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides $EDITOR and $VISUAL .\nIt is used by several Git commands when, on interactive mode,\nan editor is to be launched. See also git-var and the core.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SEQUENCE_EDITOR"}, {"role": "assistant", "content": "This environment variable overrides the configured Git editor\nwhen editing the todo list of an interactive rebase. See also git-rebase and the sequence.editor option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH  GIT_SSH_COMMAND"}, {"role": "assistant", "content": "If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\nThe command-line parameters passed to the configured command are\ndetermined by the ssh variant.  See ssh.variant option in git-config for details. $GIT_SSH_COMMAND takes precedence over $GIT_SSH , and is interpreted\nby the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded). Usually it is easier to configure any desired options through your\npersonal .ssh/config file.  Please consult your ssh documentation\nfor further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git’s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ATTR_SOURCE"}, {"role": "assistant", "content": "Sets the treeish that gitattributes will be read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ASKPASS"}, {"role": "assistant", "content": "If this environment variable is set, then Git commands which need to\nacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\nwill call this program with a suitable prompt as command-line argument\nand read the password from its STDOUT. See also the core.askPass option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TERMINAL_PROMPT"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, git will not prompt\non the terminal (e.g., when asking for HTTP authentication)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_GLOBAL  GIT_CONFIG_SYSTEM"}, {"role": "assistant", "content": "Take the configuration from the given files instead from global or\nsystem-level configuration files. If GIT_CONFIG_SYSTEM is set, the\nsystem config file defined at build time (usually /etc/gitconfig )\nwill not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\nbe set to /dev/null to skip reading configuration files of the\nrespective level."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_CONFIG_NOSYSTEM"}, {"role": "assistant", "content": "Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.  This Boolean environment variable can\nbe used along with $HOME and $XDG_CONFIG_HOME to create a\npredictable environment for a picky script, or you can set it\nto true to temporarily avoid using a buggy /etc/gitconfig file while\nwaiting for someone with sufficient permissions to fix it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_FLUSH"}, {"role": "assistant", "content": "If this Boolean environment variable is set to true, then commands such\nas git blame (in incremental mode), git rev-list , git log , git check-attr and git check-ignore will\nforce a flush of the output stream after each record have been\nflushed. If this\nvariable is set to false, the output of these commands will be done\nusing completely buffered I/O.   If this environment variable is\nnot set, Git will choose buffered or record-oriented flushing\nbased on whether stdout appears to be redirected to a file or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_FSMONITOR"}, {"role": "assistant", "content": "Enables trace messages for the filesystem monitor extension.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACK_ACCESS"}, {"role": "assistant", "content": "Enables trace messages for all accesses to any packs. For each\naccess, the pack file name and an offset in the pack is\nrecorded. This may be helpful for troubleshooting some\npack-related performance problems.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKET"}, {"role": "assistant", "content": "Enables trace messages for all packets coming in or out of a\ngiven program. This can help with debugging object negotiation\nor other protocol issues. Tracing is turned off at a packet\nstarting with \"PACK\" (but see GIT_TRACE_PACKFILE below).\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PACKFILE"}, {"role": "assistant", "content": "Enables tracing of packfiles sent or received by a\ngiven program. Unlike other trace output, this trace is\nverbatim: no headers, and no quoting of binary data. You almost\ncertainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack ) rather than displaying it on\nthe terminal or mixing it with other trace output. Note that this is currently only implemented for the client side\nof clones and fetches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_PERFORMANCE"}, {"role": "assistant", "content": "Enables performance related trace messages, e.g. total execution\ntime of each Git command.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REFS"}, {"role": "assistant", "content": "Enables trace messages for operations on the ref database.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SETUP"}, {"role": "assistant", "content": "Enables trace messages printing the .git, working tree and current\nworking directory after Git has completed its setup phase.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_SHALLOW"}, {"role": "assistant", "content": "Enables trace messages that can help debugging fetching /\ncloning of shallow repositories.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL_NO_DATA"}, {"role": "assistant", "content": "When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump\ndata (that is, only dump info lines and headers)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2"}, {"role": "assistant", "content": "Enables more detailed trace messages from the \"trace2\" library.\nOutput from GIT_TRACE2 is a simple text-based format for human\nreadability. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions). In addition, if the variable is set to af_unix:[<socket-type>:]<absolute-pathname> , Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either stream or dgram . Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages. See Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_EVENT"}, {"role": "assistant", "content": "This setting writes a JSON-based format that is suited for machine\ninterpretation.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE2_PERF"}, {"role": "assistant", "content": "In addition to the text-based messages available in GIT_TRACE2 , this\nsetting writes a column-based format for understanding nesting\nregions.\nSee GIT_TRACE2 for available trace output options and Trace2 documentation for full details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_REDACT"}, {"role": "assistant", "content": "By default, when tracing is activated, Git redacts the values of\ncookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\nheader and packfile URIs. Set this Boolean environment variable to false to prevent this\nredaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_REPLACE_OBJECTS"}, {"role": "assistant", "content": "Setting and exporting this environment variable tells Git to\nignore replacement refs and do not replace Git objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_LITERAL_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs literally, rather than as glob patterns. For example,\nrunning GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search\nfor commits that touch the path *.c , not any paths that the\nglob *.c matches. You might want this if you are feeding\nliteral paths to Git (e.g., paths previously given to you by git ls-tree , --raw diff output, etc)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NOGLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as literal (aka \"literal\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ICASE_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as case-insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REFLOG_ACTION"}, {"role": "assistant", "content": "When a ref is updated, reflog entries are created to keep\ntrack of the reason why the ref was updated (which is\ntypically the name of the high-level command that updated\nthe ref), in addition to the old and new values of the ref.\nA scripted Porcelain command can use set_reflog_action\nhelper function in git-sh-setup to set its name to this\nvariable when it is invoked as the top level command by the\nend user, to be recorded in the body of the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REF_PARANOIA"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, ignore broken or badly named refs when iterating\nover lists of refs. Normally Git will try to include any such\nrefs, which may cause some operations to fail. This is usually\npreferable, as potentially destructive operations (e.g., git-prune ) are better off aborting rather than\nignoring broken refs (and thus considering the history they\npoint to as not worth saving). The default value is 1 (i.e.,\nbe paranoid about detecting and aborting all operations). You\nshould not normally need to set this to 0 , but it may be\nuseful when trying to salvage data from a corrupted repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMIT_GRAPH_PARANOIA"}, {"role": "assistant", "content": "When loading a commit object from the commit-graph, Git performs an\nexistence check on the object in the object database. This is done to\navoid issues with stale commit-graphs that contain references to\nalready-deleted commits, but comes with a performance penalty. The default is \"false\", which disables the aforementioned behavior.\nSetting this to \"true\" enables the existence check so that stale commits\nwill never be returned from the commit-graph at the cost of performance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALLOW_PROTOCOL"}, {"role": "assistant", "content": "If set to a colon-separated list of protocols, behave as if protocol.allow is set to never , and each of the listed\nprotocols has protocol.<name>.allow set to always (overriding any existing configuration). See the description of protocol.allow in git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL_FROM_USER"}, {"role": "assistant", "content": "Set this Boolean environment variable to false to prevent protocols used by fetch/push/clone which are\nconfigured to the user state.  This is useful to restrict recursive\nsubmodule initialization from an untrusted repository or for programs\nwhich feed potentially-untrusted URLS to git commands.  See git-config for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROTOCOL"}, {"role": "assistant", "content": "For internal use only.  Used in handshaking the wire protocol.\nContains a colon : separated list of keys with optional values <key>[=<value>] .  Presence of unknown keys and values must be\nignored. Note that servers may need to be configured to allow this variable to\npass over some transports. It will be propagated automatically when\naccessing local repositories (i.e., file:// or a filesystem path), as\nwell as over the git:// protocol. For git-over-http, it should work\nautomatically in most configurations, but see the discussion in git-http-backend . For git-over-ssh, the ssh server may need\nto be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH). This configuration is optional. If the variable is not propagated, then\nclients will fall back to the original \"v0\" protocol (but may miss out\non some performance improvements or features). This variable currently\nonly affects clones and fetches; it is not yet used for pushes (but may\nbe in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OPTIONAL_LOCKS"}, {"role": "assistant", "content": "If this Boolean environment variable is set to false, Git will complete any requested operation without\nperforming any optional sub-operations that require taking a lock.\nFor example, this will prevent git status from refreshing the\nindex as a side effect. This is useful for processes running in\nthe background which do not want to cause lock contention with\nother operations on the repository.  Defaults to 1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_REDIRECT_STDIN  GIT_REDIRECT_STDOUT  GIT_REDIRECT_STDERR"}, {"role": "assistant", "content": "Windows-only: allow redirecting the standard input/output/error\nhandles to paths specified by the environment variables. This is\nparticularly useful in multi-threaded applications where the\ncanonical way to pass standard handles via CreateProcess() is\nnot an option because it would require the handles to be marked\ninheritable (and consequently every spawned process would\ninherit them, possibly blocking regular Git operations). The\nprimary intended use case is to use named pipes for communication\n(e.g. \\\\.\\pipe\\my-git-stdin-123 ). Two special values are supported: off will simply close the\ncorresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1 , standard error will be redirected to the same handle as\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout ) and the raw\ndiff output ( git-diff ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Discussion More detail on the following is available from the Git concepts chapter of the\nuser-manual and gitcore-tutorial . A Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads. The object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits. The commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project’s history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development. All objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose. When first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\". Named pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref (the\nlatter is called a \"symbolic ref\").\nRefs with names beginning refs/head/ contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under refs/tags/ .  A symbolic ref named HEAD contains the name of the currently checked-out branch. The index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index. The index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "SECURITY Some configuration options and hook files may cause Git to run arbitrary\nshell commands. Because configuration and hooks are not copied using git clone , it is generally safe to clone remote repositories with\nuntrusted content, inspect them with git log , and so on. However, it is not safe to run Git commands in a .git directory (or\nthe working tree that surrounds it) when that .git directory itself\ncomes from an untrusted source. The commands in its config and hooks\nare executed in the usual way. By default, Git will refuse to run when the repository is owned by\nsomeone other than the user running the command. See the entry for safe.directory in git-config . While this can help protect\nyou in a multi-user environment, note that you can also acquire\nuntrusted repositories that are owned by you (for example, if you\nextract a zip file or tarball from an untrusted source). In such cases,\nyou’d need to \"sanitize\" the untrusted repository first. If you have an untrusted .git directory, you should first clone it\nwith git clone --no-local to obtain a clean copy. Git does restrict\nthe set of options and hooks that will be run by upload-pack , which\nhandles the server side of a clone or fetch, but beware that the\nsurface area for attack against upload-pack is large, so this does\ncarry some risk. The safest thing is to serve the repository as an\nunprivileged user (either via git-daemon , ssh, or using\nother tools to change user ids). See the discussion in the SECURITY section of git-upload-pack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "FURTHER DOCUMENTATION See the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user. The Git concepts chapter of the\nuser-manual and gitcore-tutorial both provide\nintroductions to the underlying Git architecture. See gitworkflows for an overview of recommended workflows. See also the howto documents for some useful\nexamples. The internals are documented in the Git API documentation . Users migrating from CVS may also want to\nread gitcvs-migration ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Authors Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n< git@vger.kernel.org >. https://openhub.net/p/git/contributors/summary gives you a more complete list of contributors. If you have a clone of git.git itself, the\noutput of git-shortlog and git-blame can show you\nthe authors for specific parts of the project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Reporting Bugs Report bugs to the Git mailing list < git@vger.kernel.org > where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions. Issues which are security relevant should be disclosed privately to\nthe Git Security mailing list < git-security@googlegroups.com >."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "NAME git-am - Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "SYNOPSIS git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8] [--no-verify]\n\t [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n\t [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n\t [--whitespace=<action>] [-C<n>] [-p<n>] [--directory=<dir>]\n\t [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]\n\t [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]\n\t [--quoted-cr=<action>]\n\t [--empty=(stop|drop|keep)]\n\t [(<mbox> | <Maildir>)…​] git am (--continue | --skip | --abort | --quit | --show-current-patch[=(diff|raw)] | --allow-empty)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "DESCRIPTION Splits mail messages in a mailbox into commit log messages,\nauthorship information, and patches, and applies them to the\ncurrent branch. You could think of it as a reverse operation\nof git-format-patch run on a branch with a straight\nhistory without merges."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  (<mbox>|<Maildir>)…​"}, {"role": "assistant", "content": "The list of mailbox files to read patches from. If you do not\nsupply this argument, the command reads from the standard input.\nIf you supply directories, they will be treated as Maildirs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -s  --signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -k  --keep"}, {"role": "assistant", "content": "Pass -k flag to git mailinfo (see git-mailinfo )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --keep-non-patch"}, {"role": "assistant", "content": "Pass -b flag to git mailinfo (see git-mailinfo )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --[no-]keep-cr"}, {"role": "assistant", "content": "With --keep-cr , call git mailsplit (see git-mailsplit )\nwith the same option, to prevent it from stripping CR at the end of\nlines. am.keepcr configuration variable can be used to specify the\ndefault behaviour. --no-keep-cr is useful to override am.keepcr ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -c  --scissors"}, {"role": "assistant", "content": "Remove everything in body before a scissors line (see git-mailinfo ). Can be activated by default using\nthe mailinfo.scissors configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --no-scissors"}, {"role": "assistant", "content": "Ignore scissors lines (see git-mailinfo )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --quoted-cr=<action>"}, {"role": "assistant", "content": "This flag will be passed down to git mailinfo (see git-mailinfo )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --empty=(drop|keep|stop)"}, {"role": "assistant", "content": "How to handle an e-mail message lacking a patch: drop The e-mail message will be skipped. keep An empty commit will be created, with the contents of the e-mail\nmessage as its log. stop The command will fail, stopping in the middle of the current am session. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -m  --message-id"}, {"role": "assistant", "content": "Pass the -m flag to git mailinfo (see git-mailinfo ),\nso that the Message-ID header is added to the commit message.\nThe am.messageid configuration variable can be used to specify\nthe default behaviour."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --no-message-id"}, {"role": "assistant", "content": "Do not add the Message-ID header to the commit message. no-message-id is useful to override am.messageid ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -q  --quiet"}, {"role": "assistant", "content": "Be quiet. Only print error messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -u  --utf8"}, {"role": "assistant", "content": "Pass -u flag to git mailinfo (see git-mailinfo ).\nThe proposed commit log message taken from the e-mail\nis re-coded into UTF-8 encoding (configuration variable i18n.commitEncoding can be used to specify the project’s\npreferred encoding if it is not UTF-8). This was optional in prior versions of git, but now it is the\ndefault.   You can use --no-utf8 to override this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --no-utf8"}, {"role": "assistant", "content": "Pass -n flag to git mailinfo (see git-mailinfo )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -3  --3way  --no-3way"}, {"role": "assistant", "content": "When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --rerere-autoupdate  --no-rerere-autoupdate"}, {"role": "assistant", "content": "After the rerere mechanism reuses a recorded resolution on\nthe current conflict to update the files in the working\ntree, allow it to also update the index with the result of\nresolution. --no-rerere-autoupdate is a good way to\ndouble-check what rerere did and catch potential\nmismerges, before committing the result to the index with a\nseparate git add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --ignore-space-change  --ignore-whitespace  --whitespace=<action>  -C<n>  -p<n>  --directory=<dir>  --exclude=<path>  --include=<path>  --reject"}, {"role": "assistant", "content": "These flags are passed to the git apply (see git-apply )\nprogram that applies\nthe patch. Valid <action> for the --whitespace option are: nowarn , warn , fix , error , and error-all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --patch-format"}, {"role": "assistant", "content": "By default the command will try to detect the patch format\nautomatically. This option allows the user to bypass the automatic\ndetection and specify the patch format that the patch(es) should be\ninterpreted as. Valid formats are mbox, mboxrd,\nstgit, stgit-series, and hg."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -i  --interactive"}, {"role": "assistant", "content": "Run interactively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -n  --no-verify"}, {"role": "assistant", "content": "By default, the pre-applypatch and applypatch-msg hooks are run.\nWhen any of --no-verify or -n is given, these are bypassed.\nSee also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --committer-date-is-author-date"}, {"role": "assistant", "content": "By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the committer date by using the same\nvalue as the author date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --ignore-date"}, {"role": "assistant", "content": "By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the author date by using the same\nvalue as the committer date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --skip"}, {"role": "assistant", "content": "Skip the current patch.  This is only meaningful when\nrestarting an aborted patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --continue  -r  --resolved"}, {"role": "assistant", "content": "After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --resolvemsg=<msg>"}, {"role": "assistant", "content": "When a patch failure occurs, <msg> will be printed\nto the screen before exiting.  This overrides the\nstandard message informing you to use --continue or --skip to handle the failure.  This is solely\nfor internal use between git rebase and git am ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --abort"}, {"role": "assistant", "content": "Restore the original branch and abort the patching operation.\nRevert the contents of files involved in the am operation to their\npre-am state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --quit"}, {"role": "assistant", "content": "Abort the patching operation but keep HEAD and the index\nuntouched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --show-current-patch[=(diff|raw)]"}, {"role": "assistant", "content": "Show the message at which git am has stopped due to\nconflicts.  If raw is specified, show the raw contents of\nthe e-mail message; if diff , show the diff portion only.\nDefaults to raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --allow-empty"}, {"role": "assistant", "content": "After a patch failure on an input e-mail message lacking a patch,\ncreate an empty commit with the contents of the e-mail message\nas its log message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  drop"}, {"role": "assistant", "content": "The e-mail message will be skipped."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  keep"}, {"role": "assistant", "content": "An empty commit will be created, with the contents of the e-mail\nmessage as its log."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  stop"}, {"role": "assistant", "content": "The command will fail, stopping in the middle of the current am session. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "DISCUSSION The commit author name is taken from the \"From: \" line of the\nmessage, and commit author date is taken from the \"Date: \" line\nof the message.  The \"Subject: \" line is used as the title of\nthe commit, after stripping common prefix \"[PATCH <anything>]\".\nThe \"Subject: \" line is supposed to concisely describe what the\ncommit is about in one line of text. \"From: \", \"Date: \", and \"Subject: \" lines starting the body override the\nrespective commit author name and title values taken from the headers. The commit message is formed by the title taken from the\n\"Subject: \", a blank line and the body of the message up to\nwhere the patch begins.  Excess whitespace at the end of each\nline is automatically stripped. The patch is expected to be inline, directly following the\nmessage.  Any line that is of the form: three-dashes and end-of-line, or a line that begins with \"diff -\", or a line that begins with \"Index: \" is taken as the beginning of a patch, and the commit log message\nis terminated before the first occurrence of such a line. When initially invoking git am , you give it the names of the mailboxes\nto process.  Upon seeing the first patch that does not apply, it\naborts in the middle.  You can recover from this in one of two ways: skip the current patch by re-running the command with the --skip option. hand resolve the conflict in the working directory, and update\nthe index file to bring it into a state that the patch should\nhave produced.  Then run the command with the --continue option. The command refuses to process new mailboxes until the current\noperation is finished, so if you decide to start over from scratch,\nrun git am --abort before running the command with mailbox\nnames. Before any patches are applied, ORIG_HEAD is set to the tip of the\ncurrent branch.  This is useful if you have problems with multiple\ncommits, like running git am on the wrong branch or an error in the\ncommits that is more easily fixed by changing the mailbox (e.g.\nerrors in the \"From:\" lines)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox"}, {"role": "assistant", "content": "HOOKS This command can run applypatch-msg , pre-applypatch ,\nand post-applypatch hooks.  See githooks for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  am.keepcr"}, {"role": "assistant", "content": "If true, git-am will call git-mailsplit for patches in mbox format\nwith parameter --keep-cr . In this case git-mailsplit will\nnot remove \\r from lines ending with \\r\\n . Can be overridden\nby giving --no-keep-cr from the command line.\nSee git-am , git-mailsplit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  am.threeWay"}, {"role": "assistant", "content": "By default, git am will fail if the patch does not apply cleanly. When\nset to true, this setting tells git am to fall back on 3-way merge if\nthe patch records the identity of blobs it is supposed to apply to and\nwe have those blobs available locally (equivalent to giving the --3way option from the command line). Defaults to false .\nSee git-am ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "NAME git-apply - Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "SYNOPSIS git apply [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]\n\t  [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]\n\t  [--allow-binary-replacement | --binary] [--reject] [-z]\n\t  [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]\n\t  [--ignore-space-change | --ignore-whitespace]\n\t  [--whitespace=(nowarn|warn|fix|error|error-all)]\n\t  [--exclude=<path>] [--include=<path>] [--directory=<root>]\n\t  [--verbose | --quiet] [--unsafe-paths] [--allow-empty] [<patch>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "DESCRIPTION Reads the supplied diff output (i.e. \"a patch\") and applies it to files.\nWhen running from a subdirectory in a repository, patched paths\noutside the directory are ignored.\nWith the --index option, the patch is also applied to the index, and\nwith the --cached option, the patch is only applied to the index.\nWithout these options, the command applies the patch only to files,\nand does not require them to be in a Git repository. This command applies the patch but does not create a commit.  Use git-am to create commits from patches generated by git-format-patch and/or received by email."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  <patch>…​"}, {"role": "assistant", "content": "The files to read the patch from. - can be used to read\nfrom the standard input."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --stat"}, {"role": "assistant", "content": "Instead of applying the patch, output diffstat for the\ninput.  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows the number of added and\ndeleted lines in decimal notation and the pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 .  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --summary"}, {"role": "assistant", "content": "Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames, and mode changes.\nTurns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --check"}, {"role": "assistant", "content": "Instead of applying the patch, see if the patch is\napplicable to the current working tree and/or the index\nfile and detects errors.  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --index"}, {"role": "assistant", "content": "Apply the patch to both the index and the working tree (or\nmerely check that it would apply cleanly to both if --check is\nin effect). Note that --index expects index entries and\nworking tree copies for relevant paths to be identical (their\ncontents and metadata such as file mode must match), and will\nraise an error if they are not, even if the patch would apply\ncleanly to both the index and the working tree in isolation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --cached"}, {"role": "assistant", "content": "Apply the patch to just the index, without touching the working\ntree. If --check is in effect, merely check that it would\napply cleanly to the index entry."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --intent-to-add"}, {"role": "assistant", "content": "When applying the patch only to the working tree, mark new\nfiles to be added to the index later (see --intent-to-add option in git-add ). This option is ignored unless\nrunning in a Git repository and --index is not specified.\nNote that --index could be implied by other options such\nas --cached or --3way ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -3  --3way"}, {"role": "assistant", "content": "Attempt 3-way merge if the patch records the identity of blobs it is supposed\nto apply to and we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option unless the --cached option is used, and is incompatible with the --reject option.\nWhen used with the --cached option, any conflicts are left at higher stages\nin the cache."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --build-fake-ancestor=<file>"}, {"role": "assistant", "content": "Newer git diff output has embedded index information for each blob to help identify the original version that\nthe patch applies to.  When this flag is given, and if\nthe original versions of the blobs are available locally,\nbuilds a temporary index containing those blobs. When a pure mode change is encountered (which has no index information),\nthe information is read from the current index instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -R  --reverse"}, {"role": "assistant", "content": "Apply the patch in reverse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --reject"}, {"role": "assistant", "content": "For atomicity, git apply by default fails the whole patch and\ndoes not touch the working tree when some of the hunks\ndo not apply.  This option makes it apply\nthe parts of the patch that are applicable, and leave the\nrejected hunks in corresponding *.rej files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -z"}, {"role": "assistant", "content": "When --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -p<n>"}, {"role": "assistant", "content": "Remove <n> leading path components (separated by slashes) from\ntraditional diff paths. E.g., with -p2 , a patch against a/dir/file will be applied directly to file . The default is\n1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -C<n>"}, {"role": "assistant", "content": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --unidiff-zero"}, {"role": "assistant", "content": "By default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0 . To bypass these\nchecks use --unidiff-zero . Note, for the reasons stated above, the usage of context-free patches is\ndiscouraged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --apply"}, {"role": "assistant", "content": "If you use any of the options marked \"Turns off apply \" above, git apply reads and outputs the\nrequested information without actually applying the\npatch.  Give this flag after those flags to also apply\nthe patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --no-add"}, {"role": "assistant", "content": "When applying a patch, ignore additions made by the\npatch.  This can be used to extract the common part between\ntwo files by first running diff on them and applying\nthe result with this option, which would apply the\ndeletion part but not the addition part."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --allow-binary-replacement  --binary"}, {"role": "assistant", "content": "Historically we did not allow binary patch application\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently, we always allow binary\npatch application, so this is a no-op."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --exclude=<path-pattern>"}, {"role": "assistant", "content": "Don’t apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to exclude certain\nfiles or directories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --include=<path-pattern>"}, {"role": "assistant", "content": "Apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to include certain\nfiles or directories. When --exclude and --include patterns are used, they are examined in the\norder they appear on the command line, and the first match determines if a\npatch to each path is used.  A patch to a path that does not match any\ninclude/exclude pattern is used by default if there is no include pattern\non the command line, and ignored if there is any include pattern."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --ignore-space-change  --ignore-whitespace"}, {"role": "assistant", "content": "When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the --whitespace option. New lines will still be fixed, though."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --whitespace=<action>"}, {"role": "assistant", "content": "When applying a patch, detect a new or modified line that has\nwhitespace errors.  What are considered whitespace errors is\ncontrolled by core.whitespace configuration.  By default,\ntrailing whitespaces (including lines that solely consist of\nwhitespaces) and a space character that is immediately followed\nby a tab character inside the initial indent of the line are\nconsidered whitespace errors. By default, the command outputs warning messages but applies the patch.\nWhen git-apply is used for statistics and not applying a\npatch, it defaults to nowarn . You can use different <action> values to control this\nbehavior: nowarn turns off the trailing whitespace warning. warn outputs warnings for a few such errors, but applies the\npatch as-is (default). fix outputs warnings for a few such errors, and applies the\npatch after fixing them ( strip is a synonym — the tool\nused to consider only trailing whitespace characters as errors, and the\nfix involved stripping them, but modern Gits do more). error outputs warnings for a few such errors, and refuses\nto apply the patch. error-all is similar to error but shows all errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --inaccurate-eof"}, {"role": "assistant", "content": "Under certain circumstances, some versions of diff do not correctly\ndetect a missing new-line at the end of the file. As a result, patches\ncreated by such diff programs do not record incomplete lines\ncorrectly. This option adds support for applying such patches by\nworking around this bug."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -v  --verbose"}, {"role": "assistant", "content": "Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -q  --quiet"}, {"role": "assistant", "content": "Suppress stderr output. Messages about patch status and progress\nwill not be printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --recount"}, {"role": "assistant", "content": "Do not trust the line counts in the hunk headers, but infer them\nby inspecting the patch (e.g. after editing the patch without\nadjusting the hunk headers appropriately)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --directory=<root>"}, {"role": "assistant", "content": "Prepend <root> to all filenames.  If a \"-p\" argument was also passed,\nit is applied before prepending the new root. For example, a patch that talks about updating a/git-gui.sh to b/git-gui.sh can be applied to the file in the working tree modules/git-gui/git-gui.sh by\nrunning git apply --directory=modules/git-gui ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --unsafe-paths"}, {"role": "assistant", "content": "By default, a patch that affects outside the working area\n(either a Git controlled working tree, or the current working\ndirectory when \"git apply\" is used as a replacement of GNU\npatch) is rejected as a mistake (or a mischief). When git apply is used as a \"better GNU patch\", the user can pass\nthe --unsafe-paths option to override this safety check.  This option\nhas no effect when --index or --cached is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --allow-empty"}, {"role": "assistant", "content": "Don’t return an error for patches containing no diff. This includes\nempty patches and patches with commit text only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  apply.ignoreWhitespace"}, {"role": "assistant", "content": "When set to change , tells git apply to ignore changes in\nwhitespace, in the same way as the --ignore-space-change option.\nWhen set to one of: no, none, never, false, it tells git apply to\nrespect all whitespace differences.\nSee git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  apply.whitespace"}, {"role": "assistant", "content": "Tells git apply how to handle whitespace, in the same way\nas the --whitespace option. See git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "SUBMODULES If the patch contains any changes to submodules then git apply treats these changes as follows. If --index is specified (explicitly or implicitly), then the submodule\ncommits must match the index exactly for the patch to apply.  If any\nof the submodules are checked-out, then these check-outs are completely\nignored, i.e., they are not required to be up to date or clean and they\nare not updated. If --index is not specified, then the submodule commits in the patch\nare ignored and only the absence or presence of the corresponding\nsubdirectory is checked and (if possible) updated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "NAME git-format-patch - Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "SYNOPSIS git format-patch [-k] [(-o|--output-directory) <dir> | --stdout]\n\t\t   [--no-thread | --thread[=<style>]]\n\t\t   [(--attach|--inline)[=<boundary>] | --no-attach]\n\t\t   [-s | --signoff]\n\t\t   [--signature=<signature> | --no-signature]\n\t\t   [--signature-file=<file>]\n\t\t   [-n | --numbered | -N | --no-numbered]\n\t\t   [--start-number <n>] [--numbered-files]\n\t\t   [--in-reply-to=<message-id>] [--suffix=.<sfx>]\n\t\t   [--ignore-if-in-upstream] [--always]\n\t\t   [--cover-from-description=<mode>]\n\t\t   [--rfc] [--subject-prefix=<subject-prefix>]\n\t\t   [(--reroll-count|-v) <n>]\n\t\t   [--to=<email>] [--cc=<email>]\n\t\t   [--[no-]cover-letter] [--quiet]\n\t\t   [--[no-]encode-email-headers]\n\t\t   [--no-notes | --notes[=<ref>]]\n\t\t   [--interdiff=<previous>]\n\t\t   [--range-diff=<previous> [--creation-factor=<percent>]]\n\t\t   [--filename-max-length=<n>]\n\t\t   [--progress]\n\t\t   [<common-diff-options>]\n\t\t   [ <since> | <revision-range> ]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "DESCRIPTION Prepare each non-merge commit with its \"patch\" in\none \"message\" per commit, formatted to resemble a UNIX mailbox.\nThe output of this command is convenient for e-mail submission or\nfor use with git am . A \"message\" generated by the command consists of three parts: A brief metadata header that begins with From <commit> with a fixed Mon Sep 17 00:00:00 2001 datestamp to help programs\nlike \"file(1)\" to recognize that the file is an output from this\ncommand, fields that record the author identity, the author date,\nand the title of the change (taken from the first paragraph of the\ncommit log message). The second and subsequent paragraphs of the commit log message. The \"patch\", which is the \"diff -p --stat\" output (see git-diff ) between the commit and its parent. The log message and the patch are separated by a line with a\nthree-dash line. There are two ways to specify which commits to operate on. A single commit, <since>, specifies that the commits leading\nto the tip of the current branch that are not in the history\nthat leads to the <since> to be output. Generic <revision-range> expression (see \"SPECIFYING\nREVISIONS\" section in gitrevisions ) means the\ncommits in the specified range. The first rule takes precedence in the case of a single <commit>.  To\napply the second rule, i.e., format everything since the beginning of\nhistory up until <commit>, use the --root option: git format-patch\n--root <commit> .  If you want to format only <commit> itself, you\ncan do this with git format-patch -1 <commit> . By default, each output file is numbered sequentially from 1, and uses the\nfirst line of the commit message (massaged for pathname safety) as\nthe filename. With the --numbered-files option, the output file names\nwill only be numbers, without the first line of the commit appended.\nThe names of the output files are printed to standard\noutput, unless the --stdout option is specified. If -o is specified, output files are created in <dir>.  Otherwise\nthey are created in the current working directory. The default path\ncan be set with the format.outputDirectory configuration option.\nThe -o option takes precedence over format.outputDirectory .\nTo store patches in the current working directory even when format.outputDirectory points elsewhere, use -o . . All directory\ncomponents will be created. By default, the subject of a single patch is \"[PATCH] \" followed by\nthe concatenation of lines from the commit message up to the first blank\nline (see the DISCUSSION section of git-commit ). When multiple patches are output, the subject prefix will instead be\n\"[PATCH n/m] \".  To force 1/1 to be added for a single patch, use -n .\nTo omit patch numbers from the subject, use -N . If given --thread , git-format-patch will generate In-Reply-To and References headers to make the second and subsequent patch mails appear\nas replies to the first mail; this also generates a Message-ID header to\nreference."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -p  --no-stat"}, {"role": "assistant", "content": "Generate plain patches without any diffstats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -<n>"}, {"role": "assistant", "content": "Prepare patches from the topmost <n> commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -o <dir>  --output-directory <dir>"}, {"role": "assistant", "content": "Use <dir> to store the resulting files, instead of the\ncurrent working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -n  --numbered"}, {"role": "assistant", "content": "Name output in [PATCH n/m] format, even with a single patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -N  --no-numbered"}, {"role": "assistant", "content": "Name output in [PATCH] format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --start-number <n>"}, {"role": "assistant", "content": "Start numbering the patches at <n> instead of 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --numbered-files"}, {"role": "assistant", "content": "Output file names will be a simple number sequence\nwithout the default first line of the commit appended."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -k  --keep-subject"}, {"role": "assistant", "content": "Do not strip/add [PATCH] from the first line of the\ncommit log message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -s  --signoff"}, {"role": "assistant", "content": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --stdout"}, {"role": "assistant", "content": "Print all commits to the standard output in mbox format,\ninstead of creating a file for each one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --attach[=<boundary>]"}, {"role": "assistant", "content": "Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: attachment ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-attach"}, {"role": "assistant", "content": "Disable the creation of an attachment, overriding the\nconfiguration setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --inline[=<boundary>]"}, {"role": "assistant", "content": "Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: inline ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --thread[=<style>]  --no-thread"}, {"role": "assistant", "content": "Controls addition of In-Reply-To and References headers to\nmake the second and subsequent mails appear as replies to the\nfirst.  Also controls generation of the Message-ID header to\nreference. The optional <style> argument can be either shallow or deep . shallow threading makes every mail a reply to the head of the\nseries, where the head is chosen from the cover letter, the --in-reply-to , and the first patch mail, in this order. deep threading makes every mail a reply to the previous one. The default is --no-thread , unless the format.thread configuration\nis set. --thread without an argument is equivalent to --thread=shallow . Beware that the default for git send-email is to thread emails\nitself.  If you want git format-patch to take care of threading, you\nwill want to ensure that threading is disabled for git send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --in-reply-to=<message-id>"}, {"role": "assistant", "content": "Make the first mail (or all the mails with --no-thread ) appear as a\nreply to the given <message-id>, which avoids breaking threads to\nprovide a new patch series."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-if-in-upstream"}, {"role": "assistant", "content": "Do not include a patch that matches a commit in\n<until>..<since>.  This will examine all patches reachable\nfrom <since> but not from <until> and compare them with the\npatches being generated, and any patch that matches is\nignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --always"}, {"role": "assistant", "content": "Include patches for commits that do not introduce any change,\nwhich are omitted by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --cover-from-description=<mode>"}, {"role": "assistant", "content": "Controls which parts of the cover letter will be automatically\npopulated using the branch’s description. If <mode> is message or default , the cover letter subject will be\npopulated with placeholder text. The body of the cover letter will be\npopulated with the branch’s description. This is the default mode when\nno configuration nor command line option is specified. If <mode> is subject , the first paragraph of the branch description will\npopulate the cover letter subject. The remainder of the description will\npopulate the body of the cover letter. If <mode> is auto , if the first paragraph of the branch description\nis greater than 100 bytes, then the mode will be message , otherwise subject will be used. If <mode> is none , both the cover letter subject and body will be\npopulated with placeholder text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --description-file=<file>"}, {"role": "assistant", "content": "Use the contents of <file> instead of the branch’s description\nfor generating the cover letter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --subject-prefix=<subject-prefix>"}, {"role": "assistant", "content": "Instead of the standard [PATCH] prefix in the subject\nline, instead use [<subject-prefix>] . This can be used\nto name a patch series, and can be combined with the --numbered option. The configuration variable format.subjectPrefix may also be used\nto configure a subject prefix to apply to a given repository for\nall patches. This is often useful on mailing lists which receive\npatches for several repositories and can be used to disambiguate\nthe patches (with a value of e.g. \"PATCH my-project\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --filename-max-length=<n>"}, {"role": "assistant", "content": "Instead of the standard 64 bytes, chomp the generated output\nfilenames at around <n> bytes (too short a value will be\nsilently raised to a reasonable length).  Defaults to the\nvalue of the format.filenameMaxLength configuration\nvariable, or 64 if unconfigured."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --rfc"}, {"role": "assistant", "content": "Prepends \"RFC\" to the subject prefix (producing \"RFC PATCH\" by\ndefault). RFC means \"Request For Comments\"; use this when sending\nan experimental patch for discussion rather than application."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -v <n>  --reroll-count=<n>"}, {"role": "assistant", "content": "Mark the series as the <n>-th iteration of the topic. The\noutput filenames have v<n> prepended to them, and the\nsubject prefix (\"PATCH\" by default, but configurable via the --subject-prefix option) has ` v<n>` appended to it.  E.g. --reroll-count=4 may produce v4-0001-add-makefile.patch file that has \"Subject: [PATCH v4 1/20] Add makefile\" in it. <n> does not have to be an integer (e.g. \"--reroll-count=4.4\",\nor \"--reroll-count=4rev2\" are allowed), but the downside of\nusing such a reroll-count is that the range-diff/interdiff\nwith the previous version does not state exactly which\nversion the new iteration is compared against."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --to=<email>"}, {"role": "assistant", "content": "Add a To: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-to discards all To: headers added so\nfar (from config or command line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --cc=<email>"}, {"role": "assistant", "content": "Add a Cc: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-cc discards all Cc: headers added so\nfar (from config or command line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --from  --from=<ident>"}, {"role": "assistant", "content": "Use ident in the From: header of each commit email. If the\nauthor ident of the commit is not textually identical to the\nprovided ident , place a From: header in the body of the\nmessage with the original author. If no ident is given, use\nthe committer ident. Note that this option is only useful if you are actually sending the\nemails and want to identify yourself as the sender, but retain the\noriginal author (and git am will correctly pick up the in-body\nheader). Note also that git send-email already handles this\ntransformation for you, and this option should not be used if you are\nfeeding the result to git send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]force-in-body-from"}, {"role": "assistant", "content": "With the e-mail sender specified via the --from option, by\ndefault, an in-body \"From:\" to identify the real author of\nthe commit is added at the top of the commit log message if\nthe sender is different from the author.  With this option,\nthe in-body \"From:\" is added even when the sender and the\nauthor have the same name and address, which may help if the\nmailing list software mangles the sender’s identity.\nDefaults to the value of the format.forceInBodyFrom configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --add-header=<header>"}, {"role": "assistant", "content": "Add an arbitrary header to the email headers.  This is in addition\nto any configured headers, and may be used multiple times.\nFor example, --add-header=\"Organization: git-foo\" .\nThe negated form --no-add-header discards all ( To: , Cc: , and custom) headers added so far from config or command\nline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]cover-letter"}, {"role": "assistant", "content": "In addition to the patches, generate a cover letter file\ncontaining the branch description, shortlog and the overall diffstat.  You can\nfill in a description in the file before sending it out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --encode-email-headers  --no-encode-email-headers"}, {"role": "assistant", "content": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047), instead of outputting the\nheaders verbatim. Defaults to the value of the format.encodeEmailHeaders configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --interdiff=<previous>"}, {"role": "assistant", "content": "As a reviewer aid, insert an interdiff into the cover letter,\nor as commentary of the lone patch of a 1-patch series, showing\nthe differences between the previous version of the patch series and\nthe series currently being formatted. previous is a single revision\nnaming the tip of the previous series which shares a common base with\nthe series being formatted (for example git format-patch\n--cover-letter --interdiff=feature/v1 -3 feature/v2 )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --range-diff=<previous>"}, {"role": "assistant", "content": "As a reviewer aid, insert a range-diff (see git-range-diff )\ninto the cover letter, or as commentary of the lone patch of a\n1-patch series, showing the differences between the previous\nversion of the patch series and the series currently being formatted. previous can be a single revision naming the tip of the previous\nseries if it shares a common base with the series being formatted (for\nexample git format-patch --cover-letter --range-diff=feature/v1 -3\nfeature/v2 ), or a revision range if the two versions of the series are\ndisjoint (for example git format-patch --cover-letter\n--range-diff=feature/v1~3..feature/v1 -3 feature/v2 ). Note that diff options passed to the command affect how the primary\nproduct of format-patch is generated, and they are not passed to\nthe underlying range-diff machinery used to generate the cover-letter\nmaterial (this may change in the future)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --creation-factor=<percent>"}, {"role": "assistant", "content": "Used with --range-diff , tweak the heuristic which matches up commits\nbetween the previous and current series of patches by adjusting the\ncreation/deletion cost fudge factor. See git-range-diff )\nfor details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --notes[=<ref>]  --no-notes"}, {"role": "assistant", "content": "Append the notes (see git-notes ) for the commit\nafter the three-dash line. The expected use case of this is to write supporting explanation for\nthe commit that does not belong to the commit log message proper,\nand include it with the patch submission. While one can simply write\nthese explanations after format-patch has run but before sending,\nkeeping them as Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the notes.rewrite configuration options in git-notes to use this workflow). The default is --no-notes , unless the format.notes configuration is\nset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]signature=<signature>"}, {"role": "assistant", "content": "Add a signature to each message produced. Per RFC 3676 the signature\nis separated from the body by a line with '-- ' on it. If the\nsignature option is omitted the signature defaults to the Git version\nnumber."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --signature-file=<file>"}, {"role": "assistant", "content": "Works just like --signature except the signature is read from a file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --suffix=.<sfx>"}, {"role": "assistant", "content": "Instead of using .patch as the suffix for generated\nfilenames, use specified suffix.  A common alternative is --suffix=.txt .  Leaving this empty will remove the .patch suffix. Note that the leading character does not have to be a dot; for example,\nyou can use --suffix=-patch to get 0001-description-of-my-change-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -q  --quiet"}, {"role": "assistant", "content": "Do not print the names of the generated files to standard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --no-binary"}, {"role": "assistant", "content": "Do not output contents of changes in binary files, instead\ndisplay a notice that those files changed.  Patches generated\nusing this option cannot be applied properly, but they are\nstill useful for code review."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --zero-commit"}, {"role": "assistant", "content": "Output an all-zero hash in each patch’s From header instead\nof the hash of the commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]base[=<commit>]"}, {"role": "assistant", "content": "Record the base tree information to identify the state the\npatch series applies to.  See the BASE TREE INFORMATION section\nbelow for details. If <commit> is \"auto\", a base commit is\nautomatically chosen. The --no-base option overrides a format.useAutoBase configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --root"}, {"role": "assistant", "content": "Treat the revision argument as a <revision-range>, even if it\nis just a single commit (that would normally be treated as a\n<since>).  Note that root commits included in the specified\nrange are always formatted as creation patches, independently\nof this flag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --progress"}, {"role": "assistant", "content": "Show progress reports on stderr as patches are generated."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "CONFIGURATION You can specify extra mail header lines to be added to each message,\ndefaults for the subject prefix and file suffix, number patches when\noutputting more than one patch, add \"To:\" or \"Cc:\" headers, configure\nattachments, change the patch output directory, and sign off patches\nwith configuration variables. [format]\n\theaders = \"Organization: git-foo\\n\"\n\tsubjectPrefix = CHANGE\n\tsuffix = .txt\n\tnumbered = auto\n\tto = <email>\n\tcc = <email>\n\tattach [ = mime-boundary-string ]\n\tsignOff = true\n\toutputDirectory = <directory>\n\tcoverLetter = auto\n\tcoverFromDescription = auto"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "DISCUSSION The patch produced by git format-patch is in UNIX mailbox format,\nwith a fixed \"magic\" time stamp to indicate that the file is output\nfrom format-patch rather than a real mailbox, like so: From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001\nFrom: Tony Luck <tony.luck@intel.com>\nDate: Tue, 13 Jul 2010 11:42:54 -0700\nSubject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\narch/arm config files were slimmed down using a python script\n(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)\n\nDo the same for ia64 so we can have sleek & trim looking\n... Typically it will be placed in a MUA’s drafts folder, edited to add\ntimely commentary that should not go in the changelog after the three\ndashes, and then sent as a message whose body, in our example, starts\nwith \"arch/arm config files were…​\".  On the receiving end, readers\ncan save interesting patches in a UNIX mailbox and apply them with git-am . When a patch is part of an ongoing discussion, the patch generated by git format-patch can be tweaked to take advantage of the git am\n--scissors feature.  After your response to the discussion comes a\nline that consists solely of \" -- >8 -- \" (scissors and perforation),\nfollowed by the patch with unnecessary header fields removed: ...\n> So we should do such-and-such.\n\nMakes sense to me.  How about this patch?\n\n-- >8 --\nSubject: [IA64] Put ia64 config files on the Uwe Kleine-König diet\n\narch/arm config files were slimmed down using a python script\n... When sending a patch this way, most often you are sending your own\npatch, so in addition to the \" From $SHA1 $magic_timestamp \" marker you\nshould omit From: and Date: lines from the patch file.  The patch\ntitle is likely to be different from the subject of the discussion the\npatch is in response to, so it is likely that you would want to keep\nthe Subject: line, like the example above. Checking for patch corruption Many mailers if not set up properly will corrupt whitespace.  Here are\ntwo common types of corruption: Empty context lines that do not have any whitespace. Non-empty context lines that have one extra whitespace at the\nbeginning. One way to test if your MUA is set up correctly is: Send the patch to yourself, exactly the way you would, except\nwith To: and Cc: lines that do not contain the list and\nmaintainer address. Save that patch to a file in UNIX mailbox format.  Call it a.patch,\nsay. Apply it: $ git fetch <project> master:test-apply\n$ git switch test-apply\n$ git restore --source=HEAD --staged --worktree :/\n$ git am a.patch If it does not apply correctly, there can be various reasons. The patch itself does not apply cleanly.  That is bad but\ndoes not have much to do with your MUA.  You might want to rebase\nthe patch with git-rebase before regenerating it in\nthis case. The MUA corrupted your patch; \"am\" would complain that\nthe patch does not apply.  Look in the .git/rebase-apply/ subdirectory and\nsee what patch file contains and check for the common\ncorruption patterns mentioned above. While at it, check the info and final-commit files as well.\nIf what is in final-commit is not exactly what you would want to\nsee in the commit log message, it is very likely that the\nreceiver would end up hand editing the log message when applying\nyour patch.  Things like \"Hi, this is my first patch.\\n\" in the\npatch e-mail should come after the three-dash line that signals\nthe end of the commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "MUA-SPECIFIC HINTS Here are some hints on how to successfully submit patches inline using\nvarious mailers. GMail GMail does not have any way to turn off line wrapping in the web\ninterface, so it will mangle any emails that you send.  You can however\nuse \"git send-email\" and send your patches through the GMail SMTP server, or\nuse any IMAP email client to connect to the google IMAP server and forward\nthe emails through that. For hints on using git send-email to send your patches through the\nGMail SMTP server, see the EXAMPLE section of git-send-email . For hints on submission using the IMAP interface, see the EXAMPLE\nsection of git-imap-send . Thunderbird By default, Thunderbird will both wrap emails as well as flag\nthem as being format=flowed , both of which will make the\nresulting email unusable by Git. There are three different approaches: use an add-on to turn off line wraps,\nconfigure Thunderbird to not mangle patches, or use\nan external editor to keep Thunderbird from mangling the patches. Approach #1 (add-on) Install the Toggle Word Wrap add-on that is available from https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/ It adds a menu entry \"Enable Word Wrap\" in the composer’s \"Options\" menu\nthat you can tick off. Now you can compose the message as you otherwise do\n(cut + paste, git format-patch | git imap-send , etc), but you have to\ninsert line breaks manually in any text that you type. Approach #2 (configuration) Three steps: Configure your mail server composition as plain text:\nEdit…​Account Settings…​Composition & Addressing,\nuncheck \"Compose Messages in HTML\". Configure your general composition window to not wrap. In Thunderbird 2:\nEdit..Preferences..Composition, wrap plain text messages at 0 In Thunderbird 3:\nEdit..Preferences..Advanced..Config Editor.  Search for\n\"mail.wrap_long_lines\".\nToggle it to make sure it is set to false . Also, search for\n\"mailnews.wraplength\" and set the value to 0. Disable the use of format=flowed:\nEdit..Preferences..Advanced..Config Editor.  Search for\n\"mailnews.send_plaintext_flowed\".\nToggle it to make sure it is set to false . After that is done, you should be able to compose email as you\notherwise would (cut + paste, git format-patch | git imap-send , etc),\nand the patches will not be mangled. Approach #3 (external editor) The following Thunderbird extensions are needed:\nAboutConfig from https://mjg.github.io/AboutConfig/ and\nExternal Editor from https://globs.org/articles.php?lng=en&pg=8 Prepare the patch as a text file using your method of choice. Before opening a compose window, use Edit→Account Settings to\nuncheck the \"Compose messages in HTML format\" setting in the\n\"Composition & Addressing\" panel of the account to be used to\nsend the patch. In the main Thunderbird window, before you open the compose\nwindow for the patch, use Tools→about:config to set the\nfollowing to the indicated values: mailnews.send_plaintext_flowed  => false\n\tmailnews.wraplength             => 0 Open a compose window and click the external editor icon. In the external editor window, read in the patch file and exit\nthe editor normally. Side note: it may be possible to do step 2 with\nabout:config and the following settings but no one’s tried yet. mail.html_compose                       => false\n\tmail.identity.default.compose_html      => false\n\tmail.identity.id?.compose_html          => false There is a script in contrib/thunderbird-patch-inline which can help\nyou include patches with Thunderbird in an easy way. To use it, do the\nsteps above and then use the script as the external editor. KMail This should help you to submit patches inline using KMail. Prepare the patch as a text file. Click on New Mail. Go under \"Options\" in the Composer window and be sure that\n\"Word wrap\" is not set. Use Message → Insert file…​ and insert the patch. Back in the compose window: add whatever other text you wish to the\nmessage, complete the addressing and subject fields, and press send."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "BASE TREE INFORMATION The base tree information block is used for maintainers or third party\ntesters to know the exact state the patch series applies to. It consists\nof the base commit , which is a well-known commit that is part of the\nstable part of the project history everybody else works off of, and zero\nor more prerequisite patches , which are well-known patches in flight\nthat is not yet part of the base commit that need to be applied on top\nof base commit in topological order before the patches can be applied. The base commit is shown as \"base-commit: \" followed by the 40-hex of\nthe commit object name.  A prerequisite patch is shown as\n\"prerequisite-patch-id: \" followed by the 40-hex patch id , which can\nbe obtained by passing the patch through the git patch-id --stable command. Imagine that on top of the public commit P, you applied well-known\npatches X, Y and Z from somebody else, and then built your three-patch\nseries A, B, C, the history would be like: ---P---X---Y---Z---A---B---C With git format-patch --base=P -3 C (or variants thereof, e.g. with --cover-letter or using Z..C instead of -3 C to specify the\nrange), the base tree information block is shown at the end of the\nfirst message the command outputs (either the first patch, or the\ncover letter), like this: base-commit: P\nprerequisite-patch-id: X\nprerequisite-patch-id: Y\nprerequisite-patch-id: Z For non-linear topology, such as ---P---X---A---M---C\n    \\         /\n     Y---Z---B You can also use git format-patch --base=P -3 C to generate patches\nfor A, B and C, and the identifiers for P, X, Y, Z are appended at the\nend of the first message. If set --base=auto in cmdline, it will automatically compute\nthe base commit as the merge base of tip commit of the remote-tracking\nbranch and revision-range specified in cmdline.\nFor a local branch, you need to make it to track a remote branch by git branch\n--set-upstream-to before using this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "EXAMPLES Extract commits between revisions R1 and R2, and apply them on top of\nthe current branch using git am to cherry-pick them: $ git format-patch -k --stdout R1..R2 | git am -3 -k Extract all commits which are in the current branch but not in the\norigin branch: $ git format-patch origin For each commit a separate file is created in the current directory. Extract all commits that lead to origin since the inception of the\nproject: $ git format-patch --root origin The same as the previous one: $ git format-patch -M -B origin Additionally, it detects and handles renames and complete rewrites\nintelligently to produce a renaming patch.  A renaming patch reduces\nthe amount of text output, and generally makes it easier to review.\nNote that non-Git \"patch\" programs won’t understand renaming patches, so\nuse it only when you know the recipient uses Git to apply your patch. Extract three topmost commits from the current branch and format them\nas e-mailable patches: $ git format-patch -3"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "CAVEATS Note that format-patch will omit merge commits from the output, even\nif they are part of the requested range. A simple \"patch\" does not\ninclude enough information for the receiving end to reproduce the same\nmerge commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails"}, {"role": "assistant", "content": "NAME git-send-email - Send a collection of patches as emails"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails"}, {"role": "assistant", "content": "SYNOPSIS git send-email [<options>] (<file>|<directory>)…​ git send-email [<options>] <format-patch-options> git send-email --dump-aliases"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails"}, {"role": "assistant", "content": "DESCRIPTION Takes the patches given on the command line and emails them out.\nPatches can be specified as files, directories (which will send all\nfiles in the directory), or directly as a revision list.  In the\nlast case, any format accepted by git-format-patch can\nbe passed to git send-email, as well as options understood by git-format-patch . The header of the email is configurable via command-line options.  If not\nspecified on the command line, the user will be prompted with a ReadLine\nenabled interface to provide the necessary information. There are two formats accepted for patch files: mbox format files This is what git-format-patch generates.  Most headers and MIME\nformatting are ignored. The original format used by Greg Kroah-Hartman’s send_lots_of_email.pl script This format expects the first line of the file to contain the \"Cc:\" value\nand the \"Subject:\" of the message as the second line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --annotate"}, {"role": "assistant", "content": "Review and edit each patch you’re about to send. Default is the value\nof sendemail.annotate . See the CONFIGURATION section for sendemail.multiEdit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --bcc=<address>,…​"}, {"role": "assistant", "content": "Specify a \"Bcc:\" value for each email. Default is the value of sendemail.bcc . This option may be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --cc=<address>,…​"}, {"role": "assistant", "content": "Specify a starting \"Cc:\" value for each email.\nDefault is the value of sendemail.cc . This option may be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --compose"}, {"role": "assistant", "content": "Invoke a text editor (see GIT_EDITOR in git-var )\nto edit an introductory message for the patch series. When --compose is used, git send-email will use the From, To, Cc, Bcc,\nSubject, Reply-To, and In-Reply-To headers specified in the message. If\nthe body of the message (what you type after the headers and a blank\nline) only contains blank (or Git: prefixed) lines, the summary won’t be\nsent, but the headers mentioned above will be used unless they are\nremoved. Missing From or In-Reply-To headers will be prompted for. See the CONFIGURATION section for sendemail.multiEdit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --from=<address>"}, {"role": "assistant", "content": "Specify the sender of the emails.  If not specified on the command line,\nthe value of the sendemail.from configuration option is used.  If\nneither the command-line option nor sendemail.from are set, then the\nuser will be prompted for the value.  The default for the prompt will be\nthe value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not\nset, as returned by \"git var -l\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --reply-to=<address>"}, {"role": "assistant", "content": "Specify the address where replies from recipients should go to.\nUse this if replies to messages should go to another address than what\nis specified with the --from parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --in-reply-to=<identifier>"}, {"role": "assistant", "content": "Make the first mail (or all the mails with --no-thread ) appear as a\nreply to the given Message-ID, which avoids breaking threads to\nprovide a new patch series.\nThe second and subsequent emails will be sent as replies according to\nthe --[no-]chain-reply-to setting. So for example when --thread and --no-chain-reply-to are specified, the\nsecond and subsequent patches will be replies to the first one like in the\nillustration below where [PATCH v2 0/3] is in reply to [PATCH 0/2] : [PATCH 0/2] Here is what I did...\n  [PATCH 1/2] Clean up and tests\n  [PATCH 2/2] Implementation\n  [PATCH v2 0/3] Here is a reroll\n    [PATCH v2 1/3] Clean up\n    [PATCH v2 2/3] New tests\n    [PATCH v2 3/3] Implementation Only necessary if --compose is also set.  If --compose\nis not set, this will be prompted for."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --subject=<string>"}, {"role": "assistant", "content": "Specify the initial subject of the email thread.\nOnly necessary if --compose is also set.  If --compose\nis not set, this will be prompted for."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --to=<address>,…​"}, {"role": "assistant", "content": "Specify the primary recipient of the emails generated. Generally, this\nwill be the upstream maintainer of the project involved. Default is the\nvalue of the sendemail.to configuration value; if that is unspecified,\nand --to-cmd is not specified, this will be prompted for. This option may be specified multiple times."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --8bit-encoding=<encoding>"}, {"role": "assistant", "content": "When encountering a non-ASCII message or subject that does not\ndeclare its encoding, add headers/quoting to indicate it is\nencoded in <encoding>.  Default is the value of the sendemail.assume8bitEncoding ; if that is unspecified, this\nwill be prompted for if any non-ASCII files are encountered. Note that no attempts whatsoever are made to validate the encoding."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --compose-encoding=<encoding>"}, {"role": "assistant", "content": "Specify encoding of compose message. Default is the value of the sendemail.composeEncoding ; if that is unspecified, UTF-8 is assumed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)"}, {"role": "assistant", "content": "Specify the transfer encoding to be used to send the message over SMTP.\n7bit will fail upon encountering a non-ASCII message.  quoted-printable\ncan be useful when the repository contains files that contain carriage\nreturns, but makes the raw patch email file (as saved from a MUA) much\nharder to inspect manually.  base64 is even more fool proof, but also\neven more opaque.  auto will use 8bit when possible, and quoted-printable\notherwise. Default is the value of the sendemail.transferEncoding configuration\nvalue; if that is unspecified, default to auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --xmailer  --no-xmailer"}, {"role": "assistant", "content": "Add (or prevent adding) the \"X-Mailer:\" header.  By default,\nthe header is added, but it can be turned off by setting the sendemail.xmailer configuration variable to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --envelope-sender=<address>"}, {"role": "assistant", "content": "Specify the envelope sender used to send the emails.\nThis is useful if your default address is not the address that is\nsubscribed to a list. In order to use the From address, set the\nvalue to \"auto\". If you use the sendmail binary, you must have\nsuitable privileges for the -f parameter.  Default is the value of the sendemail.envelopeSender configuration variable; if that is\nunspecified, choosing the envelope sender is left to your MTA."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --sendmail-cmd=<command>"}, {"role": "assistant", "content": "Specify a command to run to send the email. The command should\nbe sendmail-like; specifically, it must support the -i option.\nThe command will be executed in the shell if necessary.  Default\nis the value of sendemail.sendmailCmd .  If unspecified, and if\n--smtp-server is also unspecified, git-send-email will search\nfor sendmail in /usr/sbin , /usr/lib and $PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-encryption=<encryption>"}, {"role": "assistant", "content": "Specify in what way encrypting begins for the SMTP connection.\nValid values are ssl and tls . Any other value reverts to plain\n(unencrypted) SMTP, which defaults to port 25.\nDespite the names, both values will use the same newer version of TLS,\nbut for historic reasons have these names. ssl refers to \"implicit\"\nencryption (sometimes called SMTPS), that uses port 465 by default. tls refers to \"explicit\" encryption (often known as STARTTLS),\nthat uses port 25 by default. Other ports might be used by the SMTP\nserver, which are not the default. Commonly found alternative port for tls and unencrypted is 587. You need to check your provider’s\ndocumentation or your server configuration to make sure\nfor your own case. Default is the value of sendemail.smtpEncryption ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-domain=<FQDN>"}, {"role": "assistant", "content": "Specifies the Fully Qualified Domain Name (FQDN) used in the\nHELO/EHLO command to the SMTP server.  Some servers require the\nFQDN to match your IP address.  If not set, git send-email attempts\nto determine your FQDN automatically.  Default is the value of sendemail.smtpDomain ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-auth=<mechanisms>"}, {"role": "assistant", "content": "Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting\nforces using only the listed mechanisms. Example: $ git send-email --smtp-auth=\"PLAIN LOGIN GSSAPI\" ... If at least one of the specified mechanisms matches the ones advertised by the\nSMTP server and if it is supported by the utilized SASL library, the mechanism\nis used for authentication. If neither sendemail.smtpAuth nor --smtp-auth is specified, all mechanisms supported by the SASL library can be used. The\nspecial value none maybe specified to completely disable authentication\nindependently of --smtp-user"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-pass[=<password>]"}, {"role": "assistant", "content": "Password for SMTP-AUTH. The argument is optional: If no\nargument is specified, then the empty string is used as\nthe password. Default is the value of sendemail.smtpPass ,\nhowever --smtp-pass always overrides this value. Furthermore, passwords need not be specified in configuration files\nor on the command line. If a username has been specified (with --smtp-user or a sendemail.smtpUser ), but no password has been\nspecified (with --smtp-pass or sendemail.smtpPass ), then\na password is obtained using git-credential ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --no-smtp-auth"}, {"role": "assistant", "content": "Disable SMTP authentication. Short hand for --smtp-auth=none"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-server=<host>"}, {"role": "assistant", "content": "If set, specifies the outgoing SMTP server to use (e.g. smtp.example.com or a raw IP address).  If unspecified, and if --sendmail-cmd is also unspecified, the default is to search\nfor sendmail in /usr/sbin , /usr/lib and $PATH if such a\nprogram is available, falling back to localhost otherwise. For backward compatibility, this option can also specify a full pathname\nof a sendmail-like program instead; the program must support the -i option.  This method does not support passing arguments or using plain\ncommand names.  For those use cases, consider using --sendmail-cmd instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-server-port=<port>"}, {"role": "assistant", "content": "Specifies a port different from the default port (SMTP\nservers typically listen to smtp port 25, but may also listen to\nsubmission port 587, or the common SSL smtp port 465);\nsymbolic port names (e.g. \"submission\" instead of 587)\nare also accepted. The port can also be set with the sendemail.smtpServerPort configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-server-option=<option>"}, {"role": "assistant", "content": "If set, specifies the outgoing SMTP server option to use.\nDefault value can be specified by the sendemail.smtpServerOption configuration option. The --smtp-server-option option must be repeated for each option you want\nto pass to the server. Likewise, different lines in the configuration files\nmust be used for each option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-ssl"}, {"role": "assistant", "content": "Legacy alias for --smtp-encryption ssl ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-ssl-cert-path"}, {"role": "assistant", "content": "Path to a store of trusted CA certificates for SMTP SSL/TLS\ncertificate validation (either a directory that has been processed\nby c_rehash , or a single file containing one or more PEM format\ncertificates concatenated together: see verify(1) -CAfile and\n-CApath for more information on these). Set it to an empty string\nto disable certificate verification. Defaults to the value of the sendemail.smtpSSLCertPath configuration variable, if set, or the\nbacking SSL library’s compiled-in default otherwise (which should\nbe the best choice on most platforms)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-user=<user>"}, {"role": "assistant", "content": "Username for SMTP-AUTH. Default is the value of sendemail.smtpUser ;\nif a username is not specified (with --smtp-user or sendemail.smtpUser ),\nthen authentication is not attempted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --smtp-debug=(0|1)"}, {"role": "assistant", "content": "Enable (1) or disable (0) debug output. If enabled, SMTP\ncommands and replies will be printed. Useful to debug TLS\nconnection and authentication problems."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --batch-size=<num>"}, {"role": "assistant", "content": "Some email servers (e.g. smtp.163.com) limit the number emails to be\nsent per session (connection) and this will lead to a failure when\nsending many messages.  With this option, send-email will disconnect after\nsending $<num> messages and wait for a few seconds (see --relogin-delay)\nand reconnect, to work around such a limit.  You may want to\nuse some form of credential helper to avoid having to retype\nyour password every time this happens.  Defaults to the sendemail.smtpBatchSize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --relogin-delay=<int>"}, {"role": "assistant", "content": "Waiting $<int> seconds before reconnecting to SMTP server. Used together\nwith --batch-size option.  Defaults to the sendemail.smtpReloginDelay configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --no-to  --no-cc  --no-bcc"}, {"role": "assistant", "content": "Clears any list of \"To:\", \"Cc:\", \"Bcc:\" addresses previously\nset via config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --no-identity"}, {"role": "assistant", "content": "Clears the previously read value of sendemail.identity set\nvia config, if any."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --to-cmd=<command>"}, {"role": "assistant", "content": "Specify a command to execute once per patch file which\nshould generate patch file specific \"To:\" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.toCmd configuration value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --cc-cmd=<command>"}, {"role": "assistant", "content": "Specify a command to execute once per patch file which\nshould generate patch file specific \"Cc:\" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.ccCmd configuration value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --header-cmd=<command>"}, {"role": "assistant", "content": "Specify a command that is executed once per outgoing message\nand output RFC 2822 style header lines to be inserted into\nthem. When the sendemail.headerCmd configuration variable is\nset, its value is always used. When --header-cmd is provided\nat the command line, its value takes precedence over the sendemail.headerCmd configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --no-header-cmd"}, {"role": "assistant", "content": "Disable any header command in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]chain-reply-to"}, {"role": "assistant", "content": "If this is set, each email will be sent as a reply to the previous\nemail sent.  If disabled with \"--no-chain-reply-to\", all emails after\nthe first will be sent as replies to the first email sent.  When using\nthis, it is recommended that the first file given be an overview of the\nentire patch series. Disabled by default, but the sendemail.chainReplyTo configuration variable can be used to enable it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --identity=<identity>"}, {"role": "assistant", "content": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]signed-off-by-cc"}, {"role": "assistant", "content": "If this is set, add emails found in the Signed-off-by trailer or Cc: lines to the\ncc list. Default is the value of sendemail.signedOffByCc configuration\nvalue; if that is unspecified, default to --signed-off-by-cc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]cc-cover"}, {"role": "assistant", "content": "If this is set, emails found in Cc: headers in the first patch of\nthe series (typically the cover letter) are added to the cc list\nfor each email set. Default is the value of sendemail.ccCover configuration value; if that is unspecified, default to --no-cc-cover."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]to-cover"}, {"role": "assistant", "content": "If this is set, emails found in To: headers in the first patch of\nthe series (typically the cover letter) are added to the to list\nfor each email set. Default is the value of sendemail.toCover configuration value; if that is unspecified, default to --no-to-cover."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --suppress-cc=<category>"}, {"role": "assistant", "content": "Specify an additional category of recipients to suppress the\nauto-cc of: author will avoid including the patch author. self will avoid including the sender. cc will avoid including anyone mentioned in Cc lines in the patch header\nexcept for self (use self for that). bodycc will avoid including anyone mentioned in Cc lines in the\npatch body (commit message) except for self (use self for that). sob will avoid including anyone mentioned in the Signed-off-by trailers except\nfor self (use self for that). misc-by will avoid including anyone mentioned in Acked-by,\nReviewed-by, Tested-by and other \"-by\" lines in the patch body,\nexcept Signed-off-by (use sob for that). cccmd will avoid running the --cc-cmd. body is equivalent to sob + bodycc + misc-by . all will suppress all auto cc values. Default is the value of sendemail.suppressCc configuration value; if\nthat is unspecified, default to self if --suppress-from is\nspecified, as well as body if --no-signed-off-cc is specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]suppress-from"}, {"role": "assistant", "content": "If this is set, do not add the From: address to the cc: list.\nDefault is the value of sendemail.suppressFrom configuration\nvalue; if that is unspecified, default to --no-suppress-from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]thread"}, {"role": "assistant", "content": "If this is set, the In-Reply-To and References headers will be\nadded to each email sent.  Whether each mail refers to the\nprevious email ( deep threading per git format-patch wording) or to the first email ( shallow threading) is\ngoverned by \"--[no-]chain-reply-to\". If disabled with \"--no-thread\", those headers will not be added\n(unless specified with --in-reply-to).  Default is the value of the sendemail.thread configuration value; if that is unspecified,\ndefault to --thread. It is up to the user to ensure that no In-Reply-To header already\nexists when git send-email is asked to add it (especially note that git format-patch can be configured to do the threading itself).\nFailure to do so may not produce the expected result in the\nrecipient’s MUA."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --confirm=<mode>"}, {"role": "assistant", "content": "Confirm just before sending: always will always confirm before sending never will never confirm before sending cc will confirm before sending when send-email has automatically\nadded addresses from the patch to the Cc list compose will confirm before sending the first message when using --compose. auto is equivalent to cc + compose Default is the value of sendemail.confirm configuration value; if that\nis unspecified, default to auto unless any of the suppress options\nhave been specified, in which case default to compose ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --dry-run"}, {"role": "assistant", "content": "Do everything except actually send the emails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]format-patch"}, {"role": "assistant", "content": "When an argument may be understood either as a reference or as a file name,\nchoose to understand it as a format-patch argument ( --format-patch )\nor as a file name ( --no-format-patch ). By default, when such a conflict\noccurs, git send-email will fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --quiet"}, {"role": "assistant", "content": "Make git-send-email less verbose.  One line per email should be\nall that is output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]validate"}, {"role": "assistant", "content": "Perform sanity checks on patches.\nCurrently, validation means the following: Invoke the sendemail-validate hook if present (see githooks ). Warn of patches that contain lines longer than\n998 characters unless a suitable transfer encoding\n( auto , base64 , or quoted-printable ) is used;\nthis is due to SMTP limits as described by https://www.ietf.org/rfc/rfc5322.txt . Default is the value of sendemail.validate ; if this is not set,\ndefault to --validate ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --force"}, {"role": "assistant", "content": "Send emails even if safety checks would prevent it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --dump-aliases"}, {"role": "assistant", "content": "Instead of the normal operation, dump the shorthand alias names from\nthe configured alias file(s), one per line in alphabetical order. Note\nthat this only includes the alias name and not its expanded email addresses.\nSee sendemail.aliasesFile for more information about aliases."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.identity"}, {"role": "assistant", "content": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.smtpEncryption"}, {"role": "assistant", "content": "See git-send-email for description.  Note that this\nsetting is not subject to the identity mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.smtpSSLCertPath"}, {"role": "assistant", "content": "Path to ca-certificates (either a directory or a single file).\nSet it to an empty string to disable certificate verification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.<identity>.*"}, {"role": "assistant", "content": "Identity-specific versions of the sendemail.* parameters\nfound below, taking precedence over those when this\nidentity is selected, through either the command-line or sendemail.identity ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.multiEdit"}, {"role": "assistant", "content": "If true (default), a single editor instance will be spawned to edit\nfiles you have to edit (patches when --annotate is used, and the\nsummary when --compose is used). If false, files will be edited one\nafter the other, spawning a new editor each time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.confirm"}, {"role": "assistant", "content": "Sets the default for whether to confirm before sending. Must be\none of always , never , cc , compose , or auto . See --confirm in the git-send-email documentation for the meaning of these\nvalues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.aliasesFile"}, {"role": "assistant", "content": "To avoid typing long email addresses, point this to one or more\nemail aliases files.  You must also supply sendemail.aliasFileType ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.aliasFileType"}, {"role": "assistant", "content": "Format of the file(s) specified in sendemail.aliasesFile. Must be\none of mutt , mailrc , pine , elm , gnus , or sendmail . What an alias file in each format looks like can be found in\nthe documentation of the email program of the same name. The\ndifferences and limitations from the standard formats are\ndescribed below: sendmail Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.annotate  sendemail.bcc  sendemail.cc  sendemail.ccCmd  sendemail.chainReplyTo  sendemail.envelopeSender  sendemail.from  sendemail.headerCmd  sendemail.signedOffByCc  sendemail.smtpPass  sendemail.suppressCc  sendemail.suppressFrom  sendemail.to  sendemail.toCmd  sendemail.smtpDomain  sendemail.smtpServer  sendemail.smtpServerPort  sendemail.smtpServerOption  sendemail.smtpUser  sendemail.thread  sendemail.transferEncoding  sendemail.validate  sendemail.xmailer"}, {"role": "assistant", "content": "These configuration variables all provide a default for git-send-email command-line options. See its\ndocumentation for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.signedOffCc (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for sendemail.signedOffByCc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.smtpBatchSize"}, {"role": "assistant", "content": "Number of messages to be sent per connection, after that a relogin\nwill happen.  If the value is 0 or undefined, send all messages in\none connection.\nSee also the --batch-size option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.smtpReloginDelay"}, {"role": "assistant", "content": "Seconds to wait before reconnecting to the smtp server.\nSee also the --relogin-delay option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.forbidSendmailVariables"}, {"role": "assistant", "content": "To avoid common misconfiguration mistakes, git-send-email will abort with a warning if any configuration options for \"sendmail\"\nexist. Set this variable to bypass the check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendmail"}, {"role": "assistant", "content": "Quoted aliases and quoted addresses are not supported: lines that\ncontain a \" symbol are ignored. Redirection to a file ( /path/name ) or pipe ( |command ) is not\nsupported. File inclusion ( :include: /path/name ) is not supported. Warnings are printed on the standard error output for any\nexplicitly unsupported constructs, and any other lines that are not\nrecognized by the parser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails"}, {"role": "assistant", "content": "EXAMPLES Use gmail as the smtp server To use git send-email to send your patches through the GMail SMTP server,\nedit ~/.gitconfig to specify your account settings: [sendemail]\n\tsmtpEncryption = tls\n\tsmtpServer = smtp.gmail.com\n\tsmtpUser = yourname@gmail.com\n\tsmtpServerPort = 587 If you have multi-factor authentication set up on your Gmail account, you can\ngenerate an app-specific password for use with git send-email . Visit https://security.google.com/settings/security/apppasswords to create it. Once your commits are ready to be sent to the mailing list, run the\nfollowing commands: $ git format-patch --cover-letter -M origin/master -o outgoing/\n$ edit outgoing/0000-*\n$ git send-email outgoing/* The first time you run it, you will be prompted for your credentials.  Enter the\napp-specific or your regular password as appropriate.  If you have credential\nhelper configured (see git-credential ), the password will be saved in\nthe credential store so you won’t have to type it the next time. Note: the following core Perl modules that may be installed with your\ndistribution of Perl are required:\nMIME::Base64, MIME::QuotedPrint, Net::Domain and Net::SMTP.\nThese additional Perl modules are also required:\nAuthen::SASL and Mail::Address."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes"}, {"role": "assistant", "content": "NAME git-request-pull - Generates a summary of pending changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes"}, {"role": "assistant", "content": "SYNOPSIS git request-pull [-p] <start> <URL> [<end>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes"}, {"role": "assistant", "content": "DESCRIPTION Generate a request asking your upstream project to pull changes into\ntheir tree.  The request, printed to the standard output,\nbegins with the branch description, summarizes\nthe changes, and indicates from where they can be pulled. The upstream project is expected to have the commit named by <start> and the output asks it to integrate the changes you made\nsince that commit, up to the commit named by <end> , by visiting\nthe repository named by <URL> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes  -p"}, {"role": "assistant", "content": "Include patch text in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes  <start>"}, {"role": "assistant", "content": "Commit to start at.  This names a commit that is already in\nthe upstream history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes  <URL>"}, {"role": "assistant", "content": "The repository URL to be pulled from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes  <end>"}, {"role": "assistant", "content": "Commit to end at (defaults to HEAD).  This names the commit\nat the tip of the history you are asking to be pulled. When the repository named by <URL> has the commit at a tip of a\nref that is different from the ref you have locally, you can use the <local>:<remote> syntax, to have its local name, a colon : , and\nits remote name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes"}, {"role": "assistant", "content": "EXAMPLES Imagine that you built your work on your master branch on top of\nthe v1.0 release, and want it to be integrated into the project.\nFirst you push that change to your public repository for others to\nsee: git push https://git.ko.xz/project master Then, you run this command: git request-pull v1.0 https://git.ko.xz/project master which will produce a request to the upstream, summarizing the\nchanges between the v1.0 release and your master , to pull it\nfrom your public repository. If you pushed your change to a branch whose name is different from\nthe one you have locally, e.g. git push https://git.ko.xz/project master:for-linus then you can ask that to be pulled with git request-pull v1.0 https://git.ko.xz/project master:for-linus"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "NAME git-svn - Bidirectional operation between a Subversion repository and Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "SYNOPSIS git svn <command> [<options>] [<arguments>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "DESCRIPTION git svn is a simple conduit for changesets between Subversion and Git.\nIt provides a bidirectional flow of changes between a Subversion and a Git\nrepository. git svn can track a standard Subversion repository,\nfollowing the common \"trunk/branches/tags\" layout, with the --stdlayout option.\nIt can also follow branches and tags in any layout with the -T/-t/-b options\n(see options to init below, and also the clone command). Once tracking a Subversion repository (with any of the above methods), the Git\nrepository can be updated from Subversion by the fetch command and\nSubversion updated from Git by the dcommit command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  init"}, {"role": "assistant", "content": "Initializes an empty Git repository with additional\nmetadata directories for git svn .  The Subversion URL\nmay be specified as a command-line argument, or as full\nURL arguments to -T/-t/-b.  Optionally, the target\ndirectory to operate on can be specified as a second\nargument.  Normally this command initializes the current\ndirectory. -T<trunk-subdir> --trunk=<trunk-subdir> -t<tags-subdir> --tags=<tags-subdir> -b<branches-subdir> --branches=<branches-subdir> -s --stdlayout These are optional command-line options for init.  Each of\nthese flags can point to a relative repository path\n(--tags=project/tags) or a full url\n(--tags=https://foo.org/project/tags).\nYou can specify more than one --tags and/or --branches options, in case\nyour Subversion repository places tags or branches under multiple paths.\nThe option --stdlayout is\na shorthand way of setting trunk,tags,branches as the relative paths,\nwhich is the Subversion default. If any of the other options are given\nas well, they take precedence. --no-metadata Set the noMetadata option in the [svn-remote] config.\nThis option is not recommended, please read the svn.noMetadata section of this manpage before using this option. --use-svm-props Set the useSvmProps option in the [svn-remote] config. --use-svnsync-props Set the useSvnsyncProps option in the [svn-remote] config. --rewrite-root=<URL> Set the rewriteRoot option in the [svn-remote] config. --rewrite-uuid=<UUID> Set the rewriteUUID option in the [svn-remote] config. --username=<user> For transports that SVN handles authentication for (http,\nhttps, and plain svn), specify the username.  For other\ntransports (e.g. svn+ssh:// ), you must include the username in\nthe URL, e.g. svn+ssh://foo@svn.bar.com/project --prefix=<prefix> This allows one to specify a prefix which is prepended\nto the names of remotes if trunk/branches/tags are\nspecified.  The prefix does not automatically include a\ntrailing slash, so be sure you include one in the\nargument if that is what you want.  If --branches/-b is\nspecified, the prefix must include a trailing slash.\nSetting a prefix (with a trailing slash) is strongly\nencouraged in any case, as your SVN-tracking refs will\nthen be located at \"refs/remotes/$prefix/ \", which is\ncompatible with Git’s own remote-tracking ref layout\n(refs/remotes/$remote/ ). Setting a prefix is also useful\nif you wish to track multiple projects that share a common\nrepository.\nBy default, the prefix is set to origin/ . Note Before Git v2.0, the default prefix was \"\" (no prefix). This\nmeant that SVN-tracking refs were put at \"refs/remotes/*\", which is\nincompatible with how Git’s own remote-tracking refs are organized.\nIf you still want the old default, you can get it by passing --prefix \"\" on the command line ( --prefix=\"\" may not work if\nyour Perl’s Getopt::Long is < v2.37). --ignore-refs=<regex> When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --ignore-refs . --ignore-paths=<regex> When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --ignore-paths . --include-paths=<regex> When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --include-paths . --no-minimize-url When tracking multiple directories (using --stdlayout,\n--branches, or --tags options), git svn will attempt to connect\nto the root (or highest allowed level) of the Subversion\nrepository.  This default allows better tracking of history if\nentire projects are moved within a repository, but may cause\nissues on repositories where read access restrictions are in\nplace.  Passing --no-minimize-url will allow git svn to\naccept URLs as-is without attempting to connect to a higher\nlevel directory.  This option is off by default when only\none URL/branch is tracked (it would do little good)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  fetch"}, {"role": "assistant", "content": "Fetch unfetched revisions from the Subversion remote we are\ntracking.  The name of the [svn-remote \"…​\"] section in the\n$GIT_DIR/config file may be specified as an optional\ncommand-line argument. This automatically updates the rev_map if needed (see $GIT_DIR/svn/**/.rev_map.* in the FILES section below for details). --localtime Store Git commit times in the local time zone instead of UTC.  This\nmakes git log (even without --date=local) show the same times\nthat svn log would in the local time zone. This doesn’t interfere with interoperating with the Subversion\nrepository you cloned from, but if you wish for your local Git\nrepository to be able to interoperate with someone else’s local Git\nrepository, either don’t use this option or you should both use it in\nthe same local time zone. --parent Fetch only from the SVN parent of the current HEAD. --ignore-refs=<regex> Ignore refs for branches or tags matching the Perl regular\nexpression. A \"negative look-ahead assertion\" like ^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$ can be used to allow only certain refs. config key: svn-remote.<name>.ignore-refs If the ignore-refs configuration key is set, and the command-line\noption is also given, both regular expressions will be used. --ignore-paths=<regex> This allows one to specify a Perl regular expression that will\ncause skipping of all matching paths from checkout from SVN.\nThe --ignore-paths option should match for every fetch (including automatic fetches due to clone , dcommit , rebase , etc) on a given repository. config key: svn-remote.<name>.ignore-paths If the ignore-paths configuration key is set, and the command-line\noption is also given, both regular expressions will be used. Examples: Skip \"doc*\" directory for every fetch --ignore-paths=\"^doc\" Skip \"branches\" and \"tags\" of first level directories --ignore-paths=\"^[^/]+/(?:branches|tags)\" --include-paths=<regex> This allows one to specify a Perl regular expression that will\ncause the inclusion of only matching paths from checkout from SVN.\nThe --include-paths option should match for every fetch (including automatic fetches due to clone , dcommit , rebase , etc) on a given repository. --ignore-paths takes\nprecedence over --include-paths . config key: svn-remote.<name>.include-paths --log-window-size=<n> Fetch <n> log entries per request when scanning Subversion history.\nThe default is 100. For very large Subversion repositories, larger\nvalues may be needed for clone / fetch to complete in reasonable\ntime. But overly large values may lead to higher memory usage and\nrequest timeouts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  clone"}, {"role": "assistant", "content": "Runs init and fetch .  It will automatically create a\ndirectory based on the basename of the URL passed to it;\nor if a second argument is passed; it will create a directory\nand work within that.  It accepts all arguments that the init and fetch commands accept; with the exception of --fetch-all and --parent .  After a repository is cloned,\nthe fetch command will be able to update revisions without\naffecting the working tree; and the rebase command will be\nable to update the working tree with the latest changes. --preserve-empty-dirs Create a placeholder file in the local Git repository for each\nempty directory fetched from Subversion.  This includes directories\nthat become empty by removing all entries in the Subversion\nrepository (but not the directory itself).  The placeholder files\nare also tracked and removed when no longer necessary. --placeholder-filename=<filename> Set the name of placeholder files created by --preserve-empty-dirs.\nDefault: \".gitignore\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  rebase"}, {"role": "assistant", "content": "This fetches revisions from the SVN parent of the current HEAD\nand rebases the current (uncommitted to SVN) work against it. This works similarly to svn update or git pull except that\nit preserves linear history with git rebase instead of git merge for ease of dcommitting with git svn . This accepts all options that git svn fetch and git rebase accept.  However, --fetch-all only fetches from the current\n[svn-remote], and not all [svn-remote] definitions. Like git rebase ; this requires that the working tree be clean\nand have no uncommitted changes. This automatically updates the rev_map if needed (see $GIT_DIR/svn/**/.rev_map.* in the FILES section below for details). -l --local Do not fetch remotely; only run git rebase against the\nlast fetched commit from the upstream SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  dcommit"}, {"role": "assistant", "content": "Commit each diff from the current branch directly to the SVN\nrepository, and then rebase or reset (depending on whether or\nnot there is a diff between SVN and head).  This will create\na revision in SVN for each commit in Git. When an optional Git branch name (or a Git commit object name)\nis specified as an argument, the subcommand works on the specified\nbranch, not on the current branch. Use of dcommit is preferred to set-tree (below). --no-rebase After committing, do not rebase or reset. --commit-url <URL> Commit to this SVN URL (the full path).  This is intended to\nallow existing git svn repositories created with one transport\nmethod (e.g. svn:// or http:// for anonymous read) to be\nreused if a user is later given access to an alternate transport\nmethod (e.g. svn+ssh:// or https:// ) for commit. config key: svn-remote.<name>.commiturl\nconfig key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options) Note that the SVN URL of the commiturl config key includes the SVN branch.\nIf you rather want to set the commit URL for an entire SVN repository use\nsvn-remote.<name>.pushurl instead. Using this option for any other purpose (don’t ask) is very strongly\ndiscouraged. --mergeinfo=<mergeinfo> Add the given merge information during the dcommit\n(e.g. --mergeinfo=\"/branches/foo:1-10\" ). All svn server versions can\nstore this information (as a property), and svn clients starting from\nversion 1.5 can make use of it. To specify merge information from multiple\nbranches, use a single space character between the branches\n( --mergeinfo=\"/branches/foo:1-10 /branches/bar:3,5-6,8\" ) config key: svn.pushmergeinfo This option will cause git-svn to attempt to automatically populate the\nsvn:mergeinfo property in the SVN repository when possible. Currently, this can\nonly be done when dcommitting non-fast-forward merges where all parents but the\nfirst have already been pushed into SVN. --interactive Ask the user to confirm that a patch set should actually be sent to SVN.\nFor each patch, one may answer \"yes\" (accept this patch), \"no\" (discard this\npatch), \"all\" (accept all patches), or \"quit\". git svn dcommit returns immediately if answer is \"no\" or \"quit\", without\ncommitting anything to SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  branch"}, {"role": "assistant", "content": "Create a branch in the SVN repository. -m --message Allows to specify the commit message. -t --tag Create a tag by using the tags_subdir instead of the branches_subdir\nspecified during git svn init. -d<path> --destination=<path> If more than one --branches (or --tags) option was given to the init or clone command, you must provide the location of the branch (or\ntag) you wish to create in the SVN repository.  <path> specifies which\npath to use to create the branch or tag and should match the pattern\non the left-hand side of one of the configured branches or tags\nrefspecs.  You can see these refspecs with the commands git config --get-all svn-remote.<name>.branches\ngit config --get-all svn-remote.<name>.tags where <name> is the name of the SVN repository as specified by the -R option to init (or \"svn\" by default). --username Specify the SVN username to perform the commit as.  This option overrides\nthe username configuration property. --commit-url Use the specified URL to connect to the destination Subversion\nrepository.  This is useful in cases where the source SVN\nrepository is read-only.  This option overrides configuration\nproperty commiturl . git config --get-all svn-remote.<name>.commiturl --parents Create parent folders. This parameter is equivalent to the parameter\n--parents on svn cp commands and is useful for non-standard repository\nlayouts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  tag"}, {"role": "assistant", "content": "Create a tag in the SVN repository. This is a shorthand for branch -t ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  log"}, {"role": "assistant", "content": "This should make it easy to look up svn log messages when svn\nusers refer to -r/--revision numbers. The following features from ‘svn log’ are supported: -r <n>[:<n>] --revision=<n>[:<n>] is supported, non-numeric args are not:\nHEAD, NEXT, BASE, PREV, etc …​ -v --verbose it’s not completely compatible with the --verbose\noutput in svn log, but reasonably close. --limit=<n> is NOT the same as --max-count, doesn’t count\nmerged/excluded commits --incremental supported New features: --show-commit shows the Git commit sha1, as well --oneline our version of --pretty=oneline Note SVN itself only stores times in UTC and nothing else. The regular svn\nclient converts the UTC time to the local time (or based on the TZ=\nenvironment). This command has the same behaviour. Any other arguments are passed directly to git log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file. The\noutput of this mode is format-compatible with the output of\n‘svn blame’ by default. Like the SVN blame command,\nlocal uncommitted changes in the working tree are ignored;\nthe version of the file in the HEAD revision is annotated. Unknown\narguments are passed directly to git blame . --git-format Produce output in the same format as git blame , but with\nSVN revision numbers instead of Git commit hashes. In this mode,\nchanges that haven’t been committed to SVN (including local\nworking-copy edits) are shown as revision 0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  find-rev"}, {"role": "assistant", "content": "When given an SVN revision number of the form rN , returns the\ncorresponding Git commit hash (this can optionally be followed by a\ntree-ish to specify which branch should be searched).  When given a\ntree-ish, returns the corresponding SVN revision number. -B --before Don’t require an exact match if given an SVN revision, instead find\nthe commit corresponding to the state of the SVN repository (on the\ncurrent branch) at the specified revision. -A --after Don’t require an exact match if given an SVN revision; if there is\nnot an exact match return the closest match searching forward in the\nhistory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  set-tree"}, {"role": "assistant", "content": "You should consider using dcommit instead of this command.\nCommit specified commit or tree objects to SVN.  This relies on\nyour imported fetch data being up to date.  This makes\nabsolutely no attempts to do patching when committing to SVN, it\nsimply overwrites files with those specified in the tree or\ncommit.  All merging is assumed to have taken place\nindependently of git svn functions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  create-ignore"}, {"role": "assistant", "content": "Recursively finds the svn:ignore property on directories and\ncreates matching .gitignore files. The resulting files are staged to\nbe committed, but are not committed. Use -r/--revision to refer to a\nspecific revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  show-ignore"}, {"role": "assistant", "content": "Recursively finds and lists the svn:ignore property on\ndirectories.  The output is suitable for appending to\nthe $GIT_DIR/info/exclude file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  mkdirs"}, {"role": "assistant", "content": "Attempts to recreate empty directories that core Git cannot track\nbased on information in $GIT_DIR/svn/<refname>/unhandled.log files.\nEmpty directories are automatically recreated when using\n\"git svn clone\" and \"git svn rebase\", so \"mkdirs\" is intended\nfor use after commands like \"git checkout\" or \"git reset\".\n(See the svn-remote.<name>.automkdirs config file option for\nmore information.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  commit-diff"}, {"role": "assistant", "content": "Commits the diff of two tree-ish arguments from the\ncommand-line.  This command does not rely on being inside a git svn\ninit -ed repository.  This command takes three arguments, (a) the\noriginal tree to diff against, (b) the new tree result, (c) the\nURL of the target Subversion repository.  The final argument\n(URL) may be omitted if you are working from a git svn -aware\nrepository (that has been init -ed with git svn ).\nThe -r<revision> option is required for this. The commit message is supplied either directly with the -m or -F option, or indirectly from the tag or commit when the second tree-ish\ndenotes such an object, or it is requested by invoking an editor (see --edit option below). -m <msg> --message=<msg> Use the given msg as the commit message. This option\ndisables the --edit option. -F <filename> --file=<filename> Take the commit message from the given file. This option\ndisables the --edit option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  info"}, {"role": "assistant", "content": "Shows information about a file or directory similar to what\n‘svn info’ provides.  Does not currently support a -r/--revision\nargument.  Use the --url option to output only the value of the URL: field."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  proplist"}, {"role": "assistant", "content": "Lists the properties stored in the Subversion repository about a\ngiven file or directory.  Use -r/--revision to refer to a specific\nSubversion revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  propget"}, {"role": "assistant", "content": "Gets the Subversion property given as the first argument, for a\nfile.  A specific revision can be specified with -r/--revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  propset"}, {"role": "assistant", "content": "Sets the Subversion property given as the first argument, to the\nvalue given as the second argument for the file given as the\nthird argument. Example: git svn propset svn:keywords \"FreeBSD=%H\" devel/py-tipper/Makefile This will set the property svn:keywords to FreeBSD=%H for the file devel/py-tipper/Makefile ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  show-externals"}, {"role": "assistant", "content": "Shows the Subversion externals.  Use -r/--revision to specify a\nspecific revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  gc"}, {"role": "assistant", "content": "Compress $GIT_DIR/svn/<refname>/unhandled.log files and remove\n$GIT_DIR/svn/<refname>/index files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  reset"}, {"role": "assistant", "content": "Undoes the effects of fetch back to the specified revision.\nThis allows you to re- fetch an SVN revision.  Normally the\ncontents of an SVN revision should never change and reset should not be necessary.  However, if SVN permissions change,\nor if you alter your --ignore-paths option, a fetch may fail\nwith \"not found in commit\" (file not previously visible) or\n\"checksum mismatch\" (missed a modification).  If the problem\nfile cannot be ignored forever (with --ignore-paths) the only\nway to repair the repo is to use reset . Only the rev_map and refs/remotes/git-svn are changed (see $GIT_DIR/svn/**/.rev_map.* in the FILES section below for details).\nFollow reset with a fetch and then git reset or git rebase to\nmove local branches onto the new tree. -r <n> --revision=<n> Specify the most recent revision to keep.  All later revisions\nare discarded. -p --parent Discard the specified revision as well, keeping the nearest\nparent instead. Example: Assume you have local changes in \"master\", but you need to refetch \"r2\". r1---r2---r3 remotes/git-svn\n                \\\n                 A---B master Fix the ignore-paths or SVN permissions problem that caused \"r2\" to\nbe incomplete in the first place.  Then: git svn reset -r2 -p\ngit svn fetch r1---r2'--r3' remotes/git-svn\n      \\\n       r2---r3---A---B master Then fixup \"master\" with git rebase .\nDo NOT use git merge or your history will not be compatible with a\nfuture dcommit ! git rebase --onto remotes/git-svn A^ master r1---r2'--r3' remotes/git-svn\n                \\\n                 A'--B' master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -T<trunk-subdir>  --trunk=<trunk-subdir>  -t<tags-subdir>  --tags=<tags-subdir>  -b<branches-subdir>  --branches=<branches-subdir>  -s  --stdlayout"}, {"role": "assistant", "content": "These are optional command-line options for init.  Each of\nthese flags can point to a relative repository path\n(--tags=project/tags) or a full url\n(--tags=https://foo.org/project/tags).\nYou can specify more than one --tags and/or --branches options, in case\nyour Subversion repository places tags or branches under multiple paths.\nThe option --stdlayout is\na shorthand way of setting trunk,tags,branches as the relative paths,\nwhich is the Subversion default. If any of the other options are given\nas well, they take precedence."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --no-metadata"}, {"role": "assistant", "content": "Set the noMetadata option in the [svn-remote] config.\nThis option is not recommended, please read the svn.noMetadata section of this manpage before using this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --use-svm-props"}, {"role": "assistant", "content": "Set the useSvmProps option in the [svn-remote] config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --use-svnsync-props"}, {"role": "assistant", "content": "Set the useSvnsyncProps option in the [svn-remote] config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --rewrite-root=<URL>"}, {"role": "assistant", "content": "Set the rewriteRoot option in the [svn-remote] config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --rewrite-uuid=<UUID>"}, {"role": "assistant", "content": "Set the rewriteUUID option in the [svn-remote] config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --username=<user>"}, {"role": "assistant", "content": "For transports that SVN handles authentication for (http,\nhttps, and plain svn), specify the username.  For other\ntransports (e.g. svn+ssh:// ), you must include the username in\nthe URL, e.g. svn+ssh://foo@svn.bar.com/project"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --prefix=<prefix>"}, {"role": "assistant", "content": "This allows one to specify a prefix which is prepended\nto the names of remotes if trunk/branches/tags are\nspecified.  The prefix does not automatically include a\ntrailing slash, so be sure you include one in the\nargument if that is what you want.  If --branches/-b is\nspecified, the prefix must include a trailing slash.\nSetting a prefix (with a trailing slash) is strongly\nencouraged in any case, as your SVN-tracking refs will\nthen be located at \"refs/remotes/$prefix/ \", which is\ncompatible with Git’s own remote-tracking ref layout\n(refs/remotes/$remote/ ). Setting a prefix is also useful\nif you wish to track multiple projects that share a common\nrepository.\nBy default, the prefix is set to origin/ . Note Before Git v2.0, the default prefix was \"\" (no prefix). This\nmeant that SVN-tracking refs were put at \"refs/remotes/*\", which is\nincompatible with how Git’s own remote-tracking refs are organized.\nIf you still want the old default, you can get it by passing --prefix \"\" on the command line ( --prefix=\"\" may not work if\nyour Perl’s Getopt::Long is < v2.37)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --ignore-refs=<regex>"}, {"role": "assistant", "content": "When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --ignore-refs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --ignore-paths=<regex>"}, {"role": "assistant", "content": "When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --ignore-paths ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --include-paths=<regex>"}, {"role": "assistant", "content": "When passed to init or clone this regular expression will\nbe preserved as a config key.  See fetch for a description\nof --include-paths ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --no-minimize-url"}, {"role": "assistant", "content": "When tracking multiple directories (using --stdlayout,\n--branches, or --tags options), git svn will attempt to connect\nto the root (or highest allowed level) of the Subversion\nrepository.  This default allows better tracking of history if\nentire projects are moved within a repository, but may cause\nissues on repositories where read access restrictions are in\nplace.  Passing --no-minimize-url will allow git svn to\naccept URLs as-is without attempting to connect to a higher\nlevel directory.  This option is off by default when only\none URL/branch is tracked (it would do little good)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --localtime"}, {"role": "assistant", "content": "Store Git commit times in the local time zone instead of UTC.  This\nmakes git log (even without --date=local) show the same times\nthat svn log would in the local time zone. This doesn’t interfere with interoperating with the Subversion\nrepository you cloned from, but if you wish for your local Git\nrepository to be able to interoperate with someone else’s local Git\nrepository, either don’t use this option or you should both use it in\nthe same local time zone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --parent"}, {"role": "assistant", "content": "Fetch only from the SVN parent of the current HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --ignore-refs=<regex>"}, {"role": "assistant", "content": "Ignore refs for branches or tags matching the Perl regular\nexpression. A \"negative look-ahead assertion\" like ^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$ can be used to allow only certain refs. config key: svn-remote.<name>.ignore-refs If the ignore-refs configuration key is set, and the command-line\noption is also given, both regular expressions will be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --ignore-paths=<regex>"}, {"role": "assistant", "content": "This allows one to specify a Perl regular expression that will\ncause skipping of all matching paths from checkout from SVN.\nThe --ignore-paths option should match for every fetch (including automatic fetches due to clone , dcommit , rebase , etc) on a given repository. config key: svn-remote.<name>.ignore-paths If the ignore-paths configuration key is set, and the command-line\noption is also given, both regular expressions will be used. Examples: Skip \"doc*\" directory for every fetch --ignore-paths=\"^doc\" Skip \"branches\" and \"tags\" of first level directories --ignore-paths=\"^[^/]+/(?:branches|tags)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --include-paths=<regex>"}, {"role": "assistant", "content": "This allows one to specify a Perl regular expression that will\ncause the inclusion of only matching paths from checkout from SVN.\nThe --include-paths option should match for every fetch (including automatic fetches due to clone , dcommit , rebase , etc) on a given repository. --ignore-paths takes\nprecedence over --include-paths . config key: svn-remote.<name>.include-paths"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --log-window-size=<n>"}, {"role": "assistant", "content": "Fetch <n> log entries per request when scanning Subversion history.\nThe default is 100. For very large Subversion repositories, larger\nvalues may be needed for clone / fetch to complete in reasonable\ntime. But overly large values may lead to higher memory usage and\nrequest timeouts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  Skip \"doc*\" directory for every fetch"}, {"role": "assistant", "content": "--ignore-paths=\"^doc\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  Skip \"branches\" and \"tags\" of first level directories"}, {"role": "assistant", "content": "--ignore-paths=\"^[^/]+/(?:branches|tags)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --preserve-empty-dirs"}, {"role": "assistant", "content": "Create a placeholder file in the local Git repository for each\nempty directory fetched from Subversion.  This includes directories\nthat become empty by removing all entries in the Subversion\nrepository (but not the directory itself).  The placeholder files\nare also tracked and removed when no longer necessary."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --placeholder-filename=<filename>"}, {"role": "assistant", "content": "Set the name of placeholder files created by --preserve-empty-dirs.\nDefault: \".gitignore\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -l  --local"}, {"role": "assistant", "content": "Do not fetch remotely; only run git rebase against the\nlast fetched commit from the upstream SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --no-rebase"}, {"role": "assistant", "content": "After committing, do not rebase or reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --commit-url <URL>"}, {"role": "assistant", "content": "Commit to this SVN URL (the full path).  This is intended to\nallow existing git svn repositories created with one transport\nmethod (e.g. svn:// or http:// for anonymous read) to be\nreused if a user is later given access to an alternate transport\nmethod (e.g. svn+ssh:// or https:// ) for commit. config key: svn-remote.<name>.commiturl\nconfig key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options) Note that the SVN URL of the commiturl config key includes the SVN branch.\nIf you rather want to set the commit URL for an entire SVN repository use\nsvn-remote.<name>.pushurl instead. Using this option for any other purpose (don’t ask) is very strongly\ndiscouraged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --mergeinfo=<mergeinfo>"}, {"role": "assistant", "content": "Add the given merge information during the dcommit\n(e.g. --mergeinfo=\"/branches/foo:1-10\" ). All svn server versions can\nstore this information (as a property), and svn clients starting from\nversion 1.5 can make use of it. To specify merge information from multiple\nbranches, use a single space character between the branches\n( --mergeinfo=\"/branches/foo:1-10 /branches/bar:3,5-6,8\" ) config key: svn.pushmergeinfo This option will cause git-svn to attempt to automatically populate the\nsvn:mergeinfo property in the SVN repository when possible. Currently, this can\nonly be done when dcommitting non-fast-forward merges where all parents but the\nfirst have already been pushed into SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --interactive"}, {"role": "assistant", "content": "Ask the user to confirm that a patch set should actually be sent to SVN.\nFor each patch, one may answer \"yes\" (accept this patch), \"no\" (discard this\npatch), \"all\" (accept all patches), or \"quit\". git svn dcommit returns immediately if answer is \"no\" or \"quit\", without\ncommitting anything to SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -m  --message"}, {"role": "assistant", "content": "Allows to specify the commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -t  --tag"}, {"role": "assistant", "content": "Create a tag by using the tags_subdir instead of the branches_subdir\nspecified during git svn init."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -d<path>  --destination=<path>"}, {"role": "assistant", "content": "If more than one --branches (or --tags) option was given to the init or clone command, you must provide the location of the branch (or\ntag) you wish to create in the SVN repository.  <path> specifies which\npath to use to create the branch or tag and should match the pattern\non the left-hand side of one of the configured branches or tags\nrefspecs.  You can see these refspecs with the commands git config --get-all svn-remote.<name>.branches\ngit config --get-all svn-remote.<name>.tags where <name> is the name of the SVN repository as specified by the -R option to init (or \"svn\" by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --username"}, {"role": "assistant", "content": "Specify the SVN username to perform the commit as.  This option overrides\nthe username configuration property."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --commit-url"}, {"role": "assistant", "content": "Use the specified URL to connect to the destination Subversion\nrepository.  This is useful in cases where the source SVN\nrepository is read-only.  This option overrides configuration\nproperty commiturl . git config --get-all svn-remote.<name>.commiturl"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --parents"}, {"role": "assistant", "content": "Create parent folders. This parameter is equivalent to the parameter\n--parents on svn cp commands and is useful for non-standard repository\nlayouts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <n>[:<n>]  --revision=<n>[:<n>]"}, {"role": "assistant", "content": "is supported, non-numeric args are not:\nHEAD, NEXT, BASE, PREV, etc …​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -v  --verbose"}, {"role": "assistant", "content": "it’s not completely compatible with the --verbose\noutput in svn log, but reasonably close."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --limit=<n>"}, {"role": "assistant", "content": "is NOT the same as --max-count, doesn’t count\nmerged/excluded commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --incremental"}, {"role": "assistant", "content": "supported"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --show-commit"}, {"role": "assistant", "content": "shows the Git commit sha1, as well"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --oneline"}, {"role": "assistant", "content": "our version of --pretty=oneline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --git-format"}, {"role": "assistant", "content": "Produce output in the same format as git blame , but with\nSVN revision numbers instead of Git commit hashes. In this mode,\nchanges that haven’t been committed to SVN (including local\nworking-copy edits) are shown as revision 0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -B  --before"}, {"role": "assistant", "content": "Don’t require an exact match if given an SVN revision, instead find\nthe commit corresponding to the state of the SVN repository (on the\ncurrent branch) at the specified revision."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -A  --after"}, {"role": "assistant", "content": "Don’t require an exact match if given an SVN revision; if there is\nnot an exact match return the closest match searching forward in the\nhistory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -m <msg>  --message=<msg>"}, {"role": "assistant", "content": "Use the given msg as the commit message. This option\ndisables the --edit option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -F <filename>  --file=<filename>"}, {"role": "assistant", "content": "Take the commit message from the given file. This option\ndisables the --edit option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <n>  --revision=<n>"}, {"role": "assistant", "content": "Specify the most recent revision to keep.  All later revisions\nare discarded."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -p  --parent"}, {"role": "assistant", "content": "Discard the specified revision as well, keeping the nearest\nparent instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  Example:"}, {"role": "assistant", "content": "Assume you have local changes in \"master\", but you need to refetch \"r2\". r1---r2---r3 remotes/git-svn\n                \\\n                 A---B master Fix the ignore-paths or SVN permissions problem that caused \"r2\" to\nbe incomplete in the first place.  Then: git svn reset -r2 -p\ngit svn fetch r1---r2'--r3' remotes/git-svn\n      \\\n       r2---r3---A---B master Then fixup \"master\" with git rebase .\nDo NOT use git merge or your history will not be compatible with a\nfuture dcommit ! git rebase --onto remotes/git-svn A^ master r1---r2'--r3' remotes/git-svn\n                \\\n                 A'--B' master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --shared[=(false|true|umask|group|all|world|everybody)]  --template=<template-directory>"}, {"role": "assistant", "content": "Only used with the init command.\nThese are passed directly to git init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <arg>  --revision <arg>"}, {"role": "assistant", "content": "Used with the fetch command. This allows revision ranges for partial/cauterized history\nto be supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),\n$NUMBER:HEAD, and BASE:$NUMBER are all supported. This can allow you to make partial mirrors when running fetch;\nbut is generally not recommended because history will be skipped\nand lost."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -  --stdin"}, {"role": "assistant", "content": "Only used with the set-tree command. Read a list of commits from stdin and commit them in reverse\norder.  Only the leading sha1 is read from each line, so git rev-list --pretty=oneline output can be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --rmdir"}, {"role": "assistant", "content": "Only used with the dcommit , set-tree and commit-diff commands. Remove directories from the SVN tree if there are no files left\nbehind.  SVN can version empty directories, and they are not\nremoved by default if there are no files left in them.  Git\ncannot version empty directories.  Enabling this flag will make\nthe commit to SVN act like Git. config key: svn.rmdir"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -e  --edit"}, {"role": "assistant", "content": "Only used with the dcommit , set-tree and commit-diff commands. Edit the commit message before committing to SVN.  This is off by\ndefault for objects that are commits, and forced on when committing\ntree objects. config key: svn.edit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -l<num>  --find-copies-harder"}, {"role": "assistant", "content": "Only used with the dcommit , set-tree and commit-diff commands. They are both passed directly to git diff-tree ; see git-diff-tree for more information. config key: svn.l\nconfig key: svn.findcopiesharder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -A<filename>  --authors-file=<filename>"}, {"role": "assistant", "content": "Syntax is compatible with the file used by git cvsimport but\nan empty email address can be supplied with <> : loginname = Joe User <user@example.com> If this option is specified and git svn encounters an SVN\ncommitter name that does not exist in the authors-file, git svn will abort operation. The user will then have to add the\nappropriate entry.  Re-running the previous git svn command\nafter the authors-file is modified should continue operation. config key: svn.authorsfile"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --authors-prog=<filename>"}, {"role": "assistant", "content": "If this option is specified, for each SVN committer name that\ndoes not exist in the authors file, the given file is executed\nwith the committer name as the first argument.  The program is\nexpected to return a single line of the form \"Name <email>\" or\n\"Name <>\", which will be treated as if included in the authors\nfile. Due to historical reasons a relative filename is first searched\nrelative to the current directory for init and clone and relative\nto the root of the working tree for fetch . If filename is\nnot found, it is searched like any other command in $PATH . config key: svn.authorsProg"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -q  --quiet"}, {"role": "assistant", "content": "Make git svn less verbose. Specify a second time to make it\neven less verbose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -m  --merge  -s<strategy>  --strategy=<strategy>  -p  --rebase-merges"}, {"role": "assistant", "content": "These are only used with the dcommit and rebase commands. Passed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -n  --dry-run"}, {"role": "assistant", "content": "This can be used with the dcommit , rebase , branch and tag commands. For dcommit , print out the series of Git arguments that would show\nwhich diffs would be committed to SVN. For rebase , display the local branch associated with the upstream svn\nrepository associated with the current branch and the URL of svn\nrepository that will be fetched from. For branch and tag , display the urls that will be used for copying when\ncreating the branch or tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --use-log-author"}, {"role": "assistant", "content": "When retrieving svn commits into Git (as part of fetch , rebase , or dcommit operations), look for the first From: line or Signed-off-by trailer\nin the log message and use that as the author string. config key: svn.useLogAuthor"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --add-author-from"}, {"role": "assistant", "content": "When committing to svn from Git (as part of set-tree or dcommit operations), if the existing log message doesn’t already have a From: or Signed-off-by trailer, append a From: line based on the\nGit commit’s author string.  If you use this, then --use-log-author will retrieve a valid author string for all commits. config key: svn.addAuthorFrom"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -i<GIT_SVN_ID>  --id <GIT_SVN_ID>"}, {"role": "assistant", "content": "This sets GIT_SVN_ID (instead of using the environment).  This\nallows the user to override the default refname to fetch from\nwhen tracking a single URL.  The log and dcommit commands\nno longer require this switch as an argument."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -R<remote-name>  --svn-remote <remote-name>"}, {"role": "assistant", "content": "Specify the [svn-remote \"<remote-name>\"] section to use,\nthis allows SVN multiple repositories to be tracked.\nDefault: \"svn\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --follow-parent"}, {"role": "assistant", "content": "This option is only relevant if we are tracking branches (using\none of the repository layout options --trunk, --tags,\n--branches, --stdlayout). For each tracked branch, try to find\nout where its revision was copied from, and set\na suitable parent in the first Git commit for the branch.\nThis is especially helpful when we’re tracking a directory\nthat has been moved around within the repository.  If this\nfeature is disabled, the branches created by git svn will all\nbe linear and not share any history, meaning that there will be\nno information on where branches were branched off or merged.\nHowever, following long/convoluted histories can take a long\ntime, so disabling this feature may speed up the cloning\nprocess. This feature is enabled by default, use\n--no-follow-parent to disable it. config key: svn.followparent"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn.noMetadata  svn-remote.<name>.noMetadata"}, {"role": "assistant", "content": "This gets rid of the git-svn-id: lines at the end of every commit. This option can only be used for one-shot imports as git svn will not be able to fetch again without metadata. Additionally,\nif you lose your $GIT_DIR/svn/**/.rev_map.* files, git svn will not\nbe able to rebuild them. The git svn log command will not work on repositories using\nthis, either.  Using this conflicts with the useSvmProps option for (hopefully) obvious reasons. This option is NOT recommended as it makes it difficult to track down\nold references to SVN revision numbers in existing documentation, bug\nreports, and archives.  If you plan to eventually migrate from SVN to\nGit and are certain about dropping SVN history, consider git-filter-repo instead.\nfilter-repo also allows reformatting of metadata for ease-of-reading\nand rewriting authorship info for non-\"svn.authorsFile\" users."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn.useSvmProps  svn-remote.<name>.useSvmProps"}, {"role": "assistant", "content": "This allows git svn to re-map repository URLs and UUIDs from\nmirrors created using SVN::Mirror (or svk) for metadata. If an SVN revision has a property, \"svm:headrev\", it is likely\nthat the revision was created by SVN::Mirror (also used by SVK).\nThe property contains a repository UUID and a revision.  We want\nto make it look like we are mirroring the original URL, so\nintroduce a helper function that returns the original identity\nURL and UUID, and use it when generating metadata in commit\nmessages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn.useSvnsyncProps  svn-remote.<name>.useSvnsyncprops"}, {"role": "assistant", "content": "Similar to the useSvmProps option; this is for users\nof the svnsync(1) command distributed with SVN 1.4.x and\nlater."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn-remote.<name>.rewriteRoot"}, {"role": "assistant", "content": "This allows users to create repositories from alternate\nURLs.  For example, an administrator could run git svn on the\nserver locally (accessing via file://) but wish to distribute\nthe repository with a public http:// or svn:// URL in the\nmetadata so users of it will see the public URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn-remote.<name>.rewriteUUID"}, {"role": "assistant", "content": "Similar to the useSvmProps option; this is for users who need\nto remap the UUID manually. This may be useful in situations\nwhere the original UUID is not available via either useSvmProps\nor useSvnsyncProps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn-remote.<name>.pushurl"}, {"role": "assistant", "content": "Similar to Git’s remote.<name>.pushurl , this key is designed\nto be used in cases where url points to an SVN repository\nvia a read-only transport, to provide an alternate read/write\ntransport. It is assumed that both keys point to the same\nrepository. Unlike commiturl , pushurl is a base path. If\neither commiturl or pushurl could be used, commiturl takes precedence."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn.brokenSymlinkWorkaround"}, {"role": "assistant", "content": "This disables potentially expensive checks to workaround\nbroken symlinks checked into SVN by broken clients.  Set this\noption to \"false\" if you track a SVN repository with many\nempty blobs that are not symlinks.  This option may be changed\nwhile git svn is running and take effect on the next\nrevision fetched.  If unset, git svn assumes this option to\nbe \"true\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn.pathnameencoding"}, {"role": "assistant", "content": "This instructs git svn to recode pathnames to a given encoding.\nIt can be used by windows users and by those who work in non-utf8\nlocales to avoid corrupted file names with non-ASCII characters.\nValid encodings are the ones supported by Perl’s Encode module."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  svn-remote.<name>.automkdirs"}, {"role": "assistant", "content": "Normally, the \"git svn clone\" and \"git svn rebase\" commands\nattempt to recreate empty directories that are in the\nSubversion repository.  If this option is set to \"false\", then\nempty directories will only be created if the \"git svn mkdirs\"\ncommand is run explicitly.  If unset, git svn assumes this\noption to be \"true\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "BASIC EXAMPLES Tracking and contributing to the trunk of a Subversion-managed project\n(ignoring tags and branches): # Clone a repo (like git clone):\n\tgit svn clone http://svn.example.com/project/trunk\n# Enter the newly cloned directory:\n\tcd trunk\n# You should be on master branch, double-check with 'git branch'\n\tgit branch\n# Do some work and commit locally to Git:\n\tgit commit ...\n# Something is committed to SVN, rebase your local changes against the\n# latest changes in SVN:\n\tgit svn rebase\n# Now commit your changes (that were committed previously using Git) to SVN,\n# as well as automatically updating your working HEAD:\n\tgit svn dcommit\n# Append svn:ignore settings to the default Git exclude file:\n\tgit svn show-ignore >> .git/info/exclude Tracking and contributing to an entire Subversion-managed project\n(complete with a trunk, tags and branches): # Clone a repo with standard SVN directory layout (like git clone):\n\tgit svn clone http://svn.example.com/project --stdlayout --prefix svn/\n# Or, if the repo uses a non-standard directory layout:\n\tgit svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/\n# View all branches and tags you have cloned:\n\tgit branch -r\n# Create a new branch in SVN\n\tgit svn branch waldo\n# Reset your master to trunk (or any other branch, replacing 'trunk'\n# with the appropriate name):\n\tgit reset --hard svn/trunk\n# You may only dcommit to one branch/tag/trunk at a time.  The usage\n# of dcommit/rebase/show-ignore should be the same as above. The initial git svn clone can be quite time-consuming\n(especially for large Subversion repositories). If multiple\npeople (or one person with multiple machines) want to use git svn to interact with the same Subversion repository, you can\ndo the initial git svn clone to a repository on a server and\nhave each person clone that repository with git clone : # Do the initial import on a server\n\tssh server \"cd /pub && git svn clone http://svn.example.com/project [options...]\"\n# Clone locally - make sure the refs/remotes/ space matches the server\n\tmkdir project\n\tcd project\n\tgit init\n\tgit remote add origin server:/pub/project\n\tgit config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'\n\tgit fetch\n# Prevent fetch/pull from remote Git server in the future,\n# we only want to use git svn for future updates\n\tgit config --remove-section remote.origin\n# Create a local branch from one of the branches just fetched\n\tgit checkout -b master FETCH_HEAD\n# Initialize 'git svn' locally (be sure to use the same URL and\n# --stdlayout/-T/-b/-t/--prefix options as were used on server)\n\tgit svn init http://svn.example.com/project [options...]\n# Pull the latest changes from Subversion\n\tgit svn rebase"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "REBASE VS. PULL/MERGE Prefer to use git svn rebase or git rebase , rather than git pull or git merge to synchronize unintegrated commits with a git svn branch. Doing so will keep the history of unintegrated commits linear with\nrespect to the upstream SVN repository and allow the use of the preferred git svn dcommit subcommand to push unintegrated commits back into SVN. Originally, git svn recommended that developers pulled or merged from\nthe git svn branch.  This was because the author favored git svn set-tree B to commit a single head rather than the git svn set-tree A..B notation to commit multiple commits. Use of git pull or git merge with git svn set-tree A..B will cause non-linear\nhistory to be flattened when committing into SVN and this can lead to merge\ncommits unexpectedly reversing previous commits in SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "MERGE TRACKING While git svn can track\ncopy history (including branches and tags) for repositories adopting a\nstandard layout, it cannot yet represent merge history that happened\ninside git back upstream to SVN users.  Therefore it is advised that\nusers keep history as linear as possible inside Git to ease\ncompatibility with SVN (see the CAVEATS section below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "HANDLING OF SVN BRANCHES If git svn is configured to fetch branches (and --follow-branches\nis in effect), it sometimes creates multiple Git branches for one\nSVN branch, where the additional branches have names of the form branchname@nnn (with nnn an SVN revision number).  These additional\nbranches are created if git svn cannot find a parent commit for the\nfirst commit in an SVN branch, to connect the branch to the history of\nthe other branches. Normally, the first commit in an SVN branch consists\nof a copy operation. git svn will read this commit to get the SVN\nrevision the branch was created from. It will then try to find the\nGit commit that corresponds to this SVN revision, and use that as the\nparent of the branch. However, it is possible that there is no suitable\nGit commit to serve as parent.  This will happen, among other reasons,\nif the SVN branch is a copy of a revision that was not fetched by git\nsvn (e.g. because it is an old revision that was skipped with --revision ), or if in SVN a directory was copied that is not tracked\nby git svn (such as a branch that is not tracked at all, or a\nsubdirectory of a tracked branch). In these cases, git svn will still\ncreate a Git branch, but instead of using an existing Git commit as the\nparent of the branch, it will read the SVN history of the directory the\nbranch was copied from and create appropriate Git commits.  This is\nindicated by the message \"Initializing parent: <branchname>\". Additionally, it will create a special branch named <branchname>@<SVN-Revision> , where <SVN-Revision> is the SVN revision\nnumber the branch was copied from.  This branch will point to the newly\ncreated parent commit of the branch.  If in SVN the branch was deleted\nand later recreated from a different version, there will be multiple\nsuch branches with an @ . Note that this may mean that multiple Git commits are created for a\nsingle SVN revision. An example: in an SVN repository with a standard\ntrunk/tags/branches layout, a directory trunk/sub is created in r.100.\nIn r.200, trunk/sub is branched by copying it to branches/. git svn\nclone -s will then create a branch sub . It will also create new Git\ncommits for r.100 through r.199 and use these as the history of branch sub . Thus there will be two Git commits for each revision from r.100\nto r.199 (one containing trunk/, one containing trunk/sub/). Finally,\nit will create a branch sub@200 pointing to the new parent commit of\nbranch sub (i.e. the commit for r.200 and trunk/sub/)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "CAVEATS For the sake of simplicity and interoperating with Subversion,\nit is recommended that all git svn users clone, fetch and dcommit\ndirectly from the SVN server, and avoid all git clone / pull / merge / push operations between Git repositories and branches.  The recommended\nmethod of exchanging code between Git branches and users is git format-patch and git am , or just 'dcommit’ing to the SVN repository. Running git merge or git pull is NOT recommended on a branch you\nplan to dcommit from because Subversion users cannot see any\nmerges you’ve made.  Furthermore, if you merge or pull from a Git branch\nthat is a mirror of an SVN branch, dcommit may commit to the wrong\nbranch. If you do merge, note the following rule: git svn dcommit will\nattempt to commit on top of the SVN commit named in git log --grep=^git-svn-id: --first-parent -1 You must therefore ensure that the most recent commit of the branch\nyou want to dcommit to is the first parent of the merge.  Chaos will\nensue otherwise, especially if the first parent is an older commit on\nthe same SVN branch. git clone does not clone branches under the refs/remotes/ hierarchy or\nany git svn metadata, or config.  So repositories created and managed with\nusing git svn should use rsync for cloning, if cloning is to be done\nat all. Since dcommit uses rebase internally, any Git branches you git push to\nbefore dcommit on will require forcing an overwrite of the existing ref\non the remote repository.  This is generally considered bad practice,\nsee the git-push documentation for details. Do not use the --amend option of git-commit on a change you’ve\nalready dcommitted.  It is considered bad practice to --amend commits\nyou’ve already pushed to a remote repository for other users, and\ndcommit with SVN is analogous to that. When cloning an SVN repository, if none of the options for describing\nthe repository layout is used (--trunk, --tags, --branches,\n--stdlayout), git svn clone will create a Git repository with\ncompletely linear history, where branches and tags appear as separate\ndirectories in the working copy.  While this is the easiest way to get a\ncopy of a complete repository, for projects with many branches it will\nlead to a working copy many times larger than just the trunk. Thus for\nprojects using the standard directory structure (trunk/branches/tags),\nit is recommended to clone with option --stdlayout . If the project\nuses a non-standard structure, and/or if branches and tags are not\nrequired, it is easiest to only clone one directory (typically trunk),\nwithout giving any repository layout options.  If the full history with\nbranches and tags is required, the options --trunk / --branches / --tags must be used. When using multiple --branches or --tags, git svn does not automatically\nhandle name collisions (for example, if two branches from different paths have\nthe same name, or if a branch and a tag have the same name).  In these cases,\nuse init to set up your Git repository then, before your first fetch , edit\nthe $GIT_DIR/config file so that the branches and tags are associated\nwith different name spaces.  For example: branches = stable/*:refs/remotes/svn/stable/*\nbranches = debug/*:refs/remotes/svn/debug/*"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "CONFIGURATION git svn stores [svn-remote] configuration information in the\nrepository $GIT_DIR/config file.  It is similar the core Git\n[remote] sections except fetch keys do not accept glob\narguments; but they are instead handled by the branches and tags keys.  Since some SVN repositories are oddly\nconfigured with multiple projects glob expansions such those\nlisted below are allowed: [svn-remote \"project-a\"]\n\turl = http://server.org/svn\n\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n\tbranches = branches/*/project-a:refs/remotes/project-a/branches/*\n\tbranches = branches/release_*:refs/remotes/project-a/branches/release_*\n\tbranches = branches/re*se:refs/remotes/project-a/branches/*\n\ttags = tags/*/project-a:refs/remotes/project-a/tags/* Keep in mind that the * (asterisk) wildcard of the local ref\n(right of the : ) must be the farthest right path component;\nhowever the remote wildcard may be anywhere as long as it’s an\nindependent path component (surrounded by / or EOL).   This\ntype of configuration is not automatically created by init and\nshould be manually entered with a text-editor or using git config . Also note that only one asterisk is allowed per word. For example: branches = branches/re*se:refs/remotes/project-a/branches/* will match branches release , rese , re123se , however branches = branches/re*s*e:refs/remotes/project-a/branches/* will produce an error. It is also possible to fetch a subset of branches or tags by using a\ncomma-separated list of names within braces. For example: [svn-remote \"huge-project\"]\n\turl = http://server.org/svn\n\tfetch = trunk/src:refs/remotes/trunk\n\tbranches = branches/{red,green}/src:refs/remotes/project-a/branches/*\n\ttags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/* Multiple fetch, branches, and tags keys are supported: [svn-remote \"messy-repo\"]\n\turl = http://server.org/svn\n\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n\tfetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo\n\tbranches = branches/server/*:refs/remotes/project-a/branches/*\n\tbranches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*\n\ttags = tags/server/*:refs/remotes/project-a/tags/* Creating a branch in such a configuration requires disambiguating which\nlocation to use using the -d or --destination flag: $ git svn branch -d branches/server release-2-3-0 Note that git-svn keeps track of the highest revision in which a branch\nor tag has appeared. If the subset of branches or tags is changed after\nfetching, then $GIT_DIR/svn/.metadata must be manually edited to remove\n(or reset) branches-maxRev and/or tags-maxRev as appropriate."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  $GIT_DIR/svn/**/.rev_map.*"}, {"role": "assistant", "content": "Mapping between Subversion revision numbers and Git commit\nnames.  In a repository where the noMetadata option is not set,\nthis can be rebuilt from the git-svn-id: lines that are at the\nend of every commit (see the svn.noMetadata section above for\ndetails). git svn fetch and git svn rebase automatically update the rev_map\nif it is missing or not up to date. git svn reset automatically\nrewinds it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "BUGS We ignore all SVN properties except svn:executable.  Any unhandled\nproperties are logged to $GIT_DIR/svn/<refname>/unhandled.log Renamed and copied directories are not detected by Git and hence not\ntracked when committing to SVN.  I do not plan on adding support for\nthis as it’s quite difficult and time-consuming to get working for all\nthe possible corner cases (Git doesn’t do it, either).  Committing\nrenamed and copied files is fully supported if they’re similar enough\nfor Git to detect them. In SVN, it is possible (though discouraged) to commit changes to a tag\n(because a tag is just a directory copy, thus technically the same as a\nbranch). When cloning an SVN repository, git svn cannot know if such a\ncommit to a tag will happen in the future. Thus it acts conservatively\nand imports all SVN tags as branches, prefixing the tag name with tags/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "NAME git-fast-import - Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "SYNOPSIS frontend | git fast-import [<options>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "DESCRIPTION This program is usually not what the end user wants to run directly.\nMost end users want to use one of the existing frontend programs,\nwhich parses a specific type of foreign source and feeds the contents\nstored there to git fast-import . fast-import reads a mixed command/data stream from standard input and\nwrites one or more packfiles directly into the current repository.\nWhen EOF is received on standard input, fast import writes out\nupdated branch and tag refs, fully updating the current repository\nwith the newly imported data. The fast-import backend itself can import into an empty repository (one that\nhas already been initialized by git init ) or incrementally\nupdate an existing populated repository.  Whether or not incremental\nimports are supported from a particular foreign source depends on\nthe frontend program in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --force"}, {"role": "assistant", "content": "Force updating modified existing branches, even if doing\nso would cause commits to be lost (as the new commit does\nnot contain the old commit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --quiet"}, {"role": "assistant", "content": "Disable the output shown by --stats, making fast-import usually\nbe silent when it is successful.  However, if the import stream\nhas directives intended to show user output (e.g. progress directives), the corresponding messages will still be shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --stats"}, {"role": "assistant", "content": "Display some basic statistics about the objects fast-import has\ncreated, the packfiles they were stored into, and the\nmemory used by fast-import during this run.  Showing this output\nis currently the default, but can be disabled with --quiet."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --allow-unsafe-features"}, {"role": "assistant", "content": "Many command-line options can be provided as part of the\nfast-import stream itself by using the feature or option commands. However, some of these options are unsafe (e.g.,\nallowing fast-import to access the filesystem outside of the\nrepository). These options are disabled by default, but can be\nallowed by providing this option on the command line.  This\ncurrently impacts only the export-marks , import-marks , and import-marks-if-exists feature commands. Only enable this option if you trust the program generating the\nfast-import stream! This option is enabled automatically for\nremote-helpers that use the `import` capability, as they are\nalready trusted to run their own code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --cat-blob-fd=<fd>"}, {"role": "assistant", "content": "Write responses to get-mark , cat-blob , and ls queries to the\nfile descriptor <fd> instead of stdout .  Allows progress output intended for the end-user to be separated from other\noutput."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --date-format=<fmt>"}, {"role": "assistant", "content": "Specify the type of dates the frontend will supply to\nfast-import within author , committer and tagger commands.\nSee “Date Formats” below for details about which formats\nare supported, and their syntax."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --done"}, {"role": "assistant", "content": "Terminate with error if there is no done command at the end of\nthe stream.  This option might be useful for detecting errors\nthat cause the frontend to terminate before it has started to\nwrite a stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --export-marks=<file>"}, {"role": "assistant", "content": "Dumps the internal marks table to <file> when complete.\nMarks are written one per line as :markid SHA-1 .\nFrontends can use this file to validate imports after they\nhave been completed, or to save the marks table across\nincremental runs.  As <file> is only opened and truncated\nat checkpoint (or completion) the same path can also be\nsafely given to --import-marks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --import-marks=<file>"}, {"role": "assistant", "content": "Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks.\nMultiple options may be supplied to import more than one\nset of marks.  If a mark is defined to different values,\nthe last file wins."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --import-marks-if-exists=<file>"}, {"role": "assistant", "content": "Like --import-marks but instead of erroring out, silently\nskips the file if it does not exist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --[no-]relative-marks"}, {"role": "assistant", "content": "After specifying --relative-marks the paths specified\nwith --import-marks= and --export-marks= are relative\nto an internal directory in the current repository.\nIn git-fast-import this means that the paths are relative\nto the .git/info/fast-import directory. However, other\nimporters may use a different location. Relative and non-relative marks may be combined by interweaving\n--(no-)-relative-marks with the --(import|export)-marks= options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --rewrite-submodules-from=<name>:<file>  --rewrite-submodules-to=<name>:<file>"}, {"role": "assistant", "content": "Rewrite the object IDs for the submodule specified by <name> from the values\nused in the from <file> to those used in the to <file>. The from marks should\nhave been created by git fast-export , and the to marks should have been\ncreated by git fast-import when importing that same submodule. <name> may be any arbitrary string not containing a colon character, but the\nsame value must be used with both options when specifying corresponding marks.\nMultiple submodules may be specified with different values for <name>. It is an\nerror not to use these options in corresponding pairs. These options are primarily useful when converting a repository from one hash\nalgorithm to another; without them, fast-import will fail if it encounters a\nsubmodule because it has no way of writing the object ID into the new hash\nalgorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --active-branches=<n>"}, {"role": "assistant", "content": "Maximum number of branches to maintain active at once.\nSee “Memory Utilization” below for details.  Default is 5."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --big-file-threshold=<n>"}, {"role": "assistant", "content": "Maximum size of a blob that fast-import will attempt to\ncreate a delta for, expressed in bytes.  The default is 512m\n(512 MiB).  Some importers may wish to lower this on systems\nwith constrained memory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --depth=<n>"}, {"role": "assistant", "content": "Maximum delta depth, for blob and tree deltification.\nDefault is 50."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --export-pack-edges=<file>"}, {"role": "assistant", "content": "After creating a packfile, print a line of data to\n<file> listing the filename of the packfile and the last\ncommit on each branch that was written to that packfile.\nThis information may be useful after importing projects\nwhose total object set exceeds the 4 GiB packfile limit,\nas these commits can be used as edge points during calls\nto git pack-objects ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --max-pack-size=<n>"}, {"role": "assistant", "content": "Maximum size of each output packfile.\nThe default is unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  fastimport.unpackLimit"}, {"role": "assistant", "content": "See git-config"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "PERFORMANCE The design of fast-import allows it to import large projects in a minimum\namount of memory usage and processing time.  Assuming the frontend\nis able to keep up with fast-import and feed it a constant stream of data,\nimport times for projects holding 10+ years of history and containing\n100,000+ individual commits are generally completed in just 1-2\nhours on quite modest (~$2,000 USD) hardware. Most bottlenecks appear to be in foreign source data access (the\nsource just cannot extract revisions fast enough) or disk IO (fast-import\nwrites as fast as the disk will take the data).  Imports will run\nfaster if the source data is stored on a different drive than the\ndestination Git repository (due to less IO contention)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "DEVELOPMENT COST A typical frontend for fast-import tends to weigh in at approximately 200\nlines of Perl/Python/Ruby code.  Most developers have been able to\ncreate working importers in just a couple of hours, even though it\nis their first exposure to fast-import, and sometimes even to Git.  This is\nan ideal situation, given that most conversion tools are throw-away\n(use once, and never look back)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "PARALLEL OPERATION Like git push or git fetch , imports handled by fast-import are safe to\nrun alongside parallel git repack -a -d or git gc invocations,\nor any other Git operation (including git prune , as loose objects\nare never used by fast-import). fast-import does not lock the branch or tag refs it is actively importing.\nAfter the import, during its ref update phase, fast-import tests each\nexisting branch ref to verify the update will be a fast-forward\nupdate (the commit stored in the ref is contained in the new\nhistory of the commit to be written).  If the update is not a\nfast-forward update, fast-import will skip updating that ref and instead\nprints a warning message.  fast-import will always attempt to update all\nbranch refs, and does not stop on the first failure. Branch updates can be forced with --force, but it’s recommended that\nthis only be used on an otherwise quiet repository.  Using --force\nis not necessary for an initial import into an empty repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "TECHNICAL DISCUSSION fast-import tracks a set of branches in memory.  Any branch can be created\nor modified at any point during the import process by sending a commit command on the input stream.  This design allows a frontend\nprogram to process an unlimited number of branches simultaneously,\ngenerating commits in the order they are available from the source\ndata.  It also simplifies the frontend programs considerably. fast-import does not use or alter the current working directory, or any\nfile within it.  (It does however update the current Git repository,\nas referenced by GIT_DIR .)  Therefore an import frontend may use\nthe working directory for its own purposes, such as extracting file\nrevisions from the foreign source.  This ignorance of the working\ndirectory also allows fast-import to run very quickly, as it does not\nneed to perform any costly file update operations when switching\nbetween branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  raw"}, {"role": "assistant", "content": "This is the Git native format and is <time> SP <offutc> .\nIt is also fast-import’s default format, if --date-format was\nnot specified. The time of the event is specified by <time> as the number of\nseconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is\nwritten as an ASCII decimal integer. The local offset is specified by <offutc> as a positive or negative\noffset from UTC.  For example EST (which is 5 hours behind UTC)\nwould be expressed in <tz> by “-0500” while UTC is “+0000”.\nThe local offset does not affect <time> ; it is used only as an\nadvisement to help formatting routines display the timestamp. If the local offset is not available in the source material, use\n“+0000”, or the most common local offset.  For example many\norganizations have a CVS repository which has only ever been accessed\nby users who are located in the same location and time zone.  In this\ncase a reasonable offset from UTC could be assumed. Unlike the rfc2822 format, this format is very strict.  Any\nvariation in formatting will cause fast-import to reject the value,\nand some sanity checks on the numeric values may also be performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  raw-permissive"}, {"role": "assistant", "content": "This is the same as raw except that no sanity checks on\nthe numeric epoch and local offset are performed.  This can\nbe useful when trying to filter or import an existing history\nwith e.g. bogus timezone values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  rfc2822"}, {"role": "assistant", "content": "This is the standard date format as described by RFC 2822. An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git\nparser is accurate, but a little on the lenient side.  It is the\nsame parser used by git am when applying patches\nreceived from email. Some malformed strings may be accepted as valid dates.  In some of\nthese cases Git will still be able to obtain the correct date from\nthe malformed string.  There are also some types of malformed\nstrings which Git will parse wrong, and yet consider valid.\nSeriously malformed strings will be rejected. Unlike the raw format above, the time zone/UTC offset information\ncontained in an RFC 2822 date string is used to adjust the date\nvalue to UTC prior to storage.  Therefore it is important that\nthis information be as accurate as possible. If the source material uses RFC 2822 style dates,\nthe frontend should let fast-import handle the parsing and conversion\n(rather than attempting to do it itself) as the Git parser has\nbeen well tested in the wild. Frontends should prefer the raw format if the source material\nalready uses UNIX-epoch format, can be coaxed to give dates in that\nformat, or its format is easily convertible to it, as there is no\nambiguity in parsing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  now"}, {"role": "assistant", "content": "Always use the current time and time zone.  The literal now must always be supplied for <when> . This is a toy format.  The current time and time zone of this system\nis always copied into the identity string at the time it is being\ncreated by fast-import.  There is no way to specify a different time or\ntime zone. This particular format is supplied as it’s short to implement and\nmay be useful to a process that wants to create a new commit\nright now, without needing to use a working directory or git update-index . If separate author and committer commands are used in a commit the timestamps may not match, as the system clock will be polled\ntwice (once for each command).  The only way to ensure that both\nauthor and committer identity information has the same timestamp\nis to omit author (thus copying from committer ) or to use a\ndate format other than now ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  commit"}, {"role": "assistant", "content": "Creates a new branch or updates an existing branch by\ncreating a new commit and updating the branch to point at\nthe newly created commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  tag"}, {"role": "assistant", "content": "Creates an annotated tag object from an existing commit or\nbranch.  Lightweight tags are not supported by this command,\nas they are not recommended for recording meaningful points\nin time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  reset"}, {"role": "assistant", "content": "Reset an existing branch (or a new branch) to a specific\nrevision.  This command must be used to change a branch to\na specific revision without making a commit on it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  blob"}, {"role": "assistant", "content": "Convert raw file data into a blob, for future use in a commit command.  This command is optional and is not\nneeded to perform an import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  alias"}, {"role": "assistant", "content": "Record that a mark refers to a given object without first\ncreating any new object.  Using --import-marks and referring\nto missing marks will cause fast-import to fail, so aliases\ncan provide a way to set otherwise pruned commits to a valid\nvalue (e.g. the nearest non-pruned ancestor)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  checkpoint"}, {"role": "assistant", "content": "Forces fast-import to close the current packfile, generate its\nunique SHA-1 checksum and index, and start a new packfile.\nThis command is optional and is not needed to perform\nan import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  progress"}, {"role": "assistant", "content": "Causes fast-import to echo the entire line to its own\nstandard output.  This command is optional and is not needed\nto perform an import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  done"}, {"role": "assistant", "content": "Marks the end of the stream. This command is optional\nunless the done feature was requested using the --done command-line option or feature done command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  get-mark"}, {"role": "assistant", "content": "Causes fast-import to print the SHA-1 corresponding to a mark\nto the file descriptor set with --cat-blob-fd , or stdout if\nunspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  cat-blob"}, {"role": "assistant", "content": "Causes fast-import to print a blob in cat-file --batch format to the file descriptor set with --cat-blob-fd or stdout if unspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  ls"}, {"role": "assistant", "content": "Causes fast-import to print a line describing a directory\nentry in ls-tree format to the file descriptor set with --cat-blob-fd or stdout if unspecified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  feature"}, {"role": "assistant", "content": "Enable the specified feature. This requires that fast-import\nsupports the specified feature, and aborts if it does not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  option"}, {"role": "assistant", "content": "Specify any of the options listed under OPTIONS that do not\nchange stream semantic to suit the frontend’s needs. This\ncommand is optional and is not needed to perform an import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  External data format"}, {"role": "assistant", "content": "The data content for the file was already supplied by a prior blob command.  The frontend just needs to connect it. 'M' SP <mode> SP <dataref> SP <path> LF Here usually <dataref> must be either a mark reference ( :<idnum> )\nset by a prior blob command, or a full 40-byte SHA-1 of an\nexisting Git blob object.  If <mode> is 040000` then <dataref> must be the full 40-byte SHA-1 of an existing\nGit tree object or a mark reference set with --import-marks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Inline data format"}, {"role": "assistant", "content": "The data content for the file has not been supplied yet.\nThe frontend wants to supply it as part of this modify\ncommand. 'M' SP <mode> SP 'inline' SP <path> LF\n\tdata See below for a detailed description of the data command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  External data format"}, {"role": "assistant", "content": "The data content for the note was already supplied by a prior blob command.  The frontend just needs to connect it to the\ncommit that is to be annotated. 'N' SP <dataref> SP <commit-ish> LF Here <dataref> can be either a mark reference ( :<idnum> )\nset by a prior blob command, or a full 40-byte SHA-1 of an\nexisting Git blob object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Inline data format"}, {"role": "assistant", "content": "The data content for the note has not been supplied yet.\nThe frontend wants to supply it as part of this modify\ncommand. 'N' SP 'inline' SP <commit-ish> LF\n\tdata See below for a detailed description of the data command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Exact byte count format"}, {"role": "assistant", "content": "The frontend must specify the number of bytes of data. 'data' SP <count> LF\n\t<raw> LF? where <count> is the exact number of bytes appearing within <raw> .  The value of <count> is expressed as an ASCII decimal\ninteger.  The LF on either side of <raw> is not\nincluded in <count> and will not be included in the imported data. The LF after <raw> is optional (it used to be required) but\nrecommended.  Always including it makes debugging a fast-import\nstream easier as the next command always starts in column 0\nof the next line, even if <raw> did not end with an LF ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Delimited format"}, {"role": "assistant", "content": "A delimiter string is used to mark the end of the data.\nfast-import will compute the length by searching for the delimiter.\nThis format is primarily useful for testing and is not\nrecommended for real data. 'data' SP '<<' <delim> LF\n\t<raw> LF\n\t<delim> LF\n\tLF? where <delim> is the chosen delimiter string.  The string <delim> must not appear on a line by itself within <raw> , as otherwise\nfast-import will think the data ends earlier than it really does.  The LF immediately trailing <raw> is part of <raw> .  This is one of\nthe limitations of the delimited format, it is impossible to supply\na data chunk which does not have an LF as its last byte. The LF after <delim> LF is optional (it used to be required)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Reading from the active commit"}, {"role": "assistant", "content": "This form can only be used in the middle of a commit .\nThe path names a directory entry within fast-import’s\nactive commit.  The path must be quoted in this case. 'ls' SP <path> LF"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Reading from a named tree"}, {"role": "assistant", "content": "The <dataref> can be a mark reference ( :<idnum> ) or the\nfull 40-byte SHA-1 of a Git tag, commit, or tree object,\npreexisting or waiting to be written.\nThe path is relative to the top level of the tree\nnamed by <dataref> . 'ls' SP <dataref> SP <path> LF"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  date-format  export-marks  relative-marks  no-relative-marks  force"}, {"role": "assistant", "content": "Act as though the corresponding command-line option with\na leading -- was passed on the command line\n(see OPTIONS, above)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  import-marks  import-marks-if-exists"}, {"role": "assistant", "content": "Like --import-marks except in two respects: first, only one\n\"feature import-marks\" or \"feature import-marks-if-exists\"\ncommand is allowed per stream; second, an --import-marks=\nor --import-marks-if-exists command-line option overrides\nany of these \"feature\" commands in the stream; third,\n\"feature import-marks-if-exists\" like a corresponding\ncommand-line option silently skips a nonexistent file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  get-mark  cat-blob  ls"}, {"role": "assistant", "content": "Require that the backend support the get-mark , cat-blob ,\nor ls command respectively.\nVersions of fast-import not supporting the specified command\nwill exit with a message indicating so.\nThis lets the import error out early with a clear message,\nrather than wasting time on the early part of an import\nbefore the unsupported command is detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  notes"}, {"role": "assistant", "content": "Require that the backend support the notemodify (N)\nsubcommand to the commit command.\nVersions of fast-import not supporting notes will exit\nwith a message indicating so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  done"}, {"role": "assistant", "content": "Error out if the stream ends without a done command.\nWithout this feature, errors causing the frontend to end\nabruptly at a convenient point in the stream can go\nundetected.  This may occur, for example, if an import\nfront end dies in mid-operation without emitting SIGTERM\nor SIGKILL at its subordinate git fast-import instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "RESPONSES TO COMMANDS New objects written by fast-import are not available immediately.\nMost fast-import commands have no visible effect until the next\ncheckpoint (or completion).  The frontend can send commands to\nfill fast-import’s input pipe without worrying about how quickly\nthey will take effect, which improves performance by simplifying\nscheduling. For some frontends, though, it is useful to be able to read back\ndata from the current repository as it is being updated (for\nexample when the source material describes objects in terms of\npatches to be applied to previously imported objects).  This can\nbe accomplished by connecting the frontend and fast-import via\nbidirectional pipes: mkfifo fast-import-output\nfrontend <fast-import-output |\ngit fast-import >fast-import-output A frontend set up this way can use progress , get-mark , ls , and cat-blob commands to read information from the import in progress. To avoid deadlock, such frontends must completely consume any\npending output from progress , ls , get-mark , and cat-blob before\nperforming writes to fast-import that might block."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "CRASH REPORTS If fast-import is supplied invalid input it will terminate with a\nnon-zero exit status and create a crash report in the top level of\nthe Git repository it was importing into.  Crash reports contain\na snapshot of the internal fast-import state as well as the most\nrecent commands that lead up to the crash. All recent commands (including stream comments, file changes and\nprogress commands) are shown in the command history within the crash\nreport, but raw file data and commit messages are excluded from the\ncrash report.  This exclusion saves space within the report file\nand reduces the amount of buffering that fast-import must perform\nduring execution. After writing a crash report fast-import will close the current\npackfile and export the marks table.  This allows the frontend\ndeveloper to inspect the repository state and resume the import from\nthe point where it crashed.  The modified branches and tags are not\nupdated during a crash, as the import did not complete successfully.\nBranch and tag information can be found in the crash report and\nmust be applied manually if the update is needed. An example crash: $ cat >in <<END_OF_INPUT\n# my very first test commit\ncommit refs/heads/master\ncommitter Shawn O. Pearce <spearce> 19283 -0400\n# who is that guy anyway?\ndata <<EOF\nthis is my commit\nEOF\nM 644 inline .gitignore\ndata <<EOF\n.gitignore\nEOF\nM 777 inline bob\nEND_OF_INPUT $ git fast-import <in\nfatal: Corrupt mode: M 777 inline bob\nfast-import: dumping crash report to .git/fast_import_crash_8434 $ cat .git/fast_import_crash_8434\nfast-import crash report:\n    fast-import process: 8434\n    parent process     : 1391\n    at Sat Sep 1 00:58:12 2007 fatal: Corrupt mode: M 777 inline bob Most Recent Commands Before Crash\n---------------------------------\n  # my very first test commit\n  commit refs/heads/master\n  committer Shawn O. Pearce <spearce> 19283 -0400\n  # who is that guy anyway?\n  data <<EOF\n  M 644 inline .gitignore\n  data <<EOF\n* M 777 inline bob Active Branch LRU\n-----------------\n    active_branches = 1 cur, 5 max pos  clock name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 1)      0 refs/heads/master Inactive Branches\n-----------------\nrefs/heads/master:\n  status      : active loaded dirty\n  tip commit  : 0000000000000000000000000000000000000000\n  old tree    : 0000000000000000000000000000000000000000\n  cur tree    : 0000000000000000000000000000000000000000\n  commit clock: 0\n  last pack   : -------------------\nEND OF CRASH REPORT"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "TIPS AND TRICKS The following tips and tricks have been collected from various\nusers of fast-import, and are offered here as suggestions. Use One Mark Per Commit When doing a repository conversion, use a unique mark per commit\n( mark :<n> ) and supply the --export-marks option on the command\nline.  fast-import will dump a file which lists every mark and the Git\nobject SHA-1 that corresponds to it.  If the frontend can tie\nthe marks back to the source repository, it is easy to verify the\naccuracy and completeness of the import by comparing each Git\ncommit to the corresponding source revision. Coming from a system such as Perforce or Subversion, this should be\nquite simple, as the fast-import mark can also be the Perforce changeset\nnumber or the Subversion revision number. Freely Skip Around Branches Don’t bother trying to optimize the frontend to stick to one branch\nat a time during an import.  Although doing so might be slightly\nfaster for fast-import, it tends to increase the complexity of the frontend\ncode considerably. The branch LRU builtin to fast-import tends to behave very well, and the\ncost of activating an inactive branch is so low that bouncing around\nbetween branches has virtually no impact on import performance. Handling Renames When importing a renamed file or directory, simply delete the old\nname(s) and modify the new name(s) during the corresponding commit.\nGit performs rename detection after-the-fact, rather than explicitly\nduring a commit. Use Tag Fixup Branches Some other SCM systems let the user create a tag from multiple\nfiles which are not from the same commit/changeset.  Or to create\ntags which are a subset of the files available in the repository. Importing these tags as-is in Git is impossible without making at\nleast one commit which “fixes up” the files to match the content\nof the tag.  Use fast-import’s reset command to reset a dummy branch\noutside of your normal branch space to the base commit for the tag,\nthen commit one or more file fixup commits, and finally tag the\ndummy branch. For example since all normal branches are stored under refs/heads/ name the tag fixup branch TAG_FIXUP .  This way it is impossible for\nthe fixup branch used by the importer to have namespace conflicts\nwith real branches imported from the source (the name TAG_FIXUP is not refs/heads/TAG_FIXUP ). When committing fixups, consider using merge to connect the\ncommit(s) which are supplying file revisions to the fixup branch.\nDoing so will allow tools such as git blame to track\nthrough the real commit history and properly annotate the source\nfiles. After fast-import terminates the frontend will need to do rm .git/TAG_FIXUP to remove the dummy branch. Import Now, Repack Later As soon as fast-import completes the Git repository is completely valid\nand ready for use.  Typically this takes only a very short time,\neven for considerably large projects (100,000+ commits). However repacking the repository is necessary to improve data\nlocality and access performance.  It can also take hours on extremely\nlarge projects (especially if -f and a large --window parameter is\nused).  Since repacking is safe to run alongside readers and writers,\nrun the repack in the background and let it finish when it finishes.\nThere is no reason to wait to explore your new Git project! If you choose to wait for the repack, don’t try to run benchmarks\nor performance tests until repacking is completed.  fast-import outputs\nsuboptimal packfiles that are simply never seen in real use\nsituations. Repacking Historical Data If you are repacking very old imported data (e.g. older than the\nlast year), consider expending some extra CPU time and supplying\n--window=50 (or higher) when you run git repack .\nThis will take longer, but will also produce a smaller packfile.\nYou only need to expend the effort once, and everyone using your\nproject will benefit from the smaller repository. Include Some Progress Messages Every once in a while have your frontend emit a progress message\nto fast-import.  The contents of the messages are entirely free-form,\nso one suggestion would be to output the current month and year\neach time the current commit date moves into the next month.\nYour users will feel better knowing how much of the data stream\nhas been processed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "PACKFILE OPTIMIZATION When packing a blob fast-import always attempts to deltify against the last\nblob written.  Unless specifically arranged for by the frontend,\nthis will probably not be a prior version of the same file, so the\ngenerated delta will not be the smallest possible.  The resulting\npackfile will be compressed, but will not be optimal. Frontends which have efficient access to all revisions of a\nsingle file (for example reading an RCS/CVS ,v file) can choose\nto supply all revisions of that file as a sequence of consecutive blob commands.  This allows fast-import to deltify the different file\nrevisions against each other, saving space in the final packfile.\nMarks can be used to later identify individual file revisions during\na sequence of commit commands. The packfile(s) created by fast-import do not encourage good disk access\npatterns.  This is caused by fast-import writing the data in the order\nit is received on standard input, while Git typically organizes\ndata within packfiles to make the most recent (current tip) data\nappear before historical data.  Git also clusters commits together,\nspeeding up revision traversal through better cache locality. For this reason it is strongly recommended that users repack the\nrepository with git repack -a -d after fast-import completes, allowing\nGit to reorganize the packfiles for faster data access.  If blob\ndeltas are suboptimal (see above) then also adding the -f option\nto force recomputation of all deltas can significantly reduce the\nfinal packfile size (30-50% smaller can be quite typical). Instead of running git repack you can also run git gc\n--aggressive , which will also optimize other things after an import\n(e.g. pack loose refs). As noted in the \"AGGRESSIVE\" section in git-gc the --aggressive option will find new deltas with\nthe -f option to git-repack . For the reasons elaborated\non above using --aggressive after a fast-import is one of the few\ncases where it’s known to be worthwhile."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "MEMORY UTILIZATION There are a number of factors which affect how much memory fast-import\nrequires to perform an import.  Like critical sections of core\nGit, fast-import uses its own memory allocators to amortize any overheads\nassociated with malloc.  In practice fast-import tends to amortize any\nmalloc overheads to 0, due to its use of large block allocations. per object fast-import maintains an in-memory structure for every object written in\nthis execution.  On a 32 bit system the structure is 32 bytes,\non a 64 bit system the structure is 40 bytes (due to the larger\npointer sizes).  Objects in the table are not deallocated until\nfast-import terminates.  Importing 2 million objects on a 32 bit system\nwill require approximately 64 MiB of memory. The object table is actually a hashtable keyed on the object name\n(the unique SHA-1).  This storage configuration allows fast-import to reuse\nan existing or already written object and avoid writing duplicates\nto the output packfile.  Duplicate blobs are surprisingly common\nin an import, typically due to branch merges in the source. per mark Marks are stored in a sparse array, using 1 pointer (4 bytes or 8\nbytes, depending on pointer size) per mark.  Although the array\nis sparse, frontends are still strongly encouraged to use marks\nbetween 1 and n, where n is the total number of marks required for\nthis import. per branch Branches are classified as active and inactive.  The memory usage\nof the two classes is significantly different. Inactive branches are stored in a structure which uses 96 or 120\nbytes (32 bit or 64 bit systems, respectively), plus the length of\nthe branch name (typically under 200 bytes), per branch.  fast-import will\neasily handle as many as 10,000 inactive branches in under 2 MiB\nof memory. Active branches have the same overhead as inactive branches, but\nalso contain copies of every tree that has been recently modified on\nthat branch.  If subtree include has not been modified since the\nbranch became active, its contents will not be loaded into memory,\nbut if subtree src has been modified by a commit since the branch\nbecame active, then its contents will be loaded in memory. As active branches store metadata about the files contained on that\nbranch, their in-memory storage size can grow to a considerable size\n(see below). fast-import automatically moves active branches to inactive status based on\na simple least-recently-used algorithm.  The LRU chain is updated on\neach commit command.  The maximum number of active branches can be\nincreased or decreased on the command line with --active-branches=. per active tree Trees (aka directories) use just 12 bytes of memory on top of the\nmemory required for their entries (see “per active file” below).\nThe cost of a tree is virtually 0, as its overhead amortizes out\nover the individual file entries. per active file entry Files (and pointers to subtrees) within active trees require 52 or 64\nbytes (32/64 bit platforms) per entry.  To conserve space, file and\ntree names are pooled in a common string table, allowing the filename\n“Makefile” to use just 16 bytes (after including the string header\noverhead) no matter how many times it occurs within the project. The active branch LRU, when coupled with the filename string pool\nand lazy loading of subtrees, allows fast-import to efficiently import\nprojects with 2,000+ branches and 45,114+ files in a very limited\nmemory footprint (less than 2.7 MiB per active branch)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers"}, {"role": "assistant", "content": "SIGNALS Sending SIGUSR1 to the git fast-import process ends the current\npackfile early, simulating a checkpoint command.  The impatient\noperator can use this facility to peek at the objects and refs from an\nimport in progress, at the cost of some added running time and worse\ncompression."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  fastimport.unpackLimit"}, {"role": "assistant", "content": "If the number of objects imported by git-fast-import is below this limit, then the objects will be unpacked into\nloose object files.  However, if the number of imported objects\nequals or exceeds this limit, then the pack will be stored as a\npack.  Storing the pack from a fast-import can make the import\noperation complete faster, especially on slow filesystems.  If\nnot set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree"}, {"role": "assistant", "content": "NAME git-clean - Remove untracked files from the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree"}, {"role": "assistant", "content": "SYNOPSIS git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] [<pathspec>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree"}, {"role": "assistant", "content": "DESCRIPTION Cleans the working tree by recursively removing files that are not\nunder version control, starting from the current directory. Normally, only files unknown to Git are removed, but if the -x option is specified, ignored files are also removed. This can, for\nexample, be useful to remove all build products. If any optional <pathspec>... arguments are given, only those paths\nthat match the pathspec are affected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -d"}, {"role": "assistant", "content": "Normally, when no <pathspec> is specified, git clean will not\nrecurse into untracked directories to avoid removing too much.\nSpecify -d to have it recurse into such directories as well.\nIf a <pathspec> is specified, -d is irrelevant; all untracked\nfiles matching the specified paths (with exceptions for nested\ngit directories mentioned under --force ) will be removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -f  --force"}, {"role": "assistant", "content": "If the Git configuration variable clean.requireForce is not set\nto false, git clean will refuse to delete files or directories\nunless given -f.  Git will refuse to modify untracked\nnested git repositories (directories with a .git subdirectory)\nunless a second -f is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -i  --interactive"}, {"role": "assistant", "content": "Show what would be done and clean files interactively. See\n“Interactive mode” for details.\nConfiguration variable clean.requireForce is ignored, as\nthis mode gives its own safety protection by going interactive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -n  --dry-run"}, {"role": "assistant", "content": "Don’t actually remove anything, just show what would be done.\nConfiguration variable clean.requireForce is ignored, as\nnothing will be deleted anyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -q  --quiet"}, {"role": "assistant", "content": "Be quiet, only report errors, but not the files that are\nsuccessfully removed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -e <pattern>  --exclude=<pattern>"}, {"role": "assistant", "content": "Use the given exclude pattern in addition to the standard ignore rules\n(see gitignore )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -x"}, {"role": "assistant", "content": "Don’t use the standard ignore rules (see gitignore ), but\nstill use the ignore rules given with -e options from the command\nline.  This allows removing all untracked\nfiles, including build products.  This can be used (possibly in\nconjunction with git restore or git reset ) to create a pristine\nworking directory to test a clean build."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  -X"}, {"role": "assistant", "content": "Remove only files ignored by Git.  This may be useful to rebuild\neverything from scratch, but keep manually created files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  clean"}, {"role": "assistant", "content": "Start cleaning files and directories, and then quit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  filter by pattern"}, {"role": "assistant", "content": "This shows the files and directories to be deleted and issues an\n\"Input ignore patterns>>\" prompt. You can input space-separated\npatterns to exclude files and directories from deletion.\nE.g. \"*.c *.h\" will exclude files ending with \".c\" and \".h\" from\ndeletion. When you are satisfied with the filtered result, press\nENTER (empty) back to the main menu."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  select by numbers"}, {"role": "assistant", "content": "This shows the files and directories to be deleted and issues an\n\"Select items to delete>>\" prompt. When the prompt ends with double >> like this, you can make more than one selection, concatenated\nwith whitespace or comma.  Also you can say ranges.  E.g. \"2-5 7,9\"\nto choose 2,3,4,5,7,9 from the list.  If the second number in a\nrange is omitted, all remaining items are selected.  E.g. \"7-\" to\nchoose 7,8,9 from the list.  You can say * to choose everything.\nAlso when you are satisfied with the filtered result, press ENTER\n(empty) back to the main menu."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  ask each"}, {"role": "assistant", "content": "This will start to clean, and you must confirm one by one in order\nto delete items. Please note that this action is not as efficient\nas the above two actions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  quit"}, {"role": "assistant", "content": "This lets you quit without doing any cleaning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  help"}, {"role": "assistant", "content": "Show brief usage of interactive git-clean."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clean - Remove untracked files from the working tree  clean.requireForce"}, {"role": "assistant", "content": "A boolean to make git-clean refuse to delete files unless -f\nis given. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "NAME git-gc - Cleanup unnecessary files and optimize the local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "SYNOPSIS git gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force] [--keep-largest-pack]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "DESCRIPTION Runs a number of housekeeping tasks within the current repository,\nsuch as compressing file revisions (to reduce disk space and increase\nperformance), removing unreachable objects which may have been\ncreated from prior invocations of git add , packing refs, pruning\nreflog, rerere metadata or stale working trees. May also update ancillary\nindexes such as the commit-graph. When common porcelain operations that create objects are run, they\nwill check whether the repository has grown substantially since the\nlast maintenance, and if so run git gc automatically. See gc.auto below for how to disable this behavior. Running git gc manually should only be needed when adding objects to\na repository without regularly running such porcelain commands, to do\na one-off repository optimization, or e.g. to clean up a suboptimal\nmass-import. See the \"PACKFILE OPTIMIZATION\" section in git-fast-import for more details on the import case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --aggressive"}, {"role": "assistant", "content": "Usually git gc runs very quickly while providing good disk\nspace utilization and performance.  This option will cause git gc to more aggressively optimize the repository at the expense\nof taking much more time.  The effects of this optimization are\nmostly persistent. See the \"AGGRESSIVE\" section below for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --auto"}, {"role": "assistant", "content": "With this option, git gc checks whether any housekeeping is\nrequired; if not, it exits without performing any work. See the gc.auto option in the \"CONFIGURATION\" section below for how\nthis heuristic works. Once housekeeping is triggered by exceeding the limits of\nconfiguration options such as gc.auto and gc.autoPackLimit , all\nother housekeeping tasks (e.g. rerere, working trees, reflog…​) will\nbe performed as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --[no-]cruft"}, {"role": "assistant", "content": "When expiring unreachable objects, pack them separately into a\ncruft pack instead of storing them as loose objects. --cruft is on by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --max-cruft-size=<n>"}, {"role": "assistant", "content": "When packing unreachable objects into a cruft pack, limit the\nsize of new cruft packs to be at most <n> bytes. Overrides any\nvalue specified via the gc.maxCruftSize configuration. See\nthe --max-cruft-size option of git-repack for\nmore."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --prune=<date>"}, {"role": "assistant", "content": "Prune loose objects older than date (default is 2 weeks ago,\noverridable by the config variable gc.pruneExpire ).\n--prune=now prunes loose objects regardless of their age and\nincreases the risk of corruption if another process is writing to\nthe repository concurrently; see \"NOTES\" below. --prune is on by\ndefault."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --no-prune"}, {"role": "assistant", "content": "Do not prune any loose objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --quiet"}, {"role": "assistant", "content": "Suppress all progress reports."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --force"}, {"role": "assistant", "content": "Force git gc to run even if there may be another git gc instance running on this repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --keep-largest-pack"}, {"role": "assistant", "content": "All packs except the largest non-cruft pack, any packs marked\nwith a .keep file, and any cruft pack(s) are consolidated into\na single pack. When this option is used, gc.bigPackThreshold is ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "AGGRESSIVE When the --aggressive option is supplied, git-repack will\nbe invoked with the -f flag, which in turn will pass --no-reuse-delta to git-pack-objects . This will throw\naway any existing deltas and re-compute them, at the expense of\nspending much more time on the repacking. The effects of this are mostly persistent, e.g. when packs and loose\nobjects are coalesced into one another pack the existing deltas in\nthat pack might get re-used, but there are also various cases where we\nmight pick a sub-optimal delta from a newer pack instead. Furthermore, supplying --aggressive will tweak the --depth and --window options passed to git-repack . See the gc.aggressiveDepth and gc.aggressiveWindow settings below. By\nusing a larger window size we’re more likely to find more optimal\ndeltas. It’s probably not worth it to use this option on a given repository\nwithout running tailored performance benchmarks on it. It takes a lot\nmore time, and the resulting space/delta optimization may or may not\nbe worth it. Not using this at all is the right trade-off for most\nusers and their repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.aggressiveDepth"}, {"role": "assistant", "content": "The depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn’t in use. See the documentation for the --depth option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.aggressiveWindow"}, {"role": "assistant", "content": "The window size parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 250, which is a much more aggressive window size than\nthe default --window of 10. See the documentation for the --window option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.auto"}, {"role": "assistant", "content": "When there are approximately more than this many loose\nobjects in the repository, git gc --auto will pack them.\nSome Porcelain commands use this command to perform a\nlight-weight garbage collection from time to time.  The\ndefault value is 6700. Setting this to 0 disables not only automatic packing based on the\nnumber of loose objects, but also any other heuristic git gc --auto will\notherwise use to determine if there’s work to do, such as gc.autoPackLimit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.autoPackLimit"}, {"role": "assistant", "content": "When there are more than this many packs that are not\nmarked with *.keep file in the repository, git gc\n--auto consolidates them into one larger pack.  The\ndefault value is 50.  Setting this to 0 disables it.\nSetting gc.auto to 0 will also disable this. See the gc.bigPackThreshold configuration variable below. When in\nuse, it’ll affect how the auto pack limit works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.autoDetach"}, {"role": "assistant", "content": "Make git gc --auto return immediately and run in the background\nif the system supports it. Default is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.bigPackThreshold"}, {"role": "assistant", "content": "If non-zero, all non-cruft packs larger than this limit are kept\nwhen git gc is run. This is very similar to --keep-largest-pack except that all non-cruft packs that meet\nthe threshold are kept, not just the largest pack. Defaults to\nzero. Common unit suffixes of k , m , or g are supported. Note that if the number of kept packs is more than gc.autoPackLimit,\nthis configuration variable is ignored, all packs except the base pack\nwill be repacked. After this the number of packs should go below\ngc.autoPackLimit and gc.bigPackThreshold should be respected again. If the amount of memory estimated for git repack to run smoothly is\nnot available and gc.bigPackThreshold is not set, the largest pack\nwill also be excluded (this is the equivalent of running git gc with --keep-largest-pack )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.writeCommitGraph"}, {"role": "assistant", "content": "If true, then gc will rewrite the commit-graph file when git-gc is run. When using git gc --auto the commit-graph will be updated if housekeeping is\nrequired. Default is true. See git-commit-graph for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.logExpiry"}, {"role": "assistant", "content": "If the file gc.log exists, then git gc --auto will print\nits content and exit with status zero instead of running\nunless that file is more than gc.logExpiry old.  Default is\n\"1.day\".  See gc.pruneExpire for more ways to specify its\nvalue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.packRefs"}, {"role": "assistant", "content": "Running git pack-refs in a repository renders it\nunclonable by Git versions prior to 1.5.1.2 over dumb\ntransports such as HTTP.  This variable determines whether git gc runs git pack-refs . This can be set to notbare to enable it within all non-bare repos or it can be set to a\nboolean value.  The default is true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.cruftPacks"}, {"role": "assistant", "content": "Store unreachable objects in a cruft pack (see git-repack ) instead of as loose objects. The default\nis true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.maxCruftSize"}, {"role": "assistant", "content": "Limit the size of new cruft packs when repacking. When\nspecified in addition to --max-cruft-size , the command line\noption takes priority. See the --max-cruft-size option of git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.pruneExpire"}, {"role": "assistant", "content": "When git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using\ncruft packs via gc.cruftPacks or --cruft ).  Override the\ngrace period with this config variable.  The value \"now\" may be\nused to disable this grace period and always prune unreachable\nobjects immediately, or \"never\" may be used to suppress pruning.\nThis feature helps prevent corruption when git gc runs\nconcurrently with another process writing to the repository; see\nthe \"NOTES\" section of git-gc ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.worktreePruneExpire"}, {"role": "assistant", "content": "When git gc is run, it calls git worktree prune --expire 3.months.ago .\nThis config variable can be used to set a different grace\nperiod. The value \"now\" may be used to disable the grace\nperiod and prune $GIT_DIR/worktrees immediately, or \"never\"\nmay be used to suppress pruning."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.reflogExpire  gc.<pattern>.reflogExpire"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time; defaults to 90 days. The value \"now\" expires all\nentries immediately, and \"never\" suppresses expiration\naltogether. With \"<pattern>\" (e.g.\n\"refs/stash\") in the middle the setting applies only to\nthe refs that match the <pattern>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.reflogExpireUnreachable  gc.<pattern>.reflogExpireUnreachable"}, {"role": "assistant", "content": "git reflog expire removes reflog entries older than\nthis time and are not reachable from the current tip;\ndefaults to 30 days. The value \"now\" expires all entries\nimmediately, and \"never\" suppresses expiration altogether.\nWith \"<pattern>\" (e.g. \"refs/stash\")\nin the middle, the setting applies only to the refs that\nmatch the <pattern>. These types of entries are generally created as a result of using git\ncommit --amend or git rebase and are the commits prior to the amend\nor rebase occurring.  Since these changes are not part of the current\nproject most users will want to expire them sooner, which is why the\ndefault is more aggressive than gc.reflogExpire ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.recentObjectsHook"}, {"role": "assistant", "content": "When considering whether or not to remove an object (either when\ngenerating a cruft pack or storing unreachable objects as\nloose), use the shell to execute the specified command(s).\nInterpret their output as object IDs which Git will consider as\n\"recent\", regardless of their age. By treating their mtimes as\n\"now\", any objects (and their descendants) mentioned in the\noutput will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing\nelse. Objects which cannot be found in the repository are ignored.\nMultiple hooks are supported, but all must exit successfully, else the\noperation (either generating a cruft pack or unpacking unreachable\nobjects) will be halted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.repackFilter"}, {"role": "assistant", "content": "When repacking, use the specified filter to move certain\nobjects into a separate packfile.  See the --filter=<filter-spec> option of git-repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.repackFilterTo"}, {"role": "assistant", "content": "When repacking and using a filter, see gc.repackFilter , the\nspecified location will be used to create the packfile\ncontaining the filtered out objects. WARNING: The\nspecified location should be accessible, using for example the\nGit alternates mechanism, otherwise the repo could be\nconsidered corrupt by Git as it migh not be able to access the\nobjects in that packfile. See the --filter-to=<dir> option\nof git-repack and the objects/info/alternates section of gitrepository-layout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.rerereResolved"}, {"role": "assistant", "content": "Records of conflicted merge you resolved earlier are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 60 days.  See git-rerere ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.rerereUnresolved"}, {"role": "assistant", "content": "Records of conflicted merge you have not resolved are\nkept for this many days when git rerere gc is run.\nYou can also use more human-readable \"1.month.ago\", etc.\nThe default is 15 days.  See git-rerere ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "NOTES git gc tries very hard not to delete objects that are referenced\nanywhere in your repository. In particular, it will keep not only\nobjects referenced by your current set of branches and tags, but also\nobjects referenced by the index, remote-tracking branches, reflogs\n(which may reference commits in branches that were later amended or\nrewound), and anything else in the refs/* namespace. Note that a note\n(of the kind created by git notes ) attached to an object does not\ncontribute in keeping the object alive. If you are expecting some\nobjects to be deleted and they aren’t, check all of those locations\nand decide whether it makes sense in your case to remove those\nreferences. On the other hand, when git gc runs concurrently with another process,\nthere is a risk of it deleting an object that the other process is using\nbut hasn’t created a reference to. This may just cause the other process\nto fail or may corrupt the repository if the other process later adds a\nreference to the deleted object. Git has two features that significantly\nmitigate this problem: Any object with modification time newer than the --prune date is kept,\nalong with everything reachable from it. Most operations that add an object to the database update the\nmodification time of the object if it is already present so that #1\napplies. However, these features fall short of a complete solution, so users who\nrun commands concurrently have to live with some risk of corruption (which\nseems to be low in practice)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository"}, {"role": "assistant", "content": "HOOKS The git gc --auto command will run the pre-auto-gc hook.  See githooks for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database"}, {"role": "assistant", "content": "NAME git-fsck - Verifies the connectivity and validity of the objects in the database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database"}, {"role": "assistant", "content": "SYNOPSIS git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n\t [--[no-]full] [--strict] [--verbose] [--lost-found]\n\t [--[no-]dangling] [--[no-]progress] [--connectivity-only]\n\t [--[no-]name-objects] [<object>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database"}, {"role": "assistant", "content": "DESCRIPTION Verifies the connectivity and validity of the objects in the database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  <object>"}, {"role": "assistant", "content": "An object to treat as the head of an unreachability trace. If no objects are given, git fsck defaults to using the\nindex file, all SHA-1 references in the refs namespace, and all reflogs\n(unless --no-reflogs is given) as heads."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --unreachable"}, {"role": "assistant", "content": "Print out objects that exist but that aren’t reachable from any\nof the reference nodes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --[no-]dangling"}, {"role": "assistant", "content": "Print objects that exist but that are never directly used (default). --no-dangling can be used to omit this information from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --root"}, {"role": "assistant", "content": "Report root nodes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --tags"}, {"role": "assistant", "content": "Report tags."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --cache"}, {"role": "assistant", "content": "Consider any object recorded in the index also as a head node for\nan unreachability trace."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --no-reflogs"}, {"role": "assistant", "content": "Do not consider commits that are referenced only by an\nentry in a reflog to be reachable.  This option is meant\nonly to search for commits that used to be in a ref, but\nnow aren’t, but are still in that corresponding reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --full"}, {"role": "assistant", "content": "Check not just objects in GIT_OBJECT_DIRECTORY\n($GIT_DIR/objects), but also the ones found in alternate\nobject pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES\nor $GIT_DIR/objects/info/alternates,\nand in packed Git archives found in $GIT_DIR/objects/pack\nand corresponding pack subdirectories in alternate\nobject pools.  This is now default; you can turn it off\nwith --no-full."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --connectivity-only"}, {"role": "assistant", "content": "Check only the connectivity of reachable objects, making sure\nthat any objects referenced by a reachable tag, commit, or tree\nare present. This speeds up the operation by avoiding reading\nblobs entirely (though it does still check that referenced blobs\nexist). This will detect corruption in commits and trees, but\nnot do any semantic checks (e.g., for format errors). Corruption\nin blob objects will not be detected at all. Unreachable tags, commits, and trees will also be accessed to find the\ntips of dangling segments of history. Use --no-dangling if you don’t\ncare about this output and want to speed it up further."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --strict"}, {"role": "assistant", "content": "Enable more strict checking, namely to catch a file mode\nrecorded with g+w bit set, which was created by older\nversions of Git.  Existing repositories, including the\nLinux kernel, Git itself, and sparse repository have old\nobjects that trigger this check, but it is recommended\nto check new projects with this flag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --verbose"}, {"role": "assistant", "content": "Be chatty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --lost-found"}, {"role": "assistant", "content": "Write dangling objects into .git/lost-found/commit/ or\n.git/lost-found/other/, depending on type.  If the object is\na blob, the contents are written into the file, rather than\nits object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --name-objects"}, {"role": "assistant", "content": "When displaying names of reachable objects, in addition to the\nSHA-1 also display a name that describes how they are reachable,\ncompatible with git-rev-parse , e.g. HEAD@{1234567890}~25^2:src/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --[no-]progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream by\ndefault when it is attached to a terminal, unless\n--no-progress or --verbose is specified. --progress forces\nprogress status even if the standard error stream is not\ndirected to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  fsck.<msg-id>"}, {"role": "assistant", "content": "During fsck git may find issues with legacy data which\nwouldn’t be generated by current versions of git, and which\nwouldn’t be sent over the wire if transfer.fsckObjects was\nset. This feature is intended to support working with legacy\nrepositories containing such data. Setting fsck.<msg-id> will be picked up by git-fsck , but\nto accept pushes of such data set receive.fsck.<msg-id> instead, or\nto clone or fetch it set fetch.fsck.<msg-id> . The rest of the documentation discusses fsck.* for brevity, but the\nsame applies for the corresponding receive.fsck.* and fetch.fsck.* . variables. Unlike variables like color.ui and core.editor , the receive.fsck.<msg-id> and fetch.fsck.<msg-id> variables will not\nfall back on the fsck.<msg-id> configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. When fsck.<msg-id> is set, errors can be switched to warnings and\nvice versa by configuring the fsck.<msg-id> setting where the <msg-id> is the fsck message ID and the value is one of error , warn or ignore . For convenience, fsck prefixes the error/warning\nwith the message ID, e.g. \"missingEmail: invalid author/committer\nline - missing email\" means that setting fsck.missingEmail = ignore will hide that issue. In general, it is better to enumerate existing objects with problems\nwith fsck.skipList , instead of listing the kind of breakages these\nproblematic objects share to be ignored, as doing the latter will\nallow new instances of the same breakages go unnoticed. Setting an unknown fsck.<msg-id> value will cause fsck to die, but\ndoing the same for receive.fsck.<msg-id> and fetch.fsck.<msg-id> will only cause git to warn. See the Fsck Messages section of git-fsck for supported\nvalues of <msg-id> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  fsck.skipList"}, {"role": "assistant", "content": "The path to a list of object names (i.e. one unabbreviated SHA-1 per\nline) that are known to be broken in a non-fatal way and should\nbe ignored. On versions of Git 2.20 and later, comments ( # ), empty\nlines, and any leading and trailing whitespace are ignored. Everything\nbut a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted\ndespite early commits containing errors that can be safely ignored,\nsuch as invalid committer email addresses.  Note: corrupt objects\ncannot be skipped with this setting. Like fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants. Unlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not\nfall back on the fsck.skipList configuration if they aren’t set. To\nuniformly configure the same fsck settings in different circumstances,\nall three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names\nlist should be sorted. This was never a requirement; the object names\ncould appear in any order, but when reading the list we tracked whether\nthe list was sorted for the purposes of an internal binary search\nimplementation, which could save itself some work with an already sorted\nlist. Unless you had a humongous list there was no reason to go out of\nyour way to pre-sort the list. After Git version 2.20 a hash implementation\nis used instead, so there’s now no reason to pre-sort the list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database"}, {"role": "assistant", "content": "DISCUSSION git-fsck tests SHA-1 and general object sanity, and it does full tracking\nof the resulting reachability and everything else. It prints out any\ncorruption it finds (missing or bad objects), and if you use the --unreachable flag it will also print out objects that exist but that\naren’t reachable from any of the specified head nodes (or the default\nset, as mentioned above). Any corrupt objects you will have to find in backups or other archives\n(i.e., you can just remove them and do an rsync with some other site in\nthe hopes that somebody else has the object you have corrupted). If core.commitGraph is true, the commit-graph file will also be inspected\nusing git commit-graph verify . See git-commit-graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  unreachable <type> <object>"}, {"role": "assistant", "content": "The <type> object <object>, isn’t actually referred to directly\nor indirectly in any of the trees or commits seen. This can\nmean that there’s another root node that you’re not specifying\nor that the tree is corrupt. If you haven’t missed a root node\nthen you might as well delete unreachable nodes since they\ncan’t be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missing <type> <object>"}, {"role": "assistant", "content": "The <type> object <object>, is referred to but isn’t present in\nthe database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  dangling <type> <object>"}, {"role": "assistant", "content": "The <type> object <object>, is present in the database but never directly used. A dangling commit could be a root node."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  hash mismatch <object>"}, {"role": "assistant", "content": "The database has an object whose hash doesn’t match the\nobject database value.\nThis indicates a serious data integrity problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badDate"}, {"role": "assistant", "content": "(ERROR) Invalid date format in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badDateOverflow"}, {"role": "assistant", "content": "(ERROR) Invalid date value in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badEmail"}, {"role": "assistant", "content": "(ERROR) Invalid email format in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badFilemode"}, {"role": "assistant", "content": "(INFO) A tree contains a bad filemode entry."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badName"}, {"role": "assistant", "content": "(ERROR) An author/committer name is empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badObjectSha1"}, {"role": "assistant", "content": "(ERROR) An object has a bad sha1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badParentSha1"}, {"role": "assistant", "content": "(ERROR) A commit object has a bad parent sha1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTagName"}, {"role": "assistant", "content": "(INFO) A tag has an invalid format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTimezone"}, {"role": "assistant", "content": "(ERROR) Found an invalid time zone in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTree"}, {"role": "assistant", "content": "(ERROR) A tree cannot be parsed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTreeSha1"}, {"role": "assistant", "content": "(ERROR) A tree has an invalid format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badType"}, {"role": "assistant", "content": "(ERROR) Found an invalid object type."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  duplicateEntries"}, {"role": "assistant", "content": "(ERROR) A tree contains duplicate file entries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  emptyName"}, {"role": "assistant", "content": "(WARN) A path contains an empty name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  extraHeaderEntry"}, {"role": "assistant", "content": "(IGNORE) Extra headers found after tagger ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  fullPathname"}, {"role": "assistant", "content": "(WARN) A path contains the full path starting with \"/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesBlob"}, {"role": "assistant", "content": "(ERROR) A non-blob found at .gitattributes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesLarge"}, {"role": "assistant", "content": "(ERROR) The .gitattributes blob is too large."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesLineLength"}, {"role": "assistant", "content": "(ERROR) The .gitattributes blob contains too long lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesMissing"}, {"role": "assistant", "content": "(ERROR) Unable to read .gitattributes blob."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesSymlink"}, {"role": "assistant", "content": "(INFO) .gitattributes is a symlink."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitignoreSymlink"}, {"role": "assistant", "content": "(INFO) .gitignore is a symlink."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesBlob"}, {"role": "assistant", "content": "(ERROR) A non-blob found at .gitmodules ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesLarge"}, {"role": "assistant", "content": "(ERROR) The .gitmodules file is too large to parse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesMissing"}, {"role": "assistant", "content": "(ERROR) Unable to read .gitmodules blob."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesName"}, {"role": "assistant", "content": "(ERROR) A submodule name is invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesParse"}, {"role": "assistant", "content": "(INFO) Could not parse .gitmodules blob."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesPath"}, {"role": "assistant", "content": "(ERROR) .gitmodules path is invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesSymlink"}, {"role": "assistant", "content": "(ERROR) .gitmodules is a symlink."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesUpdate"}, {"role": "assistant", "content": "(ERROR) Found an invalid submodule update setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitmodulesUrl"}, {"role": "assistant", "content": "(ERROR) Found an invalid submodule url."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  hasDot"}, {"role": "assistant", "content": "(WARN) A tree contains an entry named . ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  hasDotdot"}, {"role": "assistant", "content": "(WARN) A tree contains an entry named .. ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  hasDotgit"}, {"role": "assistant", "content": "(WARN) A tree contains an entry named .git ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  largePathname"}, {"role": "assistant", "content": "(WARN) A tree contains an entry with a very long path name. If\nthe value of fsck.largePathname contains a colon, that value\nis used as the maximum allowable length (e.g., \"warn:10\" would\ncomplain about any path component of 11 or more bytes). The\ndefault value is 4096."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  mailmapSymlink"}, {"role": "assistant", "content": "(INFO) .mailmap is a symlink."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingAuthor"}, {"role": "assistant", "content": "(ERROR) Author is missing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingCommitter"}, {"role": "assistant", "content": "(ERROR) Committer is missing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingEmail"}, {"role": "assistant", "content": "(ERROR) Email is missing in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingNameBeforeEmail"}, {"role": "assistant", "content": "(ERROR) Missing name before an email in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingObject"}, {"role": "assistant", "content": "(ERROR) Missing object line in tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingSpaceBeforeDate"}, {"role": "assistant", "content": "(ERROR) Missing space before date in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingSpaceBeforeEmail"}, {"role": "assistant", "content": "(ERROR) Missing space before the email in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTag"}, {"role": "assistant", "content": "(ERROR) Unexpected end after type line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTagEntry"}, {"role": "assistant", "content": "(ERROR) Missing tag line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTaggerEntry"}, {"role": "assistant", "content": "(INFO) Missing tagger line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTree"}, {"role": "assistant", "content": "(ERROR) Missing tree line in a commit object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingType"}, {"role": "assistant", "content": "(ERROR) Invalid type value on the type line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTypeEntry"}, {"role": "assistant", "content": "(ERROR) Missing type line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  multipleAuthors"}, {"role": "assistant", "content": "(ERROR) Multiple author lines found in a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  nulInCommit"}, {"role": "assistant", "content": "(WARN) Found a NUL byte in the commit object body."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  nulInHeader"}, {"role": "assistant", "content": "(FATAL) NUL byte exists in the object header."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  nullSha1"}, {"role": "assistant", "content": "(WARN) Tree contains entries pointing to a null sha1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  treeNotSorted"}, {"role": "assistant", "content": "(ERROR) A tree is not properly sorted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  unknownType"}, {"role": "assistant", "content": "(ERROR) Found an unknown object type."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  unterminatedHeader"}, {"role": "assistant", "content": "(FATAL) Missing end-of-line in the object header."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  zeroPaddedDate"}, {"role": "assistant", "content": "(ERROR) Found a zero padded date in an author/committer line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  zeroPaddedFilemode"}, {"role": "assistant", "content": "(WARN) Found a zero padded filemode in a tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "used to specify the object database root (usually $GIT_DIR/objects)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  GIT_INDEX_FILE"}, {"role": "assistant", "content": "used to specify the index file of the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "used to specify additional object database roots (usually unset)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information"}, {"role": "assistant", "content": "NAME git-reflog - Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information"}, {"role": "assistant", "content": "SYNOPSIS git reflog [show] [<log-options>] [<ref>] git reflog list git reflog expire [--expire=<time>] [--expire-unreachable=<time>]\n\t[--rewrite] [--updateref] [--stale-fix]\n\t[--dry-run | -n] [--verbose] [--all [--single-worktree] | <refs>…​] git reflog delete [--rewrite] [--updateref]\n\t[--dry-run | -n] [--verbose] <ref>@{<specifier>}…​ git reflog exists <ref>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information"}, {"role": "assistant", "content": "DESCRIPTION This command manages the information recorded in the reflogs. Reference logs, or \"reflogs\", record when the tips of branches and\nother references were updated in the local repository. Reflogs are\nuseful in various Git commands, to specify the old value of a\nreference. For example, HEAD@{2} means \"where HEAD used to be two\nmoves ago\", master@{one.week.ago} means \"where master used to point\nto one week ago in this local repository\", and so on. See gitrevisions for more details. The command takes various subcommands, and different options\ndepending on the subcommand: The \"show\" subcommand (which is also the default, in the absence of\nany subcommands) shows the log of the reference provided in the\ncommand-line (or HEAD , by default). The reflog covers all recent\nactions, and in addition the HEAD reflog records branch switching. git reflog show is an alias for git log -g --abbrev-commit\n--pretty=oneline ; see git-log for more information. The \"list\" subcommand lists all refs which have a corresponding reflog. The \"expire\" subcommand prunes older reflog entries. Entries older\nthan expire time, or entries older than expire-unreachable time\nand not reachable from the current tip, are removed from the reflog.\nThis is typically not used directly by end users — instead, see git-gc . The \"delete\" subcommand deletes single entries from the reflog. Its\nargument must be an exact entry (e.g. \" git reflog delete\nmaster@{2} \"). This subcommand is also typically not used directly by\nend users. The \"exists\" subcommand checks whether a ref has a reflog.  It exits\nwith zero status if the reflog exists, and non-zero status if it does\nnot."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --all"}, {"role": "assistant", "content": "Process the reflogs of all references."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --single-worktree"}, {"role": "assistant", "content": "By default when --all is specified, reflogs from all working\ntrees are processed. This option limits the processing to reflogs\nfrom the current working tree only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --expire=<time>"}, {"role": "assistant", "content": "Prune entries older than the specified time. If this option is\nnot specified, the expiration time is taken from the\nconfiguration setting gc.reflogExpire , which in turn\ndefaults to 90 days. --expire=all prunes entries regardless\nof their age; --expire=never turns off pruning of reachable\nentries (but see --expire-unreachable )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --expire-unreachable=<time>"}, {"role": "assistant", "content": "Prune entries older than <time> that are not reachable from\nthe current tip of the branch. If this option is not\nspecified, the expiration time is taken from the configuration\nsetting gc.reflogExpireUnreachable , which in turn defaults\nto 30 days. --expire-unreachable=all prunes unreachable\nentries regardless of their age; --expire-unreachable=never turns off early pruning of unreachable entries (but see --expire )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --updateref"}, {"role": "assistant", "content": "Update the reference to the value of the top reflog entry (i.e.\n<ref>@{0}) if the previous top entry was pruned.  (This\noption is ignored for symbolic references.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --rewrite"}, {"role": "assistant", "content": "If a reflog entry’s predecessor is pruned, adjust its \"old\"\nSHA-1 to be equal to the \"new\" SHA-1 field of the entry that\nnow precedes it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --stale-fix"}, {"role": "assistant", "content": "Prune any reflog entries that point to \"broken commits\". A\nbroken commit is a commit that is not reachable from any of\nthe reference tips and that refers, directly or indirectly, to\na missing commit, tree, or blob object. This computation involves traversing all the reachable objects, i.e. it\nhas the same cost as git prune .  It is primarily intended to fix\ncorruption caused by garbage collecting using older versions of Git,\nwhich didn’t protect objects referred to by reflogs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  -n  --dry-run"}, {"role": "assistant", "content": "Do not actually prune any entries; just show what would have\nbeen pruned."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reflog - Manage reflog information  --verbose"}, {"role": "assistant", "content": "Print extra information on screen."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "NAME git-filter-branch - Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "SYNOPSIS git filter-branch [--setup <command>] [--subdirectory-filter <directory>]\n\t[--env-filter <command>] [--tree-filter <command>]\n\t[--index-filter <command>] [--parent-filter <command>]\n\t[--msg-filter <command>] [--commit-filter <command>]\n\t[--tag-name-filter <command>] [--prune-empty]\n\t[--original <namespace>] [-d <directory>] [-f | --force]\n\t[--state-branch <branch>] [--] [<rev-list-options>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "WARNING git filter-branch has a plethora of pitfalls that can produce non-obvious\nmanglings of the intended history rewrite (and can leave you with little\ntime to investigate such problems since it has such abysmal performance).\nThese safety and performance issues cannot be backward compatibly fixed and\nas such, its use is not recommended.  Please use an alternative history\nfiltering tool such as git\nfilter-repo .  If you still need to use git filter-branch , please\ncarefully read SAFETY (and PERFORMANCE ) to learn about the land\nmines of filter-branch, and then vigilantly avoid as many of the hazards\nlisted there as reasonably possible."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "DESCRIPTION Lets you rewrite Git revision history by rewriting the branches mentioned\nin the <rev-list-options>, applying custom filters on each revision.\nThose filters can modify each tree (e.g. removing a file or running\na perl rewrite on all files) or information about each commit.\nOtherwise, all information (including original commit times or merge\ninformation) will be preserved. The command will only rewrite the positive refs mentioned in the\ncommand line (e.g. if you pass a..b , only b will be rewritten).\nIf you specify no filters, the commits will be recommitted without any\nchanges, which would normally have no effect.  Nevertheless, this may be\nuseful in the future for compensating for some Git bugs or such,\ntherefore such a usage is permitted. NOTE : This command honors .git/info/grafts file and refs in\nthe refs/replace/ namespace.\nIf you have any grafts or replacement refs defined, running this command\nwill make them permanent. WARNING ! The rewritten history will have different object names for all\nthe objects and will not converge with the original branch.  You will not\nbe able to easily push and distribute the rewritten branch on top of the\noriginal branch.  Please do not use this command if you do not know the\nfull implications, and avoid using it anyway, if a simple single commit\nwould suffice to fix your problem.  (See the \"RECOVERING FROM UPSTREAM\nREBASE\" section in git-rebase for further information about\nrewriting published history.) Always verify that the rewritten version is correct: The original refs,\nif different from the rewritten ones, will be stored in the namespace refs/original/ . Note that since this operation is very I/O expensive, it might\nbe a good idea to redirect the temporary directory off-disk with the -d option, e.g. on tmpfs.  Reportedly the speedup is very noticeable. Filters The filters are applied in the order as listed below.  The <command>\nargument is always evaluated in the shell context using the eval command\n(with the notable exception of the commit filter, for technical reasons).\nPrior to that, the $GIT_COMMIT environment variable will be set to contain\nthe id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,\nGIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,\nand GIT_COMMITTER_DATE are taken from the current commit and exported to\nthe environment, in order to affect the author and committer identities of\nthe replacement commit created by git-commit-tree after the\nfilters have run. If any evaluation of <command> returns a non-zero exit status, the whole\noperation will be aborted. A map function is available that takes an \"original sha1 id\" argument\nand outputs a \"rewritten sha1 id\" if the commit has been already\nrewritten, and \"original sha1 id\" otherwise; the map function can\nreturn several ids on separate lines if your commit filter emitted\nmultiple commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --setup <command>"}, {"role": "assistant", "content": "This is not a real filter executed for each commit but a one\ntime setup just before the loop. Therefore no commit-specific\nvariables are defined yet.  Functions or variables defined here\ncan be used or modified in the following filter steps except\nthe commit filter, for technical reasons."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --subdirectory-filter <directory>"}, {"role": "assistant", "content": "Only look at the history which touches the given subdirectory.\nThe result will contain that directory (and only that) as its\nproject root. Implies Remap to ancestor ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --env-filter <command>"}, {"role": "assistant", "content": "This filter may be used if you only need to modify the environment\nin which the commit will be performed.  Specifically, you might\nwant to rewrite the author/committer name/email/time environment\nvariables (see git-commit-tree for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --tree-filter <command>"}, {"role": "assistant", "content": "This is the filter for rewriting the tree and its contents.\nThe argument is evaluated in shell with the working\ndirectory set to the root of the checked out tree.  The new tree\nis then used as-is (new files are auto-added, disappeared files\nare auto-removed - neither .gitignore files nor any other ignore\nrules HAVE ANY EFFECT !)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --index-filter <command>"}, {"role": "assistant", "content": "This is the filter for rewriting the index.  It is similar to the\ntree filter but does not check out the tree, which makes it much\nfaster.  Frequently used with git rm --cached\n--ignore-unmatch ... , see EXAMPLES below.  For hairy\ncases, see git-update-index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --parent-filter <command>"}, {"role": "assistant", "content": "This is the filter for rewriting the commit’s parent list.\nIt will receive the parent string on stdin and shall output\nthe new parent string on stdout.  The parent string is in\nthe format described in git-commit-tree : empty for\nthe initial commit, \"-p parent\" for a normal commit and\n\"-p parent1 -p parent2 -p parent3 …​\" for a merge commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --msg-filter <command>"}, {"role": "assistant", "content": "This is the filter for rewriting the commit messages.\nThe argument is evaluated in the shell with the original\ncommit message on standard input; its standard output is\nused as the new commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --commit-filter <command>"}, {"role": "assistant", "content": "This is the filter for performing the commit.\nIf this filter is specified, it will be called instead of the git commit-tree command, with arguments of the form\n\"<TREE_ID> [(-p <PARENT_COMMIT_ID>)…​]\" and the log message on\nstdin.  The commit id is expected on stdout. As a special extension, the commit filter may emit multiple\ncommit ids; in that case, the rewritten children of the original commit will\nhave all of them as parents. You can use the map convenience function in this filter, and other\nconvenience functions, too.  For example, calling skip_commit \"$@\" will leave out the current commit (but not its changes! If you want\nthat, use git rebase instead). You can also use the git_commit_non_empty_tree \"$@\" instead of git commit-tree \"$@\" if you don’t wish to keep commits with a single parent\nand that makes no change to the tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --tag-name-filter <command>"}, {"role": "assistant", "content": "This is the filter for rewriting tag names. When passed,\nit will be called for every tag ref that points to a rewritten\nobject (or to a tag object which points to a rewritten object).\nThe original tag name is passed via standard input, and the new\ntag name is expected on standard output. The original tags are not deleted, but can be overwritten;\nuse \"--tag-name-filter cat\" to simply update the tags.  In this\ncase, be very careful and make sure you have the old tags\nbacked up in case the conversion has run afoul. Nearly proper rewriting of tag objects is supported. If the tag has\na message attached, a new tag object will be created with the same message,\nauthor, and timestamp. If the tag has a signature attached, the\nsignature will be stripped. It is by definition impossible to preserve\nsignatures. The reason this is \"nearly\" proper, is because ideally if\nthe tag did not change (points to the same object, has the same name, etc.)\nit should retain any signature. That is not the case, signatures will always\nbe removed, buyer beware. There is also no support for changing the\nauthor or timestamp (or the tag message for that matter). Tags which point\nto other tags will be rewritten to point to the underlying commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --prune-empty"}, {"role": "assistant", "content": "Some filters will generate empty commits that leave the tree untouched.\nThis option instructs git-filter-branch to remove such commits if they\nhave exactly one or zero non-pruned parents; merge commits will\ntherefore remain intact.  This option cannot be used together with --commit-filter , though the same effect can be achieved by using the\nprovided git_commit_non_empty_tree function in a commit filter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --original <namespace>"}, {"role": "assistant", "content": "Use this option to set the namespace where the original commits\nwill be stored. The default value is refs/original ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  -d <directory>"}, {"role": "assistant", "content": "Use this option to set the path to the temporary directory used for\nrewriting.  When applying a tree filter, the command needs to\ntemporarily check out the tree to some directory, which may consume\nconsiderable space in case of large projects.  By default it\ndoes this in the .git-rewrite/ directory but you can override\nthat choice by this parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  -f  --force"}, {"role": "assistant", "content": "git filter-branch refuses to start with an existing temporary\ndirectory or when there are already refs starting with refs/original/ , unless forced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  --state-branch <branch>"}, {"role": "assistant", "content": "This option will cause the mapping from old to new objects to\nbe loaded from named branch upon startup and saved as a new\ncommit to that branch upon exit, enabling incremental of large\ntrees. If <branch> does not exist it will be created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches  <rev-list options>…​"}, {"role": "assistant", "content": "Arguments for git rev-list .  All positive refs included by\nthese options are rewritten.  You may also specify options\nsuch as --all , but you must use -- to separate them from\nthe git filter-branch options. Implies Remap to ancestor ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "EXIT STATUS On success, the exit status is 0 .  If the filter can’t find any commits to\nrewrite, the exit status is 2 .  On any other error, the exit status may be\nany other non-zero value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "EXAMPLES Suppose you want to remove a file (containing confidential information\nor copyright violation) from all commits: git filter-branch --tree-filter 'rm filename' HEAD However, if the file is absent from the tree of some commit,\na simple rm filename will fail for that tree and commit.\nThus you may instead want to use rm -f filename as the script. Using --index-filter with git rm yields a significantly faster\nversion.  Like with using rm filename , git rm --cached filename will fail if the file is absent from the tree of a commit.  If you\nwant to \"completely forget\" a file, it does not matter when it entered\nhistory, so we also add --ignore-unmatch : git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD Now, you will get the rewritten history saved in HEAD. To rewrite the repository to look as if foodir/ had been its project\nroot, and discard all other history: git filter-branch --subdirectory-filter foodir -- --all Thus you can, e.g., turn a library subdirectory into a repository of\nits own.  Note the -- that separates filter-branch options from\nrevision options, and the --all to rewrite all branches and tags. To set a commit (which typically is at the tip of another\nhistory) to be the parent of the current initial commit, in\norder to paste the other history behind the current history: git filter-branch --parent-filter 'sed \"s/^\\$/-p <graft-id>/\"' HEAD (if the parent string is empty - which happens when we are dealing with\nthe initial commit - add graftcommit as a parent).  Note that this assumes\nhistory with a single root (that is, no merge without common ancestors\nhappened).  If this is not the case, use: git filter-branch --parent-filter \\\n\t'test $GIT_COMMIT = <commit-id> && echo \"-p <graft-id>\" || cat' HEAD or even simpler: git replace --graft $commit-id $graft-id\ngit filter-branch $graft-id..HEAD To remove commits authored by \"Darl McBribe\" from the history: git filter-branch --commit-filter '\n\tif [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n\tthen\n\t\tskip_commit \"$@\";\n\telse\n\t\tgit commit-tree \"$@\";\n\tfi' HEAD The function skip_commit is defined as follows: skip_commit()\n{\n\tshift;\n\twhile [ -n \"$1\" ];\n\tdo\n\t\tshift;\n\t\tmap \"$1\";\n\t\tshift;\n\tdone;\n} The shift magic first throws away the tree id and then the -p\nparameters.  Note that this handles merges properly! In case Darl\ncommitted a merge between P1 and P2, it will be propagated properly\nand all children of the merge will become merge commits with P1,P2\nas their parents instead of the merge commit. NOTE the changes introduced by the commits, and which are not reverted\nby subsequent commits, will still be in the rewritten branch. If you want\nto throw out changes together with the commits, you should use the\ninteractive mode of git rebase . You can rewrite the commit log messages using --msg-filter .  For\nexample, git svn-id strings in a repository created by git svn can\nbe removed this way: git filter-branch --msg-filter '\n\tsed -e \"/^git-svn-id:/d\"\n' If you need to add Acked-by lines to, say, the last 10 commits (none\nof which is a merge), use this command: git filter-branch --msg-filter '\n\tcat &&\n\techo \"Acked-by: Bugs Bunny <bunny@bugzilla.org>\"\n' HEAD~10..HEAD The --env-filter option can be used to modify committer and/or author\nidentity.  For example, if you found out that your commits have the wrong\nidentity due to a misconfigured user.email, you can make a correction,\nbefore publishing the project, like this: git filter-branch --env-filter '\n\tif test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_AUTHOR_EMAIL=john@example.com\n\tfi\n\tif test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_COMMITTER_EMAIL=john@example.com\n\tfi\n' -- --all To restrict rewriting to only part of the history, specify a revision\nrange in addition to the new branch name.  The new branch name will\npoint to the top-most revision that a git rev-list of this range\nwill print. Consider this history: D--E--F--G--H\n    /     /\nA--B-----C To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use: git filter-branch ... C..H To rewrite commits E,F,G,H, use one of these: git filter-branch ... C..H --not D\ngit filter-branch ... D..H --not C To move the whole tree into a subdirectory, or remove it from there: git filter-branch --index-filter \\\n\t'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n\t\tGIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n\t\t\tgit update-index --index-info &&\n\t mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "CHECKLIST FOR SHRINKING A REPOSITORY git-filter-branch can be used to get rid of a subset of files,\nusually with some combination of --index-filter and --subdirectory-filter .  People expect the resulting repository to\nbe smaller than the original, but you need a few more steps to\nactually make it smaller, because Git tries hard not to lose your\nobjects until you tell it to.  First make sure that: You really removed all variants of a filename, if a blob was moved\nover its lifetime. git log --name-only --follow --all -- filename can help you find renames. You really filtered all refs: use --tag-name-filter cat -- --all when calling git-filter-branch. Then there are two ways to get a smaller repository.  A safer way is\nto clone, that keeps your original intact. Clone it with git clone file:///path/to/repo .  The clone\nwill not have the removed objects.  See git-clone .  (Note\nthat cloning with a plain path just hardlinks everything!) If you really don’t want to clone it, for whatever reasons, check the\nfollowing points instead (in this order).  This is a very destructive\napproach, so make a backup or go back to cloning it.  You have been\nwarned. Remove the original refs backed up by git-filter-branch: say git\nfor-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git\nupdate-ref -d . Expire all reflogs with git reflog expire --expire=now --all . Garbage collect all unreferenced objects with git gc --prune=now (or if your git-gc is not new enough to support arguments to --prune , use git repack -ad; git prune instead)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "PERFORMANCE The performance of git-filter-branch is glacially slow; its design makes it\nimpossible for a backward-compatible implementation to ever be fast: In editing files, git-filter-branch by design checks out each and\nevery commit as it existed in the original repo.  If your repo has 10^5 files and 10^5 commits, but each commit only modifies five\nfiles, then git-filter-branch will make you do 10^10 modifications,\ndespite only having (at most) 5*10^5 unique blobs. If you try and cheat and try to make git-filter-branch only work on\nfiles modified in a commit, then two things happen you run into problems with deletions whenever the user is simply\ntrying to rename files (because attempting to delete files that\ndon’t exist looks like a no-op; it takes some chicanery to remap\ndeletes across file renames when the renames happen via arbitrary\nuser-provided shell) even if you succeed at the map-deletes-for-renames chicanery, you\nstill technically violate backward compatibility because users\nare allowed to filter files in ways that depend upon topology of\ncommits instead of filtering solely based on file contents or\nnames (though this has not been observed in the wild). Even if you don’t need to edit files but only want to e.g. rename or\nremove some and thus can avoid checking out each file (i.e. you can\nuse --index-filter), you still are passing shell snippets for your\nfilters.  This means that for every commit, you have to have a\nprepared git repo where those filters can be run.  That’s a\nsignificant setup. Further, several additional files are created or updated per commit\nby git-filter-branch.  Some of these are for supporting the\nconvenience functions provided by git-filter-branch (such as map()),\nwhile others are for keeping track of internal state (but could have\nalso been accessed by user filters; one of git-filter-branch’s\nregression tests does so).  This essentially amounts to using the\nfilesystem as an IPC mechanism between git-filter-branch and the\nuser-provided filters.  Disks tend to be a slow IPC mechanism, and\nwriting these files also effectively represents a forced\nsynchronization point between separate processes that we hit with\nevery commit. The user-provided shell commands will likely involve a pipeline of\ncommands, resulting in the creation of many processes per commit.\nCreating and running another process takes a widely varying amount\nof time between operating systems, but on any platform it is very\nslow relative to invoking a function. git-filter-branch itself is written in shell, which is kind of slow.\nThis is the one performance issue that could be backward-compatibly\nfixed, but compared to the above problems that are intrinsic to the\ndesign of git-filter-branch, the language of the tool itself is a\nrelatively minor issue. Side note: Unfortunately, people tend to fixate on the\nwritten-in-shell aspect and periodically ask if git-filter-branch\ncould be rewritten in another language to fix the performance\nissues.  Not only does that ignore the bigger intrinsic problems\nwith the design, it’d help less than you’d expect: if\ngit-filter-branch itself were not shell, then the convenience\nfunctions (map(), skip_commit(), etc) and the --setup argument\ncould no longer be executed once at the beginning of the program\nbut would instead need to be prepended to every user filter (and\nthus re-executed with every commit). The git filter-repo tool is\nan alternative to git-filter-branch which does not suffer from these\nperformance problems or the safety problems (mentioned below). For those\nwith existing tooling which relies upon git-filter-branch, git\nfilter-repo also provides filter-lamely ,\na drop-in git-filter-branch replacement (with a few caveats).  While\nfilter-lamely suffers from all the same safety issues as\ngit-filter-branch, it at least ameliorates the performance issues a\nlittle."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "SAFETY git-filter-branch is riddled with gotchas resulting in various ways to\neasily corrupt repos or end up with a mess worse than what you started\nwith: Someone can have a set of \"working and tested filters\" which they\ndocument or provide to a coworker, who then runs them on a different\nOS where the same commands are not working/tested (some examples in\nthe git-filter-branch manpage are also affected by this).\nBSD vs. GNU userland differences can really bite.  If lucky, error\nmessages are spewed.  But just as likely, the commands either don’t\ndo the filtering requested, or silently corrupt by making some\nunwanted change.  The unwanted change may only affect a few commits,\nso it’s not necessarily obvious either.  (The fact that problems\nwon’t necessarily be obvious means they are likely to go unnoticed\nuntil the rewritten history is in use for quite a while, at which\npoint it’s really hard to justify another flag-day for another\nrewrite.) Filenames with spaces are often mishandled by shell snippets since\nthey cause problems for shell pipelines.  Not everyone is familiar\nwith find -print0, xargs -0, git-ls-files -z, etc.  Even people who\nare familiar with these may assume such flags are not relevant\nbecause someone else renamed any such files in their repo back\nbefore the person doing the filtering joined the project.  And\noften, even those familiar with handling arguments with spaces may\nnot do so just because they aren’t in the mindset of thinking about\neverything that could possibly go wrong. Non-ascii filenames can be silently removed despite being in a\ndesired directory.  Keeping only wanted paths is often done using\npipelines like git ls-files | grep -v ^WANTED_DIR/ | xargs git rm .\nls-files will only quote filenames if needed, so folks may not\nnotice that one of the files didn’t match the regex (at least not\nuntil it’s much too late).  Yes, someone who knows about\ncore.quotePath can avoid this (unless they have other special\ncharacters like \\t, \\n, or \"), and people who use ls-files -z with\nsomething other than grep can avoid this, but that doesn’t mean they\nwill. Similarly, when moving files around, one can find that filenames\nwith non-ascii or special characters end up in a different\ndirectory, one that includes a double quote character.  (This is\ntechnically the same issue as above with quoting, but perhaps an\ninteresting different way that it can and has manifested as a\nproblem.) It’s far too easy to accidentally mix up old and new history.  It’s\nstill possible with any tool, but git-filter-branch almost\ninvites it.  If lucky, the only downside is users getting frustrated\nthat they don’t know how to shrink their repo and remove the old\nstuff.  If unlucky, they merge old and new history and end up with\nmultiple \"copies\" of each commit, some of which have unwanted or\nsensitive files and others which don’t.  This comes about in\nmultiple different ways: the default to only doing a partial history rewrite ( --all is not\nthe default and few examples show it) the fact that there’s no automatic post-run cleanup the fact that --tag-name-filter (when used to rename tags) doesn’t\nremove the old tags but just adds new ones with the new name the fact that little educational information is provided to inform\nusers of the ramifications of a rewrite and how to avoid mixing old\nand new history.  For example, this man page discusses how users\nneed to understand that they need to rebase their changes for all\ntheir branches on top of new history (or delete and reclone), but\nthat’s only one of multiple concerns to consider.  See the\n\"DISCUSSION\" section of the git filter-repo manual page for more\ndetails. Annotated tags can be accidentally converted to lightweight tags,\ndue to either of two issues: Someone can do a history rewrite, realize they messed up, restore\nfrom the backups in refs/original/, and then redo their\ngit-filter-branch command.  (The backup in refs/original/ is not a\nreal backup; it dereferences tags first.) Running git-filter-branch with either --tags or --all in your\n<rev-list-options>.  In order to retain annotated tags as\nannotated, you must use --tag-name-filter (and must not have\nrestored from refs/original/ in a previously botched rewrite). Any commit messages that specify an encoding will become corrupted\nby the rewrite; git-filter-branch ignores the encoding, takes the\noriginal bytes, and feeds it to commit-tree without telling it the\nproper encoding.  (This happens whether or not --msg-filter is\nused.) Commit messages (even if they are all UTF-8) by default become\ncorrupted due to not being updated — any references to other commit\nhashes in commit messages will now refer to no-longer-extant\ncommits. There are no facilities for helping users find what unwanted crud\nthey should delete, which means they are much more likely to have\nincomplete or partial cleanups that sometimes result in confusion\nand people wasting time trying to understand.  (For example, folks\ntend to just look for big files to delete instead of big directories\nor extensions, and once they do so, then sometime later folks using\nthe new repository who are going through history will notice a build\nartifact directory that has some files but not others, or a cache of\ndependencies (node_modules or similar) which couldn’t have ever been\nfunctional since it’s missing some files.) If --prune-empty isn’t specified, then the filtering process can\ncreate hoards of confusing empty commits If --prune-empty is specified, then intentionally placed empty\ncommits from before the filtering operation are also pruned instead\nof just pruning commits that became empty due to filtering rules. If --prune-empty is specified, sometimes empty commits are missed\nand left around anyway (a somewhat rare bug, but it happens…​) A minor issue, but users who have a goal to update all names and\nemails in a repository may be led to --env-filter which will only\nupdate authors and committers, missing taggers. If the user provides a --tag-name-filter that maps multiple tags to\nthe same name, no warning or error is provided; git-filter-branch\nsimply overwrites each tag in some undocumented pre-defined order\nresulting in only one tag at the end.  (A git-filter-branch\nregression test requires this surprising behavior.) Also, the poor performance of git-filter-branch often leads to safety\nissues: Coming up with the correct shell snippet to do the filtering you\nwant is sometimes difficult unless you’re just doing a trivial\nmodification such as deleting a couple files.  Unfortunately, people\noften learn if the snippet is right or wrong by trying it out, but\nthe rightness or wrongness can vary depending on special\ncircumstances (spaces in filenames, non-ascii filenames, funny\nauthor names or emails, invalid timezones, presence of grafts or\nreplace objects, etc.), meaning they may have to wait a long time,\nhit an error, then restart.  The performance of git-filter-branch is\nso bad that this cycle is painful, reducing the time available to\ncarefully re-check (to say nothing about what it does to the\npatience of the person doing the rewrite even if they do technically\nhave more time available).  This problem is extra compounded because\nerrors from broken filters may not be shown for a long time and/or\nget lost in a sea of output.  Even worse, broken filters often just\nresult in silent incorrect rewrites. To top it all off, even when users finally find working commands,\nthey naturally want to share them.  But they may be unaware that\ntheir repo didn’t have some special cases that someone else’s does.\nSo, when someone else with a different repository runs the same\ncommands, they get hit by the problems above.  Or, the user just\nruns commands that really were vetted for special cases, but they\nrun it on a different OS where it doesn’t work, as noted above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb"}, {"role": "assistant", "content": "NAME git-instaweb - Instantly browse your working repository in gitweb"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb"}, {"role": "assistant", "content": "SYNOPSIS git instaweb [--local] [--httpd=<httpd>] [--port=<port>]\n               [--browser=<browser>] git instaweb [--start] [--stop] [--restart]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb"}, {"role": "assistant", "content": "DESCRIPTION A simple script to set up gitweb and a web server for browsing the local\nrepository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  -l  --local"}, {"role": "assistant", "content": "Only bind the web server to the local IP (127.0.0.1)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  -d  --httpd"}, {"role": "assistant", "content": "The HTTP daemon command-line that will be executed.\nCommand-line options may be specified here, and the\nconfiguration file will be added at the end of the command-line.\nCurrently apache2, lighttpd, mongoose, plackup, python and\nwebrick are supported.\n(Default: lighttpd)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  -m  --module-path"}, {"role": "assistant", "content": "The module path (only needed if httpd is Apache).\n(Default: /usr/lib/apache2/modules)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  -p  --port"}, {"role": "assistant", "content": "The port number to bind the httpd to.  (Default: 1234)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  -b  --browser"}, {"role": "assistant", "content": "The web browser that should be used to view the gitweb\npage. This will be passed to the git web--browse helper\nscript along with the URL of the gitweb instance. See git-web--browse for more information about this. If\nthe script fails, the URL will be printed to stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  start  --start"}, {"role": "assistant", "content": "Start the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  stop  --stop"}, {"role": "assistant", "content": "Stop the httpd instance and exit.  This does not generate\nany of the configuration files for spawning a new instance,\nnor does it close the browser."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb  restart  --restart"}, {"role": "assistant", "content": "Restart the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-instaweb - Instantly browse your working repository in gitweb"}, {"role": "assistant", "content": "CONFIGURATION You may specify configuration in your .git/config [instaweb]\n\tlocal = true\n\thttpd = apache2 -f\n\tport = 4321\n\tbrowser = konqueror\n\tmodulePath = /usr/lib/apache2/modules If the configuration variable instaweb.browser is not set, web.browser will be used instead if it is defined. See git-web--browse for more information about this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree"}, {"role": "assistant", "content": "NAME git-archive - Create an archive of files from a named tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree"}, {"role": "assistant", "content": "SYNOPSIS git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]\n\t      [-o <file> | --output=<file>] [--worktree-attributes]\n\t      [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>\n\t      [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree"}, {"role": "assistant", "content": "DESCRIPTION Creates an archive of the specified format containing the tree\nstructure for the named tree, and writes it out to the standard\noutput.  If <prefix> is specified it is\nprepended to the filenames in the archive. git archive behaves differently when given a tree ID as opposed to a\ncommit ID or tag ID. When a tree ID is provided, the current time is\nused as the modification time of each file in the archive. On the\nother hand, when a commit ID or tag ID is provided, the commit time as\nrecorded in the referenced commit object is used instead.\nAdditionally the commit ID is stored in a global extended pax header\nif the tar format is used; it can be extracted using git\nget-tar-commit-id . In ZIP files it is stored as a file comment."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --format=<fmt>"}, {"role": "assistant", "content": "Format of the resulting archive. Possible values are tar , zip , tar.gz , tgz , and any format defined using the\nconfiguration option tar.<format>.command . If --format is not given, and the output file is specified, the format is\ninferred from the filename if possible (e.g. writing to foo.zip makes the output to be in the zip format). Otherwise the output\nformat is tar ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -l  --list"}, {"role": "assistant", "content": "Show all available formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -v  --verbose"}, {"role": "assistant", "content": "Report progress to stderr."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --prefix=<prefix>/"}, {"role": "assistant", "content": "Prepend <prefix>/ to paths in the archive.  Can be repeated; its\nrightmost value is used for all tracked files.  See below which\nvalue gets used by --add-file and --add-virtual-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -o <file>  --output=<file>"}, {"role": "assistant", "content": "Write the archive to <file> instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --add-file=<file>"}, {"role": "assistant", "content": "Add a non-tracked file to the archive.  Can be repeated to add\nmultiple files.  The path of the file in the archive is built by\nconcatenating the value of the last --prefix option (if any)\nbefore this --add-file and the basename of <file>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --add-virtual-file=<path>:<content>"}, {"role": "assistant", "content": "Add the specified contents to the archive.  Can be repeated to add\nmultiple files.  The path of the file in the archive is built\nby concatenating the value of the last --prefix option (if any)\nbefore this --add-virtual-file and <path> . The <path> argument can start and end with a literal double-quote\ncharacter; the contained file name is interpreted as a C-style string,\ni.e. the backslash is interpreted as escape character. The path must\nbe quoted if it contains a colon, to avoid the colon from being\nmisinterpreted as the separator between the path and the contents, or\nif the path begins or ends with a double-quote character. The file mode is limited to a regular file, and the option may be\nsubject to platform-dependent command-line limits. For non-trivial\ncases, write an untracked file and use --add-file instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --worktree-attributes"}, {"role": "assistant", "content": "Look for attributes in .gitattributes files in the working tree\nas well (see ATTRIBUTES )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --mtime=<time>"}, {"role": "assistant", "content": "Set modification time of archive entries.  Without this option\nthe committer time is used if <tree-ish> is a commit or tag,\nand the current time if it is a tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  <extra>"}, {"role": "assistant", "content": "This can be any options that the archiver backend understands.\nSee next section."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --remote=<repo>"}, {"role": "assistant", "content": "Instead of making a tar archive from the local repository,\nretrieve a tar archive from a remote repository. Note that the\nremote repository may place restrictions on which sha1\nexpressions may be allowed in <tree-ish> . See git-upload-archive for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --exec=<git-upload-archive>"}, {"role": "assistant", "content": "Used with --remote to specify the path to the git-upload-archive on the remote side."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  <tree-ish>"}, {"role": "assistant", "content": "The tree or commit to produce an archive for."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  <path>"}, {"role": "assistant", "content": "Without an optional path parameter, all files and subdirectories\nof the current working directory are included in the archive.\nIf one or more paths are specified, only these are included."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -<digit>"}, {"role": "assistant", "content": "Specify compression level.  Larger values allow the command\nto spend more time to compress to smaller size.  Supported\nvalues are from -0 (store-only) to -9 (best ratio).\nDefault is -6 if not given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -<number>"}, {"role": "assistant", "content": "Specify compression level. The value will be passed to the\ncompression command configured in tar.<format>.command . See\nmanual page of the configured command for the list of supported\nlevels and the default level if this option isn’t specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  tar.umask"}, {"role": "assistant", "content": "This variable can be used to restrict the permission bits of\ntar archive entries.  The default is 0002, which turns off the\nworld write bit.  The special value \"user\" indicates that the\narchiving user’s umask will be used instead.  See umask(2) for\ndetails.  If --remote is used then only the configuration of\nthe remote repository takes effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  tar.<format>.command"}, {"role": "assistant", "content": "This variable specifies a shell command through which the tar\noutput generated by git archive should be piped. The command\nis executed using the shell with the generated tar file on its\nstandard input, and should produce the final output on its\nstandard output. Any compression-level options will be passed\nto the command (e.g., -9 ). The tar.gz and tgz formats are defined automatically and use the\nmagic command git archive gzip by default, which invokes an internal\nimplementation of gzip."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  tar.<format>.remote"}, {"role": "assistant", "content": "If true, enable the format for use by remote clients via git-upload-archive . Defaults to false for\nuser-defined formats, but true for the tar.gz and tgz formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  export-ignore"}, {"role": "assistant", "content": "Files and directories with the attribute export-ignore won’t be\nadded to archive files.  See gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  export-subst"}, {"role": "assistant", "content": "If the attribute export-subst is set for a file then Git will\nexpand several placeholders when adding this file to an archive.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)"}, {"role": "assistant", "content": "Create a tar archive that contains the contents of the\nlatest commit on the current branch, and extract it in the /var/tmp/junk directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz"}, {"role": "assistant", "content": "Create a compressed tarball for v1.4.0 release."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz"}, {"role": "assistant", "content": "Same as above, but using the builtin tar.gz handling."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0"}, {"role": "assistant", "content": "Same as above, but the format is inferred from the output file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip >git-1.4.0.tar.gz"}, {"role": "assistant", "content": "Create a compressed tarball for v1.4.0 release, but without a\nglobal extended pax header."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip"}, {"role": "assistant", "content": "Put everything in the current head’s Documentation/ directory\ninto git-1.4.0-docs.zip , with the prefix git-docs/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive -o latest.zip HEAD"}, {"role": "assistant", "content": "Create a Zip archive that contains the contents of the latest\ncommit on the current branch. Note that the output format is\ninferred by the extension of the output file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive -o latest.tar --prefix=build/ --add-file=configure --prefix= HEAD"}, {"role": "assistant", "content": "Creates a tar archive that contains the contents of the latest\ncommit on the current branch with no prefix and the untracked\nfile configure with the prefix build/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git config tar.tar.xz.command \"xz -c\""}, {"role": "assistant", "content": "Configure a \"tar.xz\" format for making LZMA-compressed tarfiles.\nYou can use it specifying --format=tar.xz , or by creating an\noutput file like -o foo.tar.xz ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "NAME git-bundle - Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "SYNOPSIS git bundle create [-q | --quiet | --progress]\n\t\t    [--version=<version>] <file> <git-rev-list-args> git bundle verify [-q | --quiet] <file> git bundle list-heads <file> [<refname>…​] git bundle unbundle [--progress] <file> [<refname>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "DESCRIPTION Create, unpack, and manipulate \"bundle\" files. Bundles are used for\nthe \"offline\" transfer of Git objects without an active \"server\"\nsitting on the other side of the network connection. They can be used to create both incremental and full backups of a\nrepository, and to relay the state of the references in one repository\nto another. Git commands that fetch or otherwise \"read\" via protocols such as ssh:// and https:// can also operate on bundle files. It is\npossible git-clone a new repository from a bundle, to use git-fetch to fetch from one, and to list the references\ncontained within it with git-ls-remote . There’s no\ncorresponding \"write\" support, i.e.a git push into a bundle is not\nsupported. See the \"EXAMPLES\" section below for examples of how to use bundles."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "BUNDLE FORMAT Bundles are .pack files (see git-pack-objects ) with a\nheader indicating what references are contained within the bundle. Like the packed archive format itself bundles can either be\nself-contained, or be created using exclusions.\nSee the \"OBJECT PREREQUISITES\" section below. Bundles created using revision exclusions are \"thin packs\" created\nusing the --thin option to git-pack-objects , and\nunbundled using the --fix-thin option to git-index-pack . There is no option to create a \"thick pack\" when using revision\nexclusions, and users should not be concerned about the difference. By\nusing \"thin packs\", bundles created using exclusions are smaller in\nsize. That they’re \"thin\" under the hood is merely noted here as a\ncuriosity, and as a reference to other documentation. See gitformat-bundle for more details and the discussion of\n\"thin pack\" in gitformat-pack for further details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  create [options] <file> <git-rev-list-args>"}, {"role": "assistant", "content": "Used to create a bundle named file .  This requires the <git-rev-list-args> arguments to define the bundle contents. options contains the options specific to the git bundle create subcommand. If file is - , the bundle is written to stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  verify <file>"}, {"role": "assistant", "content": "Used to check that a bundle file is valid and will apply\ncleanly to the current repository.  This includes checks on the\nbundle format itself as well as checking that the prerequisite\ncommits exist and are fully linked in the current repository.\nThen, git bundle prints a list of missing commits, if any.\nFinally, information about additional capabilities, such as \"object\nfilter\", is printed. See \"Capabilities\" in gitformat-bundle for more information. The exit code is zero for success, but will\nbe nonzero if the bundle file is invalid. If file is - , the\nbundle is read from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  list-heads <file>"}, {"role": "assistant", "content": "Lists the references defined in the bundle.  If followed by a\nlist of references, only references matching those given are\nprinted out. If file is - , the bundle is read from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  unbundle <file>"}, {"role": "assistant", "content": "Passes the objects in the bundle to git index-pack for storage in the repository, then prints the names of all\ndefined references. If a list of references is given, only\nreferences matching those in the list are printed. This command is\nreally plumbing, intended to be called only by git fetch .\nIf file is - , the bundle is read from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  <git-rev-list-args>"}, {"role": "assistant", "content": "A list of arguments, acceptable to git rev-parse and git rev-list (and containing a named ref, see SPECIFYING REFERENCES\nbelow), that specifies the specific objects and references\nto transport.  For example, master~10..master causes the\ncurrent master reference to be packaged along with all objects\nadded since its 10th ancestor commit.  There is no explicit\nlimit to the number of references and objects that may be\npackaged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  [<refname>…​]"}, {"role": "assistant", "content": "A list of references used to limit the references reported as\navailable. This is principally of use to git fetch , which\nexpects to receive only those references asked for and not\nnecessarily everything in the pack (in this case, git bundle acts\nlike git fetch-pack )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if\nthe standard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  --version=<version>"}, {"role": "assistant", "content": "Specify the bundle version.  Version 2 is the older format and can only be\nused with SHA-1 repositories; the newer version 3 contains capabilities that\npermit extensions. The default is the oldest supported format, based on the\nhash algorithm in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  -q  --quiet"}, {"role": "assistant", "content": "This flag makes the command not to report its progress\non the standard error stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "SPECIFYING REFERENCES Revisions must be accompanied by reference names to be packaged in a\nbundle. More than one reference may be packaged, and more than one set of prerequisite objects can\nbe specified.  The objects packaged are those not contained in the\nunion of the prerequisites. The git bundle create command resolves the reference names for you\nusing the same rules as git rev-parse --abbrev-ref=loose . Each\nprerequisite can be specified explicitly (e.g. ^master~10 ), or implicitly\n(e.g. master~10..master , --since=10.days.ago master ). All of these simple cases are OK (assuming we have a \"master\" and\n\"next\" branch): $ git bundle create master.bundle master\n$ echo master | git bundle create master.bundle --stdin\n$ git bundle create master-and-next.bundle master next\n$ (echo master; echo next) | git bundle create master-and-next.bundle --stdin And so are these (and the same but omitted --stdin examples): $ git bundle create recent-master.bundle master~10..master\n$ git bundle create recent-updates.bundle master~10..master next~5..next A revision name or a range whose right-hand-side cannot be resolved to\na reference is not accepted: $ git bundle create HEAD.bundle $(git rev-parse HEAD)\nfatal: Refusing to create empty bundle.\n$ git bundle create master-yesterday.bundle master~10..master~5\nfatal: Refusing to create empty bundle."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "OBJECT PREREQUISITES When creating bundles it is possible to create a self-contained bundle\nthat can be unbundled in a repository with no common history, as well\nas providing negative revisions to exclude objects needed in the\nearlier parts of the history. Feeding a revision such as new to git bundle create will create a\nbundle file that contains all the objects reachable from the revision new . That bundle can be unbundled in any repository to obtain a full\nhistory that leads to the revision new : $ git bundle create full.bundle new A revision range such as old..new will produce a bundle file that\nwill require the revision old (and any objects reachable from it)\nto exist for the bundle to be \"unbundle\"-able: $ git bundle create full.bundle old..new A self-contained bundle without any prerequisites can be extracted\ninto anywhere, even into an empty repository, or be cloned from\n(i.e., new , but not old..new ). It is okay to err on the side of caution, causing the bundle file\nto contain objects already in the destination, as these are ignored\nwhen unpacking at the destination. If you want to match git clone --mirror , which would include your\nrefs such as refs/remotes/* , use --all .\nIf you want to provide the same set of refs that a clone directly\nfrom the source repository would get, use --branches --tags for\nthe <git-rev-list-args> . The git bundle verify command can be used to check whether your\nrecipient repository has the required prerequisite commits for a\nbundle."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "EXAMPLES Assume you want to transfer the history from a repository R1 on machine A\nto another repository R2 on machine B.\nFor whatever reason, direct connection between A and B is not allowed,\nbut we can move data from A to B via some mechanism (CD, email, etc.).\nWe want to update R2 with development made on the branch master in R1. To bootstrap the process, you can first create a bundle that does not have\nany prerequisites. You can use a tag to remember up to what commit you last\nprocessed, in order to make it easy to later update the other repository\nwith an incremental bundle: machineA$ cd R1\nmachineA$ git bundle create file.bundle master\nmachineA$ git tag -f lastR2bundle master Then you transfer file.bundle to the target machine B. Because this\nbundle does not require any existing object to be extracted, you can\ncreate a new repository on machine B by cloning from it: machineB$ git clone -b master /home/me/tmp/file.bundle R2 This will define a remote called \"origin\" in the resulting repository that\nlets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will\nhave an entry like this: [remote \"origin\"]\n    url = /home/me/tmp/file.bundle\n    fetch = refs/heads/*:refs/remotes/origin/* To update the resulting mine.git repository, you can fetch or pull after\nreplacing the bundle stored at /home/me/tmp/file.bundle with incremental\nupdates. After working some more in the original repository, you can create an\nincremental bundle to update the other repository: machineA$ cd R1\nmachineA$ git bundle create file.bundle lastR2bundle..master\nmachineA$ git tag -f lastR2bundle master You then transfer the bundle to the other machine to replace\n/home/me/tmp/file.bundle, and pull from it. machineB$ cd R2\nmachineB$ git pull If you know up to what commit the intended recipient repository should\nhave the necessary objects, you can use that knowledge to specify the\nprerequisites, giving a cut-off point to limit the revisions and objects that go\nin the resulting bundle. The previous example used the lastR2bundle tag\nfor this purpose, but you can use any other options that you would give to\nthe git-log command. Here are more examples: You can use a tag that is present in both: $ git bundle create mybundle v1.0.0..master You can use a prerequisite based on time: $ git bundle create mybundle --since=10.days master You can use the number of commits: $ git bundle create mybundle -10 master You can run git-bundle verify to see if you can extract from a bundle\nthat was created with a prerequisite: $ git bundle verify mybundle This will list what commits you must have in order to extract from the\nbundle and will error out if you do not have them. A bundle from a recipient repository’s point of view is just like a\nregular repository which it fetches or pulls from. You can, for example, map\nreferences when fetching: $ git fetch mybundle master:localRef You can also see what references it offers: $ git ls-remote mybundle"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive"}, {"role": "assistant", "content": "FILE FORMAT See gitformat-bundle ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "NAME git-daemon - A really simple server for Git repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "SYNOPSIS git daemon [--verbose] [--syslog] [--export-all]\n\t     [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]\n\t     [--strict-paths] [--base-path=<path>] [--base-path-relaxed]\n\t     [--user-path | --user-path=<path>]\n\t     [--interpolated-path=<pathtemplate>]\n\t     [--reuseaddr] [--detach] [--pid-file=<file>]\n\t     [--enable=<service>] [--disable=<service>]\n\t     [--allow-override=<service>] [--forbid-override=<service>]\n\t     [--access-hook=<path>] [--[no-]informative-errors]\n\t     [--inetd |\n\t      [--listen=<host-or-ipaddr>] [--port=<n>]\n\t      [--user=<user> [--group=<group>]]]\n\t     [--log-destination=(stderr|syslog|none)]\n\t     [<directory>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "DESCRIPTION A really simple TCP Git daemon that normally listens on port \"DEFAULT_GIT_PORT\"\naka 9418.  It waits for a connection asking for a service, and will serve\nthat service if it is enabled. It verifies that the directory has the magic file \"git-daemon-export-ok\", and\nit will refuse to export any Git directory that hasn’t explicitly been marked\nfor export this way (unless the --export-all parameter is specified). If you\npass some directory paths as git daemon arguments, the offers are limited to\nrepositories within those directories. By default, only upload-pack service is enabled, which serves git fetch-pack and git ls-remote clients, which are invoked\nfrom git fetch , git pull , and git clone . This is ideally suited for read-only updates, i.e., pulling from\nGit repositories. An upload-archive also exists to serve git archive ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --strict-paths"}, {"role": "assistant", "content": "Match paths exactly (i.e. don’t allow \"/foo/repo\" when the real path is\n\"/foo/repo.git\" or \"/foo/repo/.git\") and don’t do user-relative paths. git daemon will refuse to start when this option is enabled and no\ndirectory arguments are provided."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --base-path=<path>"}, {"role": "assistant", "content": "Remap all the path requests as relative to the given path.\nThis is sort of \"Git root\" - if you run git daemon with --base-path=/srv/git on example.com, then if you later try to pull git://example.com/hello.git , git daemon will interpret the path\nas /srv/git/hello.git ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --base-path-relaxed"}, {"role": "assistant", "content": "If --base-path is enabled and repo lookup fails, with this option git daemon will attempt to lookup without prefixing the base path.\nThis is useful for switching to --base-path usage, while still\nallowing the old paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --interpolated-path=<pathtemplate>"}, {"role": "assistant", "content": "To support virtual hosting, an interpolated path template can be\nused to dynamically construct alternate paths.  The template\nsupports %H for the target hostname as supplied by the client but\nconverted to all lowercase, %CH for the canonical hostname,\n%IP for the server’s IP address, %P for the port number,\nand %D for the absolute path of the named repository.\nAfter interpolation, the path is validated against the directory\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --export-all"}, {"role": "assistant", "content": "Allow pulling from all directories that look like Git repositories\n(have the objects and refs subdirectories), even if they\ndo not have the git-daemon-export-ok file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --inetd"}, {"role": "assistant", "content": "Have the server run as an inetd service. Implies --syslog (may be\noverridden with --log-destination= ).\nIncompatible with --detach, --port, --listen, --user and --group\noptions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --listen=<host-or-ipaddr>"}, {"role": "assistant", "content": "Listen on a specific IP address or hostname.  IP addresses can\nbe either an IPv4 address or an IPv6 address if supported.  If IPv6\nis not supported, then --listen=<hostname> is also not supported and\n--listen must be given an IPv4 address.\nCan be given more than once.\nIncompatible with --inetd option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --port=<n>"}, {"role": "assistant", "content": "Listen on an alternative port.  Incompatible with --inetd option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --init-timeout=<n>"}, {"role": "assistant", "content": "Timeout (in seconds) between the moment the connection is established\nand the client request is received (typically a rather low value, since\nthat should be basically immediate)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --timeout=<n>"}, {"role": "assistant", "content": "Timeout (in seconds) for specific client sub-requests. This includes\nthe time it takes for the server to process the sub-request and the\ntime spent waiting for the next client’s request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --max-connections=<n>"}, {"role": "assistant", "content": "Maximum number of concurrent clients, defaults to 32.  Set it to\nzero for no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --syslog"}, {"role": "assistant", "content": "Short for --log-destination=syslog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --log-destination=<destination>"}, {"role": "assistant", "content": "Send log messages to the specified destination.\nNote that this option does not imply --verbose,\nthus by default only error conditions will be logged.\nThe <destination> must be one of: stderr Write to standard error.\nNote that if --detach is specified,\nthe process disconnects from the real standard error,\nmaking this destination effectively equivalent to none . syslog Write to syslog, using the git-daemon identifier. none Disable all logging. The default destination is syslog if --inetd or --detach is specified,\notherwise stderr ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --user-path  --user-path=<path>"}, {"role": "assistant", "content": "Allow ~user notation to be used in requests.  When\nspecified with no parameter, a request to\ngit://host/~alice/foo is taken as a request to access foo repository in the home directory of user alice .\nIf --user-path=<path> is specified, the same request is\ntaken as a request to access <path>/foo repository in\nthe home directory of user alice ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --verbose"}, {"role": "assistant", "content": "Log details about the incoming connections and requested files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --reuseaddr"}, {"role": "assistant", "content": "Use SO_REUSEADDR when binding the listening socket.\nThis allows the server to restart without waiting for\nold connections to time out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --detach"}, {"role": "assistant", "content": "Detach from the shell. Implies --syslog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --pid-file=<file>"}, {"role": "assistant", "content": "Save the process id in file .  Ignored when the daemon\nis run under --inetd ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --user=<user>  --group=<group>"}, {"role": "assistant", "content": "Change daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group , the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3) and numeric IDs are not supported. Giving these options is an error when used with --inetd ; use\nthe facility of inet daemon to achieve the same before spawning git daemon if needed. Like many programs that switch user id, the daemon does not reset\nenvironment variables such as $HOME when it runs git programs,\ne.g. upload-pack and receive-pack . When using this option, you\nmay also want to set and export HOME to point at the home\ndirectory of <user> before starting the daemon, and make sure any\nGit configuration files in that directory are readable by <user> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --enable=<service>  --disable=<service>"}, {"role": "assistant", "content": "Enable/disable the service site-wide per default.  Note\nthat a service disabled site-wide can still be enabled\nper repository if it is marked overridable and the\nrepository enables the service with a configuration\nitem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --allow-override=<service>  --forbid-override=<service>"}, {"role": "assistant", "content": "Allow/forbid overriding the site-wide default with per\nrepository configuration.  By default, all the services\nmay be overridden."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --[no-]informative-errors"}, {"role": "assistant", "content": "When informative errors are turned on, git-daemon will report\nmore verbose errors to the client, differentiating conditions\nlike \"no such repository\" from \"repository not exported\". This\nis more convenient for clients, but may leak information about\nthe existence of unexported repositories.  When informative\nerrors are not enabled, all errors report \"access denied\" to the\nclient. The default is --no-informative-errors."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --access-hook=<path>"}, {"role": "assistant", "content": "Every time a client connects, first run an external command\nspecified by the <path> with service name (e.g. \"upload-pack\"),\npath to the repository, hostname (%H), canonical hostname\n(%CH), IP address (%IP), and TCP port (%P) as its command-line\narguments. The external command can decide to decline the\nservice by exiting with a non-zero status (or to allow it by\nexiting with a zero status).  It can also look at the $REMOTE_ADDR\nand $REMOTE_PORT environment variables to learn about the\nrequestor when making this decision. The external command can optionally write a single line to its\nstandard output to be sent to the requestor as an error message when\nit declines the service."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  <directory>"}, {"role": "assistant", "content": "The remaining arguments provide a list of directories. If any\ndirectories are specified, then the git-daemon process will\nserve a requested directory only if it is contained in one of\nthese directories. If --strict-paths is specified, then the\nrequested directory must match one of these directories exactly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  stderr"}, {"role": "assistant", "content": "Write to standard error.\nNote that if --detach is specified,\nthe process disconnects from the real standard error,\nmaking this destination effectively equivalent to none ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  syslog"}, {"role": "assistant", "content": "Write to syslog, using the git-daemon identifier."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  none"}, {"role": "assistant", "content": "Disable all logging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  upload-pack"}, {"role": "assistant", "content": "This serves git fetch-pack and git ls-remote clients.  It is enabled by default, but a repository can\ndisable it by setting daemon.uploadpack configuration\nitem to false ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  upload-archive"}, {"role": "assistant", "content": "This serves git archive --remote .  It is disabled by\ndefault, but a repository can enable it by setting daemon.uploadarch configuration item to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  receive-pack"}, {"role": "assistant", "content": "This serves git send-pack clients, allowing anonymous\npush.  It is disabled by default, as there is no authentication in the protocol (in other words, anybody\ncan push anything into the repository, including removal\nof refs).  This is solely meant for a closed LAN setting\nwhere everybody is friendly.  This service can be\nenabled by setting daemon.receivepack configuration item to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  We assume the following in /etc/services"}, {"role": "assistant", "content": "$ grep 9418 /etc/services\ngit\t\t9418/tcp\t\t# Git Version Control System"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  git daemon as inetd server"}, {"role": "assistant", "content": "To set up git daemon as an inetd service that handles any\nrepository within /pub/foo or /pub/bar , place an entry like\nthe following into /etc/inetd all on one line: git stream tcp nowait nobody  /usr/bin/git\n\t\tgit daemon --inetd --verbose --export-all\n\t\t/pub/foo /pub/bar"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  git daemon as inetd server for virtual hosts"}, {"role": "assistant", "content": "To set up git daemon as an inetd service that handles\nrepositories for different virtual hosts, www.example.com and www.example.org , place an entry like the following into /etc/inetd all on one line: git stream tcp nowait nobody /usr/bin/git\n\t\tgit daemon --inetd --verbose --export-all\n\t\t--interpolated-path=/pub/%H%D\n\t\t/pub/www.example.org/software\n\t\t/pub/www.example.com/software\n\t\t/software In this example, the root-level directory /pub will contain\na subdirectory for each virtual host name supported.\nFurther, both hosts advertise repositories simply as git://www.example.com/software/repo.git .  For pre-1.4.0\nclients, a symlink from /software into the appropriate\ndefault repository could be made as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  git daemon as regular daemon for virtual hosts"}, {"role": "assistant", "content": "To set up git daemon as a regular, non-inetd service that\nhandles repositories for multiple virtual hosts based on\ntheir IP addresses, start the daemon like this: git daemon --verbose --export-all\n\t\t--interpolated-path=/pub/%IP/%D\n\t\t/pub/192.168.1.200/software\n\t\t/pub/10.10.220.23/software In this example, the root-level directory /pub will contain\na subdirectory for each virtual host IP address supported.\nRepositories can still be accessed by hostname though, assuming\nthey correspond to these IP addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  selectively enable/disable services per repository"}, {"role": "assistant", "content": "To enable git archive --remote and disable git fetch against\na repository, have the following in the configuration file in the\nrepository (that is the file config next to HEAD , refs and objects ). [daemon]\n\t\tuploadpack = false\n\t\tuploadarch = true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "ENVIRONMENT git daemon will set REMOTE_ADDR to the IP address of the client\nthat connected to it, if the IP address is available. REMOTE_ADDR will\nbe available in the environment of hooks called when\nservices are performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "NAME git-update-server-info - Update auxiliary info file to help dumb servers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "SYNOPSIS git update-server-info [-f | --force]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "DESCRIPTION A dumb server that does not do on-the-fly pack generations must\nhave some auxiliary information files in $GIT_DIR/info and\n$GIT_OBJECT_DIRECTORY/info directories to help clients discover\nwhat references and packs the server has.  This command\ngenerates such auxiliary files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers  -f  --force"}, {"role": "assistant", "content": "Update the info files from scratch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "OUTPUT Currently the command updates the following files.  Please see gitrepository-layout for a description of\nwhat they are for: objects/info/packs info/refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "NAME git-cat-file - Provide contents or details of repository objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "SYNOPSIS git cat-file <type> <object> git cat-file (-e | -p) <object> git cat-file (-t | -s) [--allow-unknown-type] <object> git cat-file (--textconv | --filters)\n\t     [<rev>:<path|tree-ish> | --path=<path|tree-ish> <rev>] git cat-file (--batch | --batch-check | --batch-command) [--batch-all-objects]\n\t     [--buffer] [--follow-symlinks] [--unordered]\n\t     [--textconv | --filters] [-Z]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "DESCRIPTION Output the contents or other properties such as size, type or delta\ninformation of one or more objects. This command can operate in two modes, depending on whether an option\nfrom the --batch family is specified. In non-batch mode, the command provides information on an object\nnamed on the command line. In batch mode, arguments are read from standard input."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  <object>"}, {"role": "assistant", "content": "The name of the object to show.\nFor a more complete list of ways to spell object names, see\nthe \"SPECIFYING REVISIONS\" section in gitrevisions ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -t"}, {"role": "assistant", "content": "Instead of the content, show the object type identified by <object> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -s"}, {"role": "assistant", "content": "Instead of the content, show the object size identified by <object> . If used with --use-mailmap option, will show\nthe size of updated object after replacing idents using the\nmailmap mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -e"}, {"role": "assistant", "content": "Exit with zero status if <object> exists and is a valid\nobject. If <object> is of an invalid format, exit with non-zero\nstatus and emit an error on stderr."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -p"}, {"role": "assistant", "content": "Pretty-print the contents of <object> based on its type."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  <type>"}, {"role": "assistant", "content": "Typically this matches the real type of <object> but asking\nfor a type that can trivially be dereferenced from the given <object> is also permitted.  An example is to ask for a\n\"tree\" with <object> being a commit object that contains it,\nor to ask for a \"blob\" with <object> being a tag object that\npoints at it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --[no-]mailmap  --[no-]use-mailmap"}, {"role": "assistant", "content": "Use mailmap file to map author, committer and tagger names\nand email addresses to canonical real names and email addresses.\nSee git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --textconv"}, {"role": "assistant", "content": "Show the content as transformed by a textconv filter. In this case, <object> has to be of the form <tree-ish>:<path> , or :<path> in\norder to apply the filter to the content recorded in the index at <path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --filters"}, {"role": "assistant", "content": "Show the content as converted by the filters configured in\nthe current working tree for the given <path> (i.e. smudge filters,\nend-of-line conversion, etc). In this case, <object> has to be of\nthe form <tree-ish>:<path> , or :<path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --path=<path>"}, {"role": "assistant", "content": "For use with --textconv or --filters , to allow specifying an object\nname and a path separately, e.g. when it is difficult to figure out\nthe revision from which the blob came."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch  --batch=<format>"}, {"role": "assistant", "content": "Print object information and contents for each object provided\non stdin. May not be combined with any other options or arguments\nexcept --textconv , --filters , or --use-mailmap . When used with --textconv or --filters , the input lines\nmust specify the path, separated by whitespace. See the section BATCH OUTPUT below for details. When used with --use-mailmap , for commit and tag objects, the\ncontents part of the output shows the identities replaced using the\nmailmap mechanism, while the information part of the output shows\nthe size of the object as if it actually recorded the replacement\nidentities."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch-check  --batch-check=<format>"}, {"role": "assistant", "content": "Print object information for each object provided on stdin. May not be\ncombined with any other options or arguments except --textconv , --filters or --use-mailmap . When used with --textconv or --filters , the input lines must\nspecify the path, separated by whitespace. See the section BATCH OUTPUT below for details. When used with --use-mailmap , for commit and tag objects, the\nprinted object information shows the size of the object as if the\nidentities recorded in it were replaced by the mailmap mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch-command  --batch-command=<format>"}, {"role": "assistant", "content": "Enter a command mode that reads commands and arguments from stdin. May\nonly be combined with --buffer , --textconv , --use-mailmap or --filters . When used with --textconv or --filters , the input lines must\nspecify the path, separated by whitespace. See the section BATCH OUTPUT below for details. When used with --use-mailmap , for commit and tag objects, the contents command shows the identities replaced using the\nmailmap mechanism, while the info command shows the size\nof the object as if it actually recorded the replacement\nidentities. --batch-command recognizes the following commands: contents <object> Print object contents for object reference <object> . This corresponds to\nthe output of --batch . info <object> Print object info for object reference <object> . This corresponds to the\noutput of --batch-check . flush Used with --buffer to execute all preceding commands that were issued\nsince the beginning or since the last flush was issued. When --buffer is used, no output will come until a flush is issued. When --buffer is not used, commands are flushed each time without issuing flush ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch-all-objects"}, {"role": "assistant", "content": "Instead of reading a list of objects on stdin, perform the\nrequested batch operation on all objects in the repository and\nany alternate object stores (not just reachable objects).\nRequires --batch or --batch-check be specified. By default,\nthe objects are visited in order sorted by their hashes; see\nalso --unordered below. Objects are presented as-is, without\nrespecting the \"replace\" mechanism of git-replace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --buffer"}, {"role": "assistant", "content": "Normally batch output is flushed after each object is output, so\nthat a process can interactively read and write from cat-file . With this option, the output uses normal stdio\nbuffering; this is much more efficient when invoking --batch-check or --batch-command on a large number of objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --unordered"}, {"role": "assistant", "content": "When --batch-all-objects is in use, visit objects in an\norder which may be more efficient for accessing the object\ncontents than hash order. The exact details of the order are\nunspecified, but if you do not require a specific order, this\nshould generally result in faster output, especially with --batch .  Note that cat-file will still show each object\nonly once, even if it is stored multiple times in the\nrepository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --allow-unknown-type"}, {"role": "assistant", "content": "Allow -s or -t to query broken/corrupt objects of unknown type."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --follow-symlinks"}, {"role": "assistant", "content": "With --batch or --batch-check , follow symlinks inside the\nrepository when requesting objects with extended SHA-1\nexpressions of the form tree-ish:path-in-tree.  Instead of\nproviding output about the link itself, provide output about\nthe linked-to object.  If a symlink points outside the\ntree-ish (e.g. a link to /foo or a root-level link to ../foo ),\nthe portion of the link which is outside the tree will be\nprinted. This option does not (currently) work correctly when an object in the\nindex is specified (e.g. :link instead of HEAD:link ) rather than\none in the tree. This option cannot (currently) be used unless --batch or --batch-check is used. For example, consider a git repository containing: f: a file containing \"hello\\n\"\nlink: a symlink to f\ndir/link: a symlink to ../f\nplink: a symlink to ../f\nalink: a symlink to /etc/passwd For a regular file f , echo HEAD:f | git cat-file --batch would print ce013625030ba8dba906f756967f9e9ca394464a blob 6 And echo HEAD:link | git cat-file --batch --follow-symlinks would\nprint the same thing, as would HEAD:dir/link , as they both point at HEAD:f . Without --follow-symlinks , these would print data about the symlink\nitself.  In the case of HEAD:link , you would see 4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1 Both plink and alink point outside the tree, so they would\nrespectively print: symlink 4\n../f symlink 11\n/etc/passwd"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -Z"}, {"role": "assistant", "content": "Only meaningful with --batch , --batch-check , or --batch-command ; input and output is NUL-delimited instead of\nnewline-delimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -z"}, {"role": "assistant", "content": "Only meaningful with --batch , --batch-check , or --batch-command ; input is NUL-delimited instead of\nnewline-delimited. This option is deprecated in favor of -Z as the output can otherwise be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  contents <object>"}, {"role": "assistant", "content": "Print object contents for object reference <object> . This corresponds to\nthe output of --batch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  info <object>"}, {"role": "assistant", "content": "Print object info for object reference <object> . This corresponds to the\noutput of --batch-check ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  flush"}, {"role": "assistant", "content": "Used with --buffer to execute all preceding commands that were issued\nsince the beginning or since the last flush was issued. When --buffer is used, no output will come until a flush is issued. When --buffer is not used, commands are flushed each time without issuing flush ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "OUTPUT If -t is specified, one of the <type> . If -s is specified, the size of the <object> in bytes. If -e is specified, no output, unless the <object> is malformed. If -p is specified, the contents of <object> are pretty-printed. If <type> is specified, the raw (though uncompressed) contents of the <object> will be returned."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  objectname"}, {"role": "assistant", "content": "The full hex representation of the object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  objecttype"}, {"role": "assistant", "content": "The type of the object (the same as cat-file -t reports)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  objectsize"}, {"role": "assistant", "content": "The size, in bytes, of the object (the same as cat-file -s reports)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  objectsize:disk"}, {"role": "assistant", "content": "The size, in bytes, that the object takes up on disk. See the\nnote about on-disk sizes in the CAVEATS section below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  deltabase"}, {"role": "assistant", "content": "If the object is stored as a delta on-disk, this expands to the\nfull hex representation of the delta base object name.\nOtherwise, expands to the null OID (all zeroes). See CAVEATS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  rest"}, {"role": "assistant", "content": "If this atom is used in the output string, input lines are split\nat the first whitespace boundary. All characters before that\nwhitespace are considered to be the object name; characters\nafter that first run of whitespace (i.e., the \"rest\" of the\nline) are output in place of the %(rest) atom."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects"}, {"role": "assistant", "content": "CAVEATS Note that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack. Note also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy’s size or delta base\nwill be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files"}, {"role": "assistant", "content": "NAME git-check-ignore - Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files"}, {"role": "assistant", "content": "SYNOPSIS git check-ignore [<options>] <pathname>…​ git check-ignore [<options>] --stdin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files"}, {"role": "assistant", "content": "DESCRIPTION For each pathname given via the command-line or from a file via --stdin , check whether the file is excluded by .gitignore (or other\ninput files to the exclude mechanism) and output the path if it is\nexcluded. By default, tracked files are not shown at all since they are not\nsubject to exclude rules; but see ‘--no-index’."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  -q, --quiet"}, {"role": "assistant", "content": "Don’t output anything, just set exit status.  This is only\nvalid with a single pathname."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  -v, --verbose"}, {"role": "assistant", "content": "Instead of printing the paths that are excluded, for each path\nthat matches an exclude pattern, print the exclude pattern\ntogether with the path.  (Matching an exclude pattern usually\nmeans the path is excluded, but if the pattern begins with \" ! \"\nthen it is a negated pattern and matching it means the path is\nNOT excluded.) For precedence rules within and between exclude sources, see gitignore ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  --stdin"}, {"role": "assistant", "content": "Read pathnames from the standard input, one per line,\ninstead of from the command-line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  -z"}, {"role": "assistant", "content": "The output format is modified to be machine-parsable (see\nbelow).  If --stdin is also given, input paths are separated\nwith a NUL character instead of a linefeed character."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  -n, --non-matching"}, {"role": "assistant", "content": "Show given paths which don’t match any pattern.  This only\nmakes sense when --verbose is enabled, otherwise it would\nnot be possible to distinguish between paths which match a\npattern and those which don’t."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  --no-index"}, {"role": "assistant", "content": "Don’t look in the index when undertaking the checks. This can\nbe used to debug why a path became tracked by e.g. git add . and was not ignored by the rules as expected by the user or when\ndeveloping patterns including negation to match a path previously\nadded with git add -f ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files"}, {"role": "assistant", "content": "OUTPUT By default, any of the given pathnames which match an ignore pattern\nwill be output, one per line.  If no pattern matches a given path,\nnothing will be output for that path; this means that path will not be\nignored. If --verbose is specified, the output is a series of lines of the form: <source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname> <pathname> is the path of a file being queried, <pattern> is the\nmatching pattern, <source> is the pattern’s source file, and <linenum>\nis the line number of the pattern within that source.  If the pattern\ncontained a \" ! \" prefix or \" / \" suffix, it will be preserved in the\noutput.  <source> will be an absolute path when referring to the file\nconfigured by core.excludesFile , or relative to the repository root\nwhen referring to .git/info/exclude or a per-directory exclude file. If -z is specified, the pathnames in the output are delimited by the\nnull character; if --verbose is also specified then null characters\nare also used instead of colons and hard tabs: <source> <NULL> <linenum> <NULL> <pattern> <NULL> <pathname> <NULL> If -n or --non-matching are specified, non-matching pathnames will\nalso be output, in which case all fields in each output record except\nfor <pathname> will be empty.  This can be useful when running\nnon-interactively, so that files can be incrementally streamed to\nSTDIN of a long-running check-ignore process, and for each of these\nfiles, STDOUT will indicate whether that file matched a pattern or\nnot.  (Without this option, it would be impossible to tell whether the\nabsence of output for a given file meant that it didn’t match any\npattern, or that the output hadn’t been generated yet.) Buffering happens as documented under the GIT_FLUSH option in git .  The caller is responsible for avoiding deadlocks\ncaused by overfilling an input buffer or reading from an empty output\nbuffer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  0"}, {"role": "assistant", "content": "One or more of the provided paths is ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  1"}, {"role": "assistant", "content": "None of the provided paths are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  128"}, {"role": "assistant", "content": "A fatal error was encountered."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree"}, {"role": "assistant", "content": "NAME git-checkout-index - Copy files from the index to the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree"}, {"role": "assistant", "content": "SYNOPSIS git checkout-index [-u] [-q] [-a] [-f] [-n] [--prefix=<string>]\n\t\t   [--stage=<number>|all]\n\t\t   [--temp]\n\t\t   [--ignore-skip-worktree-bits]\n\t\t   [-z] [--stdin]\n\t\t   [--] [<file>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree"}, {"role": "assistant", "content": "DESCRIPTION Copies all listed files from the index to the working directory\n(not overwriting existing files)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -u  --index"}, {"role": "assistant", "content": "update stat information for the checked out entries in\nthe index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -q  --quiet"}, {"role": "assistant", "content": "be quiet if files exist or are not in the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -f  --force"}, {"role": "assistant", "content": "forces overwrite of existing files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -a  --all"}, {"role": "assistant", "content": "checks out all files in the index except for those with the\nskip-worktree bit set (see --ignore-skip-worktree-bits ).\nCannot be used together with explicit filenames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -n  --no-create"}, {"role": "assistant", "content": "Don’t checkout new files, only refresh files already checked\nout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --prefix=<string>"}, {"role": "assistant", "content": "When creating files, prepend <string> (usually a directory\nincluding a trailing /)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --stage=<number>|all"}, {"role": "assistant", "content": "Instead of checking out unmerged entries, copy out the\nfiles from the named stage.  <number> must be between 1 and 3.\nNote: --stage=all automatically implies --temp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --temp"}, {"role": "assistant", "content": "Instead of copying the files to the working directory,\nwrite the content to temporary files.  The temporary name\nassociations will be written to stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --ignore-skip-worktree-bits"}, {"role": "assistant", "content": "Check out all files, including those with the skip-worktree bit\nset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --stdin"}, {"role": "assistant", "content": "Instead of taking a list of paths from the command line,\nread the list of paths from the standard input.  Paths are\nseparated by LF (i.e. one path per line) by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -z"}, {"role": "assistant", "content": "Only meaningful with --stdin ; paths are separated with\nNUL character instead of LF."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree"}, {"role": "assistant", "content": "Using --temp or --stage=all When --temp is used (or implied by --stage=all ) git checkout-index will create a temporary file for each index\nentry being checked out.  The index will not be updated with stat\ninformation.  These options can be useful if the caller needs all\nstages of all unmerged entries so that the unmerged files can be\nprocessed by an external merge tool. A listing will be written to stdout providing the association of\ntemporary file names to tracked path names.  The listing format\nhas two variations: tempname TAB path RS The first format is what gets used when --stage is omitted or\nis not --stage=all . The field tempname is the temporary file\nname holding the file content and path is the tracked path name in\nthe index.  Only the requested entries are output. stage1temp SP stage2temp SP stage3tmp TAB path RS The second format is what gets used when --stage=all .  The three\nstage temporary fields (stage1temp, stage2temp, stage3temp) list the\nname of the temporary file if there is a stage entry in the index\nor . if there is no stage entry.  Paths which only have a stage 0\nentry will always be omitted from the output. In both formats RS (the record separator) is newline by default\nbut will be the null byte if -z was passed on the command line.\nThe temporary file names are always safe strings; they will never\ncontain directory separators or whitespace characters.  The path\nfield is always relative to the current directory and the temporary\nfile names are always relative to the top level directory. If the object being copied out to a temporary file is a symbolic\nlink the content of the link will be written to a normal file.  It is\nup to the end-user or the Porcelain to make use of this information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  To update and refresh only the files already checked out"}, {"role": "assistant", "content": "$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  Using git checkout-index to \"export an entire tree\""}, {"role": "assistant", "content": "The prefix ability basically makes it trivial to use git checkout-index as an \"export as tree\" function.\nJust read the desired tree into the index, and do: $ git checkout-index --prefix=git-export-dir/ -a git checkout-index will \"export\" the index into the specified\ndirectory. The final \"/\" is important. The exported name is literally just\nprefixed with the specified string.  Contrast this with the\nfollowing example."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  Export files with a prefix"}, {"role": "assistant", "content": "$ git checkout-index --prefix=.merged- Makefile This will check out the currently cached copy of Makefile into the file .merged-Makefile ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "NAME git-commit-tree - Create a new commit object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "SYNOPSIS git commit-tree <tree> [(-p <parent>)…​] git commit-tree [(-p <parent>)…​] [-S[<keyid>]] [(-m <message>)…​]\n\t\t  [(-F <file>)…​] <tree>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "DESCRIPTION This is usually not what an end user wants to run directly.  See git-commit instead. Creates a new commit object based on the provided tree object and\nemits the new commit object id on stdout. The log message is read\nfrom the standard input, unless -m or -F options are given. The -m and -F options can be given any number of times, in any\norder. The commit log message will be composed in the order in which\nthe options are given. A commit object may have any number of parents. With exactly one\nparent, it is an ordinary commit. Having more than one parent makes\nthe commit a merge between several lines of history. Initial (root)\ncommits have no parents. While a tree represents a particular directory state of a working\ndirectory, a commit represents that state in \"time\", and explains how\nto get there. Normally a commit would identify a new \"HEAD\" state, and while Git\ndoesn’t care where you save the note about that state, in practice we\ntend to just write the result to the file that is pointed at by .git/HEAD , so that we can always see what the last committed\nstate was."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  <tree>"}, {"role": "assistant", "content": "An existing tree object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  -p <parent>"}, {"role": "assistant", "content": "Each -p indicates the id of a parent commit object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  -m <message>"}, {"role": "assistant", "content": "A paragraph in the commit log message. This can be given more than\nonce and each <message> becomes its own paragraph."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  -F <file>"}, {"role": "assistant", "content": "Read the commit log message from the given file. Use - to read\nfrom the standard input. This can be given more than once and the\ncontent of each file becomes its own paragraph."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand a --gpg-sign option given earlier on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "Commit Information A commit encapsulates: all parent object ids author name, email and date committer name and email and the commit time. A commit comment is read from stdin. If a changelog\nentry is not provided via \"<\" redirection, git commit-tree will just wait\nfor one to be entered and terminated with ^D."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  Git internal format"}, {"role": "assistant", "content": "It is <unix-timestamp> <time-zone-offset> , where <unix-timestamp> is the number of seconds since the UNIX epoch. <time-zone-offset> is a positive or negative offset from UTC.\nFor example CET (which is 1 hour ahead of UTC) is +0100 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  RFC 2822"}, {"role": "assistant", "content": "The standard date format as described by RFC 2822, for example Thu, 07 Apr 2005 22:13:13 +0200 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  ISO 8601"}, {"role": "assistant", "content": "Time and date specified by the ISO 8601 standard, for example 2005-04-07T22:13:13 . The parser accepts a space instead of the T character as well. Fractional parts of a second will be ignored,\nfor example 2005-04-07T22:13:13.019 will be treated as 2005-04-07T22:13:13 . Note In addition, the date part is accepted in the following formats: YYYY.MM.DD , MM/DD/YYYY and DD.MM.YYYY ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "Discussion Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "FILES /etc/mailname"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption"}, {"role": "assistant", "content": "NAME git-count-objects - Count unpacked number of objects and their disk consumption"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption"}, {"role": "assistant", "content": "SYNOPSIS git count-objects [-v] [-H | --human-readable]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption"}, {"role": "assistant", "content": "DESCRIPTION Counts the number of unpacked object files and disk space consumed by\nthem, to help you decide when it is a good time to repack."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption  -v  --verbose"}, {"role": "assistant", "content": "Provide more detailed reports: count: the number of loose objects size: disk space consumed by loose objects, in KiB (unless -H is specified) in-pack: the number of in-pack objects size-pack: disk space consumed by the packs, in KiB (unless -H is specified) prune-packable: the number of loose objects that are also present in\nthe packs. These objects could be pruned using git prune-packed . garbage: the number of files in the object database that are neither valid loose\nobjects nor valid packs size-garbage: disk space consumed by garbage files, in KiB (unless -H is\nspecified) alternate: absolute path of alternate object databases; may appear\nmultiple times, one line per path. Note that if the path contains\nnon-printable characters, it may be surrounded by double-quotes and\ncontain C-style backslashed escape sequences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption  -H  --human-readable"}, {"role": "assistant", "content": "Print sizes in human readable format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "NAME git-diff-index - Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "SYNOPSIS git diff-index [-m] [--cached] [--merge-base] [<common-diff-options>] <tree-ish> [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "DESCRIPTION Compare the content and mode of the blobs found in a tree object\nwith the corresponding tracked files in the working tree, or with the\ncorresponding paths in the index.  When <path> arguments are present,\ncompare only paths matching those patterns.  Otherwise all tracked\nfiles are compared."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -p  -u  --patch"}, {"role": "assistant", "content": "Generate patch (see Generating patch text with -p )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --output=<file>"}, {"role": "assistant", "content": "Output to a specific file instead of stdout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --output-indicator-new=<char>  --output-indicator-old=<char>  --output-indicator-context=<char>"}, {"role": "assistant", "content": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are + , - and\n' ' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --raw"}, {"role": "assistant", "content": "Generate the diff in raw format.\nThis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --patch-with-raw"}, {"role": "assistant", "content": "Synonym for -p --raw ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --indent-heuristic"}, {"role": "assistant", "content": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible\ndiff is produced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --histogram"}, {"role": "assistant", "content": "Generate a diff using the \"histogram diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --anchored=<text>"}, {"role": "assistant", "content": "Generate a diff using the \"anchored diff\" algorithm. This option may be specified more than once. If a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --stat[=<width>[,<name-width>[,<count>]]]"}, {"role": "assistant", "content": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by <width> . The width of the filename part can be limited by\ngiving another width <name-width> after a comma or by setting diff.statNameWidth=<width> . The width of the graph part can be\nlimited by using --stat-graph-width=<width> or by setting diff.statGraphWidth=<width> . Using --stat or --stat-graph-width affects all commands generating a stat graph,\nwhile setting diff.statNameWidth or diff.statGraphWidth does not affect git format-patch .\nBy giving a third parameter <count> , you can limit the output to\nthe first <count> lines, followed by ... if there are more. These parameters can also be set individually with --stat-width=<width> , --stat-name-width=<name-width> and --stat-count=<count> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -X[<param1,param2,…​>]  --dirstat[=<param1,param2,…​>]"}, {"role": "assistant", "content": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config ).\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --dirstat-by-file[=<param1,param2>…​]"}, {"role": "assistant", "content": "Synonym for --dirstat=files,<param1>,<param2>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -z"}, {"role": "assistant", "content": "When --raw , --numstat , --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-color"}, {"role": "assistant", "content": "Turn off colored diff.\nIt is the same as --color=never ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --color-moved[=<mode>]"}, {"role": "assistant", "content": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of: no Moved lines are not highlighted. default Is a synonym for zebra . This may change to a more sensible mode\nin the future. plain Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation. blocks Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart. zebra Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected. dimmed-zebra Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-color-moved"}, {"role": "assistant", "content": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --color-words[=<regex>]"}, {"role": "assistant", "content": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-renames"}, {"role": "assistant", "content": "Turn off rename detection, even when the configuration\nfile gives the default to do so."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --[no-]rename-empty"}, {"role": "assistant", "content": "Whether to use empty blobs as rename source."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -D  --irreversible-delete"}, {"role": "assistant", "content": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null . The resulting patch\nis not meant to be applied with patch or git apply ; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option. When used together with -B , omit also the preimage in the deletion part\nof a delete/create pair."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]"}, {"role": "assistant", "content": "Select only files that are Added ( A ), Copied ( C ),\nDeleted ( D ), Modified ( M ), Renamed ( R ), have their\ntype (i.e. regular file, symlink, submodule, …​) changed ( T ),\nare Unmerged ( U ), are\nUnknown ( X ), or have had their pairing Broken ( B ).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude.  E.g. --diff-filter=ad excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -G<regex>"}, {"role": "assistant", "content": "Look for differences whose patch text contains added/removed\nlines that match <regex>. To illustrate the difference between -S<regex> --pickaxe-regex and -G<regex> , consider a commit with the following diff in the same\nfile: +    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0); While git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change). Unless --text is supplied patches of binary files without a textconv\nfilter will be ignored. See the pickaxe entry in gitdiffcore for more\ninformation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --find-object=<object-id>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S , just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id. The object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --pickaxe-all"}, {"role": "assistant", "content": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -O<orderfile>"}, {"role": "assistant", "content": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config ).  To cancel diff.orderFile ,\nuse -O/dev/null . The output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order. <orderfile> is parsed as follows: Blank lines are ignored, so they can be used as separators for\nreadability. Lines starting with a hash (\" # \") are ignored, so they can be used\nfor comments.  Add a backslash (\" \\ \") to the beginning of the\npattern if it starts with a hash. Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \" foo*bar \"\nmatches \" fooasdfbar \" and \" foo/bar/baz/asdf \" but not \" foobarx \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --skip-to=<file>  --rotate-to=<file>"}, {"role": "assistant", "content": "Discard the files before the named <file> from the output\n(i.e. skip to ), or move them to the end of the output\n(i.e. rotate to ).  These options were invented primarily for the use\nof the git difftool command, and may not be very useful\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -a  --text"}, {"role": "assistant", "content": "Treat all files as text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -b  --ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -w  --ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -W  --function-context"}, {"role": "assistant", "content": "Show whole function as context lines for each change.\nThe function names are determined in the same way as git diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --exit-code"}, {"role": "assistant", "content": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --quiet"}, {"role": "assistant", "content": "Disable all output of the program. Implies --exit-code ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ext-diff"}, {"role": "assistant", "content": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes , you need\nto use this option with git-log and friends."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-ext-diff"}, {"role": "assistant", "content": "Disallow external diff drivers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --textconv  --no-textconv"}, {"role": "assistant", "content": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff and git-log , but not for git-format-patch or\ndiff plumbing commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ignore-submodules[=<when>]"}, {"role": "assistant", "content": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the ignore option in git-config or gitmodules . When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --dst-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given destination prefix instead of \"b/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --no-prefix"}, {"role": "assistant", "content": "Do not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --line-prefix=<prefix>"}, {"role": "assistant", "content": "Prepend an additional prefix to every line of output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ita-invisible-in-index"}, {"role": "assistant", "content": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index . Both options are\nexperimental and could be removed in future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  minimal"}, {"role": "assistant", "content": "Spend extra time to make sure the smallest possible diff is\nproduced."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  changes"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  lines"}, {"role": "assistant", "content": "Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  files"}, {"role": "assistant", "content": "Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  default"}, {"role": "assistant", "content": "Is a synonym for zebra . This may change to a more sensible mode\nin the future."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  blocks"}, {"role": "assistant", "content": "Blocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  porcelain"}, {"role": "assistant", "content": "Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  none"}, {"role": "assistant", "content": "Disable word diff again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  <tree-ish>"}, {"role": "assistant", "content": "The id of a tree object to diff against."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --cached"}, {"role": "assistant", "content": "Do not consider the on-disk file at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --merge-base"}, {"role": "assistant", "content": "Instead of comparing <tree-ish> directly, use the merge base\nbetween <tree-ish> and HEAD instead.  <tree-ish> must be a\ncommit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -m"}, {"role": "assistant", "content": "By default, files recorded in the index but not checked\nout are reported as deleted.  This flag makes git diff-index say that all non-checked-out files are up\nto date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  git-diff-index <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  git-diff-index --cached <tree-ish>"}, {"role": "assistant", "content": "compares the <tree-ish> and the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…​]"}, {"role": "assistant", "content": "compares the trees named by the two arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  git-diff-files [<pattern>…​]"}, {"role": "assistant", "content": "compares the index and the files on the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "diff format for merges \"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\"\ncan take -c or --cc option\nto generate diff output also for merge commits.  The output differs\nfrom the format described above in the following way: there is a colon for each parent there are more \"src\" modes and \"src\" sha1 status is concatenated status characters for each parent no optional \"score\" number tab-separated pathname(s) of the file For -c and --cc , only the destination or final path is shown even\nif the file was renamed on any side of history.  With --combined-all-paths , the name of the path in each parent is shown\nfollowed by the name of the path in the merge commit. Examples for -c and --cc without --combined-all-paths : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tphooey.c Examples when --combined-all-paths added to either -c or --cc : ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM\tdesc.c\tdesc.c\tdesc.c\n::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM\tfoo.sh\tbar.sh\tbar.sh\n::100644 100644 100644 e07d6c5 9042e82 ee91881 RR\tfooey.c\tfuey.c\tphooey.c Note that combined diff lists only files which were modified from\nall parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "Combined diff format Any diff-generating command can take the -c or --cc option to\nproduce a combined diff when showing a merge. This is the default\nformat when showing merges with git-diff or git-show . Note also that you can give suitable --diff-merges option to any of these commands to force generation of\ndiffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n\treturn (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +\tunsigned char sha1[20];\n +\tstruct commit *cmit;\n\tstruct commit_list *list;\n\tstatic int initialized = 0;\n\tstruct commit_name *n;\n\n +\tif (get_sha1(arg, sha1) < 0)\n +\t\tusage(describe_usage);\n +\tcmit = lookup_commit_reference(sha1);\n +\tif (!cmit)\n +\t\tusage(describe_usage);\n +\n\tif (!initialized) {\n\t\tinitialized = 1;\n\t\tfor_each_ref(get_name); It is preceded by a \"git diff\" header, that looks like\nthis (when the -c option is used): diff --combined file or like this (when the --cc option is used): diff --cc file It is followed by one or more extended header lines\n(this example shows a merge with two parents): index <hash>,<hash>..<hash>\nmode <mode>,<mode>..<mode>\nnew file mode <mode>\ndeleted file mode <mode>,<mode> The mode <mode>,<mode>..<mode> line appears only if at least one of\nthe <mode> is different from the rest. Extended headers with\ninformation about detected content movement (renames and\ncopying detection) are designed to work with the diff of two\n<tree-ish> and are not used by combined diff format. It is followed by a two-line from-file/to-file header: --- a/file\n+++ b/file Similar to the two-line header for the traditional unified diff\nformat, /dev/null is used to signal created or deleted\nfiles. However, if the --combined-all-paths option is provided, instead of a\ntwo-line from-file/to-file, you get an N+1 line from-file/to-file header,\nwhere N is the number of parents in the merge commit: --- a/file\n--- a/file\n--- a/file\n+++ b/file This extended format can be useful if rename or copy detection is\nactive, to allow you to see the original name of the file in different\nparents. Chunk header format is modified to prevent people from\naccidentally feeding it to patch -p1 . Combined diff format\nwas created for review of merge commit changes, and was not\nmeant to be applied. The change is similar to the change in the\nextended index header: @@@ <from-file-range> <from-file-range> <to-file-range> @@@ There are (number of parents + 1) @ characters in the chunk\nheader for combined diff format. Unlike the traditional unified diff format, which shows two\nfiles A and B with a single column that has - (minus — appears in A but removed in B), + (plus — missing in A but\nadded to B), or \" \" (space — unchanged) prefix, this format\ncompares two or more files file1, file2,…​ with one file X, and\nshows how X differs from each of fileN.  One column for each of\nfileN is prepended to the output line to note how X’s line is\ndifferent from it. A - character in the column N means that the line appears in\nfileN but it does not appear in the result.  A + character\nin the column N means that the line appears in the result,\nand fileN does not have that line (in other words, the line was\nadded, from the point of view of that parent). In the above example output, the function signature was changed\nfrom both files (hence two - removals from both file1 and\nfile2, plus ++ to mean one line that was added does not appear\nin either file1 or file2).  Also, eight other lines are the same\nfrom file1 but do not appear in file2 (hence prefixed with + ). When shown by git diff-tree -c , it compares the parents of a\nmerge commit with the merge result (i.e. file1..fileN are the\nparents).  When shown by git diff-files -c , it compares the\ntwo unresolved merge parents with the working tree file\n(i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka\n\"their version\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "other diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "OPERATING MODES You can choose whether you want to trust the index file entirely\n(using the --cached flag) or ask the diff logic to show any files\nthat don’t match the stat state as being \"tentatively changed\".  Both\nof these operations are very useful indeed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "CACHED MODE If --cached is specified, it allows you to ask: show me the differences between HEAD and the current index\ncontents (the ones I'd write using 'git write-tree') For example, let’s say that you have worked on your working directory, updated\nsome files in the index and are ready to commit. You want to see exactly what you are going to commit, without having to write a new tree\nobject and compare it that way, and to do that, you just do git diff-index --cached HEAD Example: let’s say I had renamed commit.c to git-commit.c , and I had\ndone an update-index to make that effective in the index file. git diff-files wouldn’t show anything at all, since the index file\nmatches my working directory. But doing a git diff-index does: torvalds@ppc970:~/git> git diff-index --cached HEAD\n:100644 000000 4161aecc6700a2eb579e842af0b7f22b98443f74 0000000000000000000000000000000000000000 D\tcommit.c\n:000000 100644 0000000000000000000000000000000000000000 4161aecc6700a2eb579e842af0b7f22b98443f74 A\tgit-commit.c You can see easily that the above is a rename. In fact, git diff-index --cached should always be entirely equivalent to\nactually doing a git write-tree and comparing that. Except this one is much\nnicer for the case where you just want to check where you are. So doing a git diff-index --cached is basically very useful when you are\nasking yourself \"what have I already marked for being committed, and\nwhat’s the difference to a previous tree\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "NON-CACHED MODE The \"non-cached\" mode takes a different approach, and is potentially\nthe more useful of the two in that what it does can’t be emulated with\na git write-tree + git diff-tree . Thus that’s the default mode.\nThe non-cached version asks the question: show me the differences between HEAD and the currently checked out\ntree - index contents _and_ files that aren't up to date which is obviously a very useful question too, since that tells you what\nyou could commit. Again, the output matches the git diff-tree -r output to a tee, but with a twist. The twist is that if some file doesn’t match the index, we don’t have\na backing store thing for it, and we use the magic \"all-zero\" sha1 to\nshow that. So let’s say that you have edited kernel/sched.c , but\nhave not actually done a git update-index on it yet - there is no\n\"object\" associated with the new state, and you get: torvalds@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD\n:100644 100644 7476bb5ba 000000000 M\tkernel/sched.c i.e., it shows that the tree has changed, and that kernel/sched.c is\nnot up to date and may contain new stuff. The all-zero sha1 means that to\nget the real diff, you need to look at the object in the working directory\ndirectly rather than do an object-to-object diff. Note As with other commands of this type, git diff-index does not\nactually look at the contents of the file at all. So maybe kernel/sched.c hasn’t actually changed, and it’s just that you\ntouched it. In either case, it’s a note that you need to git update-index it to make the index be in sync. Note You can have a mixture of files show up as \"has been updated\"\nand \"is still dirty in the working directory\" together. You can always\ntell which file is in which state, since the \"has been updated\" ones\nshow a valid sha1, and the \"not in sync with the index\" ones will\nalways have the special all-zero sha1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "NAME git-for-each-ref - Output information on each ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "SYNOPSIS git for-each-ref [--count=<count>] [--shell|--perl|--python|--tcl]\n\t\t   [(--sort=<key>)…​] [--format=<format>]\n\t\t   [--include-root-refs] [ --stdin | <pattern>…​ ]\n\t\t   [--points-at=<object>]\n\t\t   [--merged[=<object>]] [--no-merged[=<object>]]\n\t\t   [--contains[=<object>]] [--no-contains[=<object>]]\n\t\t   [--exclude=<pattern> …​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "DESCRIPTION Iterate over all refs that match <pattern> and show them\naccording to the given <format> , after sorting them according\nto the given set of <key> .  If <count> is given, stop after\nshowing that many refs.  The interpolated values in <format> can optionally be quoted as string literals in the specified\nhost language allowing their direct evaluation in that language."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  <pattern>…​"}, {"role": "assistant", "content": "If one or more patterns are given, only refs are shown that\nmatch against at least one pattern, either using fnmatch(3) or\nliterally, in the latter case matching completely or from the\nbeginning up to a slash."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --stdin"}, {"role": "assistant", "content": "If --stdin is supplied, then the list of patterns is read from\nstandard input instead of from the argument list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --count=<count>"}, {"role": "assistant", "content": "By default the command shows all refs that match <pattern> .  This option makes it stop after showing\nthat many refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --sort=<key>"}, {"role": "assistant", "content": "A field name to sort on.  Prefix - to sort in\ndescending order of the value.  When unspecified, refname is used.  You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --format=<format>"}, {"role": "assistant", "content": "A string that interpolates %(fieldname) from a ref being shown and\nthe object it points at. In addition, the string literal %% renders as % and %xx - where xx are hex digits - renders as\nthe character with hex code xx . For example, %00 interpolates to \\0 (NUL), %09 to \\t (TAB), and %0a to \\n (LF). When unspecified, <format> defaults to %(objectname) SPC %(objecttype)\nTAB %(refname) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --color[=<when>]"}, {"role": "assistant", "content": "Respect any colors specified in the --format option. The <when> field must be one of always , never , or auto (if <when> is absent, behave as if always was given)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --shell  --perl  --python  --tcl"}, {"role": "assistant", "content": "If given, strings that substitute %(fieldname) placeholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --points-at=<object>"}, {"role": "assistant", "content": "Only list refs which points at the given object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --merged[=<object>]"}, {"role": "assistant", "content": "Only list refs whose tips are reachable from the\nspecified commit (HEAD if not specified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --no-merged[=<object>]"}, {"role": "assistant", "content": "Only list refs whose tips are not reachable from the\nspecified commit (HEAD if not specified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --contains[=<object>]"}, {"role": "assistant", "content": "Only list refs which contain the specified commit (HEAD if not\nspecified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --no-contains[=<object>]"}, {"role": "assistant", "content": "Only list refs which don’t contain the specified commit (HEAD\nif not specified)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --ignore-case"}, {"role": "assistant", "content": "Sorting and filtering refs are case insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --omit-empty"}, {"role": "assistant", "content": "Do not print a newline after formatted refs where the format expands\nto the empty string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --exclude=<pattern>"}, {"role": "assistant", "content": "If one or more patterns are given, only refs which do not match\nany excluded pattern(s) are shown. Matching is done using the\nsame rules as <pattern> above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  --include-root-refs"}, {"role": "assistant", "content": "List root refs (HEAD and pseudorefs) apart from regular refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  refname"}, {"role": "assistant", "content": "The name of the ref (the part after $GIT_DIR/).\nFor a non-ambiguous short name of the ref append :short .\nThe option core.warnAmbiguousRefs is used to select the strict\nabbreviation mode. If lstrip=<N> ( rstrip=<N> ) is appended, strips <N> slash-separated path components from the front (back) of the refname\n(e.g. %(refname:lstrip=2) turns refs/tags/foo into foo and %(refname:rstrip=2) turns refs/tags/foo into refs ).\nIf <N> is a negative number, strip as many path components as\nnecessary from the specified end to leave -<N> path components\n(e.g. %(refname:lstrip=-2) turns refs/tags/foo into tags/foo and %(refname:rstrip=-1) turns refs/tags/foo into refs ). When the ref does not have\nenough components, the result becomes an empty string if\nstripping with positive <N>, or it becomes the full refname if\nstripping with negative <N>.  Neither is an error. strip can be used as a synonym to lstrip ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  objecttype"}, {"role": "assistant", "content": "The type of the object ( blob , tree , commit , tag )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  objectsize"}, {"role": "assistant", "content": "The size of the object (the same as git cat-file -s reports).\nAppend :disk to get the size, in bytes, that the object takes up on\ndisk. See the note about on-disk sizes in the CAVEATS section below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  objectname"}, {"role": "assistant", "content": "The object name (aka SHA-1).\nFor a non-ambiguous abbreviation of the object name append :short .\nFor an abbreviation of the object name with desired length append :short=<length> , where the minimum length is MINIMUM_ABBREV. The\nlength may be exceeded to ensure unique object names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  deltabase"}, {"role": "assistant", "content": "This expands to the object name of the delta base for the\ngiven object, if it is stored as a delta.  Otherwise it\nexpands to the null object name (all zeroes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  upstream"}, {"role": "assistant", "content": "The name of a local ref which can be considered “upstream”\nfrom the displayed ref. Respects :short , :lstrip and :rstrip in the same way as refname above.  Additionally\nrespects :track to show \"[ahead N, behind M]\" and :trackshort to show the terse version: \">\" (ahead), \"<\"\n(behind), \"<>\" (ahead and behind), or \"=\" (in sync). :track also prints \"[gone]\" whenever unknown upstream ref is\nencountered. Append :track,nobracket to show tracking\ninformation without brackets (i.e \"ahead N, behind M\"). For any remote-tracking branch %(upstream) , %(upstream:remotename) and %(upstream:remoteref) refer to the name of the remote and the\nname of the tracked remote ref, respectively. In other words, the\nremote-tracking branch can be updated explicitly and individually by\nusing the refspec %(upstream:remoteref):%(upstream) to fetch from %(upstream:remotename) . Has no effect if the ref does not have tracking information associated\nwith it.  All the options apart from nobracket are mutually exclusive,\nbut if used together the last option is selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  push"}, {"role": "assistant", "content": "The name of a local ref which represents the @{push} location for the displayed ref. Respects :short , :lstrip , :rstrip , :track , :trackshort , :remotename , and :remoteref options as upstream does. Produces an empty string if no @{push} ref is configured."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  HEAD"}, {"role": "assistant", "content": "* if HEAD matches current ref (the checked out branch), ' '\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  color"}, {"role": "assistant", "content": "Change output color. Followed by :<colorname> , where color\nnames are described under Values in the \"CONFIGURATION FILE\"\nsection of git-config .  For example, %(color:bold red) ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  align"}, {"role": "assistant", "content": "Left-, middle-, or right-align the content between\n%(align:…​) and %(end). The \"align:\" is followed by width=<width> and position=<position> in any order\nseparated by a comma, where the <position> is either left,\nright or middle, default being left and <width> is the total\nlength of the content with alignment. For brevity, the\n\"width=\" and/or \"position=\" prefixes may be omitted, and bare\n<width> and <position> used instead.  For instance, %(align:<width>,<position>) . If the contents length is more\nthan the width then no alignment is performed. If used with --quote everything in between %(align:…​) and %(end) is\nquoted, but if nested then only the topmost level performs\nquoting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  if"}, {"role": "assistant", "content": "Used as %(if)…​%(then)…​%(end) or\n%(if)…​%(then)…​%(else)…​%(end).  If there is an atom with\nvalue or string literal after the %(if) then everything after\nthe %(then) is printed, else if the %(else) atom is used, then\neverything after %(else) is printed. We ignore space when\nevaluating the string before %(then), this is useful when we\nuse the %(HEAD) atom which prints either \"*\" or \" \" and we\nwant to apply the if condition only on the HEAD ref.\nAppend \":equals=<string>\" or \":notequals=<string>\" to compare\nthe value between the %(if:…​) and %(then) atoms with the\ngiven string."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  symref"}, {"role": "assistant", "content": "The ref which the given symbolic ref refers to. If not a\nsymbolic ref, nothing is printed. Respects the :short , :lstrip and :rstrip options in the same way as refname above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature"}, {"role": "assistant", "content": "The GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:grade"}, {"role": "assistant", "content": "Show \"G\" for a good (valid) signature, \"B\" for a bad\nsignature, \"U\" for a good signature with unknown validity, \"X\"\nfor a good signature that has expired, \"Y\" for a good\nsignature made by an expired key, \"R\" for a good signature\nmade by a revoked key, \"E\" if the signature cannot be\nchecked (e.g. missing key) and \"N\" for no signature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:signer"}, {"role": "assistant", "content": "The signer of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:key"}, {"role": "assistant", "content": "The key of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:fingerprint"}, {"role": "assistant", "content": "The fingerprint of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:primarykeyfingerprint"}, {"role": "assistant", "content": "The primary key fingerprint of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:trustlevel"}, {"role": "assistant", "content": "The trust level of the GPG signature of a commit. Possible\noutputs are ultimate , fully , marginal , never and undefined ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  worktreepath"}, {"role": "assistant", "content": "The absolute path to the worktree in which the ref is checked\nout, if it is checked out in any linked worktree. Empty string\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  ahead-behind:<committish>"}, {"role": "assistant", "content": "Two integers, separated by a space, demonstrating the number of\ncommits ahead and behind, respectively, when comparing the output\nref to the <committish> specified in the format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  describe[:options]"}, {"role": "assistant", "content": "A human-readable name, like git-describe ;\nempty string for undescribable commits. The describe string may\nbe followed by a colon and one or more comma-separated options. tags=<bool-value> Instead of only considering annotated tags, consider\nlightweight tags as well; see the corresponding option in git-describe for details. abbrev=<number> Use at least <number> hexadecimal digits; see the corresponding\noption in git-describe for details. match=<pattern> Only consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details. exclude=<pattern> Do not consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  tags=<bool-value>"}, {"role": "assistant", "content": "Instead of only considering annotated tags, consider\nlightweight tags as well; see the corresponding option in git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  abbrev=<number>"}, {"role": "assistant", "content": "Use at least <number> hexadecimal digits; see the corresponding\noption in git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  match=<pattern>"}, {"role": "assistant", "content": "Only consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  exclude=<pattern>"}, {"role": "assistant", "content": "Do not consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  raw:size"}, {"role": "assistant", "content": "The raw data size of the object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:size"}, {"role": "assistant", "content": "The size in bytes of the commit or tag message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:subject"}, {"role": "assistant", "content": "The first paragraph of the message, which typically is a\nsingle line, is taken as the \"subject\" of the commit or the\ntag message.\nInstead of contents:subject , field subject can also be used to\nobtain same results. :sanitize can be appended to subject for\nsubject line suitable for filename."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:body"}, {"role": "assistant", "content": "The remainder of the commit or the tag message that follows\nthe \"subject\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:signature"}, {"role": "assistant", "content": "The optional GPG signature of the tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:lines=N"}, {"role": "assistant", "content": "The first N lines of the message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "EXAMPLES An example directly producing formatted text.  Show the most recent\n3 tagged commits: #!/bin/sh\n\ngit for-each-ref --count=3 --sort='-*authordate' \\\n--format='From: %(*authorname) %(*authoremail)\nSubject: %(*subject)\nDate: %(*authordate)\nRef: %(*refname)\n\n%(*body)\n' 'refs/tags' A simple example showing the use of shell eval on the output,\ndemonstrating the use of --shell.  List the prefixes of all heads: #!/bin/sh\n\ngit for-each-ref --shell --format=\"ref=%(refname)\" refs/heads | \\\nwhile read entry\ndo\n\teval \"$entry\"\n\techo `dirname $ref`\ndone A bit more elaborate report on tags, demonstrating that the format\nmay be an entire script: #!/bin/sh\n\nfmt='\n\tr=%(refname)\n\tt=%(*objecttype)\n\tT=${r#refs/tags/}\n\n\to=%(*objectname)\n\tn=%(*authorname)\n\te=%(*authoremail)\n\ts=%(*subject)\n\td=%(*authordate)\n\tb=%(*body)\n\n\tkind=Tag\n\tif test \"z$t\" = z\n\tthen\n\t\t# could be a lightweight tag\n\t\tt=%(objecttype)\n\t\tkind=\"Lightweight tag\"\n\t\to=%(objectname)\n\t\tn=%(authorname)\n\t\te=%(authoremail)\n\t\ts=%(subject)\n\t\td=%(authordate)\n\t\tb=%(body)\n\tfi\n\techo \"$kind $T points at a $t object $o\"\n\tif test \"z$t\" = zcommit\n\tthen\n\t\techo \"The commit was authored by $n $e\nat $d, and titled\n\n    $s\n\nIts message reads as:\n\"\n\t\techo \"$b\" | sed -e \"s/^/    /\"\n\t\techo\n\tfi\n'\n\neval=`git for-each-ref --shell --format=\"$fmt\" \\\n\t--sort='*objecttype' \\\n\t--sort=-taggerdate \\\n\trefs/tags`\neval \"$eval\" An example to show the usage of %(if)…​%(then)…​%(else)…​%(end).\nThis prefixes the current branch with a star. git for-each-ref --format=\"%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)\" refs/heads/ An example to show the usage of %(if)…​%(then)…​%(end).\nThis prints the authorname, if present. git for-each-ref --format=\"%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "CAVEATS Note that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack. Note also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy’s size or delta base\nwill be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "NOTES When combining multiple --contains and --no-contains filters, only\nreferences that contain at least one of the --contains commits and\ncontain none of the --no-contains commits are shown. When combining multiple --merged and --no-merged filters, only\nreferences that are reachable from at least one of the --merged commits and from none of the --no-merged commits are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file"}, {"role": "assistant", "content": "NAME git-hash-object - Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file"}, {"role": "assistant", "content": "SYNOPSIS git hash-object [-t <type>] [-w] [--path=<file> | --no-filters]\n\t\t[--stdin [--literally]] [--] <file>…​ git hash-object [-t <type>] [-w] --stdin-paths [--no-filters]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file"}, {"role": "assistant", "content": "DESCRIPTION Computes the object ID value for an object with specified type\nwith the contents of the named file (which can be outside of the\nwork tree), and optionally writes the resulting object into the\nobject database.  Reports its object ID to its standard output.\nWhen <type> is not specified, it defaults to \"blob\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  -t <type>"}, {"role": "assistant", "content": "Specify the type of object to be created (default: \"blob\"). Possible\nvalues are commit , tree , blob , and tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  -w"}, {"role": "assistant", "content": "Actually write the object into the object database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  --stdin"}, {"role": "assistant", "content": "Read the object from standard input instead of from a file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  --stdin-paths"}, {"role": "assistant", "content": "Read file names from the standard input, one per line, instead\nof from the command-line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  --path"}, {"role": "assistant", "content": "Hash object as if it were located at the given path. The location of\nthe file does not directly influence the hash value, but the path is\nused to determine which Git filters should be applied to the object\nbefore it can be placed in the object database.  As a result of\napplying filters, the actual blob put into the object database may\ndiffer from the given file. This option is mainly useful for hashing\ntemporary files located outside of the working directory or files\nread from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  --no-filters"}, {"role": "assistant", "content": "Hash the contents as is, ignoring any input filter that would\nhave been chosen by the attributes mechanism, including the end-of-line\nconversion. If the file is read from standard input then this\nis always implied, unless the --path option is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-hash-object - Compute object ID and optionally create an object from a file  --literally"}, {"role": "assistant", "content": "Allow --stdin to hash any garbage into a loose object which might not\notherwise pass standard object parsing or git-fsck checks. Useful for\nstress-testing Git itself or reproducing characteristics of corrupt or\nbogus objects encountered in the wild."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree"}, {"role": "assistant", "content": "NAME git-ls-files - Show information about files in the index and the working tree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree"}, {"role": "assistant", "content": "SYNOPSIS git ls-files [-z] [-t] [-v] [-f]\n\t\t[-c|--cached] [-d|--deleted] [-o|--others] [-i|--ignored]\n\t\t[-s|--stage] [-u|--unmerged] [-k|--killed] [-m|--modified]\n\t\t[--resolve-undo]\n\t\t[--directory [--no-empty-directory]] [--eol]\n\t\t[--deduplicate]\n\t\t[-x <pattern>|--exclude=<pattern>]\n\t\t[-X <file>|--exclude-from=<file>]\n\t\t[--exclude-per-directory=<file>]\n\t\t[--exclude-standard]\n\t\t[--error-unmatch] [--with-tree=<tree-ish>]\n\t\t[--full-name] [--recurse-submodules]\n\t\t[--abbrev[=<n>]] [--format=<format>] [--] [<file>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree"}, {"role": "assistant", "content": "DESCRIPTION This command merges the file listing in the index with the actual working\ndirectory list, and shows different combinations of the two. Several flags can be used to determine which files are\nshown, and each file may be printed multiple times if there are\nmultiple entries in the index or if multiple statuses are applicable for\nthe relevant file selection options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -c  --cached"}, {"role": "assistant", "content": "Show all files cached in Git’s index, i.e. all tracked files.\n(This is the default if no -c/-s/-d/-o/-u/-k/-m/--resolve-undo\noptions are specified.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -d  --deleted"}, {"role": "assistant", "content": "Show files with an unstaged deletion"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -m  --modified"}, {"role": "assistant", "content": "Show files with an unstaged modification (note that an unstaged\ndeletion also counts as an unstaged modification)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -o  --others"}, {"role": "assistant", "content": "Show other (i.e. untracked) files in the output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -i  --ignored"}, {"role": "assistant", "content": "Show only ignored files in the output.  Must be used with\neither an explicit -c or -o .  When showing files in the\nindex (i.e. when used with -c ), print only those files\nmatching an exclude pattern.  When showing \"other\" files\n(i.e. when used with -o ), show only those matched by an\nexclude pattern.  Standard ignore rules are not automatically\nactivated; therefore, at least one of the --exclude* options\nis required."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -s  --stage"}, {"role": "assistant", "content": "Show staged contents' mode bits, object name and stage number in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --directory"}, {"role": "assistant", "content": "If a whole directory is classified as \"other\", show just its\nname (with a trailing slash) and not its whole contents.\nHas no effect without -o/--others."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --no-empty-directory"}, {"role": "assistant", "content": "Do not list empty directories. Has no effect without --directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -u  --unmerged"}, {"role": "assistant", "content": "Show information about unmerged files in the output, but do\nnot show any other tracked files (forces --stage, overrides\n--cached)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -k  --killed"}, {"role": "assistant", "content": "Show untracked files on the filesystem that need to be removed\ndue to file/directory conflicts for tracked files to be able to\nbe written to the filesystem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --resolve-undo"}, {"role": "assistant", "content": "Show files having resolve-undo information in the index\ntogether with their resolve-undo information.  (resolve-undo\ninformation is what is used to implement \"git checkout -m\n$PATH\", i.e. to recreate merge conflicts that were\naccidentally resolved)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -z"}, {"role": "assistant", "content": "\\0 line termination on output and do not quote filenames.\nSee OUTPUT below for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --deduplicate"}, {"role": "assistant", "content": "When only filenames are shown, suppress duplicates that may\ncome from having multiple stages during a merge, or giving --deleted and --modified option at the same time.\nWhen any of the -t , --unmerged , or --stage option is\nin use, this option has no effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -x <pattern>  --exclude=<pattern>"}, {"role": "assistant", "content": "Skip untracked files matching pattern.\nNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\nbelow for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -X <file>  --exclude-from=<file>"}, {"role": "assistant", "content": "Read exclude patterns from <file>; 1 per line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --exclude-per-directory=<file>"}, {"role": "assistant", "content": "Read additional exclude patterns that apply only to the\ndirectory and its subdirectories in <file>.  If you are\ntrying to emulate the way Porcelain commands work, using\nthe --exclude-standard option instead is easier and more\nthorough."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --exclude-standard"}, {"role": "assistant", "content": "Add the standard Git exclusions: .git/info/exclude, .gitignore\nin each directory, and the user’s global exclusion file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --error-unmatch"}, {"role": "assistant", "content": "If any <file> does not appear in the index, treat this as an\nerror (return 1)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --with-tree=<tree-ish>"}, {"role": "assistant", "content": "When using --error-unmatch to expand the user supplied\n<file> (i.e. path pattern) arguments to paths, pretend\nthat paths which were removed in the index since the\nnamed <tree-ish> are still present.  Using this option\nwith -s or -u options does not make any sense."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -t"}, {"role": "assistant", "content": "Show status tags together with filenames.  Note that for\nscripting purposes, git-status --porcelain and git-diff-files --name-status are almost always\nsuperior alternatives; users should look at git-status --short or git-diff --name-status for more user-friendly alternatives. This option provides a reason for showing each filename, in the form\nof a status tag (which is followed by a space and then the filename).\nThe status tags are all single characters from the following list: H tracked file that is not either unmerged or skip-worktree S tracked file that is skip-worktree M tracked file that is unmerged R tracked file with unstaged removal/deletion C tracked file with unstaged modification/change K untracked paths which are part of file/directory conflicts\nwhich prevent checking out tracked files ? untracked file U file with resolve-undo information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -v"}, {"role": "assistant", "content": "Similar to -t , but use lowercase letters for files\nthat are marked as assume unchanged (see git-update-index )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -f"}, {"role": "assistant", "content": "Similar to -t , but use lowercase letters for files\nthat are marked as fsmonitor valid (see git-update-index )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --full-name"}, {"role": "assistant", "content": "When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --recurse-submodules"}, {"role": "assistant", "content": "Recursively calls ls-files on each active submodule in the repository.\nCurrently there is only support for the --cached and --stage modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nNon default number of digits can be specified with --abbrev=<n>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --debug"}, {"role": "assistant", "content": "After each line that describes a file, add more data about its\ncache entry.  This is intended to show as much information as\npossible for manual inspection; the exact format may change at\nany time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --eol"}, {"role": "assistant", "content": "Show <eolinfo> and <eolattr> of files.\n<eolinfo> is the file content identification used by Git when\nthe \"text\" attribute is \"auto\" (or not set and core.autocrlf is not false).\n<eolinfo> is either \"-text\", \"none\", \"lf\", \"crlf\", \"mixed\" or \"\". \"\" means the file is not a regular file, it is not in the index or\nnot accessible in the working tree. <eolattr> is the attribute that is used when checking out or committing,\nit is either \"\", \"-text\", \"text\", \"text=auto\", \"text eol=lf\", \"text eol=crlf\".\nSince Git 2.10 \"text=auto eol=lf\" and \"text=auto eol=crlf\" are supported. Both the <eolinfo> in the index (\"i/<eolinfo>\")\nand in the working tree (\"w/<eolinfo>\") are shown for regular files,\nfollowed by the  (\"attr/<eolattr>\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --sparse"}, {"role": "assistant", "content": "If the index is sparse, show the sparse directories without expanding\nto the contained files. Sparse directories will be shown with a\ntrailing slash, such as \"x/\" for a sparse directory \"x\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --format=<format>"}, {"role": "assistant", "content": "A string that interpolates %(fieldname) from the result being shown.\nIt also interpolates %% to % , and %xx where xx are hex digits\ninterpolates to character with hex code xx ; for example %00 interpolates to \\0 (NUL), %09 to \\t (TAB) and %0a to \\n (LF).\n--format cannot be combined with -s , -o , -k , -t , --resolve-undo and --eol ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  <file>"}, {"role": "assistant", "content": "Files to show. If no files are given all files which match the other\nspecified criteria are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  H"}, {"role": "assistant", "content": "tracked file that is not either unmerged or skip-worktree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  S"}, {"role": "assistant", "content": "tracked file that is skip-worktree"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  M"}, {"role": "assistant", "content": "tracked file that is unmerged"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  R"}, {"role": "assistant", "content": "tracked file with unstaged removal/deletion"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  C"}, {"role": "assistant", "content": "tracked file with unstaged modification/change"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  K"}, {"role": "assistant", "content": "untracked paths which are part of file/directory conflicts\nwhich prevent checking out tracked files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  ?"}, {"role": "assistant", "content": "untracked file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  U"}, {"role": "assistant", "content": "file with resolve-undo information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree"}, {"role": "assistant", "content": "OUTPUT git ls-files just outputs the filenames unless --stage is specified in\nwhich case it outputs: [<tag> ]<mode> <object> <stage> <file> git ls-files --eol will show\n\ti/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file> git ls-files --unmerged and git ls-files --stage can be used to examine\ndetailed information on unmerged paths. For an unmerged path, instead of recording a single mode/SHA-1 pair,\nthe index records up to three such pairs; one from tree O in stage\n1, A in stage 2, and B in stage 3.  This information can be used by\nthe user (or the porcelain) to see what should eventually be recorded at the\npath. (see git-read-tree for more information on state) Without the -z option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath (see git-config ).  Using -z the filename is output\nverbatim and the line is terminated by a NUL byte. It is possible to print in a custom format by using the --format option, which is able to interpolate different fields using\na %(fieldname) notation. For example, if you only care about the\n\"objectname\" and \"path\" fields, you can execute with a specific\n\"--format\" like git ls-files --format='%(objectname) %(path)'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  objectmode"}, {"role": "assistant", "content": "The mode of the file which is recorded in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  objecttype"}, {"role": "assistant", "content": "The object type of the file which is recorded in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  objectname"}, {"role": "assistant", "content": "The name of the file which is recorded in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  objectsize[:padded]"}, {"role": "assistant", "content": "The object size of the file which is recorded in the index\n(\"-\" if the object is a commit or tree ).\nIt also supports a padded format of size with \"%(objectsize:padded)\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  stage"}, {"role": "assistant", "content": "The stage of the file which is recorded in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  eolinfo:index  eolinfo:worktree"}, {"role": "assistant", "content": "The <eolinfo> (see the description of the --eol option) of\nthe contents in the index or in the worktree for the path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  eolattr"}, {"role": "assistant", "content": "The <eolattr> (see the description of the --eol option)\nthat applies to the path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  path"}, {"role": "assistant", "content": "The pathname of the file which is recorded in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree"}, {"role": "assistant", "content": "EXCLUDE PATTERNS git ls-files can use a list of \"exclude patterns\" when\ntraversing the directory tree and finding files to show when the\nflags --others or --ignored are specified. gitignore specifies the format of exclude patterns. These exclude patterns can be specified from the following places,\nin order: The command-line flag --exclude=<pattern> specifies a\nsingle pattern.  Patterns are ordered in the same order\nthey appear in the command line. The command-line flag --exclude-from=<file> specifies a\nfile containing a list of patterns.  Patterns are ordered\nin the same order they appear in the file. The command-line flag --exclude-per-directory=<name> specifies\na name of the file in each directory git ls-files examines, normally .gitignore .  Files in deeper\ndirectories take precedence.  Patterns are ordered in the\nsame order they appear in the files. A pattern specified on the command line with --exclude or read\nfrom the file specified with --exclude-from is relative to the\ntop of the directory tree.  A pattern read from a file specified\nby --exclude-per-directory is relative to the directory that the\npattern file appears in. Generally, you should be able to use --exclude-standard when you\nwant the exclude rules applied the same way as what Porcelain\ncommands do.  To emulate what --exclude-standard specifies, you\ncan give --exclude-per-directory=.gitignore , and then specify: The file specified by the core.excludesfile configuration\nvariable, if exists, or the $XDG_CONFIG_HOME/git/ignore file. The $GIT_DIR/info/exclude file. via the --exclude-from= option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object"}, {"role": "assistant", "content": "NAME git-ls-tree - List the contents of a tree object"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object"}, {"role": "assistant", "content": "SYNOPSIS git ls-tree [-d] [-r] [-t] [-l] [-z]\n\t    [--name-only] [--name-status] [--object-only] [--full-name] [--full-tree] [--abbrev[=<n>]] [--format=<format>]\n\t    <tree-ish> [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object"}, {"role": "assistant", "content": "DESCRIPTION Lists the contents of a given tree object, like what \"/bin/ls -a\" does\nin the current working directory.  Note that: the behaviour is slightly different from that of \"/bin/ls\" in that the <path> denotes just a list of patterns to match, e.g. so specifying\ndirectory name (without -r ) will behave differently, and order of the\narguments does not matter. the behaviour is similar to that of \"/bin/ls\" in that the <path> is\ntaken as relative to the current working directory.  E.g. when you are\nin a directory sub that has a directory dir , you can run git\nls-tree -r HEAD dir to list the contents of the tree (that is sub/dir in HEAD ).  You don’t want to give a tree that is not at the\nroot level (e.g. git ls-tree -r HEAD:sub dir ) in this case, as that\nwould result in asking for sub/sub/dir in the HEAD commit.\nHowever, the current working directory can be ignored by passing\n--full-tree option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  <tree-ish>"}, {"role": "assistant", "content": "Id of a tree-ish."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  -d"}, {"role": "assistant", "content": "Show only the named tree entry itself, not its children."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  -r"}, {"role": "assistant", "content": "Recurse into sub-trees."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  -t"}, {"role": "assistant", "content": "Show tree entries even when going to recurse them. Has no effect\nif -r was not passed. -d implies -t ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  -l  --long"}, {"role": "assistant", "content": "Show object size of blob (file) entries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  -z"}, {"role": "assistant", "content": "\\0 line termination on output and do not quote filenames.\nSee OUTPUT FORMAT below for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --name-only  --name-status"}, {"role": "assistant", "content": "List only filenames (instead of the \"long\" output), one per line.\nCannot be combined with --object-only ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --object-only"}, {"role": "assistant", "content": "List only names of the objects, one per line. Cannot be combined\nwith --name-only or --name-status .\nThis is equivalent to specifying --format='%(objectname)' , but\nfor both this option and that exact format the command takes a\nhand-optimized codepath instead of going through the generic\nformatting mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nNon default number of digits can be specified with --abbrev=<n>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --full-name"}, {"role": "assistant", "content": "Instead of showing the path names relative to the current working\ndirectory, show the full path names."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --full-tree"}, {"role": "assistant", "content": "Do not limit the listing to the current working directory.\nImplies --full-name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  --format=<format>"}, {"role": "assistant", "content": "A string that interpolates %(fieldname) from the result\nbeing shown. It also interpolates %% to % , and %xNN where NN are hex digits interpolates to character\nwith hex code NN ; for example %x00 interpolates to \\0 (NUL), %x09 to \\t (TAB) and %x0a to \\n (LF).\nWhen specified, --format cannot be combined with other\nformat-altering options, including --long , --name-only and --object-only ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  [<path>…​]"}, {"role": "assistant", "content": "When paths are given, show them (note that this isn’t really raw\npathnames, but rather a list of patterns to match).  Otherwise\nimplicitly uses the root level of the tree as the sole path argument."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object"}, {"role": "assistant", "content": "Output Format The output format of ls-tree is determined by either the --format option, or other format-altering options such as --name-only etc.\n(see --format above). The use of certain --format directives is equivalent to using those\noptions, but invoking the full formatting machinery can be slower than\nusing an appropriate formatting option. In cases where the --format would exactly map to an existing option ls-tree will use the appropriate faster path. Thus the default format\nis equivalent to: %(objectmode) %(objecttype) %(objectname)%x09%(path) This output format is compatible with what --index-info --stdin of git update-index expects. When the -l option is used, format changes to %(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path) Object size identified by <objectname> is given in bytes, and right-justified\nwith minimum width of 7 characters.  Object size is given only for blobs\n(file) entries; for other entries - character is used in place of size. Without the -z option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath (see git-config ).  Using -z the filename is output\nverbatim and the line is terminated by a NUL byte. Customized format: It is possible to print in a custom format by using the --format option,\nwhich is able to interpolate different fields using a %(fieldname) notation.\nFor example, if you only care about the \"objectname\" and \"path\" fields, you\ncan execute with a specific \"--format\" like git ls-tree --format='%(objectname) %(path)' <tree-ish>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  objectmode"}, {"role": "assistant", "content": "The mode of the object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  objecttype"}, {"role": "assistant", "content": "The type of the object ( commit , blob or tree )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  objectname"}, {"role": "assistant", "content": "The name of the object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  objectsize[:padded]"}, {"role": "assistant", "content": "The size of a blob object (\"-\" if it’s a commit or tree ).\nIt also supports a padded format of size with \"%(objectsize:padded)\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object  path"}, {"role": "assistant", "content": "The pathname of the object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "NAME git-merge-base - Find as good common ancestors as possible for a merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "SYNOPSIS git merge-base [-a | --all] <commit> <commit>…​ git merge-base [-a | --all] --octopus <commit>…​ git merge-base --is-ancestor <commit> <commit> git merge-base --independent <commit>…​ git merge-base --fork-point <ref> [<commit>]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "DESCRIPTION git merge-base finds the best common ancestor(s) between two commits to use\nin a three-way merge.  One common ancestor is better than another common\nancestor if the latter is an ancestor of the former.  A common ancestor\nthat does not have any better common ancestor is a best common\nancestor , i.e. a merge base .  Note that there can be more than one\nmerge base for a pair of commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --octopus"}, {"role": "assistant", "content": "Compute the best common ancestors of all supplied commits,\nin preparation for an n-way merge.  This mimics the behavior\nof git show-branch --merge-base ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --independent"}, {"role": "assistant", "content": "Instead of printing merge bases, print a minimal subset of\nthe supplied commits with the same ancestors.  In other words,\namong the commits given, list those which cannot be reached\nfrom any other.  This mimics the behavior of git show-branch\n--independent ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --is-ancestor"}, {"role": "assistant", "content": "Check if the first <commit> is an ancestor of the second <commit>,\nand exit with status 0 if true, or with status 1 if not.\nErrors are signaled by a non-zero status that is not 1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --fork-point"}, {"role": "assistant", "content": "Find the point at which a branch (or any history that leads\nto <commit>) forked from another branch (or any reference)\n<ref>. This does not just look for the common ancestor of\nthe two commits, but also takes into account the reflog of\n<ref> to see if the history leading to <commit> forked from\nan earlier incarnation of the branch <ref> (see discussion\nof this mode below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  -a  --all"}, {"role": "assistant", "content": "Output all merge bases for the commits, instead of just one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "DISCUSSION Given two commits A and B , git merge-base A B will output a commit\nwhich is reachable from both A and B through the parent relationship. For example, with this topology: o---o---o---B\n\t/\n---o---1---o---o---o---A the merge base between A and B is 1 . Given three commits A , B , and C , git merge-base A B C will compute the\nmerge base between A and a hypothetical commit M , which is a merge\nbetween B and C .  For example, with this topology: o---o---o---o---C\n      /\n     /   o---o---o---B\n    /   /\n---2---1---o---o---o---A the result of git merge-base A B C is 1 .  This is because the\nequivalent topology with a merge commit M between B and C is: o---o---o---o---o\n      /                 \\\n     /   o---o---o---o---M\n    /   /\n---2---1---o---o---o---A and the result of git merge-base A M is 1 .  Commit 2 is also a\ncommon ancestor between A and M , but 1 is a better common ancestor,\nbecause 2 is an ancestor of 1 .  Hence, 2 is not a merge base. The result of git merge-base --octopus A B C is 2 , because 2 is\nthe best common ancestor of all commits. When the history involves criss-cross merges, there can be more than one best common ancestor for two commits.  For example, with this topology: ---1---o---A\n    \\ /\n     X\n    / \\\n---2---o---o---B both 1 and 2 are merge bases of A and B.  Neither one is better than\nthe other (both are best merge bases).  When the --all option is not given,\nit is unspecified which best one is output. A common idiom to check \"fast-forward-ness\" between two commits A\nand B is (or at least used to be) to compute the merge base between\nA and B, and check if it is the same as A, in which case, A is an\nancestor of B.  You will see this idiom used often in older scripts. A=$(git rev-parse --verify A)\nif test \"$A\" = \"$(git merge-base A B)\"\nthen\n\t... A is an ancestor of B ...\nfi In modern git, you can say this in a more direct way: if git merge-base --is-ancestor A B\nthen\n\t... A is an ancestor of B ...\nfi instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "Discussion on fork-point mode After working on the topic branch created with git switch -c\ntopic origin/master , the history of remote-tracking branch origin/master may have been rewound and rebuilt, leading to a\nhistory of this shape: o---B2\n\t\t/\n---o---o---B1--o---o---o---B (origin/master)\n\t\\\n\t B0\n\t  \\\n\t   D0---D1---D (topic) where origin/master used to point at commits B0, B1, B2 and now it\npoints at B, and your topic branch was started on top of it back\nwhen origin/master was at B0, and you built three commits, D0, D1,\nand D, on top of it.  Imagine that you now want to rebase the work\nyou did on the topic on top of the updated origin/master. In such a case, git merge-base origin/master topic would return the\nparent of B0 in the above picture, but B0^..D is not the range of\ncommits you would want to replay on top of B (it includes B0, which\nis not what you wrote; it is a commit the other side discarded when\nit moved its tip from B0 to B1). git merge-base --fork-point origin/master topic is designed to\nhelp in such a case.  It takes not only B but also B0, B1, and B2\n(i.e. old tips of the remote-tracking branches your repository’s\nreflog knows about) into account to see on which commit your topic\nbranch was built and finds B0, allowing you to replay only the\ncommits on your topic, excluding the commits the other side later\ndiscarded. Hence $ fork_point=$(git merge-base --fork-point origin/master topic) will find B0, and $ git rebase --onto origin/master $fork_point topic will replay D0, D1, and D on top of B to create a new history of this\nshape: o---B2\n\t\t/\n---o---o---B1--o---o---o---B (origin/master)\n\t\\                   \\\n\t B0                  D0'--D1'--D' (topic - updated)\n\t  \\\n\t   D0---D1---D (topic - old) A caveat is that older reflog entries in your repository may be\nexpired by git gc .  If B0 no longer appears in the reflog of the\nremote-tracking branch origin/master , the --fork-point mode\nobviously cannot find it and fails, avoiding to give a random and\nuseless result (such as the parent of B0, like the same command\nwithout the --fork-point option gives). Also, the remote-tracking branch you use the --fork-point mode\nwith must be the one your topic forked from its tip.  If you forked\nfrom an older commit than the tip, this mode would not find the fork\npoint (imagine in the above sample history B0 did not exist,\norigin/master started at B1, moved to B2 and then B, and you forked\nyour topic at origin/master^ when origin/master was B1; the shape of\nthe history would be the same as above, without B0, and the parent\nof B1 is what git merge-base origin/master topic correctly finds,\nbut the --fork-point mode will not, because it is not one of the\ncommits that used to be at the tip of origin/master)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge"}, {"role": "assistant", "content": "See also git-rev-list , git-show-branch , git-merge"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "NAME git-read-tree - Reads tree information into the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "SYNOPSIS git read-tree [(-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>)\n\t\t[-u | -i]] [--index-output=<file>] [--no-sparse-checkout]\n\t\t(--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "DESCRIPTION Reads the tree information given by <tree-ish> into the index,\nbut does not actually update any of the files it \"caches\". (see: git-checkout-index ) Optionally, it can merge a tree into the index, perform a\nfast-forward (i.e. 2-way) merge, or a 3-way merge, with the -m flag.  When used with -m , the -u flag causes it to also update\nthe files in the work tree with the result of the merge. Only trivial merges are done by git read-tree itself.  Only conflicting paths\nwill be in an unmerged state when git read-tree returns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -m"}, {"role": "assistant", "content": "Perform a merge, not just a read.  The command will\nrefuse to run if your index file has unmerged entries,\nindicating that you have not finished a previous merge you\nstarted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --reset"}, {"role": "assistant", "content": "Same as -m, except that unmerged entries are discarded instead\nof failing.  When used with -u , updates leading to loss of\nworking tree changes or untracked files or directories will not\nabort the operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -u"}, {"role": "assistant", "content": "After a successful merge, update the files in the work\ntree with the result of the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -i"}, {"role": "assistant", "content": "Usually a merge requires the index file as well as the\nfiles in the working tree to be up to date with the\ncurrent head commit, in order not to lose local\nchanges.  This flag disables the check with the working\ntree and is meant to be used when creating a merge of\ntrees that are not directly related to the current\nworking tree status into a temporary index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -n  --dry-run"}, {"role": "assistant", "content": "Check if the command would error out, without updating the index\nor the files in the working tree for real."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -v"}, {"role": "assistant", "content": "Show the progress of checking files out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --trivial"}, {"role": "assistant", "content": "Restrict three-way merge by git read-tree to happen\nonly if there is no file-level merging required, instead\nof resolving merge for trivial cases and leaving\nconflicting files unresolved in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --aggressive"}, {"role": "assistant", "content": "Usually a three-way merge by git read-tree resolves\nthe merge for really trivial cases and leaves other\ncases unresolved in the index, so that porcelains can\nimplement different merge policies.  This flag makes the\ncommand resolve a few more cases internally: when one side removes a path and the other side leaves the path\nunmodified.  The resolution is to remove that path. when both sides remove a path.  The resolution is to remove that path. when both sides add a path identically.  The resolution\nis to add that path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --prefix=<prefix>"}, {"role": "assistant", "content": "Keep the current index contents, and read the contents\nof the named tree-ish under the directory at <prefix> .\nThe command will refuse to overwrite entries that already\nexisted in the original index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --index-output=<file>"}, {"role": "assistant", "content": "Instead of writing the results out to $GIT_INDEX_FILE ,\nwrite the resulting index in the named file.  While the\ncommand is operating, the original index file is locked\nwith the same mechanism as usual.  The file must allow\nto be rename(2)ed into from a temporary file that is\ncreated next to the usual index file; typically this\nmeans it needs to be on the same filesystem as the index\nfile itself, and you need write permission to the\ndirectories the index file and index output file are\nlocated in."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --[no-]recurse-submodules"}, {"role": "assistant", "content": "Using --recurse-submodules will update the content of all active\nsubmodules according to the commit recorded in the superproject by\ncalling read-tree recursively, also setting the submodules' HEAD to be\ndetached at that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --no-sparse-checkout"}, {"role": "assistant", "content": "Disable sparse checkout support even if core.sparseCheckout is true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --empty"}, {"role": "assistant", "content": "Instead of reading tree object(s) into the index, just empty\nit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  -q  --quiet"}, {"role": "assistant", "content": "Quiet, suppress feedback messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  <tree-ish#>"}, {"role": "assistant", "content": "The id of the tree object(s) to be read/merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "MERGING If -m is specified, git read-tree can perform 3 kinds of\nmerge, a single tree merge if only 1 tree is given, a\nfast-forward merge with 2 trees, or a 3-way merge if 3 or more trees are\nprovided. Single Tree Merge If only 1 tree is specified, git read-tree operates as if the user did not\nspecify -m , except that if the original index has an entry for a\ngiven pathname, and the contents of the path match with the tree\nbeing read, the stat info from the index is used. (In other words, the\nindex’s stat()s take precedence over the merged tree’s). That means that if you do a git read-tree -m <newtree> followed by a git checkout-index -f -u -a , the git checkout-index only checks out\nthe stuff that really changed. This is used to avoid unnecessary false hits when git diff-files is\nrun after git read-tree . Two Tree Merge Typically, this is invoked as git read-tree -m $H $M , where $H\nis the head commit of the current repository, and $M is the head\nof a foreign tree, which is simply ahead of $H (i.e. we are in a\nfast-forward situation). When two trees are specified, the user is telling git read-tree the following: The current index and work tree is derived from $H, but\nthe user may have local changes in them since $H. The user wants to fast-forward to $M. In this case, the git read-tree -m $H $M command makes sure\nthat no local change is lost as the result of this \"merge\".\nHere are the \"carry forward\" rules, where \"I\" denotes the index,\n\"clean\" means that index and work tree coincide, and \"exists\"/\"nothing\"\nrefer to the presence of a path in the specified commit: I                   H        M        Result\n       -------------------------------------------------------\n     0  nothing             nothing  nothing  (does not happen)\n     1  nothing             nothing  exists   use M\n     2  nothing             exists   nothing  remove path from index\n     3  nothing             exists   exists,  use M if \"initial checkout\",\n\t\t\t\t     H == M   keep index otherwise\n\t\t\t\t     exists,  fail\n\t\t\t\t     H != M\n\n        clean I==H  I==M\n       ------------------\n     4  yes   N/A   N/A     nothing  nothing  keep index\n     5  no    N/A   N/A     nothing  nothing  keep index\n\n     6  yes   N/A   yes     nothing  exists   keep index\n     7  no    N/A   yes     nothing  exists   keep index\n     8  yes   N/A   no      nothing  exists   fail\n     9  no    N/A   no      nothing  exists   fail\n\n     10 yes   yes   N/A     exists   nothing  remove path from index\n     11 no    yes   N/A     exists   nothing  fail\n     12 yes   no    N/A     exists   nothing  fail\n     13 no    no    N/A     exists   nothing  fail\n\n\tclean (H==M)\n       ------\n     14 yes                 exists   exists   keep index\n     15 no                  exists   exists   keep index\n\n        clean I==H  I==M (H!=M)\n       ------------------\n     16 yes   no    no      exists   exists   fail\n     17 no    no    no      exists   exists   fail\n     18 yes   no    yes     exists   exists   keep index\n     19 no    no    yes     exists   exists   keep index\n     20 yes   yes   no      exists   exists   use M\n     21 no    yes   no      exists   exists   fail In all \"keep index\" cases, the index entry stays as in the\noriginal index file.  If the entry is not up to date, git read-tree keeps the copy in the work tree intact when\noperating under the -u flag. When this form of git read-tree returns successfully, you can\nsee which of the \"local changes\" that you made were carried forward by running git diff-index --cached $M .  Note that this does not\nnecessarily match what git diff-index --cached $H would have\nproduced before such a two tree merge.  This is because of cases\n18 and 19 — if you already had the changes in $M (e.g. maybe\nyou picked it up via e-mail in a patch form), git diff-index\n--cached $H would have told you about the change before this\nmerge, but it would not show in git diff-index --cached $M output after the two-tree merge. Case 3 is slightly tricky and needs explanation.  The result from this\nrule logically should be to remove the path if the user staged the removal\nof the path and then switching to a new branch.  That however will prevent\nthe initial checkout from happening, so the rule is modified to use M (new\ntree) only when the content of the index is empty.  Otherwise the removal\nof the path is kept as long as $H and $M are the same. 3-Way Merge Each \"index\" entry has two bits worth of \"stage\" state. stage 0 is the\nnormal one, and is the only one you’d see in any kind of normal use. However, when you do git read-tree with three trees, the \"stage\"\nstarts out at 1. This means that you can do $ git read-tree -m <tree1> <tree2> <tree3> and you will end up with an index with all of the <tree1> entries in\n\"stage1\", all of the <tree2> entries in \"stage2\" and all of the\n<tree3> entries in \"stage3\".  When performing a merge of another\nbranch into the current branch, we use the common ancestor tree\nas <tree1>, the current branch head as <tree2>, and the other\nbranch head as <tree3>. Furthermore, git read-tree has special-case logic that says: if you see\na file that matches in all respects in the following states, it\n\"collapses\" back to \"stage0\": stage 2 and 3 are the same; take one or the other (it makes no\ndifference - the same work has been done on our branch in\nstage 2 and their branch in stage 3) stage 1 and stage 2 are the same and stage 3 is different; take\nstage 3 (our branch in stage 2 did not do anything since the\nancestor in stage 1 while their branch in stage 3 worked on\nit) stage 1 and stage 3 are the same and stage 2 is different take\nstage 2 (we did something while they did nothing) The git write-tree command refuses to write a nonsensical tree, and it\nwill complain about unmerged entries if it sees a single entry that is not\nstage 0. OK, this all sounds like a collection of totally nonsensical rules,\nbut it’s actually exactly what you want in order to do a fast\nmerge. The different stages represent the \"result tree\" (stage 0, aka\n\"merged\"), the original tree (stage 1, aka \"orig\"), and the two trees\nyou are trying to merge (stage 2 and 3 respectively). The order of stages 1, 2 and 3 (hence the order of three\n<tree-ish> command-line arguments) are significant when you\nstart a 3-way merge with an index file that is already\npopulated.  Here is an outline of how the algorithm works: if a file exists in identical format in all three trees, it will\nautomatically collapse to \"merged\" state by git read-tree . a file that has any difference what-so-ever in the three trees\nwill stay as separate entries in the index. It’s up to \"porcelain\npolicy\" to determine how to remove the non-0 stages, and insert a\nmerged version. the index file saves and restores with all this information, so you\ncan merge things incrementally, but as long as it has entries in\nstages 1/2/3 (i.e., \"unmerged entries\") you can’t write the result. So\nnow the merge algorithm ends up being really simple: you walk the index in order, and ignore all entries of stage 0,\nsince they’ve already been done. if you find a \"stage1\", but no matching \"stage2\" or \"stage3\", you\nknow it’s been removed from both trees (it only existed in the\noriginal tree), and you remove that entry. if you find a matching \"stage2\" and \"stage3\" tree, you remove one\nof them, and turn the other into a \"stage0\" entry. Remove any\nmatching \"stage1\" entry if it exists too.  .. all the normal\ntrivial rules .. You would normally use git merge-index with supplied git merge-one-file to do this last step.  The script updates\nthe files in the working tree as it merges each path and at the\nend of a successful merge. When you start a 3-way merge with an index file that is already\npopulated, it is assumed that it represents the state of the\nfiles in your work tree, and you can even have files with\nchanges unrecorded in the index file.  It is further assumed\nthat this state is \"derived\" from the stage 2 tree.  The 3-way\nmerge refuses to run if it finds an entry in the original index\nfile that does not match stage 2. This is done to prevent you from losing your work-in-progress\nchanges, and mixing your random changes in an unrelated merge\ncommit.  To illustrate, suppose you start from what has been\ncommitted last to your repository: $ JC=`git rev-parse --verify \"HEAD^0\"`\n$ git checkout-index -f -u -a $JC You do random edits, without running git update-index .  And then\nyou notice that the tip of your \"upstream\" tree has advanced\nsince you pulled from him: $ git fetch git://.... linus\n$ LT=`git rev-parse FETCH_HEAD` Your work tree is still based on your HEAD ($JC), but you have\nsome edits since.  Three-way merge makes sure that you have not\nadded or modified index entries since $JC, and if you haven’t,\nthen does the right thing.  So with the following sequence: $ git read-tree -m -u `git merge-base $JC $LT` $JC $LT\n$ git merge-index git-merge-one-file -a\n$ echo \"Merge with Linus\" | \\\n  git commit-tree `git write-tree` -p $JC -p $LT what you would commit is a pure merge between $JC and $LT without\nyour work-in-progress changes, and your work tree would be\nupdated to the result of the merge. However, if you have local changes in the working tree that\nwould be overwritten by this merge, git read-tree will refuse\nto run to prevent your changes from being lost. In other words, there is no need to worry about what exists only\nin the working tree.  When you have local changes in a part of\nthe project that is not involved in the merge, your changes do\nnot interfere with the merge, and are kept intact.  When they do interfere, the merge does not even start ( git read-tree complains loudly and fails without modifying anything).  In such\na case, you can simply continue doing what you were in the\nmiddle of doing, and when your working tree is ready (i.e. you\nhave finished your work-in-progress), attempt the merge again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "SPARSE CHECKOUT Note: The skip-worktree capabilities in git-update-index and read-tree predated the introduction of git-sparse-checkout .  Users are encouraged to use the sparse-checkout command in preference to these plumbing commands for\nsparse-checkout/skip-worktree related needs.  However, the information\nbelow might be useful to users trying to understand the pattern style\nused in non-cone mode of the sparse-checkout command. \"Sparse checkout\" allows populating the working directory sparsely.\nIt uses the skip-worktree bit (see git-update-index ) to\ntell Git whether a file in the working directory is worth looking at. git read-tree and other merge-based commands ( git merge , git\ncheckout …​) can help maintaining the skip-worktree bitmap and working\ndirectory update. $GIT_DIR/info/sparse-checkout is used to\ndefine the skip-worktree reference bitmap. When git read-tree needs\nto update the working directory, it resets the skip-worktree bit in the index\nbased on this file, which uses the same syntax as .gitignore files.\nIf an entry matches a pattern in this file, or the entry corresponds to\na file present in the working tree, then skip-worktree will not be\nset on that entry. Otherwise, skip-worktree will be set. Then it compares the new skip-worktree value with the previous one. If\nskip-worktree turns from set to unset, it will add the corresponding\nfile back. If it turns from unset to set, that file will be removed. While $GIT_DIR/info/sparse-checkout is usually used to specify what\nfiles are in, you can also specify what files are not in, using\nnegate patterns. For example, to remove the file unwanted : /*\n!unwanted Another tricky thing is fully repopulating the working directory when you\nno longer want sparse checkout. You cannot just disable \"sparse\ncheckout\" because skip-worktree bits are still in the index and your working\ndirectory is still sparsely populated. You should re-populate the working\ndirectory with the $GIT_DIR/info/sparse-checkout file content as\nfollows: /* Then you can disable sparse checkout. Sparse checkout support in git\nread-tree and similar commands is disabled by default. You need to\nturn core.sparseCheckout on in order to have sparse checkout\nsupport."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order"}, {"role": "assistant", "content": "NAME git-rev-list - Lists commit objects in reverse chronological order"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order"}, {"role": "assistant", "content": "SYNOPSIS git rev-list [<options>] <commit>…​ [--] [<path>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order"}, {"role": "assistant", "content": "DESCRIPTION List commits that are reachable by following the parent links from the\ngiven commit(s), but exclude commits that are reachable from the one(s)\ngiven with a ^ in front of them.  The output is given in reverse\nchronological order by default. You can think of this as a set operation. Commits reachable from any of\nthe commits given on the command line form a set, and then commits reachable\nfrom any of the ones given with ^ in front are subtracted from that\nset.  The remaining commits are what comes out in the command’s output.\nVarious other options and paths parameters can be used to further limit the\nresult. Thus, the following command: $ git rev-list foo bar ^baz means \"list all the commits which are reachable from foo or bar , but\nnot from baz \". A special notation \" <commit1> .. <commit2> \" can be used as a\nshort-hand for \"^ <commit1> <commit2> \". For example, either of\nthe following may be used interchangeably: $ git rev-list origin..HEAD\n$ git rev-list HEAD ^origin Another special notation is \" <commit1> …​ <commit2> \" which is useful\nfor merges.  The resulting set of commits is the symmetric difference\nbetween the two operands.  The following two commands are equivalent: $ git rev-list A B --not $(git merge-base --all A B)\n$ git rev-list A...B rev-list is an essential Git command, since it\nprovides the ability to build and traverse commit ancestry graphs. For\nthis reason, it has a lot of different options that enable it to be\nused by commands as different as git bisect and git repack ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -<number>  -n <number>  --max-count=<number>"}, {"role": "assistant", "content": "Limit the number of commits to output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --skip=<number>"}, {"role": "assistant", "content": "Skip number commits before starting to show the commit output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --until=<date>  --before=<date>"}, {"role": "assistant", "content": "Show commits older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --max-age=<timestamp>  --min-age=<timestamp>"}, {"role": "assistant", "content": "Limit the commits output to specified time range."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --author=<pattern>  --committer=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern> ,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --grep-reflog=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog , commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --grep=<pattern>"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern> , commits whose message\nmatches any of the given patterns are chosen (but see --all-match )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --all-match"}, {"role": "assistant", "content": "Limit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --invert-grep"}, {"role": "assistant", "content": "Limit the commits output to ones with a log message that do not\nmatch the pattern specified with --grep=<pattern> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -i  --regexp-ignore-case"}, {"role": "assistant", "content": "Match the regular expression limiting patterns without regard to letter\ncase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --basic-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -E  --extended-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -F  --fixed-strings"}, {"role": "assistant", "content": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -P  --perl-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --remove-empty"}, {"role": "assistant", "content": "Stop when a given path disappears from the tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --merges"}, {"role": "assistant", "content": "Print only merge commits. This is exactly the same as --min-parents=2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-merges"}, {"role": "assistant", "content": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --min-parents=<number>  --max-parents=<number>  --no-min-parents  --no-max-parents"}, {"role": "assistant", "content": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges , --min-parents=2 is the same as --merges . --max-parents=0 gives all root commits and --min-parents=3 all octopus merges. --no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --first-parent"}, {"role": "assistant", "content": "When finding commits to include, follow only the first\nparent commit upon seeing a merge commit.  This option\ncan give a better overview when viewing the evolution of\na particular topic branch, because merges into a topic\nbranch tend to be only about adjusting to updated upstream\nfrom time to time, and this option allows you to ignore\nthe individual commits brought in to your history by such\na merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --exclude-first-parent-only"}, {"role": "assistant", "content": "When finding commits to exclude (with a ^ ), follow only\nthe first parent commit upon seeing a merge commit.\nThis can be used to find the set of changes in a topic branch\nfrom the point where it diverged from the remote branch, given\nthat arbitrary merges can be valid topic branch changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --not"}, {"role": "assistant", "content": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not .\nWhen used on the command line before --stdin, the revisions passed\nthrough stdin will not be affected by it. Conversely, when passed\nvia standard input, the revisions passed on the command line will\nnot be affected by it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --all"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --branches[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit> . If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --tags[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --remotes[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit> . If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ? , * , or [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --alternate-refs"}, {"role": "assistant", "content": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates .  The set of included objects may\nbe modified by core.alternateRefsCommand , etc. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --ignore-missing"}, {"role": "assistant", "content": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --stdin"}, {"role": "assistant", "content": "In addition to getting arguments from the command line, read\nthem from standard input as well. This accepts commits and\npseudo-options like --all and --glob= . When a -- separator\nis seen, the following input is treated as paths and used to\nlimit the result. Flags like --not which are read via standard input\nare only respected for arguments passed in the same way and will not\ninfluence any subsequent command line arguments."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --quiet"}, {"role": "assistant", "content": "Don’t print anything to standard output.  This form\nis primarily meant to allow the caller to\ntest the exit status to see if a range of objects is fully\nconnected (or not).  It is faster than redirecting stdout\nto /dev/null as the output does not have to be formatted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --disk-usage  --disk-usage=human"}, {"role": "assistant", "content": "Suppress normal output; instead, print the sum of the bytes used\nfor on-disk storage by the selected commits or objects. This is\nequivalent to piping the output into git cat-file\n--batch-check='%(objectsize:disk)' , except that it runs much\nfaster (especially with --use-bitmap-index ). See the CAVEATS section in git-cat-file for the limitations of what\n\"on-disk storage\" means.\nWith the optional value human , on-disk storage size is shown\nin human-readable string(e.g. 12.24 Kib, 3.50 Mib)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --cherry-mark"}, {"role": "assistant", "content": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with + ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --cherry-pick"}, {"role": "assistant", "content": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference. For example, if you have two branches, A and B , a usual way\nto list all commits on only one side of them is with --left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --left-only  --right-only"}, {"role": "assistant", "content": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by --left-right . For example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in A . In other words, this lists the + commits from git cherry A B .\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -g  --walk-reflogs"}, {"role": "assistant", "content": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit , commit1..commit2 ,\nand commit1...commit2 notations cannot be used). With --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{<Nth>} (where <Nth> is the reverse-chronological index in the\nreflog) or as ref@{<timestamp>} (with the <timestamp> for that entry),\ndepending on a few rules: If the starting point is specified as ref@{<Nth>} , show the index\nformat. If the starting point was specified as ref@{now} , show the\ntimestamp format. If neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date . Otherwise, show the index format. Under --pretty=oneline , the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse .\nSee also git-reflog . Under --pretty=reference , this information will not be shown at all."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --merge"}, {"role": "assistant", "content": "Show commits touching conflicted paths in the range HEAD...<other> ,\nwhere <other> is the first existing pseudoref in MERGE_HEAD , CHERRY_PICK_HEAD , REVERT_HEAD or REBASE_HEAD . Only works\nwhen the index has unmerged entries. This option can be used to show\nrelevant commits when resolving conflicts from a 3-way merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --use-bitmap-index"}, {"role": "assistant", "content": "Try to speed up the traversal using the pack bitmap index (if\none is available). Note that when traversing with --objects ,\ntrees and blobs will not have their associated path printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --progress=<header>"}, {"role": "assistant", "content": "Show progress reports on stderr as objects are considered. The <header> text will be printed with each progress update."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  <paths>"}, {"role": "assistant", "content": "Commits modifying the given <paths> are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --simplify-by-decoration"}, {"role": "assistant", "content": "Commits that are referred by some branch or tag are selected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  Default mode"}, {"role": "assistant", "content": "Simplifies the history to the simplest history explaining the\nfinal state of the tree. Simplest because it prunes some side\nbranches if the end result is the same (i.e. merging branches\nwith the same content)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --full-history"}, {"role": "assistant", "content": "Same as the default mode, but does not prune some history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --dense"}, {"role": "assistant", "content": "Only the selected commits are shown, plus some to have a\nmeaningful history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --sparse"}, {"role": "assistant", "content": "All commits in the simplified history are shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --simplify-merges"}, {"role": "assistant", "content": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  Default mode"}, {"role": "assistant", "content": "Commits are included if they are not TREESAME to any parent\n(though this can be changed, see --sparse below).  If the\ncommit was a merge, and it was TREESAME to one parent, follow\nonly that parent.  (Even if there are several TREESAME\nparents, follow only one of them.)  Otherwise, follow all\nparents. This results in: .-A---N---O\n\t /     /   /\n\tI---------D Note how the rule to only follow the TREESAME parent, if one is\navailable, removed B from consideration entirely. C was\nconsidered via N , but is TREESAME.  Root commits are compared to an\nempty tree, so I is !TREESAME. Parent/child relations are only visible with --parents , but that does\nnot affect the commits selected in default mode, so we have shown the\nparent lines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --full-history without parent rewriting"}, {"role": "assistant", "content": "This mode differs from the default in one point: always follow\nall parents of a merge, even if it is TREESAME to one of them.\nEven if more than one side of the merge has commits that are\nincluded, this does not imply that the merge itself is!  In\nthe example, we get I  A  B  N  D  O  P  Q M was excluded because it is TREESAME to both parents. E , C and B were all walked, but only B was !TREESAME, so the others\ndo not appear. Note that without parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so we show\nthem disconnected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --full-history with parent rewriting"}, {"role": "assistant", "content": "Ordinary commits are only included if they are !TREESAME\n(though this can be changed, see --sparse below). Merges are always included.  However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves.  This results in .-A---M---N---O---P---Q\n\t /     /   /   /   /\n\tI     B   /   D   /\n\t \\   /   /   /   /\n\t  `-------------' Compare to --full-history without rewriting above.  Note that E was pruned away because it is TREESAME, but the parent list of P was\nrewritten to contain E 's parent I .  The same happened for C and N , and X , Y and Q ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --dense"}, {"role": "assistant", "content": "Commits that are walked are included if they are not TREESAME\nto any parent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --sparse"}, {"role": "assistant", "content": "All commits that are walked are included. Note that without --full-history , this still simplifies merges: if\none of the parents is TREESAME, we follow only that one, so the other\nsides of the merge are never walked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --simplify-merges"}, {"role": "assistant", "content": "First, build a history graph in the same way that --full-history with parent rewriting does (see above). Then simplify each commit C to its replacement C' in the final\nhistory according to the following rules: Set C' to C . Replace each parent P of C' with its simplification P' .  In\nthe process, drop parents that are ancestors of other parents or that are\nroot commits TREESAME to an empty tree, and remove duplicates, but take care\nto never drop all parents that we are TREESAME to. If after this parent rewriting, C' is a root or merge commit (has\nzero or >1 parents), a boundary commit, or !TREESAME, it remains.\nOtherwise, it is replaced with its only parent. The effect of this is best shown by way of comparing to --full-history with parent rewriting.  The example turns into: .-A---M---N---O\n\t /     /       /\n\tI     B       D\n\t \\   /       /\n\t  `---------' Note the major differences in N , P , and Q over --full-history : N 's parent list had I removed, because it is an ancestor of the\nother parent M .  Still, N remained because it is !TREESAME. P 's parent list similarly had I removed. P was then\nremoved completely, because it had one parent and is TREESAME. Q 's parent list had Y simplified to X . X was then removed, because it\nwas a TREESAME root. Q was then removed completely, because it had one\nparent and is TREESAME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "Limit the displayed commits to those which are an ancestor of\n<commit>, or which are a descendant of <commit>, or are <commit>\nitself. As an example use case, consider the following commit history: D---E-------F\n\t   /     \\       \\\n\t  B---C---G---H---I---J\n\t /                     \\\n\tA-------K---------------L--M A regular D..M computes the set of commits that are ancestors of M ,\nbut excludes the ones that are ancestors of D . This is useful to see\nwhat happened to the history leading to M since D , in the sense\nthat “what does M have that did not exist in D ”. The result in this\nexample would be all the commits, except A and B (and D itself,\nof course). When we want to find out what commits in M are contaminated with the\nbug introduced by D and need fixing, however, we might want to view\nonly the subset of D..M that are actually descendants of D , i.e.\nexcluding C and K . This is exactly what the --ancestry-path option does. Applied to the D..M range, it results in: E-------F\n\t\t \\       \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M We can also use --ancestry-path=D instead of --ancestry-path which\nmeans the same thing when applied to the D..M range but is just more\nexplicit. If we instead are interested in a given topic within this range, and all\ncommits affected by that topic, we may only want to view the subset of D..M which contain that topic in their ancestry path.  So, using --ancestry-path=H D..M for example would result in: E\n\t\t \\\n\t\t  G---H---I---J\n\t\t\t       \\\n\t\t\t\tL--M Whereas --ancestry-path=K D..M would result in K---------------L--M"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --show-pulls"}, {"role": "assistant", "content": "In addition to the commits shown in the default history, show\neach merge commit that is not TREESAME to its first parent but\nis TREESAME to a later parent. When a merge commit is included by --show-pulls , the merge is\ntreated as if it \"pulled\" the change from another branch. When using --show-pulls on this example (and no other options) the resulting\ngraph is: I---X---R---N Here, the merge commits R and N are included because they pulled\nthe commits X and R into the base branch, respectively. These\nmerges are the reason the commits A and B do not appear in the\ndefault history. When --show-pulls is paired with --simplify-merges , the\ngraph includes all of the necessary information: .-A---M--.   N\n\t /     /    \\ /\n\tI     B      R\n\t \\   /      /\n\t  \\ /      /\n\t   `---X--' Notice that since M is reachable from R , the edge from N to M was simplified away. However, N still appears in the history as an\nimportant commit because it \"pulled\" the change R into the main\nbranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --bisect"}, {"role": "assistant", "content": "Limit output to the one commit object which is roughly halfway between\nincluded and excluded commits. Note that the bad bisection ref refs/bisect/bad is added to the included commits (if it\nexists) and the good bisection refs refs/bisect/good-* are\nadded to the excluded commits (if they exist). Thus, supposing there\nare no refs in refs/bisect/ , if $ git rev-list --bisect foo ^bar ^baz outputs midpoint , the output of the two commands $ git rev-list foo ^midpoint\n\t$ git rev-list midpoint ^bar ^baz would be of roughly the same length.  Finding the change which\nintroduces a regression is thus reduced to a binary search: repeatedly\ngenerate and test new 'midpoint’s until the commit chain is of length\none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --bisect-vars"}, {"role": "assistant", "content": "This calculates the same as --bisect , except that refs in refs/bisect/ are not used, and except that this outputs\ntext ready to be eval’ed by the shell. These lines will assign the\nname of the midpoint revision to the variable bisect_rev , and the\nexpected number of commits to be tested after bisect_rev is tested\nto bisect_nr , the expected number of commits to be tested if bisect_rev turns out to be good to bisect_good , the expected\nnumber of commits to be tested if bisect_rev turns out to be bad to bisect_bad , and the number of commits we are bisecting right now to bisect_all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --bisect-all"}, {"role": "assistant", "content": "This outputs all the commit objects between the included and excluded\ncommits, ordered by their distance to the included and excluded\ncommits. Refs in refs/bisect/ are not used. The farthest\nfrom them is displayed first. (This is the only one displayed by --bisect .) This is useful because it makes it easy to choose a good commit to\ntest when you want to avoid to test some of them for some reason (they\nmay not compile for example). This option can be used along with --bisect-vars , in this case,\nafter all the sorted commit objects, there will be the same text as if --bisect-vars had been used alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --author-date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --topo-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed. For example, in a commit history like this: ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8--- where the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1. With --topo-order , they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --reverse"}, {"role": "assistant", "content": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with --walk-reflogs ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --objects"}, {"role": "assistant", "content": "Print the object IDs of any object referenced by the listed\ncommits. --objects foo ^bar thus means “send me\nall object IDs which I need to download if I have the commit\nobject bar but not foo ”. See also --object-names below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --in-commit-order"}, {"role": "assistant", "content": "Print tree and blob ids in order of the commits. The tree\nand blob ids are printed after they are first referenced\nby a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --objects-edge"}, {"role": "assistant", "content": "Similar to --objects , but also print the IDs of excluded\ncommits prefixed with a “-” character.  This is used by git-pack-objects to build a “thin” pack, which records\nobjects in deltified form based on objects contained in these\nexcluded commits to reduce network traffic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --objects-edge-aggressive"}, {"role": "assistant", "content": "Similar to --objects-edge , but it tries harder to find excluded\ncommits at the cost of increased time.  This is used instead of --objects-edge to build “thin” packs for shallow repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --indexed-objects"}, {"role": "assistant", "content": "Pretend as if all trees and blobs used by the index are listed\non the command line.  Note that you probably want to use --objects , too."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --unpacked"}, {"role": "assistant", "content": "Only useful with --objects ; print the object IDs that are not\nin packs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --object-names"}, {"role": "assistant", "content": "Only useful with --objects ; print the names of the object IDs\nthat are found. This is the default behavior. Note that the\n\"name\" of each object is ambiguous, and mostly intended as a\nhint for packing objects. In particular: no distinction is made between\nthe names of tags, trees, and blobs; path names may be modified\nto remove newlines; and if an object would appear multiple times\nwith different names, only one name is shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-object-names"}, {"role": "assistant", "content": "Only useful with --objects ; does not print the names of the object\nIDs that are found. This inverts --object-names . This flag allows\nthe output to be more easily parsed by commands such as git-cat-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --filter=<filter-spec>"}, {"role": "assistant", "content": "Only useful with one of the --objects* ; omits objects (usually\nblobs) from the list of printed objects.  The <filter-spec> may be one of the following: The form --filter=blob:none omits all blobs. The form --filter=blob:limit=<n>[kmg] omits blobs of size at least n\nbytes or units.  n may be zero.  The suffixes k, m, and g can be used\nto name units in KiB, MiB, or GiB.  For example, blob:limit=1k is the same as blob:limit=1024 . The form --filter=object:type=(tag|commit|tree|blob) omits all objects\nwhich are not of the requested type. The form --filter=sparse:oid=<blob-ish> uses a sparse-checkout\nspecification contained in the blob (or blob-expression) <blob-ish> to omit blobs that would not be required for a sparse checkout on\nthe requested refs. The form --filter=tree:<depth> omits all blobs and trees whose depth\nfrom the root tree is >= <depth> (minimum depth if an object is located\nat multiple depths in the commits traversed). <depth>=0 will not include\nany trees or blobs unless included explicitly in the command-line (or\nstandard input when --stdin is used). <depth>=1 will include only the\ntree and blobs which are referenced directly by a commit reachable from\n<commit> or an explicitly-given object. <depth>=2 is like <depth>=1\nwhile also including trees and blobs one more level removed from an\nexplicitly-given commit or tree. Note that the form --filter=sparse:path=<path> that wants to read\nfrom an arbitrary path on the filesystem has been dropped for security\nreasons. Multiple --filter= flags can be specified to combine filters. Only\nobjects which are accepted by every filter are included. The form --filter=combine:<filter1>+<filter2>+…​<filterN> can also be\nused to combined several filters, but this is harder than just repeating\nthe --filter flag and is usually not necessary. Filters are joined by + and individual filters are %-encoded (i.e. URL-encoded).\nBesides the + and % characters, the following characters are\nreserved and also must be encoded: ~!@#$^&*()[]{}\\;\",<>? '` as well as all characters with ASCII code <= 0x20 , which includes\nspace and newline. Other arbitrary characters can also be encoded. For instance, combine:tree:3+blob:none and combine:tree%3A3+blob%3Anone are\nequivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-filter"}, {"role": "assistant", "content": "Turn off any previous --filter= argument."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --filter-provided-objects"}, {"role": "assistant", "content": "Filter the list of explicitly provided objects, which would otherwise\nalways be printed even if they did not match any of the filters. Only\nuseful with --filter= ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --filter-print-omitted"}, {"role": "assistant", "content": "Only useful with --filter= ; prints a list of the objects omitted\nby the filter.  Object IDs are prefixed with a “~” character."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --missing=<missing-action>"}, {"role": "assistant", "content": "A debug option to help with future \"partial clone\" development.\nThis option specifies how missing objects are handled. The form --missing=error requests that rev-list stop with an error if\na missing object is encountered.  This is the default action. The form --missing=allow-any will allow object traversal to continue\nif a missing object is encountered.  Missing objects will silently be\nomitted from the results. The form --missing=allow-promisor is like allow-any , but will only\nallow object traversal to continue for EXPECTED promisor missing objects.\nUnexpected missing objects will raise an error. The form --missing=print is like allow-any , but will also print a\nlist of the missing objects.  Object IDs are prefixed with a “?” character. If some tips passed to the traversal are missing, they will be\nconsidered as missing too, and the traversal will ignore them. In case\nwe cannot get their Object ID though, an error will be raised."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --exclude-promisor-objects"}, {"role": "assistant", "content": "(For internal use only.)  Prefilter object traversal at\npromisor boundary.  This is used with partial clone.  This is\nstronger than --missing=allow-promisor because it limits the\ntraversal, rather than just silencing errors about missing\nobjects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-walk[=(sorted|unsorted)]"}, {"role": "assistant", "content": "Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --do-walk"}, {"role": "assistant", "content": "Overrides a previous --no-walk ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --pretty[=<format>]  --format=<format>"}, {"role": "assistant", "content": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline , short , medium , full , fuller , reference , email , raw , format:<string> and tformat:<string> .  When <format> is none of the above,\nand has %placeholder in it, it acts as if --pretty=tformat:<format> were given. See the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium . Note: you can specify the default pretty format in the repository\nconfiguration (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --abbrev-commit"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-abbrev-commit"}, {"role": "assistant", "content": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit , either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --oneline"}, {"role": "assistant", "content": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --encoding=<encoding>"}, {"role": "assistant", "content": "Commit objects record the character encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X , we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output. Likewise, if iconv(3) fails\nto convert the commit, we will quietly output the original\nobject verbatim."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --expand-tabs=<n>  --expand-tabs  --no-expand-tabs"}, {"role": "assistant", "content": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is a multiple of <n> )\nin the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8 , and --no-expand-tabs is a short-hand for --expand-tabs=0 ,\nwhich disables tab expansion. By default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. medium , which is the default, full ,\nand fuller )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --show-signature"}, {"role": "assistant", "content": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --relative-date"}, {"role": "assistant", "content": "Synonym for --date=relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --date=<format>"}, {"role": "assistant", "content": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty . log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g., iso-local ), the user’s local time zone is used instead. --date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for --date=relative . --date=local is an alias for --date=default-local . --date=iso (or --date=iso8601 ) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are: a space instead of the T date/time delimiter a space between time and time zone no colon between hours and minutes of the time zone --date=iso-strict (or --date=iso8601-strict ) shows timestamps in strict\nISO 8601 format. --date=rfc (or --date=rfc2822 ) shows timestamps in RFC 2822\nformat, often found in email messages. --date=short shows only the date, but not the time, in YYYY-MM-DD format. --date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\") ).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value. --date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted. --date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw , this is always in UTC and therefore -local has no effect. --date=format:... feeds the format ... to your system strftime ,\nexcept for %s, %z, and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local , the correct syntax is --date=format-local:... . --date=default is the default format, and is based on ctime(3)\noutput.  It shows a single line with three-letter day of the week,\nthree-letter month, day-of-month, hour-minute-seconds in \"HH:MM:SS\"\nformat, followed by 4-digit year, plus timezone information, unless\nthe local time zone is used, e.g. Thu Jan 1 00:00:00 1970 +0000 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --header"}, {"role": "assistant", "content": "Print the contents of the commit in raw-format; each record is\nseparated with a NUL character."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --no-commit-header"}, {"role": "assistant", "content": "Suppress the header line containing \"commit\" and the object ID printed before\nthe specified format.  This has no effect on the built-in formats; only custom\nformats are affected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --commit-header"}, {"role": "assistant", "content": "Overrides a previous --no-commit-header ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --parents"}, {"role": "assistant", "content": "Print also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --children"}, {"role": "assistant", "content": "Print also the children of the commit (in the form \"commit child…​\").\nAlso enables parent rewriting, see History Simplification above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --timestamp"}, {"role": "assistant", "content": "Print the raw commit timestamp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --left-right"}, {"role": "assistant", "content": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --graph"}, {"role": "assistant", "content": "Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk . This enables parent rewriting, see History Simplification above. This implies the --topo-order option by default, but the --date-order option may also be specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --show-linear-break[=<barrier>]"}, {"role": "assistant", "content": "When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --count"}, {"role": "assistant", "content": "Print a number stating how many commits would have been\nlisted, and suppress all other output.  When used together\nwith --left-right , instead print the counts for left and\nright commits, separated by a tab. When used together with --cherry-mark , omit patch equivalent commits from these\ncounts and print the count for equivalent commits separated\nby a tab."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %%"}, {"role": "assistant", "content": "a raw %"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %x00"}, {"role": "assistant", "content": "%x followed by two hexadecimal digits is replaced with a\nbyte with the hexadecimal digits' value (we will call this\n\"literal formatting code\" in the rest of this document)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %Cred"}, {"role": "assistant", "content": "switch color to red"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %Cgreen"}, {"role": "assistant", "content": "switch color to green"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %Cblue"}, {"role": "assistant", "content": "switch color to blue"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %Creset"}, {"role": "assistant", "content": "reset color"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %C(…​)"}, {"role": "assistant", "content": "color specification, as described under Values in the\n\"CONFIGURATION FILE\" section of git-config .  By\ndefault, colors are shown only when enabled for log output\n(by color.diff , color.ui , or --color , and respecting\nthe auto settings of the former if we are going to a\nterminal). %C(auto,...) is accepted as a historical\nsynonym for the default (e.g., %C(auto,red) ). Specifying %C(always,...) will show the colors even when color is\nnot otherwise enabled (though consider just using --color=always to enable color for the whole output,\nincluding this format and anything else git might color). auto alone (i.e. %C(auto) ) will turn on auto coloring\non the next placeholders until the color is switched\nagain."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %m"}, {"role": "assistant", "content": "left ( < ), right ( > ) or boundary ( - ) mark"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %w([<w>[,<i1>[,<i2>]]])"}, {"role": "assistant", "content": "switch line wrapping, like the -w option of git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %<|( <M> )"}, {"role": "assistant", "content": "make the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %>( <N> ) , %>|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively,\nbut padding spaces on the left"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %>>( <N> ) , %>>|( <M> )"}, {"role": "assistant", "content": "similar to %>( <N> ) , %>|( <M> ) respectively, except that if the next\nplaceholder takes more spaces than given and\nthere are spaces on its left, use those\nspaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %><( <N> ) , %><|( <M> )"}, {"role": "assistant", "content": "similar to %<( <N> ) , %<|( <M> ) respectively, but padding both sides\n(i.e. the text is centered)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %H"}, {"role": "assistant", "content": "commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %h"}, {"role": "assistant", "content": "abbreviated commit hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %T"}, {"role": "assistant", "content": "tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %t"}, {"role": "assistant", "content": "abbreviated tree hash"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %P"}, {"role": "assistant", "content": "parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %p"}, {"role": "assistant", "content": "abbreviated parent hashes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %an"}, {"role": "assistant", "content": "author name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aN"}, {"role": "assistant", "content": "author name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ae"}, {"role": "assistant", "content": "author email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aE"}, {"role": "assistant", "content": "author email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aL"}, {"role": "assistant", "content": "author local-part (see %al ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ad"}, {"role": "assistant", "content": "author date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aD"}, {"role": "assistant", "content": "author date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ar"}, {"role": "assistant", "content": "author date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %at"}, {"role": "assistant", "content": "author date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ai"}, {"role": "assistant", "content": "author date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %as"}, {"role": "assistant", "content": "author date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ah"}, {"role": "assistant", "content": "author date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cN"}, {"role": "assistant", "content": "committer name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ce"}, {"role": "assistant", "content": "committer email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cE"}, {"role": "assistant", "content": "committer email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cl"}, {"role": "assistant", "content": "committer email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cL"}, {"role": "assistant", "content": "committer local-part (see %cl ) respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cd"}, {"role": "assistant", "content": "committer date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cD"}, {"role": "assistant", "content": "committer date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cr"}, {"role": "assistant", "content": "committer date, relative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ct"}, {"role": "assistant", "content": "committer date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ci"}, {"role": "assistant", "content": "committer date, ISO 8601-like format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cI"}, {"role": "assistant", "content": "committer date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cs"}, {"role": "assistant", "content": "committer date, short format ( YYYY-MM-DD )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ch"}, {"role": "assistant", "content": "committer date, human style (like the --date=human option of git-rev-list )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %d"}, {"role": "assistant", "content": "ref names, like the --decorate option of git-log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %D"}, {"role": "assistant", "content": "ref names without the \" (\", \")\" wrapping."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %(decorate[:<options>])"}, {"role": "assistant", "content": "ref names with custom decorations. The decorate string may be followed by a\ncolon and zero or more comma-separated options. Option values may contain\nliteral formatting codes. These must be used for commas ( %x2C ) and closing\nparentheses ( %x29 ), due to their role in the option syntax. prefix=<value> : Shown before the list of ref names.  Defaults to \" ( \". suffix=<value> : Shown after the list of ref names.  Defaults to \" ) \". separator=<value> : Shown between ref names.  Defaults to \" , \". pointer=<value> : Shown between HEAD and the branch it points to, if any.\nDefaults to \" -> \". tag=<value> : Shown before tag names. Defaults to \" tag: \"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %S"}, {"role": "assistant", "content": "ref name given on the command line by which the commit was reached\n(like git log --source ), only works with git log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %e"}, {"role": "assistant", "content": "encoding"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %s"}, {"role": "assistant", "content": "subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %f"}, {"role": "assistant", "content": "sanitized subject line, suitable for a filename"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %b"}, {"role": "assistant", "content": "body"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %B"}, {"role": "assistant", "content": "raw body (unwrapped subject and body)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GG"}, {"role": "assistant", "content": "raw verification message from GPG for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GS"}, {"role": "assistant", "content": "show the name of the signer for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GK"}, {"role": "assistant", "content": "show the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GF"}, {"role": "assistant", "content": "show the fingerprint of the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GP"}, {"role": "assistant", "content": "show the fingerprint of the primary key whose subkey was used\nto sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GT"}, {"role": "assistant", "content": "show the trust level for the key used to sign a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gD"}, {"role": "assistant", "content": "reflog selector, e.g., refs/stash@{1} or refs/stash@{2\nminutes ago} ; the format follows the rules described for the -g option. The portion before the @ is the refname as\ngiven on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gd"}, {"role": "assistant", "content": "shortened reflog selector; same as %gD , but the refname\nportion is shortened for human readability (so refs/heads/master becomes just master )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gn"}, {"role": "assistant", "content": "reflog identity name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gN"}, {"role": "assistant", "content": "reflog identity name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ge"}, {"role": "assistant", "content": "reflog identity email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gE"}, {"role": "assistant", "content": "reflog identity email (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %gs"}, {"role": "assistant", "content": "reflog subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %(trailers[:<options>])"}, {"role": "assistant", "content": "display the trailers of the body as interpreted by git-interpret-trailers . The trailers string may be followed by\na colon and zero or more comma-separated options. If any option is provided\nmultiple times, the last occurrence wins. key=<key> : only show trailers with specified <key>. Matching is done\ncase-insensitively and trailing colon is optional. If option is\ngiven multiple times trailer lines matching any of the keys are\nshown. This option automatically enables the only option so that\nnon-trailer lines in the trailer block are hidden. If that is not\ndesired it can be disabled with only=false .  E.g., %(trailers:key=Reviewed-by) shows trailer lines with key Reviewed-by . only[=<bool>] : select whether non-trailer lines from the trailer\nblock should be included. separator=<sep> : specify the separator inserted between trailer\nlines. Defaults to a line feed character. The string <sep> may contain\nthe literal formatting codes described above. To use comma as\nseparator one must use %x2C as it would otherwise be parsed as\nnext option. E.g., %(trailers:key=Ticket,separator=%x2C ) shows all trailer lines whose key is \"Ticket\" separated by a comma\nand a space. unfold[=<bool>] : make it behave as if interpret-trailer’s --unfold option was given. E.g., %(trailers:only,unfold=true) unfolds and shows all trailer lines. keyonly[=<bool>] : only show the key part of the trailer. valueonly[=<bool>] : only show the value part of the trailer. key_value_separator=<sep> : specify the separator inserted between\nthe key and value of each trailer. Defaults to \": \". Otherwise it\nshares the same semantics as separator=<sep> above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order"}, {"role": "assistant", "content": "EXAMPLES Print the list of commits reachable from the current branch. git rev-list HEAD Print the list of commits on this branch, but not present in the\nupstream branch. git rev-list @{upstream}..HEAD Format commits with their author and commit message (see also the\nporcelain git-log ). git rev-list --format=medium HEAD Format commits along with their diffs (see also the porcelain git-log , which can do this in a single process). git rev-list HEAD |\ngit diff-tree --stdin --format=medium -p Print the list of commits on the current branch that touched any\nfile in the Documentation directory. git rev-list HEAD -- Documentation/ Print the list of commits authored by you in the past year, on\nany branch, tag, or other ref. git rev-list --author=you@example.com --since=1.year.ago --all Print the list of objects reachable from the current branch (i.e., all\ncommits and the blobs and trees they contain). git rev-list --objects HEAD Compare the disk size of all reachable objects, versus those\nreachable from reflogs, versus the total packed size. This can tell\nyou whether running git repack -ad might reduce the repository size\n(by dropping unreachable objects), and whether expiring reflogs might\nhelp. # reachable objects\ngit rev-list --disk-usage --objects --all\n# plus reflogs\ngit rev-list --disk-usage --objects --all --reflog\n# total disk size used\ndu -c .git/objects/pack/*.pack .git/objects/??/*\n# alternative to du: add up \"size\" and \"size-pack\" fields\ngit count-objects -v Report the disk size of each branch, not including objects used by the\ncurrent branch. This can find outliers that are contributing to a\nbloated repository size (e.g., because somebody accidentally committed\nlarge build artifacts). git for-each-ref --format='%(refname)' |\nwhile read branch\ndo\n\tsize=$(git rev-list --disk-usage --objects HEAD..$branch)\n\techo \"$size $branch\"\ndone |\nsort -n Compare the on-disk size of branches in one group of refs, excluding\nanother. If you co-mingle objects from multiple remotes in a single\nrepository, this can show which remotes are contributing to the\nrepository size (taking the size of origin as a baseline). git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters"}, {"role": "assistant", "content": "NAME git-rev-parse - Pick out and massage parameters"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters"}, {"role": "assistant", "content": "SYNOPSIS git rev-parse [<options>] <arg>…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters"}, {"role": "assistant", "content": "DESCRIPTION Many Git porcelainish commands take a mixture of flags\n(i.e. parameters that begin with a dash - ) and parameters\nmeant for the underlying git rev-list command they use internally\nand flags and parameters for the other commands they use\ndownstream of git rev-list .  This command is used to\ndistinguish between them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --parseopt"}, {"role": "assistant", "content": "Use git rev-parse in option parsing mode (see PARSEOPT section below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --sq-quote"}, {"role": "assistant", "content": "Use git rev-parse in shell quoting mode (see SQ-QUOTE\nsection below). In contrast to the --sq option below, this\nmode only does quoting. Nothing else is done to command input."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --keep-dashdash"}, {"role": "assistant", "content": "Only meaningful in --parseopt mode. Tells the option parser to echo\nout the first -- met instead of skipping it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --stop-at-non-option"}, {"role": "assistant", "content": "Only meaningful in --parseopt mode.  Lets the option parser stop at\nthe first non-option argument.  This can be used to parse sub-commands\nthat take options themselves."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --stuck-long"}, {"role": "assistant", "content": "Only meaningful in --parseopt mode. Output the options in their\nlong form if available, and with their arguments stuck."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --revs-only"}, {"role": "assistant", "content": "Do not output flags and parameters not meant for git rev-list command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --no-revs"}, {"role": "assistant", "content": "Do not output flags and parameters meant for git rev-list command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --flags"}, {"role": "assistant", "content": "Do not output non-flag parameters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --no-flags"}, {"role": "assistant", "content": "Do not output flag parameters."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --default <arg>"}, {"role": "assistant", "content": "If there is no parameter given by the user, use <arg> instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --prefix <arg>"}, {"role": "assistant", "content": "Behave as if git rev-parse was invoked from the <arg> subdirectory of the working tree.  Any relative filenames are\nresolved as if they are prefixed by <arg> and will be printed\nin that form. This can be used to convert arguments to a command run in a subdirectory\nso that they can still be used after moving to the top-level of the\nrepository.  For example: prefix=$(git rev-parse --show-prefix)\ncd \"$(git rev-parse --show-toplevel)\"\n# rev-parse provides the -- needed for 'set'\neval \"set $(git rev-parse --sq --prefix \"$prefix\" -- \"$@\")\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --verify"}, {"role": "assistant", "content": "Verify that exactly one parameter is provided, and that it\ncan be turned into a raw 20-byte SHA-1 that can be used to\naccess the object database. If so, emit it to the standard\noutput; otherwise, error out. If you want to make sure that the output actually names an object in\nyour object database and/or can be used as a specific type of object\nyou require, you can add the ^{type} peeling operator to the parameter.\nFor example, git rev-parse \"$VAR^{commit}\" will make sure $VAR names an existing object that is a commit-ish (i.e. a commit, or an\nannotated tag that points at a commit).  To make sure that $VAR names an existing object of any type, git rev-parse \"$VAR^{object}\" can be used. Note that if you are verifying a name from an untrusted source, it is\nwise to use --end-of-options so that the name argument is not mistaken\nfor another option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  -q  --quiet"}, {"role": "assistant", "content": "Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --sq"}, {"role": "assistant", "content": "Usually the output is made one line per flag and\nparameter.  This option makes output a single line,\nproperly quoted for consumption by shell.  Useful when\nyou expect your parameter to contain whitespaces and\nnewlines (e.g. when using pickaxe -S with git diff-* ). In contrast to the --sq-quote option,\nthe command input is still interpreted as usual."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --short[=<length>]"}, {"role": "assistant", "content": "Same as --verify but shortens the object name to a unique\nprefix with at least length characters. The minimum length\nis 4, the default is the effective value of the core.abbrev configuration variable (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --not"}, {"role": "assistant", "content": "When showing object names, prefix them with ^ and\nstrip ^ prefix from the object names that already have\none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --abbrev-ref[=(strict|loose)]"}, {"role": "assistant", "content": "A non-ambiguous short name of the objects name.\nThe option core.warnAmbiguousRefs is used to select the strict\nabbreviation mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --symbolic"}, {"role": "assistant", "content": "Usually the object names are output in SHA-1 form (with\npossible ^ prefix); this option makes them output in a\nform as close to the original input as possible."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --symbolic-full-name"}, {"role": "assistant", "content": "This is similar to --symbolic, but it omits input that\nare not refs (i.e. branch or tag names; or more\nexplicitly disambiguating \"heads/master\" form, when you\nwant to name the \"master\" branch when there is an\nunfortunately named tag \"master\"), and shows them as full\nrefnames (e.g. \"refs/heads/master\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --output-object-format=(sha1|sha256|storage)"}, {"role": "assistant", "content": "Allow oids to be input from any object format that the current\nrepository supports. Specifying \"sha1\" translates if necessary and returns a sha1 oid. Specifying \"sha256\" translates if necessary and returns a sha256 oid. Specifying \"storage\" translates if necessary and returns an oid in\nencoded in the storage hash algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --all"}, {"role": "assistant", "content": "Show all refs found in refs/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --branches[=<pattern>]  --tags[=<pattern>]  --remotes[=<pattern>]"}, {"role": "assistant", "content": "Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads , refs/tags , or refs/remotes , respectively). If a pattern is given, only refs matching the given shell glob are\nshown.  If the pattern does not contain a globbing character ( ? , * , or [ ), it is turned into a prefix match by appending /* ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --glob=<pattern>"}, {"role": "assistant", "content": "Show all refs matching the shell glob pattern pattern . If\nthe pattern does not start with refs/ , this is automatically\nprepended.  If the pattern does not contain a globbing\ncharacter ( ? , * , or [ ), it is turned into a prefix\nmatch by appending /* ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --exclude=<glob-pattern>"}, {"role": "assistant", "content": "Do not include refs matching <glob-pattern> that the next --all , --branches , --tags , --remotes , or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all , --branches , --tags , --remotes , or --glob option (other options or arguments do not clear\naccumulated patterns). The patterns given should not begin with refs/heads , refs/tags , or refs/remotes when applied to --branches , --tags , or --remotes ,\nrespectively, and they must begin with refs/ when applied to --glob or --all . If a trailing /* is intended, it must be given\nexplicitly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --exclude-hidden=(fetch|receive|uploadpack)"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --disambiguate=<prefix>"}, {"role": "assistant", "content": "Show every object whose name begins with the given prefix.\nThe <prefix> must be at least 4 hexadecimal digits long to\navoid listing each and every object in the repository by\nmistake."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --local-env-vars"}, {"role": "assistant", "content": "List the GIT_* environment variables that are local to the\nrepository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).\nOnly the names of the variables are listed, not their value,\neven if they are set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --path-format=(absolute|relative)"}, {"role": "assistant", "content": "Controls the behavior of certain other options. If specified as absolute, the\npaths printed by those options will be absolute and canonical. If specified as\nrelative, the paths will be relative to the current working directory if that\nis possible.  The default is option specific. This option may be specified multiple times and affects only the arguments that\nfollow it on the command line, either to the end of the command line or the next\ninstance of this option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --git-dir"}, {"role": "assistant", "content": "Show $GIT_DIR if defined. Otherwise show the path to\nthe .git directory. The path shown, when relative, is\nrelative to the current working directory. If $GIT_DIR is not defined and the current directory\nis not detected to lie in a Git repository or work tree\nprint a message to stderr and exit with nonzero status."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --git-common-dir"}, {"role": "assistant", "content": "Show $GIT_COMMON_DIR if defined, else $GIT_DIR ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --resolve-git-dir <path>"}, {"role": "assistant", "content": "Check if <path> is a valid repository or a gitfile that\npoints at a valid repository, and print the location of the\nrepository.  If <path> is a gitfile then the resolved path\nto the real repository is printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --git-path <path>"}, {"role": "assistant", "content": "Resolve \"$GIT_DIR/<path>\" and takes other path relocation\nvariables such as $GIT_OBJECT_DIRECTORY,\n$GIT_INDEX_FILE…​ into account. For example, if\n$GIT_OBJECT_DIRECTORY is set to /foo/bar then \"git rev-parse\n--git-path objects/abc\" returns /foo/bar/abc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-toplevel"}, {"role": "assistant", "content": "Show the (by default, absolute) path of the top-level directory\nof the working tree. If there is no working tree, report an error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-superproject-working-tree"}, {"role": "assistant", "content": "Show the absolute path of the root of the superproject’s\nworking tree (if exists) that uses the current repository as\nits submodule.  Outputs nothing if the current repository is\nnot used as a submodule by any project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --shared-index-path"}, {"role": "assistant", "content": "Show the path to the shared index file in split index mode, or\nempty if not in split-index mode."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --absolute-git-dir"}, {"role": "assistant", "content": "Like --git-dir , but its output is always the canonicalized\nabsolute path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --is-inside-git-dir"}, {"role": "assistant", "content": "When the current working directory is below the repository\ndirectory print \"true\", otherwise \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --is-inside-work-tree"}, {"role": "assistant", "content": "When the current working directory is inside the work tree of the\nrepository print \"true\", otherwise \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --is-bare-repository"}, {"role": "assistant", "content": "When the repository is bare print \"true\", otherwise \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --is-shallow-repository"}, {"role": "assistant", "content": "When the repository is shallow print \"true\", otherwise \"false\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-cdup"}, {"role": "assistant", "content": "When the command is invoked from a subdirectory, show the\npath of the top-level directory relative to the current\ndirectory (typically a sequence of \"../\", or an empty string)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-prefix"}, {"role": "assistant", "content": "When the command is invoked from a subdirectory, show the\npath of the current directory relative to the top-level\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-object-format[=(storage|input|output)]"}, {"role": "assistant", "content": "Show the object format (hash algorithm) used for the repository\nfor storage inside the .git directory, input, or output. For\ninput, multiple algorithms may be printed, space-separated.\nIf not specified, the default is \"storage\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-ref-format"}, {"role": "assistant", "content": "Show the reference storage format used for the repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --since=<datestring>  --after=<datestring>"}, {"role": "assistant", "content": "Parse the date string, and output the corresponding\n--max-age= parameter for git rev-list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --until=<datestring>  --before=<datestring>"}, {"role": "assistant", "content": "Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <arg>…​"}, {"role": "assistant", "content": "Flags and parameters to be parsed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <sha1> , e.g. dae86e1950b1277e545cee180551750029cfe735 , dae86e"}, {"role": "assistant", "content": "The full SHA-1 object name (40-byte hexadecimal string), or\na leading substring that is unique within the repository.\nE.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both\nname the same commit object if there is no other object in\nyour repository whose object name starts with dae86e."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <describeOutput> , e.g. v1.7.4.2-679-g3bee7fb"}, {"role": "assistant", "content": "Output from git describe ; i.e. a closest tag, optionally\nfollowed by a dash and a number of commits, followed by a dash, a g , and an abbreviated object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <refname> , e.g. master , heads/master , refs/heads/master"}, {"role": "assistant", "content": "A symbolic ref name.  E.g. master typically means the commit\nobject referenced by refs/heads/master .  If you\nhappen to have both heads/master and tags/master , you can\nexplicitly say heads/master to tell Git which one you mean.\nWhen ambiguous, a <refname> is disambiguated by taking the\nfirst match in the following rules: If $GIT_DIR/<refname> exists, that is what you mean (this is usually\nuseful only for HEAD , FETCH_HEAD , ORIG_HEAD , MERGE_HEAD , REBASE_HEAD , REVERT_HEAD , CHERRY_PICK_HEAD , BISECT_HEAD and AUTO_MERGE ); otherwise, refs/<refname> if it exists; otherwise, refs/tags/<refname> if it exists; otherwise, refs/heads/<refname> if it exists; otherwise, refs/remotes/<refname> if it exists; otherwise, refs/remotes/<refname>/HEAD if it exists. HEAD names the commit on which you based the changes in the working tree. FETCH_HEAD records the branch which you fetched from a remote repository with\nyour last git fetch invocation. ORIG_HEAD is created by commands that move your HEAD in a drastic way ( git\nam , git merge , git rebase , git reset ), to record the position\nof the HEAD before their operation, so that you can easily change\nthe tip of the branch back to the state before you ran them. MERGE_HEAD records the commit(s) which you are merging into your branch when you\nrun git merge . REBASE_HEAD during a rebase, records the commit at which the operation is\ncurrently stopped, either because of conflicts or an edit command in\nan interactive rebase. REVERT_HEAD records the commit which you are reverting when you run git revert . CHERRY_PICK_HEAD records the commit which you are cherry-picking when you run git\ncherry-pick . BISECT_HEAD records the current commit to be tested when you run git bisect\n--no-checkout . AUTO_MERGE records a tree object corresponding to the state the ort merge strategy wrote to the working tree when a merge operation\nresulted in conflicts. Note that any of the refs/* cases above may come either from\nthe $GIT_DIR/refs directory or from the $GIT_DIR/packed-refs file.\nWhile the ref name encoding is unspecified, UTF-8 is preferred as\nsome output processing may assume ref names in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  @"}, {"role": "assistant", "content": "@ alone is a shortcut for HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  [<refname>]@{<date>} , e.g. master@{yesterday} , HEAD@{5 minutes ago}"}, {"role": "assistant", "content": "A ref followed by the suffix @ with a date specification\nenclosed in a brace\npair (e.g. {yesterday} , {1 month 2 weeks 3 days 1 hour 1\nsecond ago} or {1979-02-26 18:30:00} ) specifies the value\nof the ref at a prior point in time.  This suffix may only be\nused immediately following a ref name and the ref must have an\nexisting log ( $GIT_DIR/logs/<ref> ). Note that this looks up the state\nof your local ref at a given time; e.g., what was in your local master branch last week. If you want to look at commits made during\ncertain times, see --since and --until ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <refname>@{<n>} , e.g. master@{1}"}, {"role": "assistant", "content": "A ref followed by the suffix @ with an ordinal specification\nenclosed in a brace pair (e.g. {1} , {15} ) specifies\nthe n-th prior value of that ref.  For example master@{1} is the immediate prior value of master while master@{5} is the 5th prior value of master . This suffix may only be used\nimmediately following a ref name and the ref must have an existing\nlog ( $GIT_DIR/logs/<refname> )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  @{<n>} , e.g. @{1}"}, {"role": "assistant", "content": "You can use the @ construct with an empty ref part to get at a\nreflog entry of the current branch. For example, if you are on\nbranch blabla then @{1} means the same as blabla@{1} ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  @{-<n>} , e.g. @{-1}"}, {"role": "assistant", "content": "The construct @{-<n>} means the <n>th branch/commit checked out\nbefore the current one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  [<branchname>]@{upstream} , e.g. master@{upstream} , @{u}"}, {"role": "assistant", "content": "A branch B may be set up to build on top of a branch X (configured with branch.<name>.merge ) at a remote R (configured with branch.<name>.remote ). B@{u} refers to the remote-tracking branch for\nthe branch X taken from remote R, typically found at refs/remotes/R/X ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  [<branchname>]@{push} , e.g. master@{push} , @{push}"}, {"role": "assistant", "content": "The suffix @{push} reports the branch \"where we would push to\" if git push were run while branchname was checked out (or the current HEAD if no branchname is specified). Like for @{upstream} , we report\nthe remote-tracking branch that corresponds to that branch at the remote. Here’s an example to make it more clear: $ git config push.default current\n$ git config remote.pushdefault myfork\n$ git switch -c mybranch origin/master\n\n$ git rev-parse --symbolic-full-name @{upstream}\nrefs/remotes/origin/master\n\n$ git rev-parse --symbolic-full-name @{push}\nrefs/remotes/myfork/mybranch Note in the example that we set up a triangular workflow, where we pull\nfrom one location and push to another. In a non-triangular workflow, @{push} is the same as @{upstream} , and there is no need for it. This suffix is also accepted when spelled in uppercase, and means the same\nthing no matter the case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^[<n>] , e.g. HEAD^, v1.5.1^0"}, {"role": "assistant", "content": "A suffix ^ to a revision parameter means the first parent of\nthat commit object. ^<n> means the <n>th parent (i.e. <rev>^ is equivalent to <rev>^1 ).  As a special rule, <rev>^0 means the commit itself and is used when <rev> is the\nobject name of a tag object that refers to a commit object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>~[<n>] , e.g. HEAD~, master~3"}, {"role": "assistant", "content": "A suffix ~ to a revision parameter means the first parent of\nthat commit object.\nA suffix ~<n> to a revision parameter means the commit\nobject that is the <n>th generation ancestor of the named\ncommit object, following only the first parents.  I.e. <rev>~3 is\nequivalent to <rev>^^^ which is equivalent to <rev>^1^1^1 .  See below for an illustration of\nthe usage of this form."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^{<type>} , e.g. v0.99.8^{commit}"}, {"role": "assistant", "content": "A suffix ^ followed by an object type name enclosed in\nbrace pair means dereference the object at <rev> recursively until\nan object of type <type> is found or the object cannot be\ndereferenced anymore (in which case, barf).\nFor example, if <rev> is a commit-ish, <rev>^{commit} describes the corresponding commit object.\nSimilarly, if <rev> is a tree-ish, <rev>^{tree} describes the corresponding tree object. <rev>^0 is a short-hand for <rev>^{commit} . <rev>^{object} can be used to make sure <rev> names an\nobject that exists, without requiring <rev> to be a tag, and\nwithout dereferencing <rev> ; because a tag is already an object,\nit does not have to be dereferenced even once to get to an object. <rev>^{tag} can be used to ensure that <rev> identifies an\nexisting tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^{} , e.g. v0.99.8^{}"}, {"role": "assistant", "content": "A suffix ^ followed by an empty brace pair\nmeans the object could be a tag,\nand dereference the tag recursively until a non-tag object is\nfound."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^{/<text>} , e.g. HEAD^{/fix nasty bug}"}, {"role": "assistant", "content": "A suffix ^ to a revision parameter, followed by a brace\npair that contains a text led by a slash,\nis the same as the :/fix nasty bug syntax below except that\nit returns the youngest matching commit which is reachable from\nthe <rev> before ^ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  :/<text> , e.g. :/fix nasty bug"}, {"role": "assistant", "content": "A colon, followed by a slash, followed by a text, names\na commit whose commit message matches the specified regular expression.\nThis name returns the youngest matching commit which is\nreachable from any ref, including HEAD.\nThe regular expression can match any part of the\ncommit message. To match messages starting with a string, one can use\ne.g. :/^foo . The special sequence :/! is reserved for modifiers to what\nis matched. :/!-foo performs a negative match, while :/!!foo matches a\nliteral ! character, followed by foo . Any other sequence beginning with :/! is reserved for now.\nDepending on the given text, the shell’s word splitting rules might\nrequire additional quoting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>:<path> , e.g. HEAD:README , master:./README"}, {"role": "assistant", "content": "A suffix : followed by a path names the blob or tree\nat the given path in the tree-ish object named by the part\nbefore the colon.\nA path starting with ./ or ../ is relative to the current working directory.\nThe given path will be converted to be relative to the working tree’s root directory.\nThis is most useful to address a blob or tree from a commit or tree that has\nthe same tree structure as the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  :[<n>:]<path> , e.g. :0:README , :README"}, {"role": "assistant", "content": "A colon, optionally followed by a stage number (0 to 3) and a\ncolon, followed by a path, names a blob object in the\nindex at the given path. A missing stage number (and the colon\nthat follows it) names a stage 0 entry. During a merge, stage\n1 is the common ancestor, stage 2 is the target branch’s version\n(typically the current branch), and stage 3 is the version from\nthe branch which is being merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  HEAD"}, {"role": "assistant", "content": "names the commit on which you based the changes in the working tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  FETCH_HEAD"}, {"role": "assistant", "content": "records the branch which you fetched from a remote repository with\nyour last git fetch invocation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  ORIG_HEAD"}, {"role": "assistant", "content": "is created by commands that move your HEAD in a drastic way ( git\nam , git merge , git rebase , git reset ), to record the position\nof the HEAD before their operation, so that you can easily change\nthe tip of the branch back to the state before you ran them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  MERGE_HEAD"}, {"role": "assistant", "content": "records the commit(s) which you are merging into your branch when you\nrun git merge ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  REBASE_HEAD"}, {"role": "assistant", "content": "during a rebase, records the commit at which the operation is\ncurrently stopped, either because of conflicts or an edit command in\nan interactive rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  REVERT_HEAD"}, {"role": "assistant", "content": "records the commit which you are reverting when you run git revert ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  CHERRY_PICK_HEAD"}, {"role": "assistant", "content": "records the commit which you are cherry-picking when you run git\ncherry-pick ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  BISECT_HEAD"}, {"role": "assistant", "content": "records the current commit to be tested when you run git bisect\n--no-checkout ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  AUTO_MERGE"}, {"role": "assistant", "content": "records a tree object corresponding to the state the ort merge strategy wrote to the working tree when a merge operation\nresulted in conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  ^<rev> (caret) Notation"}, {"role": "assistant", "content": "To exclude commits reachable from a commit, a prefix ^ notation is used.  E.g. ^r1 r2 means commits reachable\nfrom r2 but exclude the ones reachable from r1 (i.e. r1 and\nits ancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  The .. (two-dot) Range Notation"}, {"role": "assistant", "content": "The ^r1 r2 set operation appears so often that there is a shorthand\nfor it.  When you have two commits r1 and r2 (named according\nto the syntax explained in SPECIFYING REVISIONS above), you can ask\nfor commits that are reachable from r2 excluding those that are reachable\nfrom r1 by ^r1 r2 and it can be written as r1..r2 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  The ... (three-dot) Symmetric Difference Notation"}, {"role": "assistant", "content": "A similar notation r1...r2 is called symmetric difference\nof r1 and r2 and is defined as r1 r2 --not $(git merge-base --all r1 r2) .\nIt is the set of commits that are reachable from either one of r1 (left side) or r2 (right side) but not from both."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>"}, {"role": "assistant", "content": "Include commits that are reachable from <rev> (i.e. <rev> and its\nancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  ^<rev>"}, {"role": "assistant", "content": "Exclude commits that are reachable from <rev> (i.e. <rev> and its\nancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev1>..<rev2>"}, {"role": "assistant", "content": "Include commits that are reachable from <rev2> but exclude\nthose that are reachable from <rev1>.  When either <rev1> or\n<rev2> is omitted, it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev1>...<rev2>"}, {"role": "assistant", "content": "Include commits that are reachable from either <rev1> or\n<rev2> but exclude those that are reachable from both.  When\neither <rev1> or <rev2> is omitted, it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^@ , e.g. HEAD^@"}, {"role": "assistant", "content": "A suffix ^ followed by an at sign is the same as listing\nall parents of <rev> (meaning, include anything reachable from\nits parents, but not the commit itself)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^! , e.g. HEAD^!"}, {"role": "assistant", "content": "A suffix ^ followed by an exclamation mark is the same\nas giving commit <rev> and all its parents prefixed with ^ to exclude them (and their ancestors)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <rev>^-<n> , e.g. HEAD^-, HEAD^-2"}, {"role": "assistant", "content": "Equivalent to <rev>^<n>..<rev> , with <n> = 1 if not\ngiven."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <opt-spec>"}, {"role": "assistant", "content": "its format is the short option character, then the long option name\nseparated by a comma. Both parts are not required, though at least one\nis necessary. May not contain any of the <flags> characters. h,help , dry-run and f are examples of correct <opt-spec> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <flags>"}, {"role": "assistant", "content": "<flags> are of * , = , ? or ! . Use = if the option takes an argument. Use ? to mean that the option takes an optional argument. You\nprobably want to use the --stuck-long mode to be able to\nunambiguously parse the optional argument. Use * to mean that this option should not be listed in the usage\ngenerated for the -h argument. It’s shown for --help-all as\ndocumented in gitcli . Use ! to not make the corresponding negated long option available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  <arg-hint>"}, {"role": "assistant", "content": "<arg-hint> , if specified, is used as a name of the argument in the\nhelp output, for options that take arguments. <arg-hint> is\nterminated by the first whitespace.  It is customary to use a\ndash to separate words in a multi-word argument hint."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters"}, {"role": "assistant", "content": "SQ-QUOTE In --sq-quote mode, git rev-parse echoes on the standard output a\nsingle line suitable for sh(1) eval . This line is made by\nnormalizing the arguments following --sq-quote . Nothing other than\nquoting the arguments is done. If you want command input to still be interpreted as usual by git rev-parse before the output is shell quoted, see the --sq option. Example $ cat >your-git-script.sh <<\\EOF\n#!/bin/sh\nargs=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\ncommand=\"git frotz -n24 $args\"          # and use it inside a handcrafted\n\t\t\t\t\t# command line\neval \"$command\"\nEOF\n\n$ sh your-git-script.sh \"a b'c\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters"}, {"role": "assistant", "content": "EXAMPLES Print the object name of the current commit: $ git rev-parse --verify HEAD Print the commit object name from the revision in the $REV shell variable: $ git rev-parse --verify --end-of-options $REV^{commit} This will error out if $REV is empty or not a valid revision. Similar to above: $ git rev-parse --default master --verify --end-of-options $REV but if $REV is empty, the commit object name from master will be printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "NAME git-show-ref - List references in a local repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "SYNOPSIS git show-ref [--head] [-d | --dereference]\n\t     [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags]\n\t     [--heads] [--] [<pattern>…​] git show-ref --verify [-q | --quiet] [-d | --dereference]\n\t     [-s | --hash[=<n>]] [--abbrev[=<n>]]\n\t     [--] [<ref>…​] git show-ref --exclude-existing[=<pattern>] git show-ref --exists <ref>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "DESCRIPTION Displays references available in a local repository along with the associated\ncommit IDs. Results can be filtered using a pattern and tags can be\ndereferenced into object IDs. Additionally, it can be used to test whether a\nparticular ref exists. By default, shows the tags, heads, and remote refs. The --exclude-existing form is a filter that does the inverse. It reads\nrefs from stdin, one ref per line, and shows those that don’t exist in\nthe local repository. The --exists form can be used to check for the existence of a single\nreferences. This form does not verify whether the reference resolves to an\nactual object. Use of this utility is encouraged in favor of directly accessing files under\nthe .git directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --head"}, {"role": "assistant", "content": "Show the HEAD reference, even if it would normally be filtered out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --heads  --tags"}, {"role": "assistant", "content": "Limit to \"refs/heads\" and \"refs/tags\", respectively.  These options\nare not mutually exclusive; when given both, references stored in\n\"refs/heads\" and \"refs/tags\" are displayed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  -d  --dereference"}, {"role": "assistant", "content": "Dereference tags into object IDs as well. They will be shown with ^{} appended."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  -s  --hash[=<n>]"}, {"role": "assistant", "content": "Only show the OID, not the reference name. When combined with --dereference , the dereferenced tag will still be shown after the OID."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --verify"}, {"role": "assistant", "content": "Enable stricter reference checking by requiring an exact ref path.\nAside from returning an error code of 1, it will also print an error\nmessage if --quiet was not specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --exists"}, {"role": "assistant", "content": "Check whether the given reference exists. Returns an exit code of 0 if\nit does, 2 if it is missing, and 1 in case looking up the reference\nfailed with an error other than the reference being missing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --abbrev[=<n>]"}, {"role": "assistant", "content": "Abbreviate the object name.  When using --hash , you do\nnot have to say --hash --abbrev ; --hash=n would do."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  -q  --quiet"}, {"role": "assistant", "content": "Do not print any results to stdout. Can be used with --verify to\nsilently check if a reference exists."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  --exclude-existing[=<pattern>]"}, {"role": "assistant", "content": "Make git show-ref act as a filter that reads refs from stdin of the\nform ^(?:<anything>\\s)?<refname>(?:\\^{})?$ and performs the following actions on each:\n(1) strip ^{} at the end of line if any;\n(2) ignore if pattern is provided and does not head-match refname;\n(3) warn if refname is not a well-formed refname and skip;\n(4) ignore if refname is a ref that exists in the local repository;\n(5) otherwise output the line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository  <pattern>…​"}, {"role": "assistant", "content": "Show references matching one or more patterns. Patterns are matched from\nthe end of the full name, and only complete parts are matched, e.g. master matches refs/heads/master , refs/remotes/origin/master , refs/tags/jedi/master but not refs/heads/mymaster or refs/remotes/master/jedi ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "OUTPUT The output is in the format: <oid> SP <ref> LF For example, $ git show-ref --head --dereference\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin\n3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c\n6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^{}\n055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4\n423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^{}\n... When using --hash (and not --dereference ), the output is in the format: <oid> LF For example, $ git show-ref --heads --hash\n2e3ba0114a1f52b47df29743d6915d056be13278\n185008ae97960c8d551adcd9e23565194651b5d1\n03adf42c988195b50e1a1935ba5fcbc39b2b029b\n..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "EXAMPLES To show all references called \"master\", whether tags or heads or anything\nelse, and regardless of how deep in the reference naming hierarchy they are,\nuse: git show-ref master This will show \"refs/heads/master\" but also \"refs/remote/other-repo/master\",\nif such references exist. When using the --verify flag, the command requires an exact path: git show-ref --verify refs/heads/master will only match the exact branch called \"master\". If nothing matches, git show-ref will return an error code of 1,\nand in the case of verification, it will show an error message. For scripting, you can ask it to be quiet with the --quiet flag, which\nallows you to do things like git show-ref --quiet --verify -- \"refs/heads/$headname\" ||\n\t\techo \"$headname is not a valid branch\" to check whether a particular branch exists or not (notice how we don’t\nactually want to show any results, and we want to use the full refname for it\nin order to not trigger the problem with ambiguous partial matches). To show only tags, or only proper branch heads, use --tags and/or --heads respectively (using both means that it shows tags and heads, but not other\nrandom references under the refs/ subdirectory). To do automatic tag object dereferencing, use the -d or --dereference flag, so you can do git show-ref --tags --dereference to get a listing of all tags together with what they dereference."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "FILES .git/refs/* , .git/packed-refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "NAME git-symbolic-ref - Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "SYNOPSIS git symbolic-ref [-m <reason>] <name> <ref> git symbolic-ref [-q] [--short] [--no-recurse] <name> git symbolic-ref --delete [-q] <name>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "DESCRIPTION Given one argument, reads which branch head the given symbolic\nref refers to and outputs its path, relative to the .git/ directory.  Typically you would give HEAD as the <name>\nargument to see which branch your working tree is on. Given two arguments, creates or updates a symbolic ref <name> to\npoint at the given branch <ref>. Given --delete and an additional argument, deletes the given\nsymbolic ref. A symbolic ref is a regular file that stores a string that\nbegins with ref: refs/ .  For example, your .git/HEAD is\na regular file whose content is ref: refs/heads/master ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  -d  --delete"}, {"role": "assistant", "content": "Delete the symbolic ref <name>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  -q  --quiet"}, {"role": "assistant", "content": "Do not issue an error message if the <name> is not a\nsymbolic ref but a detached HEAD; instead exit with\nnon-zero status silently."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  --short"}, {"role": "assistant", "content": "When showing the value of <name> as a symbolic ref, try to shorten the\nvalue, e.g. from refs/heads/master to master ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  --recurse  --no-recurse"}, {"role": "assistant", "content": "When showing the value of <name> as a symbolic ref, if\n<name> refers to another symbolic ref, follow such a chain\nof symbolic refs until the result no longer points at a\nsymbolic ref ( --recurse , which is the default). --no-recurse stops after dereferencing only a single level\nof symbolic ref."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  -m"}, {"role": "assistant", "content": "Update the reflog for <name> with <reason>.  This is valid only\nwhen creating or updating a symbolic ref."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "NOTES In the past, .git/HEAD was a symbolic link pointing at refs/heads/master .  When we wanted to switch to another branch,\nwe did ln -sf refs/heads/newbranch .git/HEAD , and when we wanted\nto find out which branch we are on, we did readlink .git/HEAD .\nBut symbolic links are not entirely portable, so they are now\ndeprecated and symbolic refs (as described above) are used by\ndefault. git symbolic-ref will exit with status 0 if the contents of the\nsymbolic ref were printed correctly, with status 1 if the requested\nname is not a symbolic ref, or 128 if another error occurs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "NAME git-update-index - Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "SYNOPSIS git update-index [--add] [--remove | --force-remove] [--replace]\n\t     [--refresh] [-q] [--unmerged] [--ignore-missing]\n\t     [(--cacheinfo <mode>,<object>,<file>)…​]\n\t     [--chmod=(+|-)x]\n\t     [--[no-]assume-unchanged]\n\t     [--[no-]skip-worktree]\n\t     [--[no-]ignore-skip-worktree-entries]\n\t     [--[no-]fsmonitor-valid]\n\t     [--ignore-submodules]\n\t     [--[no-]split-index]\n\t     [--[no-|test-|force-]untracked-cache]\n\t     [--[no-]fsmonitor]\n\t     [--really-refresh] [--unresolve] [--again | -g]\n\t     [--info-only] [--index-info]\n\t     [-z] [--stdin] [--index-version <n>]\n\t     [--verbose]\n\t     [--] [<file>…​]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "DESCRIPTION Modifies the index. Each file mentioned is updated into the index and\nany unmerged or needs updating state is cleared. See also git-add for a more user-friendly way to do some of\nthe most common operations on the index. The way git update-index handles files it is told about can be modified\nusing the various options:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --add"}, {"role": "assistant", "content": "If a specified file isn’t in the index already then it’s\nadded.\nDefault behaviour is to ignore new files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --remove"}, {"role": "assistant", "content": "If a specified file is in the index but is missing then it’s\nremoved.\nDefault behavior is to ignore removed files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --refresh"}, {"role": "assistant", "content": "Looks at the current index and checks to see if merges or\nupdates are needed by checking stat() information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  -q"}, {"role": "assistant", "content": "Quiet.  If --refresh finds that the index needs an update, the\n       default behavior is to error out.  This option makes git update-index continue anyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --ignore-submodules"}, {"role": "assistant", "content": "Do not try to update submodules.  This option is only respected\nwhen passed before --refresh."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --unmerged"}, {"role": "assistant", "content": "If --refresh finds unmerged changes in the index, the default\nbehavior is to error out.  This option makes git update-index continue anyway."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --ignore-missing"}, {"role": "assistant", "content": "Ignores missing files during a --refresh"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --cacheinfo <mode>,<object>,<path>  --cacheinfo <mode> <object> <path>"}, {"role": "assistant", "content": "Directly insert the specified info into the index.  For\nbackward compatibility, you can also give these three\narguments as three separate parameters, but new users are\nencouraged to use a single-parameter form."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --index-info"}, {"role": "assistant", "content": "Read index information from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --chmod=(+|-)x"}, {"role": "assistant", "content": "Set the execute permissions on the updated files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --[no-]assume-unchanged"}, {"role": "assistant", "content": "When this flag is specified, the object names recorded\nfor the paths are not updated.  Instead, this option\nsets/unsets the \"assume unchanged\" bit for the\npaths.  When the \"assume unchanged\" bit is on, the user\npromises not to change the file and allows Git to assume\nthat the working tree file matches what is recorded in\nthe index.  If you want to change the working tree file,\nyou need to unset the bit to tell Git.  This is\nsometimes helpful when working with a big project on a\nfilesystem that has a very slow lstat(2) system call\n(e.g. cifs). Git will fail (gracefully) in case it needs to modify this file\nin the index e.g. when merging in a commit;\nthus, in case the assumed-untracked file is changed upstream,\nyou will need to handle the situation manually."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --really-refresh"}, {"role": "assistant", "content": "Like --refresh , but checks stat information unconditionally,\nwithout regard to the \"assume unchanged\" setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --[no-]skip-worktree"}, {"role": "assistant", "content": "When one of these flags is specified, the object names recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"skip-worktree\" bit for the paths. See\nsection \"Skip-worktree bit\" below for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --[no-]ignore-skip-worktree-entries"}, {"role": "assistant", "content": "Do not remove skip-worktree (AKA \"index-only\") entries even when\nthe --remove option was specified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --[no-]fsmonitor-valid"}, {"role": "assistant", "content": "When one of these flags is specified, the object names recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"fsmonitor valid\" bit for the paths. See\nsection \"File System Monitor\" below for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  -g  --again"}, {"role": "assistant", "content": "Runs git update-index itself on the paths whose index\nentries are different from those of the HEAD commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --unresolve"}, {"role": "assistant", "content": "Restores the unmerged or needs updating state of a\nfile during a merge if it was cleared by accident."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --info-only"}, {"role": "assistant", "content": "Do not create objects in the object database for all\n<file> arguments that follow this flag; just insert\ntheir object IDs into the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --force-remove"}, {"role": "assistant", "content": "Remove the file from the index even when the working directory\nstill has such a file. (Implies --remove.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --replace"}, {"role": "assistant", "content": "By default, when a file path exists in the index, git update-index refuses an attempt to add path/file .\nSimilarly if a file path/file exists, a file path cannot be added.  With --replace flag, existing entries\nthat conflict with the entry being added are\nautomatically removed with warning messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --stdin"}, {"role": "assistant", "content": "Instead of taking a list of paths from the command line,\nread a list of paths from the standard input.  Paths are\nseparated by LF (i.e. one path per line) by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --verbose"}, {"role": "assistant", "content": "Report what is being added and removed from the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --index-version <n>"}, {"role": "assistant", "content": "Write the resulting index out in the named on-disk format version.\nSupported versions are 2, 3, and 4. The current default version is 2\nor 3, depending on whether extra features are used, such as git add -N .  With --verbose , also report the version the index\nfile uses before and after this command. Version 4 performs a simple pathname compression that reduces index\nsize by 30%-50% on large repositories, which results in faster load\ntime.  Git supports it since version 1.8.0, released in October 2012,\nand support for it was added to libgit2 in 2016 and to JGit in 2020.\nOlder versions of this manual page called it \"relatively young\", but\nit should be considered mature technology these days."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --show-index-version"}, {"role": "assistant", "content": "Report the index format version used by the on-disk index file.\nSee --index-version above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  -z"}, {"role": "assistant", "content": "Only meaningful with --stdin or --index-info ; paths are\nseparated with NUL character instead of LF."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --split-index  --no-split-index"}, {"role": "assistant", "content": "Enable or disable split index mode. If split-index mode is\nalready enabled and --split-index is given again, all\nchanges in $GIT_DIR/index are pushed back to the shared index\nfile. These options take effect whatever the value of the core.splitIndex configuration variable (see git-config ). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --untracked-cache  --no-untracked-cache"}, {"role": "assistant", "content": "Enable or disable untracked cache feature. Please use --test-untracked-cache before enabling it. These options take effect whatever the value of the core.untrackedCache configuration variable (see git-config ). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --test-untracked-cache"}, {"role": "assistant", "content": "Only perform tests on the working directory to make sure\nuntracked cache can be used. You have to manually enable\nuntracked cache using --untracked-cache or --force-untracked-cache or the core.untrackedCache configuration variable afterwards if you really want to use\nit. If a test fails the exit code is 1 and a message\nexplains what is not working as needed, otherwise the exit\ncode is 0 and OK is printed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --force-untracked-cache"}, {"role": "assistant", "content": "Same as --untracked-cache . Provided for backwards\ncompatibility with older versions of Git where --untracked-cache used to imply --test-untracked-cache but\nthis option would enable the extension unconditionally."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --fsmonitor  --no-fsmonitor"}, {"role": "assistant", "content": "Enable or disable files system monitor feature. These options\ntake effect whatever the value of the core.fsmonitor configuration variable (see git-config ). But a warning\nis emitted when the change goes against the configured value, as\nthe configured value will take effect next time the index is\nread and this will remove the intended effect of the option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  <file>"}, {"role": "assistant", "content": "Files to act on.\nNote that files beginning with . are discarded. This includes ./file and dir/./file . If you don’t want this, then use\ncleaner names.\nThe same applies to directories ending / and paths with //"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "USING --REFRESH --refresh does not calculate a new sha1 file or bring the index\nup to date for mode/content changes. But what it does do is to\n\"re-match\" the stat information of a file with the index, so that you\ncan refresh the index for a file that hasn’t been changed but where\nthe stat entry is out of date. For example, you’d want to do this after doing a git read-tree , to link\nup the stat index details with the proper files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "USING --CACHEINFO OR --INFO-ONLY --cacheinfo is used to register a file that is not in the\ncurrent working directory.  This is useful for minimum-checkout\nmerging. To pretend you have a file at path with mode and sha1, say: $ git update-index --add --cacheinfo <mode>,<sha1>,<path> --info-only is used to register files without placing them in the object\ndatabase.  This is useful for status-only repositories. Both --cacheinfo and --info-only behave similarly: the index is updated\nbut the object database isn’t. --cacheinfo is useful when the object is\nin the database but the file isn’t available locally. --info-only is\nuseful when the file is available, but you do not wish to update the\nobject database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "USING --INDEX-INFO --index-info is a more powerful mechanism that lets you feed\nmultiple entry definitions from the standard input, and designed\nspecifically for scripts.  It can take inputs of three formats: mode SP type SP sha1          TAB path This format is to stuff git ls-tree output into the index. mode         SP sha1 SP stage TAB path This format is to put higher order stages into the\nindex file and matches git ls-files --stage output. mode         SP sha1          TAB path This format is no longer produced by any Git command, but is\nand will continue to be supported by update-index --index-info . To place a higher stage entry to the index, the path should\nfirst be removed by feeding a mode=0 entry for the path, and\nthen feeding necessary input lines in the third format. For example, starting with this index: $ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz you can feed the following input to --index-info : $ git update-index --index-info\n0 0000000000000000000000000000000000000000\tfrotz\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1\tfrotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2\tfrotz The first line of the input feeds 0 as the mode to remove the\npath; the SHA-1 does not matter as long as it is well formatted.\nThen the second and third line feeds stage 1 and stage 2 entries\nfor that path.  After the above, we would end up with this: $ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1\tfrotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2\tfrotz"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "USING “ASSUME UNCHANGED” BIT Many operations in Git depend on your filesystem to have an\nefficient lstat(2) implementation, so that st_mtime information for working tree files can be cheaply checked to see\nif the file contents have changed from the version recorded in\nthe index file.  Unfortunately, some filesystems have\ninefficient lstat(2) .  If your filesystem is one of them, you\ncan set \"assume unchanged\" bit to paths you have not changed to\ncause Git not to do this check.  Note that setting this bit on a\npath does not mean Git will check the contents of the file to\nsee if it has changed — it makes Git to omit any checking and\nassume it has not changed.  When you make changes to working\ntree files, you have to explicitly tell Git about it by dropping\n\"assume unchanged\" bit, either before or after you modify them. In order to set \"assume unchanged\" bit, use --assume-unchanged option.  To unset, use --no-assume-unchanged . To see which files\nhave the \"assume unchanged\" bit set, use git ls-files -v (see git-ls-files ). The command looks at core.ignorestat configuration variable.  When\nthis is true, paths updated with git update-index paths... and\npaths updated with other Git commands that update both index and\nworking tree (e.g. git apply --index , git checkout-index -u ,\nand git read-tree -u ) are automatically marked as \"assume\nunchanged\".  Note that \"assume unchanged\" bit is not set if git update-index --refresh finds the working tree file matches\nthe index (use git update-index --really-refresh if you want\nto mark them as \"assume unchanged\"). Sometimes users confuse the assume-unchanged bit with the\nskip-worktree bit.  See the final paragraph in the \"Skip-worktree bit\"\nsection below for an explanation of the differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  On an inefficient filesystem with core.ignorestat set"}, {"role": "assistant", "content": "$ git update-index --really-refresh (1) $ git update-index --no-assume-unchanged foo.c (2) $ git diff --name-only (3) $ edit foo.c\n$ git diff --name-only (4) M foo.c\n$ git update-index foo.c (5) $ git diff --name-only (6) $ edit foo.c\n$ git diff --name-only (7) $ git update-index --no-assume-unchanged foo.c (8) $ git diff --name-only (9) M foo.c forces lstat(2) to set \"assume unchanged\" bits for paths that match index. mark the path to be edited. this does lstat(2) and finds index matches the path. this does lstat(2) and finds index does not match the path. registering the new version to index sets \"assume unchanged\" bit. and it is assumed unchanged. even after you edit it. you can tell about the change after the fact. now it checks with lstat(2) and finds it has been changed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "SKIP-WORKTREE BIT Skip-worktree bit can be defined in one (long) sentence: Tell git to\navoid writing the file to the working directory when reasonably\npossible, and treat the file as unchanged when it is not\npresent in the working directory. Note that not all git commands will pay attention to this bit, and\nsome only partially support it. The update-index flags and the read-tree capabilities relating to the\nskip-worktree bit predated the introduction of the git-sparse-checkout command, which provides a much easier\nway to configure and handle the skip-worktree bits.  If you want to\nreduce your working tree to only deal with a subset of the files in\nthe repository, we strongly encourage the use of git-sparse-checkout in preference to the low-level\nupdate-index and read-tree primitives. The primary purpose of the skip-worktree bit is to enable sparse\ncheckouts, i.e. to have working directories with only a subset of\npaths present.  When the skip-worktree bit is set, Git commands (such\nas switch , pull , merge ) will avoid writing these files.\nHowever, these commands will sometimes write these files anyway in\nimportant cases such as conflicts during a merge or rebase.  Git\ncommands will also avoid treating the lack of such files as an\nintentional deletion; for example git add -u will not stage a\ndeletion for these files and git commit -a will not make a commit\ndeleting them either. Although this bit looks similar to assume-unchanged bit, its goal is\ndifferent.  The assume-unchanged bit is for leaving the file in the\nworking tree but having Git omit checking it for changes and presuming\nthat the file has not been changed (though if it can determine without\nstat’ing the file that it has changed, it is free to record the\nchanges).  skip-worktree tells Git to ignore the absence of the file,\navoid updating it when possible with commands that normally update\nmuch of the working directory (e.g. checkout , switch , pull ,\netc.), and not have its absence be recorded in commits.  Note that in\nsparse checkouts (setup by git sparse-checkout or by configuring\ncore.sparseCheckout to true), if a file is marked as skip-worktree in\nthe index but is found in the working tree, Git will clear the\nskip-worktree bit for that file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "SPLIT INDEX This mode is designed for repositories with very large indexes, and\naims at reducing the time it takes to repeatedly write these indexes. In this mode, the index is split into two files, $GIT_DIR/index and\n$GIT_DIR/sharedindex.<SHA-1>. Changes are accumulated in\n$GIT_DIR/index, the split index, while the shared index file contains\nall index entries and stays unchanged. All changes in the split index are pushed back to the shared index\nfile when the number of entries in the split index reaches a level\nspecified by the splitIndex.maxPercentChange config variable (see git-config ). Each time a new shared index file is created, the old shared index\nfiles are deleted if their modification time is older than what is\nspecified by the splitIndex.sharedIndexExpire config variable (see git-config ). To avoid deleting a shared index file that is still used, its\nmodification time is updated to the current time every time a new split\nindex based on the shared index file is either created or read from."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "UNTRACKED CACHE This cache is meant to speed up commands that involve determining\nuntracked files such as git status . This feature works by recording the mtime of the working tree\ndirectories and then omitting reading directories and stat calls\nagainst files in those directories whose mtime hasn’t changed. For\nthis to work the underlying operating system and file system must\nchange the st_mtime field of directories if files in the directory\nare added, modified or deleted. You can test whether the filesystem supports that with the --test-untracked-cache option. The --untracked-cache option used\nto implicitly perform that test in older versions of Git, but that’s\nno longer the case. If you want to enable (or disable) this feature, it is easier to use\nthe core.untrackedCache configuration variable (see git-config ) than using the --untracked-cache option to git update-index in each repository, especially if you want to do so\nacross all repositories you use, because you can set the configuration\nvariable to true (or false ) in your $HOME/.gitconfig just once\nand have it affect all repositories you touch. When the core.untrackedCache configuration variable is changed, the\nuntracked cache is added to or removed from the index the next time a\ncommand reads the index; while when --[no-|force-]untracked-cache are used, the untracked cache is immediately added to or removed from\nthe index. Before 2.17, the untracked cache had a bug where replacing a directory\nwith a symlink to another directory could cause it to incorrectly show\nfiles tracked by git as untracked. See the \"status: add a failing test\nshowing a core.untrackedCache bug\" commit to git.git. A workaround for\nthat is (and this might work for other undiscovered bugs in the\nfuture): $ git -c core.untrackedCache=false status This bug has also been shown to affect non-symlink cases of replacing\na directory with a file when it comes to the internal structures of\nthe untracked cache, but no case has been reported where this resulted in\nwrong \"git status\" output. There are also cases where existing indexes written by git versions\nbefore 2.17 will reference directories that don’t exist anymore,\npotentially causing many \"could not open directory\" warnings to be\nprinted on \"git status\". These are new warnings for existing issues\nthat were previously silently discarded. As with the bug described above the solution is to one-off do a \"git\nstatus\" run with core.untrackedCache=false to flush out the leftover\nbad data."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "FILE SYSTEM MONITOR This feature is intended to speed up git operations for repos that have\nlarge working directories. It enables git to work together with a file system monitor (see git-fsmonitor--daemon and the\n\"fsmonitor-watchman\" section of githooks ) that can\ninform it as to what files have been modified. This enables git to avoid\nhaving to lstat() every file to find modified files. When used in conjunction with the untracked cache, it can further improve\nperformance by avoiding the cost of scanning the entire working directory\nlooking for new files. If you want to enable (or disable) this feature, it is easier to use\nthe core.fsmonitor configuration variable (see git-config ) than using the --fsmonitor option to git\nupdate-index in each repository, especially if you want to do so\nacross all repositories you use, because you can set the configuration\nvariable in your $HOME/.gitconfig just once and have it affect all\nrepositories you touch. When the core.fsmonitor configuration variable is changed, the\nfile system monitor is added to or removed from the index the next time\na command reads the index. When --[no-]fsmonitor are used, the file\nsystem monitor is immediately added to or removed from the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "CONFIGURATION The command honors core.filemode configuration variable.  If\nyour repository is on a filesystem whose executable bits are\nunreliable, this should be set to false (see git-config ).\nThis causes the command to ignore differences in file modes recorded\nin the index and the file mode on the filesystem if they differ only on\nexecutable bit.   On such an unfortunate filesystem, you may\nneed to use git update-index --chmod= . Quite similarly, if core.symlinks configuration variable is set\nto false (see git-config ), symbolic links are checked out\nas plain files, and this command does not modify a recorded file mode\nfrom symbolic link to regular file. The command looks at core.ignorestat configuration variable.  See Using \"assume unchanged\" bit section above. The command also looks at core.trustctime configuration variable.\nIt can be useful when the inode change time is regularly modified by\nsomething outside Git (file system crawlers and backup systems use\nctime for marking files processed) (see git-config ). The untracked cache extension can be enabled by the core.untrackedCache configuration variable (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index"}, {"role": "assistant", "content": "NOTES Users often try to use the assume-unchanged and skip-worktree bits\nto tell Git to ignore changes to files that are tracked.  This does not\nwork as expected, since Git may still check working tree files against\nthe index when performing certain operations.  In general, Git does not\nprovide a way to ignore changes to tracked files, so alternate solutions\nare recommended. For example, if the file you want to change is some sort of config file,\nthe repository can include a sample config file that can then be copied\ninto the ignored name and modified.  The repository can even include a\nscript to treat the sample file as a template, modifying and copying it\nautomatically."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely"}, {"role": "assistant", "content": "NAME git-update-ref - Update the object name stored in a ref safely"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely"}, {"role": "assistant", "content": "SYNOPSIS git update-ref [-m <reason>] [--no-deref] (-d <ref> [<old-oid>] | [--create-reflog] <ref> <new-oid> [<old-oid>] | --stdin [-z])"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  update"}, {"role": "assistant", "content": "Set <ref> to <new-oid> after verifying <old-oid>, if given.\nSpecify a zero <new-oid> to ensure the ref does not exist\nafter the update and/or a zero <old-oid> to make sure the\nref does not exist before the update."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  create"}, {"role": "assistant", "content": "Create <ref> with <new-oid> after verifying it does not\nexist.  The given <new-oid> may not be zero."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  delete"}, {"role": "assistant", "content": "Delete <ref> after verifying it exists with <old-oid>, if\ngiven.  If given, <old-oid> may not be zero."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  verify"}, {"role": "assistant", "content": "Verify <ref> against <old-oid> but do not change it.  If\n<old-oid> is zero or missing, the ref must not exist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  option"}, {"role": "assistant", "content": "Modify the behavior of the next command naming a <ref>.\nThe only valid option is no-deref to avoid dereferencing\na symbolic ref."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  start"}, {"role": "assistant", "content": "Start a transaction. In contrast to a non-transactional session, a\ntransaction will automatically abort if the session ends without an\nexplicit commit. This command may create a new empty transaction when\nthe current one has been committed or aborted already."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  prepare"}, {"role": "assistant", "content": "Prepare to commit the transaction. This will create lock files for all\nqueued reference updates. If one reference could not be locked, the\ntransaction will be aborted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  commit"}, {"role": "assistant", "content": "Commit all reference updates queued for the transaction, ending the\ntransaction."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely  abort"}, {"role": "assistant", "content": "Abort the transaction, releasing all locks if the transaction is in\nprepared state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-ref - Update the object name stored in a ref safely"}, {"role": "assistant", "content": "LOGGING UPDATES If config parameter \"core.logAllRefUpdates\" is true and the ref is one\nunder \"refs/heads/\", \"refs/remotes/\", \"refs/notes/\", or a pseudoref\nlike HEAD or ORIG_HEAD; or the file \"$GIT_DIR/logs/<ref>\" exists then git update-ref will append a line to the log file\n\"$GIT_DIR/logs/<ref>\" (dereferencing all symbolic refs before creating\nthe log name) describing the change in ref value.  Log lines are\nformatted as: oldsha1 SP newsha1 SP committer LF Where \"oldsha1\" is the 40 character hexadecimal value previously\nstored in <ref>, \"newsha1\" is the 40 character hexadecimal value of\n<new-oid> and \"committer\" is the committer’s name, email address\nand date in the standard Git committer ident format. Optionally with -m: oldsha1 SP newsha1 SP committer TAB message LF Where all fields are as described above and \"message\" is the\nvalue supplied to the -m option. An update will fail (without changing <ref>) if the current user is\nunable to create a new log file, append to the existing log file\nor does not have committer information available."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "NAME git-verify-pack - Validate packed Git archive files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "SYNOPSIS git verify-pack [-v | --verbose] [-s | --stat-only] [--] <pack>.idx…​"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "DESCRIPTION Reads given idx file for packed Git archive created with the git pack-objects command and verifies the idx file and the\ncorresponding pack file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files  <pack>.idx …​"}, {"role": "assistant", "content": "The idx files to verify."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files  -v  --verbose"}, {"role": "assistant", "content": "After verifying the pack, show the list of objects contained\nin the pack and a histogram of delta chain length."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files  -s  --stat-only"}, {"role": "assistant", "content": "Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose , the list of objects is also shown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "OUTPUT FORMAT When specifying the -v option the format used is: SHA-1 type size size-in-packfile offset-in-packfile for objects that are not deltified in the pack, and SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1 for objects that are deltified."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "NAME git-write-tree - Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "SYNOPSIS git write-tree [--missing-ok] [--prefix=<prefix>/]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "DESCRIPTION Creates a tree object using the current index. The name of the new\ntree object is printed to standard output. The index must be in a fully merged state. Conceptually, git write-tree sync()s the current index contents\ninto a set of tree files.\nIn order to have that match what is actually in your directory right\nnow, you need to have done a git update-index phase before you did the git write-tree ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index  --missing-ok"}, {"role": "assistant", "content": "Normally git write-tree ensures that the objects referenced by the\ndirectory exist in the object database.  This option disables this\ncheck."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index  --prefix=<prefix>/"}, {"role": "assistant", "content": "Writes a tree object that represents a subdirectory <prefix> .  This can be used to write the tree object\nfor a subproject that is in the named subdirectory."}]}
